void protocol witness for static ViewInputsModifier.graphInputsSemantics.getter in conformance _EnvironmentBackgroundStyleModifier<A>(uint64_t a1@<X8>)
{
  static ViewInputsModifier.graphInputsSemantics.getter(a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnvironmentBackgroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _EnvironmentBackgroundStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundStyleModifier2<A, B>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundStyleModifier2<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundStyleModifier3<A, B, C>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier3<A, B, C>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundStyleModifier3<A, B, C>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier3<A, B, C>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _PreferenceTransformModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrapeableAttachmentViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ScrapeableAttachmentViewModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TruePreferenceWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for TruePreferenceWritingModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _LuminanceToAlphaEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _LuminanceToAlphaEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000017, (void *)0x80000002352E7CE0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AlignmentLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _AlignmentLayout()
{
  specialized ViewModifier.bodyError()(0xD000000000000010, (void *)0x80000002352E7CC0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LuminanceCurveEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance LuminanceCurveEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x80000002352E7CA0);
}

void protocol witness for ViewModifier.body(content:) in conformance _AppearanceActionModifier()
{
  specialized ViewModifier.bodyError()(0xD000000000000019, (void *)0x80000002352E7C80);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnvironmentKeyTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyTransformModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnvironmentKeyTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyTransformModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScrollClipEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ScrollClipEffect<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnabledScrollClipEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _EnabledScrollClipEffect<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AddGestureModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for AddGestureModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SimultaneousGestureModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for SimultaneousGestureModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance HighPriorityGestureModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for HighPriorityGestureModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _FrameLayout()
{
  specialized ViewModifier.bodyError()(0x614C656D6172465FLL, (void *)0xEC00000074756F79);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FlexFrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _FlexFrameLayout()
{
  specialized ViewModifier.bodyError()(0xD000000000000010, (void *)0x80000002352E7C60);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextSuffixModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static TextSuffixModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextSuffixModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static TextSuffixModifier._makeInputs(modifier:inputs:));
}

void protocol witness for ViewModifier.body(content:) in conformance TextSuffixModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TextRendererViewModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _TextRendererViewModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TextRendererViewModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _TextRendererViewModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ArchivedAnimationModifier<A>.Effect(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for ArchivedAnimationModifier<A>.Effect);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContainerShapeModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ContainerShapeModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SystemContainerShapeModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for SystemContainerShapeModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LayoutPriorityLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance LayoutPriorityLayout()
{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x80000002352E7C40);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackdropEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _BackdropEffect<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VerticalStackOrientationModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance VerticalStackOrientationModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

void specialized ViewModifier.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x80000002352E7FD0;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x80000002352E7FB0;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x80000002352E7D00;
  v0._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static UnaryViewModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = *((_DWORD *)a2 + 16);
  v12 = a2[9];
  v13 = *((_BYTE *)a2 + 80);
  v24 = *a1;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v10;
  v20 = *((_OWORD *)a2 + 3);
  v21 = v11;
  v22 = v12;
  v23 = v13;
  return static ViewModifier.makeUnaryViewList(modifier:inputs:body:)((uint64_t)&v15, a3, a4, a5, *(_QWORD *)(a6 + 8), a7);
}

uint64_t static ViewModifier.makeUnaryViewList(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v19;
  unint64_t v20;
  uint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;

  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v19 = *(_OWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v20 = HIDWORD(v15);
  v26 = v8;
  v27 = v9;
  v28 = v10;
  v29 = *(_OWORD *)(a1 + 24);
  v30 = v19;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  *(_DWORD *)(v17 + 32) = v16;
  *(_DWORD *)(v17 + 36) = v20;
  *(_QWORD *)(v17 + 40) = v24;
  *(_QWORD *)(v17 + 48) = a2;
  *(_QWORD *)(v17 + 56) = a3;
  swift_retain();
  static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)(&v26, (uint64_t)partial apply for closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:), v17, a4, a6);
  return swift_release();
}

uint64_t static UnaryViewModifier._viewListCount(inputs:body:)()
{
  return 1;
}

uint64_t closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)a6 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 12) = result;
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 80);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(a1 + 8);
    v18 = a5;
    v16 = *(_QWORD *)a1;
    _GraphValue.init(_:)(result, &v27);
    v19 = v16;
    v20 = v15;
    v21 = v14;
    v17 = *(_OWORD *)(a1 + 40);
    v22 = *(_OWORD *)(a1 + 24);
    v23 = v17;
    v24 = *(_OWORD *)(a1 + 56);
    v25 = *(_QWORD *)(a1 + 72);
    v26 = v13;
    return static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(&v27, &v19, a2, a3, a4, v18, a6);
  }
  return result;
}

uint64_t static EmptyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 20);
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = v5;
  return a3(a1, &v8);
}

uint64_t static EmptyModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  char v18;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = a2[5];
  v6 = *((_DWORD *)a2 + 16);
  v7 = a2[9];
  v8 = *((_BYTE *)a2 + 80);
  v10 = *a2;
  v11 = v3;
  v12 = v4;
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v5;
  v15 = *((_OWORD *)a2 + 3);
  v16 = v6;
  v17 = v7;
  v18 = v8;
  return a3(a1, &v10);
}

uint64_t static EmptyModifier._viewListCount(inputs:body:)(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

void EmptyModifier.body(content:)()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for ViewModifier.body(content:) in conformance EmptyModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t ModifiedContent.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ModifiedContent.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ModifiedContent.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ModifiedContent.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ModifiedContent.modifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*ModifiedContent.modifier.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static ModifiedContent<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  type metadata accessor for ModifiedContent(0, a3, a4, v6);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static ModifiedContent<>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(int *, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t);
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int ShouldRecordTree;
  uint64_t v33;
  int v34;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  v33 = *a2;
  v12 = a2[2];
  v22 = *((_DWORD *)a2 + 6);
  v23 = *((_DWORD *)a2 + 2);
  v21 = *((_DWORD *)a2 + 7);
  v34 = *((_DWORD *)a2 + 8);
  v13 = a2[5];
  v14 = a2[6];
  v30 = *((_DWORD *)a2 + 14);
  v31 = *((_DWORD *)a2 + 9);
  v28 = *((_DWORD *)a2 + 16);
  v29 = *((_DWORD *)a2 + 15);
  v26 = *((_DWORD *)a2 + 18);
  v27 = *((_DWORD *)a2 + 17);
  v24 = *((_DWORD *)a2 + 20);
  v25 = *((_DWORD *)a2 + 19);
  v39 = a3;
  v40 = a4;
  v41 = a5;
  v42 = a6;
  LODWORD(v59) = v11;
  v15 = type metadata accessor for ModifiedContent(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v15, v16, v17);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a4, &v38);
  v36 = v38;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v59 = v33;
  v60 = v23;
  v61 = v12;
  v62 = v22;
  v63 = v21;
  v65 = v31;
  v66 = v13;
  v67 = v14;
  v68 = v30;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  v74 = v24;
  v37 = v36;
  v43 = v33;
  v44 = v23;
  v45 = v12;
  v46 = v22;
  v47 = v21;
  v48 = 0;
  v49 = v31;
  v50 = v13;
  v51 = v14;
  v52 = v30;
  v53 = v29;
  v54 = v28;
  v55 = v27;
  v56 = v26;
  v57 = v25;
  v58 = v24;
  v19 = *(void (**)(int *, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a6 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v19(&v37, &v43, partial apply for closure #2 in static ModifiedContent<>._makeView(view:inputs:), v18, a4, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v64 = v34;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v59);
    AGSubgraphEndTreeElement();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int ShouldRecordTree;
  void (*v20)(int *, uint64_t *, uint64_t, uint64_t);
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v11 = *((_DWORD *)a1 + 6);
  v12 = *((_DWORD *)a1 + 7);
  v29 = *((_DWORD *)a1 + 9);
  v30 = *((_DWORD *)a1 + 8);
  v13 = a1[5];
  v14 = a1[6];
  v27 = *((_DWORD *)a1 + 15);
  v28 = *((_DWORD *)a1 + 14);
  v25 = *((_DWORD *)a1 + 17);
  v26 = *((_DWORD *)a1 + 16);
  v23 = *((_DWORD *)a1 + 19);
  v24 = *((_DWORD *)a1 + 18);
  v22 = *((_DWORD *)a1 + 20);
  v35 = a3;
  v36 = a4;
  v37 = a5;
  v38 = a6;
  LODWORD(v55) = a2;
  v15 = type metadata accessor for ModifiedContent(255, a3, a4, a3);
  type metadata accessor for _GraphValue(0, v15, v16, v17);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), a3, &v34);
  v18 = v34;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v55 = v8;
  v56 = v9;
  v57 = v10;
  v58 = v11;
  v59 = v12;
  v61 = v29;
  v62 = v13;
  v63 = v14;
  v64 = v28;
  v65 = v27;
  v66 = v26;
  v67 = v25;
  v68 = v24;
  v69 = v23;
  v70 = v22;
  v33 = v18;
  v39 = v8;
  v40 = v9;
  v41 = v10;
  v42 = v11;
  v43 = v12;
  v44 = 0;
  v45 = v29;
  v46 = v13;
  v47 = v14;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v52 = v24;
  v53 = v23;
  v54 = v22;
  v20 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(&v33, &v39, a3, a5);
  v60 = v30;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v55);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static ModifiedContent<>._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  _DWORD v40[3];

  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[3];
  v14 = a2[4];
  v26 = a2[5];
  v27 = a2[2];
  v24 = a2[7];
  v25 = a2[6];
  v23 = *((_DWORD *)a2 + 16);
  v22 = a2[9];
  v21 = *((_BYTE *)a2 + 80);
  v10 = *a1;
  v15 = type metadata accessor for ModifiedContent(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v15, v16, v17);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a4, v40);
  v18 = v40[0];
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  *(_QWORD *)(v19 + 32) = a5;
  *(_QWORD *)(v19 + 40) = a6;
  *(_DWORD *)(v19 + 48) = v10;
  if (AGSubgraphShouldRecordTree())
    AGSubgraphBeginTreeElement();
  v39 = v18;
  v28 = v11;
  v29 = v12;
  v30 = v27;
  v31 = v13;
  v32 = v14;
  v33 = v26;
  v34 = v25;
  v35 = v24;
  v36 = v23;
  v37 = v22;
  v38 = v21;
  (*(void (**)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(&v39, &v28, partial apply for closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), v19, a4, a6);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v18, a4, a6);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  int v35;
  _DWORD v36[3];

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  v15 = a2[7];
  v23 = *((_DWORD *)a2 + 16);
  v22 = a2[9];
  v21 = *((_BYTE *)a2 + 80);
  LODWORD(v24) = a3;
  v16 = type metadata accessor for ModifiedContent(255, a4, a5, a4);
  type metadata accessor for _GraphValue(0, v16, v17, v18);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), a4, v36);
  v19 = v36[0];
  if (AGSubgraphShouldRecordTree())
    AGSubgraphBeginTreeElement();
  v35 = v19;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  v30 = v14;
  v31 = v15;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(&v35, &v24, a4, a6);
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v19, a4, a6);
}

uint64_t static ModifiedContent<>._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  _QWORD v8[6];
  __int128 v9;
  int v10;
  uint64_t v11;

  v5 = *((_DWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 3);
  v9 = *a1;
  v10 = v5;
  v11 = v6;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a5;
  return (*(uint64_t (**)(__int128 *, uint64_t (*)(__int128 *), _QWORD *, uint64_t))(a5 + 40))(&v9, partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:), v8, a3);
}

void ModifiedContent<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> ModifiedContent<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ModifiedContent<>._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> ModifiedContent<A, B>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> ModifiedContent<A, B>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void protocol witness for View.body.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v35;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = *((_DWORD *)a1 + 2);
  v12 = a1[2];
  v13 = *((_DWORD *)a1 + 6);
  v14 = *((_DWORD *)a1 + 7);
  v35 = *((_DWORD *)a1 + 8);
  v15 = a1[5];
  v16 = a1[6];
  v17 = *((_DWORD *)a1 + 15);
  v29 = *((_DWORD *)a1 + 14);
  v30 = *((_DWORD *)a1 + 9);
  v27 = *((_DWORD *)a1 + 17);
  v28 = *((_DWORD *)a1 + 16);
  v25 = *((_DWORD *)a1 + 19);
  v26 = *((_DWORD *)a1 + 18);
  v24 = *((_DWORD *)a1 + 20);
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a9;
  LODWORD(v59) = a2;
  v18 = type metadata accessor for ModifiedContent(255, a5, a6, a3);
  type metadata accessor for _GraphValue(0, v18, v19, v20);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), a5, &v38);
  v21 = v38;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v59 = v10;
  v60 = v11;
  v61 = v12;
  v62 = v13;
  v63 = v14;
  v65 = v30;
  v66 = v15;
  v67 = v16;
  v68 = v29;
  v69 = v17;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  v74 = v24;
  v37 = v21;
  v43 = v10;
  v44 = v11;
  v45 = v12;
  v46 = v13;
  v47 = v14;
  v48 = 0;
  v49 = v30;
  v50 = v15;
  v51 = v16;
  v52 = v29;
  v53 = v17;
  v54 = v28;
  v55 = v27;
  v56 = v26;
  v57 = v25;
  v58 = v24;
  v22 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22(&v37, &v43, a3, a4, a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v64 = v35;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a8, (uint64_t)&v59);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static ModifiedContent<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int ShouldRecordTree;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  int v44;
  _DWORD v45[3];

  v32 = *a2;
  v31 = *((_DWORD *)a2 + 2);
  v15 = a2[3];
  v16 = a2[4];
  v29 = a2[5];
  v30 = a2[2];
  v27 = a2[7];
  v28 = a2[6];
  v26 = *((_DWORD *)a2 + 16);
  v25 = a2[9];
  v24 = *((_BYTE *)a2 + 80);
  v14 = *a1;
  v17 = type metadata accessor for ModifiedContent(255, a5, a6, a4);
  type metadata accessor for _GraphValue(0, v17, v18, v19);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a6, v45);
  v20 = v45[0];
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a5;
  *(_QWORD *)(v21 + 24) = a6;
  *(_QWORD *)(v21 + 32) = a7;
  *(_QWORD *)(v21 + 40) = a8;
  *(_DWORD *)(v21 + 48) = v14;
  *(_QWORD *)(v21 + 56) = a3;
  *(_QWORD *)(v21 + 64) = a4;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v44 = v20;
  v33 = v32;
  v34 = v31;
  v35 = v30;
  v36 = v15;
  v37 = v16;
  v38 = v29;
  v39 = v28;
  v40 = v27;
  v41 = v26;
  v42 = v25;
  v43 = v24;
  (*(void (**)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32))(&v44, &v33, partial apply for closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:), v21, a6, a8);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v20, a6, a8);
  return swift_release();
}

uint64_t closure #1 in static ModifiedContent<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];

  v9 = type metadata accessor for ModifiedContent(0, a2, a3, a4);
  v10 = a1 + *(int *)(v9 + 36);
  v14[2] = v9;
  v14[3] = a3;
  v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  return v14[5];
}

uint64_t closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  _DWORD v40[3];

  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v16 = a2[6];
  v17 = a2[7];
  v25 = *((_DWORD *)a2 + 16);
  v24 = a2[9];
  v23 = *((_BYTE *)a2 + 80);
  LODWORD(v28) = a3;
  v18 = type metadata accessor for ModifiedContent(255, a6, a7, a4);
  type metadata accessor for _GraphValue(0, v18, v19, v20);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:), a6, v40);
  v21 = v40[0];
  if (AGSubgraphShouldRecordTree())
    AGSubgraphBeginTreeElement();
  v39 = v21;
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v13;
  v32 = v14;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v25;
  v37 = v24;
  v38 = v23;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(&v39, &v28, a4, a5, a6, a8);
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v21, a6, a8);
}

uint64_t closure #1 in closure #2 in static ModifiedContent<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v12[2] = type metadata accessor for ModifiedContent(0, a2, a3, a4);
  v12[3] = a2;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  return v12[5];
}

uint64_t static ModifiedContent<>._viewListCount(inputs:body:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  _QWORD v10[8];
  __int128 v11;
  int v12;
  uint64_t v13;

  v7 = *((_DWORD *)a1 + 4);
  v8 = *((_QWORD *)a1 + 3);
  v11 = *a1;
  v12 = v7;
  v13 = v8;
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a6;
  v10[5] = a7;
  v10[6] = a2;
  v10[7] = a3;
  return (*(uint64_t (**)(__int128 *, uint64_t (*)(__int128 *), _QWORD *, uint64_t, uint64_t))(a7 + 40))(&v11, partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:body:), v10, a5, a7);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  return static ModifiedContent<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a6 - 8), *(_QWORD *)(a6 - 16), a7);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a6 - 8), *(_QWORD *)(a6 - 16));
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance <> ModifiedContent<A, B>(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ModifiedContent<>._viewListCount(inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), *(_QWORD *)(a5 - 8), *(_QWORD *)(a5 - 16));
}

uint64_t ModifiedContent.customViewDebugMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Mirror();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for CustomViewDebugReflectable.customViewDebugMirror.getter in conformance ModifiedContent<A, B>@<X0>(uint64_t a1@<X8>)
{
  return ModifiedContent.customViewDebugMirror.getter(a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AppearanceAnimationView<A, B>.AnimationEffect(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for AppearanceAnimationView<A, B>.AnimationEffect);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _BackgroundModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)protocol witness table for _BackgroundStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundShapeModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _BackgroundShapeModifier<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _InsettableBackgroundShapeModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _InsettableBackgroundShapeModifier<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentTransitionModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ContentTransitionModifier()
{
  specialized ViewModifier.bodyError()(0xD00000000000001ALL, (void *)0x80000002352E7C20);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentTransitionGroup@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ContentTransitionGroup()
{
  specialized ViewModifier.bodyError()(0xD000000000000017, (void *)0x80000002352E7C00);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentTransitionEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentTransitionEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000017, (void *)0x80000002352E7BE0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ApplyTransitionModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for ApplyTransitionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SaturationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SaturationEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x80000002352E5E10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SafeAreaIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SafeAreaIgnoringLayout()
{
  specialized ViewModifier.bodyError()(0xD000000000000017, (void *)0x80000002352E7BC0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SafeAreaRegionsIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SafeAreaRegionsIgnoringLayout()
{
  specialized ViewModifier.bodyError()(0xD00000000000001ELL, (void *)0x80000002352E7BA0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMultiplyEffect._Resolved@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMultiplyEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x80000002352E10C0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ClipEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ClipEffect<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TransactionModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TransactionModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _TransactionModifier()
{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x80000002352E7B80);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueTransactionModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _ValueTransactionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueTransactionModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _ValueTransactionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PushPopTransactionModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _PushPopTransactionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SpacingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance SpacingLayout()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SafeAreaInsetsModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SafeAreaInsetsModifier()
{
  specialized ViewModifier.bodyError()(0xD000000000000017, (void *)0x80000002352E7B60);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SystemColorSchemeModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t *))
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v9 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = a2[6];
  v14 = *((_DWORD *)a2 + 20);
  v26 = *a2;
  v27 = v10;
  v28 = v11;
  v29 = *(_OWORD *)(a2 + 3);
  v30 = v12;
  v31 = v13;
  v32 = *(_OWORD *)(a2 + 7);
  v33 = a2[9];
  v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a7(v9, &v26);
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SystemColorSchemeModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t *))
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  char v35;

  v9 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = *((_DWORD *)a2 + 16);
  v14 = a2[9];
  v15 = *((_BYTE *)a2 + 80);
  v27 = *a2;
  v28 = v10;
  v29 = v11;
  v30 = *(_OWORD *)(a2 + 3);
  v31 = v12;
  v32 = *((_OWORD *)a2 + 3);
  v33 = v13;
  v34 = v14;
  v35 = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  a7(v9, &v27);
  v18 = v27;
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  v26 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v16 = swift_bridgeObjectRetain();
  a3(v16, &v18);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance SystemColorSchemeModifier()
{
  specialized ViewModifier.bodyError()(0xD000000000000019, (void *)0x80000002352E7B40);
}

void protocol witness for ViewModifier.body(content:) in conformance _ScaleEffect()
{
  specialized ViewModifier.bodyError()(0x6645656C6163535FLL, (void *)0xEC00000074636566);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _InsetViewModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _InsetViewModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _HueRotationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _HueRotationEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000012, (void *)0x80000002352E5DD0);
}

void specialized ViewModifier<>.body(content:)()
{
  specialized ViewModifier.bodyError()();
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static ModifiedContent<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for ModifiedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedContent);
}

uint64_t sub_23510DCE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2, *(_QWORD *)(v2 + 40));
}

uint64_t sub_23510DD38()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:)(a1, v2[6], v2[7], v2[2], v2[3], a2);
}

uint64_t sub_23510DD6C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeView(view:inputs:)(a1, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_23510DD8C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *((_DWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 3);
  v6 = *a1;
  v7 = v3;
  v8 = v4;
  return (*(uint64_t (**)(__int128 *))(v2 + 40))(&v6);
}

void specialized ViewModifier.bodyError()(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ModifiedContent<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v7[2];

  v6 = type metadata accessor for ModifiedContent(0, a1, a2, a4);
  v7[0] = a3;
  v7[1] = a4;
  MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v7);
  specialized View.bodyError()();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:body:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  uint64_t v10;

  v2 = v1[4];
  v3 = v1[6];
  v4 = v1[7];
  v5 = *((_DWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 3);
  v8 = *a1;
  v9 = v5;
  v10 = v6;
  return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v2 + 40))(&v8, v3, v4);
}

uint64_t dispatch thunk of static ViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of static ViewModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static ViewModifier._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of ViewModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static ViewInputsModifier.graphInputsSemantics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static ViewInputsModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for EmptyModifier()
{
  return &type metadata for EmptyModifier;
}

uint64_t getEnumTagSinglePayload for ModifiedContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23510E0C4 + 4 * byte_2352CA270[v17 - 1]))();
}

void storeEnumTagSinglePayload for ModifiedContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

unint64_t lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform;
  if (!lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _SafeAreaInsetsModifier.Transform, &type metadata for _SafeAreaInsetsModifier.Transform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets;
  if (!lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _SafeAreaInsetsModifier.Insets, &type metadata for _SafeAreaInsetsModifier.Insets);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UpdateEnvironment);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UpdateEnvironment<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static ModifiedContent<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static ModifiedContent<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

void Image.Headroom.init(rawValue:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

BOOL static Image.DynamicRange.Storage.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t Image.DynamicRange.Storage.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Image.DynamicRange.Storage.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Image.DynamicRange.Storage@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  return Image.DynamicRange.Storage.init(rawValue:)(*a1, a2);
}

void Image.DynamicRange.storage.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Image.DynamicRange.storage.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Image.DynamicRange.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_BYTE *Image.DynamicRange.init(storage:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static Image.DynamicRange.standard.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Image.DynamicRange.constrainedHigh.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Image.DynamicRange.high.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double Image.DynamicRange.maxHeadroom.getter@<D0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t *v3;
  double result;

  if (*v1)
  {
    if (*v1 == 1)
    {
      if (one-time initialization token for constrainedHigh != -1)
        swift_once();
      v3 = &static Image.Headroom.constrainedHigh;
    }
    else
    {
      if (one-time initialization token for high != -1)
        swift_once();
      v3 = &static Image.Headroom.high;
    }
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v3 = &static Image.Headroom.standard;
  }
  result = *(double *)v3;
  *a1 = *v3;
  return result;
}

void Image.DynamicRange.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Image.DynamicRange.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Image.DynamicRange.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double Image.Headroom.rawValue.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

BOOL static Image.Headroom.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static Image.Headroom.standard.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for standard, (double *)&static Image.Headroom.standard, a1);
}

void one-time initialization function for constrainedHigh()
{
  static Image.Headroom.constrainedHigh = 0x4000000000000000;
}

double static Image.Headroom.constrainedHigh.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for constrainedHigh, (double *)&static Image.Headroom.constrainedHigh, a1);
}

void one-time initialization function for highHLG()
{
  static Image.Headroom.highHLG = 0x4014000000000000;
}

double static Image.Headroom.highHLG.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for highHLG, (double *)&static Image.Headroom.highHLG, a1);
}

void one-time initialization function for high()
{
  static Image.Headroom.high = 0x4020000000000000;
}

double static Image.Headroom.high.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for high, (double *)&static Image.Headroom.high, a1);
}

uint64_t Image.allowedDynamicRange(_:)(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *a1;
  type metadata accessor for ImageProviderBox<Image.DynamicRangeProvider>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

void type metadata accessor for ImageProviderBox<Image.DynamicRangeProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ImageProviderBox<Image.DynamicRangeProvider>)
  {
    v2 = lazy protocol witness table accessor for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider();
    v4 = type metadata accessor for ImageProviderBox(a1, (uint64_t)&unk_25064BCA8, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.DynamicRangeProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider;
  if (!lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.DynamicRangeProvider, &unk_25064BCA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider;
  if (!lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.DynamicRangeProvider, &unk_25064BCA8);
    atomic_store(result, &lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider);
  }
  return result;
}

uint64_t protocol witness for ImageProvider.resolve(in:) in conformance Image.DynamicRangeProvider(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v2 = v1;
  v4 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v6);
  if (v8 != 3)
    v6[*(int *)(v4 + 36)] = v8;
  (*(void (**)(char *))(*(_QWORD *)v7 + 80))(v6);
  return outlined destroy of ImageResolutionContext((uint64_t)v6);
}

uint64_t protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.DynamicRangeProvider(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v2 = v1;
  v4 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v6);
  if (v8 != 3)
    v6[*(int *)(v4 + 36)] = v8;
  (*(void (**)(char *))(*(_QWORD *)v7 + 88))(v6);
  return outlined destroy of ImageResolutionContext((uint64_t)v6);
}

uint64_t EnvironmentValues.allowedDynamicRange.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.allowedDynamicRange : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.allowedDynamicRange.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.allowedDynamicRange.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 3;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.allowedDynamicRange.modify;
}

uint64_t EnvironmentValues.allowedDynamicRange.modify(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>);
  }
}

uint64_t EnvironmentValues.maxAllowedDynamicRange.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 8);
  swift_retain();
  v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, a1);
  swift_release();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.maxAllowedDynamicRange : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, &v6);
  swift_release();
  result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.maxAllowedDynamicRange.setter(unsigned __int8 *a1)
{
  return specialized EnvironmentValues.subscript.setter(*a1);
}

uint64_t (*EnvironmentValues.maxAllowedDynamicRange.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(_QWORD *)(v1 + 8);
  swift_retain();
  v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, v2);
  swift_release();
  swift_release();
  return EnvironmentValues.maxAllowedDynamicRange.modify;
}

uint64_t EnvironmentValues.maxAllowedDynamicRange.modify(uint64_t a1)
{
  return specialized EnvironmentValues.subscript.setter(*(_BYTE *)(a1 + 8));
}

void static EnvironmentValues.MaxAllowedDynamicRangeKey.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t Image.DynamicRange.protobufValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t Image.DynamicRange.init(protobufValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage;
  if (!lazy protocol witness table cache variable for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.DynamicRange.Storage, &type metadata for Image.DynamicRange.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.DynamicRange and conformance Image.DynamicRange()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange;
  if (!lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.DynamicRange, &type metadata for Image.DynamicRange);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Headroom and conformance Image.Headroom()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Headroom and conformance Image.Headroom;
  if (!lazy protocol witness table cache variable for type Image.Headroom and conformance Image.Headroom)
  {
    result = MEMORY[0x23B7C9C04]("Mx:\x1Bؤ\t", &type metadata for Image.Headroom);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Headroom and conformance Image.Headroom);
  }
  return result;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Image.DynamicRange@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t sub_23510EF84(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.allowedDynamicRange.setter(&v2);
}

uint64_t sub_23510EFBC(unsigned __int8 *a1)
{
  return specialized EnvironmentValues.subscript.setter(*a1);
}

ValueMetadata *type metadata accessor for Image.DynamicRange()
{
  return &type metadata for Image.DynamicRange;
}

uint64_t storeEnumTagSinglePayload for Image.DynamicRange(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23510F040 + 4 * byte_2352CA465[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23510F074 + 4 * byte_2352CA460[v4]))();
}

uint64_t sub_23510F074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23510F07C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23510F084);
  return result;
}

uint64_t sub_23510F090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23510F098);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23510F09C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23510F0A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Image.DynamicRange.Storage()
{
  return &type metadata for Image.DynamicRange.Storage;
}

ValueMetadata *type metadata accessor for Image.Headroom()
{
  return &type metadata for Image.Headroom;
}

ValueMetadata *type metadata accessor for EnvironmentValues.MaxAllowedDynamicRangeKey()
{
  return &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey;
}

void *type metadata accessor for Image.DynamicRangeProvider()
{
  return &unk_25064BCA8;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AllowedDynamicRangeKey()
{
  return &type metadata for EnvironmentValues.AllowedDynamicRangeKey;
}

unint64_t instantiation function for generic protocol witness table for Image.DynamicRangeProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Image.DynamicRangeProvider.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = a1[8];
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 && ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))() & 1) == 0)
    return 0;
  if (v2 == 3)
  {
    if (v3 != 3)
      return 0;
  }
  else if (v3 == 3 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t SymbolVariants.Shape.path(in:cornerRadius:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  _BYTE *v6;
  double v12;
  double v13;
  CGFloat v14;
  double Width;
  double Height;
  double v17;
  char v18;
  uint64_t result;
  BOOL IsInfinite;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  if (!*v6)
  {
    if (!CGRectIsNull(*(CGRect *)&a3))
    {
      v24.origin.x = a3;
      v24.origin.y = a4;
      v24.size.width = a5;
      v24.size.height = a6;
      IsInfinite = CGRectIsInfinite(v24);
      result = *(_QWORD *)&a3;
      v18 = !IsInfinite;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  v12 = 0.0;
  if (*(float *)&a1 >= 0.0)
    v12 = *(float *)&a1;
  if (v12 > 0.5)
    v12 = 0.5;
  if ((a1 & 0x100000000) != 0)
    v13 = 0.225;
  else
    v13 = v12;
  v14 = a4;
  Width = CGRectGetWidth(*(CGRect *)&a3);
  v21.origin.x = a3;
  v21.origin.y = a4;
  v21.size.width = a5;
  v21.size.height = a6;
  Height = CGRectGetHeight(v21);
  if (Height < Width)
    Width = Height;
  v22.origin.x = a3;
  v22.origin.y = a4;
  v22.size.width = a5;
  v22.size.height = a6;
  if (CGRectIsNull(v22))
  {
LABEL_16:
    result = 0;
    v18 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
    goto LABEL_19;
  }
  v17 = v13 * Width;
  if (v17 == 0.0
    || (v23.origin.x = a3, v23.origin.y = a4, v23.size.width = a5, v23.size.height = a6, CGRectIsInfinite(v23)))
  {
    v18 = 0;
    result = *(_QWORD *)&a3;
  }
  else
  {
    result = swift_allocObject();
    *(CGFloat *)(result + 16) = a3;
    *(CGFloat *)(result + 24) = a4;
    *(CGFloat *)(result + 32) = a5;
    *(CGFloat *)(result + 40) = a6;
    v18 = 2;
    a4 = 0.0;
    *(double *)(result + 48) = v17;
    *(double *)(result + 56) = v17;
    a5 = 0.0;
    a6 = 0.0;
    *(_BYTE *)(result + 64) = 1;
  }
LABEL_19:
  *(_QWORD *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_BYTE *)(a2 + 32) = v18;
  return result;
}

uint64_t SymbolVariants.contains(_:)(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  _BOOL4 v5;
  unsigned int v6;

  v2 = a1[1];
  v3 = v1[1];
  v5 = v3 != 3 && v3 == v2;
  v6 = v2 == 3 || v5;
  if ((*a1 & ~*v1) != 0)
    return 0;
  else
    return v6;
}

Swift::String_optional __swiftcall SymbolVariants.shapeVariantName(name:)(Swift::String name)
{
  Swift::String_optional result;

  __asm { BR              X12 }
  return result;
}

uint64_t sub_23510F3EC()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  v1 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t EnvironmentValues.symbolVariants.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.symbolsGrowToFitBackground.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t EnvironmentValues.symbolBackgroundCornerRadius.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    v3 = swift_retain_n();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)&v5);
  }
  swift_release_n();
  return v2;
}

uint64_t SymbolVariants.Shape.suffix.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6572617571732ELL;
  if (*v0 != 1)
    v1 = 0x676E61746365722ELL;
  if (*v0)
    return v1;
  else
    return 0x656C637269632ELL;
}

BOOL static SymbolVariants.Shape.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SymbolVariants.Shape.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SymbolVariants.Shape.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static SymbolVariants.none.getter(_WORD *a1@<X8>)
{
  *a1 = 768;
}

void one-time initialization function for circle()
{
  static SymbolVariants.circle = 0;
}

_QWORD *static SymbolVariants.circle.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SymbolVariants.circle.getter(one-time initialization token for circle, &static SymbolVariants.circle, (char *)&static SymbolVariants.circle + 1, a1);
}

void one-time initialization function for square()
{
  static SymbolVariants.square = 256;
}

_QWORD *static SymbolVariants.square.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for square, &static SymbolVariants.square, (char *)&static SymbolVariants.square + 1, a1);
}

void one-time initialization function for rectangle()
{
  static SymbolVariants.rectangle = 512;
}

_QWORD *static SymbolVariants.rectangle.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for rectangle, &static SymbolVariants.rectangle, (char *)&static SymbolVariants.rectangle + 1, a1);
}

void SymbolVariants.circle.getter(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void SymbolVariants.square.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
  a1[1] = 1;
}

void SymbolVariants.rectangle.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
  a1[1] = 2;
}

void one-time initialization function for fill()
{
  static SymbolVariants.fill = 769;
}

_QWORD *static SymbolVariants.fill.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for fill, &static SymbolVariants.fill, (char *)&static SymbolVariants.fill + 1, a1);
}

void SymbolVariants.fill.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1 | 1;
  a1[1] = v2;
}

void one-time initialization function for background()
{
  static SymbolVariants.background = 772;
}

_QWORD *static SymbolVariants.background.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for background, &static SymbolVariants.background, (char *)&static SymbolVariants.background + 1, a1);
}

void SymbolVariants.background.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1 | 4;
  a1[1] = v2;
}

void one-time initialization function for slash()
{
  static SymbolVariants.slash = 770;
}

_QWORD *static SymbolVariants.slash.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for slash, &static SymbolVariants.slash, (char *)&static SymbolVariants.slash + 1, a1);
}

_QWORD *static SymbolVariants.circle.getter@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X1>, char *a3@<X2>, _BYTE *a4@<X8>)
{
  char v7;

  if (*result != -1)
    result = (_QWORD *)swift_once();
  v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  return result;
}

void SymbolVariants.slash.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1 | 2;
  a1[1] = v2;
}

_BYTE *SymbolVariants.formUnion(_:)(_BYTE *result)
{
  _BYTE *v1;
  int v2;
  char v3;

  v2 = result[1];
  *v1 |= *result;
  v3 = v1[1];
  if (v2 != 3)
    v3 = v2;
  v1[1] = v3;
  return result;
}

void SymbolVariants.hash(into:)()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

uint64_t static SymbolVariants.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 == 3)
  {
    if (v3 != 3)
      return 0;
  }
  else if (v3 == 3 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

Swift::Int SymbolVariants.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = v0[1];
  v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SymbolVariants()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = v0[1];
  v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SymbolVariants()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SymbolVariants()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;

  Hasher.init(_seed:)();
  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t View.symbolVariant(_:)(__int16 *a1, uint64_t a2, uint64_t a3)
{
  __int16 v5;
  uint64_t *KeyPath;
  uint64_t v7;

  v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v7 = swift_allocObject();
  *(_WORD *)(v7 + 16) = v5;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.symbolVariant(_:), v7, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.symbolVariants : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int16 v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.symbolVariants : EnvironmentValues(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return EnvironmentValues.symbolVariants.setter(&v2);
}

uint64_t sub_23510FD44(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return EnvironmentValues.symbolVariants.setter(&v2);
}

uint64_t EnvironmentValues.symbolVariants.setter(__int16 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_23510FE14()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.symbolVariant(_:)(_BYTE *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(unsigned __int8 *)(v1 + 17);
  *result |= *(_BYTE *)(v1 + 16);
  v3 = result[1];
  if (v2 != 3)
    v3 = v2;
  result[1] = v3;
  return result;
}

uint64_t (*EnvironmentValues.symbolVariants.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  _BYTE *v5;
  uint64_t v6;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;

  v5 = (_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SymbolVariantsKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v8);
    v9 = swift_retain_n();
    v10 = specialized find1<A>(_:key:filter:)(v9, v14);
    if (v10)
    {
      v11 = *(_BYTE *)(v10 + 72);
      v12 = *(_BYTE *)(v10 + 73);
    }
    else
    {
      v11 = 0;
      v12 = 3;
    }
    *(_BYTE *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 25) = v12;
  }
  swift_release_n();
  return EnvironmentValues.symbolVariants.modify;
}

uint64_t EnvironmentValues.symbolVariants.modify(uint64_t a1)
{
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_WORD *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.symbolBackgroundCornerRadius : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    v6 = v5;
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    v6 = v8;
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t EnvironmentValues.symbolBackgroundCornerRadius.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2 & 1;
  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, v4);
  swift_release();
  if (v2[1])
  {
    v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.symbolBackgroundCornerRadius.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  *((_BYTE *)v3 + 8) = v7 & 1;
  return EnvironmentValues.symbolBackgroundCornerRadius.modify;
}

void EnvironmentValues.symbolBackgroundCornerRadius.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[5];
  v3 = **a1;
  v4 = *((_BYTE *)*a1 + 8);
  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  if (v2[1])
  {
    v6 = *(_QWORD *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t key path getter for EnvironmentValues.symbolsGrowToFitBackground : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.symbolsGrowToFitBackground.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.symbolsGrowToFitBackground.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.symbolsGrowToFitBackground.modify;
}

void EnvironmentValues.symbolsGrowToFitBackground.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance SymbolVariantsKey(_WORD *a1@<X8>)
{
  *a1 = 768;
}

void type metadata accessor for EnvironmentPropertyKey<SymbolVariantsKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>);
  }
}

unint64_t lazy protocol witness table accessor for type SymbolVariants.Shape and conformance SymbolVariants.Shape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolVariants.Shape and conformance SymbolVariants.Shape;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Shape and conformance SymbolVariants.Shape)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolVariants.Shape, &type metadata for SymbolVariants.Shape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Shape and conformance SymbolVariants.Shape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolVariants and conformance SymbolVariants()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolVariants and conformance SymbolVariants;
  if (!lazy protocol witness table cache variable for type SymbolVariants and conformance SymbolVariants)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolVariants, &type metadata for SymbolVariants);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants and conformance SymbolVariants);
  }
  return result;
}

uint64_t sub_2351106C4(uint64_t a1)
{
  return EnvironmentValues.symbolBackgroundCornerRadius.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_2351106F4(char *a1)
{
  return EnvironmentValues.symbolsGrowToFitBackground.setter(*a1);
}

uint64_t getEnumTagSinglePayload for SymbolVariants(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 65283 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65283 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65283;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65283;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65283;
  }
LABEL_17:
  if (*((unsigned __int8 *)a1 + 1) <= 3u)
    v6 = 3;
  else
    v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 - 4;
  if (*((unsigned __int8 *)a1 + 1) < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolVariants(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65283 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65283 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_235110808 + 4 * byte_2352CA799[v4]))();
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_23511083C + 4 * byte_2352CA794[v4]))();
}

uint64_t sub_23511083C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_235110844(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x23511084CLL);
  return result;
}

uint64_t sub_235110858(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x235110860);
  *(_BYTE *)(result + 1) = a2 + 3;
  return result;
}

uint64_t sub_235110864(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_23511086C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SymbolVariants()
{
  return &type metadata for SymbolVariants;
}

uint64_t storeEnumTagSinglePayload for SymbolVariants.Shape(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2351108D4 + 4 * byte_2352CA7A3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235110908 + 4 * byte_2352CA79E[v4]))();
}

uint64_t sub_235110908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235110910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235110918);
  return result;
}

uint64_t sub_235110924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23511092CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_235110930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235110938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SymbolVariants.Shape()
{
  return &type metadata for SymbolVariants.Shape;
}

uint64_t sub_235110954(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>)
  {
    v4 = type metadata accessor for _EnvironmentKeyTransformModifier(0, (uint64_t)&type metadata for SymbolVariants, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>);
  }
}

void *type metadata accessor for SymbolVariants.Flags()
{
  return &unk_25061C010;
}

ValueMetadata *type metadata accessor for SymbolVariantsKey()
{
  return &type metadata for SymbolVariantsKey;
}

unint64_t lazy protocol witness table accessor for type SymbolVariants.Flags and conformance SymbolVariants.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolVariants.Flags, &unk_25061C010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolVariants.Flags, &unk_25061C010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolVariants.Flags, &unk_25061C010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolVariants.Flags, &unk_25061C010);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

uint64_t sub_235110B44()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for SymbolBackgroundCornerRadiusKey()
{
  return &type metadata for SymbolBackgroundCornerRadiusKey;
}

ValueMetadata *type metadata accessor for SymbolsGrowToFitBackgroundKey()
{
  return &type metadata for SymbolsGrowToFitBackgroundKey;
}

void View.appearanceAnimation<A>(animation:modifier:)(uint64_t a1@<X0>, void (*a2)(_QWORD, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a4;
  v18 = a5;
  v16 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  ((void (*)(uint64_t, _QWORD, double))a2)(v6, 0, v14);
  a2(v6, 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6, a3);
  AppearanceAnimationView.init(content:from:to:animation:)((uint64_t)v11, a3, v16);
}

uint64_t sub_235110C80()
{
  return swift_retain();
}

void AppearanceAnimationView.init(content:from:to:animation:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for AppearanceAnimationView();
}

uint64_t sub_235110D10(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32);
  v7(v5 + a1[13], v4, v1);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v5 + a1[14], v3, v1);
  *(_QWORD *)(v5 + a1[15]) = v2;
  return result;
}

void AppearanceAnimationView.body.getter(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for AppearanceAnimationView.NormalBody();
}

void sub_235110DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  *(_QWORD *)(v4 - 136) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v1 + 16))(v3, *(_QWORD *)(v4 - 128), v2, v6);
  AppearanceAnimationView.NormalBody.init(view:)();
}

uint64_t sub_235110E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>.NormalBody, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 136) + 8);
  v5(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v0, v1, *(_QWORD *)(v3 - 120));
  return v5(v0, v1);
}

void type metadata accessor for AppearanceAnimationView.NormalBody()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void AppearanceAnimationView.NormalBody.init(view:)()
{
  property wrapper backing initializer of AppearanceAnimationView.NormalBody.state();
}

void sub_235110F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)v2 = a1;
  *(_BYTE *)(v2 + 4) = BYTE4(a1) & 1;
  *(_QWORD *)(v2 + 8) = a2;
  type metadata accessor for AppearanceAnimationView.NormalBody();
}

void sub_235110F3C()
{
  type metadata accessor for AppearanceAnimationView();
}

uint64_t sub_235110F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void property wrapper backing initializer of AppearanceAnimationView.NormalBody.state()
{
  type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
}

uint64_t sub_235110FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  State.init(wrappedValue:)(v4 - 8, a1, a3, a4, (uint64_t)&v7);
  v5 = 0x100000000;
  if (!v8)
    v5 = 0;
  return v5 | v7;
}

void AppearanceAnimationView.NormalBody.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[28];

  v9[14] = a2;
  v9[5] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[7] = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[3] = v2;
  MEMORY[0x24BDAC7A8](v3);
  v9[4] = (char *)v9 - v4;
  v6 = *(_QWORD *)(v5 + 24);
  v9[2] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = *(_QWORD *)(v7 + 40);
  v9[23] = v6;
  v9[24] = MEMORY[0x24BEE44F0];
  v9[25] = v8;
  v9[26] = MEMORY[0x24BEE4500];
  type metadata accessor for IDView();
}

void sub_2351110E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v13 - 224) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v13 - 168) = (char *)&a9 - v14;
  *(_QWORD *)(v13 - 208) = v15;
  v17 = type metadata accessor for ModifiedContent(0, v15, (uint64_t)&type metadata for _AppearanceActionModifier, v16);
  *(_QWORD *)(v13 - 200) = v17;
  *(_QWORD *)(v13 - 216) = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v13 - 240) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v13 - 232) = (char *)&a9 - v20;
  v21 = *(_BYTE *)(v9 + 4);
  v22 = *(_QWORD *)(v9 + 8);
  *(_DWORD *)(v13 - 136) = *(_DWORD *)v9;
  *(_BYTE *)(v13 - 132) = v21;
  v23 = *(_QWORD *)(v12 + 16);
  v24 = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v13 - 184) = v24;
  *(_QWORD *)(v13 - 176) = v23;
  *(_QWORD *)(v13 - 128) = v22;
  *(_QWORD *)(v13 - 120) = v23;
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 104) = v24;
  *(_QWORD *)(v13 - 160) = v10;
  *(_QWORD *)(v13 - 96) = v10;
  type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
}

void sub_2351111C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for State(0, a1, a3, a4);
  State.wrappedValue.getter(v7, v6 - 120);
  v8 = *(unsigned __int8 *)(v6 - 116);
  *(_QWORD *)(v6 - 256) = v4;
  if (v8 == 1)
  {
    *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 176);
    *(_QWORD *)(v6 - 112) = v5;
    v9 = *(_QWORD *)(v6 - 160);
    *(_QWORD *)(v6 - 104) = *(_QWORD *)(v6 - 184);
    *(_QWORD *)(v6 - 96) = v9;
    type metadata accessor for AppearanceAnimationView();
  }
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 176);
  *(_QWORD *)(v6 - 112) = v5;
  v10 = *(_QWORD *)(v6 - 160);
  *(_QWORD *)(v6 - 104) = *(_QWORD *)(v6 - 184);
  *(_QWORD *)(v6 - 96) = v10;
  type metadata accessor for AppearanceAnimationView();
}

uint64_t sub_2351112B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  v6 = *(_QWORD *)(v5 - 264);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v5 - 288) = v7;
  v8 = *(_QWORD *)(v5 - 272);
  v9 = *(_QWORD *)(v5 - 256);
  v7(v8, v0, v9);
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 + 48) & ~v10;
  *(_QWORD *)(v5 - 280) += v11;
  *(_QWORD *)(v5 - 296) = v10 | 7;
  v12 = (char *)swift_allocObject();
  v14 = *(_QWORD *)(v5 - 184);
  v13 = *(_QWORD *)(v5 - 176);
  *((_QWORD *)v12 + 2) = v13;
  *((_QWORD *)v12 + 3) = v1;
  *((_QWORD *)v12 + 4) = v14;
  *((_QWORD *)v12 + 5) = v3;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  v15(&v12[v11], v8, v9);
  v16 = *(_QWORD *)(v5 - 248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 288))(v16, v0, v9);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = v13;
  *((_QWORD *)v17 + 3) = v1;
  v18 = *(_QWORD *)(v5 - 160);
  *((_QWORD *)v17 + 4) = v14;
  *((_QWORD *)v17 + 5) = v18;
  v15(&v17[v11], v16, v9);
  *(_QWORD *)(v5 - 120) = partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter;
  *(_QWORD *)(v5 - 112) = v12;
  *(_QWORD *)(v5 - 104) = partial apply for closure #2 in AppearanceAnimationView.NormalBody.body.getter;
  *(_QWORD *)(v5 - 96) = v17;
  v19 = *(_QWORD *)(v5 - 240);
  v20 = *(_QWORD *)(v5 - 208);
  v21 = *(_QWORD *)(v5 - 168);
  View.modifier<A>(_:)(v5 - 120, v20, &type metadata for _AppearanceActionModifier, &protocol witness table for IDView<A, B>);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8))(v21, v20);
  *(_QWORD *)(v5 - 152) = &protocol witness table for IDView<A, B>;
  *(_QWORD *)(v5 - 144) = &protocol witness table for _AppearanceActionModifier;
  v22 = *(_QWORD *)(v5 - 200);
  v23 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v22, v5 - 152);
  v24 = *(_QWORD *)(v5 - 232);
  static ViewBuilder.buildExpression<A>(_:)(v19, v22, v23);
  v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 216) + 8);
  v25(v19, v22);
  static ViewBuilder.buildBlock<A>(_:)(v24, v22, *(_QWORD *)(v5 - 192));
  return ((uint64_t (*)(uint64_t, uint64_t))v25)(v24, v22);
}

void closure #1 in AppearanceAnimationView.NormalBody.body.getter()
{
  type metadata accessor for AppearanceAnimationView.NormalBody();
}

void sub_2351114E4()
{
  type metadata accessor for AppearanceAnimationView();
}

uint64_t sub_235111500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 60));
  v5 = 0;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(&v5, v2);
  swift_release_n();
  v3 = swift_retain();
  specialized closure #1 in withTransaction<A>(_:_:)(v3, (void (*)(_QWORD *))partial apply for closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter);
  return swift_release_n();
}

void closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter()
{
  swift_retain();
  type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
}

uint64_t sub_2351115E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;
  BOOL v7;
  int v8;
  char v9;

  v4 = type metadata accessor for State(0, a1, a3, a4);
  State.wrappedValue.getter(v4, (uint64_t)&v8);
  v6 = v8;
  v7 = (v9 & 1) == 0;
  specialized State.wrappedValue.setter((uint64_t)&v6, v4);
  return swift_release();
}

void closure #2 in AppearanceAnimationView.NormalBody.body.getter()
{
  swift_retain();
  type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
}

uint64_t sub_2351116C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;
  char v7;
  int v8;
  char v9;

  v4 = type metadata accessor for State(0, a1, a3, a4);
  State.wrappedValue.getter(v4, (uint64_t)&v8);
  v6 = v8;
  v7 = 0;
  specialized State.wrappedValue.setter((uint64_t)&v6, v4);
  swift_release();
  swift_retain();
  State.wrappedValue.getter(v4, (uint64_t)&v6);
  v8 = v6 + 1;
  v9 = v7;
  specialized State.wrappedValue.setter((uint64_t)&v8, v4);
  return swift_release();
}

uint64_t AppearanceAnimationView.displayListAnimation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, double);
  char v73;
  void (*v74)(char *, _QWORD, uint64_t, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  void (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  char v96;
  void (*v97)(char *, _QWORD, uint64_t, uint64_t);
  char *v98;
  void (*v99)(char *, uint64_t, uint64_t);
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  char *v102;
  char v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t result;
  uint64_t *v116;
  char *v117;
  char v118;
  uint64_t v119;
  void (*v120)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  char *v138;
  char v139;
  void (*v140)(char *, _QWORD, uint64_t, uint64_t);
  char *v141;
  void (*v142)(char *, char *, uint64_t);
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  void (*v154)(char *, char *, uint64_t);
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  void (*v185)(char *, uint64_t, uint64_t);
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  char *v189;
  __int128 v190;
  _QWORD *v191;

  v4 = v3;
  v191 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for ModifiedContent(255, v6, (uint64_t)&type metadata for _RotationEffect, a2);
  v165 = type metadata accessor for Optional();
  v164 = *(_QWORD *)(v165 - 8);
  MEMORY[0x24BDAC7A8](v165);
  v160 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v172 = (char *)&v153 - v10;
  v11 = *(_QWORD **)(v7 - 8);
  v179 = v7;
  v180 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v156 = (char *)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v161 = (char *)&v153 - v15;
  v17 = type metadata accessor for ModifiedContent(255, v6, (uint64_t)&type metadata for _ScaleEffect, v16);
  v171 = type metadata accessor for Optional();
  v170 = *(_QWORD *)(v171 - 8);
  MEMORY[0x24BDAC7A8](v171);
  v163 = (char *)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v178 = (char *)&v153 - v20;
  *(_QWORD *)&v187 = v17;
  *(_QWORD *)&v188 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v157 = (char *)&v153 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v174 = (char *)&v153 - v24;
  v26 = type metadata accessor for ModifiedContent(255, v6, (uint64_t)&type metadata for _OffsetEffect, v25);
  v177 = type metadata accessor for Optional();
  v176 = *(_QWORD *)(v177 - 8);
  MEMORY[0x24BDAC7A8](v177);
  v167 = (char *)&v153 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v184 = (char *)&v153 - v29;
  v185 = *(void (**)(char *, uint64_t, uint64_t))(v26 - 8);
  v186 = v26;
  MEMORY[0x24BDAC7A8](v30);
  v158 = (char *)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v168 = (char *)&v153 - v33;
  v35 = type metadata accessor for ModifiedContent(255, v6, (uint64_t)&type metadata for _OpacityEffect, v34);
  v36 = type metadata accessor for Optional();
  v182 = *(_QWORD *)(v36 - 8);
  v183 = v36;
  MEMORY[0x24BDAC7A8](v36);
  v173 = (char *)&v153 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)&v153 - v39;
  v41 = *(_QWORD *)(a1 + 24);
  MEMORY[0x24BDAC7A8](v42);
  v159 = (char *)&v153 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44);
  v169 = (char *)&v153 - v45;
  MEMORY[0x24BDAC7A8](v46);
  v162 = (char *)&v153 - v47;
  MEMORY[0x24BDAC7A8](v48);
  v175 = (char *)&v153 - v49;
  MEMORY[0x24BDAC7A8](v50);
  v166 = (char *)&v153 - v51;
  MEMORY[0x24BDAC7A8](v52);
  v181 = (char *)&v153 - v53;
  MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)&v153 - v55;
  MEMORY[0x24BDAC7A8](v57);
  v59 = (char *)&v153 - v58;
  v60 = *(_QWORD **)(v35 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v63 = (char *)&v153 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = MEMORY[0x24BDAC7A8](v64);
  v189 = (char *)&v153 - v66;
  v67 = a1;
  v68 = *(int *)(a1 + 52);
  v69 = v4;
  v70 = &v4[v68];
  v72 = *(void (**)(char *, double))(v71 + 16);
  *(_QWORD *)&v190 = v70;
  v72(v59, v65);
  v73 = swift_dynamicCast();
  v74 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v60[7];
  if ((v73 & 1) != 0)
  {
    v155 = v63;
    v74(v40, 0, 1, v35);
    v154 = (void (*)(char *, char *, uint64_t))v60[4];
    v154(v189, v40, v35);
    v75 = v69;
    ((void (*)(char *, char *, uint64_t))v72)(v56, &v69[*(int *)(v67 + 56)], v41);
    v76 = v173;
    v77 = v75;
    v78 = v67;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v74(v76, 0, 1, v35);
      v79 = v155;
      v154(v155, v76, v35);
      v80 = *(int *)(v35 + 36);
      v81 = v189;
      v82 = *(_QWORD *)&v189[v80];
      v83 = *(_QWORD *)&v79[v80];
      v84 = *(_QWORD *)&v77[*(int *)(v78 + 60)];
      v85 = v191;
      v191[3] = &type metadata for DisplayList.OpacityAnimation;
      v85[4] = &protocol witness table for DisplayList.OpacityAnimation;
      *v85 = v82;
      v85[1] = v83;
      v85[2] = v84;
      v86 = (void (*)(char *, uint64_t))v60[1];
      swift_retain();
      v86(v79, v35);
      v87 = v81;
      return ((uint64_t (*)(char *, uint64_t))v86)(v87, v35);
    }
    v94 = v41;
    v74(v76, 1, 1, v35);
    ((void (*)(char *, uint64_t))v60[1])(v189, v35);
    v40 = v76;
    v95 = v185;
    v35 = v186;
    v88 = (void (*)(char *, uint64_t, uint64_t))v72;
    v89 = v190;
    v90 = v183;
    v91 = v184;
    v93 = v181;
    v92 = v182;
  }
  else
  {
    v77 = v69;
    v74(v40, 1, 1, v35);
    v35 = v186;
    v88 = (void (*)(char *, uint64_t, uint64_t))v72;
    v89 = v190;
    v90 = v183;
    v91 = v184;
    v93 = v181;
    v92 = v182;
    v94 = v41;
    v95 = v185;
  }
  (*(void (**)(char *, uint64_t))(v92 + 8))(v40, v90);
  v88(v93, v89, v94);
  v96 = swift_dynamicCast();
  v97 = (void (*)(char *, _QWORD, uint64_t, uint64_t))*((_QWORD *)v95 + 7);
  if ((v96 & 1) != 0)
  {
    v97(v91, 0, 1, v35);
    v98 = v91;
    v99 = v88;
    v100 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v95 + 4);
    v101 = v168;
    v100(v168, v98, v35);
    v102 = &v77[*(int *)(v67 + 56)];
    v185 = v99;
    v99(v166, (uint64_t)v102, v94);
    v91 = v167;
    v103 = swift_dynamicCast();
    v104 = v187;
    if ((v103 & 1) != 0)
    {
      v97(v91, 0, 1, v35);
      v105 = v158;
      v100(v158, v91, v35);
      v106 = *(int *)(v35 + 36);
      v107 = *(_QWORD *)&v101[v106];
      v108 = *(_QWORD *)&v101[v106 + 8];
      v109 = &v105[v106];
      v110 = *(_QWORD *)v109;
      v111 = *((_QWORD *)v109 + 1);
      v112 = *(_QWORD *)&v77[*(int *)(v67 + 60)];
      v113 = v191;
      v191[3] = &type metadata for DisplayList.OffsetAnimation;
      v113[4] = &protocol witness table for DisplayList.OffsetAnimation;
      v114 = (_QWORD *)swift_allocObject();
      *v113 = v114;
      v114[2] = v107;
      v114[3] = v108;
      v114[4] = v110;
      v114[5] = v111;
      v114[6] = v112;
      v86 = (void (*)(char *, uint64_t))*((_QWORD *)v95 + 1);
      swift_retain();
      v86(v105, v35);
      v87 = v101;
      return ((uint64_t (*)(_QWORD, _QWORD))v86)(v87, v35);
    }
    v186 = v67;
    v189 = v77;
    v97(v91, 1, 1, v35);
    (*((void (**)(_QWORD, uint64_t))v95 + 1))(v101, v35);
    v116 = v191;
    v88 = v185;
    v89 = v190;
  }
  else
  {
    v97(v91, 1, 1, v35);
    v189 = v77;
    v186 = v67;
    v116 = v191;
    v104 = v187;
  }
  (*(void (**)(char *, uint64_t))(v176 + 8))(v91, v177);
  v88(v175, v89, v94);
  v117 = v178;
  v118 = swift_dynamicCast();
  v119 = v188;
  v120 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56);
  v122 = v179;
  v121 = v180;
  if ((v118 & 1) != 0)
  {
    v120(v117, 0, 1, v104);
    v123 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
    v123(v174, v117, v104);
    v124 = v186;
    v125 = v189;
    v88(v162, (uint64_t)&v189[*(int *)(v186 + 56)], v94);
    v117 = v163;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v120(v117, 0, 1, v104);
      v126 = v157;
      v123(v157, v117, v104);
      v127 = *(int *)(v104 + 36);
      v128 = v174;
      v190 = *(_OWORD *)&v174[v127];
      v129 = *(_QWORD *)&v174[v127 + 16];
      v130 = *(_QWORD *)&v174[v127 + 24];
      v131 = &v126[v127];
      v187 = *(_OWORD *)v131;
      v132 = *((_QWORD *)v131 + 2);
      v133 = *((_QWORD *)v131 + 3);
      v134 = *(_QWORD *)&v125[*(int *)(v124 + 60)];
      v135 = v191;
      v191[3] = &type metadata for DisplayList.ScaleAnimation;
      v135[4] = (uint64_t)&protocol witness table for DisplayList.ScaleAnimation;
      v136 = swift_allocObject();
      *v135 = v136;
      *(_OWORD *)(v136 + 16) = v190;
      *(_QWORD *)(v136 + 32) = v129;
      *(_QWORD *)(v136 + 40) = v130;
      *(_OWORD *)(v136 + 48) = v187;
      *(_QWORD *)(v136 + 64) = v132;
      *(_QWORD *)(v136 + 72) = v133;
      *(_QWORD *)(v136 + 80) = v134;
      v137 = *(void (**)(char *, uint64_t))(v188 + 8);
      swift_retain();
      v137(v126, v104);
      return ((uint64_t (*)(char *, uint64_t))v137)(v128, v104);
    }
    v120(v117, 1, 1, v104);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v174, v104);
    v89 = v190;
    v116 = v191;
    v121 = v180;
  }
  else
  {
    v120(v117, 1, 1, v104);
  }
  (*(void (**)(char *, uint64_t))(v170 + 8))(v117, v171);
  v88(v169, v89, v94);
  v138 = v172;
  v139 = swift_dynamicCast();
  v140 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v121[7];
  v141 = v189;
  if ((v139 & 1) != 0)
  {
    v140(v138, 0, 1, v122);
    v142 = (void (*)(char *, char *, uint64_t))v121[4];
    v143 = v161;
    v142(v161, v138, v122);
    v88(v159, (uint64_t)&v141[*(int *)(v186 + 56)], v94);
    v144 = v143;
    v138 = v160;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v140(v138, 0, 1, v122);
      v145 = v156;
      v142(v156, v138, v122);
      v146 = *(int *)(v122 + 36);
      v190 = *(_OWORD *)&v144[v146];
      v147 = *(_QWORD *)&v144[v146 + 16];
      v148 = &v145[v146];
      v188 = *(_OWORD *)v148;
      v149 = *((_QWORD *)v148 + 2);
      v150 = *(_QWORD *)&v141[*(int *)(v186 + 60)];
      v116[3] = (uint64_t)&type metadata for DisplayList.RotationAnimation;
      v116[4] = (uint64_t)&protocol witness table for DisplayList.RotationAnimation;
      v151 = swift_allocObject();
      *v116 = v151;
      *(_OWORD *)(v151 + 16) = v190;
      *(_QWORD *)(v151 + 32) = v147;
      *(_OWORD *)(v151 + 40) = v188;
      *(_QWORD *)(v151 + 56) = v149;
      *(_QWORD *)(v151 + 64) = v150;
      v152 = (void (*)(char *, uint64_t))v121[1];
      swift_retain();
      v152(v145, v122);
      return ((uint64_t (*)(char *, uint64_t))v152)(v144, v122);
    }
    v140(v138, 1, 1, v122);
    ((void (*)(char *, uint64_t))v121[1])(v143, v122);
  }
  else
  {
    v140(v138, 1, 1, v122);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v164 + 8))(v138, v165);
  v116[4] = 0;
  *(_OWORD *)v116 = 0u;
  *((_OWORD *)v116 + 1) = 0u;
  return result;
}

void AppearanceAnimationView.archivedBody.getter()
{
  type metadata accessor for AppearanceAnimationView.AnimationEffect();
}

uint64_t sub_235112454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[96];

  v8 = *(_QWORD *)(v6 - 224);
  v9 = type metadata accessor for ModifiedContent(0, v8, a1, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v20[-v14];
  AppearanceAnimationView.displayListAnimation.getter(v5, v16, (_QWORD *)(v6 - 168));
  outlined init with take of _DisplayList_AnyEffectAnimation?(v6 - 168, v6 - 128);
  View.modifier<A>(_:)(v6 - 128, v8, a1, *(_QWORD *)(v6 - 208));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v6 - 128, a1);
  *(_QWORD *)(v6 - 184) = *(_QWORD *)(v6 - 208);
  *(_QWORD *)(v6 - 176) = &protocol witness table for AppearanceAnimationView<A, B>.AnimationEffect;
  v17 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v9, v6 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v12, v9, v17);
  v18 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v18(v12, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v9, v4);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v15, v9);
}

void type metadata accessor for AppearanceAnimationView.AnimationEffect()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in AppearanceAnimationView<A, B>()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

uint64_t AppearanceAnimationView.AnimationEffect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8[2];

  outlined init with copy of _DisplayList_AnyEffectAnimation?(v1, (uint64_t)&v6);
  if (v7)
  {
    outlined init with take of ScrollStateRequest(&v6, (uint64_t)v8);
    v3 = swift_allocObject();
    result = outlined init with take of ScrollStateRequest(v8, v3 + 16);
    v5 = 10;
  }
  else
  {
    result = outlined destroy of _DisplayList_AnyEffectAnimation?((uint64_t)&v6);
    v3 = 0;
    v5 = 19;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = v5;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AppearanceAnimationView<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AppearanceAnimationView<A, B>()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

uint64_t type metadata completion function for AppearanceAnimationView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppearanceAnimationView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, unint64_t, uint64_t);
  unint64_t v21;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v10 + v8;
  v12 = v10 + 7;
  v13 = ((v10 + 7 + ((v10 + v8 + (v9 & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v14 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v14 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v13 > 0x18)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    v18 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v19 = ((unint64_t)a2 + v9) & v18;
    v20 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    v20(((unint64_t)v4 + v9) & v18, v19, v5);
    v21 = (v11 + v19) & v18;
    v20((v11 + (((unint64_t)v4 + v9) & v18)) & v18, v21, v5);
    *(_QWORD *)((v12 + ((v11 + (((unint64_t)v4 + v9) & v18)) & v18)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v21) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AppearanceAnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v9, v6);
  v10((*(_QWORD *)(v7 + 64) + v8 + v9) & ~v8, v6);
  return swift_release();
}

uint64_t initializeWithCopy for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  *(_QWORD *)((v14 + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  *(_QWORD *)((v14 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  *(_QWORD *)((v14 + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  *(_QWORD *)((v14 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppearanceAnimationView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v12 + v10;
  v14 = v12 + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v19 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v19);
      }
      else
      {
        v20 = *(_QWORD *)((v14 + ((v13 + v19) & ~v10)) & 0xFFFFFFFFFFFFF8);
        if (v20 >= 0xFFFFFFFF)
          LODWORD(v20) = -1;
        return (v20 + 1);
      }
    }
  }
  else
  {
    if (((((v14 + ((v13 + (v11 & ~v10)) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v15 = 2;
    else
      v15 = a2 - v9 + 1;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235112CE8 + 4 * byte_2352CAB40[v17]))();
  }
}

void storeEnumTagSinglePayload for AppearanceAnimationView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  if (v7 >= a3)
  {
    v10 = 0;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64)
         + 7
         + ((*(_DWORD *)(v6 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X4 }
  }
  if (((*(_DWORD *)(v6 + 64)
       + 7
       + ((*(_DWORD *)(v6 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ 7+ ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_235112EC0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235112F54);
}

void sub_235112EC8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235112ED0);
  JUMPOUT(0x235112F54);
}

void sub_235112F14()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235112F54);
}

void sub_235112F1C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235112F54);
}

uint64_t sub_235112F24(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x235112F54);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x235112F30);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void type metadata accessor for AppearanceAnimationView()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void sub_235112F78(_OWORD *a1)
{
  get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA019AppearanceAnimationC0Vyxqd__GAaBHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for AppearanceAnimationView);
}

void sub_235112F8C(_OWORD *a1)
{
  get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA019AppearanceAnimationC0Vyxqd__GAaBHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for AppearanceAnimationView.NormalBody);
}

void get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA019AppearanceAnimationC0Vyxqd__GAaBHPyHCTm(_OWORD *a1, void (*a2)(uint64_t, _OWORD *))
{
  __int128 v2;
  _OWORD v3[2];

  v2 = a1[1];
  v3[0] = *a1;
  v3[1] = v2;
  a2(255, v3);
  JUMPOUT(0x235112FCCLL);
}

void sub_235112FE8()
{
  type metadata accessor for AppearanceAnimationView.AnimationEffect();
}

uint64_t sub_23511300C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[8];

  v4 = type metadata accessor for ModifiedContent(255, v6, a1, a4);
  v8[0] = v7;
  v8[1] = &protocol witness table for AppearanceAnimationView<A, B>.AnimationEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v4, v8);
}

uint64_t destroy for AppearanceAnimationView.AnimationEffect(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

void type metadata completion function for AppearanceAnimationView.NormalBody()
{
  type metadata accessor for AppearanceAnimationView();
}

_QWORD *initializeBufferWithCopyOfBuffer for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v29)(uint64_t, uint64_t, uint64_t);

  v3 = (_QWORD *)a1;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8 | v8;
  v10 = v9 | 7;
  v11 = (v10 + 16) & ~v10;
  v12 = *(_QWORD *)(v6 + 64) + v8;
  v13 = *(_QWORD *)(v7 + 64);
  v14 = v13 + v8;
  v15 = v13 + 7;
  if (v9 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || v11 + ((v13 + 7 + ((v13 + v8 + (v12 & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v18 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v18 + v11);
  }
  else
  {
    v19 = ~v10;
    v20 = ~v8;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    *(_QWORD *)(a1 + 8) = a2[1];
    v21 = (a1 + 23) & v19;
    v22 = ((unint64_t)a2 + 23) & v19;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    v29(v21, v22, v5);
    v23 = (v12 + v21) & v20;
    v24 = (v12 + v22) & v20;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v25(v23, v24, v4);
    v26 = (v14 + v23) & v20;
    v27 = (v14 + v24) & v20;
    v25(v26, v27, v4);
    *(_QWORD *)((v15 + v26) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v15 + v27) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8 | v8 | 7;
  v10 = (a1 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t))(v6 + 8))(v10);
  v11 = (*(_QWORD *)(v6 + 64) + v8 + v10) & ~v8;
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v11, v5);
  v12((*(_QWORD *)(v7 + 64) + v8 + v11) & ~v8, v5);
  return swift_release();
}

uint64_t initializeWithCopy for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8 | v8 | 7;
  v10 = (v9 + 16 + a1) & ~v9;
  v11 = (v9 + 16 + a2) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  v12(v10, v11, v4);
  v13 = *(_QWORD *)(v6 + 64) + v8;
  v14 = (v13 + v10) & ~v8;
  v15 = (v13 + v11) & ~v8;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v16(v14, v15, v5);
  v17 = *(_QWORD *)(v7 + 64);
  v18 = (v17 + v8 + v14) & ~v8;
  v19 = (v17 + v8 + v15) & ~v8;
  v16(v18, v19, v5);
  *(_QWORD *)((v17 + 7 + v18) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v17 + 7 + v19) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_DWORD *)(v8 + 80) & 0xF8 | v10 | 7;
  v12 = (v11 + 16 + a1) & ~v11;
  v13 = (v11 + 16 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  v14 = *(_QWORD *)(v8 + 64) + v10;
  v15 = (v14 + v12) & ~v10;
  v16 = (v14 + v13) & ~v10;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24);
  v17(v15, v16, v7);
  v18 = *(_QWORD *)(v9 + 64);
  v19 = (v18 + v10 + v15) & ~v10;
  v20 = (v18 + v10 + v16) & ~v10;
  v17(v19, v20, v7);
  *(_QWORD *)((v18 + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v18 + 7 + v20) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for AppearanceAnimationView.NormalBody(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | v7 | 7;
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(v9, v10, *(_QWORD *)(a3 + 16));
  v11 = *(_QWORD *)(v5 + 64) + v7;
  v12 = (v11 + v9) & ~v7;
  v13 = (v11 + v10) & ~v7;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v14(v12, v13, v4);
  v15 = *(_QWORD *)(v6 + 64);
  v16 = (v15 + v7 + v12) & ~v7;
  v17 = (v15 + v7 + v13) & ~v7;
  v14(v16, v17, v4);
  *(_QWORD *)((v15 + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_DWORD *)(v8 + 80) & 0xF8 | v10 | 7;
  v12 = (v11 + 16 + a1) & ~v11;
  v13 = (v11 + 16 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  v14 = *(_QWORD *)(v8 + 64) + v10;
  v15 = (v14 + v12) & ~v10;
  v16 = (v14 + v13) & ~v10;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40);
  v17(v15, v16, v7);
  v18 = *(_QWORD *)(v9 + 64);
  v19 = (v18 + v10 + v15) & ~v10;
  v20 = (v18 + v10 + v16) & ~v10;
  v17(v19, v20, v7);
  *(_QWORD *)((v18 + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v18 + 7 + v20) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppearanceAnimationView.NormalBody(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_DWORD *)(v5 + 80) & 0xF8 | v10 | 7;
  v12 = *(_QWORD *)(v5 + 64) + v10;
  v13 = *(_QWORD *)(v7 + 64);
  v14 = v13 + v10;
  v15 = v13 + 7;
  v16 = a2 - v9;
  if (a2 <= v9)
    goto LABEL_24;
  v17 = ((v11 + 16) & ~v11) + ((v15 + ((v14 + (v12 & ~v10)) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(_WORD *)((char *)a1 + v17))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v21 < 2)
    {
LABEL_24:
      v24 = ((unint64_t)a1 + v11 + 16) & ~v11;
      if (v6 == v9)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
      v25 = (v12 + v24) & ~v10;
      if (v8 == v9)
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v25);
      v26 = *(_QWORD *)((v15 + ((v14 + v25) & ~v10)) & 0xFFFFFFFFFFFFF8);
      if (v26 >= 0xFFFFFFFF)
        LODWORD(v26) = -1;
      return (v26 + 1);
    }
  }
  v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((_BYTE *)a1 + v17))
    goto LABEL_24;
LABEL_17:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((((_DWORD)v11 + 16) & ~(_DWORD)v11)
     + (((_DWORD)v15 + (((_DWORD)v14 + (v12 & ~(_DWORD)v10)) & ~(_DWORD)v10)) & 0xFFFFFFF8) == -8)
    v23 = 0;
  else
    v23 = *a1;
  return v9 + (v23 | v22) + 1;
}

void storeEnumTagSinglePayload for AppearanceAnimationView.NormalBody(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v8 = *(_DWORD *)(v5 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v7 = *(_DWORD *)(v5 + 80);
  v10 = (((v7 & 0xF8 | v9 | 7) + 16) & ~(unint64_t)(v7 & 0xF8 | v9 | 7))
      + ((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v6 + 64) + v9 + ((*(_QWORD *)(v5 + 64) + v9) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (a3 > v8)
  {
    if (v10 <= 3)
    {
      v13 = ((a3 - v8 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v8 >= a2)
    __asm { BR              X6 }
  v12 = ~v8 + a2;
  if (v10 <= 3)
  {
    if ((((v7 & 0xF8 | v9 | 7) + 16) & ~(v7 & 0xF8 | v9 | 7))
       + ((*(_DWORD *)(v6 + 64)
         + 7
         + ((*(_DWORD *)(v6 + 64) + (_DWORD)v9 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v9) & ~(_DWORD)v9)) & ~(_DWORD)v9)) & 0xFFFFFFF8) == -8)
      goto LABEL_21;
    v12 &= ~(-1 << (8 * v10));
  }
  bzero(a1, v10);
  *a1 = v12;
LABEL_21:
  __asm { BR              X10 }
}

uint64_t instantiation function for generic protocol witness table for AppearanceAnimationView<A, B>.AnimationEffect(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>.AnimationEffect);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AppearanceAnimationView<A, B>.NormalBody()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

void type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter()
{
  partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter();
}

{
  type metadata accessor for AppearanceAnimationView.NormalBody();
}

void objectdestroyTm_12()
{
  type metadata accessor for AppearanceAnimationView.NormalBody();
}

void sub_235113BC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v1 + ((v4 + 48) & ~v4);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v5 + *(int *)(a1 + 52), v2);
  type metadata accessor for AppearanceAnimationView();
}

uint64_t sub_235113C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v4)(uint64_t, uint64_t);

  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
  v4(v2 + *(int *)(a1 + 52), v1);
  v4(v2 + *(int *)(a1 + 56), v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in AppearanceAnimationView.NormalBody.body.getter()
{
  partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter();
}

uint64_t sub_235113CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v8(v2 + ((v6 + 48) & ~v6), v1, v3, v4, v5);
}

void partial apply for closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter()
{
  closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter();
}

void type metadata accessor for _DisplayList_AnyEffectAnimation?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?)
  {
    type metadata accessor for _DisplayList_AnyEffectAnimation();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?);
  }
}

uint64_t outlined destroy of _DisplayList_AnyEffectAnimation?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _DisplayList_AnyEffectAnimation?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_235113DBC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_235113DE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_235113E04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_235113E28()
{
  swift_release();
  return swift_deallocObject();
}

void sub_235113E4C()
{
  type metadata accessor for IDView();
}

uint64_t sub_235113E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[8];

  v4 = type metadata accessor for ModifiedContent(255, a1, (uint64_t)&type metadata for _AppearanceActionModifier, a4);
  v6[0] = &protocol witness table for IDView<A, B>;
  v6[1] = &protocol witness table for _AppearanceActionModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v4, v6);
}

void CodablePlatformImage.init(_:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v4;
  _BYTE *v5;
  _BYTE *v6;
  id v7;
  id v8;
  objc_super v9;

  v4 = (objc_class *)type metadata accessor for CorePlatformImage();
  v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = a1;
  v6 = v5;
  v7 = a1;
  v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(0, v7);

  v9.receiver = v6;
  v9.super_class = v4;
  v8 = objc_msgSendSuper2(&v9, sel_init);

  *a2 = v8;
}

id RBDisplayListEncoderDelegate.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  objc_super v7;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = &v3[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *((_QWORD *)v5 + 2) = v4;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 24);
  v7.receiver = v3;
  v7.super_class = v1;
  return objc_msgSendSuper2(&v7, sel_init);
}

id RBDisplayListDecoderDelegate.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = &v3[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(_OWORD *)v7 = *(_OWORD *)a1;
  *((_QWORD *)v7 + 2) = v4;
  *((_QWORD *)v7 + 3) = v5;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a1 + 32);
  *((_QWORD *)v7 + 6) = v6;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t CodableCGImage.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableRBDisplayListContents.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(int a1, void (*a2)(void), unint64_t a3)
{
  __int128 *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::UInt v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  char *v24;
  uint64_t v25;
  uint8_t *v26;
  os_signpost_id_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  __CFData *Mutable;
  __CFData *v33;
  CGDataConsumerRef v34;
  CGDataConsumerRef v35;
  uint64_t v36;
  __CFData *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v7 = type metadata accessor for OSSignpostID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v44 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - v11;
  v13 = *((_QWORD *)v3 + 2);
  v47 = *v3;
  v48 = v13;
  v49 = *(__int128 *)((char *)v3 + 24);
  v14 = ProtobufEncoder.archiveWriter.getter();
  if (v14)
  {
    v15 = v14;
    v42 = v7;
    v43 = v8;
    v46 = a1;
    lazy protocol witness table accessor for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:)();
    AnyHashable.init<A>(_:)();
    v16 = (uint64_t *)(v15 + 152);
    swift_beginAccess();
    v17 = *(_QWORD *)(v15 + 152);
    if (*(_QWORD *)(v17 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v47), (v19 & 1) != 0))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&v47);
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v21);
      static OSSignpostID.exclusive.getter();
      v22 = OSSignposter.logHandle.getter();
      v23 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v24 = v44;
        v25 = v42;
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v44, v12, v42);
        v26 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v26 = 134217984;
        *(_QWORD *)&v47 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v27 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v22, v23, v27, "addAttachment.cacheHit", "index=%{name=index}ld", v26, 0xCu);
        MEMORY[0x23B7C9D54](v26, -1, -1);

        v28 = *(void (**)(char *, uint64_t))(v43 + 8);
        v28(v12, v25);
        v28(v24, v25);
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_19;
        goto LABEL_9;
      }

      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v42);
      if ((v20 & 0x8000000000000000) != 0)
      {
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_20;
      }
    }
    else
    {
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&v47);
      v47 = 0uLL;
      LODWORD(v48) = 0;
      BYTE4(v48) = 1;
      v29 = v45;
      v30 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&v47, v15, a2, a3);
      if (v29)
      {
LABEL_10:
        swift_release();
        return;
      }
      v20 = v30;
      v46 = a1;
      AnyHashable.init<A>(_:)();
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v50 = *v16;
      *v16 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, (uint64_t)&v47, isUniquelyReferenced_nonNull_native);
      *v16 = v50;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&v47);
      swift_endAccess();
      if ((v20 & 0x8000000000000000) != 0)
        goto LABEL_19;
    }
LABEL_9:
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v20);
    goto LABEL_10;
  }
  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v33 = Mutable;
  v34 = CGDataConsumerCreateWithCFData(Mutable);
  if (!v34)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v35 = v34;
  v36 = v45;
  a2();
  if (v36)
  {

  }
  else
  {
    v37 = v33;
    v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v40 = v39;

    ProtobufEncoder.dataField(_:_:)(2, v38, v40);
    outlined consume of Data._Representation(v38, v40);

  }
}

uint64_t (*CodablePlatformImage.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id CodablePlatformImage.kitImage.getter()
{
  _QWORD *v0;
  id *v1;

  v1 = (id *)(*v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return *v1;
}

void CodablePlatformImage.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  void **v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  char ImageOrientation;
  char v16;
  char v17;
  double v18;
  double v19;
  Swift::UInt v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;

  v3 = v1;
  v5 = *v3;
  v6 = (unsigned __int8 *)(*v3 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  v7 = *v6;
  v8 = (void **)(v5 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  v9 = (id)_CorePlatformImageGetCGImage(v7, *v8);
  if (v9)
  {
    v10 = *v6;
    v11 = *v8;
    v12 = v9;
    _CorePlatformImageGetScale(v10, v11);
    v14 = v13;
    ImageOrientation = _CorePlatformImageGetImageOrientation(*v6, *v8);
    v16 = specialized Image.Orientation.init(rawValue:)(ImageOrientation);
    if (v16 == 8)
      v17 = 0;
    else
      v17 = v16;
    _CorePlatformImageGetBaselineOffsetFromBottom(*v6, *v8);
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v12);

    if (!v2)
    {
      v18 = round(v14);
      if (v18 == 1.0)
        goto LABEL_18;
      v19 = fabs(v18);
      if (v19 >= 65536.0)
        v20 = 17;
      else
        v20 = 21;
      ProtobufEncoder.encodeVarint(_:)(v20);
      if (v19 >= 65536.0)
      {
        v23 = a1[1];
        v24 = v23 + 8;
        if (__OFADD__(v23, 8))
        {
          __break(1u);
        }
        else if (a1[2] >= v24)
        {
          a1[1] = v24;
          *(double *)(*a1 + v23) = v18;
          goto LABEL_18;
        }
        *(double *)ProtobufEncoder.growBufferSlow(to:)(v24) = v18;
      }
      else
      {
        v21 = a1[1];
        v22 = v21 + 4;
        if (__OFADD__(v21, 4))
        {
          __break(1u);
        }
        else
        {
          *(float *)&v18 = v18;
          if (a1[2] >= v22)
          {
            a1[1] = v22;
            *(_DWORD *)(*a1 + v21) = LODWORD(v18);
            goto LABEL_18;
          }
        }
        *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v22) = LODWORD(v18);
      }
LABEL_18:
      __asm { BR              X10 }
    }

  }
  else
  {
    lazy protocol witness table accessor for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error();
    swift_allocError();
    swift_willThrow();
  }
}

void CodablePlatformImage.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  Class v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  Class v13;
  _QWORD *v14;
  Class v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  id v35;
  objc_class *v36;
  _BYTE *v37;
  _BYTE *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  objc_super v46;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  v7 = v2;
  v8 = 0;
  v9 = 0;
  v10 = 1.0;
  while (2)
  {
    v11 = a1[3];
    if (v11)
    {
      v12 = a1[4];
      if (v5 < v12)
        goto LABEL_14;
      if (v12 < v5)
        goto LABEL_75;
      a1[3] = 0;
    }
    v11 = ProtobufDecoder.decodeVarint()();
    if (v7)
      goto LABEL_76;
    if (v11 < 8)
      goto LABEL_75;
LABEL_14:
    switch(v11 >> 3)
    {
      case 1uLL:
        if ((v11 & 7) != 2)
          goto LABEL_75;
        ProtobufDecoder.beginMessage()();
        if (v7)
          goto LABEL_76;
        v13 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        v7 = 0;
        v14 = (_QWORD *)a1[5];
        if (v14[2])
        {
          v15 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v16 = v14[2];
            if (!v16)
              goto LABEL_74;
          }
          else
          {
            v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            v16 = v14[2];
            if (!v16)
            {
LABEL_74:
              __break(1u);
LABEL_75:
              lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
              swift_allocError();
              swift_willThrow();
LABEL_76:

              return;
            }
          }
          v17 = v16 - 1;
          v18 = v14[v17 + 4];
          v14[2] = v17;

          a1[5] = v14;
          a1[2] = v18;
          v9 = v15;
LABEL_7:
          v5 = a1[1];
          v6 = a1[2];
          if (v5 >= v6)
          {
            a1[3] = 0;
            if (v9)
            {
              v34 = v9;
              v35 = _CorePlatformImageMakeKitImage(v10, 0, (uint64_t)v34, (0x507030104060200uLL >> (8 * v8)) & 7);
              v36 = (objc_class *)type metadata accessor for CorePlatformImage();
              v37 = objc_allocWithZone(v36);
              v37[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = 0;
              *(_QWORD *)&v37[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = v35;
              v38 = v37;
              v39 = v35;
              v38[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(0, v39);

              v46.receiver = v38;
              v46.super_class = v36;
              v40 = objc_msgSendSuper2(&v46, sel_init);

              *a2 = v40;
              return;
            }
LABEL_4:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return;
          }
          continue;
        }
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        __break(1u);
        v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
        v44 = v43[2];
        if (!v44)
        {
          __break(1u);
          JUMPOUT(0x235114DE0);
        }
        v41 = v44 - 1;
        v42 = v43[v41 + 4];
        v43[2] = v41;

        a1[5] = v43;
        a1[2] = v42;
        return;
      case 2uLL:
        v21 = v11 & 7;
        if (v21 == 5)
        {
          v30 = (float *)a1[1];
          if (v6 < (unint64_t)(v30 + 1))
            goto LABEL_75;
          v31 = *v30;
          a1[1] = v30 + 1;
          v10 = v31;
        }
        else
        {
          if (v21 == 2)
          {
            v32 = ProtobufDecoder.decodeVarint()();
            if (v7)
              goto LABEL_76;
            if (v32 < 0)
              goto LABEL_83;
            v22 = (double *)a1[1];
            if (v6 < (unint64_t)v22 + v32)
              goto LABEL_75;
            a1[3] = 17;
            a1[4] = (char *)v22 + v32;
          }
          else
          {
            if (v21 != 1)
              goto LABEL_75;
            v22 = (double *)a1[1];
          }
          if (v6 < (unint64_t)(v22 + 1))
            goto LABEL_75;
          v10 = *v22;
          a1[1] = v22 + 1;
        }
        goto LABEL_7;
      case 3uLL:
        if ((v11 & 7) == 0)
          goto LABEL_36;
        if ((v11 & 7) != 2)
          goto LABEL_75;
        v23 = ProtobufDecoder.decodeVarint()();
        if (v7)
          goto LABEL_76;
        if (v23 < 0)
          goto LABEL_81;
        v24 = a1[1] + v23;
        if (v6 < v24)
          goto LABEL_75;
        a1[3] = 24;
        a1[4] = v24;
LABEL_36:
        v25 = ProtobufDecoder.decodeVarint()();
        if (v7)
          goto LABEL_76;
        if (v25 <= 0xFF)
        {
          switch((char)v25)
          {
            case 1:
              v8 = 4;
              break;
            case 2:
              v8 = 1;
              break;
            case 3:
              v8 = 5;
              break;
            case 4:
              v8 = 3;
              break;
            case 5:
              v8 = 7;
              break;
            case 6:
              v8 = 2;
              break;
            case 7:
              v8 = 6;
              break;
            default:
              goto LABEL_38;
          }
        }
        else
        {
LABEL_38:
          v8 = 0;
        }
        goto LABEL_7;
      case 4uLL:
        v26 = v11 & 7;
        if (v26 == 5)
        {
LABEL_49:
          v20 = a1[1] + 4;
          if (v6 < v20)
            goto LABEL_75;
        }
        else
        {
          if (v26 == 2)
          {
            v33 = ProtobufDecoder.decodeVarint()();
            if (v7)
              goto LABEL_76;
            if (v33 < 0)
              goto LABEL_84;
            v27 = a1[1];
            if (v6 < v27 + v33)
              goto LABEL_75;
            a1[3] = 33;
            a1[4] = v27 + v33;
          }
          else
          {
            if (v26 != 1)
              goto LABEL_75;
LABEL_42:
            v27 = a1[1];
          }
          v20 = v27 + 8;
          if (v6 < v20)
            goto LABEL_75;
        }
LABEL_66:
        a1[1] = v20;
        goto LABEL_7;
      case 5uLL:
        if ((v11 & 7) == 0)
          goto LABEL_6;
        if ((v11 & 7) != 2)
          goto LABEL_75;
        v28 = ProtobufDecoder.decodeVarint()();
        if (v7)
          goto LABEL_76;
        if (v28 < 0)
          goto LABEL_82;
        v29 = a1[1] + v28;
        if (v6 < v29)
          goto LABEL_75;
        a1[3] = 40;
        a1[4] = v29;
LABEL_6:
        ProtobufDecoder.decodeVarint()();
        if (!v7)
          goto LABEL_7;
        goto LABEL_76;
      default:
        switch(v11 & 7)
        {
          case 0uLL:
            goto LABEL_6;
          case 1uLL:
            goto LABEL_42;
          case 2uLL:
            v19 = ProtobufDecoder.decodeVarint()();
            if (v7)
              goto LABEL_76;
            if (v19 < 0)
              goto LABEL_85;
            v20 = a1[1] + v19;
            if (v6 < v20)
              goto LABEL_75;
            goto LABEL_66;
          case 5uLL:
            goto LABEL_49;
          default:
            goto LABEL_75;
        }
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodablePlatformImage(_QWORD *a1)
{
  CodablePlatformImage.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodablePlatformImage(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  CodablePlatformImage.init(from:)(a1, a2);
}

id CodableCGImage.base.getter()
{
  id *v0;

  return *v0;
}

void CodableCGImage.base.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*CodableCGImage.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableCGImage.encode(to:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  int Identifier;
  uint64_t v5;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v11[40];

  v3 = *v1;
  Identifier = CGImageGetIdentifier();
  v5 = *((_QWORD *)a1 + 2);
  v8 = *a1;
  v9 = v5;
  v10 = *(__int128 *)((char *)a1 + 24);
  ProtobufEncoder.archiveHost.getter((uint64_t)v11);
  v7[2] = v11;
  v7[3] = v3;
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(Identifier, (void (*)(void))partial apply for closure #1 in CodableCGImage.encode(to:), (unint64_t)v7);
  return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
}

void closure #1 in CodableCGImage.encode(to:)(CGDataConsumer *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (**v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(char *, char *, uint64_t);
  void (**v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(id, uint64_t, uint64_t);
  uint64_t v23;
  _BYTE *v24;
  CGDataConsumer *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  void (**v28)(char *, char *, uint64_t);
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  CGDataConsumer *v34;

  v34 = a1;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE63B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - v7;
  v9 = type metadata accessor for UTType();
  v10 = *(void (***)(char *, char *, uint64_t))(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v27 - v14;
  outlined init with copy of AnyArchivedViewHost?(a2, (uint64_t)v31);
  v16 = v32;
  if (v32)
  {
    v28 = v10;
    v17 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    v18 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 16))(a3, v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    if (v3)
      return;
    v10 = v28;
  }
  else
  {
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
    v18 = a3;
  }
  outlined init with copy of AnyArchivedViewHost?(a2, (uint64_t)&v29);
  if (v30)
  {
    outlined init with take of ScrollStateRequest(&v29, (uint64_t)v31);
    v19 = v10;
    v20 = v32;
    v21 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    v22 = *(void (**)(id, uint64_t, uint64_t))(v21 + 32);
    v28 = (void (**)(char *, char *, uint64_t))v18;
    v23 = v20;
    v10 = v19;
    v22(v18, v23, v21);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v19[6])(v8, 1, v9) == 1)
    {
      lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
      swift_allocError();
      *v24 = 1;
      swift_willThrow();

      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE63B8]);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      return;
    }
    v26 = v19[4];
    v26(v12, v8, v9);
    v26(v15, v12, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    v25 = v34;
    v18 = v28;
  }
  else
  {
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
    static UTType.png.getter();
    v25 = v34;
  }
  specialized static CodableCGImage.export(_:to:as:)((CGImage *)v18, v25, (uint64_t)v15);
  ((void (*)(char *, uint64_t))v10[1])(v15, v9);

}

Class CodableCGImage.init(from:)@<X0>(uint64_t a1@<X0>, Class *a2@<X8>)
{
  uint64_t v2;
  Class result;

  result = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableCGImage(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  int Identifier;
  uint64_t v5;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v11[40];

  v3 = *v1;
  Identifier = CGImageGetIdentifier();
  v5 = *((_QWORD *)a1 + 2);
  v8 = *a1;
  v9 = v5;
  v10 = *(__int128 *)((char *)a1 + 24);
  ProtobufEncoder.archiveHost.getter((uint64_t)v11);
  v7[2] = v11;
  v7[3] = v3;
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(Identifier, (void (*)(void))closure #1 in CodableCGImage.encode(to:)partial apply, (unint64_t)v7);
  return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
}

Class protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableCGImage@<X0>(uint64_t a1@<X0>, Class *a2@<X8>)
{
  uint64_t v2;
  Class result;

  result = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t CodableRBDisplayListContents.base.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CodableRBDisplayListContents.base.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CodableRBDisplayListContents.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableRBDisplayListContents.encode(to:)(uint64_t *a1)
{
  void **v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  CC_LONG h4;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  Swift::UInt v24;
  uint64_t result;
  void *v26;
  uint64_t v27;
  objc_super v28;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *v1;
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  *(_QWORD *)&into.state.h0 = *a1;
  *(_QWORD *)&into.state.h2 = v4;
  *(_QWORD *)&into.state.h4 = v5;
  *(_QWORD *)&into.state.Nh = v6;
  *(_QWORD *)&into.state.data[1] = v7;
  v8 = ProtobufEncoder.archiveWriter.getter();
  if (!v8)
  {
    lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError();
    swift_allocError();
    return swift_willThrow();
  }
  v9 = v8;
  v10 = (objc_class *)type metadata accessor for RBDisplayListEncoderDelegate();
  v11 = (char *)objc_allocWithZone(v10);
  v12 = &v11[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
  *(_QWORD *)v12 = v3;
  *((_QWORD *)v12 + 1) = v4;
  *((_QWORD *)v12 + 2) = v5;
  *((_QWORD *)v12 + 3) = v6;
  *((_QWORD *)v12 + 4) = v7;
  v28.receiver = v11;
  v28.super_class = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = objc_msgSendSuper2(&v28, sel_init);
  *(_QWORD *)&into.state.h0 = 0;
  v14 = objc_msgSend(v2, sel_encodedDataForDelegate_error_, v13, &into);

  v15 = *(id *)&into.state.h0;
  if (v14)
  {
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    memset(&c, 0, sizeof(c));
    outlined copy of Data._Representation(v16, v18);
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v16, v18);
    h4 = c.h4;
    v21 = *(_QWORD *)&c.h0;
    v20 = *(_QWORD *)&c.h2;
    swift_beginAccess();
    v22 = specialized Collection<>.firstIndex(of:)(v21, v20, h4, *(_QWORD *)(v9 + 32));
    if ((v23 & 1) != 0)
    {
      *(_QWORD *)&c.h0 = v21;
      *(_QWORD *)&c.h2 = v20;
      c.h4 = h4;
      LOBYTE(c.Nl) = 0;
      outlined copy of Data._Representation(v16, v18);
      v24 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&c, v9, v16, v18);
      outlined consume of Data._Representation(v16, v18);
      if (v27)
      {
LABEL_11:
        outlined consume of Data._Representation(v16, v18);
        return swift_release();
      }
    }
    else
    {
      v24 = v22;
    }
    if ((v24 & 0x8000000000000000) != 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v24)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(v24);
    }
    goto LABEL_11;
  }
  v26 = v15;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return swift_release();
}

unint64_t CodableRBDisplayListContents.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Class isa;
  objc_class *v18;
  char *v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  unint64_t result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  unint64_t v30;
  id v31;
  _QWORD *v32;
  void *v33;
  objc_super v34;
  id v35[8];

  v35[7] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  if (v6 < v5)
  {
    v7 = 0;
    while (1)
    {
      result = *(_QWORD *)(a1 + 24);
      if (result)
      {
        v26 = *(_QWORD *)(a1 + 32);
        if ((unint64_t)v6 < v26)
          goto LABEL_16;
        if (v26 < (unint64_t)v6)
          goto LABEL_35;
        *(_QWORD *)(a1 + 24) = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_35;
LABEL_16:
      if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_35;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_38;
          v27 = *(_QWORD *)(a1 + 8) + result;
          if ((unint64_t)v5 < v27)
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = 8;
          *(_QWORD *)(a1 + 32) = v27;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result;
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (!v2)
              break;
            return result;
          case 1uLL:
            v28 = *(_QWORD *)(a1 + 8) + 8;
            goto LABEL_32;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_39;
            v28 = *(_QWORD *)(a1 + 8) + result;
LABEL_32:
            if ((unint64_t)v5 < v28)
              goto LABEL_35;
            *(_QWORD *)(a1 + 8) = v28;
            break;
          case 5uLL:
            v28 = *(_QWORD *)(a1 + 8) + 4;
            goto LABEL_32;
          default:
            goto LABEL_35;
        }
      }
      v6 = *(void **)(a1 + 8);
      v5 = *(void **)(a1 + 16);
      if (v6 >= v5)
        goto LABEL_4;
    }
  }
  v7 = 0;
LABEL_4:
  *(_QWORD *)(a1 + 24) = 0;
  v8 = *(id *)a1;
  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a1 + 40);
  v11 = *(void **)(a1 + 48);
  v35[0] = *(id *)a1;
  v35[1] = v6;
  v35[2] = v5;
  v35[3] = 0;
  v32 = a2;
  v33 = v9;
  v35[4] = v9;
  v35[5] = v10;
  v35[6] = v11;
  v12 = ProtobufDecoder.archiveReader.getter();
  if (!v12)
    goto LABEL_35;
  if (v7 >= *(_QWORD *)(v12 + 40))
  {
    swift_release();
LABEL_35:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  ArchiveReader.subscript.getter(v7);
  v14 = v13;
  v16 = v15;
  swift_release();
  v30 = v16;
  v31 = (id)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v18 = (objc_class *)type metadata accessor for RBDisplayListDecoderDelegate();
  v19 = (char *)objc_allocWithZone(v18);
  v20 = &v19[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(_QWORD *)v20 = v8;
  *((_QWORD *)v20 + 1) = v6;
  *((_QWORD *)v20 + 2) = v5;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = v33;
  *((_QWORD *)v20 + 5) = v10;
  *((_QWORD *)v20 + 6) = v11;
  v34.receiver = v19;
  v34.super_class = v18;
  v21 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = objc_msgSendSuper2(&v34, sel_init);
  v35[0] = 0;
  v23 = objc_msgSend(v31, sel_decodedObjectWithData_delegate_error_, isa, v22, v35);

  if (v23)
  {
    v24 = v35[0];
    result = outlined consume of Data._Representation(v14, v30);
    *v32 = v23;
  }
  else
  {
    v29 = v35[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return outlined consume of Data._Representation(v14, v30);
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableRBDisplayListContents(uint64_t *a1)
{
  return CodableRBDisplayListContents.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableRBDisplayListContents@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CodableRBDisplayListContents.init(from:)(a1, a2);
}

uint64_t RBDisplayListEncoderDelegate.encoder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 16);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 24);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id RBDisplayListEncoderDelegate.init(_:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  char *v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = &v1[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *((_QWORD *)v5 + 2) = v4;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 24);
  v7.receiver = v1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t RBDisplayListEncoderDelegate.encoderSet.getter()
{
  return ProtobufEncoder.rbEncoderSet.getter();
}

uint64_t RBDisplayListEncoderDelegate.encodedData(image:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;

  v5 = v2;
  v6 = specialized static ProtobufEncoder.encoding(_:)((uint64_t)v5, a1, a2);

  return v6;
}

uint64_t RBDisplayListEncoderDelegate.encodedData(cgFont:)(void *a1)
{
  char *v1;
  uint64_t v2;
  char *v4;
  CGFont *v5;
  uint64_t v6;
  void *v8[3];
  uint64_t v9;
  uint64_t v10;

  memset(v8, 0, sizeof(v8));
  v9 = MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32];
  v4 = v1;
  v5 = a1;
  swift_bridgeObjectRetain();
  CodableCGFont.encode(to:)((uint64_t)v8, v5);
  if (v2)
  {
    free(v8[0]);
    v6 = v9;
  }
  else
  {
    v6 = ProtobufEncoder.takeData()();
    free(v8[0]);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Bool __swiftcall RBDisplayListEncoderDelegate.shouldEncodeFontSubset(cgFont:)(CGFontRef cgFont)
{
  _BYTE v2[2];

  ProtobufEncoder.archiveOptions.getter(v2);
  return (v2[0] & 0x14) != 4;
}

uint64_t RBDisplayListEncoderDelegate.encodedFontData(data:cgFont:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;

  v5 = v2;
  outlined copy of Data._Representation(a1, a2);
  v6 = specialized static ProtobufEncoder.encoding(_:)((uint64_t)v5, a1, a2);
  outlined consume of Data._Representation(a1, a2);

  return v6;
}

void RBDisplayListEncoderDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t RBDisplayListDecoderDelegate.decoder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  id v8;

  v2 = (__int128 *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 32);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 40);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 48);
  v7 = *v2;
  v6 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  v8 = (id)v7;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id RBDisplayListDecoderDelegate.init(_:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = &v1[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(_OWORD *)v7 = *(_OWORD *)a1;
  *((_QWORD *)v7 + 2) = v4;
  *((_QWORD *)v7 + 3) = v5;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a1 + 32);
  *((_QWORD *)v7 + 6) = v6;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

unint64_t lazy protocol witness table accessor for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformImage.Error, &unk_25062F000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodablePlatformImage.Error, &unk_25062F000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error);
  }
  return result;
}

Class RBDisplayListDecoderDelegate.decodedImageContents(data:type:)(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  Class v9;
  int v10;
  Class v11;
  void *v12;
  _QWORD v14[7];

  outlined copy of Data._Representation(a1, a2);
  ProtobufDecoder.init(_:)(a1, a2);
  v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[6] = v8;
  v9 = specialized CodableRBImage.init(from:)(v14);
  if (!v4)
  {
    v11 = v9;
    if (v9)
    {
      *a3 = v10;
      v12 = (void *)v14[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v11;
    }
    lazy protocol witness table accessor for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error();
    swift_allocError();
    swift_willThrow();
  }
  v11 = (Class)v14[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v11;
}

CGFontRef RBDisplayListDecoderDelegate.decodedCGFont(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  CGFontRef v6;
  void *v7;
  _QWORD v9[7];

  outlined copy of Data._Representation(a1, a2);
  ProtobufDecoder.init(_:)(a1, a2);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[6] = v5;
  v6 = specialized CodableCGFont.init(from:)((uint64_t)v9);
  v7 = (void *)v9[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v6;
}

id RBDisplayListDecoderDelegate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void RBDisplayListDecoderDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for RBDisplayListEncoderDelegate()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for RBDisplayListDecoderDelegate()
{
  return objc_opt_self();
}

Class specialized static CodableCGImage.import(from:)()
{
  NSData v0;
  CGImageSource *v1;
  objc_class *ImageAtIndex;
  _BYTE *v3;
  _BYTE *v4;

  v0.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v1 = CGImageSourceCreateWithData(v0.super.isa, 0);

  if (v1)
  {
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v1, 0, 0);
    if (ImageAtIndex)
    {
      v0.super.isa = ImageAtIndex;
    }
    else
    {
      lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
      swift_allocError();
      *v4 = 0;
      swift_willThrow();
    }

  }
  else
  {
    lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
    swift_allocError();
    *v3 = 0;
    swift_willThrow();
  }
  return v0.super.isa;
}

Class specialized CodableRBImage.init(from:)(_QWORD *a1)
{
  Class v1;
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Class v9;
  _QWORD *v10;
  Class v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  if (v4 < (unint64_t)v5)
  {
    v6 = v2;
    v1 = 0;
    while (1)
    {
      v7 = a1[3];
      if (!v7)
        goto LABEL_11;
      v8 = a1[4];
      if (v4 >= v8)
        break;
LABEL_13:
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((v7 & 7) != 2)
          goto LABEL_30;
        ProtobufDecoder.beginMessage()();
        if (v6)
          goto LABEL_31;
        v9 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        v6 = 0;
        v10 = (_QWORD *)a1[5];
        if (!v10[2])
        {
          __break(1u);
LABEL_37:
          __break(1u);
          __break(1u);
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
          v21 = v20[2];
          if (!v21)
          {
            __break(1u);
            JUMPOUT(0x235116A04);
          }
          v18 = v21 - 1;
          v19 = v20[v18 + 4];
          v20[2] = v18;

          a1[5] = v20;
          a1[2] = v19;
          return v1;
        }
        v11 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v12 = v10[2];
          if (!v12)
            goto LABEL_29;
        }
        else
        {
          v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          v12 = v10[2];
          if (!v12)
          {
LABEL_29:
            __break(1u);
LABEL_30:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_31:

            return v1;
          }
        }
        v13 = v12 - 1;
        v14 = v10[v13 + 4];
        v10[2] = v13;

        a1[5] = v10;
        a1[2] = v14;
        v1 = v11;
      }
      else
      {
        switch(v7 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (!v6)
              break;
            goto LABEL_31;
          case 1uLL:
            v15 = a1[1] + 8;
            goto LABEL_26;
          case 2uLL:
            v16 = ProtobufDecoder.decodeVarint()();
            if (v6)
              goto LABEL_31;
            if (v16 < 0)
              goto LABEL_37;
            v15 = a1[1] + v16;
LABEL_26:
            if ((unint64_t)v5 < v15)
              goto LABEL_30;
            a1[1] = v15;
            break;
          case 5uLL:
            v15 = a1[1] + 4;
            goto LABEL_26;
          default:
            goto LABEL_30;
        }
      }
      v4 = a1[1];
      v5 = (_QWORD *)a1[2];
      if (v4 >= (unint64_t)v5)
      {
        a1[3] = 0;
        if (!v1)
          goto LABEL_4;
        return v1;
      }
    }
    if (v8 < v4)
      goto LABEL_30;
    a1[3] = 0;
LABEL_11:
    v7 = ProtobufDecoder.decodeVarint()();
    if (v6)
      goto LABEL_31;
    if (v7 < 8)
      goto LABEL_30;
    goto LABEL_13;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return v1;
}

unint64_t lazy protocol witness table accessor for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error;
  if (!lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RBDisplayListDecoderDelegate.Error, &unk_25063F420);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error;
  if (!lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RBDisplayListDecoderDelegate.Error, &unk_25063F420);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodablePlatformImage()
{
  return &type metadata for CodablePlatformImage;
}

ValueMetadata *type metadata accessor for CodableCGImage()
{
  return &type metadata for CodableCGImage;
}

ValueMetadata *type metadata accessor for CodableRBDisplayListContents()
{
  return &type metadata for CodableRBDisplayListContents;
}

uint64_t method lookup function for RBDisplayListEncoderDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RBDisplayListEncoderDelegate.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for RBDisplayListDecoderDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RBDisplayListDecoderDelegate.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

void *type metadata accessor for RBDisplayListDecoderDelegate.Error()
{
  return &unk_25063F420;
}

void *type metadata accessor for CodablePlatformImage.Error()
{
  return &unk_25062F000;
}

unint64_t lazy protocol witness table accessor for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:);
  if (!lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:))
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Key #1 in CodableCGImage.encode(to:), &unk_250619C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:);
  if (!lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:))
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Key #1 in CodableCGImage.encode(to:), &unk_250619C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:));
  }
  return result;
}

uint64_t outlined init with copy of AnyArchivedViewHost?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized static CodableCGImage.export(_:to:as:)(CGImage *a1, CGDataConsumer *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  NSObject *v29;
  char v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  os_signpost_id_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  __CFString *v44;
  CGImage *v45;
  CGImage *CopyForImageIODestination;
  uint64_t v47;
  const __CFData *v48;
  uint64_t inited;
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  __CFString *v54;
  id v55;
  NSDictionary v56;
  CGImageSource *v57;
  CGImageSource *v58;
  const __CFString *v59;
  __CFString *v60;
  NSObject *v61;
  char *v62;
  os_signpost_type_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  const char *v68;
  CGImageDestination *v69;
  CGImageDestination *v70;
  NSObject *v71;
  char *v72;
  os_signpost_type_t v73;
  char v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  _BYTE *v80;
  NSObject *v81;
  os_signpost_type_t v82;
  char v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  char *v89;
  uint8_t *v90;
  os_signpost_id_t v91;
  char *v92;
  char *v93;
  uint8_t *v94;
  os_signpost_id_t v95;
  char *v96;
  char *v98;
  uint8_t *v99;
  os_signpost_id_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  CGDataConsumerRef v114;
  uint64_t v115;
  CGImage *v116;
  uint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;

  v114 = a2;
  v116 = a1;
  v108 = type metadata accessor for OSSignpostError();
  v4 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v106 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v105 = (char *)&v101 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v103 = (char *)&v101 - v9;
  v10 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v107 = (char *)&v101 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v104 = (char *)&v101 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v119 = (char *)&v101 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v120 = (char *)&v101 - v21;
  v22 = type metadata accessor for UTType();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for archiving != -1)
    swift_once();
  v26 = type metadata accessor for OSSignposter();
  v27 = __swift_project_value_buffer(v26, (uint64_t)static Signpost.archiving);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v115 = a3;
  v28(v25, a3, v22);
  static OSSignpostID.exclusive.getter();
  v113 = v27;
  v29 = OSSignposter.logHandle.getter();
  LODWORD(v109) = static os_signpost_type_t.begin.getter();
  v30 = OS_os_log.signpostsEnabled.getter();
  v110 = v13;
  v117 = v10;
  v111 = v4;
  if ((v30 & 1) != 0)
  {
    v102 = v11;
    v118 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v118(v119, v120, v10);
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v122 = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = UTType.identifier.getter();
    v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v11 = v102;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    v35 = v119;
    v36 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_2349C4000, v29, (os_signpost_type_t)v109, v36, "CodableCGImage.export", "typeIdentifier=%{name=typeIdentifier}s", v31, 0xCu);
    swift_arrayDestroy();
    v37 = v32;
    v10 = v117;
    MEMORY[0x23B7C9D54](v37, -1, -1);
    MEMORY[0x23B7C9D54](v31, -1, -1);

    v38 = v35;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v35, v10);
    v39 = v118;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    v39 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v38 = v119;
  }
  v40 = v120;
  v118 = v39;
  v39(v38, v120, v10);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v41 = OSSignpostIntervalState.init(id:isOpen:)();
  v42 = *(void (**)(char *, uint64_t))(v11 + 8);
  v42(v40, v10);
  v43 = UTType.identifier.getter();
  v44 = (__CFString *)MEMORY[0x23B7C5DAC](v43);
  swift_bridgeObjectRelease();
  v45 = v116;
  CopyForImageIODestination = _CGImageCreateCopyForImageIODestination(v116);
  if (!CopyForImageIODestination)
    CopyForImageIODestination = v45;
  v47 = CGImageCopySourceData();
  if (!v47)
    goto LABEL_19;
  v48 = (const __CFData *)v47;
  v120 = (char *)v42;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  v50 = (void *)*MEMORY[0x24BDD9810];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDD9810];
  type metadata accessor for CFStringRef(0);
  *(_QWORD *)(inited + 40) = v44;
  v51 = (void *)*MEMORY[0x24BDD97B0];
  *(_QWORD *)(inited + 64) = v52;
  *(_QWORD *)(inited + 72) = v51;
  *(_QWORD *)(inited + 104) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 80) = 1;
  v53 = v50;
  v54 = v44;
  v55 = v51;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  v56.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v57 = CGImageSourceCreateWithData(v48, v56.super.isa);
  if (!v57)
  {
LABEL_18:

    v10 = v117;
    v42 = (void (*)(char *, uint64_t))v120;
LABEL_19:
    v69 = CGImageDestinationCreateWithDataConsumer(v114, v44, 1uLL, 0);
    if (v69)
    {
      v70 = v69;
      CGImageDestinationAddImage(v69, CopyForImageIODestination, 0);
      CGImageDestinationFinalize(v70);

      v71 = OSSignposter.logHandle.getter();
      v72 = v110;
      OSSignpostIntervalState.signpostID.getter();
      v73 = static os_signpost_type_t.end.getter();
      v74 = OS_os_log.signpostsEnabled.getter();
      v75 = v111;
      if ((v74 & 1) != 0)
      {
        swift_retain();
        v76 = v106;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v77 = v108;
        v78 = (*(unsigned int (**)(char *, uint64_t))(v75 + 88))(v76, v108) == *MEMORY[0x24BEE7810];
        v109 = v41;
        if (v78)
        {
          v88 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
          v88 = "";
        }
        v89 = v110;
        v118(v38, v110, v10);
        v90 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v90 = 0;
        v91 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v71, v73, v91, "CodableCGImage.export", v88, v90, 2u);
        MEMORY[0x23B7C9D54](v90, -1, -1);

        v42(v89, v10);
      }
      else
      {

        v38 = v72;
      }
    }
    else
    {
      lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
      v79 = swift_allocError();
      *v80 = 0;
      swift_willThrow();

      v81 = OSSignposter.logHandle.getter();
      v38 = v107;
      OSSignpostIntervalState.signpostID.getter();
      v82 = static os_signpost_type_t.end.getter();
      v83 = OS_os_log.signpostsEnabled.getter();
      v84 = v111;
      if ((v83 & 1) != 0)
      {
        v112 = v79;
        swift_retain();
        v85 = v105;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v86 = v108;
        if ((*(unsigned int (**)(char *, uint64_t))(v84 + 88))(v85, v108) == *MEMORY[0x24BEE7810])
        {
          v87 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v86);
          v87 = "";
        }
        v92 = v119;
        v93 = v107;
        v118(v119, v107, v10);
        v94 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v94 = 0;
        v95 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_2349C4000, v81, v82, v95, "CodableCGImage.export", v87, v94, 2u);
        MEMORY[0x23B7C9D54](v94, -1, -1);

        v96 = v93;
        v38 = v92;
        v42(v96, v10);
      }
      else
      {

      }
    }
    goto LABEL_32;
  }
  v58 = v57;
  v59 = (id)CGImageSourceGetType(v57);
  if (!v59)
  {
    v60 = (__CFString *)v58;
LABEL_17:

    v38 = v119;
    goto LABEL_18;
  }
  v60 = (__CFString *)v59;
  if (!CFEqual(v59, v54))
  {

    goto LABEL_17;
  }
  CFDataGetBytePtr(v48);
  CFDataGetLength(v48);
  CGDataConsumerPutBytes();

  v61 = OSSignposter.logHandle.getter();
  v62 = v104;
  OSSignpostIntervalState.signpostID.getter();
  v63 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v120)(v62, v117);
    return swift_release();
  }
  swift_retain();
  v64 = v103;
  checkForErrorAndConsumeState(state:)();
  swift_release();
  v65 = v111;
  v66 = v108;
  v67 = (*(uint64_t (**)(char *, uint64_t))(v111 + 88))(v64, v108);
  v10 = v117;
  v42 = (void (*)(char *, uint64_t))v120;
  if (v67 == *MEMORY[0x24BEE7810])
  {
    v68 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v66);
    v68 = "";
  }
  v98 = v119;
  v118(v119, v62, v10);
  v99 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v99 = 0;
  v100 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_2349C4000, v61, v63, v100, "CodableCGImage.export", v68, v99, 2u);
  MEMORY[0x23B7C9D54](v99, -1, -1);

  v42(v62, v10);
  v38 = v98;
LABEL_32:
  v42(v38, v10);
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for CodableCGImage.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2351176B8 + 4 * byte_2352CAD05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2351176EC + 4 * byte_2352CAD00[v4]))();
}

uint64_t sub_2351176EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351176F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2351176FCLL);
  return result;
}

uint64_t sub_235117708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235117710);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_235117714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23511771C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodableCGImage.Error()
{
  return &type metadata for CodableCGImage.Error;
}

void *type metadata accessor for Key #1 in CodableCGImage.encode(to:)()
{
  return &unk_250619C48;
}

uint64_t storeEnumTagSinglePayload for RBDisplayListDecoderDelegate.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_235117788 + 4 * byte_2352CAD0A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2351177A8 + 4 * byte_2352CAD0F[v4]))();
}

_BYTE *sub_235117788(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2351177A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2351177B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2351177B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2351177C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2351177C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CodableRBImage.Error()
{
  return &type metadata for CodableRBImage.Error;
}

void closure #1 in CodableCGImage.encode(to:)partial apply(CGDataConsumer *a1)
{
  partial apply for closure #1 in CodableCGImage.encode(to:)(a1);
}

uint64_t closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  uint64_t v8;
  id v9;
  uint64_t v11[2];

  type metadata accessor for GraphicsContext.Storage();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 32) = 1065353216;
  *(_QWORD *)(v8 + 40) = 0x7FF8000000000000;
  v11[0] = a2;
  v11[1] = a3;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  swift_retain();
  v9 = a1;
  swift_retain();
  *(_QWORD *)(v8 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v9, v11);
  *(_QWORD *)(v8 + 24) = RBDisplayListGetState();
  *(_BYTE *)(v8 + 48) = 0;
  v11[0] = v8;
  a4(v11);
  return swift_release();
}

uint64_t Image.init(size:label:opaque:colorMode:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char *a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v18 = *a6;
  if ((a5 & 1) != 0)
    v19 = 163;
  else
    v19 = 161;
  type metadata accessor for RenderedImageProviderBox();
  v20 = swift_allocObject();
  type metadata accessor for AtomicBuffer<RenderedImageProviderBox.CachedImage?>(0);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 40) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v20 + 96) = a8;
  *(_QWORD *)(v20 + 104) = v21;
  *(double *)(v20 + 16) = a9;
  *(double *)(v20 + 24) = a10;
  *(_QWORD *)(v20 + 32) = a1;
  *(_QWORD *)(v20 + 40) = a2;
  *(_QWORD *)(v20 + 48) = a3;
  *(_QWORD *)(v20 + 56) = a4;
  *(_BYTE *)(v20 + 64) = v18;
  *(_DWORD *)(v20 + 68) = 0;
  *(_BYTE *)(v20 + 72) = 1;
  *(_DWORD *)(v20 + 76) = v19;
  *(_BYTE *)(v20 + 80) = 3;
  *(_QWORD *)(v20 + 88) = a7;
  return v20;
}

uint64_t Image.init(size:label:options:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  char v15;
  int v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v15 = *a5;
  v16 = *((_DWORD *)a5 + 1);
  v17 = a5[8];
  v18 = *((_DWORD *)a5 + 3);
  v19 = a5[16];
  type metadata accessor for RenderedImageProviderBox();
  v20 = swift_allocObject();
  type metadata accessor for AtomicBuffer<RenderedImageProviderBox.CachedImage?>(0);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 40) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(double *)(v20 + 16) = a8;
  *(double *)(v20 + 24) = a9;
  *(_QWORD *)(v20 + 32) = a1;
  *(_QWORD *)(v20 + 40) = a2;
  *(_QWORD *)(v20 + 48) = a3;
  *(_QWORD *)(v20 + 56) = a4;
  *(_BYTE *)(v20 + 64) = v15;
  *(_DWORD *)(v20 + 68) = v16;
  *(_BYTE *)(v20 + 72) = v17;
  *(_DWORD *)(v20 + 76) = v18;
  *(_BYTE *)(v20 + 80) = v19;
  *(_QWORD *)(v20 + 88) = a6;
  *(_QWORD *)(v20 + 96) = a7;
  *(_QWORD *)(v20 + 104) = v21;
  return v20;
}

void RenderedImageProviderBox.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  char v22;
  int v23;
  char v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  CGImage *v31;
  int64_t Height;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  char v38;
  os_unfair_lock_s *v39;
  double v40;
  double v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  float v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t Width;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t *v71;
  unsigned __int8 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  __int128 v85;
  __int128 v86;
  int v87;

  v3 = v2;
  v4 = a1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 104);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
  v9 = *(_QWORD **)(v7 + 24);
  v8 = *(void **)(v7 + 32);
  v10 = *(_QWORD *)(v7 + 40);
  outlined copy of AnyGestureInfo<()>.Value?(v9, v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 16));
  swift_release();
  v69 = a2;
  if (v9)
  {
    swift_retain();
    v11 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v6);
    swift_release();
    if ((v11 & 1) == 0)
    {
      v27 = v9;
      v25 = v8;
      v26 = v10;
      goto LABEL_13;
    }
    swift_retain_n();
    PropertyList.Tracker.reset()();
    swift_release();
    v12 = (uint64_t)v9;
    v71 = v4;
    if (!v6)
      goto LABEL_4;
LABEL_6:
    v13 = *(_QWORD *)(v6 + 64);
    goto LABEL_7;
  }
  type metadata accessor for PropertyList.Tracker();
  v12 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  v15 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = v15;
  v16 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 48) = v16;
  *(_BYTE *)(v14 + 56) = 0;
  *(_QWORD *)(v12 + 16) = v14;
  v71 = v4;
  if (v6)
    goto LABEL_6;
LABEL_4:
  v13 = 0;
LABEL_7:
  v17 = *(_QWORD *)(v12 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 16));
  *(_QWORD *)(v17 + 24) = v13;
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 16));
  swift_release();
  swift_retain_n();
  swift_retain_n();
  v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v6);
  swift_release_n();
  swift_release_n();
  v19 = *(double *)(v3 + 16);
  v20 = *(double *)(v3 + 24);
  *(_QWORD *)&v73 = v6;
  *((_QWORD *)&v73 + 1) = v12;
  v21 = *(_DWORD *)(v3 + 68);
  v22 = *(_BYTE *)(v3 + 72);
  v23 = *(_DWORD *)(v3 + 76);
  v24 = *(_BYTE *)(v3 + 80);
  LOBYTE(v76) = *(_BYTE *)(v3 + 64);
  HIDWORD(v76) = v21;
  LOBYTE(v77) = v22;
  HIDWORD(v77) = v23;
  LOBYTE(v78) = v24;
  v25 = (void *)specialized static CGImageRef.render(size:scale:environment:options:renderer:)((uint64_t *)&v73, (unsigned __int8 *)&v76, *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96), v19, v20, v18);
  if (v25)
  {
    v26 = *(_QWORD *)&v18;
    swift_retain();
    v27 = (void *)v12;
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v9, v8);
  v28 = *(_QWORD *)(v3 + 104);
  outlined copy of AnyGestureInfo<()>.Value?(v27, v25);
  outlined copy of AnyGestureInfo<()>.Value?(v27, v25);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 16));
  v29 = *(_QWORD *)(v28 + 24);
  v30 = *(void **)(v28 + 32);
  *(_QWORD *)(v28 + 24) = v27;
  *(_QWORD *)(v28 + 32) = v25;
  *(_QWORD *)(v28 + 40) = v26;
  outlined consume of AnyGestureInfo<()>.Value?(v29, v30);
  os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 16));
  outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v27, v25);
  swift_release();
  swift_release_n();
  swift_release();
  if (!v27)
  {
    v70 = v25;
    v43 = 0;
    v33 = v71[1];
    v42 = -1;
    v41 = 0.0;
    v67 = 0x3FF0000000000000;
    v68 = 0;
    v40 = 0.0;
    goto LABEL_18;
  }
  v9 = v27;
  v4 = v71;
LABEL_13:
  v31 = v25;
  v68 = (uint64_t)v27;
  outlined copy of AnyGestureInfo<()>.Value?(v27, v25);
  Width = CGImageGetWidth(v31);
  Height = CGImageGetHeight(v31);
  v33 = v4[1];
  v70 = v25;
  if (v33)
  {
    v34 = v9[2];
    swift_retain();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v34 + 16));
    v63 = Height;
    v64 = v3;
    v35 = *(_QWORD *)(v34 + 32);
    v36 = *(_QWORD *)(v34 + 40);
    v37 = *(double *)(v34 + 48);
    v38 = *(_BYTE *)(v34 + 56);
    v76 = *(_QWORD *)(v34 + 24);
    v77 = v35;
    v78 = v36;
    v79 = v37;
    v65 = v6;
    v39 = *(os_unfair_lock_s **)(v33 + 16);
    LOBYTE(v80) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v39 + 4);
    TrackerData.formUnion(_:)((uint64_t)&v76);
    Height = v63;
    swift_bridgeObjectRelease();
    v25 = v70;
    swift_bridgeObjectRelease();
    v3 = v64;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v39 + 4);
    v6 = v65;
    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 16));

    swift_release();
  }
  else
  {
    swift_retain();

  }
  swift_release();
  v40 = (double)Width;
  v41 = (double)Height;
  swift_release();
  swift_release();
  v42 = 0;
  v67 = v26;
  v43 = v25;
LABEL_18:
  v76 = v6;
  v77 = v33;
  LOBYTE(v73) = 2;
  outlined copy of GraphicsImage.Contents?(v43, v42);
  v44 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v73);
  if (v33)
  {
    swift_retain_n();
    swift_retain_n();
    v45 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v6);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v76 = v6;
    v77 = 0;
    swift_retain();
    v45 = specialized static ShouldRedactContentKey.value(in:)(&v76, v46, v47, v48);
    swift_release();
  }
  v49 = (uint64_t)v43;
  v50 = v42;
  if ((v45 & 1) != 0)
  {
    v49 = swift_allocObject();
    v51 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    if (v51 != -1)
      swift_once();
    v76 = v6;
    v77 = v33;
    *(float *)(v49 + 16) = (*(float (**)(uint64_t *))(*(_QWORD *)static Color.foreground + 104))(&v76);
    *(_DWORD *)(v49 + 20) = v52;
    *(_DWORD *)(v49 + 24) = v54;
    *(float *)(v49 + 28) = v53 * 0.16;
    outlined consume of GraphicsImage.Contents?(v43, v42);
    swift_release();
    swift_release();
    v50 = 4;
  }
  v76 = v49;
  v55 = 0x3F8000003F800000;
  if ((v44 & 1) == 0)
    v55 = 0;
  LOBYTE(v77) = v50;
  v78 = v67;
  v79 = v40;
  v80 = v41;
  v81 = 0;
  v82 = v55;
  v83 = v55;
  v84 = (v44 & 1) == 0;
  v85 = 0u;
  v86 = 0u;
  v87 = 50397442;
  v56 = *(_QWORD *)(v3 + 32);
  v57 = *(_QWORD *)(v3 + 40);
  v58 = *(_QWORD *)(v3 + 48);
  v59 = *(_QWORD *)(v3 + 56);
  v60 = v58 & 1;
  if (v59)
    v61 = *(_QWORD *)(v3 + 32);
  else
    v61 = 0;
  if (v59)
    v62 = *(_QWORD *)(v3 + 40);
  else
    v62 = 0;
  if (!v59)
    v60 = 0x1FFFFFFFELL;
  *(_QWORD *)&v73 = v61;
  *((_QWORD *)&v73 + 1) = v62;
  v74 = v60;
  v75 = v59;
  v72 = 3;
  outlined copy of GraphicsImage.Contents?((id)v49, v50);
  outlined copy of Text?(v56, v57, v58, v59);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v76, v59 != 0, &v73, 0, &v72, 0.0, 1, v69);
  swift_release();
  outlined consume of GraphicsImage.Contents?(v43, v42);
  outlined consume of GraphicsImage.Contents?((void *)v49, v50);
  outlined consume of AnyGestureInfo<()>.Value?(v68, v70);
}

uint64_t RenderedImageProviderBox.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v33)(uint64_t);
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t (*v39)();
  uint64_t v40;
  char v41;
  uint64_t (*v42)();
  uint64_t v43;
  char v44;
  uint64_t v45;

  v1 = v0;
  v45 = *MEMORY[0x24BDAC8D0];
  v2 = swift_dynamicCastClass();
  if (!v2)
    return 0;
  v3 = v2;
  if (*(double *)(v0 + 16) != *(double *)(v2 + 16) || *(double *)(v0 + 24) != *(double *)(v2 + 24))
    return 0;
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v2 + 56);
  if (!v5)
  {
    if (!v6)
    {
      swift_retain();
      goto LABEL_26;
    }
    return 0;
  }
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v10 = *(_QWORD *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 40);
  v12 = *(_QWORD *)(v2 + 48);
  if ((v9 & 1) != 0)
  {
    if ((v12 & 1) != 0)
    {
      v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96);
      v35 = *(_QWORD *)(v2 + 40);
      v13 = *(_QWORD *)(v2 + 48);
      outlined copy of Text?(v7, v8, v9, v5);
      outlined copy of Text?(v7, v8, v9, v5);
      swift_retain();
      LOBYTE(v37) = v13;
      outlined copy of Text?(v10, v35, v13, v6);
      outlined copy of Text.Storage(v7, v8, 1);
      outlined copy of Text.Storage(v10, v35, 1);
      v11 = v35;
      LOBYTE(v33) = v33(v10);
      outlined consume of Text.Storage(v10, v35, 1);
      outlined consume of Text.Storage(v7, v8, 1);
      v14 = 1;
      if ((v33 & 1) != 0)
        goto LABEL_25;
LABEL_17:
      outlined consume of Text.Storage(v10, v11, v14);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v7, v8, v9 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text?(v7, v8, v9, v5);
LABEL_28:
      swift_release();
      return 0;
    }
LABEL_16:
    v15 = *(_QWORD *)(v2 + 48);
    outlined copy of Text?(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
    outlined copy of Text?(v7, v8, v9, v5);
    swift_retain();
    outlined copy of Text?(v10, v11, v15, v6);
    v14 = (v9 & 1) == 0;
    goto LABEL_17;
  }
  if ((v12 & 1) != 0)
    goto LABEL_16;
  v37 = *(_QWORD *)(v2 + 48);
  if (v7 == v10 && v8 == v11)
  {
    outlined copy of Text?(v7, v8, v9, v5);
    outlined copy of Text?(v7, v8, v9, v5);
    swift_retain();
    outlined copy of Text?(v7, v8, v37, v6);
    goto LABEL_25;
  }
  v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v7, v8, v9, v5);
  outlined copy of Text?(v7, v8, v9, v5);
  swift_retain();
  outlined copy of Text?(v10, v11, v37, v6);
  v14 = 0;
  if ((v36 & 1) == 0)
    goto LABEL_17;
LABEL_25:
  v34 = v37 & 1;
  v38 = specialized static Array<A>.== infix(_:_:)(v5, v6);
  outlined consume of Text.Storage(v10, v11, v34);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v7, v8, v9 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v7, v8, v9, v5);
  if ((v38 & 1) == 0)
    goto LABEL_28;
LABEL_26:
  v17 = *(_DWORD *)(v1 + 68);
  v18 = *(_BYTE *)(v1 + 72);
  v19 = *(_DWORD *)(v1 + 76);
  v20 = *(_BYTE *)(v1 + 80);
  LOBYTE(v42) = *(_BYTE *)(v1 + 64);
  HIDWORD(v42) = v17;
  LOBYTE(v43) = v18;
  HIDWORD(v43) = v19;
  v44 = v20;
  v21 = *(_DWORD *)(v3 + 68);
  v22 = *(_BYTE *)(v3 + 72);
  v23 = *(_DWORD *)(v3 + 76);
  v24 = *(_BYTE *)(v3 + 80);
  LOBYTE(v39) = *(_BYTE *)(v3 + 64);
  HIDWORD(v39) = v21;
  LOBYTE(v40) = v22;
  HIDWORD(v40) = v23;
  v41 = v24;
  if (!specialized static RasterizationOptions.== infix(_:_:)((unsigned __int8 *)&v42, (unsigned __int8 *)&v39))
    goto LABEL_28;
  v26 = *(_QWORD *)(v1 + 88);
  v25 = *(_QWORD *)(v1 + 96);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 24) = v25;
  v29 = *(_QWORD *)(v3 + 88);
  v28 = *(_QWORD *)(v3 + 96);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = v28;
  v42 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v43 = v27;
  v39 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v40 = v30;
  type metadata accessor for (_:)();
  swift_retain();
  swift_retain();
  v31 = AGCompareValues();
  swift_release();
  swift_release();
  swift_release();
  return v31;
}

uint64_t RenderedImageProviderBox.__ivar_destroyer()
{
  uint64_t *v0;

  outlined consume of Text?(v0[4], v0[5], v0[6], v0[7]);
  swift_release();
  return swift_release();
}

uint64_t RenderedImageProviderBox.__deallocating_deinit()
{
  uint64_t *v0;

  outlined consume of Text?(v0[4], v0[5], v0[6], v0[7]);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized static CGImageRef.render(size:scale:environment:options:renderer:)(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  id v16;
  id v17;
  uint64_t inited;
  void *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  Class isa;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  id v35;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v12 = *a1;
  v13 = a1[1];
  v14 = *a2;
  v15 = *((_DWORD *)a2 + 3);
  if ((v15 & 1) != 0
    && (v16 = objc_msgSend((id)objc_opt_self(), sel_sharedDefaultDevice)) != 0)
  {
    v17 = v16;
    swift_unknownObjectRetain();
  }
  else
  {
    v17 = objc_msgSend((id)objc_opt_self(), sel_sharedDevice);
  }
  type metadata accessor for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23528B7A0;
  v19 = (void *)*MEMORY[0x24BE7F1E0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BE7F1E0];
  v20 = MEMORY[0x24BEE50B0];
  v21 = (void **)MEMORY[0x24BE7F1D0];
  *(double *)(inited + 40) = a7;
  v22 = *v21;
  *(_QWORD *)(inited + 64) = v20;
  *(_QWORD *)(inited + 72) = v22;
  v23 = MEMORY[0x24BEE3F88];
  *(_DWORD *)(inited + 80) = v14;
  v24 = (void *)*MEMORY[0x24BE7F1D8];
  *(_QWORD *)(inited + 104) = v23;
  *(_QWORD *)(inited + 112) = v24;
  v25 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 120) = (v15 & 2) != 0;
  v26 = (void *)*MEMORY[0x24BE7F1C8];
  *(_QWORD *)(inited + 144) = v25;
  *(_QWORD *)(inited + 152) = v26;
  *(_QWORD *)(inited + 184) = v23;
  *(_DWORD *)(inited + 160) = 1;
  v27 = v19;
  v28 = v22;
  v29 = v24;
  v30 = v26;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for RBImageRendererProperty(0);
  lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = v12;
  v32[3] = v13;
  v32[4] = a3;
  v32[5] = a4;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:);
  *(_QWORD *)(v33 + 24) = v32;
  aBlock[4] = partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:);
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  aBlock[3] = &block_descriptor_30;
  v34 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v35 = objc_msgSend(v17, sel_renderImageInRect_options_renderer_, isa, v34, 0.0, 0.0, a5, a6);
  swift_unknownObjectRelease();
  _Block_release(v34);
  swift_unknownObjectRelease();

  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return (uint64_t)v35;
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RenderedImageProviderBox()
{
  return objc_opt_self();
}

void type metadata accessor for AtomicBuffer<RenderedImageProviderBox.CachedImage?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AtomicBuffer<RenderedImageProviderBox.CachedImage?>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for RenderedImageProviderBox.CachedImage?, (uint64_t)&unk_250639890, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = type metadata accessor for AtomicBuffer(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<RenderedImageProviderBox.CachedImage?>);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for RenderedImageProviderBox.CachedImage(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for RenderedImageProviderBox.CachedImage(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for RenderedImageProviderBox.CachedImage(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

void *type metadata accessor for RenderedImageProviderBox.CachedImage()
{
  return &unk_250639890;
}

uint64_t sub_235118B8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_235118C14()
{
  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>)
  {
    type metadata accessor for (RBImageRendererProperty, Any)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>);
  }
}

void type metadata accessor for (RBImageRendererProperty, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (RBImageRendererProperty, Any))
  {
    type metadata accessor for RBImageRendererProperty(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (RBImageRendererProperty, Any));
  }
}

uint64_t sub_235118CE0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:)(void *a1)
{
  uint64_t v1;

  return closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t *))(v1 + 32));
}

uint64_t sub_235118D18()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t static UserDefaultKeyedFeature.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  char v15;
  _OWORD v17[2];

  v4 = (*(uint64_t (**)(void))(a2 + 40))();
  if (v4 == 2)
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
    v6 = (void *)v5(a1, a2);
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    v8 = v7(a1, a2);
    v9 = (void *)MEMORY[0x23B7C5DAC](v8);
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v6, sel_objectForKey_, v9);

    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of Any?((uint64_t)v17);
      v11 = (void *)v5(a1, a2);
      v12 = v7(a1, a2);
      v13 = (void *)MEMORY[0x23B7C5DAC](v12);
      swift_bridgeObjectRelease();
      v14 = (uint64_t (*)(uint64_t, uint64_t))objc_msgSend(v11, sel_BOOLForKey_, v13);

      (*(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))(a2 + 48))(v14, a1, a2);
    }
    else
    {
      memset(v17, 0, sizeof(v17));
      outlined destroy of Any?((uint64_t)v17);
      v14 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
      v15 = v14(a1, a2);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 48))(v15 & 1, a1, a2);
      LOBYTE(v14) = v14(a1, a2);
    }
  }
  else
  {
    LOBYTE(v14) = v4 & 1;
  }
  return v14 & 1;
}

uint64_t static UserDefaultKeyedFeature.defaultFeatureValue.getter()
{
  return 0;
}

id static UserDefaultKeyedFeature.defaults.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
}

{
  return static UserDefaultKeyedFeature.defaults.getter();
}

uint64_t specialized static Feature.defaultValue.getter()
{
  char *v1;
  char v2;
  unsigned int v3;
  _QWORD v4[5];

  swift_beginAccess();
  if ((static CoreTesting.isRunning & 1) != 0)
    return 1;
  v1 = getenv("SWIFTUI_GESTURE_CONTAINER");
  if (v1)
    return atoi(v1) != 0;
  v4[3] = &type metadata for GestureContainerFeature;
  v4[4] = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
  v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  if ((v2 & 1) == 0)
    return 0;
  if (one-time initialization token for v6 != -1)
    swift_once();
  v3 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    return dyld_program_sdk_at_least();
  else
    return static Semantics.forced >= v3;
}

{
  char *v1;
  char v2;
  unsigned int v3;
  _QWORD v4[5];

  swift_beginAccess();
  if (static CoreTesting.isRunning == 1)
  {
    swift_beginAccess();
    return static GestureContainerFeature.isEnabledOverride & 1;
  }
  else
  {
    v1 = getenv("SWIFTUI_GESTURE_CONTAINER");
    if (v1)
    {
      return atoi(v1) != 0;
    }
    else
    {
      v4[3] = &type metadata for GestureContainerFeature;
      v4[4] = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
      v2 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      if ((v2 & 1) != 0)
      {
        if (one-time initialization token for v6 != -1)
          swift_once();
        v3 = static Semantics.v6;
        if (one-time initialization token for forced != -1)
          swift_once();
        swift_beginAccess();
        if ((byte_25426FAB4 & 1) != 0)
          return dyld_program_sdk_at_least();
        else
          return static Semantics.forced >= v3;
      }
      else
      {
        return 0;
      }
    }
  }
}

uint64_t static Feature.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() & 1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance UnifiedHitTestingFeature@<X0>(_BYTE *a1@<X8>)
{
  unsigned int v2;
  uint64_t result;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v2 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v2)
      goto LABEL_7;
LABEL_9:
    result = 1;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  result = specialized static GestureContainerFeature.isEnabled.getter();
LABEL_10:
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ImprovedButtonGestureFeature@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized static Feature.defaultValue.getter();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance GestureContainerFeature@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized static Feature.defaultValue.getter();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2_1@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_1.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2_3@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_3.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v3@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v3.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v4@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v4.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v4_4@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, &static _SemanticFeature_v4_4.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v5@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v5_2@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5_2.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v6@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v6.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance Semantics.DismissPopsInNavigationSplitViewRoots@<X0>(_BYTE *a1@<X8>)
{
  unsigned int v2;
  uint64_t result;

  if (one-time initialization token for introduced != -1)
    swift_once();
  v2 = static Semantics.DismissPopsInNavigationSplitViewRoots.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    result = dyld_program_minos_at_least();
  else
    result = dword_25426FAB8 >= v2;
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnabledFeature@<X0>(_BYTE *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, static EnabledFeature.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2@<X0>(_QWORD *a1@<X2>, unsigned int *a2@<X3>, _BYTE *a3@<X8>)
{
  unsigned int v5;
  uint64_t result;

  if (*a1 != -1)
    swift_once();
  v5 = *a2;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v5;
  *a3 = result;
  return result;
}

uint64_t static UserDefaultKeyedFeature.test<A>(enabled:_:)(char a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t);
  uint64_t v11;
  unsigned int v13;

  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
  v10 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a6 + 48);
  v11 = v10(a1 & 1, a4, a6);
  a2(v11);
  return v10(v13, a4, a6);
}

uint64_t static BothFeatures.isEnabled.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void))(a3 + 16))() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4) & 1;
  else
    return 0;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance BothFeatures<A, B>(uint64_t *a1)
{
  return static BothFeatures.isEnabled.getter(a1[2], a1[3], a1[4], a1[5]);
}

uint64_t instantiation function for generic protocol witness table for BothFeatures<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BothFeatures<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BothFeatures<A, B>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in BothFeatures<A, B>()
{
  return &protocol witness table for BothFeatures<A, B>;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance BothFeatures<A, B>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BothFeatures<A, B>, a1);
  result = static Feature.defaultValue.getter(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t dispatch thunk of static Feature.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.key.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.defaultFeatureValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.defaults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.cachedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.cachedValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.cachedValue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

void type metadata accessor for BothFeatures()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int OffsetAttribute2;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t result;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(unint64_t *__return_ptr, uint64_t, __int128 *);
  _QWORD *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  _QWORD v108[5];
  __int128 v109;
  unint64_t v110;
  _BYTE v111[24];
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  int v115;
  unint64_t v116;
  unsigned int v117;
  __int16 v118;
  unint64_t v119;
  int v120;
  int v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  unint64_t v138;
  int v139;
  uint64_t v140;

  v83 = a5;
  v84 = a4;
  v92 = a3;
  v85 = a8;
  v140 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v103 = *(_QWORD *)a2;
  v90 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  LODWORD(v102) = *(_DWORD *)(a2 + 24);
  v12 = *(_DWORD *)(a2 + 28);
  v98 = *(_DWORD *)(a2 + 32);
  LODWORD(v101) = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 48);
  v99 = *(_QWORD *)(a2 + 40);
  v14 = *(_DWORD *)(a2 + 60);
  v96 = *(_DWORD *)(a2 + 56);
  LODWORD(v97) = v12;
  v15 = *(_DWORD *)(a2 + 64);
  v94 = *(_DWORD *)(a2 + 68);
  v95 = v14;
  v16 = *(_DWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 76);
  v93 = *(_DWORD *)(a2 + 80);
  swift_beginAccess();
  v18 = *(_DWORD *)(v11 + 16);
  v89 = v10;
  v130 = __PAIR64__(v18, v10);
  v131 = v16;
  v132 = v15;
  v133 = __PAIR64__(v17, v14);
  v91 = a7;
  v108[2] = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(0, a6, a7, v19);
  v21 = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo(0, a6, a7, v20);
  v108[3] = v21;
  v108[4] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _BackgroundStyleModifier<A>.BackgroundInfo, v21);
  v22 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v130, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v108, v21, MEMORY[0x24BEE4078], v22, MEMORY[0x24BEE40A8], v23);
  v130 = v103;
  v133 = v11;
  v131 = v90;
  *(_QWORD *)&v134 = __PAIR64__(v97, v102);
  v135 = v99;
  v136 = v13;
  *((_QWORD *)&v134 + 1) = __PAIR64__(v101, v98);
  *(_QWORD *)&v137 = __PAIR64__(v95, v96);
  v87 = v16;
  v88 = v15;
  *((_QWORD *)&v137 + 1) = __PAIR64__(v94, v15);
  v138 = __PAIR64__(v17, v16);
  v86 = v17;
  v139 = v93;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v100 = v13;
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v130, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  swift_release();
  closure #1 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(1, a6, a7, v24);
  DWORD2(v137) = AGGraphCreateOffsetAttribute2();
  closure #2 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(1, a6, a7, v25);
  LODWORD(v138) = AGGraphCreateOffsetAttribute2();
  DWORD2(v134) = v98 | 0x18;
  v28 = type metadata accessor for _AnchoredShapeStyle(0, a6, a7, v26);
  v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64);
  v82 = a6;
  if (v29)
    closure #3 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(1, a6, a7, v27);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v31 = *(_DWORD *)(v11 + 16);
  LOBYTE(v105) = 0;
  v32 = v90;
  *(_QWORD *)&v109 = __PAIR64__(v90, v102);
  v33 = v97;
  DWORD2(v109) = v97;
  v110 = 0;
  *(_QWORD *)v111 = 0;
  *(_DWORD *)&v111[8] = 0;
  ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)(OffsetAttribute2, *MEMORY[0x24BE096C0], v31, (char *)&v105, v101 & 1, (uint64_t)&v109, (uint64_t)&v116);
  v81 = (uint64_t)&v81;
  DWORD2(v109) = v117;
  *(_QWORD *)&v109 = v116;
  WORD6(v109) = v118;
  v110 = v119;
  *(_DWORD *)v111 = v120;
  *(_OWORD *)&v111[8] = v122;
  LODWORD(v112) = v123;
  *(_QWORD *)&v113 = v124;
  MEMORY[0x24BDAC7A8](v34);
  v79 = type metadata accessor for ShapeStyleResolver(0, v28, (uint64_t)&protocol witness table for _AnchoredShapeStyle<A>, v35);
  v80 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v79);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v109, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)&v78, v79, MEMORY[0x24BEE4078], v36, MEMORY[0x24BEE40A8], v37);
  swift_release();
  v38 = v32;
  swift_bridgeObjectRelease();
  swift_release();
  LODWORD(v81) = v105;
  AGGraphSetFlags();
  v39 = v103;
  v116 = v103;
  v119 = v11;
  v117 = v32;
  v120 = v102;
  v121 = v33;
  v40 = v98;
  *(_QWORD *)&v122 = __PAIR64__(v101, v98);
  v42 = v99;
  v41 = v100;
  *((_QWORD *)&v122 + 1) = v99;
  v123 = v100;
  v124 = __PAIR64__(v95, v96);
  v125 = v88;
  v126 = v94;
  v127 = v87;
  v128 = v86;
  v129 = v93;
  if ((v92 & 1) != 0)
  {
    v43 = v82;
    v44 = *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = v91;
    if (v44)
      v47 = closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(1, v43, v91, (uint64_t (*)(_QWORD))type metadata accessor for _BackgroundStyleModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
    else
      v47 = 0;
    v58 = type metadata accessor for _BackgroundStyleModifier(0, v43, v46, v45);
    _ViewInputs.applyBackgroundStyle<A, B>(value:offset:)(v89, v47, v58, v43, v46);
    v39 = v116;
    v11 = v119;
    v38 = v117;
    v57 = v120;
    v56 = v121;
    v40 = v122;
    v42 = *((_QWORD *)&v122 + 1);
    v41 = v123;
    v55 = DWORD1(v122);
    v53 = v124;
    v54 = HIDWORD(v124);
    v52 = v125;
    v48 = v126;
    v50 = v127;
    v51 = v128;
    v49 = v129;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49 = v93;
    v48 = v94;
    v51 = v86;
    v50 = v87;
    v52 = v88;
    v54 = v95;
    v53 = v96;
    v55 = v101;
    v56 = v97;
    v46 = v91;
    v43 = v82;
    v57 = v102;
  }
  v102 = v11;
  v103 = v39;
  *(_QWORD *)&v109 = v39;
  DWORD2(v109) = v38;
  v110 = v11;
  *(_DWORD *)v111 = v57;
  *(_DWORD *)&v111[4] = v56;
  *(_DWORD *)&v111[8] = v40;
  *(_DWORD *)&v111[12] = v55;
  *(_QWORD *)&v111[16] = v42;
  v112 = v41;
  *(_QWORD *)&v113 = __PAIR64__(v54, v53);
  *((_QWORD *)&v113 + 1) = __PAIR64__(v48, v52);
  v114 = __PAIR64__(v51, v50);
  v115 = v49;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v59 = swift_bridgeObjectRetain();
  v84(&v105, v59, &v109);
  v101 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v60 = v105;
  v61 = v106;
  v98 = v107;
  v63 = type metadata accessor for _BackgroundStyleModifier(0, v43, v46, v62);
  v104 = v89;
  *(_QWORD *)&v109 = v130;
  DWORD2(v109) = v131;
  v110 = v133;
  *(_OWORD *)v111 = v134;
  *(_QWORD *)&v111[16] = v135;
  v112 = v136;
  v113 = v137;
  v114 = v138;
  v115 = v139;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(&v104, &v109, v81, 0, v64, v63, (uint64_t)&protocol witness table for _BackgroundStyleModifier<A>, &v105);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v65 = v60;
  if ((v92 & 1) != 0)
    v66 = v105;
  else
    v66 = v60;
  if ((v92 & 1) != 0)
    v67 = v106;
  else
    v67 = v61;
  v68 = v42;
  if ((v92 & 1) != 0)
    v69 = v65;
  else
    v69 = v105;
  if ((v92 & 1) != 0)
    v70 = v61;
  else
    v70 = v106;
  *(_QWORD *)&v111[8] = MEMORY[0x24BEE4AF8];
  *(_DWORD *)&v111[16] = 0;
  *(_QWORD *)&v109 = v66;
  DWORD2(v109) = v67;
  v110 = v69;
  *(_DWORD *)v111 = v70;
  v71 = *(_QWORD *)(v100 + 16);
  if (v71)
  {
    v99 = v68;
    v97 = v65;
    swift_bridgeObjectRetain();
    v72 = swift_bridgeObjectRetain() + 40;
    do
    {
      (*(void (**)(__int128 *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v72 + 16))(&v109, &type metadata for PairwisePreferenceCombinerVisitor, &protocol witness table for PairwisePreferenceCombinerVisitor);
      v72 += 16;
      --v71;
    }
    while (v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v73 = *(_QWORD *)&v111[8];
    v74 = *(_DWORD *)&v111[16];
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v74 = 0;
    v73 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v76 = v85;
  *v85 = v73;
  v77 = v98;
  *((_DWORD *)v76 + 2) = v74;
  *((_DWORD *)v76 + 3) = v77;
  return result;
}

void static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int OffsetAttribute2;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  _QWORD v69[4];
  unint64_t v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;

  v54 = a7;
  v55 = a6;
  v56 = a5;
  v57 = a4;
  v64 = a3;
  v58 = a9;
  v101 = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  v14 = *(_QWORD *)a2;
  v15 = *(_DWORD *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_DWORD *)(a2 + 24);
  v18 = *(_DWORD *)(a2 + 28);
  v19 = *(_DWORD *)(a2 + 32);
  v20 = *(_DWORD *)(a2 + 36);
  v22 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  v23 = *(_DWORD *)(a2 + 56);
  v24 = *(_DWORD *)(a2 + 60);
  v25 = *(_DWORD *)(a2 + 64);
  v26 = *(_DWORD *)(a2 + 68);
  v28 = *(_DWORD *)(a2 + 72);
  v27 = *(_DWORD *)(a2 + 76);
  v29 = *(_DWORD *)(a2 + 80);
  v85 = v14;
  v68 = v15;
  v86 = v15;
  v87 = v16;
  v66 = v18;
  v67 = v17;
  v88 = v17;
  v89 = v18;
  v59 = v19;
  v90 = v19;
  v91 = v20;
  v65 = v20;
  v92 = v22;
  v93 = v21;
  v51 = v24;
  v52 = v23;
  v94 = v23;
  v95 = v24;
  v49 = v26;
  v50 = v25;
  v96 = v25;
  v97 = v26;
  v47 = v27;
  v48 = v28;
  v98 = v28;
  v99 = v27;
  v46 = v29;
  v100 = v29;
  swift_retain_n();
  swift_retain();
  v60 = v22;
  swift_bridgeObjectRetain();
  v62 = v21;
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(&v85, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  v53 = v14;
  swift_release();
  v30 = *(_QWORD *)(a8 - 8);
  if (*(_QWORD *)(v30 + 64))
    closure #1 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)();
  v42 = *(_QWORD *)(v30 + 64);
  v63 = v13;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  swift_beginAccess();
  v61 = v16;
  v32 = *(_DWORD *)(v16 + 16);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a12 + 32))(v69, a10, a12);
  v70 = __PAIR64__(v68, v67);
  v71 = v66;
  v73 = 0;
  v74 = 0;
  LODWORD(v75) = 0;
  ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)(OffsetAttribute2, *MEMORY[0x24BE096C0], v32, (char *)v69, v65 & 1, (uint64_t)&v70, (uint64_t)&v78);
  v71 = v79;
  v70 = v78;
  v72 = WORD2(v79);
  v73 = v80;
  LODWORD(v74) = v81;
  v75 = v82;
  v76 = v83;
  v77 = v84;
  MEMORY[0x24BDAC7A8](v33);
  v40 = type metadata accessor for ShapeStyleResolver(0, a8, a11, v34);
  v41 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v40);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v70, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v39, v40, MEMORY[0x24BEE4078], v35, MEMORY[0x24BEE40A8], v36);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v45 = v69[0];
  AGGraphSetFlags();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v43 = a8;
  v44 = a11;
  if (v38)
  {
    MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
    v39[0] = a8;
    v39[1] = a10;
    v40 = a11;
    v41 = a12;
    LODWORD(v70) = v63;
    v78 = a8;
    v79 = a10;
    v80 = a11;
    v81 = a12;
    type metadata accessor for _BackgroundShapeModifier();
  }
  v78 = a8;
  v79 = a10;
  v80 = a11;
  v81 = a12;
  type metadata accessor for _BackgroundShapeModifier();
}

uint64_t View.background<A>(_:ignoresSafeAreaEdges:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _BackgroundStyleModifier(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v16);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v11, a4);
  v18[*(int *)(v14 + 36)] = a2;
  View.modifier<A>(_:)(v18, a3, v14, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t View.background<A, B>(_:in:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return View.background<A, B>(_:in:fillStyle:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)type metadata accessor for _BackgroundShapeModifier, (void (*)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))_BackgroundShapeModifier.init(style:shape:fillStyle:));
}

{
  return View.background<A, B>(_:in:fillStyle:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)type metadata accessor for _InsettableBackgroundShapeModifier, (void (*)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))_InsettableBackgroundShapeModifier.init(style:shape:fillStyle:));
}

uint64_t View.background<A>(_:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v24 = a4;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _BackgroundModifier(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v23 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a5);
  v21 = &v20[*(int *)(v16 + 36)];
  *(_QWORD *)v21 = a2;
  *((_QWORD *)v21 + 1) = a3;
  View.modifier<A>(_:)(v20, v24, v16, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t _BackgroundModifier.background.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _BackgroundModifier.background.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_BackgroundModifier.background.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundModifier.alignment.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t _BackgroundModifier.alignment.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t (*_BackgroundModifier.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundModifier.init(background:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  result = type metadata accessor for _BackgroundModifier(0, a4, a5, v11);
  v13 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t static _BackgroundModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int128 v22;
  __int128 v23;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36[3];

  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v13 = *((_DWORD *)a2 + 20);
  LODWORD(v26) = *a1;
  v14 = type metadata accessor for _BackgroundModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue(0, v14, v15, v16);
  v17 = a2[3];
  v18 = a2[4];
  v22 = *(_OWORD *)(a2 + 7);
  v23 = *(_OWORD *)(a2 + 5);
  v19 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _BackgroundModifier._makeView(modifier:inputs:body:), a5, v36);
  v20 = v36[0];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:), (uint64_t)&type metadata for Alignment, &v35);
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v17;
  v30 = v18;
  v31 = v23;
  v32 = v22;
  v33 = v19;
  v34 = v13;
  return makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(v20, v35, (uint64_t)&v26, a3, 1, a6, a7);
}

uint64_t closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for _BackgroundModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v10, (uint64_t)&type metadata for Alignment, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  return v10[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _BackgroundModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

BOOL static _BackgroundModifier<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  v10 = *(int *)(type metadata accessor for _BackgroundModifier(0, a3, a5, v9) + 36);
  v12 = *(_QWORD *)(a1 + v10);
  v11 = *(_QWORD *)(a1 + v10 + 8);
  v13 = (uint64_t *)(a2 + v10);
  v15 = *v13;
  v14 = v13[1];
  return v12 == v15 && v11 == v14;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> _BackgroundModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _BackgroundModifier<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), *(_QWORD *)(a3 + 24));
}

uint64_t (*_BackgroundStyleModifier.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundStyleModifier.ignoresSafeAreaEdges.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _BackgroundStyleModifier.ignoresSafeAreaEdges.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_BackgroundStyleModifier.ignoresSafeAreaEdges.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundStyleModifier.init(style:ignoresSafeAreaEdges:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for _BackgroundStyleModifier(0, a3, a4, v9);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t static _BackgroundStyleModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 5);
  v16 = *(_OWORD *)(a2 + 3);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 7);
  v19 = a2[9];
  v20 = v10;
  return static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(&v21, (uint64_t)&v13, 1, a3, a4, a5, a6, a7);
}

uint64_t closure #1 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, (uint64_t)&type metadata for ViewOrigin, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v8[5];
}

uint64_t closure #2 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v4 = a1 + 16;
  v8[2] = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, (uint64_t)&type metadata for ViewSize, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v8[5];
}

uint64_t closure #3 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(0, a2, a3, a4);
  v8 = a1 + *(int *)(v7 + 36);
  v13[2] = v7;
  v14 = type metadata accessor for _AnchoredShapeStyle(0, a2, a3, v9);
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  return v15;
}

uint64_t _ViewInputs.applyBackgroundStyle<A, B>(value:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int OffsetAttribute2;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD v25[2];
  char v26;
  uint64_t v27;

  v6 = v5;
  v27 = *MEMORY[0x24BDAC8D0];
  v26 = 2;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 40))(&v26, a4, a5);
  if ((v26 & 1) != 0)
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v11 = *(_QWORD *)(v6 + 16);
    v12 = swift_beginAccess();
    v13 = *(_DWORD *)(v11 + 16);
    v25[0] = OffsetAttribute2;
    v25[1] = v13;
    MEMORY[0x24BDAC7A8](v12);
    v22 = type metadata accessor for ForegroundEnvironment(0, a4, a5, v14);
    v23 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForegroundEnvironment<A>, v22);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v25, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v21, v22, MEMORY[0x24BEE4078], v15, MEMORY[0x24BEE40A8], v16);
    LODWORD(v11) = v24;
    v17 = MEMORY[0x24BEE4AF8];
    v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
    v19 = swift_allocObject();
    *(_DWORD *)(v19 + 16) = v11;
    *(_QWORD *)(v19 + 24) = v17;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_WORD *)(v19 + 80) = 256;
    *(_QWORD *)(v19 + 88) = v18;
    result = swift_release();
    *(_QWORD *)(v6 + 16) = v19;
    v20 = *(_DWORD *)(v6 + 32);
    if ((v20 & 0x20) == 0)
      *(_DWORD *)(v6 + 32) = v20 | 0x20;
  }
  return result;
}

uint64_t _BackgroundStyleModifier.BackgroundInfo.Value.init(frame:style:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __int128 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = a1[1];
  *a5 = *a1;
  a5[1] = v8;
  a5[2] = a1[2];
  v9 = (char *)a5
     + *(int *)(type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(0, a3, a4, a4) + 36);
  v11 = type metadata accessor for _AnchoredShapeStyle(0, a3, a4, v10);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, a2, v11);
}

uint64_t _BackgroundStyleModifier.BackgroundInfo.value.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *Value;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t result;
  unsigned int v32;
  unint64_t v33;
  double v34;
  unsigned int v35;
  uint64_t InputValue;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  double *v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  *(_QWORD *)&v51 = a3;
  v9 = HIDWORD(a1);
  v55 = a6;
  *(_QWORD *)&v54 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _BackgroundStyleModifier(0, v12, v13, v12);
  *(_QWORD *)&v53 = *(_QWORD *)(v14 - 8);
  v15 = v53;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v50 - v16;
  v52 = type metadata accessor for _AnchoredShapeStyle(0, a4, a5, v18);
  MEMORY[0x24BDAC7A8](v52);
  v20 = (char *)&v50 - v19;
  *(_QWORD *)&v50 = HIDWORD(a2);
  Value = (uint64_t *)AGGraphGetValue();
  v22 = *Value;
  v23 = Value[1];
  v24 = (__int128 *)AGGraphGetValue();
  *(_QWORD *)&v58 = v22;
  *((_QWORD *)&v58 + 1) = v23;
  v25 = v24[1];
  v59 = *v24;
  v60 = v25;
  v26 = AGGraphGetValue();
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v27(v17, v26, v14);
  v28 = v55;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v11, v17, a4);
  *(_QWORD *)&v54 = a2;
  v29 = (double *)AGGraphGetValue();
  _AnchoredShapeStyle.init(style:bounds:)((uint64_t)v11, a4, a5, (uint64_t)v20, 0.0, 0.0, *v29, v29[1]);
  _BackgroundStyleModifier.BackgroundInfo.Value.init(frame:style:)(&v58, (uint64_t)v20, a4, a5, (_OWORD *)v28);
  v30 = AGGraphGetValue();
  v27(v17, v30, v14);
  LODWORD(v20) = v17[*(int *)(v14 + 36)];
  result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v17, v14);
  if ((_DWORD)v20)
  {
    result = AGGraphGetCurrentAttribute();
    if ((_DWORD)result == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v32 = v51;
      v33 = DWORD1(v51);
      v34 = 0.0;
      if (*MEMORY[0x24BE096C0] != DWORD1(v51))
      {
        v35 = result;
        InputValue = AGGraphGetInputValue();
        v37 = *(_QWORD *)(InputValue + 16);
        v56 = *(_OWORD *)InputValue;
        v57 = v37;
        LODWORD(v58) = v35;
        *(_QWORD *)((char *)&v58 + 4) = __PAIR64__(v54, v35);
        HIDWORD(v58) = v9;
        *(_QWORD *)&v59 = __PAIR64__(v50, v32);
        DWORD2(v59) = v33;
        v34 = SafeAreaInsets.resolve(regions:in:)(1, (int *)&v58);
      }
      *(double *)&v38 = EdgeInsets.in(_:)(v34);
      v51 = v38;
      v50 = v39;
      v53 = v41;
      v54 = v40;
      result = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(0, a4, a5, v42);
      v43 = (double *)(v28 + *(int *)(result + 36) + *(int *)(v52 + 36));
      *(_QWORD *)&v44.f64[0] = v50;
      v45 = *(double *)&v51;
      v46 = *(double *)&v51 + v43[1];
      *v43 = *(double *)&v50 + *v43;
      v43[1] = v46;
      v47 = *(double *)(v28 + 8) - v45;
      *(double *)v28 = *(double *)v28 - v44.f64[0];
      *(double *)(v28 + 8) = v47;
      *(_QWORD *)&v48.f64[0] = v53;
      *(_QWORD *)&v48.f64[1] = v54;
      v44.f64[1] = v45;
      v49 = vsubq_f64(*(float64x2_t *)(v28 + 16), vsubq_f64(vnegq_f64(v48), v44));
      *(int8x16_t *)(v28 + 16) = vandq_s8((int8x16_t)v49, (int8x16_t)vcgezq_f64(v49));
    }
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _BackgroundStyleModifier<A>.BackgroundInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance _BackgroundStyleModifier<A>.BackgroundInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return _BackgroundStyleModifier.BackgroundInfo.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _BackgroundStyleModifier<A>.BackgroundInfo(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _BackgroundStyleModifier<A>.BackgroundInfo, a1);
  return static AsyncAttribute.flags.getter();
}

double _BackgroundStyleModifier.shape(in:)(uint64_t a1, CGFloat a2, CGFloat a3)
{
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  unsigned __int8 v8;

  specialized ImplicitContainerShape.path(in:)((uint64_t)v7, 0.0, 0.0, a2, a3);
  v4 = v8 | 0x10000;
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return 0.0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundStyleModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static _BackgroundStyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance _BackgroundStyleModifier<A>(uint64_t a1, CGFloat a2, CGFloat a3)
{
  _BackgroundStyleModifier.shape(in:)(a1, a2, a3);
  return 0.0;
}

uint64_t (*_BackgroundShapeModifier.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_BackgroundShapeModifier.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundShapeModifier.fillStyle.getter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;

  v2 = (unsigned __int8 *)(v1 + *(int *)(a1 + 56));
  v3 = *v2;
  if (v2[1])
    v4 = 256;
  else
    v4 = 0;
  return v4 | v3;
}

uint64_t _BackgroundShapeModifier.fillStyle.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = (_BYTE *)(v2 + *(int *)(a2 + 56));
  *v3 = result & 1;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*_BackgroundShapeModifier.fillStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _BackgroundShapeModifier.init(style:shape:fillStyle:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  _BackgroundShapeModifier.init(style:shape:fillStyle:)(a1, a2, a3, a4, a5, (void (*)(_QWORD, _QWORD *))type metadata accessor for _BackgroundShapeModifier, a6);
}

void static _BackgroundShapeModifier._makeView(modifier:inputs:body:)(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  int v31;

  v16 = *a2;
  v17 = *((_DWORD *)a2 + 2);
  v18 = a2[2];
  v19 = *((_DWORD *)a2 + 20);
  v31 = *a1;
  v23 = v16;
  v24 = v17;
  v25 = v18;
  v20 = *(_OWORD *)(a2 + 5);
  v26 = *(_OWORD *)(a2 + 3);
  v27 = v20;
  v28 = *(_OWORD *)(a2 + 7);
  v29 = a2[9];
  v30 = v19;
  v21 = default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(a5, a6, a7, a8);
  static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(&v31, (uint64_t)&v23, 1, a3, a4, (uint64_t)v21, v22, a5, a9, a6, a7, a8);
}

uint64_t sub_23511BB60()
{
  return swift_release();
}

void closure #2 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)()
{
  type metadata accessor for _BackgroundShapeModifier();
}

uint64_t sub_23511BBB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v4 = v3 + *(int *)(a1 + 52);
  v8[2] = a1;
  v9 = v2;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, v1, (uint64_t)v8, v2, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v10;
}

void closure #4 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)()
{
  type metadata accessor for _BackgroundShapeModifier();
}

uint64_t sub_23511BC44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v2 = v1 + *(int *)(a1 + 56);
  v6[2] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, (uint64_t)&type metadata for FillStyle, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v6[4];
}

void closure #1 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)()
{
  type metadata accessor for _BackgroundShapeModifier();
}

uint64_t sub_23511BCE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v7[2] = a1;
  v8 = v2;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, v1, (uint64_t)v7, v2, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v9;
}

double _BackgroundShapeModifier.shape(in:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  unsigned __int8 *v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD v16[2];
  unsigned __int8 v17;

  (*(void (**)(_OWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a2 + 40) + 24))(v16, *(_QWORD *)(a2 + 24), 0.0, 0.0, a3, a4);
  v7 = (unsigned __int8 *)(v4 + *(int *)(a2 + 56));
  v8 = *v7;
  v9 = v7[1];
  v10 = v8 == 0;
  v11 = 256;
  if (v10)
    v11 = 0;
  v12 = v11 | v17;
  v10 = v9 == 0;
  v13 = 0x10000;
  if (v10)
    v13 = 0;
  v14 = v16[1];
  *(_OWORD *)a1 = v16[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 32) = v12 | v13;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return 0.0;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundShapeModifier<A, B>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  static _BackgroundShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance _BackgroundShapeModifier<A, B>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _BackgroundShapeModifier.shape(in:)(a1, a2, a3, a4);
  return 0.0;
}

uint64_t (*_InsettableBackgroundShapeModifier.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_InsettableBackgroundShapeModifier.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_InsettableBackgroundShapeModifier.fillStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _InsettableBackgroundShapeModifier.init(style:shape:fillStyle:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  _BackgroundShapeModifier.init(style:shape:fillStyle:)(a1, a2, a3, a4, a5, (void (*)(_QWORD, _QWORD *))type metadata accessor for _InsettableBackgroundShapeModifier, a6);
}

void _BackgroundShapeModifier.init(style:shape:fillStyle:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(_QWORD, _QWORD *)@<X7>, uint64_t a7@<X8>)
{
  _QWORD v12[4];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a7, a1, a2);
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  a6(0, v12);
  JUMPOUT(0x23511BEF8);
}

void static _InsettableBackgroundShapeModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for _BackgroundShapeModifier();
}

void sub_23511BFC4()
{
  type metadata accessor for _InsettableBackgroundShapeModifier();
}

#error "23511C070: call analysis failed (funcsize=37)"

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _InsettableBackgroundShapeModifier<A, B>()
{
  static _InsettableBackgroundShapeModifier._makeView(modifier:inputs:body:)();
}

uint64_t ForegroundEnvironment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int16 v24;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v15[-2] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MaterialView.ChildEnvironment.environment.getter(&v14);
  memset(v15, 0, sizeof(v15));
  v16 = 4;
  v17 = 0;
  v18 = 5;
  v19 = v14;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v23 = 1;
  v24 = 0;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 32))(v15, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v11 = *((_QWORD *)&v19 + 1);
  *a4 = v19;
  a4[1] = v11;
  v12 = v17;
  LOBYTE(v9) = v18;
  swift_retain();
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v12, (char)v9);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ForegroundEnvironment<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return ForegroundEnvironment.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ForegroundEnvironment<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForegroundEnvironment<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t View.background<A>(alignment:content:)(uint64_t a1, uint64_t a2, void (*a3)(double), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a7;
  v25 = a2;
  v26 = a5;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _BackgroundModifier(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v25 - v19;
  a3(v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a6);
  v21 = &v20[*(int *)(v16 + 36)];
  v23 = v25;
  v22 = v26;
  *(_QWORD *)v21 = a1;
  *((_QWORD *)v21 + 1) = v23;
  View.modifier<A>(_:)(v20, v22, v16, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t View.background(ignoresSafeAreaEdges:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char v8;

  v8 = a1;
  type metadata accessor for _BackgroundStyleModifier<BackgroundStyle>(0, a2, a3, a4);
  return View.modifier<A>(_:)(&v8, a2, v6, a3);
}

uint64_t View.background<A>(in:fillStyle:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.background<A>(in:fillStyle:)(a1, a2, a3, a4, a5, a6, (uint64_t)type metadata accessor for _BackgroundShapeModifier, (void (*)(uint64_t, char *, _QWORD, ValueMetadata *, uint64_t, _UNKNOWN **, uint64_t))_BackgroundShapeModifier.init(style:shape:fillStyle:));
}

{
  return View.background<A>(in:fillStyle:)(a1, a2, a3, a4, a5, a6, (uint64_t)type metadata accessor for _InsettableBackgroundShapeModifier, (void (*)(uint64_t, char *, _QWORD, ValueMetadata *, uint64_t, _UNKNOWN **, uint64_t))_InsettableBackgroundShapeModifier.init(style:shape:fillStyle:));
}

uint64_t View.background<A>(in:fillStyle:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, char *, _QWORD, ValueMetadata *, uint64_t, _UNKNOWN **, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, _QWORD *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(uint64_t, char *, _QWORD, ValueMetadata *, uint64_t, _UNKNOWN **, uint64_t);
  uint64_t v26;
  _QWORD v27[4];

  v25 = a8;
  v26 = a5;
  v24 = a3;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[0] = &type metadata for BackgroundStyle;
  v27[1] = v15;
  v27[2] = &protocol witness table for BackgroundStyle;
  v27[3] = v16;
  v18 = v17(0, v27);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v24 - v20;
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a4);
  v25(v22, v14, a2 & 0x101, &type metadata for BackgroundStyle, a4, &protocol witness table for BackgroundStyle, a6);
  View.modifier<A>(_:)(v21, v24, v18, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t View.background<A, B>(_:in:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void (*v36)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];

  v39 = a7;
  v32 = a8;
  v33 = a1;
  v37 = a9;
  v38 = a4;
  v35 = a3;
  v34 = a2;
  v36 = a12;
  v14 = *(_QWORD *)(a6 - 8);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[0] = v22;
  v40[1] = v23;
  v40[2] = v24;
  v40[3] = a10;
  v26 = v25(0, v40);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v31 - v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v33, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v34, a6);
  v36(v21, v17, v35 & 0x101, a5, a6, v32, a10);
  View.modifier<A>(_:)(v29, v38, v26, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
}

uint64_t type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BackgroundStyleModifier.BackgroundInfo.Value);
}

uint64_t type metadata accessor for _BackgroundStyleModifier.BackgroundInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BackgroundStyleModifier.BackgroundInfo);
}

uint64_t type metadata accessor for _BackgroundStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BackgroundStyleModifier);
}

void type metadata accessor for _BackgroundShapeModifier()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for _BackgroundModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BackgroundModifier);
}

uint64_t partial apply for closure #1 in static _BackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for _BackgroundModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

void type metadata accessor for _InsettableBackgroundShapeModifier()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in static _InsettableBackgroundShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _ViewInputs.setContainerShape<A>(_:isSystemShape:)(a2, 0, *(ValueMetadata **)(v2 + 24), *(_QWORD *)(v2 + 40));
}

void type metadata accessor for _BackgroundStyleModifier<BackgroundStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>)
  {
    v4 = type metadata accessor for _BackgroundStyleModifier(0, (uint64_t)&type metadata for BackgroundStyle, (uint64_t)&protocol witness table for BackgroundStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>);
  }
}

uint64_t type metadata completion function for _BackgroundModifier()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t getEnumTagSinglePayload for _BackgroundModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23511C848 + 4 * byte_2352CB2D0[v8]))();
}

void storeEnumTagSinglePayload for _BackgroundModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23511C988()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23511C990(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23511C998);
}

void sub_23511C9B4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23511C9BC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23511C9C4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23511C9CCLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t getEnumTagSinglePayload for _BackgroundStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64) + 1;
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23511CA98 + 4 * byte_2352CB2DF[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _BackgroundStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 1;
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 1);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for _BackgroundShapeModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _BackgroundShapeModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE)
    v8 = 254;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v13 = v11 + (v10 & ~v9) + 2;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_9;
  v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    v15 = *(_DWORD *)(a1 + v13);
    if (v15)
      goto LABEL_16;
  }
  else
  {
    if (v16 <= 0xFF)
    {
      if (v16 < 2)
        goto LABEL_25;
LABEL_9:
      v15 = *(unsigned __int8 *)(a1 + v13);
      if (!*(_BYTE *)(a1 + v13))
        goto LABEL_25;
LABEL_16:
      v17 = (v15 - 1) << v14;
      if (v13 > 3)
        v17 = 0;
      if ((_DWORD)v11 + (v10 & ~(_DWORD)v9) == -2)
        return v8 + v17 + 1;
      if (v13 <= 3)
        v18 = v11 + (v10 & ~(_DWORD)v9) + 2;
      else
        v18 = 4;
      return ((uint64_t (*)(void))((char *)&loc_23511CE34 + 4 * byte_2352CB2ED[v18 - 1]))();
    }
    v15 = *(unsigned __int16 *)(a1 + v13);
    if (*(_WORD *)(a1 + v13))
      goto LABEL_16;
  }
LABEL_25:
  if (v5 == v8)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v20 = (v10 + a1) & ~v9;
  if (v7 == v8)
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(v20);
  v21 = *(unsigned __int8 *)(v20 + v11);
  if (v21 < 2)
    return 0;
  return ((v21 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _BackgroundShapeModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = *(_QWORD *)(v6 + 64)
     + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 2;
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80)) != -2)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

uint64_t sub_23511D104(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _BackgroundModifier, (uint64_t)&protocol witness table for _BackgroundModifier<A>);
}

uint64_t sub_23511D118(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _BackgroundStyleModifier<BackgroundStyle>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _BackgroundStyleModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t sub_23511D174(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _BackgroundStyleModifier, (uint64_t)&protocol witness table for _BackgroundStyleModifier<A>);
}

void sub_23511D188(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAA5ShapeRd__r__lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyAA0G5StyleVqd__GGAaBHPxAaBHD1__AjA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for _BackgroundShapeModifier);
}

void sub_23511D19C(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _BackgroundShapeModifier);
}

void sub_23511D1B0(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAA5ShapeRd__r__lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyAA0G5StyleVqd__GGAaBHPxAaBHD1__AjA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for _InsettableBackgroundShapeModifier);
}

void get_witness_table_7SwiftUI4ViewRzAA5ShapeRd__r__lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyAA0G5StyleVqd__GGAaBHPxAaBHD1__AjA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4[0] = &type metadata for BackgroundStyle;
  v4[1] = v2;
  v4[2] = &protocol witness table for BackgroundStyle;
  v4[3] = v3;
  a2(255, v4);
  JUMPOUT(0x23511D20CLL);
}

void sub_23511D248(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _InsettableBackgroundShapeModifier);
}

uint64_t type metadata completion function for _BackgroundStyleModifier.BackgroundInfo.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for _AnchoredShapeStyle(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5 & 0xF8 | 7;
  v7 = ~v6;
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if ((v5 & 0x1000F8) != 0 || (v8 & 0xFFFFFFFFFFFFFFF8) + (((v5 & 0xF8) + 55) & ~v6) + 32 > 0x18)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v6 + 16) & v7));
    swift_retain();
  }
  else
  {
    v11 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v11;
    a1[2] = *((_OWORD *)a2 + 2);
    v12 = ((unint64_t)a1 + 55) & v7;
    v13 = ((unint64_t)a2 + 55) & v7;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v12, v13);
    v14 = (_OWORD *)((v8 + v13) & 0xFFFFFFFFFFFFFFF8);
    v15 = v14[1];
    v16 = (_OWORD *)((v8 + v12) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v14;
    v16[1] = v15;
  }
  return v3;
}

uint64_t destroy for _BackgroundStyleModifier.BackgroundInfo.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))((a1 + v3 + 48) & ~v3);
}

_OWORD *initializeWithCopy for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = v6 + 55;
  v8 = (unint64_t)a1 + v6 + 55;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & v9;
  v11 = ((unint64_t)a2 + v7) & v9;
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))(v8 & v9, v11);
  v12 = *(_QWORD *)(v5 + 64) + 7;
  v13 = (_OWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  return a1;
}

_QWORD *assignWithCopy for _BackgroundStyleModifier.BackgroundInfo.Value(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = v5 + 55;
  v7 = (unint64_t)a1 + v5 + 55;
  v8 = ~v5 & 0xFFFFFFFFFFFFFFF8;
  v9 = v7 & v8;
  v10 = ((unint64_t)a2 + v6) & v8;
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(v7 & v8, v10);
  v11 = *(_QWORD *)(v4 + 64) + 7;
  v12 = (_QWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  v12[3] = v13[3];
  return a1;
}

_OWORD *initializeWithTake for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = v6 + 55;
  v8 = (unint64_t)a1 + v6 + 55;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & v9;
  v11 = ((unint64_t)a2 + v7) & v9;
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(v8 & v9, v11);
  v12 = *(_QWORD *)(v5 + 64) + 7;
  v13 = (_OWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  return a1;
}

_OWORD *assignWithTake for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = v6 + 55;
  v8 = (unint64_t)a1 + v6 + 55;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & v9;
  v11 = ((unint64_t)a2 + v7) & v9;
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))(v8 & v9, v11);
  v12 = *(_QWORD *)(v5 + 64) + 7;
  v13 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v13[3] = v14[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for _BackgroundStyleModifier.BackgroundInfo.Value(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8;
  v7 = v6 | 7;
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 48) & ~v7);
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + ((v6 + 55) & ~v7) + 32) & 0xFFFFFFF8) != 0)
    v8 = 2;
  else
    v8 = a2 - v5 + 1;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23511D6F4 + 4 * byte_2352CB2FB[v10]))();
}

void storeEnumTagSinglePayload for _BackgroundStyleModifier.BackgroundInfo.Value(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_DWORD **)(*(_QWORD *)(a4 + 16) - 8);
  v7 = v6[21];
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((v6[16] + 7) & 0xFFFFFFF8) + (((v6[20] & 0xF8) + 55) & ~(v6[20] & 0xF8 | 7)) == -32)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X13 }
  }
  if (((v6[16] + 7) & 0xFFFFFFF8) + (((v6[20] & 0xF8) + 55) & ~(v6[20] & 0xF8 | 7)) != -32)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*((_QWORD *)v6 + 8) + 7) & 0xFFFFFFFFFFFFFFF8) + (((v6[20] & 0xF8) + 55) & ~(v6[20] & 0xF8 | 7)) + 32);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23511D85C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23511D864(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23511D86CLL);
}

void sub_23511D890()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23511D898()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23511D8A0@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a1)
    JUMPOUT(0x23511D8A8);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))((v5 + v4 + 48) & a2);
}

uint64_t instantiation function for generic protocol witness table for _BackgroundStyleModifier<A>.BackgroundInfo(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _BackgroundStyleModifier<A>.BackgroundInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in _BackgroundStyleModifier<A>.BackgroundInfo()
{
  JUMPOUT(0x23B7C9C04);
}

void partial apply for closure #3 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)()
{
  closure #2 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)();
}

uint64_t type metadata accessor for ForegroundEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForegroundEnvironment);
}

uint64_t instantiation function for generic protocol witness table for ForegroundEnvironment<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForegroundEnvironment<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ForegroundEnvironment<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t RBUUID.init(hash:)()
{
  return RBUUIDInitFromHash();
}

void __swiftcall StrongHasher.init()(SwiftUI::StrongHasher *__return_ptr retstr)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  CC_SHA1_CTX v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  memset(&v5, 0, sizeof(v5));
  CC_SHA1_Init(&v5);
  v2 = *(_OWORD *)&v5.h4;
  *(_OWORD *)&retstr->state.h0 = *(_OWORD *)&v5.h0;
  *(_OWORD *)&retstr->state.h4 = v2;
  v3 = *(_OWORD *)&v5.data[5];
  *(_OWORD *)&retstr->state.data[1] = *(_OWORD *)&v5.data[1];
  *(_OWORD *)&retstr->state.data[5] = v3;
  v4 = *(_OWORD *)&v5.data[13];
  *(_OWORD *)&retstr->state.data[9] = *(_OWORD *)&v5.data[9];
  *(_OWORD *)&retstr->state.data[13] = v4;
}

uint64_t StrongHasher.combine<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 8))(v3);
}

double StrongHasher.finalize()@<D0>(uint64_t a1@<X8>)
{
  CC_SHA1_CTX *v1;
  int v3;
  double result;
  __int128 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0uLL;
  v6 = 0;
  CC_SHA1_Final((unsigned __int8 *)&v5, v1);
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 16) = v3;
  return result;
}

void StrongHash.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t static StrongHash.random()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  return specialized StrongHash.init<A>(of:)(v4, a1);
}

double StrongHash.init<A>(encodable:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double result;
  uint64_t v11;
  unint64_t v12;
  CC_LONG h4;
  __int128 v14;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    swift_release();
  }
  else
  {
    v11 = v8;
    v12 = v9;
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v11, v12);
    swift_release();
    h4 = c.h4;
    v14 = *(_OWORD *)&c.h0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_DWORD *)(a3 + 16) = h4;
  }
  return result;
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance ToggleState(CC_SHA1_CTX *a1)
{
  unsigned __int8 *v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = *v1;
  return CC_SHA1_Update(a1, v3, 8u);
}

uint64_t RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, AssociatedTypeWitness, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

__n128 StrongHash.init<A>(of:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;
  __n128 v9;
  CC_SHA1_CTX c;
  CC_SHA1_CTX v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  memset(&c, 0, sizeof(c));
  CC_SHA1_Init(&c);
  v11 = c;
  (*(void (**)(CC_SHA1_CTX *, uint64_t, uint64_t))(a3 + 8))(&v11, a2, a3);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &v11);
  LODWORD(a3) = c.h4;
  v9 = *(__n128 *)&c.h0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = v9;
  *a4 = v9;
  a4[1].n128_u32[0] = a3;
  return result;
}

uint64_t StrongHasher.combineBytes(_:count:)(void *data, unint64_t len)
{
  CC_SHA1_CTX *v2;
  uint64_t result;

  if ((len & 0x8000000000000000) == 0 && !HIDWORD(len))
    return CC_SHA1_Update(v2, data, len);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StrongHash.words.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t StrongHash.words.setter(uint64_t result, int a2, int a3, int a4, int a5)
{
  _DWORD *v5;

  *v5 = result;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  v5[4] = a5;
  return result;
}

uint64_t (*StrongHash.words.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StrongHash.hash(into:)()
{
  return Hasher.combine(bytes:)();
}

uint64_t StrongHash.description.getter()
{
  int *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_235282650;
  v7 = MEMORY[0x24BEE44F0];
  v8 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v6 + 64) = v8;
  *(_DWORD *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 96) = v7;
  *(_QWORD *)(v6 + 104) = v8;
  *(_DWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 136) = v7;
  *(_QWORD *)(v6 + 144) = v8;
  *(_DWORD *)(v6 + 112) = v3;
  *(_QWORD *)(v6 + 176) = v7;
  *(_QWORD *)(v6 + 184) = v8;
  *(_DWORD *)(v6 + 152) = v2;
  *(_QWORD *)(v6 + 216) = v7;
  *(_QWORD *)(v6 + 224) = v8;
  *(_DWORD *)(v6 + 192) = v1;
  return String.init(format:_:)();
}

uint64_t StrongHash.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

{
  int *v1;
  int *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int64_t v26;
  _DWORD *v27;

  v2 = v1;
  v5 = *v2;
  v4 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  v8 = v2[4];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v9 = a1[1];
  v10 = (_QWORD *)a1[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  a1[3] = v10;
  v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  a1[1] = v14;
  isUniquelyReferenced_nonNull_native = v9 + 5;
  if (__OFADD__(v14, 4))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a1[2] >= isUniquelyReferenced_nonNull_native)
  {
    a1[1] = isUniquelyReferenced_nonNull_native;
    v15 = (_DWORD *)(*a1 + v14);
    goto LABEL_9;
  }
LABEL_24:
  v15 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_9:
  *v15 = v5;
  v16 = a1[1];
  v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v17)
  {
    a1[1] = v17;
    v18 = (_DWORD *)(*a1 + v16);
    goto LABEL_12;
  }
  v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17);
LABEL_12:
  *v18 = v4;
  v19 = a1[1];
  v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v20)
  {
    a1[1] = v20;
    v21 = (_DWORD *)(*a1 + v19);
    goto LABEL_15;
  }
  v21 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20);
LABEL_15:
  *v21 = v7;
  v22 = a1[1];
  v23 = v22 + 4;
  if (__OFADD__(v22, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v23)
  {
    a1[1] = v23;
    v24 = (_DWORD *)(*a1 + v22);
    goto LABEL_18;
  }
  v24 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v23);
LABEL_18:
  *v24 = v6;
  v25 = a1[1];
  v26 = v25 + 4;
  if (__OFADD__(v25, 4))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (a1[2] < v26)
  {
LABEL_32:
    v27 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v26);
    goto LABEL_21;
  }
  a1[1] = v26;
  v27 = (_DWORD *)(*a1 + v25);
LABEL_21:
  *v27 = v8;
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t StrongHash.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  int v13;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    v6 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    v13 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    *a2 = v5;
    a2[1] = v6;
    v10 = v13;
    a2[2] = v7;
    a2[3] = v10;
    a2[4] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int StrongHash.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StrongHash()
{
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StrongHash()
{
  return Hasher.combine(bytes:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StrongHash()
{
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance StrongHash@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return StrongHash.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StrongHash(_QWORD *a1)
{
  return StrongHash.encode(to:)(a1);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance StrongHash(CC_SHA1_CTX *a1)
{
  __int128 *v1;
  int v2;
  __int128 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)v1 + 4);
  v4 = *v1;
  v5 = v2;
  return CC_SHA1_Update(a1, &v4, 0x14u);
}

Swift::Void __swiftcall StronglyHashableByBitPattern.hash(into:)(SwiftUI::StrongHasher *into)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  SwiftUI::StrongHasher *v6;

  v5 = v1;
  v6 = into;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in StrongHasher.combineBitPattern<A>(_:), (uint64_t)&v4, v1, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v2);
}

uint64_t StrongHasher.combineBitPattern<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[3];

  v9[2] = a2;
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in StrongHasher.combineBitPattern<A>(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], a8);
}

uint64_t closure #1 in StrongHasher.combineBitPattern<A>(_:)(void *data, CC_SHA1_CTX *c, uint64_t a3)
{
  unint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  if ((v3 & 0x8000000000000000) == 0 && !HIDWORD(v3))
    return CC_SHA1_Update(c, data, v3);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StrongHasher.combineType(_:)()
{
  CC_SHA1_CTX *v0;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  AGTypeGetSignature();
  return CC_SHA1_Update(v0, &v2, 0x14u);
}

Swift::Void __swiftcall String.hash(into:)(SwiftUI::StrongHasher *into)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = v1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v5 = String.utf8CString.getter();
    v6 = *(_QWORD *)(v5 + 16);
    if (HIDWORD(v6))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      CC_SHA1_Update(&into->state, (const void *)(v5 + 32), v6);
      swift_release();
    }
  }
}

void protocol witness for StronglyHashable.hash(into:) in conformance String(SwiftUI::StrongHasher *into)
{
  String.hash(into:)(into);
}

Swift::Void __swiftcall Data.hash(into:)(SwiftUI::StrongHasher *into)
{
  __asm { BR              X10 }
}

uint64_t sub_23511EA7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, int a11, int a12, char data, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  CC_SHA1_CTX *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  __int16 v58;
  char v59;
  char v60;
  char v61;
  char v62;

  v57 = v54;
  v58 = v55;
  v59 = BYTE2(v55);
  v60 = BYTE3(v55);
  v61 = BYTE4(v55);
  v62 = BYTE5(v55);
  return CC_SHA1_Update(v53, &v57, BYTE6(v55));
}

void protocol witness for StronglyHashable.hash(into:) in conformance Data(SwiftUI::StrongHasher *into)
{
  Data.hash(into:)(into);
}

Swift::Void __swiftcall Bool.hash(into:)(SwiftUI::StrongHasher *into)
{
  char v1;
  char data;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  data = v1;
  CC_SHA1_Update(&into->state, &data, 1u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Bool(CC_SHA1_CTX *a1)
{
  char *v1;
  char data;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  data = *v1;
  return CC_SHA1_Update(a1, &data, 1u);
}

uint64_t Optional<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v4);
  v10 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, v10, a3);
    v6 = v11;
    v4 = v10;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v4);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Int(a1);
}

{
  _QWORD *v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = *v1;
  return CC_SHA1_Update(a1, v3, 8u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int8(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Bool(a1);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int16(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Int16(a1);
}

{
  __int16 *v1;
  __int16 data;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  data = *v1;
  return CC_SHA1_Update(a1, &data, 2u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int32(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Int32(a1);
}

{
  int *v1;
  int data;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  data = *v1;
  return CC_SHA1_Update(a1, &data, 4u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Float(CC_SHA1_CTX *a1)
{
  int *v1;
  int data;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  data = *v1;
  return CC_SHA1_Update(a1, &data, 4u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Double(CC_SHA1_CTX *a1)
{
  _QWORD *v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = *v1;
  return CC_SHA1_Update(a1, v3, 8u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance UUID(CC_SHA1_CTX *a1, uint64_t a2)
{
  const void *v2;
  unint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  if ((v3 & 0x8000000000000000) == 0 && !HIDWORD(v3))
    return CC_SHA1_Update(a1, v2, v3);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t StrongHash.init(from:)@<X0>(unint64_t result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  int v17;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v17 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (2)
    {
      result = v3[3];
      if (result)
      {
        v14 = v3[4];
        if (v5 < v14)
        {
LABEL_15:
          v15 = result & 7;
          if ((result & 0xFFFFFFFFFFFFFFF8) != 8)
          {
            switch(result & 7)
            {
              case 0uLL:
                result = ProtobufDecoder.decodeVarint()();
                if (v2)
                  return result;
                v5 = v3[1];
                v12 = v10;
                goto LABEL_8;
              case 1uLL:
                v5 = v3[1] + 8;
                goto LABEL_34;
              case 2uLL:
                result = ProtobufDecoder.decodeVarint()();
                if (v2)
                  return result;
                if ((result & 0x8000000000000000) != 0)
                  goto LABEL_42;
                v5 = v3[1] + result;
LABEL_34:
                if (v6 < v5)
                  goto LABEL_38;
                v3[1] = v5;
                v12 = v10;
LABEL_8:
                v6 = v3[2];
                v10 = v12;
                if (v5 < v6)
                  continue;
                goto LABEL_4;
              case 5uLL:
                v5 = v3[1] + 4;
                goto LABEL_34;
              default:
                goto LABEL_38;
            }
          }
          if (v15 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
            {
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
              JUMPOUT(0x23511F618);
            }
            v16 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v16 + result)
              goto LABEL_38;
            v3[3] = 13;
            v3[4] = (char *)v16 + result;
            goto LABEL_26;
          }
          if (v15 == 5)
          {
            v16 = (unsigned int *)v3[1];
LABEL_26:
            v5 = (unint64_t)(v16 + 1);
            if (v6 >= (unint64_t)(v16 + 1))
            {
              v12 = *v16;
              v3[1] = v5;
              switch(v11)
              {
                case 0:
                  goto LABEL_7;
                case 1:
                  v9 = v12;
                  goto LABEL_6;
                case 2:
                  v8 = v12;
                  goto LABEL_6;
                case 3:
                  v7 = v12;
                  goto LABEL_6;
                case 4:
                  v17 = v12;
                  goto LABEL_6;
                default:
LABEL_6:
                  v12 = v10;
LABEL_7:
                  if (!__OFADD__(v11++, 1))
                    goto LABEL_8;
                  __break(1u);
                  break;
              }
              goto LABEL_41;
            }
          }
LABEL_38:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          return swift_willThrow();
        }
        if (v14 < v5)
          goto LABEL_38;
        v3[3] = 0;
      }
      break;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
      goto LABEL_38;
    goto LABEL_15;
  }
  v17 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  LODWORD(v12) = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v12;
  a2[1] = v9;
  a2[2] = v8;
  a2[3] = v7;
  a2[4] = v17;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance StrongHash(_QWORD *a1)
{
  return StrongHash.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance StrongHash@<X0>(unint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return StrongHash.init(from:)(a1, a2);
}

BOOL specialized static StrongHash.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
      && a1[1].i32[0] == a2[1].i32[0];
}

uint64_t partial apply for closure #1 in StrongHasher.combineBitPattern<A>(_:)(void *a1)
{
  uint64_t v1;

  return closure #1 in StrongHasher.combineBitPattern<A>(_:)(a1, *(CC_SHA1_CTX **)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t dispatch thunk of StronglyHashable.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for StrongHash()
{
  return &type metadata for StrongHash;
}

ValueMetadata *type metadata accessor for StrongHasher()
{
  return &type metadata for StrongHasher;
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance UnitCurveAnimation()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t CustomAnimation.shouldMerge<A>(previous:value:time:context:)()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance SpringAnimation@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return CustomAnimation.velocity<A>(value:time:context:)(a1, a2);
}

uint64_t CustomAnimation.velocity<A>(value:time:context:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t EncodableAnimation.encodeAnimation(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char v8;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  if ((v8 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a1, a2);
  else
    return ProtobufEncoder.messageField<A>(_:_:)(v7, v3, a2, *(_QWORD *)(a3 + 8));
}

uint64_t dispatch thunk of CustomAnimation.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of CustomAnimation.velocity<A>(value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of CustomAnimation.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 32))();
}

uint64_t dispatch thunk of InternalCustomAnimation.function.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t static Never._viewListCount(inputs:)()
{
  return 0;
}

_UNKNOWN **associated type witness table accessor for View.Body : View in Never()
{
  return &protocol witness table for Never;
}

id withDelay(_:do:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v12[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v12[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v12[5] = v6;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
  v12[3] = &block_descriptor_31;
  v7 = _Block_copy(v12);
  v8 = (void *)objc_opt_self();
  swift_retain();
  v9 = objc_msgSend(v8, sel_timerWithTimeInterval_repeats_block_, 0, v7, a3);
  _Block_release(v7);
  swift_release();
  v10 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  objc_msgSend(v10, sel_addTimer_forMode_, v9, *MEMORY[0x24BDBCB80]);

  return v9;
}

uint64_t sub_23511F998()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t ModifiedContent<>.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for DynamicViewContent.data.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return ModifiedContent<>.data.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t static DynamicViewContentIDTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t static DynamicViewContentOffsetTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t DynamicContentOffsetVisitor.offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DynamicContentOffsetVisitor.offset.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*DynamicContentOffsetVisitor.offset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicContentOffsetVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v3 = *a2;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 1, v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v4;
  *(_BYTE *)(v2 + 8) = v6 & 1;
  return 0;
}

uint64_t associated type witness table accessor for DynamicViewContent.Data : Collection in <> ForEach<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 8);
}

uint64_t instantiation function for generic protocol witness table for <> ForEach<A, B, C>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04]("q&:\x1BHj\t", a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04]("q&:\x1BHj\t", a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DynamicViewContent.Data : Collection in <> ModifiedContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v4 = a3[1];
  v6[0] = *(_QWORD *)(*a3 + 8);
  v6[1] = v4;
  result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", a2, v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for ViewListVisitor.visit(view:traits:) in conformance DynamicContentOffsetVisitor(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v3 = *a2;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 1, v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v4;
  *(_BYTE *)(v2 + 8) = v6 & 1;
  return 0;
}

uint64_t dispatch thunk of DynamicViewContent.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for DynamicViewContentIDTraitKey()
{
  return &type metadata for DynamicViewContentIDTraitKey;
}

ValueMetadata *type metadata accessor for DynamicViewContentOffsetTraitKey()
{
  return &type metadata for DynamicViewContentOffsetTraitKey;
}

ValueMetadata *type metadata accessor for DynamicContentOffsetVisitor()
{
  return &type metadata for DynamicContentOffsetVisitor;
}

uint64_t dispatch thunk of TextAlignmentDependentFormatStyle.textAlignment(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t PreferencesInputs.init(hostKeys:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t PreferencesInputs.remove<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PreferenceKeys.remove<A>(_:)(a2, a2, a3, a4);
}

uint64_t PreferencesInputs.add<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PreferenceKeys.add<A>(_:)(a2, a2, a3, a4);
}

uint64_t PreferencesInputs.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PreferenceKeys.contains<A>(_:)(a2, a2, a3, a4) & 1;
}

uint64_t PreferencesInputs.makeIndirectOutputs()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  int v10;

  v3 = *v1;
  v4 = MEMORY[0x24BEE4AF8];
  v9 = MEMORY[0x24BEE4AF8];
  v10 = 0;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = v3 + 40;
    do
    {
      (*(void (**)(uint64_t *, void *, _UNKNOWN **))(*(_QWORD *)v6 + 16))(&v9, &unk_250626208, &protocol witness table for AddPreference #1 in PreferencesInputs.makeIndirectOutputs());
      v6 += 16;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease();
    v4 = v9;
    v8 = v10;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v8;
  return result;
}

uint64_t PreferencesInputs.keys.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t PreferencesInputs.keys.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*PreferencesInputs.keys.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferencesInputs.hostKeys.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t PreferencesInputs.hostKeys.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*PreferencesInputs.hostKeys.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferencesInputs.contains<A>(_:includeHostPreferences:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *v4;
  v9 = PreferenceKeys.contains<A>(_:)(a3, a3, a4, a4);
  if ((v9 & 1) == 0 && (a2 & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4) & 1) != 0
      && (type metadata accessor for _AnyPreferenceKey<HostPreferencesKey>(0, v10, v11, v12),
          (v14 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v15 = v13;
      v16 = (uint64_t *)(v8 + 32);
      v17 = v14 - 1;
      do
      {
        v18 = *v16;
        v16 += 2;
        v9 = v18 == v15;
      }
      while (v18 != v15 && v17-- != 0);
    }
    else
    {
      v9 = 0;
    }
  }
  return v9 & 1;
}

uint64_t visit<A>(key:) in AddPreference #1 in PreferencesInputs.makeIndirectOutputs()(uint64_t a1, Swift::UInt a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  int IndirectAttribute2;
  uint64_t result;
  uint64_t v14;
  char v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v14 - v7;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v9 = (id)AGSubgraphGetCurrent();
    if (!v9)
      goto LABEL_8;
    v10 = v9;
    v11 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v11 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    (*(void (**)(Swift::UInt, uint64_t))(a3 + 16))(a2, a3);
    v15 = 6;
    GraphHost.intern<A>(_:for:id:)((uint64_t)v8, a2, &v15, AssociatedTypeWitness);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
    IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    return PreferencesOutputs.appendPreference<A>(key:value:)(a2, IndirectAttribute2, a2, a3);
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PreferencesInputs()
{
  return &type metadata for PreferencesInputs;
}

void *type metadata accessor for AddPreference #1 in PreferencesInputs.makeIndirectOutputs()()
{
  return &unk_250626208;
}

uint64_t TypeConformance.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t static ProtocolDescriptor.conformance(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  result = swift_conformsToProtocol();
  if (result)
    v7 = a1;
  else
    v7 = 0;
  *a4 = v7;
  a4[1] = result;
  return result;
}

uint64_t TypeConformance.unsafeExistentialMetatype<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;

  v5 = *v2;
  v3 = *(_QWORD *)(a1 - 8);
  if (*(_QWORD *)(v3 + 64) == 16)
    return (*(uint64_t (**)(uint64_t, __int128 *))(v3 + 16))(a2, &v5);
  __break(1u);
  return result;
}

uint64_t TypeConformance.storage.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TypeConformance.init(storage:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t TypeConformance.conformance.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t TypeConformance.metadata.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t dispatch thunk of static ProtocolDescriptor.descriptor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for TypeConformance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypeConformance);
}

double TimeDataFormatting.UpdateFrequency.magnitude.getter@<D0>(double *a1@<X8>)
{
  char *v1;
  double result;

  result = 1.0 / dbl_2352CC290[*v1];
  *a1 = result;
  return result;
}

double TimeDataFormatting.UpdateFrequency.interval.getter()
{
  char *v0;

  return 1.0 / dbl_2352CC290[*v0];
}

BOOL static TimeDataFormatting.UpdateFrequency.< infix(_:_:)(char *a1, char *a2)
{
  return dbl_2352CC290[*a1] < dbl_2352CC290[*a2];
}

BOOL static TimeDataFormatting.UpdateFrequency.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TimeDataFormatting.UpdateFrequency.init(duration:)@<X0>(char *a1@<X8>)
{
  uint64_t result;
  char v3;

  static Duration.seconds(_:)();
  result = static Duration.< infix(_:_:)();
  if ((result & 1) != 0)
  {
    static Duration.seconds(_:)();
    result = static Duration.< infix(_:_:)();
    if ((result & 1) != 0)
      v3 = 2;
    else
      v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t TimeDataFormatting.UpdateFrequency.duration.getter()
{
  return static Duration.seconds(_:)();
}

double TimeDataFormatting.UpdateFrequency.frequency.getter()
{
  char *v0;

  return dbl_2352CC290[*v0];
}

void TimeDataFormatting.UpdateFrequency.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x646E6F636573;
  if (*v0 != 1)
    v1 = 0x6574756E696DLL;
  if (*v0)
    return v1;
  else
    return 1751607656;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataFormatting.UpdateFrequency.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TimeDataFormatting.UpdateFrequency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys()
{
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TimeDataFormatting.UpdateFrequency.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys, (uint64_t)&unk_25062ADB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v26 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v20 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.SecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys, (uint64_t)&unk_25062ADD8, v3);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v22 = (char *)&v20 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.HighCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys, (uint64_t)&unk_25062AD98, v3);
  v20 = *(_QWORD *)(v8 - 8);
  v21 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - v9;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys, (uint64_t)&unk_25062AD08, v3);
  v12 = v11;
  v28 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v20 - v13;
  v15 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      v30 = 1;
      lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();
      v16 = v22;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v18 = v23;
      v17 = v24;
    }
    else
    {
      v31 = 2;
      lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();
      v16 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v18 = v26;
      v17 = v27;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  }
  else
  {
    v29 = 0;
    lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v14, v12);
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.MinuteCodingKeys, &unk_25062ADB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.MinuteCodingKeys, &unk_25062ADB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.MinuteCodingKeys, &unk_25062ADB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.SecondCodingKeys, &unk_25062ADD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("=f:\x1Bؚ\t", &unk_25062ADD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.SecondCodingKeys, &unk_25062ADD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.HighCodingKeys, &unk_25062AD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.HighCodingKeys, &unk_25062AD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.HighCodingKeys, &unk_25062AD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.CodingKeys, &unk_25062AD08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.CodingKeys, &unk_25062AD08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.CodingKeys, &unk_25062AD08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency.CodingKeys, &unk_25062AD08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

Swift::Int TimeDataFormatting.UpdateFrequency.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t TimeDataFormatting.UpdateFrequency.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  v36 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys, (uint64_t)&unk_25062ADB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v35 = v4;
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v30 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.SecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys, (uint64_t)&unk_25062ADD8, v3);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v37 = (char *)&v30 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.HighCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys, (uint64_t)&unk_25062AD98, v3);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys, (uint64_t)&unk_25062AD08, v3);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();
  v16 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v17 = v37;
    v18 = v38;
    v39 = v13;
    v19 = v15;
    v20 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v20 + 16) == 1)
    {
      v21 = *(unsigned __int8 *)(v20 + 32);
      if (*(_BYTE *)(v20 + 32))
      {
        v31 = v20;
        if (v21 == 1)
        {
          v41 = 1;
          lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v22 = v36;
          v23 = v39;
          (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v34);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v12);
          *v22 = 1;
        }
        else
        {
          v42 = 2;
          lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v28 = v36;
          v29 = v39;
          v37 = 0;
          (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v35);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v12);
          *v28 = v21;
        }
      }
      else
      {
        v40 = 0;
        lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v12);
        *v36 = v21;
      }
    }
    else
    {
      v24 = type metadata accessor for DecodingError();
      swift_allocError();
      v26 = v25;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v26 = &type metadata for TimeDataFormatting.UpdateFrequency;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v12);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataFormatting.UpdateFrequency@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return TimeDataFormatting.UpdateFrequency.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataFormatting.UpdateFrequency(_QWORD *a1)
{
  return TimeDataFormatting.UpdateFrequency.encode(to:)(a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_2352CC290[*a1] < dbl_2352CC290[*a2];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_2352CC290[*a2] >= dbl_2352CC290[*a1];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_2352CC290[*a1] >= dbl_2352CC290[*a2];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_2352CC290[*a2] < dbl_2352CC290[*a1];
}

uint64_t Date.FormatStyle.updateFrequency(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.FormatStyle.updateFrequency(_:)(a1, (uint64_t (*)(_QWORD, double))MEMORY[0x24BDCE2A0], (void (*)(char *))MEMORY[0x24BDCE238], MEMORY[0x24BDCDFF8], a2);
}

uint64_t Date.FormatStyle.Attributed.updateFrequency(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.FormatStyle.updateFrequency(_:)(a1, (uint64_t (*)(_QWORD, double))MEMORY[0x24BDCDFD8], (void (*)(char *))MEMORY[0x24BDCDFA0], (void (*)(char *))MEMORY[0x24BDCDF50], a2);
}

uint64_t Date.FormatStyle.updateFrequency(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(_QWORD, double)@<X1>, void (*a3)(char *)@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t result;
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *);

  v28 = a4;
  v25 = a3;
  v7 = v5;
  v10 = type metadata accessor for Date.FormatStyle.Symbol.SecondFraction();
  v26 = *(_QWORD *)(v10 - 8);
  v27 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date.FormatStyle.Symbol.Second();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a2(0, v15);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v25 - v21;
  v23 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v19 + 16))(a5, v7, v18, v20);
  if (v23)
  {
    if (v23 != 1)
    {
      MEMORY[0x23B7C4CC0](result);
      v25(v17);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v22, v18);
    }
    static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
    v28(v12);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v27);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v22, v18);
  }
  return result;
}

uint64_t WhitespaceRemovingFormatStyle<>.updateFrequency(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (char *)MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a4, v4);
  v16 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 16))(&v16, v7, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(a4, v11, v7);
}

uint64_t protocol witness for UpdateFrequencyDependentFormatStyle.updateFrequency(_:) in conformance <> WhitespaceRemovingFormatStyle<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WhitespaceRemovingFormatStyle<>.updateFrequency(_:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t Date.AnchoredRelativeFormatStyle.updateFrequency(_:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[40];

  v5 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - v12;
  v14 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (char *)&v30 - v18;
  v20 = *a1;
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v15 + 16);
  if (!*a1)
    return v21(a2, v2, v14, v16);
  v32 = a2;
  v21((uint64_t)&v30 - v18, v2, v14, v16);
  v22 = Date.AnchoredRelativeFormatStyle.allowedFields.getter();
  v23 = specialized _NativeSet.filter(_:)(v22, v20, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.filter(_:));
  v24 = (void (*)(_BYTE *, _QWORD))Date.AnchoredRelativeFormatStyle.allowedFields.modify();
  specialized Set._subtract<A>(_:)(v23, (void (*)(uint64_t))MEMORY[0x24BDCE6C8], &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (void (*)(char *))specialized Set._Variant.remove(_:));
  swift_release();
  v24(v33, 0);
  v25 = *(_QWORD *)(Date.AnchoredRelativeFormatStyle.allowedFields.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v25)
  {
    if (v20 >= 2)
      static Date.ComponentsFormatStyle.Field.minute.getter();
    else
      static Date.ComponentsFormatStyle.Field.second.getter();
    v28 = v30;
    v27 = v31;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v10, v7, v31);
    v29 = (void (*)(_BYTE *, _QWORD))Date.AnchoredRelativeFormatStyle.allowedFields.modify();
    specialized Set._Variant.insert(_:)((uint64_t)v13, v10);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v27);
    v29(v33, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v32, v19, v14);
}

void Duration.UnitsFormatStyle.updateFrequency(_:)(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, double);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(double *, _QWORD);
  uint64_t v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  double v62;
  double v63;
  double v64;
  char *v65;
  char v66;
  char v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(double *, _QWORD);
  char *v70;
  double v71;
  void (*v72)(double *, _QWORD);
  char *v73;
  char *v74;
  void (*v75)(double *, _QWORD);
  uint64_t v76;
  void (*v77)(double *, _QWORD);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  double v94[6];

  v5 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  v89 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v85 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v84 = (char *)&v76 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v90 = (char *)&v76 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v88 = (char *)&v76 - v12;
  v91 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v13 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v86 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v87 = (char *)&v76 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v82 = (char *)&v76 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v81 = (uint64_t)&v76 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v76 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v93 = (char *)&v76 - v25;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, v26);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v76 - v31;
  v33 = type metadata accessor for Duration.UnitsFormatStyle();
  v36 = MEMORY[0x24BDAC7A8](v33);
  v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  v39 = (char *)&v76 - v38;
  v40 = *a1;
  v41 = *(void (**)(uint64_t, uint64_t, double))(v35 + 16);
  if (!*a1)
  {
    v41(a2, v2, v36);
    return;
  }
  v78 = v35;
  v83 = v5;
  v80 = a2;
  v79 = v34;
  v41((uint64_t)&v76 - v38, v2, v36);
  v42 = Duration.UnitsFormatStyle.allowedUnits.getter();
  v43 = specialized _NativeSet.filter(_:)(v42, v40, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.filter(_:));
  v44 = (void (*)(double *, _QWORD))Duration.UnitsFormatStyle.allowedUnits.modify();
  specialized Set._subtract<A>(_:)(v43, (void (*)(uint64_t))MEMORY[0x24BDD0A50], &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (void (*)(char *))specialized Set._Variant.remove(_:));
  swift_release();
  v44(v94, 0);
  v45 = Duration.UnitsFormatStyle.allowedUnits.getter();
  specialized Sequence.min(by:)(v45, (uint64_t)v32);
  swift_bridgeObjectRelease();
  if ((_DWORD)v40 == 2)
    static Duration.UnitsFormatStyle.Unit.minutes.getter();
  else
    static Duration.UnitsFormatStyle.Unit.seconds.getter();
  v46 = v93;
  v47 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v48 = v91;
  v47(v93, v23, v91);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v92 = v32;
  v50 = v32;
  v51 = v48;
  v52 = v49(v50, 1, v48);
  v53 = v83;
  if (v52 == 1)
  {
    v54 = v82;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v82, v46, v48);
    v77 = (void (*)(double *, _QWORD))Duration.UnitsFormatStyle.allowedUnits.modify();
    v55 = v47;
    v56 = v81;
    v57 = v54;
    v53 = v83;
    specialized Set._Variant.insert(_:)(v81, v57);
    v46 = v93;
    v58 = v56;
    v47 = v55;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v58, v51);
    v77(v94, 0);
  }
  outlined init with copy of Duration.UnitsFormatStyle.Unit?((uint64_t)v92, (uint64_t)v29);
  v59 = v86;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v46, v51);
  if (v49(v29, 1, v51) == 1)
  {
    v60 = v87;
    v47(v87, v59, v51);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v29, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (void (*)(uint64_t))MEMORY[0x24BDD0A50]);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v59, v51);
    v60 = v87;
    v47(v87, v29, v51);
  }
  Duration.UnitsFormatStyle.Unit.magnitude.getter(v94);
  v61 = *(void (**)(char *, uint64_t))(v13 + 8);
  v61(v60, v51);
  v62 = 60.0;
  if ((_DWORD)v40 != 2)
    v62 = 1.0;
  v63 = v62 / v94[0];
  if (v94[0] == 0.0)
    v64 = INFINITY;
  else
    v64 = v63;
  v65 = v88;
  Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
  Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.getter();
  v67 = v66;
  v68 = *(void (**)(char *, uint64_t))(v89 + 8);
  v68(v65, v53);
  if ((v67 & 1) == 0)
  {
    v69 = (void (*)(double *, _QWORD))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.setter();
    v69(v94, 0);
  }
  v70 = v90;
  Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
  Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
  v68(v70, v53);
  v71 = log10(1.0 / v64);
  if ((~*(_QWORD *)&v71 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v71 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v71 < 9.22337204e18)
  {
    v72 = (void (*)(double *, _QWORD))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter();
    v72(v94, 0);
    v73 = v84;
    Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.getter();
    v68(v73, v53);
    v74 = v85;
    Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
    v68(v74, v53);
    v75 = (void (*)(double *, _QWORD))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.setter();
    v75(v94, 0);
    v61(v93, v51);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v92, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (void (*)(uint64_t))MEMORY[0x24BDD0A50]);
    (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v80, v39, v79);
    return;
  }
LABEL_24:
  __break(1u);
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v30)(char *, char *, uint64_t);
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  double v37;
  uint64_t (*v38)(char *, uint64_t);
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(char *, unint64_t, uint64_t, __n128);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  double v55;
  double v56;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (void (*)(uint64_t))MEMORY[0x24BDD0A50]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v45 - v9;
  v11 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v45 - v17;
  v19 = *(_QWORD *)(a1 + 56);
  v49 = a1 + 56;
  v20 = *(_BYTE *)(a1 + 32);
  v21 = 1 << v20;
  v22 = -1;
  if (1 << v20 < 64)
    v22 = ~(-1 << (1 << v20));
  v23 = v22 & v19;
  if (!v23)
  {
    v39 = v20 & 0x3F;
    if (v39 > 6)
    {
      v40 = *(_QWORD *)(a1 + 64);
      if (v40)
      {
        v47 = v2;
        v48 = v21;
        v46 = a2;
        a2 = 1;
        goto LABEL_34;
      }
      if (v39 >= 8)
      {
        v40 = *(_QWORD *)(a1 + 72);
        v46 = a2;
        v47 = v2;
        v48 = v21;
        if (v40)
        {
          a2 = 2;
          goto LABEL_34;
        }
        v40 = *(_QWORD *)(a1 + 80);
        if (v40)
        {
          a2 = 3;
          goto LABEL_34;
        }
        if (v39 >= 9)
        {
          v40 = *(_QWORD *)(a1 + 88);
          if (!v40)
            goto LABEL_46;
          a2 = 4;
          goto LABEL_34;
        }
      }
    }
LABEL_54:
    v29 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v15[7];
    v29(v10, 1, 1, v11, v16);
    goto LABEL_55;
  }
  v47 = v2;
  v48 = 1 << v20;
  v46 = a2;
  a2 = 0;
  v24 = __clz(__rbit64(v23));
  v25 = (v23 - 1) & v23;
  while (1)
  {
    v26 = v15[9];
    v27 = *(_QWORD *)(a1 + 48) + v26 * v24;
    v28 = v15;
    v51 = (void (*)(char *, unint64_t, uint64_t, __n128))v15[2];
    v52 = v26;
    v51(v10, v27, v11, v16);
    v53 = (char *)v28[7];
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v53)(v10, 0, 1, v11);
    v54 = a1;
    a1 = v28[6];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))a1)(v10, 1, v11) == 1)
    {
      a2 = v46;
      v29 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v53;
LABEL_55:
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v10, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (void (*)(uint64_t))MEMORY[0x24BDD0A50]);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v29)(a2, 1, 1, v11);
    }
    v50 = v28;
    v30 = (void (*)(char *, char *, uint64_t))v28[4];
    v30(v18, v10, v11);
    v48 = (unint64_t)(v48 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v10 = v53;
    if (v25)
    {
      while (1)
      {
        v32 = __clz(__rbit64(v25));
        v25 &= v25 - 1;
        v33 = v32 | (a2 << 6);
LABEL_27:
        ((void (*)(char *, unint64_t, uint64_t))v51)(v7, *(_QWORD *)(v54 + 48) + v33 * v52, v11);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v10)(v7, 0, 1, v11);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))a1)(v7, 1, v11) == 1)
          goto LABEL_36;
        v30(v13, v7, v11);
        Duration.UnitsFormatStyle.Unit.magnitude.getter(&v56);
        v37 = v56;
        Duration.UnitsFormatStyle.Unit.magnitude.getter(&v55);
        v38 = (uint64_t (*)(char *, uint64_t))v50[1];
        if (v37 >= v55)
        {
          result = v38(v13, v11);
          v10 = v53;
          if (!v25)
            break;
        }
        else
        {
          v38(v18, v11);
          result = ((uint64_t (*)(char *, char *, uint64_t))v30)(v18, v13, v11);
          v10 = v53;
          if (!v25)
            break;
        }
      }
    }
    v34 = a2 + 1;
    if (!__OFADD__(a2, 1))
      break;
    __break(1u);
LABEL_46:
    v40 = *(_QWORD *)(a1 + 96);
    if (v40)
    {
      a2 = 5;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(v21 + 63) >> 6;
      if (v43 <= 6)
        v43 = 6;
      v44 = v43 - 6;
      do
      {
        if (v44 == v42)
          goto LABEL_54;
        v40 = *(_QWORD *)(a1 + 104 + 8 * v42++);
      }
      while (!v40);
      a2 = v42 + 5;
    }
LABEL_34:
    v25 = (v40 - 1) & v40;
    v24 = __clz(__rbit64(v40)) + (a2 << 6);
  }
  if (v34 >= v48)
    goto LABEL_35;
  v35 = *(_QWORD *)(v49 + 8 * v34);
  ++a2;
  if (v35)
  {
LABEL_26:
    v25 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (a2 << 6);
    goto LABEL_27;
  }
  a2 = v34 + 1;
  if (v34 + 1 >= v48)
  {
LABEL_35:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v10)(v7, 1, 1, v11);
LABEL_36:
    swift_release();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v7, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (void (*)(uint64_t))MEMORY[0x24BDD0A50]);
    v41 = v46;
    v30((char *)v46, v18, v11);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v10)(v41, 0, 1, v11);
  }
  v35 = *(_QWORD *)(v49 + 8 * a2);
  if (v35)
    goto LABEL_26;
  a2 = v34 + 2;
  if (v34 + 2 >= v48)
    goto LABEL_35;
  v35 = *(_QWORD *)(v49 + 8 * a2);
  if (v35)
    goto LABEL_26;
  a2 = v34 + 3;
  if (v34 + 3 >= v48)
    goto LABEL_35;
  v35 = *(_QWORD *)(v49 + 8 * a2);
  if (v35)
    goto LABEL_26;
  v36 = v34 + 4;
  if (v36 >= v48)
    goto LABEL_35;
  v35 = *(_QWORD *)(v49 + 8 * v36);
  if (v35)
  {
    a2 = v36;
    goto LABEL_26;
  }
  while (1)
  {
    a2 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (a2 >= v48)
      goto LABEL_35;
    v35 = *(_QWORD *)(v49 + 8 * a2);
    ++v36;
    if (v35)
      goto LABEL_26;
  }
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1, void (*a2)(uint64_t), unint64_t *a3, void (*a4)(char *))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t *v30;
  void (*v31)(char *);

  v31 = a4;
  v8 = ((uint64_t (*)(_QWORD))a2)(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - v10;
  v30 = a3;
  type metadata accessor for Date?(0, a3, a2);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - v16;
  if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
    return;
  v18 = *(_QWORD *)(a1 + 56);
  v28 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v29 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain();
  v22 = 0;
  if (!v21)
    goto LABEL_6;
LABEL_5:
  v23 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v17, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v9 + 72) * i, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8) == 1)
      goto LABEL_26;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v17, v8);
    v31(v11);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v14, v30, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v21)
      goto LABEL_5;
LABEL_6:
    v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v29)
      goto LABEL_25;
    v26 = *(_QWORD *)(v28 + 8 * v25);
    ++v22;
    if (!v26)
    {
      v22 = v25 + 1;
      if (v25 + 1 >= v29)
        goto LABEL_25;
      v26 = *(_QWORD *)(v28 + 8 * v22);
      if (!v26)
      {
        v22 = v25 + 2;
        if (v25 + 2 >= v29)
          goto LABEL_25;
        v26 = *(_QWORD *)(v28 + 8 * v22);
        if (!v26)
        {
          v22 = v25 + 3;
          if (v25 + 3 >= v29)
            goto LABEL_25;
          v26 = *(_QWORD *)(v28 + 8 * v22);
          if (!v26)
            break;
        }
      }
    }
LABEL_21:
    v21 = (v26 - 1) & v26;
  }
  v27 = v25 + 4;
  if (v27 >= v29)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
LABEL_26:
    swift_release();
    return;
  }
  v26 = *(_QWORD *)(v28 + 8 * v27);
  if (v26)
  {
    v22 = v27;
    goto LABEL_21;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v29)
      goto LABEL_25;
    v26 = *(_QWORD *)(v28 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    result = specialized Set._Variant.remove(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  char v11;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result + 56;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_6;
    }
    v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v8 >= v6)
      return swift_release();
    v9 = *(_QWORD *)(v2 + 8 * v8);
    ++v7;
    if (!v9)
    {
      v7 = v8 + 1;
      if (v8 + 1 >= v6)
        return swift_release();
      v9 = *(_QWORD *)(v2 + 8 * v7);
      if (!v9)
      {
        v7 = v8 + 2;
        if (v8 + 2 >= v6)
          return swift_release();
        v9 = *(_QWORD *)(v2 + 8 * v7);
        if (!v9)
        {
          v7 = v8 + 3;
          if (v8 + 3 >= v6)
            return swift_release();
          v9 = *(_QWORD *)(v2 + 8 * v7);
          if (!v9)
            break;
        }
      }
    }
LABEL_23:
    v5 = (v9 - 1) & v9;
LABEL_6:
    result = specialized Set._Variant.remove(_:)(&v11);
  }
  v10 = v8 + 4;
  if (v10 >= v6)
    return swift_release();
  v9 = *(_QWORD *)(v2 + 8 * v10);
  if (v9)
  {
    v7 = v10;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v7 >= v6)
      return swift_release();
    v9 = *(_QWORD *)(v2 + 8 * v7);
    ++v10;
    if (v9)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = a3((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    swift_release();
    if (v3)
      swift_willThrow();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    v10 = a3((char *)v11, v8, v6, a2);
    swift_release();
    MEMORY[0x23B7C9D54](v11, -1, -1);
  }
  return v10;
}

uint64_t outlined init with copy of Duration.UnitsFormatStyle.Unit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (void (*)(uint64_t))MEMORY[0x24BDD0A50]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TimeDataFormatting.UpdateFrequency()
{
  return &type metadata for TimeDataFormatting.UpdateFrequency;
}

uint64_t dispatch thunk of UpdateFrequencyDependentFormatStyle.updateFrequency(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t storeEnumTagSinglePayload for TimeDataFormatting.UpdateFrequency(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_235122644 + 4 * byte_2352CBD65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235122678 + 4 * byte_2352CBD60[v4]))();
}

uint64_t sub_235122678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235122680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235122688);
  return result;
}

uint64_t sub_235122694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23512269CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2351226A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351226A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  return &unk_25062AD08;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.HighCodingKeys()
{
  return &unk_25062AD98;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.SecondCodingKeys()
{
  return &unk_25062ADD8;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.MinuteCodingKeys()
{
  return &unk_25062ADB8;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;

  v24 = a2;
  v25 = a1;
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = *(_QWORD *)(a3 + 56);
  v26 = 0;
  v27 = a3 + 56;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v10 << 6);
      goto LABEL_5;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v15)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v15)
        goto LABEL_24;
      v21 = *(_QWORD *)(v27 + 8 * v10);
      if (!v21)
      {
        v10 = v20 + 2;
        if (v20 + 2 >= v15)
          goto LABEL_24;
        v21 = *(_QWORD *)(v27 + 8 * v10);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v14 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v7 + 72) * v17, v6);
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v28);
    v18 = v28;
    v19 = 1.0 / dbl_2352CC290[a4];
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v18 < v19)
    {
      *(unint64_t *)((char *)v25 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v25, v24, v26, a3);
        return;
      }
    }
  }
  v22 = v20 + 3;
  if (v22 >= v15)
    goto LABEL_24;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v15)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;

  v24 = a2;
  v25 = a1;
  v6 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = *(_QWORD *)(a3 + 56);
  v26 = 0;
  v27 = a3 + 56;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v10 << 6);
      goto LABEL_5;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v15)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v15)
        goto LABEL_24;
      v21 = *(_QWORD *)(v27 + 8 * v10);
      if (!v21)
      {
        v10 = v20 + 2;
        if (v20 + 2 >= v15)
          goto LABEL_24;
        v21 = *(_QWORD *)(v27 + 8 * v10);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v14 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v7 + 72) * v17, v6);
    Duration.UnitsFormatStyle.Unit.magnitude.getter(&v28);
    v18 = v28;
    v19 = 1.0 / dbl_2352CC290[a4];
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v18 < v19)
    {
      *(unint64_t *)((char *)v25 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v25, v24, v26, a3);
        return;
      }
    }
  }
  v22 = v20 + 3;
  if (v22 >= v15)
    goto LABEL_24;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v15)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized TimeDataFormatting.UpdateFrequency.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1751607656 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t State.projectedValue.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - v10;
  State.getValue(forReading:)(0, a1, (uint64_t)&v16 - v10);
  v12 = *(uint64_t **)(v2 + *(int *)(a1 + 28));
  if (v12)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Binding.init(value:location:)((uint64_t)v8, v12, v13, v14, a2);
  }
  else
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    os_log(_:dso:log:_:_:)();
    static Binding.constant(_:)((uint64_t)v11, v5, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  return swift_retain();
}

uint64_t State.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)(a5 + *(int *)(type metadata accessor for State(0, a2, a3, a4) + 28)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
}

uint64_t State.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return State.getValue(forReading:)(1, a1, a2);
}

uint64_t State.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized State.wrappedValue.setter(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t State._value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t State._value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*State._value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t State._location.getter()
{
  return swift_retain();
}

uint64_t State._location.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 28);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*State._location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t State.init<A>(wrappedValue:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v4 = a1();
  swift_release();
  v8 = v4;
  *(uint64_t *)((char *)&v9 + *(int *)(type metadata accessor for State(0, a3, v5, v6) + 28)) = 0;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(&v9, &v8, a3);
  return v9;
}

uint64_t State.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;

  v4 = v3;
  v7 = *(_QWORD *)(v3 + *(int *)(a2 + 28));
  if (!v7)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v4);
  v9 = one-time initialization token for sharedGraph;
  swift_retain();
  if (v9 != -1)
    swift_once();
  if (AGGraphGetCounter())
  {
    if ((a1 & 1) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 104))(1);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v4);
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 120))();
  return swift_release();
}

void (*State.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  State.getValue(forReading:)(1, a2, (uint64_t)v9);
  return State.wrappedValue.modify;
}

void State.wrappedValue.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = *v2;
    v3 = v2[1];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    v5 = *(_QWORD *)(v3 + *(int *)(v4 + 28));
    if (v5)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v5 + 128))(v2[4], 0);
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    v8 = v2[2];
    v9 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v9(v7, v8);
    v9(v6, v8);
  }
  else
  {
    v10 = *(_QWORD *)(v2[1] + *(int *)(*v2 + 28));
    if (v10)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v10 + 128))(v2[5], 0);
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    (*(void (**)(void *, _QWORD))(v2[3] + 8))(v6, v2[2]);
  }
  free(v6);
  free(v7);
  free(v2);
}

uint64_t static State._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static State._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance State<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static State._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16), a5);
}

uint64_t State<A>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  *(_QWORD *)(a2 + *(int *)(type metadata accessor for State(0, a1, v7, v8) + 28)) = 0;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

void StatePropertyBox.destroy()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
    StoredLocationBase.invalidate()();
}

uint64_t StatePropertyBox.reset()()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 8))
  {
    StoredLocationBase.invalidate()();
    result = swift_release();
  }
  *(_QWORD *)(v0 + 8) = 0;
  return result;
}

uint64_t StatePropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  id v24;
  void *v25;
  id v26;
  uint64_t Context;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t WeakValue;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  id v41;
  int v42;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v41 - v16;
  v18 = v3[1];
  v19 = v18 == 0;
  if (!v18)
  {
    v42 = 1;
    if (*(_QWORD *)(a1 + *(int *)(type metadata accessor for State(0, v6, v14, v15) + 28))
      && (type metadata accessor for StoredLocation(0, v6, v20, v21), (v22 = swift_dynamicCastClass()) != 0))
    {
      v3[1] = v22;
      swift_retain();
    }
    else
    {
      v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v23(v17, a1, v6);
      v23(v12, (uint64_t)v17, v6);
      if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
      {
        v24 = (id)AGSubgraphGetCurrent();
        if (!v24)
        {
LABEL_19:
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        v25 = v24;
        v26 = (id)AGSubgraphGetGraph();

      }
      else
      {
        v26 = (id)AGGraphGetAttributeGraph();
      }
      v41 = v26;
      Context = AGGraphGetContext();
      if (!Context)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      v30 = Context;
      type metadata accessor for StoredLocation(0, v6, v28, v29);
      swift_retain();

      v31 = specialized StoredLocation.__allocating_init(initialValue:host:signal:)((uint64_t)v12, v30, *v4);
      swift_release();
      v32 = *(void (**)(char *, uint64_t))(v7 + 8);
      v32(v12, v6);
      v32(v17, v6);
      swift_release();
      v4[1] = v31;
    }
    v19 = v42;
  }
  WeakValue = AGGraphGetWeakValue();
  v35 = v34;
  StoredLocationBase.updateValue.getter((uint64_t)v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(a1, v9, v6);
  v38 = v4[1];
  if (!v38)
  {
    __break(1u);
    goto LABEL_18;
  }
  v39 = *(int *)(type metadata accessor for State(0, v6, v36, v37) + 28);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v39) = v38;
  if (WeakValue)
  {
    if ((v35 & 1) != 0)
      v19 = (v18 == 0) | StoredLocationBase.wasRead.getter();
  }
  return v19 & 1;
}

uint64_t StatePropertyBox.getState<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Binding(0, v7, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (uint64_t *)((char *)&v31 - v19);
  if (v7 == a3 && (v23 = *(uint64_t **)(v4 + 8)) != 0)
  {
    swift_retain();
    StoredLocationBase.get()(v24, v25, (uint64_t)v9);
    Binding.init(value:location:)((uint64_t)v9, v23, v26, v27, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v13 + 32))(v15, v20, v12);
    v30 = type metadata accessor for Binding(0, a3, v28, v29);
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a4, 0, 1, v30);
  }
  else
  {
    v21 = type metadata accessor for Binding(0, a3, v17, v18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a4, 1, 1, v21);
  }
}

uint64_t protocol witness for DynamicPropertyBox.getState<A>(type:) in conformance StatePropertyBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StatePropertyBox.getState<A>(type:)(a1, a3, a2, a4);
}

uint64_t type metadata accessor for State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for State);
}

uint64_t specialized static State._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  v8 = Attribute.init<A>(body:value:flags:update:)();
  v16[0] = AGCreateWeakAttribute();
  v16[1] = 0;
  v11 = type metadata accessor for StatePropertyBox(0, a4, v9, v10);
  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StatePropertyBox<A>, v11);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v16, a2, v11, v12);
  result = AGSubgraphShouldRecordTree();
  if ((_DWORD)result)
  {
    type metadata accessor for State(0, a4, v14, v15);
    LODWORD(v16[0]) = 1;
    return static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(v8, a4, a5, a2);
  }
  return result;
}

uint64_t specialized State.wrappedValue.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + *(int *)(a2 + 28));
  if (v3)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 128))(result, 0);
  return result;
}

uint64_t sub_235123B94@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for State(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return State.wrappedValue.getter(v5, a4);
}

uint64_t sub_235123BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for State(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return specialized State.wrappedValue.setter(a1, v5);
}

uint64_t sub_235123C08()
{
  return 8;
}

_QWORD *sub_235123C14(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for State()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for State(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235123D10 + 4 * byte_2352CC2B0[v10]))();
  }
}

void storeEnumTagSinglePayload for State(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_235123E90()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235123F14);
}

void sub_235123E98(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235123EA0);
  JUMPOUT(0x235123F14);
}

void sub_235123EE8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235123F14);
}

void sub_235123EF0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235123F14);
}

uint64_t sub_235123EF8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x235123F04);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x235123F14);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for StatePropertyBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StatePropertyBox);
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in StatePropertyBox<A>()
{
  return &protocol witness table for State<A>;
}

unint64_t AnimationContext.init(environment:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;

  result = AnimationState.init()(&v7);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = a1;
  *(_BYTE *)(a3 + 16) = a2 & 1;
  *(_BYTE *)(a3 + 17) = 0;
  return result;
}

uint64_t AnimationContext.init(state:environment:isLogicallyComplete:)@<X0>(uint64_t *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a1;
  result = AGCreateWeakAttribute();
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 17) = a2;
  return result;
}

uint64_t AnimationContext.state.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t AnimationContext.state.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*AnimationContext.state.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimationContext.isLogicallyComplete.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AnimationContext.isLogicallyComplete.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*AnimationContext.isLogicallyComplete.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void AnimationContext.environment.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *WeakValue;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *);
  void *v7;

  if ((*(_BYTE *)(v1 + 16) & 1) != 0 || (WeakValue = (uint64_t *)AGGraphGetWeakValue()) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v6 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v7 = static CoreGlue2.shared;
    v6(a1);

  }
  else
  {
    v5 = *WeakValue;
    v4 = WeakValue[1];
    *a1 = v5;
    a1[1] = v4;
    swift_retain();
    swift_retain();
  }
}

_QWORD *AnimationContext.init(state:environment:isLogicallyComplete:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = *result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(_BYTE *)(a5 + 17) = a4;
  return result;
}

_QWORD *AnimationContext.init(state:environment:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3 & 1;
  *(_BYTE *)(a4 + 17) = 0;
  return result;
}

unint64_t AnimationContext.init(environment:isLogicallyComplete:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t result;
  unint64_t v9;

  result = AnimationState.init()(&v9);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = a1;
  *(_BYTE *)(a4 + 16) = a2 & 1;
  *(_BYTE *)(a4 + 17) = a3;
  return result;
}

uint64_t AnimationContext.init(state:environment:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = AGCreateWeakAttribute();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = 0;
  return result;
}

uint64_t AnimationContext.init(environment:isLogicallyComplete:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;

  AnimationState.init()(&v6);
  v4 = v6;
  result = AGCreateWeakAttribute();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 17) = a1;
  return result;
}

uint64_t AnimationContext.init(environment:)@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  AnimationState.init()(&v4);
  v2 = v4;
  result = AGCreateWeakAttribute();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = result;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t AnimationContext.withState<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 17);
  *(_QWORD *)a2 = *a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnimationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for AnimationContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AnimationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimationContext);
}

uint64_t static _TestApp.dateIsSynchronizedWithTime.getter()
{
  return 0;
}

BOOL static _TestApp.isIntending(to:)(_QWORD *a1)
{
  return (static _TestApp.testIntents & *a1) != 0;
}

void static _TestApp.rootViewIdentifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static _TestApp.comparisonViewIdentifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _TestApp.RootView.StateType.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _TestApp.RootView.StateType.testView.getter()
{
  return swift_retain();
}

uint64_t _TestApp.RootView.StateType.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *a1 = 0;
  a1[1] = result;
  return result;
}

void _TestApp.RootView.StateType.setTestView<A>(_:)()
{
  type metadata accessor for TestIDView();
}

void sub_235124560(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - v5;
  v7 = *v1 + 1;
  if (!__OFADD__(*v1, 1))
  {
    *v1 = v7;
    *(_QWORD *)(v4 - 80) = v7;
    View.testID<A>(_:)(v4 - 80, v3, MEMORY[0x24BEE1768], v2, MEMORY[0x24BEE1778], (uint64_t)v6);
  }
  __break(1u);
}

_QWORD *property wrapper backing initializer of _TestApp.RootView.state@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  a2[2] = 0;
  return result;
}

uint64_t _TestApp.RootView.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *a1 = 0;
  a1[1] = result;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

void _TestApp.RootView.body.getter(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t Counter;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *v1;
  v3 = v1[1];
  v6 = (uint64_t *)v1[2];
  v5 = v1[3];
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7 = static CoreGlue2.shared;
  if (!v6)
  {
    v15 = v4;
    v16 = v3;
    v12 = static CoreGlue2.shared;
    swift_retain();
LABEL_9:
    v13 = v3;
    if (v5)
      goto LABEL_15;
    goto LABEL_12;
  }
  v8 = one-time initialization token for sharedGraph;
  swift_retain_n();
  swift_retain_n();
  v9 = v7;
  if (v8 != -1)
    swift_once();
  Counter = AGGraphGetCounter();
  v11 = *v6;
  if (Counter)
  {
    (*(void (**)(uint64_t))(v11 + 104))(1);
    swift_release();
    v15 = v4;
    v16 = v3;
    swift_release();
    swift_release_n();
    goto LABEL_9;
  }
  (*(void (**)(uint64_t *__return_ptr))(v11 + 120))(&v15);
  swift_release_n();
  swift_release_n();
  v13 = v16;
  if (v5)
    goto LABEL_15;
LABEL_12:
  swift_retain();
  swift_retain();
  static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1)
    swift_once();
  os_log(_:dso:log:_:_:)();
  v5 = AGMakeUniqueID();
  swift_release();
  swift_release();
LABEL_15:
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v7) + 0x70))(v13, v5);
  swift_release();

  *a1 = v14;
}

uint64_t one-time initialization function for defaultEnvironment()
{
  return closure #1 in variable initialization expression of static _TestApp.defaultEnvironment(&static _TestApp.defaultEnvironment);
}

uint64_t closure #1 in variable initialization expression of static _TestApp.defaultEnvironment@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(__int128 *);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(__int128 *);
  void *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t result;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  __int128 v87;

  v81 = a1;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v1);
  v75 = (char *)&v70 - v2;
  v74 = type metadata accessor for Calendar.Identifier();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v72 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for Calendar();
  v77 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v76 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v79 = (char *)&v70 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v78 = (char *)&v70 - v8;
  v9 = type metadata accessor for TimeZone();
  v82 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v83 = (char *)&v70 - v12;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for TimeZone?, v13);
  MEMORY[0x24BDAC7A8](v14);
  v84 = (char *)&v70 - v15;
  v16 = type metadata accessor for Locale();
  v85 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v70 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v70 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v86 = (char *)&v70 - v26;
  v87 = 0uLL;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v27 = *(void (**)(__int128 *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v28 = static CoreGlue2.shared;
  v27(&v87);

  type metadata accessor for FontBox<Font.NamedProvider>(0);
  v29 = swift_allocObject();
  strcpy((char *)(v29 + 16), "HelveticaNeue");
  *(_WORD *)(v29 + 30) = -4864;
  *(_QWORD *)(v29 + 32) = 0x4031000000000000;
  *(_BYTE *)(v29 + 40) = 6;
  v30 = v87;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, v29);
  swift_release();
  swift_release();
  v31 = *((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v32 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v30, v32);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    v32 = v87;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, 2.0);
  swift_release();
  if (v31)
  {
    v33 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v32, v33);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v33 = v87;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, (uint64_t)&type metadata for TestingSystemColorDefinition, (uint64_t)&protocol witness table for TestingSystemColorDefinition);
  swift_release();
  if (v31)
  {
    v34 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v33, v34);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v34 = v87;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, 16.0, 16.0, 16.0, 16.0);
  swift_release();
  if (v31)
  {
    v35 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v34, v35);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v35 = v87;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, 0);
  swift_release();
  if (v31)
  {
    v36 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v35, v36);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v36 = v87;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, 0);
  swift_release();
  if (v31)
  {
    v37 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v36, v37);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v37 = v87;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, 8);
  swift_release();
  if (v31)
  {
    v38 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v37, v38);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v38 = v87;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, 1);
  swift_release();
  if (v31)
  {
    v39 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v38, v39);
    swift_release();
    swift_release();
  }
  swift_release();
  v40 = *(void (**)(__int128 *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x60);
  v41 = static CoreGlue2.shared;
  v40(&v87);

  v42 = v86;
  Locale.init(identifier:)();
  v43 = v85;
  v44 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  v44(v24, v42, v16);
  v44(v21, v24, v16);
  v45 = v87;
  v44(v18, v21, v16);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, (uint64_t)v18);
  swift_release();
  v46 = *(void (**)(char *, uint64_t))(v43 + 8);
  v46(v18, v16);
  if (*((_QWORD *)&v87 + 1))
  {
    v47 = v87;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v45, v47);
    swift_release();
    swift_release();
  }
  swift_release();
  v46(v21, v16);
  v46(v24, v16);
  v48 = v84;
  TimeZone.init(abbreviation:)();
  v49 = v82;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48))(v48, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v51 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v52 = v83;
    v51(v83, v48, v9);
    v53 = v87;
    v54 = (uint64_t)v71;
    v51(v71, v52, v9);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, v54);
    swift_release();
    v55 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v55(v54, v9);
    if (*((_QWORD *)&v87 + 1))
    {
      v56 = v87;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v53, v56);
      swift_release();
      swift_release();
    }
    swift_release();
    v55((uint64_t)v83, v9);
    v55((uint64_t)v84, v9);
    v57 = v73;
    v58 = v72;
    v59 = v74;
    (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, *MEMORY[0x24BDCEF70], v74);
    v60 = v78;
    Calendar.init(identifier:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    v61 = v75;
    v44(v75, v86, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v61, 0, 1, v16);
    Calendar.locale.setter();
    v62 = v77;
    v63 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v64 = v79;
    v65 = v80;
    v63(v79, v60, v80);
    v66 = v87;
    v67 = (uint64_t)v76;
    v63(v76, v64, v65);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v87, v67);
    swift_release();
    v68 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    v68(v67, v65);
    if (*((_QWORD *)&v87 + 1))
    {
      v69 = v87;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v66, v69);
      swift_release();
      swift_release();
    }
    swift_release();
    v68((uint64_t)v64, v65);
    v68((uint64_t)v60, v65);
    result = ((uint64_t (*)(char *, uint64_t))v46)(v86, v16);
    *v81 = v87;
  }
  return result;
}

uint64_t static _TestApp.defaultEnvironment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for defaultEnvironment != -1)
    swift_once();
  v2 = unk_2561BC320;
  *a1 = static _TestApp.defaultEnvironment;
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

void __swiftcall _TestApp.init()()
{
  void (*v0)(void);
  void *v1;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0 = *(void (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x50);
  v1 = static CoreGlue2.shared;
  v0();

}

uint64_t static _TestApp.host.getter()
{
  return static _TestApp.host.getter();
}

{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t static _TestApp.host.setter(uint64_t a1, uint64_t a2)
{
  return static _TestApp.host.setter(a1, a2, &static _TestApp.host, &off_2561BC330);
}

uint64_t (*static _TestApp.host.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static _TestApp.comparisonHost.getter()
{
  return static _TestApp.host.getter();
}

uint64_t static _TestApp.comparisonHost.setter(uint64_t a1, uint64_t a2)
{
  return static _TestApp.host.setter(a1, a2, &static _TestApp.comparisonHost, &off_2561BC340);
}

uint64_t static _TestApp.host.setter(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  swift_beginAccess();
  *a3 = a1;
  *a4 = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*static _TestApp.comparisonHost.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static _TestApp.setIntents(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t *, uint64_t *, uint64_t, _QWORD *);
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = *(_QWORD *)&static _TestApp.testIntents;
  *(_QWORD *)&static _TestApp.testIntents = *a1;
  result = swift_beginAccess();
  if (static _TestApp.host)
  {
    v4 = off_2561BC330;
    ObjectType = swift_getObjectType();
    v7 = v1;
    v8 = v2;
    v6 = (void (*)(uint64_t *, uint64_t *, uint64_t, _QWORD *))v4[17];
    swift_unknownObjectRetain();
    v6(&v8, &v7, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t static _TestApp.environmentOverride.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  v2 = static _TestApp.environmentOverride;
  v3 = *(_QWORD *)algn_2561BC358;
  *a1 = static _TestApp.environmentOverride;
  a1[1] = v3;
  return outlined copy of EnvironmentValues?(v2);
}

uint64_t static _TestApp.environmentOverride.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  swift_beginAccess();
  v3 = static _TestApp.environmentOverride;
  static _TestApp.environmentOverride = v1;
  *(_QWORD *)algn_2561BC358 = v2;
  return outlined consume of EnvironmentValues?(v3);
}

uint64_t (*static _TestApp.environmentOverride.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static _TestApp.updateTestEnvironment(_:)(void (*a1)(Swift::UInt *))
{
  void (*v2)(Swift::UInt *);
  void *v3;
  Swift::UInt v5[2];
  Swift::UInt v6;
  Swift::UInt v7;

  v6 = 0;
  v7 = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2 = *(void (**)(Swift::UInt *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v3 = static CoreGlue2.shared;
  v2(&v6);

  a1(&v6);
  v5[0] = v6;
  v5[1] = v7;
  specialized static _TestApp.setTestEnvironment(_:)(v5);
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall _TestApp.setSemantics(_:)(Swift::String a1)
{
  BOOL v1;
  void *object;
  uint64_t countAndFlagsBits;
  int v4;
  Swift::String v5;
  Swift::String v6;

  v1 = a1._countAndFlagsBits == 0x74736574616CLL && a1._object == (void *)0xE600000000000000;
  if (v1
    || (object = a1._object,
        countAndFlagsBits = a1._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (one-time initialization token for forced == -1)
    {
      v4 = -2;
LABEL_14:
      swift_beginAccess();
      static Semantics.forced = v4;
      byte_25426FAB4 = 0;
      return;
    }
LABEL_20:
    swift_once();
    v4 = -2;
    goto LABEL_14;
  }
  if (countAndFlagsBits == 0x6C616D6978616DLL && object == (void *)0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (one-time initialization token for forced != -1)
      swift_once();
    v4 = -1;
    goto LABEL_14;
  }
  if ((countAndFlagsBits != 0x6D6574737973 || object != (void *)0xE600000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = countAndFlagsBits;
    v5._object = object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_20;
  }
}

void static EventSourceType.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_235125A60()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_235125A7C + 4 * byte_2352CC3D4[v0]))();
}

BOOL sub_235125A7C@<W0>(uint64_t a1@<X8>)
{
  return a1 == 1;
}

void sub_235125A90()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EventSourceType.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_235125AC4()
{
  Hasher._combine(_:)(1uLL);
}

void sub_235125ADC()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EventSourceType.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_235125B1C()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_235125B44()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance EventSourceType(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_235125B74()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_235125B90 + 4 * byte_2352CC3E4[v0]))();
}

BOOL sub_235125B90@<W0>(uint64_t a1@<X8>)
{
  return a1 == 1;
}

void sub_235125BA4()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable.hashValue.getter in conformance EventSourceType()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_235125BE4()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_235125C0C()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable.hash(into:) in conformance EventSourceType()
{
  __asm { BR              X10 }
}

void sub_235125C40()
{
  Hasher._combine(_:)(1uLL);
}

void sub_235125C58()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance EventSourceType()
{
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_235125C94()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_235125CB8()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

char *protocol witness for static CaseIterable.allCases.getter in conformance EventSourceType@<X0>(char **a1@<X8>)
{
  char *result;

  result = specialized static EventSourceType.allCases.getter();
  *a1 = result;
  return result;
}

void static TestingSystemColorDefinition.value(for:environment:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_235125D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v5 = 12;
  v3 = v0;
  v4 = v1;
  return ((uint64_t (*)(char *, uint64_t *))static TestingSystemColorDefinition.value(for:environment:))(&v5, &v3);
}

float protocol witness for static SystemColorDefinition.opacity(at:environment:) in conformance TestingSystemColorDefinition(uint64_t a1)
{
  float result;

  result = 0.25;
  if (a1 == 2)
    result = 0.5;
  if (a1 == 1)
    result = 0.75;
  if (a1 <= 0)
    return 1.0;
  return result;
}

uint64_t specialized static _TestApp.setTestEnvironment(_:)(Swift::UInt *a1)
{
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SwiftUI::BloomFilter v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t ObjectType;
  void (*v15)(__int16 *, _QWORD, uint64_t, _QWORD *);
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(__int16 *, _QWORD, uint64_t, _QWORD *);
  __int16 v20;
  __int16 v21[12];

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == 1)
  {
    swift_beginAccess();
    v3 = static _TestApp.environmentOverride;
    static _TestApp.environmentOverride = 1;
    *(_QWORD *)algn_2561BC358 = v1;
    outlined consume of EnvironmentValues?(v3);
    goto LABEL_20;
  }
  v4 = one-time initialization token for defaultEnvironment;
  swift_retain();
  swift_retain();
  if (v4 != -1)
    swift_once();
  v6 = static _TestApp.defaultEnvironment;
  v5 = unk_2561BC320;
  if (static _TestApp.defaultEnvironment)
  {
    if (v2)
    {
      if (*(_QWORD *)(static _TestApp.defaultEnvironment + 24))
      {
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>, (uint64_t)&type metadata for EmptyKey, (uint64_t)&protocol witness table for EmptyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
        swift_allocObject();
        swift_retain();
        swift_retain_n();
        swift_retain();
        v7.value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v2, v6).value;
      }
      else
      {
        v9 = *(_QWORD *)(static _TestApp.defaultEnvironment + 32);
        v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)static _TestApp.defaultEnvironment + 216);
        swift_retain();
        swift_retain_n();
        swift_retain();
        v11 = swift_retain();
        v7.value = v10(v11, v9);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_retain();
      swift_retain_n();
      v7.value = v6;
    }
    v8 = *(_QWORD *)(v6 + 64);
    goto LABEL_14;
  }
  swift_retain();
  if (v2)
  {
    swift_retain();
    v8 = 0;
    v7.value = v2;
LABEL_14:
    if (v8 == *(_QWORD *)(v7.value + 64))
    {
      v7.value = v6;
    }
    else if (v5)
    {
      swift_retain();
      PropertyList.Tracker.invalidateAllValues(from:to:)(v6, v7.value);
      swift_release();
    }
    swift_release();
    goto LABEL_19;
  }
  v7.value = 0;
LABEL_19:
  swift_beginAccess();
  v12 = static _TestApp.environmentOverride;
  static _TestApp.environmentOverride = v7.value;
  *(_QWORD *)algn_2561BC358 = v5;
  swift_retain();
  swift_retain();
  outlined consume of EnvironmentValues?(v12);
  outlined consume of EnvironmentValues?(v2);
  swift_release();
  swift_release();
LABEL_20:
  swift_beginAccess();
  if (static _TestApp.host)
  {
    v13 = off_2561BC330;
    ObjectType = swift_getObjectType();
    v21[0] = 2;
    v15 = (void (*)(__int16 *, _QWORD, uint64_t, _QWORD *))v13[18];
    swift_unknownObjectRetain();
    v15(v21, 0, ObjectType, v13);
    swift_unknownObjectRelease();
  }
  result = swift_beginAccess();
  if (static _TestApp.comparisonHost)
  {
    v17 = off_2561BC340;
    v18 = swift_getObjectType();
    v20 = 2;
    v19 = (void (*)(__int16 *, _QWORD, uint64_t, _QWORD *))v17[18];
    swift_unknownObjectRetain();
    v19(&v20, 0, v18, v17);
    return swift_unknownObjectRelease();
  }
  return result;
}

char *specialized static EventSourceType.allCases.getter()
{
  char *v0;
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  int64_t v5;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = *((_QWORD *)v0 + 2);
  v1 = *((_QWORD *)v0 + 3);
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v1 > 1), v2 + 1, 1, v0);
    v1 = *((_QWORD *)v0 + 3);
    v3 = v1 >> 1;
  }
  *((_QWORD *)v0 + 2) = v4;
  v0[v2 + 32] = 0;
  v5 = v2 + 2;
  if (v3 < v5)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v1 > 1), v5, 1, v0);
  *((_QWORD *)v0 + 2) = v5;
  v0[v4 + 32] = 2;
  return v0;
}

uint64_t associated type witness table accessor for View.Body : View in _TestApp.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type EventSourceType and conformance EventSourceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventSourceType and conformance EventSourceType;
  if (!lazy protocol witness table cache variable for type EventSourceType and conformance EventSourceType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventSourceType, &type metadata for EventSourceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventSourceType and conformance EventSourceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [EventSourceType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [EventSourceType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [EventSourceType] and conformance [A])
  {
    type metadata accessor for [EventSourceType]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [EventSourceType] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [EventSourceType]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [EventSourceType])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [EventSourceType]);
  }
}

ValueMetadata *type metadata accessor for _TestApp()
{
  return &type metadata for _TestApp;
}

uint64_t destroy for _TestApp.RootView()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for _TestApp.RootView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _TestApp.RootView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _TestApp.RootView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for _TestApp.RootView()
{
  return &type metadata for _TestApp.RootView;
}

ValueMetadata *type metadata accessor for _TestApp.RootView.StateType()
{
  return &type metadata for _TestApp.RootView.StateType;
}

uint64_t storeEnumTagSinglePayload for EventSourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2351265C0 + 4 * byte_2352CC40F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2351265F4 + 4 * byte_2352CC40A[v4]))();
}

uint64_t sub_2351265F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351265FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235126604);
  return result;
}

uint64_t sub_235126610(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235126618);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23512661C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235126624(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventSourceType()
{
  return &type metadata for EventSourceType;
}

unint64_t lazy protocol witness table accessor for type RootViewID and conformance RootViewID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RootViewID and conformance RootViewID;
  if (!lazy protocol witness table cache variable for type RootViewID and conformance RootViewID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RootViewID, &unk_25060E3B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootViewID and conformance RootViewID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RootViewID and conformance RootViewID;
  if (!lazy protocol witness table cache variable for type RootViewID and conformance RootViewID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RootViewID, &unk_25060E3B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootViewID and conformance RootViewID);
  }
  return result;
}

_UNKNOWN **sub_235126688()
{
  return &protocol witness table for AnyView;
}

uint64_t storeEnumTagSinglePayload for RootViewID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2351266E0 + 4 * byte_2352CC419[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_235126714 + 4 * byte_2352CC414[v4]))();
}

uint64_t sub_235126714(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23512671C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235126724);
  return result;
}

uint64_t sub_235126730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235126738);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23512673C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235126744(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for RootViewID()
{
  return &unk_25060E3B0;
}

void type metadata accessor for FontBox<Font.NamedProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for FontBox<Font.NamedProvider>)
  {
    v2 = lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider();
    v4 = type metadata accessor for FontBox(a1, (uint64_t)&type metadata for Font.NamedProvider, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.NamedProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider;
  if (!lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.NamedProvider, &type metadata for Font.NamedProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider;
  if (!lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.NamedProvider, &type metadata for Font.NamedProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider;
  if (!lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.NamedProvider, &type metadata for Font.NamedProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for TestingSystemColorDefinition()
{
  return &type metadata for TestingSystemColorDefinition;
}

uint64_t ObjectCache.__allocating_init(constructor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ObjectCache.init(constructor:)(a1, a2);
  return v4;
}

uint64_t ObjectCache.subscript.getter@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v3 = v2;
  v37 = a1;
  v35 = a2;
  v4 = (_QWORD *)*v2;
  v5 = v4[11];
  v34 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v32 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Optional();
  v33 = *(char **)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v28 - v10;
  v12 = v4[10];
  v13 = v4[12];
  v14 = dispatch thunk of Hashable.hashValue.getter();
  v42 = 0;
  v41 = 0x80000000;
  v31 = v3;
  ObjectCache.$data.getter(&v40);
  v15 = v40;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 16));
  v36 = v13;
  v29 = 4 * (v14 & 7);
  v30 = v14;
  v16 = v5;
  closure #1 in ObjectCache.subscript.getter((uint64_t *)(v15 + 24), v29, v14, v37, &v41, &v42, v12, v5, (uint64_t)v11, v13);
  v17 = type metadata accessor for ObjectCache.Data(0, v12, v5, v36);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify((os_unfair_lock_t)(v15 + 16));
  swift_release_n();
  v18 = v33;
  v19 = v38;
  (*((void (**)(char *, char *, uint64_t))v33 + 2))(v8, v11, v38);
  v20 = v34;
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v8, 1, v16);
  v22 = (void (*)(char *, uint64_t))*((_QWORD *)v18 + 1);
  if (v21 == 1)
  {
    v28 = v17;
    v33 = v11;
    v23 = v22;
    v22(v8, v19);
    v8 = v32;
    v24 = v12;
    v25 = v37;
    ((void (*)(char *))v31[2])(v37);
    ObjectCache.$data.getter(&v39);
    v26 = v39;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 16));
    closure #2 in ObjectCache.subscript.getter((uint64_t *)(v26 + 24), v29, &v42, (uint64_t)v25, v30, (uint64_t)v8, v24, v16, v36);
    $defer #1 <A>() in AtomicBox.wrappedValue.modify((os_unfair_lock_t)(v26 + 16));
    swift_release_n();
    v23(v33, v38);
  }
  else
  {
    v22(v11, v19);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v35, v8, v16);
}

uint64_t ObjectCache.Item.init(data:used:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  swift_getTupleTypeMetadata3();
  v12 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  result = type metadata accessor for ObjectCache.Item(0, a3, a4, a5);
  *(_DWORD *)(a6 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t ObjectCache.Data.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v7 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - v8;
  v10 = type metadata accessor for ObjectCache.Item(0, a1, a2, a3);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(v9, 1, 1, TupleTypeMetadata3, v12);
  ObjectCache.Item.init(data:used:)((uint64_t)v9, 0, a1, a2, a3, (uint64_t)v14);
  v15 = specialized Array.init(repeating:count:)((uint64_t)v14, 32, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

uint64_t property wrapper backing initializer of ObjectCache.data@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v11 = a1;
  v12 = a2;
  v7 = type metadata accessor for ObjectCache.Data(0, a3, a4, a5);
  return AtomicBox.init(wrappedValue:)((uint64_t)&v11, v7, v8, v9, a6);
}

uint64_t ObjectCache.$data.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for ObjectCache.Data(255, *(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)v1 + 88), *(_QWORD *)(*(_QWORD *)v1 + 96));
  type metadata accessor for AtomicBox(0, v3, v4, v5);
  return AtomicBox.projectedValue.getter(a1);
}

_QWORD *ObjectCache.init(constructor:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v5 = *(_QWORD *)(*v2 + 80);
  v6 = *(_QWORD *)(*v2 + 88);
  v7 = *(_QWORD *)(*v2 + 96);
  v15 = ObjectCache.Data.init()(v5, v6, v7);
  v16 = v8;
  v9 = type metadata accessor for ObjectCache.Data(0, v5, v6, v7);
  AtomicBox.init(wrappedValue:)((uint64_t)&v15, v9, v10, v11, &v14);
  v12 = v14;
  v2[3] = a2;
  v2[4] = v12;
  v2[2] = a1;
  return v2;
}

uint64_t closure #1 in ObjectCache.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t TupleTypeMetadata3;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, uint64_t);
  uint64_t *v59;
  int v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t (*v108)(char *, uint64_t);

  v88 = a6;
  v93 = a4;
  v95 = a3;
  v80 = a9;
  v105 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v92 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v17 = type metadata accessor for Optional();
  v103 = *(_QWORD *)(v17 - 8);
  v104 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v102 = (char *)&v78 - v18;
  v106 = a7;
  v96 = a8;
  v81 = a10;
  v19 = type metadata accessor for ObjectCache.Item(0, a7, a8, a10);
  v90 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v85 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v100 = (char *)&v78 - v22;
  v108 = *(uint64_t (**)(char *, uint64_t))(TupleTypeMetadata3 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v79 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v99 = (char *)&v78 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v101 = (char *)&v78 - v28;
  v29 = 0;
  v94 = a1;
  v87 = a5;
  v86 = a2;
  v91 = v30;
  v89 = TupleTypeMetadata3;
  while (1)
  {
    result = a2 + v29;
    if (__OFADD__(a2, v29))
      break;
    v32 = v100;
    v107 = a2 + v29;
    Array.subscript.getter();
    v34 = v102;
    v33 = v103;
    v35 = v32;
    v36 = v104;
    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v102, v35, v104);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v108 + 6))(v34, 1, TupleTypeMetadata3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v36);
      v37 = 0x7FFFFFFF;
      if (*a5 == 0x7FFFFFFF)
        goto LABEL_3;
    }
    else
    {
      v38 = *(int *)(TupleTypeMetadata3 + 48);
      v39 = *(int *)(TupleTypeMetadata3 + 64);
      v40 = v101;
      v41 = &v101[v39];
      v97 = &v34[v39];
      v42 = v105;
      v43 = v106;
      v82 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
      v82(v101, v34, v106);
      v98 = *(_QWORD *)&v34[v38];
      *(_QWORD *)&v40[v38] = v98;
      v44 = v96;
      v45 = *(_QWORD *)(v96 - 8);
      v83 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v83(v41, v97, v96);
      v46 = *(int *)(TupleTypeMetadata3 + 48);
      v47 = *(int *)(TupleTypeMetadata3 + 64);
      v48 = v99;
      v97 = &v99[v47];
      v49 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      v49(v99, v40, v43);
      v50 = v98;
      *(_QWORD *)&v48[v46] = v98;
      v84 = v45;
      v51 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
      v52 = v97;
      v97 = v41;
      v51(v52, v41, v44);
      v53 = v92;
      v49(v92, v93, v43);
      if (v50 == v95)
      {
        v54 = v99;
        v55 = v106;
        v56 = dispatch thunk of static Equatable.== infix(_:_:)();
        v57 = *(void (**)(char *, uint64_t))(v105 + 8);
        v57(v53, v55);
        v58 = (void (*)(char *, uint64_t))*((_QWORD *)v108 + 1);
        TupleTypeMetadata3 = v89;
        v58(v54, v89);
        v59 = v94;
        if ((v56 & 1) != 0)
        {
          v64 = v106;
          v65 = TupleTypeMetadata3;
          v66 = v96;
          type metadata accessor for ObjectCache.Data(0, v106, v96, v81);
          v67 = *((_DWORD *)v59 + 2) + 1;
          *((_DWORD *)v59 + 2) = v67;
          v108 = (uint64_t (*)(char *, uint64_t))v57;
          v68 = v91;
          v69 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          v70 = *v59;
          v71 = v107;
          Array._checkSubscript_mutating(_:)(v107);
          *(_DWORD *)(v70
                    + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80))
                    + *(_QWORD *)(v90 + 72) * v71
                    + *(int *)(v68 + 44)) = v67;
          _ViewInputs.base.modify(v69, v72);
          v73 = *(int *)(v65 + 48);
          v74 = v79;
          v75 = &v79[*(int *)(v65 + 64)];
          v82(v79, v101, v64);
          *(_QWORD *)&v74[v73] = v95;
          v76 = (void (*)(uint64_t, char *, uint64_t))v83;
          v83(v75, v97, v66);
          v77 = v80;
          v76(v80, v75, v66);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v77, 0, 1, v66);
          return v108(v74, v64);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v105 + 8))(v53, v106);
        v58 = (void (*)(char *, uint64_t))*((_QWORD *)v108 + 1);
        TupleTypeMetadata3 = v89;
        v58(v99, v89);
        v59 = v94;
      }
      v60 = *((_DWORD *)v59 + 2);
      v61 = v85;
      v62 = v91;
      Array.subscript.getter();
      v58(v101, TupleTypeMetadata3);
      v63 = *(_DWORD *)&v61[*(int *)(v62 + 44)];
      (*(void (**)(char *, uint64_t))(v90 + 8))(v61, v62);
      v37 = v60 - v63;
      a5 = v87;
      a2 = v86;
      if (*v87 >= v60 - v63)
        goto LABEL_3;
    }
    *v88 = v29;
    *a5 = v37;
LABEL_3:
    if (++v29 == 4)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v80, 1, 1);
  }
  __break(1u);
  return result;
}

void closure #2 in ObjectCache.subscript.getter(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t TupleTypeMetadata3;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  Swift::Int v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  char *v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a5;
  v38 = a6;
  v36 = a4;
  v40 = a2;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v14 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v34 - v15;
  v39 = a9;
  v17 = type metadata accessor for ObjectCache.Item(0, a7, a8, a9);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v34 - v20;
  v22 = v40 + *a3;
  if (__OFADD__(v40, *a3))
  {
    __break(1u);
  }
  else
  {
    v23 = *(int *)(TupleTypeMetadata3 + 48);
    v24 = &v16[*(int *)(TupleTypeMetadata3 + 64)];
    v25 = *(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a7 - 8) + 16);
    v34 = v21;
    v35 = v22;
    v25(v16, v36, a7, v19);
    v26 = v38;
    *(_QWORD *)&v16[v23] = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 16))(v24, v26, a8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(v16, 0, 1, TupleTypeMetadata3);
    v27 = v39;
    type metadata accessor for ObjectCache.Data(0, a7, a8, v39);
    v28 = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v28;
    v29 = (uint64_t)v34;
    ObjectCache.Item.init(data:used:)((uint64_t)v16, v28, a7, a8, v27, (uint64_t)v34);
    v30 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    v31 = *a1;
    v32 = v35;
    Array._checkSubscript_mutating(_:)(v35);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 40))(v31+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v32, v29, v17);
    _ViewInputs.base.modify(v30, v33);
  }
}

uint64_t ObjectCache.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t ObjectCache.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ObjectCache.Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectCache.Data);
}

uint64_t type metadata completion function for ObjectCache()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObjectCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectCache);
}

uint64_t method lookup function for ObjectCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ObjectCache.__allocating_init(constructor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for ObjectCache.Item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectCache.Item);
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = static Array._allocateUninitialized(_:)();
  v16 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a3 - 8);
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      v11 = a2 - 1;
      if (v11)
      {
        v12 = *(_QWORD *)(v9 + 72);
        v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    v14 = type metadata accessor for Array();
    _ViewInputs.base.modify(v14, v15);
    return v16;
  }
  return result;
}

uint64_t type metadata completion function for ObjectCache.Item()
{
  uint64_t result;
  unint64_t v1;

  swift_getTupleTypeMetadata3();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ObjectCache.Item(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  unsigned int v16;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_DWORD *)(v8 + 84);
  v11 = *(_DWORD *)(v8 + 80);
  v12 = ((v11 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(_QWORD *)(v8 + 64);
  v13 = *(unsigned int *)(v7 + 84);
  v14 = v10 | v13;
  if (v10 | v13)
    v15 = ((v11 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(_QWORD *)(v8 + 64);
  else
    v15 = v12 + 1;
  v16 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v16 <= 7
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) == 0
    && ((v15 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 <= 0x18)
  {
    v25 = v5;
    if (v14)
    {
      if (v13 >= v10)
      {
        if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, v13, v6))
          goto LABEL_28;
      }
      else if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                             + v11
                                                                             + 8) & ~v11))
      {
LABEL_28:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        v22 = (_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
        v23 = (_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
        *v22 = *v23;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v22 + v11 + 8) & ~v11, ((unint64_t)v23 + v11 + 8) & ~v11, v25);
        if (!v14)
          *((_BYTE *)a1 + v12) = 0;
        goto LABEL_30;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + v12))
        goto LABEL_28;
      v20 = (*((unsigned __int8 *)a2 + v12) - 1) << (8 * v12);
      if (v12 > 3)
        v20 = 0;
      if ((_DWORD)v12)
      {
        if (v12 <= 3)
          v21 = ((v11 + ((v9 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v11) + *(_DWORD *)(v8 + 64);
        else
          v21 = 4;
        __asm { BR              X11 }
      }
      if (v20 == -1)
        goto LABEL_28;
    }
    memcpy(a1, a2, v15);
LABEL_30:
    *(_DWORD *)(((unint64_t)a1 + v15 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v15 + 3) & 0xFFFFFFFFFFFFFCLL);
    return a1;
  }
  v19 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v19 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
  swift_retain();
  return a1;
}

uint64_t destroy for ObjectCache.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  int v14;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v3 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = ~v10;
  if (v8 | v6)
  {
    if (v6 >= v8)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
      if (!(_DWORD)result)
      {
LABEL_15:
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
        return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))((((a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & v11, v3);
      }
    }
    else
    {
      result = (*(uint64_t (**)(unint64_t))(v7 + 48))((((a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & v11);
      if (!(_DWORD)result)
        goto LABEL_15;
    }
  }
  else
  {
    v13 = ((v10 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + *(_QWORD *)(v7 + 64);
    if (!*(_BYTE *)(a1 + v13))
      goto LABEL_15;
    v14 = (*(unsigned __int8 *)(a1 + v13) - 1) << (8 * v13);
    if (v13 > 3)
      v14 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X11 }
    }
    result = (v14 + 1);
    if (v14 == -1)
      goto LABEL_15;
  }
  return result;
}

void *initializeWithCopy for ObjectCache.Item(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = ((v12 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12) + *(_QWORD *)(v9 + 64);
  v14 = v10 | v8;
  if (!(v10 | v8))
  {
    if (!a2[v13])
      goto LABEL_19;
    v15 = (a2[v13] - 1) << (8 * v13);
    if (v13 > 3)
      v15 = 0;
    if ((_DWORD)v13)
    {
      if (v13 <= 3)
        v16 = ((v12 + ((v11 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v12) + *(_DWORD *)(v9 + 64);
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    if (v15 == -1)
      goto LABEL_19;
    goto LABEL_14;
  }
  if (v8 >= v10)
  {
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6))
      goto LABEL_19;
LABEL_14:
    if (v14)
      v17 = v13;
    else
      v17 = v13 + 1;
    memcpy(a1, a2, v17);
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(unint64_t))(v9 + 48))((((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8)
                                                                   + v12
                                                                   + 8) & ~v12))
    goto LABEL_14;
LABEL_19:
  (*(void (**)(void *, _BYTE *, uint64_t))(v7 + 16))(a1, a2, v6);
  v18 = (_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v18 + v12 + 8) & ~v12, ((unint64_t)v19 + v12 + 8) & ~v12, v5);
  if (!v14)
    *((_BYTE *)a1 + v13) = 0;
LABEL_21:
  if (v14)
    v20 = v13;
  else
    v20 = v13 + 1;
  *(_DWORD *)(((unint64_t)a1 + v20 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((unint64_t)&a2[v20 + 3] & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

unsigned __int8 *assignWithCopy for ObjectCache.Item(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v23;
  uint64_t (*v24)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = a2;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v40 = v5;
  v41 = *(_QWORD *)(v7 + 64);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = ((v11 + ((v41 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(_QWORD *)(v9 + 64);
  v14 = v10 | v8;
  v38 = v6;
  v39 = ~v11;
  v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      v23 = v10 | v8;
      v24 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v25 = *(_QWORD *)(a3 + 16);
      v26 = v24(a1, v8, v6);
      v18 = v24(a2, v8, v25);
      v14 = v23;
      v3 = a2;
      if (v26)
      {
LABEL_4:
        if (!v18)
          goto LABEL_36;
LABEL_30:
        if (v14)
          v29 = v13;
        else
          v29 = v13 + 1;
        memcpy(a1, v3, v29);
        goto LABEL_38;
      }
    }
    else
    {
      v36 = v10 | v8;
      v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      v16 = *(_QWORD *)(a3 + 24);
      v17 = v15((((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v12, v10, v5);
      v18 = v15(((((unint64_t)v3 + v41 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v12, v10, v16);
      v14 = v36;
      if (v17)
        goto LABEL_4;
    }
    goto LABEL_28;
  }
  v19 = 8 * v13;
  if (!a1[v13])
    goto LABEL_19;
  v20 = (a1[v13] - 1) << v19;
  if (v13 > 3)
    v20 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v21 = ((v11 + ((v41 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  if (v20 == -1)
  {
LABEL_19:
    if (!a2[v13])
      goto LABEL_34;
    v27 = (a2[v13] - 1) << v19;
    if (v13 > 3)
      v27 = 0;
    if ((_DWORD)v13)
    {
      if (v13 <= 3)
        v28 = ((v11 + ((v41 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
      else
        v28 = 4;
      __asm { BR              X11 }
    }
    v18 = v27 + 1;
LABEL_28:
    v6 = v38;
    v12 = ~v11;
    v7 = v37;
    if (v18)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v37 + 8))(a1, v38);
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))((((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v39, v40);
      goto LABEL_30;
    }
LABEL_34:
    (*(void (**)(unsigned __int8 *, const void *, uint64_t))(v7 + 24))(a1, v3, v6);
    v30 = (_QWORD *)((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v3 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v31;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v30 + v11 + 8) & v12, ((unint64_t)v31 + v11 + 8) & v12, v40);
    goto LABEL_38;
  }
  if (a2[v13] && (a2[v13] - 1) << v19 != -1)
    goto LABEL_30;
LABEL_36:
  (*(void (**)(unsigned __int8 *, const void *, uint64_t))(v37 + 16))(a1, v3, v38);
  v32 = (_QWORD *)((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v3 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v32 + v11 + 8) & v39, ((unint64_t)v33 + v11 + 8) & v39, v40);
  if (!v14)
    a1[v13] = 0;
LABEL_38:
  if (v14)
    v34 = v13;
  else
    v34 = v13 + 1;
  *(_DWORD *)((unint64_t)&a1[v34 + 3] & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v3 + v34 + 3) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

void *initializeWithTake for ObjectCache.Item(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = ((v12 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12) + *(_QWORD *)(v9 + 64);
  v14 = v10 | v8;
  if (!(v10 | v8))
  {
    if (!a2[v13])
      goto LABEL_19;
    v15 = (a2[v13] - 1) << (8 * v13);
    if (v13 > 3)
      v15 = 0;
    if ((_DWORD)v13)
    {
      if (v13 <= 3)
        v16 = ((v12 + ((v11 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v12) + *(_DWORD *)(v9 + 64);
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    if (v15 == -1)
      goto LABEL_19;
    goto LABEL_14;
  }
  if (v8 >= v10)
  {
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6))
      goto LABEL_19;
LABEL_14:
    if (v14)
      v17 = v13;
    else
      v17 = v13 + 1;
    memcpy(a1, a2, v17);
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(unint64_t))(v9 + 48))((((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8)
                                                                   + v12
                                                                   + 8) & ~v12))
    goto LABEL_14;
LABEL_19:
  (*(void (**)(void *, _BYTE *, uint64_t))(v7 + 32))(a1, a2, v6);
  v18 = (_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v18 + v12 + 8) & ~v12, ((unint64_t)v19 + v12 + 8) & ~v12, v5);
  if (!v14)
    *((_BYTE *)a1 + v13) = 0;
LABEL_21:
  if (v14)
    v20 = v13;
  else
    v20 = v13 + 1;
  *(_DWORD *)(((unint64_t)a1 + v20 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((unint64_t)&a2[v20 + 3] & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

unsigned __int8 *assignWithTake for ObjectCache.Item(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v23;
  uint64_t (*v24)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = a2;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v40 = v5;
  v41 = *(_QWORD *)(v7 + 64);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = ((v11 + ((v41 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(_QWORD *)(v9 + 64);
  v14 = v10 | v8;
  v38 = v6;
  v39 = ~v11;
  v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      v23 = v10 | v8;
      v24 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v25 = *(_QWORD *)(a3 + 16);
      v26 = v24(a1, v8, v6);
      v18 = v24(a2, v8, v25);
      v14 = v23;
      v3 = a2;
      if (v26)
      {
LABEL_4:
        if (!v18)
          goto LABEL_36;
LABEL_30:
        if (v14)
          v29 = v13;
        else
          v29 = v13 + 1;
        memcpy(a1, v3, v29);
        goto LABEL_38;
      }
    }
    else
    {
      v36 = v10 | v8;
      v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      v16 = *(_QWORD *)(a3 + 24);
      v17 = v15((((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v12, v10, v5);
      v18 = v15(((((unint64_t)v3 + v41 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v12, v10, v16);
      v14 = v36;
      if (v17)
        goto LABEL_4;
    }
    goto LABEL_28;
  }
  v19 = 8 * v13;
  if (!a1[v13])
    goto LABEL_19;
  v20 = (a1[v13] - 1) << v19;
  if (v13 > 3)
    v20 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v21 = ((v11 + ((v41 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  if (v20 == -1)
  {
LABEL_19:
    if (!a2[v13])
      goto LABEL_34;
    v27 = (a2[v13] - 1) << v19;
    if (v13 > 3)
      v27 = 0;
    if ((_DWORD)v13)
    {
      if (v13 <= 3)
        v28 = ((v11 + ((v41 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
      else
        v28 = 4;
      __asm { BR              X11 }
    }
    v18 = v27 + 1;
LABEL_28:
    v6 = v38;
    v12 = ~v11;
    v7 = v37;
    if (v18)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v37 + 8))(a1, v38);
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))((((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v39, v40);
      goto LABEL_30;
    }
LABEL_34:
    (*(void (**)(unsigned __int8 *, const void *, uint64_t))(v7 + 40))(a1, v3, v6);
    v30 = (_QWORD *)((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v3 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v31;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))(((unint64_t)v30 + v11 + 8) & v12, ((unint64_t)v31 + v11 + 8) & v12, v40);
    goto LABEL_38;
  }
  if (a2[v13] && (a2[v13] - 1) << v19 != -1)
    goto LABEL_30;
LABEL_36:
  (*(void (**)(unsigned __int8 *, const void *, uint64_t))(v37 + 32))(a1, v3, v38);
  v32 = (_QWORD *)((unint64_t)&a1[v41 + 7] & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v3 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v32 + v11 + 8) & v39, ((unint64_t)v33 + v11 + 8) & v39, v40);
  if (!v14)
    a1[v13] = 0;
LABEL_38:
  if (v14)
    v34 = v13;
  else
    v34 = v13 + 1;
  *(_DWORD *)((unint64_t)&a1[v34 + 3] & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v3 + v34 + 3) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectCache.Item(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = v9 - 1;
  if (v9)
  {
    v11 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(v7 + 64) + 1;
  }
  if (!a2)
    return 0;
  v12 = *(_QWORD *)(v5 + 64);
  v13 = *(unsigned __int8 *)(v7 + 80);
  if (v10 < a2)
  {
    if (((((v11 + ((v13 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
      v14 = 2;
    else
      v14 = a2 - v10 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X5 }
  }
  if (v9 < 2)
    return 0;
  if (v6 >= v8)
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
  else
    v18 = (*(uint64_t (**)(unint64_t))(v7 + 48))((((a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + v13 + 8) & ~v13);
  if (v18 >= 2)
    return v18 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ObjectCache.Item(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84))
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = 3;
  if (!v8)
    v10 = 4;
  v11 = ((v10
        + ((*(unsigned __int8 *)(v7 + 80) + ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(_QWORD *)(v7 + 64)) & 0xFFFFFFFFFFFFFFFCLL)
      + 4;
  if (v9 < a3)
  {
    if ((((_DWORD)v10
         + ((*(unsigned __int8 *)(v7 + 80) + ((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 8) & ~*(unsigned __int8 *)(v7 + 80))
         + *(_DWORD *)(v7 + 64)) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v12 = a3 - v9 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v5 = v13;
    else
      v5 = 0;
  }
  if (a2 > v9)
  {
    if ((_DWORD)v11)
    {
      v14 = ~v9 + a2;
      bzero(a1, v11);
      *a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

void sub_235128B64(int a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;

  v24[v25] = 0;
  if (a2 && v20 >= 2)
  {
    if (a2 + 1 <= v20)
    {
      if (a2 != -1)
      {
        if (v16 >= a3)
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v19 + 56))(v24, (a2 + 1), v16);
        else
          (*(void (**)(unint64_t, _QWORD, uint64_t))(v18 + 56))((((unint64_t)&v24[v22 + 7] & 0xFFFFFFFFFFFFFFF8) + v21 + 8) & v23, (a2 + 1), a3);
      }
    }
    else if ((_DWORD)v17)
    {
      if (v17 <= 3)
        v26 = v17;
      else
        v26 = 4;
      bzero(v24, v17);
      __asm { BR              X10 }
    }
  }
}

void sub_235128C5C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_235128C64()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterIndex()
{
  return &type metadata for Text.Effect.ClusterIndex;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;

  v3 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else
  {
    v5 = *v2;
    v4 = v2[1];
    v6 = v2[2];
    v7 = *v2 + 48;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16))
      goto LABEL_10;
    specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if ((v8 & 1) == 0)
      goto LABEL_10;
    swift_endAccess();
    swift_beginAccess();
    v9 = *(_QWORD *)v7;
    if (!*(_QWORD *)(*(_QWORD *)v7 + 16))
      goto LABEL_11;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if ((v11 & 1) == 0)
      goto LABEL_11;
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
    swift_endAccess();
    if (v3 <= *(_QWORD *)(v12 + 16))
      return v3;
  }
  __break(1u);
LABEL_10:
  swift_endAccess();
  __break(1u);
LABEL_11:
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t Text.Effect.DrawableContent.init(fragment:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  Swift::UInt64 v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  swift_retain();
  swift_retain();
  Text.Effect.BaseContent.init(keyframes:key:)(v4, v5, v6, a2);
  return outlined release of Text.Effect.BaseFragment((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.SubcomponentKeyPath()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.Effect.SubcomponentKeyPath()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = v0[1];
  v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.SubcomponentKeyPath()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

_QWORD *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.SubcomponentKeyPath(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else
  {
    if (*a2 != *result)
      return 0;
    v2 = result[1];
    v3 = a2[1];
    if (!__OFSUB__(v3, v2))
    {
      if (v3 == v2)
      {
        v4 = result[2];
        v5 = a2[2];
        if (!__OFSUB__(v5, v4))
          return (_QWORD *)(v5 == v4);
        goto LABEL_10;
      }
      return 0;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t Text.Effect.BaseContent.init(keyframes:key:)@<X0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  const __CTLine *v32;
  void *v33;
  CFRange StringRange;
  CFIndex v35;
  uint64_t v36;
  CFIndex v37;
  BOOL v38;
  CFIndex v39;
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *, _QWORD);
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  _QWORD v53[2];
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[7];

  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  v54 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v11 = v10;
  v62 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v61 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v53 - v14;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v64 = v16;
  v57 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v53 - v17;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  swift_retain();
  swift_retain();
  RangeSet.init()();
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)(v19 + 16))
    goto LABEL_44;
  swift_retain();
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v21 & 1) == 0)
  {
LABEL_43:
    swift_release();
LABEL_44:
    result = swift_endAccess();
    __break(1u);
    return result;
  }
  v53[0] = a1;
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 16 * v20);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v53[1] = a3;
  swift_release();
  v23 = v63;
  v59 = *(_QWORD *)(v22 + 16);
  v55 = v15;
  v56 = a4;
  if (v59)
  {
    v24 = 0;
    v60 = v22 + 32;
    v58 = v22;
    while (v24 < *(_QWORD *)(v22 + 16))
    {
      v25 = *(_QWORD *)(v60 + 8 * v24);
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      swift_retain_n();
      if (v27 != v26)
      {
        while (1)
        {
          v28 = *(void **)(v25 + 32);
          v29 = *(_QWORD *)(v25 + 40);
          if ((*(_BYTE *)(v25 + 48) & 1) != 0)
          {
            outlined copy of Text.Layout.Line.Line(*(void **)(v25 + 32), *(_QWORD *)(v25 + 40), 1);
            v30 = (id)_NSTextLineFragmentGetCTLine(v28);
            if (!v30)
              goto LABEL_42;
            v31 = v30;
            outlined consume of Text.Layout.Line.Line(v28, v29, 1);
            v28 = v31;
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(*(void **)(v25 + 32), *(_QWORD *)(v25 + 40), 0);
            outlined copy of Text.Layout.Line.Line(v28, v29, 0);

            swift_release();
          }
          if (v27 < *(_QWORD *)(v25 + 16) || v27 >= *(_QWORD *)(v25 + 24))
            break;
          swift_retain();
          v32 = v28;
          v33 = (id)_CTLineGetRunAtIndex(v32, v27);
          StringRange = CTRunGetStringRange((CTRunRef)v33);
          swift_release();

          v35 = StringRange.location + StringRange.length;
          if (__OFADD__(StringRange.location, StringRange.length))
            goto LABEL_34;
          if (v35 < StringRange.location)
            goto LABEL_35;
          v36 = *(_QWORD *)(v25 + 88);
          v37 = StringRange.location + v36;
          if (__OFADD__(StringRange.location, v36))
            goto LABEL_36;
          v38 = __OFADD__(v35, v36);
          v39 = v35 + v36;
          if (v38)
            goto LABEL_37;
          if (v39 < v37)
            goto LABEL_38;
          v65[4] = StringRange.location + v36;
          v65[5] = v39;
          if (__OFSUB__(v39, v37))
            goto LABEL_39;
          if (v39 != v37)
          {
            v40 = (void (*)(_QWORD *, _QWORD))RangeSet._ranges.modify();
            RangeSet.Ranges._insert(contentsOf:)();
            v40(v65, 0);
          }
          ++v27;
          swift_release();

          if (v27 == *(_QWORD *)(v25 + 24))
            goto LABEL_5;
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        break;
      }
LABEL_5:
      ++v24;
      swift_release_n();
      v22 = v58;
      v23 = v63;
      if (v59 == v24)
      {
        swift_bridgeObjectRelease();
        v15 = v55;
        a4 = v56;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
LABEL_26:
  v60 = type metadata accessor for Text.Effect.BaseContent(0);
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))((char *)a4 + *(int *)(v60 + 24), v18, v64);
  RangeSet.ranges.getter();
  v41 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  v41(v61, v15, v11);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4928]);
  dispatch thunk of Sequence.makeIterator()();
  v42 = &v23[*(int *)(v54 + 36)];
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4930]);
  v43 = 0;
  v44 = v61;
  while (1)
  {
    v45 = *(_QWORD *)v42;
    v46 = (uint64_t)v63;
    dispatch thunk of Collection.endIndex.getter();
    if (v45 == v65[0])
      break;
    v47 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v49 = *v48;
    v50 = v48[1];
    v47(v65, 0);
    v41(v44, (char *)v46, v11);
    v46 = (uint64_t)v44;
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v11);
    v51 = v50 - v49;
    if (__OFSUB__(v50, v49))
      goto LABEL_40;
    v38 = __OFADD__(v43, v51);
    v43 += v51;
    if (v38)
    {
      __break(1u);
      break;
    }
  }
  outlined destroy of TypesettingConfiguration(v46, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v55, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, v64);
  *(_QWORD *)((char *)v56 + *(int *)(v60 + 28)) = v43;
  return result;
}

double Text.Effect.DrawableContent.subscript.getter@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t v7;
  __int128 v8;
  double result;
  _OWORD v10[2];
  __int128 v11;
  uint64_t v12;

  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  swift_retain();
  swift_retain();
  Text.Effect.DrawableFragment.init(keyframes:key:fragment:)(v5, v6, v7, a1, (uint64_t)v10);
  v8 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v8;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 48) = v12;
  return result;
}

uint64_t Text.Effect.DrawableContent.startIndex.getter()
{
  uint64_t *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if ((v4 & 1) != 0)
    {
      swift_endAccess();
      swift_release();
      return 0;
    }
    swift_release();
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Effect.DrawableContent<A>()
{
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Effect.DrawableContent<A>()
{
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1880]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1880]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Text.Effect.DrawableContent<A>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = Text.Effect.DrawableContent.startIndex.getter();
  *a1 = 0;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Text.Effect.DrawableContent<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized Text.Effect.DrawableContent.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.DrawableContent<A>(_QWORD *a1, unint64_t *a2))(uint64_t a1)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = malloc(0x60uLL);
  *a1 = v4;
  v4[11] = Text.Effect.DrawableContent.subscript.read(v4 + 7, *a2);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 48);
  v9 = *(_OWORD *)(v5 + 16);
  v8 = *(_OWORD *)(v5 + 32);
  *v4 = *(_QWORD *)v5;
  v4[1] = v6;
  *((_OWORD *)v4 + 1) = v9;
  *((_OWORD *)v4 + 2) = v8;
  v4[6] = v7;
  return protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines;
}

void (*Text.Effect.DrawableContent.subscript.read(_QWORD *a1, unint64_t a2))(uint64_t *a1)
{
  void *v4;

  v4 = malloc(0x38uLL);
  *a1 = v4;
  Text.Effect.DrawableContent.subscript.getter(a2, (uint64_t)v4);
  return Text.Effect.DrawableContent.subscript.read;
}

void Text.Effect.DrawableContent.subscript.read(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined release of Text.Effect.BaseFragment(*a1);
  free(v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance Text.Effect.DrawableContent<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, a1);
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, a3);
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, a3);
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for Collection.index(after:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1878]);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;

  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>);
  v7 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  return a4(a1, a2, v6, v7);
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance Text.Effect.DrawableContent<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1878]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t))
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>);
  v8 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  result = a4(&v10, a1, a2, v7, v8);
  *a1 = v10;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Text.Effect.DrawableContent<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  Text.Effect.DrawableContent.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, a1);
  result = type metadata accessor for IndexingIterator();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Effect.DrawableContent<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.DrawableContent<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.BaseContent(uint64_t *a1)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Text.Effect.BaseContent(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Text.Effect.BaseContent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  swift_beginAccess();
  v6 = specialized Dictionary.subscript.getter(v3, v5, *(_QWORD *)(v4 + 48));
  result = swift_endAccess();
  if (v6)
  {
    result = swift_bridgeObjectRelease();
    *a1 = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Text.Effect.BaseContent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  swift_beginAccess();
  v6 = specialized Dictionary.subscript.getter(v3, v5, *(_QWORD *)(v4 + 48));
  result = swift_endAccess();
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 16);
    result = swift_bridgeObjectRelease();
    *a1 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.BaseContent(_QWORD *a1, unint64_t *a2))(uint64_t *a1)
{
  uint64_t *v2;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  uint64_t v9;
  __int128 v10;

  v5 = malloc(0x70uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[2];
  swift_retain();
  swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v7, v8, v9, v6, v5);
  v10 = v5[1];
  *(_OWORD *)((char *)v5 + 56) = *v5;
  *(_OWORD *)((char *)v5 + 72) = v10;
  *(_OWORD *)((char *)v5 + 88) = v5[2];
  *((_QWORD *)v5 + 13) = *((_QWORD *)v5 + 6);
  return Text.Effect.DrawableContent.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.BaseContent@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  v6 = *a1;
  v7 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3);
  if (a2 < 1)
  {
    if (v7 <= 0 && v7 > a2)
      goto LABEL_4;
LABEL_10:
    result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v6, a2);
    v9 = 0;
    goto LABEL_11;
  }
  if (v7 < 0 || v7 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  result = 0;
  v9 = 1;
LABEL_11:
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v9;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance Text.Effect.BaseContent@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Text.Effect.BaseContent(unint64_t *a1)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.BaseContent(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  char v7;
  uint64_t v8;

  v2 = (uint64_t)v1;
  outlined init with copy of TypesettingLanguage((uint64_t)v1, a1, type metadata accessor for Text.Effect.BaseContent);
  v4 = *v1;
  v6 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v6, v5), (v7 & 1) != 0))
  {
    swift_endAccess();
    outlined destroy of TypesettingConfiguration(v2, type metadata accessor for Text.Effect.BaseContent);
    type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
    *(_QWORD *)(a1 + *(int *)(v8 + 36)) = 0;
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.BaseContent()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for Text.Effect.BaseContent);
  return v1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.ChunkIndex()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.ChunkIndex(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else
  {
    if (*a2 != *result)
      return 0;
    v2 = result[1];
    v3 = a2[1];
    if (!__OFSUB__(v3, v2))
      return (_QWORD *)(v3 == v2);
  }
  __break(1u);
  return result;
}

_OWORD *protocol witness for Collection.subscript.read in conformance Text.Effect.ChunkCollection(_OWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v4 = *(_QWORD *)v2 + 32 * v3;
    v5 = *(_OWORD *)(v4 + 48);
    *result = *(_OWORD *)(v4 + 32);
    result[1] = v5;
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.ChunkCollection()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.ChunkCollection(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

void ClusterIndexSequence.Iterator.next()(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v27[7];

  v3 = type metadata accessor for ClusterIndexSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_QWORD *)((char *)&v27[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (unint64_t *)(v1 + *(int *)(v6 + 28));
  v8 = *v7;
  v9 = (uint64_t *)(v1 + *(int *)(v6 + 24));
  v10 = *v9;
  if ((uint64_t)*v7 >= *v9)
  {
    if (__OFSUB__(v10, v8))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v10 != v8 || (uint64_t)v7[1] >= v9[1])
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      goto LABEL_13;
    }
  }
  outlined init with copy of TypesettingLanguage(v1, (uint64_t)v5, type metadata accessor for ClusterIndexSequence.Iterator);
  v11 = *v5;
  v12 = v5[1];
  v13 = v5[2];
  swift_retain();
  swift_retain();
  Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v11, v12, v13, v8, (uint64_t)v27);
  v14 = v27[0];
  v15 = v27[1];
  v16 = v27[2];
  v17 = v27[3];
  v18 = v27[4];
  v19 = v27[5];
  v20 = v27[6];
  outlined destroy of TypesettingConfiguration((uint64_t)v5, type metadata accessor for Text.Effect.BaseContent);
  v21 = v7[1];
  v22 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  v7[1] = v22;
  v23 = *(_QWORD *)(*(_QWORD *)(v17 + 96) + 16);
  v24 = __OFADD__(v20, v23);
  v25 = v20 + v23;
  if (v24)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v25 < v20)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(v25, v22))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v25 != v22)
  {
LABEL_13:
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v16;
    a1[3] = v17;
    a1[4] = v18;
    a1[5] = v19;
    a1[6] = v20;
    a1[7] = v21;
    return;
  }
  if (!__OFADD__(*v7, 1))
  {
    ++*v7;
    goto LABEL_13;
  }
LABEL_19:
  __break(1u);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance ClusterIndexSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[8];

  ClusterIndexSequence.Iterator.next()(v3);
  return outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v3, a1, &lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?, (void (*)(uint64_t))type metadata accessor for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence(a1, type metadata accessor for ClusterIndexSequence.Iterator, type metadata accessor for ClusterIndexSequence, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ClusterIndexSequence()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for ClusterIndexSequence);
  return v1;
}

void FragmentRangeSequence.Iterator.next()(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  BOOL v24;
  int64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[7];

  v3 = type metadata accessor for FragmentRangeSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_QWORD *)((char *)&v32[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (unint64_t *)(v1 + *(int *)(v6 + 28));
  v8 = *v7;
  v9 = (_QWORD *)(v1 + *(int *)(v6 + 24));
  v10 = *v9;
  if ((int64_t)*v7 >= *v9)
  {
    if (__OFSUB__(v10, v8))
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v10 != v8 || (int64_t)v7[1] >= v9[1])
    {
      v27 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v21 = 0;
      v22 = 0;
LABEL_25:
      *a1 = v27;
      a1[1] = v14;
      a1[2] = v15;
      a1[3] = v16;
      a1[4] = v17;
      a1[5] = v18;
      a1[6] = v19;
      a1[7] = v21;
      a1[8] = v22;
      return;
    }
  }
  outlined init with copy of TypesettingLanguage(v1, (uint64_t)v5, type metadata accessor for FragmentRangeSequence.Iterator);
  v11 = *v5;
  v12 = v5[1];
  v13 = v5[2];
  swift_retain();
  swift_retain();
  Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v11, v12, v13, v8, (uint64_t)v32);
  v14 = v32[1];
  v31 = v32[0];
  v15 = v32[2];
  v16 = v32[3];
  v17 = v32[4];
  v18 = v32[5];
  v19 = v32[6];
  outlined destroy of TypesettingConfiguration((uint64_t)v5, type metadata accessor for Text.Effect.BaseContent);
  v20 = *v7;
  if (__OFSUB__(*v9, *v7))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (*v9 != *v7)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 16);
    v25 = v19 + v28;
    v26 = __OFADD__(v19, v28);
    if (__OFADD__(v19, v28))
      goto LABEL_32;
    v21 = v7[1];
    if (v25 < v19 || v25 < v21)
      goto LABEL_33;
    v22 = v25;
LABEL_21:
    if (!v26)
    {
      if (v25 >= v19)
      {
        v7[1] = v25;
        v24 = __OFADD__(v20, 1);
        v30 = v20 + 1;
        if (!v24)
        {
          *v7 = v30;
          v27 = v31;
          goto LABEL_25;
        }
        goto LABEL_29;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v21 = v7[1];
  v22 = v9[1];
  if (v22 >= v21)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 16);
    v24 = __OFADD__(v19, v23);
    v25 = v19 + v23;
    v26 = v24;
    goto LABEL_21;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance FragmentRangeSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[9];

  FragmentRangeSequence.Iterator.next()(v3);
  return outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v3, a1, &lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>)?, (void (*)(uint64_t))type metadata accessor for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance FragmentRangeSequence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence(a1, type metadata accessor for FragmentRangeSequence.Iterator, type metadata accessor for FragmentRangeSequence, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t (*a3)(_QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  outlined init with copy of TypesettingLanguage(v4, a4, type metadata accessor for Text.Effect.BaseContent);
  v9 = *(int *)(a1 + 24);
  v10 = (uint64_t *)(v4 + *(int *)(a1 + 20));
  v11 = *v10;
  v12 = v10[1];
  v13 = *(_QWORD *)(v4 + v9);
  v14 = *(_QWORD *)(v4 + v9 + 8);
  v15 = (int *)a2(0);
  v16 = (_QWORD *)(a4 + v15[5]);
  *v16 = v11;
  v16[1] = v12;
  v17 = (_QWORD *)(a4 + v15[6]);
  *v17 = v13;
  v17[1] = v14;
  v18 = (_QWORD *)(a4 + v15[7]);
  *v18 = v11;
  v18[1] = v12;
  return outlined destroy of TypesettingConfiguration(v4, a3);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance FragmentRangeSequence()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for FragmentRangeSequence);
  return v1;
}

uint64_t type metadata accessor for Text.Effect.BaseContent(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.BaseContent);
}

uint64_t _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Chunk()
{
  return &type metadata for Text.Effect.Chunk;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.BaseContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    v13 = v12;
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v10, v11, v13);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  return v7;
}

uint64_t destroy for Text.Effect.BaseContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Text.Effect.BaseContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v11 = v10;
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v8, v9, v11);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.BaseContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t initializeWithTake for Text.Effect.BaseContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *assignWithTake for Text.Effect.BaseContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  swift_release();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.BaseContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23512AB54(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.BaseContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23512ABFC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for Text.Effect.BaseContent()
{
  unint64_t v0;

  type metadata accessor for FontBox<Font.SystemProvider>(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata completion function for Text.Effect.DrawableContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Effect.BaseContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.DrawableContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = v4;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(v4 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    v13 = v12;
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v10, v11, v13);
    *(uint64_t *)((char *)a1 + *(int *)(v7 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 28));
  }
  return a1;
}

uint64_t destroy for Text.Effect.DrawableContent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_release();
  v2 = a1 + *(int *)(type metadata accessor for Text.Effect.BaseContent(0) + 24);
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for Text.Effect.DrawableContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = type metadata accessor for Text.Effect.BaseContent(0);
  v6 = *(int *)(v5 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v10 = v9;
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v11(v7, v8, v10);
  *(_QWORD *)((char *)a1 + *(int *)(v5 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 28));
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.DrawableContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  v5 = *(int *)(v4 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 28));
  return a1;
}

uint64_t initializeWithTake for Text.Effect.DrawableContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  v5 = *(int *)(v4 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  *(_QWORD *)(a1 + *(int *)(v4 + 28)) = *(_QWORD *)(a2 + *(int *)(v4 + 28));
  return a1;
}

_QWORD *assignWithTake for Text.Effect.DrawableContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_release();
  v5 = type metadata accessor for Text.Effect.BaseContent(0);
  v6 = *(int *)(v5 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(v5 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DrawableContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Text.Effect.DrawableContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Text.Effect.DrawableContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.DrawableContent);
}

void base witness table accessor for Sequence in Text.Effect.DrawableContent<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>(a1, a2, a3, MEMORY[0x24BEE1BD8]);
}

void base witness table accessor for Collection in Text.Effect.DrawableContent<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>(a1, a2, a3, MEMORY[0x24BEE1BA8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.DrawableContent<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.BaseContent> and conformance IndexingIterator<A>, (uint64_t (*)(uint64_t))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>, MEMORY[0x24BEE2C18]);
}

uint64_t base witness table accessor for Sequence in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, type metadata accessor for Text.Effect.BaseContent, (uint64_t)&protocol conformance descriptor for Text.Effect.BaseContent);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Slice<Text.Effect.BaseContent> and conformance Slice<A>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<Text.Effect.BaseContent>, MEMORY[0x24BEE4238]);
}

uint64_t base witness table accessor for Collection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, type metadata accessor for Text.Effect.BaseContent, (uint64_t)&protocol conformance descriptor for Text.Effect.BaseContent);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, (uint64_t)&protocol conformance descriptor for Text.Effect.BaseContent, MEMORY[0x24BEE4218]);
}

uint64_t base witness table accessor for BidirectionalCollection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, type metadata accessor for Text.Effect.BaseContent, (uint64_t)&protocol conformance descriptor for Text.Effect.BaseContent);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, (uint64_t)&protocol conformance descriptor for Text.Effect.BaseContent, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<Text.Effect.BaseContent>();
    v10 = v9;
    v11 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a2, type metadata accessor for Text.Effect.BaseContent, a3);
    result = MEMORY[0x23B7C9C04](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

void base witness table accessor for BidirectionalCollection in Text.Effect.DrawableContent<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>(a1, a2, a3, MEMORY[0x24BEE1BD0]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[2];

  v7[0] = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  v7[1] = lazy protocol witness table accessor for type Int and conformance Int();
  return MEMORY[0x23B7C9C04](a4, a1, v7);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.DrawableContent<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], a1, &v3);
}

uint64_t type metadata accessor for ClusterIndexSequence.Iterator(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ClusterIndexSequence.Iterator);
}

uint64_t type metadata accessor for ClusterIndexSequence(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ClusterIndexSequence);
}

void type metadata accessor for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex));
  }
}

uint64_t type metadata accessor for FragmentRangeSequence.Iterator(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for FragmentRangeSequence.Iterator);
}

uint64_t type metadata accessor for FragmentRangeSequence(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for FragmentRangeSequence);
}

uint64_t getEnumTagSinglePayload for ClusterIndexSequence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ClusterIndexSequence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for ClusterIndexSequence.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ClusterIndexSequence.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for ClusterIndexSequence.Iterator(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = type metadata accessor for Text.Effect.BaseContent(0);
    v10 = *(int *)(v9 + 24);
    v11 = (char *)v7 + v10;
    v12 = (char *)a2 + v10;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    v14 = v13;
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v11, v12, v14);
    *(uint64_t *)((char *)v7 + *(int *)(v9 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 28));
    v16 = a3[6];
    *(_OWORD *)((char *)v7 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
    *(_OWORD *)((char *)v7 + v16) = *(_OWORD *)((char *)a2 + v16);
    *(_OWORD *)((char *)v7 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  }
  return v7;
}

_QWORD *initializeWithCopy for ClusterIndexSequence.Iterator(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = type metadata accessor for Text.Effect.BaseContent(0);
  v8 = *(int *)(v7 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v12 = v11;
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  v13(v9, v10, v12);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 28));
  v14 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithCopy for ClusterIndexSequence.Iterator(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = type metadata accessor for Text.Effect.BaseContent(0);
  v7 = *(int *)(v6 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(v6 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 28));
  v11 = a3[5];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  return a1;
}

uint64_t initializeWithTake for ClusterIndexSequence.Iterator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = type metadata accessor for Text.Effect.BaseContent(0);
  v7 = *(int *)(v6 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(v6 + 28)) = *(_QWORD *)(a2 + *(int *)(v6 + 28));
  v11 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for ClusterIndexSequence.Iterator(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  swift_release();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  v7 = type metadata accessor for Text.Effect.BaseContent(0);
  v8 = *(int *)(v7 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 28));
  v12 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for FragmentRangeSequence.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FragmentRangeSequence.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for ClusterIndexSequence.Iterator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Effect.BaseContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ClusterIndexSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = type metadata accessor for Text.Effect.BaseContent(0);
    v10 = *(int *)(v9 + 24);
    v11 = (char *)v7 + v10;
    v12 = (char *)a2 + v10;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    v14 = v13;
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v11, v12, v14);
    *(uint64_t *)((char *)v7 + *(int *)(v9 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 28));
    v16 = *(int *)(a3 + 24);
    *(_OWORD *)((char *)v7 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_OWORD *)((char *)v7 + v16) = *(_OWORD *)((char *)a2 + v16);
  }
  return v7;
}

_QWORD *initializeWithCopy for ClusterIndexSequence(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = type metadata accessor for Text.Effect.BaseContent(0);
  v8 = *(int *)(v7 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v12 = v11;
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  v13(v9, v10, v12);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 28));
  v14 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  return a1;
}

_QWORD *assignWithCopy for ClusterIndexSequence(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = type metadata accessor for Text.Effect.BaseContent(0);
  v7 = *(int *)(v6 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(v6 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 28));
  v11 = *(int *)(a3 + 20);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = *(int *)(a3 + 24);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t initializeWithTake for ClusterIndexSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = type metadata accessor for Text.Effect.BaseContent(0);
  v7 = *(int *)(v6 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(v6 + 28)) = *(_QWORD *)(a2 + *(int *)(v6 + 28));
  v11 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

_QWORD *assignWithTake for ClusterIndexSequence(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  swift_release();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  v7 = type metadata accessor for Text.Effect.BaseContent(0);
  v8 = *(int *)(v7 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 28));
  v12 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for FragmentRangeSequence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FragmentRangeSequence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for ClusterIndexSequence()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Effect.BaseContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.SubcomponentKeyPath()
{
  return &type metadata for Text.Effect.SubcomponentKeyPath;
}

ValueMetadata *type metadata accessor for Text.Effect.ChunkIndex()
{
  return &type metadata for Text.Effect.ChunkIndex;
}

ValueMetadata *type metadata accessor for Text.Effect.SubcomponentIndex()
{
  return &type metadata for Text.Effect.SubcomponentIndex;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.SubcomponentIndex, &type metadata for Text.Effect.SubcomponentIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.SubcomponentIndex, &type metadata for Text.Effect.SubcomponentIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ChunkIndex, &type metadata for Text.Effect.ChunkIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath;
  if (!lazy protocol witness table cache variable for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.SubcomponentKeyPath, &type metadata for Text.Effect.SubcomponentKeyPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in FragmentRangeSequence()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type FragmentRangeSequence.Iterator and conformance FragmentRangeSequence.Iterator, type metadata accessor for FragmentRangeSequence.Iterator, (uint64_t)&protocol conformance descriptor for FragmentRangeSequence.Iterator);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ClusterIndexSequence()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator, type metadata accessor for ClusterIndexSequence.Iterator, (uint64_t)&protocol conformance descriptor for ClusterIndexSequence.Iterator);
}

ValueMetadata *type metadata accessor for Text.Effect.ChunkCollection()
{
  return &type metadata for Text.Effect.ChunkCollection;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.ChunkCollection>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ChunkCollection, &type metadata for Text.Effect.ChunkCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ChunkCollection, &type metadata for Text.Effect.ChunkCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ChunkCollection, &type metadata for Text.Effect.ChunkCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ChunkCollection, &type metadata for Text.Effect.ChunkCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.ChunkCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.ChunkCollection>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection, (uint64_t)&type metadata for Text.Effect.ChunkCollection, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.ChunkCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection, (uint64_t)&type metadata for Text.Effect.ChunkCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection, MEMORY[0x24BEE4230]);
}

double static CGSize.- infix(_:_:)(double a1, double a2, double a3)
{
  return a1 - a3;
}

double static CGSize.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 + a2;
  v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

double static CGSize.- prefix(_:)(double a1)
{
  return -a1;
}

double static CGSize./ infix(_:_:)(double a1, double a2, double a3)
{
  return 1.0 / a3 * a1;
}

double static CGSize.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

double static CGSize.-= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 - a2;
  v4 = a1[1] - a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

float64x2_t static CGSize.*= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result;

  result = vmulq_n_f64(*a1, a2);
  *a1 = result;
  return result;
}

float64x2_t static CGSize./= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result;

  result = vmulq_n_f64(*a1, 1.0 / a2);
  *a1 = result;
  return result;
}

CGSize __swiftcall mix(_:_:by:)(CGSize _, CGSize a2, Swift::Double by)
{
  double v3;
  double v4;
  CGSize result;

  v3 = (a2.width - _.width) * by + _.width;
  v4 = (a2.height - _.height) * by + _.height;
  result.height = v4;
  result.width = v3;
  return result;
}

double CGSize.magnitude.getter(double a1, double a2)
{
  return sqrt(a1 * a1 + a2 * a2);
}

Swift::Void __swiftcall CGSize.normalize()()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v2 = *v0;
  v1 = v0[1];
  v3 = v2 * v2 + v1 * v1;
  if (v3 != 0.0)
  {
    v4 = 1.0 / sqrt(v3);
    *v0 = v2 * v4;
    v0[1] = v1 * v4;
  }
}

CGSize __swiftcall CGSize.normalized()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGSize result;

  v2 = v0 * v0 + v1 * v1;
  if (v2 != 0.0)
  {
    v3 = 1.0 / sqrt(v2);
    v0 = v3 * v0;
    v1 = v3 * v1;
  }
  result.height = v1;
  result.width = v0;
  return result;
}

uint64_t AnyArchivedViewDelegate.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnyArchivedViewDelegate.init()()
{
  uint64_t v0;

  return v0;
}

void AnyArchivedViewDelegate.resolveImage(uuid:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyArchivedViewDelegate.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyArchivedViewDelegate.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of ArchivedViewDelegate.resolveImage(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for AnyArchivedViewDelegate()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyArchivedViewDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyArchivedViewDelegate.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AnyArchivedViewDelegate.resolveImage(uuid:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t GesturePhase.paused()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, double);
  int EnumCaseMultiPayload;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v19;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v15(v8, v3, a1, v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (!EnumCaseMultiPayload)
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    return ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(a2, v3, a1);
  }
  else
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v17(v14, v8, v10);
    v17(a2, v14, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
    return swift_storeEnumTagMultiPayload();
  }
}

void Gesture.dependency(_:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v7 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = v7;
  v11 = type metadata accessor for DependentGesture(0, AssociatedTypeWitness, v9, v10);
  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DependentGesture<A>, v11);
  Gesture.modifier<A>(_:)((uint64_t)&v13, a2, v11, a3, v12, a4);
}

BOOL static GestureDependency.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GestureDependency.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int GestureDependency.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for DependentGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DependentGesture);
}

ValueMetadata *type metadata accessor for GestureDependency()
{
  return &type metadata for GestureDependency;
}

void sub_23512CAC0()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for DependentGesture(255, AssociatedTypeWitness, v1, v2);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DependentGesture<A>, v3);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_23512CB2C(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
}

uint64_t storeEnumTagSinglePayload for GestureDependency(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23512CB9C + 4 * byte_2352CD1E5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23512CBD0 + 4 * byte_2352CD1E0[v4]))();
}

uint64_t sub_23512CBD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23512CBD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23512CBE0);
  return result;
}

uint64_t sub_23512CBEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23512CBF4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23512CBF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23512CC00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GestureDependency.Key()
{
  return &type metadata for GestureDependency.Key;
}

void static DependentGesture._makeGesture(modifier:inputs:body:)(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int OffsetAttribute2;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  _QWORD v37[2];
  int v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[6];
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  v43[3] = *(_OWORD *)(a2 + 48);
  v43[4] = v9;
  v43[5] = v10;
  v11 = *(_OWORD *)(a2 + 16);
  v43[0] = *(_OWORD *)a2;
  v43[1] = v11;
  v43[2] = v8;
  v13 = *(_DWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 108);
  v44 = *(_QWORD *)(a2 + 96);
  v12 = v44;
  v45 = v13;
  v46 = v14;
  v47 = *(_QWORD *)(a2 + 116);
  v35 = v47;
  a3(v37, v43);
  *(_QWORD *)&v43[0] = __PAIR64__(v37[0], v7);
  DWORD2(v43[0]) = v35;
  v40 = type metadata accessor for GesturePhase(0, a4, v15, v16);
  v19 = type metadata accessor for DependentPhase(0, a4, v17, v18);
  v41 = v19;
  v42 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DependentPhase<A>, v19);
  v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v43, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v39, v19, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v21);
  v22 = v36;
  LODWORD(v37[0]) = v36;
  type metadata accessor for _AnyPreferenceKey<GestureDependency.Key>(0, v23, v24, v25);
  v27 = *(_QWORD *)(v12 + 16);
  if (v27)
  {
    v28 = v26;
    v29 = 32;
    while (*(_QWORD *)(v12 + v29) != v26)
    {
      v29 += 16;
      if (!--v27)
        goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    LOBYTE(v43[0]) = 0;
    PreferencesOutputs.subscript.setter(OffsetAttribute2, v28, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v31);
    swift_bridgeObjectRelease();
    v22 = v37[0];
  }
LABEL_7:
  v32 = HIDWORD(v37[0]);
  v33 = v37[1];
  v34 = v38;
  *(_DWORD *)a5 = v22;
  *(_DWORD *)(a5 + 4) = v32;
  *(_QWORD *)(a5 + 8) = v33;
  *(_DWORD *)(a5 + 16) = v34;
}

void protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance DependentGesture<A>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  static DependentGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

uint64_t DependentPhase.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 v14;

  v5 = type metadata accessor for GesturePhase(0, a3, a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - v7;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, Value, v5);
  type metadata accessor for DependentGesture(0, a3, v10, v11);
  v14 = *(_BYTE *)AGGraphGetValue();
  v13 = *(_QWORD *)AGGraphGetValue();
  GesturePhase.applyingDependency(_:inheritedPhase:)(&v14);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t GesturePhase.applyingDependency(_:inheritedPhase:)(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_23512CF40 + 4 * byte_2352CD1EA[*a1]))();
}

uint64_t sub_23512CF40@<X0>(uint64_t a1@<X2>, char *a2@<X8>)
{
  char v2;
  uint64_t v3;

  if ((v2 & 2) != 0)
    return GesturePhase.paused()(a1, a2);
  else
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v3);
}

uint64_t protocol witness for Rule.value.getter in conformance DependentPhase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return DependentPhase.value.getter(*(_QWORD *)v4, *(unsigned int *)(v4 + 8), *(_QWORD *)(a1 + 16), a4);
}

uint64_t specialized static GestureDependency.Key.reduce(value:nextValue:)(char *a1, void (*a2)(uint64_t *__return_ptr))
{
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  unsigned __int8 v14;
  uint64_t v15;

  v4 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static GestureDependency.Key.reduce(value:nextValue:));
  a2(&v15);
  if (!*(_QWORD *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = v15;
  v6 = *a1;
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(*a1);
  if ((v8 & 1) == 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_11;
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v7);
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v11 & 1) == 0)
    goto LABEL_11;
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v10);
  result = swift_bridgeObjectRelease();
  if (v12 >= v9)
    v14 = v5;
  else
    v14 = v6;
  *a1 = v14;
  return result;
}

uint64_t type metadata accessor for DependentPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DependentPhase);
}

void type metadata accessor for _AnyPreferenceKey<GestureDependency.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<GestureDependency.Key>)
  {
    v4 = type metadata accessor for _AnyPreferenceKey(0, (uint64_t)&type metadata for GestureDependency.Key, (uint64_t)&protocol witness table for GestureDependency.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureDependency.Key>);
  }
}

void base witness table accessor for _AttributeBody in DependentPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t ResponderNode.bindEvent(_:)()
{
  return 0;
}

uint64_t ResponderNode.visit(applying:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t ResponderNode.makeGesture(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;

  result = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
  v3 = *MEMORY[0x24BE096C0];
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

BOOL static ResponderVisitorResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ResponderNode.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t ResponderNode.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ResponderNode.isDescendant(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  swift_retain_n();
  if (v1 == a1)
  {
    swift_release_n();
    return 1;
  }
  else
  {
    while (1)
    {
      v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88);
      v4 = swift_retain();
      v5 = v3(v4);
      swift_retain();
      swift_release_n();
      if (!v5)
        break;
      swift_release();
      v1 = v5;
      if (v5 == a1)
      {
        swift_release();
        swift_release();
        return 1;
      }
    }
    swift_release();
    return 0;
  }
}

uint64_t ResponderNode.sequence.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = specialized implicit closure #1 in ResponderNode.sequence.getter;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = partial apply for specialized closure #1 in sequence<A>(first:next:);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = 0;
  return swift_retain();
}

uint64_t ResponderNode.__allocating_init()()
{
  return swift_allocObject();
}

void ResponderNode.nextResponder.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized implicit closure #1 in ResponderNode.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t ResponderNode.firstAncestor<A>(ofType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = specialized implicit closure #1 in ResponderNode.sequence.getter;
  *(_QWORD *)(v4 + 24) = 0;
  type metadata accessor for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>();
  lazy protocol witness table accessor for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>();
  Sequence.first<A>(ofType:)(a1, a2);
  return swift_release();
}

uint64_t ResponderNode.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void ResponderVisitorResult.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ResponderVisitorResult.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized _GestureInputs.intern<A>(_:id:)(uint64_t a1, char a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v4 = (id)AGSubgraphGetCurrent();
    if (!v4)
      goto LABEL_8;
    v5 = v4;
    v6 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    type metadata accessor for GesturePhase<()>(0, v7, v8, v9);
    v11 = specialized GraphHost.intern<A>(_:for:id:)(a1, v10, a2);
    swift_release();
    return v11;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v4 = (id)AGSubgraphGetCurrent();
    if (!v4)
      goto LABEL_8;
    v5 = v4;
    v6 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v7 = specialized GraphHost.intern<A>(_:for:id:)(a1, (Swift::UInt)&type metadata for GestureDebug.Data, a2);
    swift_release();
    return v7;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v4 = (id)AGSubgraphGetCurrent();
    if (!v4)
      goto LABEL_8;
    v5 = v4;
    v6 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v7 = specialized GraphHost.intern<A>(_:for:id:)(a1, (Swift::UInt)&type metadata for ViewTransform, a2);
    swift_release();
    return v7;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_23512D568()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in sequence<A>(first:next:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return specialized closure #1 in sequence<A>(first:next:)(a1, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 16), a2);
}

void type metadata accessor for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>)
  {
    type metadata accessor for ResponderNode();
    type metadata accessor for (ResponderNode?, Bool)();
    v0 = type metadata accessor for UnfoldSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>);
  }
}

uint64_t type metadata accessor for ResponderNode()
{
  return objc_opt_self();
}

void type metadata accessor for (ResponderNode?, Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ResponderNode?, Bool))
  {
    type metadata accessor for ResponderNode?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ResponderNode?, Bool));
  }
}

void type metadata accessor for ResponderNode?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ResponderNode?)
  {
    type metadata accessor for ResponderNode();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResponderNode?);
  }
}

unint64_t lazy protocol witness table accessor for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>;
  if (!lazy protocol witness table cache variable for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>)
  {
    type metadata accessor for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE28A0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResponderVisitorResult and conformance ResponderVisitorResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResponderVisitorResult and conformance ResponderVisitorResult;
  if (!lazy protocol witness table cache variable for type ResponderVisitorResult and conformance ResponderVisitorResult)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResponderVisitorResult, &type metadata for ResponderVisitorResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponderVisitorResult and conformance ResponderVisitorResult);
  }
  return result;
}

uint64_t method lookup function for ResponderNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ResponderNode.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of ResponderNode.nextResponder.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of ResponderNode.bindEvent(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ResponderNode.visit(applying:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ResponderNode.makeGesture(inputs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ResponderNode.resetGesture()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for ResponderVisitorResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23512D7F4 + 4 * byte_2352CD3B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23512D828 + 4 * byte_2352CD3B0[v4]))();
}

uint64_t sub_23512D828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23512D830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23512D838);
  return result;
}

uint64_t sub_23512D844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23512D84CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23512D850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23512D858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResponderVisitorResult()
{
  return &type metadata for ResponderVisitorResult;
}

uint64_t specialized _GestureInputs.intern<A>(_:id:)(char a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewOrigin, a1);
    swift_release();
    return v5;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, a1);
    swift_release();
    return v5;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _GestureInputs.intern<A>(_:id:)(uint64_t a1, uint64_t a2, char a3)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v6 = (id)AGSubgraphGetCurrent();
    if (!v6)
      goto LABEL_8;
    v7 = v6;
    v8 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v8 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v9 = specialized GraphHost.intern<A>(_:for:id:)(a1, a2, (Swift::UInt)&type metadata for EnvironmentValues, a3);
    swift_release();
    return v9;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for GesturePhase<()>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for GesturePhase<()>)
  {
    v4 = type metadata accessor for GesturePhase(0, MEMORY[0x24BEE4AE0] + 8, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>);
  }
}

uint64_t AnyTransition.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for TransitionBox(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 120) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 136), a1);
  return v5;
}

uint64_t type metadata accessor for TransitionBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransitionBox);
}

uint64_t AnyTransition.visitBase<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a1, a3, a4);
}

uint64_t AnyTransition.adjustedForAccessibility(prefersCrossFade:)(char a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(*(_QWORD *)a2 + 104))() & 1) != 0
    && (a1 & 1) != 0
    && one-time initialization token for opacity != -1)
  {
    swift_once();
  }
  return swift_retain();
}

uint64_t AnyTransition.base<A>(as:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for TransitionBox(0, a1, a2, a2);
  v5 = swift_dynamicCastClass();
  v6 = *(_QWORD *)(a1 - 8);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a3, v5 + *(_QWORD *)(*(_QWORD *)v5 + 136), a1);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, v7, 1, a1);
}

uint64_t AnyTransition.visitType<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a1, a3, a4);
}

uint64_t AnyTransition.isIdentity.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 96))() & 1;
}

void AnyTransitionBox.visitBase<A>(applying:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTransitionBox.visitType<A>(applying:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTransitionBox.isIdentity.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTransitionBox.hasMotion.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyTransitionBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyTransitionBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AnyTransition()
{
  return &type metadata for AnyTransition;
}

uint64_t dispatch thunk of TransitionVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of TransitionTypeVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t type metadata accessor for AnyTransitionBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyTransitionBox()
{
  return swift_lookUpClassMethod();
}

uint64_t TransitionBox.visitBase<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a3 + 8))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 136), *(_QWORD *)(*(_QWORD *)v3 + 120), *(_QWORD *)(*(_QWORD *)v3 + 128), a2, a3);
}

uint64_t TransitionBox.visitType<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a3 + 8))(*(_QWORD *)(*(_QWORD *)v3 + 120), *(_QWORD *)(*(_QWORD *)v3 + 120), *(_QWORD *)(*(_QWORD *)v3 + 128), a2, a3);
}

BOOL TransitionBox.isIdentity.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return AssociatedTypeWitness == type metadata accessor for PlaceholderContentView(0, v1, v3, v4);
}

uint64_t TransitionBox.hasMotion.getter()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*(_QWORD *)v0 + 128) + 32))(&v2);
  return v2;
}

uint64_t AnyTransition.transaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, void *, _UNKNOWN **);
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;

  v6[0] = a1;
  v6[1] = a2;
  v7 = 0;
  v3 = *(uint64_t (**)(_QWORD *, void *, _UNKNOWN **))(*(_QWORD *)a3 + 80);
  swift_retain();
  result = v3(v6, &unk_250615F90, &protocol witness table for AnyTransition.FilterVisitor);
  v5 = v7;
  if (v7)
  {
    swift_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AnyTransition.animation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, void *, _UNKNOWN **);
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v8[0] = partial apply for closure #1 in AnyTransition.animation(_:);
  v8[1] = v4;
  v9 = 0;
  v5 = *(uint64_t (**)(_QWORD *, void *, _UNKNOWN **))(*(_QWORD *)a2 + 80);
  swift_retain();
  swift_retain();
  result = v5(v8, &unk_250615F90, &protocol witness table for AnyTransition.FilterVisitor);
  v7 = v9;
  if (v9)
  {
    swift_release();
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23512E418()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AnyTransition.FilterVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = v4;
  v8 = type metadata accessor for FilteredTransition(0, a2, a3, a4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - v9;
  Transition.transaction(_:)(*v5, v5[1], a2, a3, (uint64_t)&v15 - v9);
  v11 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FilteredTransition<A>, v8);
  v13 = AnyTransition.init<A>(_:)((uint64_t)v10, v8, v11, v12);
  result = swift_release();
  v5[2] = v13;
  return result;
}

uint64_t Transition.transaction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v14, v5, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a3);
  v16 = (_QWORD *)(a5 + *(int *)(type metadata accessor for FilteredTransition(0, a3, a4, v15) + 36));
  *v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t Transition.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  Transition.transaction(_:)((uint64_t)partial apply for closure #1 in Transition.animation(_:), v8, a2, a3, a4);
  swift_retain();
  return swift_release();
}

uint64_t closure #1 in AnyTransition.animation(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, a3);
  swift_release_n();
  return swift_release();
}

uint64_t partial apply for closure #1 in Transition.animation(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in AnyTransition.animation(_:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t FilteredTransition.body(content:phase:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[4];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  v32 = a2;
  v35 = a4;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_QWORD *)(v11 + 24);
  v14 = type metadata accessor for ApplyTransitionModifier(0, v7, v12, v13);
  v33 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v31[-v15];
  v18 = type metadata accessor for _PushPopTransactionModifier(0, v14, (uint64_t)&protocol witness table for ApplyTransitionModifier<A>, v17);
  v34 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = &v31[-v20];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v8 + 16))(v10, v5, v7, v19);
  v22 = (uint64_t)v10;
  LOBYTE(v10) = v32;
  ApplyTransitionModifier.init(transition:phase:)(v22, v32, v7, v12, (uint64_t)v16);
  v23 = (uint64_t *)(v5 + *(int *)(a3 + 36));
  v25 = *v23;
  v24 = v23[1];
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = v24;
  *(_BYTE *)(v26 + 32) = (_BYTE)v10;
  ViewModifier.transaction(_:)((uint64_t)partial apply for closure #1 in FilteredTransition.body(content:phase:), v26, v14, (uint64_t)&protocol witness table for ApplyTransitionModifier<A>, (uint64_t)v21);
  swift_retain();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v16, v14);
  v29 = type metadata accessor for PlaceholderContentView(0, a3, v27, v28);
  View.modifier<A>(_:)(v21, v29, v18, &protocol witness table for PlaceholderContentView<A>);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v34 + 8))(v21, v18);
}

uint64_t sub_23512E8A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FilteredTransition.body(content:phase:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(a1, *(unsigned __int8 *)(v1 + 32));
}

uint64_t static FilteredTransition.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t FilteredTransition._makeContentTransition(transition:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 40))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t associated type witness table accessor for Transition.Body : View in FilteredTransition<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Transition.properties.getter in conformance FilteredTransition<A>(uint64_t a1)
{
  return static FilteredTransition.properties.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t getEnumTagSinglePayload for FilteredTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23512E9E0 + 4 * byte_2352CD540[v10]))();
  }
}

void storeEnumTagSinglePayload for FilteredTransition(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_23512EB58()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23512EBD0);
}

void sub_23512EB60(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23512EB68);
  JUMPOUT(0x23512EBD0);
}

void sub_23512EBA8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23512EBD0);
}

void sub_23512EBB0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23512EBD0);
}

uint64_t sub_23512EBB8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x23512EBD0);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x23512EBCCLL);
    JUMPOUT(0x23512EBC4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for FilteredTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilteredTransition);
}

void sub_23512EBF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FilteredTransition(255, *a1, a1[1], a4);
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_23512EC1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for FilteredTransition(255, *a1, v5, a4);
  v9 = type metadata accessor for PlaceholderContentView(255, v6, v7, v8);
  v11 = type metadata accessor for ApplyTransitionModifier(255, v4, v5, v10);
  v13 = type metadata accessor for _PushPopTransactionModifier(255, v11, (uint64_t)&protocol witness table for ApplyTransitionModifier<A>, v12);
  v15 = type metadata accessor for ModifiedContent(255, v9, v13, v14);
  v17[0] = &protocol witness table for PlaceholderContentView<A>;
  v17[1] = &protocol witness table for _PushPopTransactionModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v15, v17);
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyTransition.FilterVisitor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AnyTransition.FilterVisitor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnyTransition.FilterVisitor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for AnyTransition.FilterVisitor()
{
  return &unk_250615F90;
}

uint64_t ProtobufEncoder.archiveOptions.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t result;
  char v12;
  char v13;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;

  v3 = type metadata accessor for CodingUserInfoKey();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(_QWORD *)(v1 + 32);
  if (one-time initialization token for archiveOptionsKey != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v3, (uint64_t)static ArchivedViewCore.archiveOptionsKey);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  if (*(_QWORD *)(v7 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v10 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v9, (uint64_t)&v15);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((_QWORD *)&v16 + 1))
  {
    result = outlined destroy of Any?((uint64_t)&v15);
    goto LABEL_11;
  }
  result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
LABEL_11:
    v12 = 0;
    v13 = 2;
    goto LABEL_12;
  }
  v12 = v14[14];
  v13 = v14[15];
LABEL_12:
  *a1 = v12;
  a1[1] = v13;
  return result;
}

double ProtobufEncoder.archiveHost.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  double result;
  __int128 v12;
  __int128 v13;

  v3 = type metadata accessor for CodingUserInfoKey();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 32);
  if (one-time initialization token for archivedViewHostKey != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v3, (uint64_t)static ArchivedViewCore.archivedViewHostKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  if (*(_QWORD *)(v7 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v10 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v9, (uint64_t)&v12);
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((_QWORD *)&v13 + 1))
  {
    outlined destroy of Any?((uint64_t)&v12);
    goto LABEL_11;
  }
  type metadata accessor for AnyArchivedViewHost();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t ProtobufEncoder.rbEncoderSet.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;

  v1 = type metadata accessor for CodingUserInfoKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 32);
  if (one-time initialization token for rbEncoderSetKey != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.rbEncoderSetKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(_QWORD *)(v5 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((_QWORD *)&v12 + 1))
  {
    type metadata accessor for RBEncoderSet();
    if (swift_dynamicCast())
      return v10[1];
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
    return 0;
  }
}

uint64_t _ArchivedViewHostDelegate.failedToEncodeView(type:)()
{
  return _ArchivedViewHostDelegate.failedToEncodeView(type:)();
}

{
  Swift::String v0;

  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  specialized static Log.externalWarning(_:)(0xD000000000000022, 0x80000002352E8460);
  return swift_bridgeObjectRelease();
}

CGImageRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _ArchivedViewHostDelegate.filteredImage(_:)(CGImageRef a1)
{
  uint64_t v1;
  CGImage *v2;
  CGImage *v3;
  CGImage *v4;

  v2 = (CGImage *)_ViewInputs.base.modify(a1);
  v3 = v2;
  if (!v1)
    v4 = v2;
  return v3;
}

{
  uint64_t v1;
  CGImage *v2;
  CGImage *v3;
  CGImage *v4;

  v2 = (CGImage *)_ViewInputs.base.modify(a1);
  v3 = v2;
  if (!v1)
    v4 = v2;
  return v3;
}

uint64_t _ArchivedViewHostDelegate.preferredImageType(for:)@<X0>(uint64_t a1@<X8>)
{
  return _ArchivedViewHostDelegate.preferredImageType(for:)(a1);
}

{
  uint64_t v2;

  v2 = type metadata accessor for UTType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t ArchivedViewStateProxy.init(writer:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ArchivedViewStateProxy.addAttachment(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  CC_LONG h4;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  CC_SHA1_CTX v12;
  SwiftUI::StrongHasher into;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = *v2;
  memset(&v12, 0, sizeof(v12));
  outlined copy of Data._Representation(a1, a2);
  CC_SHA1_Init(&v12);
  into.state = v12;
  Data.hash(into:)(&into);
  memset(&v12, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&v12, &into.state);
  outlined consume of Data._Representation(a1, a2);
  h4 = v12.h4;
  v7 = *(_OWORD *)&v12.h0;
  swift_beginAccess();
  v8 = specialized Collection<>.firstIndex(of:)(v7, *((uint64_t *)&v7 + 1), h4, *(_QWORD *)(v5 + 32));
  if ((v9 & 1) == 0)
    return v8;
  *(_OWORD *)&v12.h0 = v7;
  v12.h4 = h4;
  LOBYTE(v12.Nl) = 0;
  outlined copy of Data._Representation(a1, a2);
  v10 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&v12, v5, a1, a2);
  outlined consume of Data._Representation(a1, a2);
  return v10;
}

uint64_t ArchivedViewStateProxy.addAttachment(encoder:)(void (*a1)(void), unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6[2];
  int v7;
  char v8;

  v4 = *v2;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v8 = 1;
  return specialized ArchiveWriter.addAttachment(hash:from:)(v6, v4, a1, a2);
}

uint64_t _DisplayList_StableIdentityMap.addIDs(from:root:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  __int16 v4;
  char v5;
  uint64_t v7;
  __int16 v8;
  char v9;

  v4 = *(_WORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 10);
  v7 = *(_QWORD *)a1;
  v8 = v4;
  v9 = v5;
  swift_retain();
  specialized DisplayList.forEachIdentity(_:)(&v7, a2, v2);
  return swift_release();
}

uint64_t closure #1 in _DisplayList_StableIdentityMap.addIDs(from:root:)(Swift::UInt32 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::UInt32 v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;

  v5 = *a1;
  LODWORD(v22._countAndFlagsBits) = *a1;
  _DisplayList_StableIdentityRoot.subscript.getter((Swift::UInt32 *)&v22, (uint64_t)&v23);
  if ((v26 & 1) != 0)
  {
    type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_23527E860;
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v7._object = (void *)0x80000002352E8490;
    v7._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v7);
    v22._countAndFlagsBits = 35;
    v22._object = (void *)0xE100000000000000;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 2108704;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 58;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v22._countAndFlagsBits = 84;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0xD00000000000001CLL;
    v14._object = (void *)0x80000002352E0BF0;
    String.append(_:)(v14);
    v15 = v23;
    v16 = v24;
    *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v6 + 32) = v15;
    *(_QWORD *)(v6 + 40) = v16;
    print(_:separator:terminator:)();
  }
  else
  {
    v19 = v24;
    v18 = v25;
    v20 = v23;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *a4;
    *a4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, v19, v18, v5, isUniquelyReferenced_nonNull_native);
    *a4 = v23;
  }
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of _ArchivedViewHostDelegate.viewDataNeedsUpdate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _ArchivedViewHostDelegate.failedToEncodeView(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _ArchivedViewHostDelegate.filteredImage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ArchivedViewHostStates.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ArchivedViewHostStates.updateState(at:proxy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ArchivedViewHostStates.auxiliaryData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for ArchivedViewStateProxy()
{
  return &type metadata for ArchivedViewStateProxy;
}

uint64_t dispatch thunk of AnyArchivedViewHost.failedToEncodeView(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AnyArchivedViewHost.filteredImage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of AnyArchivedViewHost.allowedImageTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyArchivedViewHost.imageType(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

void type metadata accessor for _ContiguousArrayStorage<Any>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE4AD8] + 8);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t type metadata accessor for RBEncoderSet()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RBEncoderSet;
  if (!lazy cache variable for type metadata for RBEncoderSet)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBEncoderSet);
  }
  return result;
}

uint64_t AnyTransition.combined(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t *, void *, _UNKNOWN **);
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1;
  v6 = 0;
  v2 = *(uint64_t (**)(uint64_t *, void *, _UNKNOWN **))(*(_QWORD *)a2 + 80);
  swift_retain();
  result = v2(&v5, &unk_250615F00, &protocol witness table for AnyTransition.FirstVisitor);
  v4 = v6;
  if (v6)
  {
    swift_release();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AnyTransition.FirstVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t result;
  uint64_t v19;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AnyTransition.SecondVisitor(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, a2, v13);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v7, a2);
  *(_QWORD *)&v15[*(int *)(v11 + 36)] = 0;
  AnyTransition.visitBase<A>(applying:)((uint64_t)v15, *v2, v11, (uint64_t)&protocol witness table for AnyTransition.SecondVisitor<A>);
  v16 = *(_QWORD *)&v15[*(int *)(v11 + 36)];
  v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v17(v15, v11);
  result = swift_release();
  v2[1] = v16;
  return result;
}

void AnyTransition.SecondVisitor.visit<A>(_:)()
{
  type metadata accessor for CombiningTransition();
}

void sub_23512FA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  Transition.combined<A>(with:)(v11, v12, v10, v13, v9, (uint64_t)&a9 - v14);
}

uint64_t sub_23512FA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombiningTransition<A, B>, v2);
  v6 = AnyTransition.init<A>(_:)(v3, v2, v4, v5);
  v7 = *(int *)(v1 + 36);
  result = swift_release();
  *(_QWORD *)(v0 + v7) = v6;
  return result;
}

void Transition.combined<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for CombiningTransition();
}

uint64_t sub_23512FBD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void protocol witness for TransitionVisitor.visit<A>(_:) in conformance AnyTransition.SecondVisitor<A>()
{
  AnyTransition.SecondVisitor.visit<A>(_:)();
}

void sub_23512FC20()
{
  type metadata accessor for CombiningTransition();
}

uint64_t sub_23512FC40(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombiningTransition<A, B>, a1);
}

void type metadata accessor for CombiningTransition()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t getEnumTagSinglePayload for CombiningTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23512FD44 + 4 * byte_2352CD640[v17 - 1]))();
}

void storeEnumTagSinglePayload for CombiningTransition(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void *type metadata accessor for AnyTransition.FirstVisitor()
{
  return &unk_250615F00;
}

uint64_t associated type witness table accessor for Transition.Body : View in CombiningTransition<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CombiningTransition.body(content:phase:)@<X0>(char a1@<W1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];

  v21[1] = a4;
  v6 = type metadata accessor for PlaceholderContentView(255, (uint64_t)a2, (uint64_t)a2, a3);
  v7 = a2[2];
  v8 = a2[4];
  v10 = type metadata accessor for ApplyTransitionModifier(255, v7, v8, v9);
  v12 = type metadata accessor for ModifiedContent(0, v6, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v21 - v14;
  Transition.apply<A>(content:phase:)(v16, a1, v7, v6, v8, (uint64_t)&protocol witness table for PlaceholderContentView<A>);
  v17 = a2[3];
  v18 = a2[5];
  v22[0] = &protocol witness table for PlaceholderContentView<A>;
  v22[1] = &protocol witness table for ApplyTransitionModifier<A>;
  v19 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v12, v22);
  Transition.apply<A>(content:phase:)((uint64_t)v15, a1, v17, v12, v18, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

_QWORD *static CombiningTransition.properties.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  char v7;
  _QWORD *result;
  uint64_t v9;

  (*(void (**)(char *__return_ptr))(a2 + 32))((char *)&v9 + 1);
  v7 = BYTE1(v9);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v9, a1, a3);
  *a4 = (v7 | v9) & 1;
  return result;
}

uint64_t CombiningTransition._makeContentTransition(transition:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  _BOOL8 v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v5 = *(a2 - 1);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v6;
  if (v9 == 3)
  {
    v10 = Transition.hasContentTransition.getter(a2[2], a2[4]);
    (*(void (**)(char *, uint64_t, uint64_t *))(v5 + 16))(v8, v2, a2);
    v11 = v10 || Transition.hasContentTransition.getter(a2[3], a2[5]);
    (*(void (**)(char *, uint64_t *))(v5 + 8))(v8, a2);
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v13 = *(double *)(a1 + 8);
    v12 = *(double *)(a1 + 16);
    HIBYTE(v17) = *v6;
    v18 = Transition.contentTransitionEffects(style:size:)((unsigned __int8 *)&v17 + 7, v13, v12, a2[2], a2[4]);
    BYTE6(v17) = v9;
    v14 = Transition.contentTransitionEffects(style:size:)((unsigned __int8 *)&v17 + 6, v13, v12, a2[3], a2[5]);
    specialized Array.append<A>(contentsOf:)(v14);
    v15 = v18;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = v15;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

_QWORD *protocol witness for static Transition.properties.getter in conformance CombiningTransition<A, B>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return static CombiningTransition.properties.getter(a1[3], a1[4], a1[5], a2);
}

uint64_t type metadata accessor for AnyTransition.SecondVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyTransition.SecondVisitor);
}

uint64_t type metadata completion function for AnyTransition.SecondVisitor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnyTransition.SecondVisitor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23513041C + 4 * byte_2352CD64E[v10]))();
  }
}

void storeEnumTagSinglePayload for AnyTransition.SecondVisitor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_23513059C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x235130620);
}

void sub_2351305A4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2351305ACLL);
  JUMPOUT(0x235130620);
}

void sub_2351305F4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x235130620);
}

void sub_2351305FC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x235130620);
}

uint64_t sub_235130604(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x235130610);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x235130620);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void sub_235130638()
{
  type metadata accessor for CombiningTransition();
}

uint64_t sub_23513066C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[14];

  v8 = type metadata accessor for PlaceholderContentView(255, a1, a3, a4);
  v10 = type metadata accessor for ApplyTransitionModifier(255, v4, v6, v9);
  v12 = type metadata accessor for ModifiedContent(255, v8, v10, v11);
  v14 = type metadata accessor for ApplyTransitionModifier(255, v5, v7, v13);
  v16 = type metadata accessor for ModifiedContent(255, v12, v14, v15);
  v19[0] = &protocol witness table for PlaceholderContentView<A>;
  v19[1] = &protocol witness table for ApplyTransitionModifier<A>;
  v18[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v12, v19);
  v18[1] = &protocol witness table for ApplyTransitionModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v16, v18);
}

id ContentTransition.rbTransition.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unsigned int *v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  double v20;
  double v21;
  _QWORD *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  id v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  os_unfair_lock_s *v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  unsigned int v40;
  id v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
  v3 = *(unsigned __int8 *)(v0 + 14);
  if (!*(_BYTE *)(v0 + 13))
  {
    if (one-time initialization token for _namedTransitions != -1)
      swift_once();
    v22 = static ContentTransition._namedTransitions;
    v23 = (os_unfair_lock_s *)((char *)static ContentTransition._namedTransitions + 16);
    swift_retain();
    os_unfair_lock_lock(v23);
    v24 = v22[3];
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v23);
    swift_release();
    if (*(_QWORD *)(v24 + 16))
    {
      if ((_DWORD)v3)
        v25 = 0x10000000000;
      else
        v25 = 0;
      v26 = v25 & 0xFFFFFF0000000000 | v2 & 0xFFFFFFFFFFLL;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v26);
      if ((v28 & 1) != 0)
      {
        v29 = *(id *)(*(_QWORD *)(v24 + 56) + 8 * v27);
        swift_bridgeObjectRelease();
        return v29;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      if ((_DWORD)v3)
        v34 = 0x10000000000;
      else
        v34 = 0;
      v26 = v34 & 0xFFFFFF0000000000 | v2 & 0xFFFFFFFFFFLL;
    }
    v35 = ContentTransition.NamedTransition.makeRBTransition()();
    objc_msgSend(v35, sel_setReplaceable_, v3);
    v36 = v1;
    v37 = (os_unfair_lock_s *)static ContentTransition._namedTransitions;
    v5 = v35;
    swift_retain();
    os_unfair_lock_lock(v37 + 4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43 = *(_QWORD *)&v37[6]._os_unfair_lock_opaque;
    *(_QWORD *)&v37[6]._os_unfair_lock_opaque = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v5, v36, v26, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)&v37[6]._os_unfair_lock_opaque = v43;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v37 + 4);
    swift_release();
    return v5;
  }
  if (*(_BYTE *)(v0 + 13) != 1)
  {
    v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
    objc_msgSend(v31, sel_setType_, 18);
    if (BYTE4(v1) & 1 | ((v1 & 0x10) >> 4))
      v32 = v1;
    else
      v32 = v1 | 0x10;
    objc_msgSend(v31, sel_setIntegerArgumentValue_atIndex_, v32, 0);
    LODWORD(v33) = 1.0;
    objc_msgSend(v31, sel_setArgumentValue_atIndex_, 1, v33);
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF58]), sel_init);
    objc_msgSend(v5, sel_setMethod_, 6);
    objc_msgSend(v5, sel_addEffect_, v31);

    return v5;
  }
  v40 = *(unsigned __int8 *)(v0 + 14);
  v4 = objc_allocWithZone(MEMORY[0x24BE7EF58]);
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_init);
  objc_msgSend(v5, sel_setMethod_, v2);
  v6 = *(_QWORD *)(v1 + 16);
  if (!v6)
    goto LABEL_33;
  swift_bridgeObjectRetain();
  v39 = v1;
  v7 = (unsigned int *)(v1 + 64);
  v41 = v5;
  v42 = v2;
  do
  {
    v9 = *(v7 - 8);
    if ((v2 & 0x100000000) != 0)
    {
      v10 = v9 - 7;
      if ((v9 - 7) <= 5 && ((0x33u >> v10) & 1) != 0)
        v9 = dword_2352CE54C[v10];
    }
    v11 = *(v7 - 7);
    v12 = *((unsigned __int8 *)v7 - 24);
    v13 = *(v7 - 5);
    v14 = *((unsigned __int8 *)v7 - 16);
    v16 = *(v7 - 3);
    v15 = *(v7 - 2);
    v18 = *(v7 - 1);
    v17 = *v7;
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
    objc_msgSend(v19, sel_setType_, v9);
    if (v12)
    {
      if (v12 == 1)
        objc_msgSend(v19, sel_setIntegerArgumentValue_atIndex_, v11, 0);
      if (!v14)
      {
LABEL_17:
        LODWORD(v20) = v13;
        objc_msgSend(v19, sel_setArgumentValue_atIndex_, 1, v20, v39);
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v20) = v11;
      objc_msgSend(v19, sel_setArgumentValue_atIndex_, 0, v20);
      if (!v14)
        goto LABEL_17;
    }
    if (v14 == 1)
      objc_msgSend(v19, sel_setIntegerArgumentValue_atIndex_, v13, 1);
LABEL_18:
    objc_msgSend(v19, sel_setEvents_, v18, v39);
    if ((_DWORD)v17)
      objc_msgSend(v19, sel_setFlags_, v17);
    v7 += 9;
    LODWORD(v21) = v16;
    objc_msgSend(v19, sel_setBeginTime_, v21);
    LODWORD(v8) = v15;
    objc_msgSend(v19, sel_setDuration_, v8);
    v5 = v41;
    objc_msgSend(v41, sel_addEffect_, v19);

    --v6;
    v2 = v42;
  }
  while (v6);
  v1 = v39;
  outlined consume of ContentTransition.Storage(v39, v42, 1);
LABEL_33:
  outlined consume of ContentTransition.Storage(v1, v2, 1);
  objc_msgSend(v5, sel_setReplaceable_, v40);
  return v5;
}

unint64_t ContentTransition.numericValue.getter()
{
  uint64_t v0;
  BOOL v1;
  int v2;
  uint64_t v3;

  if (*(_BYTE *)(v0 + 13))
    v1 = 0;
  else
    v1 = (*(_QWORD *)v0 & 0xC000000000) == 0x4000000000;
  v2 = !v1;
  if ((*(_QWORD *)v0 & 0x100000000) == 0)
    v2 = 1;
  v3 = *(_QWORD *)v0;
  if (v2)
    v3 = 0;
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t static ContentTransitionEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

uint64_t ContentTransition.NamedTransition.init(name:layoutDirection:style:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4;
  char v5;
  char v6;
  char v7;

  v4 = *(_WORD *)(result + 8);
  v5 = *(_BYTE *)(result + 10);
  v6 = *a2;
  v7 = *a3;
  *(_QWORD *)a4 = *(_QWORD *)result;
  *(_BYTE *)(a4 + 10) = v5;
  *(_WORD *)(a4 + 8) = v4;
  *(_BYTE *)(a4 + 11) = v6;
  *(_BYTE *)(a4 + 12) = v7;
  return result;
}

float static ContentTransition.EffectType.translation(_:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return static ContentTransition.EffectType.translation(_:)(3, a1, a2, a3);
}

uint64_t ContentTransition.Effect.init(_:timeline:appliesOnInsertion:appliesOnRemoval:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char v6;
  int v7;
  char v8;
  float v9;
  int v10;

  v6 = *(_BYTE *)(result + 8);
  v7 = *(_DWORD *)(result + 12);
  v8 = *(_BYTE *)(result + 16);
  v9 = a6 - a5;
  *(_QWORD *)a4 = *(_QWORD *)result;
  *(_BYTE *)(a4 + 8) = v6;
  if ((a3 & 1) != 0)
    v10 = a2 & 1 | 2;
  else
    v10 = a2 & 1;
  *(_DWORD *)(a4 + 12) = v7;
  *(_BYTE *)(a4 + 16) = v8;
  *(float *)(a4 + 20) = a5;
  *(float *)(a4 + 24) = v9;
  *(_DWORD *)(a4 + 28) = v10;
  *(_DWORD *)(a4 + 32) = 0;
  return result;
}

uint64_t specialized FixedWidthInteger.init<A>(clamping:)(float a1)
{
  uint64_t result;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  _QWORD v6[2];

  if (a1 < 0.0)
    a1 = 0.0;
  if (a1 > 255.0)
    a1 = 255.0;
  specialized static FixedWidthInteger._convert<A>(from:)(v6, a1);
  if ((v6[0] & 0x100) == 0)
    return LOBYTE(v6[0]);
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v2._countAndFlagsBits = 0x74616F6C46;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  v3._object = (void *)0x80000002352E84B0;
  v3._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x38746E4955;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0xD00000000000002ELL;
  v5._object = (void *)0x80000002352E84D0;
  String.append(_:)(v5);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  float v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  _QWORD v7[2];

  v1 = fmaxf(a1, -128.0);
  if (v1 > 127.0)
    v1 = 127.0;
  specialized static FixedWidthInteger._convert<A>(from:)(v7, v1);
  if ((v7[0] & 0x100) == 0)
    return LOBYTE(v7[0]);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v3._countAndFlagsBits = 0x74616F6C46;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  v4._object = (void *)0x80000002352E84B0;
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 947154505;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD00000000000002ELL;
  v6._object = (void *)0x80000002352E84D0;
  String.append(_:)(v6);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double static ContentTransition.EffectType.opacity.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t, __int128 *);
  _QWORD *v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28;
  uint64_t KeyPath;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  const float *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  Swift::UInt32 v47;
  char v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  unsigned __int8 v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int OffsetAttribute2;
  uint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  unsigned int v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t result;
  void (*v96)(__int128 *, _QWORD);
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int16 v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  Swift::UInt32 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  unsigned __int8 v132;
  unsigned int v133;
  unsigned __int8 v134;
  unsigned int v135;
  unsigned __int8 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _BYTE v141[20];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v4 = a3;
  v6 = a4;
  v145 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 32);
  v143 = *(_OWORD *)(a2 + 16);
  v144 = v8;
  v142 = *(_OWORD *)a2;
  v9 = *(_QWORD *)a2;
  v118 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v124 = *(_DWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v121 = *(_DWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 76);
  v115 = v7;
  v104 = WORD2(v8);
  if ((BYTE4(v8) & 0x20) == 0)
  {
    v15 = *(float32x2_t *)(a2 + 64);
    v16 = *(_DWORD *)(a2 + 60);
    v17 = v144;
    outlined retain of _ViewInputs(a2);
    v18 = v7;
    goto LABEL_16;
  }
  v112 = *(_QWORD *)(a2 + 48);
  v113 = *(_QWORD *)(a2 + 40);
  v114 = *(_QWORD *)a2;
  v100 = *(_DWORD *)(a2 + 32);
  v19 = v143;
  swift_beginAccess();
  v109 = *(_QWORD *)a2;
  v20 = *(_DWORD *)(a2 + 8);
  v106 = *(_QWORD *)(a2 + 16);
  v21 = *(_DWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_QWORD *)(a2 + 56);
  v98 = *(_QWORD *)(a2 + 72);
  v99 = *(_QWORD *)(a2 + 64);
  v97 = *(_DWORD *)(a2 + 80);
  v26 = *(_OWORD *)(a2 + 48);
  v139 = *(_OWORD *)(a2 + 32);
  v140 = v26;
  *(_OWORD *)v141 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v141[16] = *(_DWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 16);
  v137 = *(_OWORD *)a2;
  v138 = v27;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v28 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v30 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v143 + 81) & 1) != 0
    || (_DWORD)v99 != *(_DWORD *)(v143 + 32)
    || (_DWORD)v98 != *(_DWORD *)(v143 + 36)
    || v30 != *(_DWORD *)(v143 + 40)
    || v20 != *(_DWORD *)(v143 + 44)
    || v28 != *(_DWORD *)(v143 + 48)
    || v21 != *(_DWORD *)(v143 + 52))
  {
    *(_QWORD *)&v137 = v109;
    DWORD2(v137) = v20;
    *(_QWORD *)&v138 = v106;
    *((_QWORD *)&v138 + 1) = __PAIR64__(v28, v21);
    *(_QWORD *)&v139 = v22;
    *((_QWORD *)&v139 + 1) = v23;
    *(_QWORD *)&v140 = v24;
    *((_QWORD *)&v140 + 1) = v25;
    *(_QWORD *)v141 = v99;
    *(_QWORD *)&v141[8] = v98;
    *(_DWORD *)&v141[16] = v97;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v137, v30, (uint64_t)&v130);
    v32 = v131;
    v33 = v132;
    v34 = v136;
    v35 = v132 | ((unint64_t)v133 << 32);
    v36 = v134 | ((unint64_t)v135 << 32);
    *(_OWORD *)(v19 + 32) = v130;
    *(_OWORD *)(v19 + 48) = v32;
    *(_QWORD *)(v19 + 64) = v35;
    *(_QWORD *)(v19 + 72) = v36;
    *(_WORD *)(v19 + 80) = v34;
    if (v33 != 1)
    {
      v31 = HIDWORD(*((_QWORD *)&v32 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v143 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v31) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 60) = v31;
    *(_BYTE *)(v19 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v31) = *(_DWORD *)(v143 + 60);
LABEL_15:
  v4 = a3;
  v6 = a4;
  v9 = v114;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  *(_QWORD *)&v137 = __PAIR64__(*(_DWORD *)(a2 + 60), v31);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  v16 = Attribute.init<A>(body:value:flags:update:)();
  v37 = (const float *)(specialized static ViewGraph.current.getter() + 248);
  v15 = vld1_dup_f32(v37);
  swift_release();
  v38 = *(_DWORD *)(a2 + 64);
  v39 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v142);
  v40 = specialized CachedEnvironment.attribute<A>(keyPath:)(v39);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v142);
  swift_release();
  *(_QWORD *)&v137 = __PAIR64__(v115, v38);
  DWORD2(v137) = v40;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  v18 = Attribute.init<A>(body:value:flags:update:)();
  v17 = v100 | 0x1C;
  v13 = v112;
  v12 = v113;
LABEL_16:
  *(_QWORD *)&v137 = v9;
  DWORD2(v137) = v118;
  *(_QWORD *)&v138 = v10;
  *((_QWORD *)&v138 + 1) = v11;
  *(_QWORD *)&v139 = __PAIR64__(v124, v17);
  *((_QWORD *)&v139 + 1) = v12;
  *(_QWORD *)&v140 = v13;
  *((_QWORD *)&v140 + 1) = __PAIR64__(v16, v121);
  *(float32x2_t *)v141 = v15;
  *(_DWORD *)&v141[8] = v18;
  *(_QWORD *)&v141[12] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v41 = swift_bridgeObjectRetain();
  v4(&v128, v41, &v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v42 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v44 = *(_QWORD *)(v42 + 16);
  if (!v44)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v6 = v128;
    v6[1] = v129;
    return result;
  }
  v45 = v43;
  v46 = (_QWORD *)(v42 + 32);
  while (*v46 != v43)
  {
    v46 += 2;
    if (!--v44)
      goto LABEL_57;
  }
  v47 = ++lastIdentity;
  v48 = v104;
  if ((v104 & 0x100) == 0)
  {
LABEL_22:
    v49 = v143;
    v50 = (unsigned int *)(v143 + 16);
    swift_beginAccess();
    v127 = v47;
    if ((v48 & 0x20) == 0)
    {
      LODWORD(v125) = *(_DWORD *)(a2 + 64);
LABEL_47:
      swift_endAccess();
      v82 = *v50;
      *(_QWORD *)&v137 = v128;
      DWORD2(v137) = v129;
      v83 = PreferencesOutputs.subscript.getter(v45);
      if ((v83 & 0x100000000) != 0)
        v84 = *MEMORY[0x24BE096C0];
      else
        v84 = v83;
      v85 = v142;
      *(_QWORD *)&v130 = v142;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v142);
      outlined retain of ViewTransform((uint64_t)&v130);
      v86 = specialized find<A>(_:key:)(v85);
      if (v86)
        v87 = *(_BYTE *)(v86 + 72);
      else
        v87 = 0;
      outlined release of ViewTransform((uint64_t)&v130);
      outlined release of _GraphInputs((uint64_t)&v142);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v142);
      outlined retain of ViewTransform((uint64_t)&v130);
      v88 = specialized find<A>(_:key:)(v85);
      if (v88)
        v89 = *(_DWORD *)(v88 + 72);
      else
        v89 = 0;
      v90 = *(_DWORD *)(a2 + 60);
      v91 = *(_DWORD *)(a2 + 68);
      v92 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v130);
      outlined release of _GraphInputs((uint64_t)&v142);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v137 = __PAIR64__(a1, v127);
      *((_QWORD *)&v137 + 1) = __PAIR64__(v115, v125);
      *(_QWORD *)&v138 = __PAIR64__(v91, v90);
      *((_QWORD *)&v138 + 1) = __PAIR64__(v92, v82);
      LODWORD(v139) = v84;
      BYTE4(v139) = v87;
      DWORD2(v139) = 0;
      HIDWORD(v139) = v89;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<_GeometryGroupEffect> and conformance RendererEffectDisplayList<A>, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect);
      v93 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v137) = 0;
      PreferencesOutputs.subscript.setter(v93, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v94);
      goto LABEL_57;
    }
    v51 = *(_QWORD *)a2;
    v52 = *(_DWORD *)(a2 + 8);
    v53 = *(_DWORD *)(a2 + 24);
    v54 = *(_QWORD *)(a2 + 32);
    v119 = *(_QWORD *)(a2 + 40);
    v122 = *(_QWORD *)(a2 + 16);
    v116 = *(_QWORD *)(a2 + 48);
    v55 = *(_QWORD *)(a2 + 56);
    v126 = *(_QWORD *)(a2 + 64);
    v110 = *(_QWORD *)(a2 + 72);
    v107 = *(_DWORD *)(a2 + 80);
    v56 = *(_OWORD *)(a2 + 48);
    v139 = *(_OWORD *)(a2 + 32);
    v140 = v56;
    *(_OWORD *)v141 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v141[16] = *(_DWORD *)(a2 + 80);
    v57 = *(_OWORD *)(a2 + 16);
    v137 = *(_OWORD *)a2;
    v138 = v57;
    outlined retain of _ViewInputs(a2);
    v58 = _ViewInputs.geometryTransaction()();
    v59 = swift_getKeyPath();
    v60 = specialized CachedEnvironment.attribute<A>(keyPath:)(v59);
    swift_release();
    if ((*(_BYTE *)(v49 + 81) & 1) == 0
      && (_DWORD)v126 == *(_DWORD *)(v49 + 32)
      && (_DWORD)v110 == *(_DWORD *)(v49 + 36)
      && v60 == *(_DWORD *)(v49 + 40)
      && v52 == *(_DWORD *)(v49 + 44)
      && v58 == *(_DWORD *)(v49 + 48)
      && v53 == *(_DWORD *)(v49 + 52))
    {
      if ((*(_BYTE *)(v49 + 64) & 1) == 0)
      {
        LODWORD(v125) = *(_DWORD *)(v49 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)&v137 = v51;
      DWORD2(v137) = v52;
      *(_QWORD *)&v138 = v122;
      *((_QWORD *)&v138 + 1) = __PAIR64__(v58, v53);
      *(_QWORD *)&v139 = v54;
      *((_QWORD *)&v139 + 1) = v119;
      *(_QWORD *)&v140 = v116;
      *((_QWORD *)&v140 + 1) = v55;
      *(_QWORD *)v141 = v126;
      *(_QWORD *)&v141[8] = v110;
      *(_DWORD *)&v141[16] = v107;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v137, v60, (uint64_t)&v130);
      v61 = v131;
      v62 = v132;
      v63 = v136;
      v64 = v132 | ((unint64_t)v133 << 32);
      v65 = v134 | ((unint64_t)v135 << 32);
      *(_OWORD *)(v49 + 32) = v130;
      *(_OWORD *)(v49 + 48) = v61;
      *(_QWORD *)(v49 + 64) = v64;
      *(_QWORD *)(v49 + 72) = v65;
      *(_WORD *)(v49 + 80) = v63;
      if (v62 != 1)
      {
        v125 = HIDWORD(*((_QWORD *)&v61 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v66 = *(_DWORD *)(a2 + 8);
        v123 = *(_QWORD *)(a2 + 16);
        v67 = *(_DWORD *)(a2 + 24);
        v68 = *(_QWORD *)(a2 + 32);
        v69 = *(_QWORD *)(a2 + 48);
        v117 = *(_QWORD *)a2;
        v120 = *(_QWORD *)(a2 + 40);
        v70 = *(_QWORD *)(a2 + 56);
        v108 = *(_QWORD *)(a2 + 72);
        v111 = *(_QWORD *)(a2 + 64);
        v105 = *(_DWORD *)(a2 + 80);
        v71 = *(_OWORD *)(a2 + 48);
        v139 = *(_OWORD *)(a2 + 32);
        v140 = v71;
        *(_OWORD *)v141 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v141[16] = *(_DWORD *)(a2 + 80);
        v72 = *(_OWORD *)(a2 + 16);
        v137 = *(_OWORD *)a2;
        v138 = v72;
        outlined retain of _ViewInputs(a2);
        v73 = _ViewInputs.geometryTransaction()();
        v74 = swift_getKeyPath();
        v75 = specialized CachedEnvironment.attribute<A>(keyPath:)(v74);
        swift_release();
        if ((*(_BYTE *)(v49 + 81) & 1) == 0
          && (_DWORD)v111 == *(_DWORD *)(v49 + 32)
          && (_DWORD)v108 == *(_DWORD *)(v49 + 36)
          && v75 == *(_DWORD *)(v49 + 40)
          && v66 == *(_DWORD *)(v49 + 44)
          && v73 == *(_DWORD *)(v49 + 48)
          && v67 == *(_DWORD *)(v49 + 52))
        {
          if ((*(_BYTE *)(v49 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v49 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(_QWORD *)&v137 = v117;
          DWORD2(v137) = v66;
          *(_QWORD *)&v138 = v123;
          *((_QWORD *)&v138 + 1) = __PAIR64__(v73, v67);
          *(_QWORD *)&v139 = v68;
          *((_QWORD *)&v139 + 1) = v120;
          *(_QWORD *)&v140 = v69;
          *((_QWORD *)&v140 + 1) = v70;
          *(_QWORD *)v141 = v111;
          *(_QWORD *)&v141[8] = v108;
          *(_DWORD *)&v141[16] = v105;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v137, v75, (uint64_t)&v130);
          OffsetAttribute2 = v133;
          v77 = v134;
          v78 = v136;
          v79 = v132 | ((unint64_t)v133 << 32);
          v80 = v134 | ((unint64_t)v135 << 32);
          v81 = v131;
          *(_OWORD *)(v49 + 32) = v130;
          *(_OWORD *)(v49 + 48) = v81;
          *(_QWORD *)(v49 + 64) = v79;
          *(_QWORD *)(v49 + 72) = v80;
          *(_WORD *)(v49 + 80) = v78;
          if (v77 != 1)
            goto LABEL_46;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v49 + 68) = OffsetAttribute2;
        *(_BYTE *)(v49 + 72) = 0;
LABEL_46:
        v115 = OffsetAttribute2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_47;
      }
    }
    LODWORD(v125) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v49 + 60) = v125;
    *(_BYTE *)(v49 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    LODWORD(v130) = v47;
    v96 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v130);
    v96(&v137, 0);
    v48 = v104;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  void (*v4)(uint64_t *__return_ptr, uint64_t, __int128 *);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t KeyPath;
  int v27;
  __int128 v28;
  uint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int *v39;
  char v40;
  uint64_t v41;
  int *v42;
  unsigned int OffsetAttribute2;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t result;
  void (*v87)(__int128 *, _QWORD);
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v92;
  int v93;
  __int16 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  Swift::UInt32 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  unsigned __int8 v123;
  unsigned int v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned __int8 v127;
  __int128 v128;
  _BYTE v129[32];
  __int128 v130;
  __int128 v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;

  v4 = a3;
  v6 = a4;
  v136 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a2;
  v111 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v114 = *(_OWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_DWORD *)(a2 + 68);
  v108 = *(_DWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v117 = *(_DWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 32);
  v134 = *(_OWORD *)(a2 + 16);
  v135 = v14;
  v133 = *(_OWORD *)a2;
  v95 = WORD2(v14);
  v93 = v12;
  if ((BYTE4(v14) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v15) = v12;
    goto LABEL_16;
  }
  v104 = v9;
  v105 = v7;
  v16 = v134;
  swift_beginAccess();
  v101 = *(_QWORD *)a2;
  v17 = *(_DWORD *)(a2 + 8);
  v98 = *(_QWORD *)(a2 + 16);
  v18 = *(_DWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a2 + 32);
  v20 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  v89 = *(_QWORD *)(a2 + 72);
  v90 = *(_QWORD *)(a2 + 64);
  v88 = *(_DWORD *)(a2 + 80);
  v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v129[16] = *(_OWORD *)(a2 + 32);
  v130 = v23;
  v131 = *(_OWORD *)(a2 + 64);
  v132 = *(_DWORD *)(a2 + 80);
  v24 = *(_OWORD *)(a2 + 16);
  v128 = *(_OWORD *)a2;
  *(_OWORD *)v129 = v24;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v25 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v134 + 81) & 1) != 0
    || (_DWORD)v90 != *(_DWORD *)(v134 + 32)
    || (_DWORD)v89 != *(_DWORD *)(v134 + 36)
    || v27 != *(_DWORD *)(v134 + 40)
    || v17 != *(_DWORD *)(v134 + 44)
    || v25 != *(_DWORD *)(v134 + 48)
    || v18 != *(_DWORD *)(v134 + 52))
  {
    *(_QWORD *)&v128 = v101;
    DWORD2(v128) = v17;
    *(_QWORD *)v129 = v98;
    *(_DWORD *)&v129[8] = v18;
    *(_DWORD *)&v129[12] = v25;
    *(_QWORD *)&v129[16] = v19;
    *(_QWORD *)&v129[24] = v20;
    *(_QWORD *)&v130 = v21;
    *((_QWORD *)&v130 + 1) = v22;
    *(_QWORD *)&v131 = v90;
    *((_QWORD *)&v131 + 1) = v89;
    v132 = v88;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v27, (uint64_t)&v121);
    v28 = v122;
    v29 = v123;
    v30 = v127;
    v31 = v123 | ((unint64_t)v124 << 32);
    v32 = v125 | ((unint64_t)v126 << 32);
    *(_OWORD *)(v16 + 32) = v121;
    *(_OWORD *)(v16 + 48) = v28;
    *(_QWORD *)(v16 + 64) = v31;
    *(_QWORD *)(v16 + 72) = v32;
    *(_WORD *)(v16 + 80) = v30;
    if (v29 != 1)
    {
      v15 = HIDWORD(*((_QWORD *)&v28 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v134 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v15;
    *(_BYTE *)(v16 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v15) = *(_DWORD *)(v134 + 60);
LABEL_15:
  v7 = v105;
  v6 = a4;
  v4 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v9 = v104;
LABEL_16:
  *(_QWORD *)&v128 = v7;
  DWORD2(v128) = v111;
  *(_QWORD *)v129 = v8;
  *(_OWORD *)&v129[8] = v114;
  *(_QWORD *)&v129[24] = v10;
  *(_QWORD *)&v130 = v9;
  *((_QWORD *)&v130 + 1) = v11;
  *(_QWORD *)&v131 = __PAIR64__(v15, v108);
  *((_QWORD *)&v131 + 1) = v13;
  v132 = v117;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v33 = swift_bridgeObjectRetain();
  v4(&v119, v33, &v128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v34 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v36 = *(_QWORD *)(v34 + 16);
  if (!v36)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v6 = v119;
    v6[1] = v120;
    return result;
  }
  v37 = v35;
  v38 = (_QWORD *)(v34 + 32);
  while (*v38 != v35)
  {
    v38 += 2;
    if (!--v36)
      goto LABEL_57;
  }
  v118 = ++lastIdentity;
  v39 = (int *)MEMORY[0x24BE096C0];
  v40 = v95;
  if ((v95 & 0x100) == 0)
  {
LABEL_22:
    v107 = v6;
    v41 = v134;
    v42 = (int *)(v134 + 16);
    swift_beginAccess();
    if ((v40 & 0x20) == 0)
    {
      LODWORD(v115) = *(_DWORD *)(a2 + 64);
      OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      v74 = *v42;
      *(_QWORD *)&v128 = v119;
      DWORD2(v128) = v120;
      v75 = PreferencesOutputs.subscript.getter(v37);
      if ((v75 & 0x100000000) != 0)
        v76 = *v39;
      else
        v76 = v75;
      v77 = v133;
      *(_QWORD *)&v121 = v133;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v133);
      outlined retain of ViewTransform((uint64_t)&v121);
      v78 = specialized find<A>(_:key:)(v77);
      if (v78)
        v79 = *(_BYTE *)(v78 + 72);
      else
        v79 = 0;
      v6 = v107;
      outlined release of ViewTransform((uint64_t)&v121);
      outlined release of _GraphInputs((uint64_t)&v133);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v133);
      outlined retain of ViewTransform((uint64_t)&v121);
      v80 = specialized find<A>(_:key:)(v77);
      if (v80)
        v81 = *(_DWORD *)(v80 + 72);
      else
        v81 = 0;
      v82 = *(_DWORD *)(a2 + 60);
      v83 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v121);
      outlined release of _GraphInputs((uint64_t)&v133);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v128 = __PAIR64__(a1, v118);
      *((_QWORD *)&v128 + 1) = __PAIR64__(OffsetAttribute2, v115);
      *(_DWORD *)v129 = v82;
      *(_DWORD *)&v129[4] = v93;
      *(_DWORD *)&v129[8] = v74;
      *(_DWORD *)&v129[12] = v83;
      *(_DWORD *)&v129[16] = v76;
      v129[20] = v79;
      *(_DWORD *)&v129[24] = 0;
      *(_DWORD *)&v129[28] = v81;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsBlendModeEffect>, (uint64_t)&type metadata for GraphicsBlendModeEffect, (uint64_t)&protocol witness table for GraphicsBlendModeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsBlendModeEffect>, (uint64_t)&type metadata for GraphicsBlendModeEffect, (uint64_t)&protocol witness table for GraphicsBlendModeEffect);
      v84 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v128) = 0;
      PreferencesOutputs.subscript.setter(v84, v37, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v85);
      goto LABEL_57;
    }
    v44 = *(_QWORD *)a2;
    v45 = *(_DWORD *)(a2 + 8);
    v46 = *(_DWORD *)(a2 + 24);
    v47 = *(_QWORD *)(a2 + 32);
    v109 = *(_QWORD *)(a2 + 40);
    v112 = *(_QWORD *)(a2 + 16);
    v102 = *(_QWORD *)(a2 + 48);
    v48 = *(_QWORD *)(a2 + 56);
    v116 = *(_QWORD *)(a2 + 64);
    v99 = *(_QWORD *)(a2 + 72);
    v96 = *(_DWORD *)(a2 + 80);
    v49 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v129[16] = *(_OWORD *)(a2 + 32);
    v130 = v49;
    v131 = *(_OWORD *)(a2 + 64);
    v132 = *(_DWORD *)(a2 + 80);
    v50 = *(_OWORD *)(a2 + 16);
    v128 = *(_OWORD *)a2;
    *(_OWORD *)v129 = v50;
    outlined retain of _ViewInputs(a2);
    v51 = _ViewInputs.geometryTransaction()();
    v52 = swift_getKeyPath();
    v53 = specialized CachedEnvironment.attribute<A>(keyPath:)(v52);
    swift_release();
    if ((*(_BYTE *)(v41 + 81) & 1) == 0
      && (_DWORD)v116 == *(_DWORD *)(v41 + 32)
      && (_DWORD)v99 == *(_DWORD *)(v41 + 36)
      && v53 == *(_DWORD *)(v41 + 40)
      && v45 == *(_DWORD *)(v41 + 44)
      && v51 == *(_DWORD *)(v41 + 48)
      && v46 == *(_DWORD *)(v41 + 52))
    {
      if ((*(_BYTE *)(v41 + 64) & 1) == 0)
      {
        LODWORD(v115) = *(_DWORD *)(v41 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)&v128 = v44;
      DWORD2(v128) = v45;
      *(_QWORD *)v129 = v112;
      *(_DWORD *)&v129[8] = v46;
      *(_DWORD *)&v129[12] = v51;
      *(_QWORD *)&v129[16] = v47;
      *(_QWORD *)&v129[24] = v109;
      *(_QWORD *)&v130 = v102;
      *((_QWORD *)&v130 + 1) = v48;
      *(_QWORD *)&v131 = v116;
      *((_QWORD *)&v131 + 1) = v99;
      v132 = v96;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v53, (uint64_t)&v121);
      v54 = v122;
      v55 = v123;
      v56 = v127;
      v57 = v123 | ((unint64_t)v124 << 32);
      v58 = v125 | ((unint64_t)v126 << 32);
      *(_OWORD *)(v41 + 32) = v121;
      *(_OWORD *)(v41 + 48) = v54;
      *(_QWORD *)(v41 + 64) = v57;
      *(_QWORD *)(v41 + 72) = v58;
      *(_WORD *)(v41 + 80) = v56;
      if (v55 != 1)
      {
        v115 = HIDWORD(*((_QWORD *)&v54 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v103 = *(_QWORD *)a2;
        v59 = *(_DWORD *)(a2 + 8);
        v60 = *(_DWORD *)(a2 + 24);
        v61 = *(_QWORD *)(a2 + 32);
        v62 = *(_QWORD *)(a2 + 48);
        v110 = *(_QWORD *)(a2 + 40);
        v113 = *(_QWORD *)(a2 + 16);
        v63 = *(_QWORD *)(a2 + 56);
        v97 = *(_QWORD *)(a2 + 72);
        v100 = *(_QWORD *)(a2 + 64);
        v92 = *(_DWORD *)(a2 + 80);
        v64 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v129[16] = *(_OWORD *)(a2 + 32);
        v130 = v64;
        v131 = *(_OWORD *)(a2 + 64);
        v132 = *(_DWORD *)(a2 + 80);
        v65 = *(_OWORD *)(a2 + 16);
        v128 = *(_OWORD *)a2;
        *(_OWORD *)v129 = v65;
        outlined retain of _ViewInputs(a2);
        v66 = _ViewInputs.geometryTransaction()();
        v67 = swift_getKeyPath();
        v68 = specialized CachedEnvironment.attribute<A>(keyPath:)(v67);
        swift_release();
        if ((*(_BYTE *)(v41 + 81) & 1) == 0
          && (_DWORD)v100 == *(_DWORD *)(v41 + 32)
          && (_DWORD)v97 == *(_DWORD *)(v41 + 36)
          && v68 == *(_DWORD *)(v41 + 40)
          && v59 == *(_DWORD *)(v41 + 44)
          && v66 == *(_DWORD *)(v41 + 48)
          && v60 == *(_DWORD *)(v41 + 52))
        {
          v39 = (int *)MEMORY[0x24BE096C0];
          if ((*(_BYTE *)(v41 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v41 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(_QWORD *)&v128 = v103;
          DWORD2(v128) = v59;
          *(_QWORD *)v129 = v113;
          *(_DWORD *)&v129[8] = v60;
          *(_DWORD *)&v129[12] = v66;
          *(_QWORD *)&v129[16] = v61;
          *(_QWORD *)&v129[24] = v110;
          *(_QWORD *)&v130 = v62;
          *((_QWORD *)&v130 + 1) = v63;
          *(_QWORD *)&v131 = v100;
          *((_QWORD *)&v131 + 1) = v97;
          v132 = v92;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v68, (uint64_t)&v121);
          OffsetAttribute2 = v124;
          v69 = v125;
          v70 = v127;
          v71 = v123 | ((unint64_t)v124 << 32);
          v72 = v125 | ((unint64_t)v126 << 32);
          v73 = v122;
          *(_OWORD *)(v41 + 32) = v121;
          *(_OWORD *)(v41 + 48) = v73;
          *(_QWORD *)(v41 + 64) = v71;
          *(_QWORD *)(v41 + 72) = v72;
          *(_WORD *)(v41 + 80) = v70;
          v39 = (int *)MEMORY[0x24BE096C0];
          if (v69 != 1)
            goto LABEL_46;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v41 + 68) = OffsetAttribute2;
        *(_BYTE *)(v41 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_47;
      }
    }
    LODWORD(v115) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v41 + 60) = v115;
    *(_BYTE *)(v41 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v39)
  {
    LODWORD(v121) = v118;
    v87 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v121);
    v87(&v128, 0);
    v40 = v95;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<OpacityRendererEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<Shader.ResolvedShader>, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t)&protocol witness table for Shader.ResolvedShader, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<Shader.ResolvedShader> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<Shader.ResolvedShader>, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t)&protocol witness table for Shader.ResolvedShader, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<Shader.ResolvedShader> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ForegroundLayerLevelViewModifier>, (uint64_t)&type metadata for _ForegroundLayerLevelViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerLevelViewModifier, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ForegroundLayerLevelViewModifier> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_PremultipliedColorMatrixEffect>, (uint64_t)&type metadata for _PremultipliedColorMatrixEffect, (uint64_t)&protocol witness table for _PremultipliedColorMatrixEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_PremultipliedColorMatrixEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ForegroundLayerViewModifier>, (uint64_t)&type metadata for _ForegroundLayerViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerViewModifier, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ForegroundLayerViewModifier> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ExtendedBlendModeEffect>, (uint64_t)&type metadata for _ExtendedBlendModeEffect, (uint64_t)&protocol witness table for _ExtendedBlendModeEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ExtendedBlendModeEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_LuminanceToAlphaEffect>, (uint64_t)&type metadata for _LuminanceToAlphaEffect, (uint64_t)&protocol witness table for _LuminanceToAlphaEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_LuminanceToAlphaEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_CompositingGroupEffect>, (uint64_t)&type metadata for _CompositingGroupEffect, (uint64_t)&protocol witness table for _CompositingGroupEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_CompositingGroupEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorMonochromeEffect._Resolved>, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t)&protocol witness table for _ColorMonochromeEffect._Resolved, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorMonochromeEffect._Resolved> and conformance RendererEffectDisplayList<A>);
}

{
  void (*v4)(uint64_t *__return_ptr, uint64_t, __int128 *);
  _QWORD *v6;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28;
  uint64_t KeyPath;
  int v30;
  uint64_t v31;
  __int128 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  const float *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  Swift::UInt32 v47;
  char v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  unsigned int v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t result;
  void (*v97)(__int128 *, _QWORD);
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  __int16 v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int OffsetAttribute2;
  uint64_t v127;
  Swift::UInt32 v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  unsigned __int8 v133;
  unsigned int v134;
  unsigned __int8 v135;
  unsigned int v136;
  unsigned __int8 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[20];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v4 = a3;
  v6 = a4;
  v146 = *MEMORY[0x24BDAC8D0];
  v7 = *(_OWORD *)(a2 + 32);
  v144 = *(_OWORD *)(a2 + 16);
  v145 = v7;
  v143 = *(_OWORD *)a2;
  v8 = *(_DWORD *)(a2 + 72);
  v9 = *(_QWORD *)a2;
  v119 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v125 = *(_DWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v122 = *(_DWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 76);
  v116 = v8;
  v105 = WORD2(v7);
  if ((BYTE4(v7) & 0x20) == 0)
  {
    v15 = *(float32x2_t *)(a2 + 64);
    v16 = *(_DWORD *)(a2 + 60);
    v17 = v145;
    outlined retain of _ViewInputs(a2);
    v18 = v8;
    goto LABEL_16;
  }
  v113 = *(_QWORD *)(a2 + 48);
  v114 = *(_QWORD *)(a2 + 40);
  v115 = *(_QWORD *)a2;
  v101 = *(_DWORD *)(a2 + 32);
  v19 = v144;
  swift_beginAccess();
  v110 = *(_QWORD *)a2;
  v20 = *(_DWORD *)(a2 + 8);
  v107 = *(_QWORD *)(a2 + 16);
  v21 = *(_DWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)(a2 + 40);
  v24 = *(_QWORD *)(a2 + 48);
  v25 = *(_QWORD *)(a2 + 56);
  v99 = *(_QWORD *)(a2 + 72);
  v100 = *(_QWORD *)(a2 + 64);
  v98 = *(_DWORD *)(a2 + 80);
  v26 = *(_OWORD *)(a2 + 48);
  v140 = *(_OWORD *)(a2 + 32);
  v141 = v26;
  *(_OWORD *)v142 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v142[16] = *(_DWORD *)(a2 + 80);
  v27 = *(_OWORD *)(a2 + 16);
  v138 = *(_OWORD *)a2;
  v139 = v27;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v28 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v30 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v144 + 81) & 1) != 0
    || (_DWORD)v100 != *(_DWORD *)(v144 + 32)
    || (_DWORD)v99 != *(_DWORD *)(v144 + 36)
    || v30 != *(_DWORD *)(v144 + 40)
    || v20 != *(_DWORD *)(v144 + 44)
    || v28 != *(_DWORD *)(v144 + 48)
    || v21 != *(_DWORD *)(v144 + 52))
  {
    *(_QWORD *)&v138 = v110;
    DWORD2(v138) = v20;
    *(_QWORD *)&v139 = v107;
    *((_QWORD *)&v139 + 1) = __PAIR64__(v28, v21);
    *(_QWORD *)&v140 = v22;
    *((_QWORD *)&v140 + 1) = v23;
    *(_QWORD *)&v141 = v24;
    *((_QWORD *)&v141 + 1) = v25;
    *(_QWORD *)v142 = v100;
    *(_QWORD *)&v142[8] = v99;
    *(_DWORD *)&v142[16] = v98;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v138, v30, (uint64_t)&v131);
    v32 = v132;
    v33 = v133;
    v34 = v137;
    v35 = v133 | ((unint64_t)v134 << 32);
    v36 = v135 | ((unint64_t)v136 << 32);
    *(_OWORD *)(v19 + 32) = v131;
    *(_OWORD *)(v19 + 48) = v32;
    *(_QWORD *)(v19 + 64) = v35;
    *(_QWORD *)(v19 + 72) = v36;
    *(_WORD *)(v19 + 80) = v34;
    if ((v33 & 1) == 0)
    {
      v31 = HIDWORD(*((_QWORD *)&v32 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v144 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v31) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 60) = v31;
    *(_BYTE *)(v19 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v31) = *(_DWORD *)(v144 + 60);
LABEL_15:
  v4 = a3;
  v6 = a4;
  v9 = v115;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  *(_QWORD *)&v138 = __PAIR64__(*(_DWORD *)(a2 + 60), v31);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  v16 = Attribute.init<A>(body:value:flags:update:)();
  v37 = (const float *)(specialized static ViewGraph.current.getter() + 248);
  v15 = vld1_dup_f32(v37);
  swift_release();
  v38 = *(_DWORD *)(a2 + 64);
  v39 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v143);
  v40 = specialized CachedEnvironment.attribute<A>(keyPath:)(v39);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v143);
  swift_release();
  *(_QWORD *)&v138 = __PAIR64__(v116, v38);
  DWORD2(v138) = v40;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  v18 = Attribute.init<A>(body:value:flags:update:)();
  v17 = v101 | 0x1C;
  v13 = v113;
  v12 = v114;
LABEL_16:
  *(_QWORD *)&v138 = v9;
  DWORD2(v138) = v119;
  *(_QWORD *)&v139 = v10;
  *((_QWORD *)&v139 + 1) = v11;
  *(_QWORD *)&v140 = __PAIR64__(v125, v17);
  *((_QWORD *)&v140 + 1) = v12;
  *(_QWORD *)&v141 = v13;
  *((_QWORD *)&v141 + 1) = __PAIR64__(v16, v122);
  *(float32x2_t *)v142 = v15;
  *(_DWORD *)&v142[8] = v18;
  *(_QWORD *)&v142[12] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v41 = swift_bridgeObjectRetain();
  v4(&v129, v41, &v138);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v42 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v44 = *(_QWORD *)(v42 + 16);
  if (!v44)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v6 = v129;
    v6[1] = v130;
    return result;
  }
  v45 = v43;
  v46 = (_QWORD *)(v42 + 32);
  while (*v46 != v43)
  {
    v46 += 2;
    if (!--v44)
      goto LABEL_59;
  }
  v47 = ++lastIdentity;
  v48 = v105;
  if ((v105 & 0x100) == 0)
  {
LABEL_22:
    v49 = v144;
    v50 = (unsigned int *)(v144 + 16);
    swift_beginAccess();
    v128 = v47;
    if ((v48 & 0x20) == 0)
    {
      OffsetAttribute2 = *(_DWORD *)(a2 + 64);
LABEL_49:
      swift_endAccess();
      v83 = *v50;
      *(_QWORD *)&v138 = v129;
      DWORD2(v138) = v130;
      v84 = PreferencesOutputs.subscript.getter(v45);
      if ((v84 & 0x100000000) != 0)
        v85 = *MEMORY[0x24BE096C0];
      else
        v85 = v84;
      v86 = v143;
      *(_QWORD *)&v131 = v143;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v143);
      outlined retain of ViewTransform((uint64_t)&v131);
      v87 = specialized find<A>(_:key:)(v86);
      if (v87)
        v88 = *(_BYTE *)(v87 + 72);
      else
        v88 = 0;
      outlined release of ViewTransform((uint64_t)&v131);
      outlined release of _GraphInputs((uint64_t)&v143);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v143);
      outlined retain of ViewTransform((uint64_t)&v131);
      v89 = specialized find<A>(_:key:)(v86);
      if (v89)
        v90 = *(_DWORD *)(v89 + 72);
      else
        v90 = 0;
      v91 = *(_DWORD *)(a2 + 60);
      v92 = *(_DWORD *)(a2 + 68);
      v93 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v131);
      outlined release of _GraphInputs((uint64_t)&v143);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v138 = __PAIR64__(a1, v128);
      *((_QWORD *)&v138 + 1) = __PAIR64__(v116, OffsetAttribute2);
      *(_QWORD *)&v139 = __PAIR64__(v92, v91);
      *((_QWORD *)&v139 + 1) = __PAIR64__(v93, v83);
      LODWORD(v140) = v85;
      BYTE4(v140) = v88;
      DWORD2(v140) = 0;
      HIDWORD(v140) = v90;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<_GeometryGroupEffect> and conformance RendererEffectDisplayList<A>, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect);
      v94 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v138) = 0;
      PreferencesOutputs.subscript.setter(v94, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v95);
      goto LABEL_59;
    }
    v51 = *(_QWORD *)a2;
    v52 = *(_DWORD *)(a2 + 8);
    v53 = *(_DWORD *)(a2 + 24);
    v54 = *(_QWORD *)(a2 + 32);
    v120 = *(_QWORD *)(a2 + 40);
    v123 = *(_QWORD *)(a2 + 16);
    v117 = *(_QWORD *)(a2 + 48);
    v55 = *(_QWORD *)(a2 + 56);
    v127 = *(_QWORD *)(a2 + 64);
    v111 = *(_QWORD *)(a2 + 72);
    v108 = *(_DWORD *)(a2 + 80);
    v56 = *(_OWORD *)(a2 + 48);
    v140 = *(_OWORD *)(a2 + 32);
    v141 = v56;
    *(_OWORD *)v142 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v142[16] = *(_DWORD *)(a2 + 80);
    v57 = *(_OWORD *)(a2 + 16);
    v138 = *(_OWORD *)a2;
    v139 = v57;
    outlined retain of _ViewInputs(a2);
    v58 = _ViewInputs.geometryTransaction()();
    v59 = swift_getKeyPath();
    v60 = specialized CachedEnvironment.attribute<A>(keyPath:)(v59);
    swift_release();
    if ((*(_BYTE *)(v49 + 81) & 1) == 0
      && (_DWORD)v127 == *(_DWORD *)(v49 + 32)
      && (_DWORD)v111 == *(_DWORD *)(v49 + 36)
      && v60 == *(_DWORD *)(v49 + 40)
      && v52 == *(_DWORD *)(v49 + 44)
      && v58 == *(_DWORD *)(v49 + 48)
      && v53 == *(_DWORD *)(v49 + 52))
    {
      if ((*(_BYTE *)(v49 + 64) & 1) != 0)
        goto LABEL_34;
      LODWORD(v66) = *(_DWORD *)(v49 + 60);
    }
    else
    {
      *(_QWORD *)&v138 = v51;
      DWORD2(v138) = v52;
      *(_QWORD *)&v139 = v123;
      *((_QWORD *)&v139 + 1) = __PAIR64__(v58, v53);
      *(_QWORD *)&v140 = v54;
      *((_QWORD *)&v140 + 1) = v120;
      *(_QWORD *)&v141 = v117;
      *((_QWORD *)&v141 + 1) = v55;
      *(_QWORD *)v142 = v127;
      *(_QWORD *)&v142[8] = v111;
      *(_DWORD *)&v142[16] = v108;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v138, v60, (uint64_t)&v131);
      v61 = v132;
      v62 = v133;
      v63 = v137;
      v64 = v133 | ((unint64_t)v134 << 32);
      v65 = v135 | ((unint64_t)v136 << 32);
      *(_OWORD *)(v49 + 32) = v131;
      *(_OWORD *)(v49 + 48) = v61;
      *(_QWORD *)(v49 + 64) = v64;
      *(_QWORD *)(v49 + 72) = v65;
      *(_WORD *)(v49 + 80) = v63;
      if ((v62 & 1) != 0)
      {
LABEL_34:
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v49 + 60) = OffsetAttribute2;
        *(_BYTE *)(v49 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v67 = *(_DWORD *)(a2 + 8);
        v124 = *(_QWORD *)(a2 + 16);
        v68 = *(_DWORD *)(a2 + 24);
        v69 = *(_QWORD *)(a2 + 32);
        v70 = *(_QWORD *)(a2 + 48);
        v118 = *(_QWORD *)a2;
        v121 = *(_QWORD *)(a2 + 40);
        v71 = *(_QWORD *)(a2 + 56);
        v109 = *(_QWORD *)(a2 + 72);
        v112 = *(_QWORD *)(a2 + 64);
        v106 = *(_DWORD *)(a2 + 80);
        v72 = *(_OWORD *)(a2 + 48);
        v140 = *(_OWORD *)(a2 + 32);
        v141 = v72;
        *(_OWORD *)v142 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v142[16] = *(_DWORD *)(a2 + 80);
        v73 = *(_OWORD *)(a2 + 16);
        v138 = *(_OWORD *)a2;
        v139 = v73;
        outlined retain of _ViewInputs(a2);
        v74 = _ViewInputs.geometryTransaction()();
        v75 = swift_getKeyPath();
        v76 = specialized CachedEnvironment.attribute<A>(keyPath:)(v75);
        swift_release();
        if ((*(_BYTE *)(v49 + 81) & 1) == 0
          && (_DWORD)v112 == *(_DWORD *)(v49 + 32)
          && (_DWORD)v109 == *(_DWORD *)(v49 + 36)
          && v76 == *(_DWORD *)(v49 + 40)
          && v67 == *(_DWORD *)(v49 + 44)
          && v74 == *(_DWORD *)(v49 + 48)
          && v68 == *(_DWORD *)(v49 + 52))
        {
          if ((*(_BYTE *)(v49 + 72) & 1) == 0)
          {
            v77 = *(_DWORD *)(v49 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(_QWORD *)&v138 = v118;
          DWORD2(v138) = v67;
          *(_QWORD *)&v139 = v124;
          *((_QWORD *)&v139 + 1) = __PAIR64__(v74, v68);
          *(_QWORD *)&v140 = v69;
          *((_QWORD *)&v140 + 1) = v121;
          *(_QWORD *)&v141 = v70;
          *((_QWORD *)&v141 + 1) = v71;
          *(_QWORD *)v142 = v112;
          *(_QWORD *)&v142[8] = v109;
          *(_DWORD *)&v142[16] = v106;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v138, v76, (uint64_t)&v131);
          v77 = v134;
          v78 = v135;
          v79 = v137;
          v80 = v133 | ((unint64_t)v134 << 32);
          v81 = v135 | ((unint64_t)v136 << 32);
          v82 = v132;
          *(_OWORD *)(v49 + 32) = v131;
          *(_OWORD *)(v49 + 48) = v82;
          *(_QWORD *)(v49 + 64) = v80;
          *(_QWORD *)(v49 + 72) = v81;
          *(_WORD *)(v49 + 80) = v79;
          if ((v78 & 1) == 0)
            goto LABEL_48;
        }
        v77 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v49 + 68) = v77;
        *(_BYTE *)(v49 + 72) = 0;
LABEL_48:
        v116 = v77;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_49;
      }
      v66 = HIDWORD(*((_QWORD *)&v61 + 1));
    }
    OffsetAttribute2 = v66;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    LODWORD(v131) = v47;
    v97 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v131);
    v97(&v138, 0);
    v48 = v105;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorMultiplyEffect._Resolved>, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t)&protocol witness table for _ColorMultiplyEffect._Resolved, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorMultiplyEffect._Resolved> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<LuminanceCurveEffect>, (uint64_t)&type metadata for LuminanceCurveEffect, (uint64_t)&protocol witness table for LuminanceCurveEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<LuminanceCurveEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_HueRotationEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorMatrixEffect>, (uint64_t)&type metadata for _ColorMatrixEffect, (uint64_t)&protocol witness table for _ColorMatrixEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorMatrixEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorInvertEffect>, (uint64_t)&type metadata for _ColorInvertEffect, (uint64_t)&protocol witness table for _ColorInvertEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorInvertEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_SaturationEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_BrightnessEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<VariableBlurStyle>, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t)&protocol witness table for VariableBlurStyle, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<VariableBlurStyle> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsBlendMode>, (uint64_t)&type metadata for GraphicsBlendMode, (uint64_t)&protocol witness table for GraphicsBlendMode, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<GraphicsBlendMode> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_GrayscaleEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_BlendModeEffect>, (uint64_t)&type metadata for _BlendModeEffect, (uint64_t)&protocol witness table for _BlendModeEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_BlendModeEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ContrastEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsFilter>, (uint64_t)&type metadata for GraphicsFilter, (uint64_t)&protocol witness table for GraphicsFilter, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<GraphicsFilter> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ShadowEffect._Resolved>, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t)&protocol witness table for _ShadowEffect._Resolved, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ShadowEffect._Resolved> and conformance RendererEffectDisplayList<A>);
}

{
  void (*v4)(uint64_t *__return_ptr, uint64_t, __int128 *);
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t KeyPath;
  int v27;
  __int128 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  Swift::UInt32 v39;
  int *v40;
  char v41;
  uint64_t v42;
  int *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t result;
  void (*v89)(__int128 *, _QWORD);
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v94;
  int v95;
  __int16 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  unsigned int OffsetAttribute2;
  uint64_t v118;
  int v119;
  Swift::UInt32 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned __int8 v127;
  unsigned int v128;
  unsigned __int8 v129;
  __int128 v130;
  _BYTE v131[32];
  __int128 v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;

  v4 = a3;
  v6 = a4;
  v138 = *MEMORY[0x24BDAC8D0];
  v7 = *(_OWORD *)(a2 + 32);
  v136 = *(_OWORD *)(a2 + 16);
  v137 = v7;
  v135 = *(_OWORD *)a2;
  v8 = *(_QWORD *)a2;
  v113 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v116 = *(_OWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 68);
  v110 = *(_DWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v119 = *(_DWORD *)(a2 + 80);
  v95 = v13;
  v97 = WORD2(v7);
  if ((BYTE4(v7) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v15) = v13;
    goto LABEL_16;
  }
  v106 = *(_QWORD *)(a2 + 16);
  v107 = *(_QWORD *)a2;
  v16 = v136;
  swift_beginAccess();
  v103 = *(_QWORD *)a2;
  v17 = *(_DWORD *)(a2 + 8);
  v100 = *(_QWORD *)(a2 + 16);
  v18 = *(_DWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a2 + 32);
  v20 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  v91 = *(_QWORD *)(a2 + 72);
  v92 = *(_QWORD *)(a2 + 64);
  v90 = *(_DWORD *)(a2 + 80);
  v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v131[16] = *(_OWORD *)(a2 + 32);
  v132 = v23;
  v133 = *(_OWORD *)(a2 + 64);
  v134 = *(_DWORD *)(a2 + 80);
  v24 = *(_OWORD *)(a2 + 16);
  v130 = *(_OWORD *)a2;
  *(_OWORD *)v131 = v24;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v25 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v136 + 81) & 1) != 0
    || (_DWORD)v92 != *(_DWORD *)(v136 + 32)
    || (_DWORD)v91 != *(_DWORD *)(v136 + 36)
    || v27 != *(_DWORD *)(v136 + 40)
    || v17 != *(_DWORD *)(v136 + 44)
    || v25 != *(_DWORD *)(v136 + 48)
    || v18 != *(_DWORD *)(v136 + 52))
  {
    *(_QWORD *)&v130 = v103;
    DWORD2(v130) = v17;
    *(_QWORD *)v131 = v100;
    *(_DWORD *)&v131[8] = v18;
    *(_DWORD *)&v131[12] = v25;
    *(_QWORD *)&v131[16] = v19;
    *(_QWORD *)&v131[24] = v20;
    *(_QWORD *)&v132 = v21;
    *((_QWORD *)&v132 + 1) = v22;
    *(_QWORD *)&v133 = v92;
    *((_QWORD *)&v133 + 1) = v91;
    v134 = v90;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v27, (uint64_t)&v123);
    v28 = v124;
    v29 = v125;
    v30 = v129;
    v31 = v125 | ((unint64_t)v126 << 32);
    v32 = v127 | ((unint64_t)v128 << 32);
    *(_OWORD *)(v16 + 32) = v123;
    *(_OWORD *)(v16 + 48) = v28;
    *(_QWORD *)(v16 + 64) = v31;
    *(_QWORD *)(v16 + 72) = v32;
    *(_WORD *)(v16 + 80) = v30;
    if ((v29 & 1) == 0)
    {
      v15 = HIDWORD(*((_QWORD *)&v28 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v136 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v15;
    *(_BYTE *)(v16 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v15) = *(_DWORD *)(v136 + 60);
LABEL_15:
  v6 = a4;
  v9 = v106;
  v4 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v8 = v107;
LABEL_16:
  *(_QWORD *)&v130 = v8;
  DWORD2(v130) = v113;
  *(_QWORD *)v131 = v9;
  *(_OWORD *)&v131[8] = v116;
  *(_QWORD *)&v131[24] = v10;
  *(_QWORD *)&v132 = v11;
  *((_QWORD *)&v132 + 1) = v12;
  *(_QWORD *)&v133 = __PAIR64__(v15, v110);
  *((_QWORD *)&v133 + 1) = v14;
  v134 = v119;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v33 = swift_bridgeObjectRetain();
  v4(&v121, v33, &v130);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v34 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v36 = *(_QWORD *)(v34 + 16);
  if (!v36)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v6 = v121;
    v6[1] = v122;
    return result;
  }
  v37 = v35;
  v38 = (_QWORD *)(v34 + 32);
  while (*v38 != v35)
  {
    v38 += 2;
    if (!--v36)
      goto LABEL_59;
  }
  v39 = ++lastIdentity;
  v40 = (int *)MEMORY[0x24BE096C0];
  v41 = v97;
  if ((v97 & 0x100) == 0)
  {
LABEL_22:
    v120 = v39;
    v109 = v6;
    v42 = v136;
    v43 = (int *)(v136 + 16);
    swift_beginAccess();
    if ((v41 & 0x20) == 0)
    {
      OffsetAttribute2 = *(_DWORD *)(a2 + 64);
      v44 = *(_DWORD *)(a2 + 72);
LABEL_49:
      swift_endAccess();
      v76 = *v43;
      *(_QWORD *)&v130 = v121;
      DWORD2(v130) = v122;
      v77 = PreferencesOutputs.subscript.getter(v37);
      if ((v77 & 0x100000000) != 0)
        v78 = *v40;
      else
        v78 = v77;
      v79 = v135;
      *(_QWORD *)&v123 = v135;
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v123);
      outlined retain of _GraphInputs((uint64_t)&v135);
      v80 = specialized find<A>(_:key:)(v79);
      if (v80)
        v81 = *(_BYTE *)(v80 + 72);
      else
        v81 = 0;
      v6 = v109;
      outlined release of ViewTransform((uint64_t)&v123);
      outlined release of _GraphInputs((uint64_t)&v135);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v123);
      outlined retain of _GraphInputs((uint64_t)&v135);
      v82 = specialized find<A>(_:key:)(v79);
      if (v82)
        v83 = *(_DWORD *)(v82 + 72);
      else
        v83 = 0;
      v84 = *(_DWORD *)(a2 + 60);
      v85 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v123);
      outlined release of _GraphInputs((uint64_t)&v135);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v130 = __PAIR64__(a1, v120);
      *((_QWORD *)&v130 + 1) = __PAIR64__(v44, OffsetAttribute2);
      *(_DWORD *)v131 = v84;
      *(_DWORD *)&v131[4] = v95;
      *(_DWORD *)&v131[8] = v76;
      *(_DWORD *)&v131[12] = v85;
      *(_DWORD *)&v131[16] = v78;
      v131[20] = v81;
      *(_DWORD *)&v131[24] = 0;
      *(_DWORD *)&v131[28] = v83;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<_BlurEffect>, (uint64_t)&type metadata for _BlurEffect, (uint64_t)&protocol witness table for _BlurEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>((unint64_t *)&lazy protocol witness table cache variable for type RendererEffectDisplayList<_BlurEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<_BlurEffect>, (uint64_t)&type metadata for _BlurEffect, (uint64_t)&protocol witness table for _BlurEffect);
      v86 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v130) = 0;
      PreferencesOutputs.subscript.setter(v86, v37, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v87);
      goto LABEL_59;
    }
    v45 = *(_QWORD *)a2;
    v46 = *(_DWORD *)(a2 + 8);
    v47 = *(_DWORD *)(a2 + 24);
    v48 = *(_QWORD *)(a2 + 32);
    v111 = *(_QWORD *)(a2 + 40);
    v114 = *(_QWORD *)(a2 + 16);
    v104 = *(_QWORD *)(a2 + 48);
    v49 = *(_QWORD *)(a2 + 56);
    v118 = *(_QWORD *)(a2 + 64);
    v101 = *(_QWORD *)(a2 + 72);
    v98 = *(_DWORD *)(a2 + 80);
    v50 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v131[16] = *(_OWORD *)(a2 + 32);
    v132 = v50;
    v133 = *(_OWORD *)(a2 + 64);
    v134 = *(_DWORD *)(a2 + 80);
    v51 = *(_OWORD *)(a2 + 16);
    v130 = *(_OWORD *)a2;
    *(_OWORD *)v131 = v51;
    outlined retain of _ViewInputs(a2);
    v52 = _ViewInputs.geometryTransaction()();
    v53 = swift_getKeyPath();
    v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v53);
    swift_release();
    if ((*(_BYTE *)(v42 + 81) & 1) == 0
      && (_DWORD)v118 == *(_DWORD *)(v42 + 32)
      && (_DWORD)v101 == *(_DWORD *)(v42 + 36)
      && v54 == *(_DWORD *)(v42 + 40)
      && v46 == *(_DWORD *)(v42 + 44)
      && v52 == *(_DWORD *)(v42 + 48)
      && v47 == *(_DWORD *)(v42 + 52))
    {
      if ((*(_BYTE *)(v42 + 64) & 1) != 0)
        goto LABEL_34;
      LODWORD(v60) = *(_DWORD *)(v42 + 60);
    }
    else
    {
      *(_QWORD *)&v130 = v45;
      DWORD2(v130) = v46;
      *(_QWORD *)v131 = v114;
      *(_DWORD *)&v131[8] = v47;
      *(_DWORD *)&v131[12] = v52;
      *(_QWORD *)&v131[16] = v48;
      *(_QWORD *)&v131[24] = v111;
      *(_QWORD *)&v132 = v104;
      *((_QWORD *)&v132 + 1) = v49;
      *(_QWORD *)&v133 = v118;
      *((_QWORD *)&v133 + 1) = v101;
      v134 = v98;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v54, (uint64_t)&v123);
      v55 = v124;
      v56 = v125;
      v57 = v129;
      v58 = v125 | ((unint64_t)v126 << 32);
      v59 = v127 | ((unint64_t)v128 << 32);
      *(_OWORD *)(v42 + 32) = v123;
      *(_OWORD *)(v42 + 48) = v55;
      *(_QWORD *)(v42 + 64) = v58;
      *(_QWORD *)(v42 + 72) = v59;
      *(_WORD *)(v42 + 80) = v57;
      if ((v56 & 1) != 0)
      {
LABEL_34:
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v42 + 60) = OffsetAttribute2;
        *(_BYTE *)(v42 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v61 = *(_DWORD *)(a2 + 8);
        v112 = *(_QWORD *)(a2 + 16);
        v115 = *(_QWORD *)a2;
        v62 = *(_DWORD *)(a2 + 24);
        v63 = *(_QWORD *)(a2 + 32);
        v64 = *(_QWORD *)(a2 + 48);
        v105 = *(_QWORD *)(a2 + 40);
        v65 = *(_QWORD *)(a2 + 56);
        v99 = *(_QWORD *)(a2 + 72);
        v102 = *(_QWORD *)(a2 + 64);
        v94 = *(_DWORD *)(a2 + 80);
        v66 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v131[16] = *(_OWORD *)(a2 + 32);
        v132 = v66;
        v133 = *(_OWORD *)(a2 + 64);
        v134 = *(_DWORD *)(a2 + 80);
        v67 = *(_OWORD *)(a2 + 16);
        v130 = *(_OWORD *)a2;
        *(_OWORD *)v131 = v67;
        outlined retain of _ViewInputs(a2);
        v68 = _ViewInputs.geometryTransaction()();
        v69 = swift_getKeyPath();
        v70 = specialized CachedEnvironment.attribute<A>(keyPath:)(v69);
        swift_release();
        if ((*(_BYTE *)(v42 + 81) & 1) == 0
          && (_DWORD)v102 == *(_DWORD *)(v42 + 32)
          && (_DWORD)v99 == *(_DWORD *)(v42 + 36)
          && v70 == *(_DWORD *)(v42 + 40)
          && v61 == *(_DWORD *)(v42 + 44)
          && v68 == *(_DWORD *)(v42 + 48)
          && v62 == *(_DWORD *)(v42 + 52))
        {
          if ((*(_BYTE *)(v42 + 72) & 1) == 0)
          {
            v44 = *(_DWORD *)(v42 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(_QWORD *)&v130 = v115;
          DWORD2(v130) = v61;
          *(_QWORD *)v131 = v112;
          *(_DWORD *)&v131[8] = v62;
          *(_DWORD *)&v131[12] = v68;
          *(_QWORD *)&v131[16] = v63;
          *(_QWORD *)&v131[24] = v105;
          *(_QWORD *)&v132 = v64;
          *((_QWORD *)&v132 + 1) = v65;
          *(_QWORD *)&v133 = v102;
          *((_QWORD *)&v133 + 1) = v99;
          v134 = v94;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v70, (uint64_t)&v123);
          v44 = v126;
          v71 = v127;
          v72 = v129;
          v73 = v125 | ((unint64_t)v126 << 32);
          v74 = v127 | ((unint64_t)v128 << 32);
          v75 = v124;
          *(_OWORD *)(v42 + 32) = v123;
          *(_OWORD *)(v42 + 48) = v75;
          *(_QWORD *)(v42 + 64) = v73;
          *(_QWORD *)(v42 + 72) = v74;
          *(_WORD *)(v42 + 80) = v72;
          if ((v71 & 1) == 0)
            goto LABEL_48;
        }
        v44 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v42 + 68) = v44;
        *(_BYTE *)(v42 + 72) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v40 = (int *)MEMORY[0x24BE096C0];
        goto LABEL_49;
      }
      v60 = HIDWORD(*((_QWORD *)&v55 + 1));
    }
    OffsetAttribute2 = v60;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v40)
  {
    LODWORD(v123) = v39;
    v89 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v123);
    v89(&v130, 0);
    v40 = (int *)MEMORY[0x24BE096C0];
    v41 = v97;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, void (*a4)(uint64_t)@<X4>, unint64_t *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, unint64_t *a9)
{
  void (*v9)(uint64_t *__return_ptr, uint64_t, __int128 *);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t KeyPath;
  int v32;
  __int128 v33;
  uint64_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int *v44;
  char v45;
  uint64_t v46;
  int *v47;
  unsigned int OffsetAttribute2;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  unsigned __int8 v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned __int8 v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t result;
  void (*v93)(__int128 *, _QWORD);
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  int v128;
  Swift::UInt32 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  unsigned __int8 v134;
  unsigned int v135;
  unsigned __int8 v136;
  unsigned int v137;
  unsigned __int8 v138;
  __int128 v139;
  _BYTE v140[32];
  __int128 v141;
  __int128 v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;

  v9 = a3;
  v11 = a8;
  v147 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)a2;
  v126 = *(_DWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v127 = *(_OWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_DWORD *)(a2 + 68);
  v123 = *(_DWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v128 = *(_DWORD *)(a2 + 80);
  v19 = *(_OWORD *)(a2 + 32);
  v145 = *(_OWORD *)(a2 + 16);
  v146 = v19;
  v144 = *(_OWORD *)a2;
  v109 = WORD2(v19);
  v103 = v17;
  if ((BYTE4(v19) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v20) = v17;
    goto LABEL_16;
  }
  v118 = v14;
  v119 = v15;
  v120 = v12;
  v21 = v145;
  swift_beginAccess();
  v22 = *(_DWORD *)(a2 + 8);
  v112 = *(_QWORD *)(a2 + 16);
  v115 = *(_QWORD *)a2;
  v23 = *(_DWORD *)(a2 + 24);
  v24 = *(_QWORD *)(a2 + 32);
  v25 = *(_QWORD *)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 48);
  v27 = *(_QWORD *)(a2 + 56);
  v95 = *(_QWORD *)(a2 + 72);
  v96 = *(_QWORD *)(a2 + 64);
  v94 = *(_DWORD *)(a2 + 80);
  v28 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
  v141 = v28;
  v142 = *(_OWORD *)(a2 + 64);
  v143 = *(_DWORD *)(a2 + 80);
  v29 = *(_OWORD *)(a2 + 16);
  v139 = *(_OWORD *)a2;
  *(_OWORD *)v140 = v29;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v30 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v32 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v145 + 81) & 1) != 0
    || (_DWORD)v96 != *(_DWORD *)(v145 + 32)
    || (_DWORD)v95 != *(_DWORD *)(v145 + 36)
    || v32 != *(_DWORD *)(v145 + 40)
    || v22 != *(_DWORD *)(v145 + 44)
    || v30 != *(_DWORD *)(v145 + 48)
    || v23 != *(_DWORD *)(v145 + 52))
  {
    *(_QWORD *)&v139 = v115;
    DWORD2(v139) = v22;
    *(_QWORD *)v140 = v112;
    *(_DWORD *)&v140[8] = v23;
    *(_DWORD *)&v140[12] = v30;
    *(_QWORD *)&v140[16] = v24;
    *(_QWORD *)&v140[24] = v25;
    *(_QWORD *)&v141 = v26;
    *((_QWORD *)&v141 + 1) = v27;
    *(_QWORD *)&v142 = v96;
    *((_QWORD *)&v142 + 1) = v95;
    v143 = v94;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v32, (uint64_t)&v132);
    v33 = v133;
    v34 = v134;
    v35 = v138;
    v36 = v134 | ((unint64_t)v135 << 32);
    v37 = v136 | ((unint64_t)v137 << 32);
    *(_OWORD *)(v21 + 32) = v132;
    *(_OWORD *)(v21 + 48) = v33;
    *(_QWORD *)(v21 + 64) = v36;
    *(_QWORD *)(v21 + 72) = v37;
    *(_WORD *)(v21 + 80) = v35;
    if (v34 != 1)
    {
      v20 = HIDWORD(*((_QWORD *)&v33 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v145 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v20) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v21 + 60) = v20;
    *(_BYTE *)(v21 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v20) = *(_DWORD *)(v145 + 60);
LABEL_15:
  v12 = v120;
  v11 = a8;
  v15 = v119;
  v9 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v14 = v118;
LABEL_16:
  *(_QWORD *)&v139 = v12;
  DWORD2(v139) = v126;
  *(_QWORD *)v140 = v13;
  *(_OWORD *)&v140[8] = v127;
  *(_QWORD *)&v140[24] = v15;
  *(_QWORD *)&v141 = v14;
  *((_QWORD *)&v141 + 1) = v16;
  *(_QWORD *)&v142 = __PAIR64__(v20, v123);
  *((_QWORD *)&v142 + 1) = v18;
  v143 = v128;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v38 = swift_bridgeObjectRetain();
  v9(&v130, v38, &v139);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v39 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v41 = *(_QWORD *)(v39 + 16);
  if (!v41)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v11 = v130;
    v11[1] = v131;
    return result;
  }
  v42 = v40;
  v43 = (_QWORD *)(v39 + 32);
  while (*v43 != v40)
  {
    v43 += 2;
    if (!--v41)
      goto LABEL_57;
  }
  v129 = ++lastIdentity;
  v44 = (int *)MEMORY[0x24BE096C0];
  v45 = v109;
  if ((v109 & 0x100) == 0)
  {
LABEL_22:
    v122 = v11;
    v46 = v145;
    v47 = (int *)(v145 + 16);
    swift_beginAccess();
    if ((v45 & 0x20) == 0)
    {
      LODWORD(v124) = *(_DWORD *)(a2 + 64);
      OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      v79 = *v47;
      *(_QWORD *)&v139 = v130;
      DWORD2(v139) = v131;
      v80 = PreferencesOutputs.subscript.getter(v42);
      if ((v80 & 0x100000000) != 0)
        v81 = *v44;
      else
        v81 = v80;
      v82 = v144;
      *(_QWORD *)&v132 = v144;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v144);
      outlined retain of ViewTransform((uint64_t)&v132);
      v83 = specialized find<A>(_:key:)(v82);
      if (v83)
        v84 = *(_BYTE *)(v83 + 72);
      else
        v84 = 0;
      v11 = v122;
      outlined release of ViewTransform((uint64_t)&v132);
      outlined release of _GraphInputs((uint64_t)&v144);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v144);
      outlined retain of ViewTransform((uint64_t)&v132);
      v85 = specialized find<A>(_:key:)(v82);
      if (v85)
        v86 = *(_DWORD *)(v85 + 72);
      else
        v86 = 0;
      v87 = *(_DWORD *)(a2 + 60);
      v88 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v132);
      outlined release of _GraphInputs((uint64_t)&v144);
      outlined release of _ViewInputs(a2);
      v89 = outlined release of _ViewInputs(a2);
      *(_QWORD *)&v139 = __PAIR64__(a1, v129);
      *((_QWORD *)&v139 + 1) = __PAIR64__(OffsetAttribute2, v124);
      *(_DWORD *)v140 = v87;
      *(_DWORD *)&v140[4] = v103;
      *(_DWORD *)&v140[8] = v79;
      *(_DWORD *)&v140[12] = v88;
      *(_DWORD *)&v140[16] = v81;
      v140[20] = v84;
      *(_DWORD *)&v140[24] = 0;
      *(_DWORD *)&v140[28] = v86;
      a4(v89);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a5, a6, a7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(a9, a5, a6, a7);
      v90 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v139) = 0;
      PreferencesOutputs.subscript.setter(v90, v42, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v91);
      goto LABEL_57;
    }
    v49 = *(_QWORD *)a2;
    v50 = *(_DWORD *)(a2 + 8);
    v51 = *(_DWORD *)(a2 + 24);
    v52 = *(_QWORD *)(a2 + 32);
    v113 = *(_QWORD *)(a2 + 40);
    v116 = *(_QWORD *)(a2 + 16);
    v110 = *(_QWORD *)(a2 + 48);
    v53 = *(_QWORD *)(a2 + 56);
    v125 = *(_QWORD *)(a2 + 64);
    v101 = *(_QWORD *)(a2 + 72);
    v98 = *(_DWORD *)(a2 + 80);
    v54 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
    v141 = v54;
    v142 = *(_OWORD *)(a2 + 64);
    v143 = *(_DWORD *)(a2 + 80);
    v55 = *(_OWORD *)(a2 + 16);
    v139 = *(_OWORD *)a2;
    *(_OWORD *)v140 = v55;
    outlined retain of _ViewInputs(a2);
    v56 = _ViewInputs.geometryTransaction()();
    v57 = swift_getKeyPath();
    v58 = specialized CachedEnvironment.attribute<A>(keyPath:)(v57);
    swift_release();
    if ((*(_BYTE *)(v46 + 81) & 1) == 0
      && (_DWORD)v125 == *(_DWORD *)(v46 + 32)
      && (_DWORD)v101 == *(_DWORD *)(v46 + 36)
      && v58 == *(_DWORD *)(v46 + 40)
      && v50 == *(_DWORD *)(v46 + 44)
      && v56 == *(_DWORD *)(v46 + 48)
      && v51 == *(_DWORD *)(v46 + 52))
    {
      if ((*(_BYTE *)(v46 + 64) & 1) == 0)
      {
        LODWORD(v124) = *(_DWORD *)(v46 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)&v139 = v49;
      DWORD2(v139) = v50;
      *(_QWORD *)v140 = v116;
      *(_DWORD *)&v140[8] = v51;
      *(_DWORD *)&v140[12] = v56;
      *(_QWORD *)&v140[16] = v52;
      *(_QWORD *)&v140[24] = v113;
      *(_QWORD *)&v141 = v110;
      *((_QWORD *)&v141 + 1) = v53;
      *(_QWORD *)&v142 = v125;
      *((_QWORD *)&v142 + 1) = v101;
      v143 = v98;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v58, (uint64_t)&v132);
      v59 = v133;
      v60 = v134;
      v61 = v138;
      v62 = v134 | ((unint64_t)v135 << 32);
      v63 = v136 | ((unint64_t)v137 << 32);
      *(_OWORD *)(v46 + 32) = v132;
      *(_OWORD *)(v46 + 48) = v59;
      *(_QWORD *)(v46 + 64) = v62;
      *(_QWORD *)(v46 + 72) = v63;
      *(_WORD *)(v46 + 80) = v61;
      if (v60 != 1)
      {
        v124 = HIDWORD(*((_QWORD *)&v59 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v64 = *(_DWORD *)(a2 + 8);
        v117 = *(_QWORD *)(a2 + 16);
        v65 = *(_DWORD *)(a2 + 24);
        v66 = *(_QWORD *)(a2 + 32);
        v67 = *(_QWORD *)(a2 + 48);
        v111 = *(_QWORD *)a2;
        v114 = *(_QWORD *)(a2 + 40);
        v68 = *(_QWORD *)(a2 + 56);
        v99 = *(_QWORD *)(a2 + 72);
        v102 = *(_QWORD *)(a2 + 64);
        v97 = *(_DWORD *)(a2 + 80);
        v69 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
        v141 = v69;
        v142 = *(_OWORD *)(a2 + 64);
        v143 = *(_DWORD *)(a2 + 80);
        v70 = *(_OWORD *)(a2 + 16);
        v139 = *(_OWORD *)a2;
        *(_OWORD *)v140 = v70;
        outlined retain of _ViewInputs(a2);
        v71 = _ViewInputs.geometryTransaction()();
        v72 = swift_getKeyPath();
        v73 = specialized CachedEnvironment.attribute<A>(keyPath:)(v72);
        swift_release();
        if ((*(_BYTE *)(v46 + 81) & 1) == 0
          && (_DWORD)v102 == *(_DWORD *)(v46 + 32)
          && (_DWORD)v99 == *(_DWORD *)(v46 + 36)
          && v73 == *(_DWORD *)(v46 + 40)
          && v64 == *(_DWORD *)(v46 + 44)
          && v71 == *(_DWORD *)(v46 + 48)
          && v65 == *(_DWORD *)(v46 + 52))
        {
          v44 = (int *)MEMORY[0x24BE096C0];
          if ((*(_BYTE *)(v46 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v46 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(_QWORD *)&v139 = v111;
          DWORD2(v139) = v64;
          *(_QWORD *)v140 = v117;
          *(_DWORD *)&v140[8] = v65;
          *(_DWORD *)&v140[12] = v71;
          *(_QWORD *)&v140[16] = v66;
          *(_QWORD *)&v140[24] = v114;
          *(_QWORD *)&v141 = v67;
          *((_QWORD *)&v141 + 1) = v68;
          *(_QWORD *)&v142 = v102;
          *((_QWORD *)&v142 + 1) = v99;
          v143 = v97;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v73, (uint64_t)&v132);
          OffsetAttribute2 = v135;
          v74 = v136;
          v75 = v138;
          v76 = v134 | ((unint64_t)v135 << 32);
          v77 = v136 | ((unint64_t)v137 << 32);
          v78 = v133;
          *(_OWORD *)(v46 + 32) = v132;
          *(_OWORD *)(v46 + 48) = v78;
          *(_QWORD *)(v46 + 64) = v76;
          *(_QWORD *)(v46 + 72) = v77;
          *(_WORD *)(v46 + 80) = v75;
          v44 = (int *)MEMORY[0x24BE096C0];
          if (v74 != 1)
            goto LABEL_46;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v46 + 68) = OffsetAttribute2;
        *(_BYTE *)(v46 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_47;
      }
    }
    LODWORD(v124) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v46 + 60) = v124;
    *(_BYTE *)(v46 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v44)
  {
    LODWORD(v132) = v129;
    v93 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v132);
    v93(&v139, 0);
    v45 = v109;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  void (*v9)(uint64_t *__return_ptr, uint64_t, __int128 *);
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t KeyPath;
  int v32;
  __int128 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int *v44;
  char v45;
  uint64_t v46;
  int *v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  int v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t result;
  void (*v94)(__int128 *, _QWORD);
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  int v104;
  __int16 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v123;
  unsigned int v124;
  unsigned int OffsetAttribute2;
  uint64_t v126;
  int v127;
  __int128 v128;
  int v129;
  Swift::UInt32 v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  unsigned __int8 v135;
  unsigned int v136;
  unsigned __int8 v137;
  unsigned int v138;
  unsigned __int8 v139;
  __int128 v140;
  _BYTE v141[32];
  __int128 v142;
  __int128 v143;
  int v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;

  v9 = a3;
  v11 = a8;
  v148 = *MEMORY[0x24BDAC8D0];
  v12 = *(_OWORD *)(a2 + 32);
  v146 = *(_OWORD *)(a2 + 16);
  v147 = v12;
  v145 = *(_OWORD *)a2;
  v13 = *(_QWORD *)a2;
  v127 = *(_DWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  v128 = *(_OWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  v18 = *(_DWORD *)(a2 + 68);
  v124 = *(_DWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a2 + 72);
  v129 = *(_DWORD *)(a2 + 80);
  v104 = v18;
  v110 = WORD2(v12);
  if ((BYTE4(v12) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v20) = v18;
    goto LABEL_16;
  }
  v119 = *(_QWORD *)(a2 + 48);
  v120 = *(_QWORD *)(a2 + 40);
  v121 = *(_QWORD *)a2;
  v21 = v146;
  swift_beginAccess();
  v22 = *(_DWORD *)(a2 + 8);
  v113 = *(_QWORD *)(a2 + 16);
  v116 = *(_QWORD *)a2;
  v23 = *(_DWORD *)(a2 + 24);
  v24 = *(_QWORD *)(a2 + 32);
  v25 = *(_QWORD *)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 48);
  v27 = *(_QWORD *)(a2 + 56);
  v96 = *(_QWORD *)(a2 + 72);
  v97 = *(_QWORD *)(a2 + 64);
  v95 = *(_DWORD *)(a2 + 80);
  v28 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v141[16] = *(_OWORD *)(a2 + 32);
  v142 = v28;
  v143 = *(_OWORD *)(a2 + 64);
  v144 = *(_DWORD *)(a2 + 80);
  v29 = *(_OWORD *)(a2 + 16);
  v140 = *(_OWORD *)a2;
  *(_OWORD *)v141 = v29;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v30 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v32 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v146 + 81) & 1) != 0
    || (_DWORD)v97 != *(_DWORD *)(v146 + 32)
    || (_DWORD)v96 != *(_DWORD *)(v146 + 36)
    || v32 != *(_DWORD *)(v146 + 40)
    || v22 != *(_DWORD *)(v146 + 44)
    || v30 != *(_DWORD *)(v146 + 48)
    || v23 != *(_DWORD *)(v146 + 52))
  {
    *(_QWORD *)&v140 = v116;
    DWORD2(v140) = v22;
    *(_QWORD *)v141 = v113;
    *(_DWORD *)&v141[8] = v23;
    *(_DWORD *)&v141[12] = v30;
    *(_QWORD *)&v141[16] = v24;
    *(_QWORD *)&v141[24] = v25;
    *(_QWORD *)&v142 = v26;
    *((_QWORD *)&v142 + 1) = v27;
    *(_QWORD *)&v143 = v97;
    *((_QWORD *)&v143 + 1) = v96;
    v144 = v95;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v140, v32, (uint64_t)&v133);
    v33 = v134;
    v34 = v135;
    v35 = v139;
    v36 = v135 | ((unint64_t)v136 << 32);
    v37 = v137 | ((unint64_t)v138 << 32);
    *(_OWORD *)(v21 + 32) = v133;
    *(_OWORD *)(v21 + 48) = v33;
    *(_QWORD *)(v21 + 64) = v36;
    *(_QWORD *)(v21 + 72) = v37;
    *(_WORD *)(v21 + 80) = v35;
    if ((v34 & 1) == 0)
    {
      v20 = HIDWORD(*((_QWORD *)&v33 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v146 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v20) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v21 + 60) = v20;
    *(_BYTE *)(v21 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v20) = *(_DWORD *)(v146 + 60);
LABEL_15:
  v13 = v121;
  v16 = v119;
  v15 = v120;
  v9 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v11 = a8;
LABEL_16:
  *(_QWORD *)&v140 = v13;
  DWORD2(v140) = v127;
  *(_QWORD *)v141 = v14;
  *(_OWORD *)&v141[8] = v128;
  *(_QWORD *)&v141[24] = v15;
  *(_QWORD *)&v142 = v16;
  *((_QWORD *)&v142 + 1) = v17;
  *(_QWORD *)&v143 = __PAIR64__(v20, v124);
  *((_QWORD *)&v143 + 1) = v19;
  v144 = v129;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v38 = swift_bridgeObjectRetain();
  v9(&v131, v38, &v140);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v39 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v41 = *(_QWORD *)(v39 + 16);
  if (!v41)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v11 = v131;
    v11[1] = v132;
    return result;
  }
  v42 = v40;
  v43 = (_QWORD *)(v39 + 32);
  while (*v43 != v40)
  {
    v43 += 2;
    if (!--v41)
      goto LABEL_59;
  }
  v130 = ++lastIdentity;
  v44 = (int *)MEMORY[0x24BE096C0];
  v45 = v110;
  if ((v110 & 0x100) == 0)
  {
LABEL_22:
    v46 = v146;
    v47 = (int *)(v146 + 16);
    swift_beginAccess();
    v123 = v11;
    if ((v45 & 0x20) == 0)
    {
      OffsetAttribute2 = *(_DWORD *)(a2 + 64);
      v48 = *(_DWORD *)(a2 + 72);
LABEL_49:
      swift_endAccess();
      v80 = *v47;
      *(_QWORD *)&v140 = v131;
      DWORD2(v140) = v132;
      v81 = PreferencesOutputs.subscript.getter(v42);
      if ((v81 & 0x100000000) != 0)
        v82 = *v44;
      else
        v82 = v81;
      v83 = v145;
      *(_QWORD *)&v133 = v145;
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v133);
      outlined retain of _GraphInputs((uint64_t)&v145);
      v84 = specialized find<A>(_:key:)(v83);
      if (v84)
        v85 = *(_BYTE *)(v84 + 72);
      else
        v85 = 0;
      outlined release of ViewTransform((uint64_t)&v133);
      outlined release of _GraphInputs((uint64_t)&v145);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v133);
      outlined retain of _GraphInputs((uint64_t)&v145);
      v86 = specialized find<A>(_:key:)(v83);
      if (v86)
        v87 = *(_DWORD *)(v86 + 72);
      else
        v87 = 0;
      v88 = *(_DWORD *)(a2 + 60);
      v89 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v133);
      outlined release of _GraphInputs((uint64_t)&v145);
      v90 = outlined release of _ViewInputs(a2);
      *(_QWORD *)&v140 = __PAIR64__(a1, v130);
      *((_QWORD *)&v140 + 1) = __PAIR64__(v48, OffsetAttribute2);
      *(_DWORD *)v141 = v88;
      *(_DWORD *)&v141[4] = v104;
      *(_DWORD *)&v141[8] = v80;
      *(_DWORD *)&v141[12] = v89;
      *(_DWORD *)&v141[16] = v82;
      v141[20] = v85;
      *(_DWORD *)&v141[24] = 0;
      *(_DWORD *)&v141[28] = v87;
      a4(v90);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a5, a6, a7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(a9, a5, a6, a7);
      v91 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v140) = 0;
      PreferencesOutputs.subscript.setter(v91, v42, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v92);
      v11 = v123;
      goto LABEL_59;
    }
    v49 = *(_QWORD *)a2;
    v50 = *(_DWORD *)(a2 + 8);
    v51 = *(_DWORD *)(a2 + 24);
    v52 = *(_QWORD *)(a2 + 32);
    v114 = *(_QWORD *)(a2 + 40);
    v117 = *(_QWORD *)(a2 + 16);
    v111 = *(_QWORD *)(a2 + 48);
    v53 = *(_QWORD *)(a2 + 56);
    v126 = *(_QWORD *)(a2 + 64);
    v102 = *(_QWORD *)(a2 + 72);
    v99 = *(_DWORD *)(a2 + 80);
    v54 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v141[16] = *(_OWORD *)(a2 + 32);
    v142 = v54;
    v143 = *(_OWORD *)(a2 + 64);
    v144 = *(_DWORD *)(a2 + 80);
    v55 = *(_OWORD *)(a2 + 16);
    v140 = *(_OWORD *)a2;
    *(_OWORD *)v141 = v55;
    outlined retain of _ViewInputs(a2);
    v56 = _ViewInputs.geometryTransaction()();
    v57 = swift_getKeyPath();
    v58 = specialized CachedEnvironment.attribute<A>(keyPath:)(v57);
    swift_release();
    if ((*(_BYTE *)(v46 + 81) & 1) == 0
      && (_DWORD)v126 == *(_DWORD *)(v46 + 32)
      && (_DWORD)v102 == *(_DWORD *)(v46 + 36)
      && v58 == *(_DWORD *)(v46 + 40)
      && v50 == *(_DWORD *)(v46 + 44)
      && v56 == *(_DWORD *)(v46 + 48)
      && v51 == *(_DWORD *)(v46 + 52))
    {
      if ((*(_BYTE *)(v46 + 64) & 1) != 0)
        goto LABEL_34;
      LODWORD(v64) = *(_DWORD *)(v46 + 60);
    }
    else
    {
      *(_QWORD *)&v140 = v49;
      DWORD2(v140) = v50;
      *(_QWORD *)v141 = v117;
      *(_DWORD *)&v141[8] = v51;
      *(_DWORD *)&v141[12] = v56;
      *(_QWORD *)&v141[16] = v52;
      *(_QWORD *)&v141[24] = v114;
      *(_QWORD *)&v142 = v111;
      *((_QWORD *)&v142 + 1) = v53;
      *(_QWORD *)&v143 = v126;
      *((_QWORD *)&v143 + 1) = v102;
      v144 = v99;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v140, v58, (uint64_t)&v133);
      v59 = v134;
      v60 = v135;
      v61 = v139;
      v62 = v135 | ((unint64_t)v136 << 32);
      v63 = v137 | ((unint64_t)v138 << 32);
      *(_OWORD *)(v46 + 32) = v133;
      *(_OWORD *)(v46 + 48) = v59;
      *(_QWORD *)(v46 + 64) = v62;
      *(_QWORD *)(v46 + 72) = v63;
      *(_WORD *)(v46 + 80) = v61;
      if ((v60 & 1) != 0)
      {
LABEL_34:
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v46 + 60) = OffsetAttribute2;
        *(_BYTE *)(v46 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v65 = *(_DWORD *)(a2 + 8);
        v115 = *(_QWORD *)(a2 + 16);
        v118 = *(_QWORD *)a2;
        v66 = *(_DWORD *)(a2 + 24);
        v67 = *(_QWORD *)(a2 + 32);
        v68 = *(_QWORD *)(a2 + 48);
        v112 = *(_QWORD *)(a2 + 40);
        v69 = *(_QWORD *)(a2 + 56);
        v100 = *(_QWORD *)(a2 + 72);
        v103 = *(_QWORD *)(a2 + 64);
        v98 = *(_DWORD *)(a2 + 80);
        v70 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v141[16] = *(_OWORD *)(a2 + 32);
        v142 = v70;
        v143 = *(_OWORD *)(a2 + 64);
        v144 = *(_DWORD *)(a2 + 80);
        v71 = *(_OWORD *)(a2 + 16);
        v140 = *(_OWORD *)a2;
        *(_OWORD *)v141 = v71;
        outlined retain of _ViewInputs(a2);
        v72 = _ViewInputs.geometryTransaction()();
        v73 = swift_getKeyPath();
        v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
        swift_release();
        if ((*(_BYTE *)(v46 + 81) & 1) == 0
          && (_DWORD)v103 == *(_DWORD *)(v46 + 32)
          && (_DWORD)v100 == *(_DWORD *)(v46 + 36)
          && v74 == *(_DWORD *)(v46 + 40)
          && v65 == *(_DWORD *)(v46 + 44)
          && v72 == *(_DWORD *)(v46 + 48)
          && v66 == *(_DWORD *)(v46 + 52))
        {
          if ((*(_BYTE *)(v46 + 72) & 1) == 0)
          {
            v48 = *(_DWORD *)(v46 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(_QWORD *)&v140 = v118;
          DWORD2(v140) = v65;
          *(_QWORD *)v141 = v115;
          *(_DWORD *)&v141[8] = v66;
          *(_DWORD *)&v141[12] = v72;
          *(_QWORD *)&v141[16] = v67;
          *(_QWORD *)&v141[24] = v112;
          *(_QWORD *)&v142 = v68;
          *((_QWORD *)&v142 + 1) = v69;
          *(_QWORD *)&v143 = v103;
          *((_QWORD *)&v143 + 1) = v100;
          v144 = v98;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v140, v74, (uint64_t)&v133);
          v48 = v136;
          v75 = v137;
          v76 = v139;
          v77 = v135 | ((unint64_t)v136 << 32);
          v78 = v137 | ((unint64_t)v138 << 32);
          v79 = v134;
          *(_OWORD *)(v46 + 32) = v133;
          *(_OWORD *)(v46 + 48) = v79;
          *(_QWORD *)(v46 + 64) = v77;
          *(_QWORD *)(v46 + 72) = v78;
          *(_WORD *)(v46 + 80) = v76;
          if ((v75 & 1) == 0)
            goto LABEL_48;
        }
        v48 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v46 + 68) = v48;
        *(_BYTE *)(v46 + 72) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v44 = (int *)MEMORY[0x24BE096C0];
        goto LABEL_49;
      }
      v64 = HIDWORD(*((_QWORD *)&v59 + 1));
    }
    OffsetAttribute2 = v64;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v44)
  {
    LODWORD(v133) = v130;
    v94 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v133);
    v94(&v140, 0);
    v44 = (int *)MEMORY[0x24BE096C0];
    v45 = v110;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  void (*v4)(_QWORD *__return_ptr, uint64_t, __int128 *);
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t KeyPath;
  int v28;
  __int128 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t result;
  void (*v89)(__int128 *, _QWORD);
  int v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v94;
  int v95;
  int v96;
  int v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  unsigned int OffsetAttribute2;
  uint64_t v118;
  Swift::UInt32 v119;
  _QWORD v120[2];
  __int128 v121;
  __int128 v122;
  unsigned __int8 v123;
  unsigned int v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned __int8 v127;
  __int128 v128;
  _BYTE v129[32];
  __int128 v130;
  __int128 v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;

  v4 = a3;
  v6 = a4;
  v136 = *MEMORY[0x24BDAC8D0];
  v7 = *(_OWORD *)(a2 + 32);
  v134 = *(_OWORD *)(a2 + 16);
  v135 = v7;
  v133 = *(_OWORD *)a2;
  v8 = *(_QWORD *)a2;
  v112 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v115 = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 68);
  v109 = *(_DWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v116 = *(_DWORD *)(a2 + 80);
  v15 = WORD2(v7);
  v97 = v13;
  if ((BYTE4(v7) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v16) = v13;
    goto LABEL_16;
  }
  v94 = WORD2(v7);
  v105 = *(_QWORD *)(a2 + 48);
  v106 = *(_QWORD *)(a2 + 40);
  v17 = v134;
  swift_beginAccess();
  v102 = *(_QWORD *)a2;
  v18 = *(_DWORD *)(a2 + 8);
  v99 = *(_QWORD *)(a2 + 16);
  v19 = *(_DWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_QWORD *)(a2 + 56);
  v91 = *(_QWORD *)(a2 + 72);
  v92 = *(_QWORD *)(a2 + 64);
  v90 = *(_DWORD *)(a2 + 80);
  v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v129[16] = *(_OWORD *)(a2 + 32);
  v130 = v24;
  v131 = *(_OWORD *)(a2 + 64);
  v132 = *(_DWORD *)(a2 + 80);
  v25 = *(_OWORD *)(a2 + 16);
  v128 = *(_OWORD *)a2;
  *(_OWORD *)v129 = v25;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v26 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v28 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v134 + 81) & 1) != 0
    || (_DWORD)v92 != *(_DWORD *)(v134 + 32)
    || (_DWORD)v91 != *(_DWORD *)(v134 + 36)
    || v28 != *(_DWORD *)(v134 + 40)
    || v18 != *(_DWORD *)(v134 + 44)
    || v26 != *(_DWORD *)(v134 + 48)
    || v19 != *(_DWORD *)(v134 + 52))
  {
    *(_QWORD *)&v128 = v102;
    DWORD2(v128) = v18;
    *(_QWORD *)v129 = v99;
    *(_DWORD *)&v129[8] = v19;
    *(_DWORD *)&v129[12] = v26;
    *(_QWORD *)&v129[16] = v20;
    *(_QWORD *)&v129[24] = v21;
    *(_QWORD *)&v130 = v22;
    *((_QWORD *)&v130 + 1) = v23;
    *(_QWORD *)&v131 = v92;
    *((_QWORD *)&v131 + 1) = v91;
    v132 = v90;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v28, (uint64_t)&v121);
    v29 = v122;
    v30 = v123;
    v31 = v127;
    v32 = v123 | ((unint64_t)v124 << 32);
    v33 = v125 | ((unint64_t)v126 << 32);
    *(_OWORD *)(v17 + 32) = v121;
    *(_OWORD *)(v17 + 48) = v29;
    *(_QWORD *)(v17 + 64) = v32;
    *(_QWORD *)(v17 + 72) = v33;
    *(_WORD *)(v17 + 80) = v31;
    if ((v30 & 1) == 0)
    {
      v16 = HIDWORD(*((_QWORD *)&v29 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v134 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v16) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v17 + 60) = v16;
    *(_BYTE *)(v17 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v16) = *(_DWORD *)(v134 + 60);
LABEL_15:
  v6 = a4;
  v11 = v106;
  v4 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v10 = v105;
  v15 = v94;
LABEL_16:
  *(_QWORD *)&v128 = v8;
  DWORD2(v128) = v112;
  *(_QWORD *)v129 = v9;
  *(_OWORD *)&v129[8] = v115;
  *(_QWORD *)&v129[24] = v11;
  *(_QWORD *)&v130 = v10;
  *((_QWORD *)&v130 + 1) = v12;
  *(_QWORD *)&v131 = __PAIR64__(v16, v109);
  *((_QWORD *)&v131 + 1) = v14;
  v132 = v116;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v34 = swift_bridgeObjectRetain();
  v4(v120, v34, &v128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v35 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v37 = *(_QWORD *)(v35 + 16);
  if (!v37)
  {
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v6 = v120[0];
    v6[1] = v120[1];
    return result;
  }
  v38 = v36;
  v39 = (_QWORD *)(v35 + 32);
  while (*v39 != v36)
  {
    v39 += 2;
    if (!--v37)
      goto LABEL_62;
  }
  v119 = ++lastIdentity;
  if ((v15 & 0x100) == 0)
  {
LABEL_22:
    v108 = v6;
    v40 = v134;
    v41 = (int *)(v134 + 16);
    swift_beginAccess();
    if ((v15 & 0x20) == 0)
    {
      OffsetAttribute2 = *(_DWORD *)(a2 + 64);
      v42 = *(_DWORD *)(a2 + 72);
LABEL_49:
      swift_endAccess();
      v75 = *(_QWORD *)(v120[0] + 16);
      v6 = v108;
      if (v75)
      {
        v76 = (_DWORD *)(v120[0] + 48);
        while (*((_QWORD *)v76 - 2) != v38)
        {
          v76 += 6;
          if (!--v75)
          {
            v76 = (_DWORD *)MEMORY[0x24BE096C0];
            break;
          }
        }
      }
      else
      {
        v76 = (_DWORD *)MEMORY[0x24BE096C0];
      }
      v77 = *v41;
      v78 = *v76;
      v79 = v133;
      *(_QWORD *)&v121 = v133;
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v121);
      outlined retain of _GraphInputs((uint64_t)&v133);
      v80 = specialized find<A>(_:key:)(v79);
      if (v80)
        v81 = *(_BYTE *)(v80 + 72);
      else
        v81 = 0;
      outlined release of ViewTransform((uint64_t)&v121);
      outlined release of _GraphInputs((uint64_t)&v133);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v121);
      outlined retain of _GraphInputs((uint64_t)&v133);
      v82 = specialized find<A>(_:key:)(v79);
      if (v82)
        v83 = *(_DWORD *)(v82 + 72);
      else
        v83 = 0;
      v84 = *(_DWORD *)(a2 + 60);
      v85 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v121);
      outlined release of _GraphInputs((uint64_t)&v133);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v128 = __PAIR64__(a1, v119);
      *((_QWORD *)&v128 + 1) = __PAIR64__(v42, OffsetAttribute2);
      *(_DWORD *)v129 = v84;
      *(_DWORD *)&v129[4] = v97;
      *(_DWORD *)&v129[8] = v77;
      *(_DWORD *)&v129[12] = v85;
      *(_DWORD *)&v129[16] = v78;
      v129[20] = v81;
      *(_DWORD *)&v129[24] = 0;
      *(_DWORD *)&v129[28] = v83;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<ViewListArchivedAnimation.Effect>, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ViewListArchivedAnimation.Effect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<ViewListArchivedAnimation.Effect>, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect);
      v86 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v128) = 0;
      PreferencesOutputs.subscript.setter(v86, v38, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v87);
      goto LABEL_62;
    }
    v43 = *(_QWORD *)a2;
    v44 = *(_DWORD *)(a2 + 8);
    v45 = *(_DWORD *)(a2 + 24);
    v46 = *(_QWORD *)(a2 + 32);
    v110 = *(_QWORD *)(a2 + 40);
    v113 = *(_QWORD *)(a2 + 16);
    v103 = *(_QWORD *)(a2 + 48);
    v47 = *(_QWORD *)(a2 + 56);
    v118 = *(_QWORD *)(a2 + 64);
    v100 = *(_QWORD *)(a2 + 72);
    v95 = *(_DWORD *)(a2 + 80);
    v48 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v129[16] = *(_OWORD *)(a2 + 32);
    v130 = v48;
    v131 = *(_OWORD *)(a2 + 64);
    v132 = *(_DWORD *)(a2 + 80);
    v49 = *(_OWORD *)(a2 + 16);
    v128 = *(_OWORD *)a2;
    *(_OWORD *)v129 = v49;
    outlined retain of _ViewInputs(a2);
    v50 = _ViewInputs.geometryTransaction()();
    v51 = swift_getKeyPath();
    v52 = specialized CachedEnvironment.attribute<A>(keyPath:)(v51);
    swift_release();
    if ((*(_BYTE *)(v40 + 81) & 1) == 0
      && (_DWORD)v118 == *(_DWORD *)(v40 + 32)
      && (_DWORD)v100 == *(_DWORD *)(v40 + 36)
      && v52 == *(_DWORD *)(v40 + 40)
      && v44 == *(_DWORD *)(v40 + 44)
      && v50 == *(_DWORD *)(v40 + 48)
      && v45 == *(_DWORD *)(v40 + 52))
    {
      if ((*(_BYTE *)(v40 + 64) & 1) != 0)
        goto LABEL_34;
      LODWORD(v58) = *(_DWORD *)(v40 + 60);
    }
    else
    {
      *(_QWORD *)&v128 = v43;
      DWORD2(v128) = v44;
      *(_QWORD *)v129 = v113;
      *(_DWORD *)&v129[8] = v45;
      *(_DWORD *)&v129[12] = v50;
      *(_QWORD *)&v129[16] = v46;
      *(_QWORD *)&v129[24] = v110;
      *(_QWORD *)&v130 = v103;
      *((_QWORD *)&v130 + 1) = v47;
      *(_QWORD *)&v131 = v118;
      *((_QWORD *)&v131 + 1) = v100;
      v132 = v95;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v52, (uint64_t)&v121);
      v53 = v122;
      v54 = v123;
      v55 = v127;
      v56 = v123 | ((unint64_t)v124 << 32);
      v57 = v125 | ((unint64_t)v126 << 32);
      *(_OWORD *)(v40 + 32) = v121;
      *(_OWORD *)(v40 + 48) = v53;
      *(_QWORD *)(v40 + 64) = v56;
      *(_QWORD *)(v40 + 72) = v57;
      *(_WORD *)(v40 + 80) = v55;
      if ((v54 & 1) != 0)
      {
LABEL_34:
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v40 + 60) = OffsetAttribute2;
        *(_BYTE *)(v40 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v59 = *(_QWORD *)a2;
        v60 = *(_DWORD *)(a2 + 8);
        v61 = *(_DWORD *)(a2 + 24);
        v62 = *(_QWORD *)(a2 + 32);
        v63 = *(_QWORD *)(a2 + 48);
        v111 = *(_QWORD *)(a2 + 16);
        v114 = *(_QWORD *)(a2 + 40);
        v64 = *(_QWORD *)(a2 + 56);
        v101 = *(_QWORD *)(a2 + 72);
        v104 = *(_QWORD *)(a2 + 64);
        v96 = *(_DWORD *)(a2 + 80);
        v65 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v129[16] = *(_OWORD *)(a2 + 32);
        v130 = v65;
        v131 = *(_OWORD *)(a2 + 64);
        v132 = *(_DWORD *)(a2 + 80);
        v66 = *(_OWORD *)(a2 + 16);
        v128 = *(_OWORD *)a2;
        *(_OWORD *)v129 = v66;
        outlined retain of _ViewInputs(a2);
        v67 = _ViewInputs.geometryTransaction()();
        v68 = swift_getKeyPath();
        v69 = specialized CachedEnvironment.attribute<A>(keyPath:)(v68);
        swift_release();
        if ((*(_BYTE *)(v40 + 81) & 1) == 0
          && (_DWORD)v104 == *(_DWORD *)(v40 + 32)
          && (_DWORD)v101 == *(_DWORD *)(v40 + 36)
          && v69 == *(_DWORD *)(v40 + 40)
          && v60 == *(_DWORD *)(v40 + 44)
          && v67 == *(_DWORD *)(v40 + 48)
          && v61 == *(_DWORD *)(v40 + 52))
        {
          if ((*(_BYTE *)(v40 + 72) & 1) == 0)
          {
            v42 = *(_DWORD *)(v40 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(_QWORD *)&v128 = v59;
          DWORD2(v128) = v60;
          *(_QWORD *)v129 = v111;
          *(_DWORD *)&v129[8] = v61;
          *(_DWORD *)&v129[12] = v67;
          *(_QWORD *)&v129[16] = v62;
          *(_QWORD *)&v129[24] = v114;
          *(_QWORD *)&v130 = v63;
          *((_QWORD *)&v130 + 1) = v64;
          *(_QWORD *)&v131 = v104;
          *((_QWORD *)&v131 + 1) = v101;
          v132 = v96;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v128, v69, (uint64_t)&v121);
          v42 = v124;
          v70 = v125;
          v71 = v127;
          v72 = v123 | ((unint64_t)v124 << 32);
          v73 = v125 | ((unint64_t)v126 << 32);
          v74 = v122;
          *(_OWORD *)(v40 + 32) = v121;
          *(_OWORD *)(v40 + 48) = v74;
          *(_QWORD *)(v40 + 64) = v72;
          *(_QWORD *)(v40 + 72) = v73;
          *(_WORD *)(v40 + 80) = v71;
          if ((v70 & 1) == 0)
            goto LABEL_48;
        }
        v42 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v40 + 68) = v42;
        *(_BYTE *)(v40 + 72) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v41 = (int *)(v40 + 16);
        goto LABEL_49;
      }
      v58 = HIDWORD(*((_QWORD *)&v53 + 1));
    }
    OffsetAttribute2 = v58;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    LODWORD(v121) = v119;
    v89 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v121);
    v89(&v128, 0);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.contentTransitionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized find<A>(_:key:)(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      v7 = *(unsigned int *)(v5 + 80) | ((unint64_t)*(unsigned __int8 *)(v5 + 84) << 32);
      v8 = *(_BYTE *)(v5 + 85);
      v9 = *(_BYTE *)(v5 + 86);
      v10 = *(_BYTE *)(v5 + 87);
      v11 = *(_QWORD *)(v5 + 88);
      v12 = *(_DWORD *)(v5 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v7 = 0x302000000;
      v6 = 0x8000000000;
    }
    *(_QWORD *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 12) = BYTE4(v7);
    *(_BYTE *)(a1 + 13) = v8;
    *(_BYTE *)(a1 + 14) = v9;
    *(_BYTE *)(a1 + 15) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    *(_DWORD *)(a1 + 24) = v12;
    swift_release();
  }
  return swift_release_n();
}

BOOL ContentTransition.isNamed(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  __int16 v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int16 v20;
  char v21;

  if (*((_BYTE *)v1 + 13))
    return 0;
  v3 = *a1;
  v4 = *v1;
  v5 = ((unint64_t)*v1 >> 38) & 3;
  if ((_DWORD)v5)
  {
    v6 = *((unsigned __int16 *)a1 + 4) | (*((unsigned __int8 *)a1 + 10) << 16);
    if ((_DWORD)v5 != 1)
      __asm { BR              X12 }
    if ((v3 & 0xC000000000) != 0x4000000000)
      return 0;
    v7 = *((_DWORD *)v1 + 2);
    v15 = *v1;
    v16 = BYTE4(v4) & 1;
    v17 = BYTE5(v4);
    v18 = BYTE6(v4);
    v19 = HIBYTE(v4);
    v20 = v7;
    v21 = BYTE2(v7);
    v8 = v3;
    v9 = BYTE4(v3) & 1;
    v10 = BYTE5(v3);
    v11 = BYTE6(v3);
    v12 = HIBYTE(v3);
    v13 = v6;
    v14 = BYTE2(v6);
    return specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)((uint64_t)&v15, (uint64_t)&v8);
  }
  return (v3 & 0xC000000000) == 0 && ((v3 ^ ((*v1 & 1) == 0)) & 1) != 0;
}

void static ContentTransition.differentText.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t EnvironmentValues.contentTransitionState.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  v4 = *(unsigned __int8 *)(a1 + 13);
  v5 = *(unsigned __int8 *)(a1 + 14);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *v1;
  v9 = *(unsigned __int8 *)(a1 + 15);
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v2, v3, v4);
  v10 = 0x1000000000000;
  if (!v5)
    v10 = 0;
  v11 = v3 | (v4 << 40) | v10 | (v9 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v11, v6, v7);
  swift_release();
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  swift_release();
  if (v1[1])
  {
    v12 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  return swift_release();
}

void static ContentTransition.text.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t EnvironmentValues.contentTransitionStyle.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 v13;
  char v14;
  char v15;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v11);
    swift_release_n();
    swift_release_n();
    v4 = v11;
    v5 = v12 | ((unint64_t)v13 << 32);
    v6 = v14;
    v7 = v15;
  }
  else
  {
    v8 = swift_retain_n();
    v9 = specialized find<A>(_:key:)(v8);
    if (v9)
    {
      v4 = *(_QWORD *)(v9 + 72);
      v5 = *(unsigned int *)(v9 + 80) | ((unint64_t)*(unsigned __int8 *)(v9 + 84) << 32);
      v6 = *(_BYTE *)(v9 + 85);
      v7 = *(_BYTE *)(v9 + 87);
      outlined copy of ContentTransition.Storage(v4, v5, v6);
      swift_retain();
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v5 = 0x302000000;
      v4 = 0x8000000000;
    }
    swift_release_n();
  }
  outlined consume of ContentTransition.Storage(v4, v5, v6);
  result = swift_release();
  *a1 = v7;
  return result;
}

uint64_t EnvironmentValues.contentTransitionStyle.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;

  v2 = v1;
  v3 = *a1;
  v4 = *v1;
  v5 = v1[1];
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)&v18);
    swift_release_n();
    swift_release_n();
    v6 = v18;
    v7 = v19 | ((unint64_t)v20 << 32);
    v8 = v21;
    v9 = v22;
    v10 = v23;
    v11 = v24;
  }
  else
  {
    v12 = swift_retain_n();
    v13 = specialized find<A>(_:key:)(v12);
    if (v13)
    {
      v6 = *(_QWORD *)(v13 + 72);
      v7 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      v8 = *(unsigned __int8 *)(v13 + 85);
      v9 = *(unsigned __int8 *)(v13 + 86);
      v10 = *(_QWORD *)(v13 + 88);
      v11 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v7 = 0x302000000;
      v6 = 0x8000000000;
    }
    swift_release_n();
  }
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v6, v7, v8);
  v14 = 0x1000000000000;
  if (!v9)
    v14 = 0;
  v15 = v14 | (v3 << 56) | v7 & 0xFFFFFFFFFFLL | (v8 << 40);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v6, v15, v10, v11);
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  swift_release();
  if (v5)
  {
    v16 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v16);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  return swift_release();
}

BOOL static ContentTransition.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Void __swiftcall ContentTransition.applyEnvironmentValues(style:layoutDirection:)(SwiftUI::ContentTransition::Style style, SwiftUI::LayoutDirection layoutDirection)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)layoutDirection;
  v4 = *(unsigned int *)(v2 + 8) | ((unint64_t)*(unsigned __int8 *)(v2 + 12) << 32);
  v5 = *(unsigned __int8 *)(v2 + 13);
  if (*(_BYTE *)(v2 + 13))
  {
    if (v5 != 1)
      return;
    if (BYTE4(v4) != 2)
      v3 = *(_BYTE *)(v2 + 12) & 1;
    v6 = v3 == 0;
    v7 = 0x100000000;
    if (v6)
      v7 = 0;
    v8 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2 + 8);
  }
  else
  {
    if (BYTE4(v4) == 3)
      v9 = *(unsigned __int8 *)style.storage;
    else
      v9 = BYTE4(v4);
    if ((*(_DWORD *)(v2 + 8) & 0xFF000000) != 0x2000000)
      v3 = (v4 >> 24) & 1;
    v6 = v3 == 0;
    v10 = 0x1000000;
    if (v6)
      v10 = 0;
    v8 = v10 & 0xFFFFFFFFFF000000 | *(_DWORD *)(v2 + 8) & 0xFFFFFFLL | (v9 << 32);
  }
  *(_DWORD *)(v2 + 8) = v8;
  *(_BYTE *)(v2 + 12) = BYTE4(v8);
  *(_BYTE *)(v2 + 13) = v5;
}

void ContentTransition.State.applyDynamicTextAnimation(in:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  if (!*(_QWORD *)(v0 + 16))
  {
    v1 = swift_retain();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
    swift_release();
    if ((v2 & 1) == 0 && *(unsigned __int8 *)(v0 + 15) - 1 <= 1)
    {
      if (one-time initialization token for default != -1)
        swift_once();
      *(_QWORD *)(v0 + 16) = static Animation.default;
      swift_retain();
    }
  }
}

uint64_t specialized PropertyList.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;

  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 72);
    v5 = *(unsigned int *)(v3 + 80) | ((unint64_t)*(unsigned __int8 *)(v3 + 84) << 32);
    v6 = *(_BYTE *)(v3 + 85);
    v7 = *(_BYTE *)(v3 + 86);
    v8 = *(_BYTE *)(v3 + 87);
    v9 = *(_QWORD *)(v3 + 88);
    v10 = *(_DWORD *)(v3 + 96);
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    swift_retain();
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v5 = 0x302000000;
    v4 = 0x8000000000;
  }
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = BYTE4(v5);
  *(_BYTE *)(a1 + 13) = v6;
  *(_BYTE *)(a1 + 14) = v7;
  *(_BYTE *)(a1 + 15) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  return swift_release();
}

uint64_t static ContentTransition.numericText(countsDown:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  uint64_t result;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v4 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    result = dyld_program_minos_at_least();
  else
    result = dword_25426FAB8 >= v4;
  *(_QWORD *)a2 = (result ^ ~a1) & 1 | 0x1202024000000000;
  *(_BYTE *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = 34807859;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

int *ContentTransition.init(method:effects:)@<X0>(int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *result;
  *(_QWORD *)a3 = a2;
  *(_BYTE *)(a3 + 12) = 2;
  *(_DWORD *)(a3 + 8) = v3;
  *(_WORD *)(a3 + 13) = 1;
  return result;
}

uint64_t ContentTransitionEffect.init(state:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int16 v3;
  char v4;
  char v5;
  uint64_t v6;
  int v7;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(_WORD *)(result + 12);
  v4 = *(_BYTE *)(result + 14);
  v5 = *(_BYTE *)(result + 15);
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_DWORD *)(result + 24);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_WORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 14) = v4;
  *(_BYTE *)(a2 + 15) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t static ContentTransition.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  __int16 v2;
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  v2 = *((_WORD *)a1 + 6);
  v3 = *((_DWORD *)a1 + 2);
  v4 = *((unsigned __int8 *)a1 + 14);
  v5 = *a2;
  v6 = *((_WORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 2);
  v8 = *((unsigned __int8 *)a2 + 14);
  v13 = *a1;
  v14 = v3;
  v15 = v2;
  v10 = v5;
  v11 = v7;
  v12 = v6;
  return specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10) & ~(v4 ^ v8) & 1;
}

void ContentTransition.Style.storage.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ContentTransition.Style.storage.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ContentTransition.Style.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ContentTransition::Style __swiftcall ContentTransition.Style.init(_:)(SwiftUI::ContentTransition::Style result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result.storage;
  return result;
}

void static ContentTransition.Style.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void ContentTransition.Style.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ContentTransition.Style.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContentTransition.Style@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContentTransition.Style(_QWORD *a1)
{
  char *v1;

  return specialized CodableByProtobuf.encode(to:)(a1, *v1);
}

uint64_t ContentTransition.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 12);
  v4 = *(unsigned int *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v5 = *(_BYTE *)(v1 + 13);
  *(_BYTE *)(a1 + 13) = v5;
  return outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v5);
}

uint64_t ContentTransition.storage.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 6);
  v4 = *((_DWORD *)a1 + 2);
  result = outlined consume of ContentTransition.Storage(*(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(_BYTE *)(v1 + 13));
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  return result;
}

uint64_t (*ContentTransition.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.isReplaceable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 14);
}

uint64_t ContentTransition.isReplaceable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 14) = result;
  return result;
}

uint64_t (*ContentTransition.isReplaceable.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.init(storage:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int16 v3;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(_WORD *)(result + 12);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_WORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 14) = 0;
  return result;
}

void ContentTransition.NamedTransition.Name.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = ((unint64_t)*v0 >> 38) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int ContentTransition.NamedTransition.Name.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = (v1 >> 38) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedTransition.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(_BYTE *))ContentTransition.NamedTransition.Name.hash(into:));
}

void ContentTransition.NamedTransition.name.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  char v3;

  v2 = *(_WORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 10);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 8) = v2;
}

uint64_t ContentTransition.NamedTransition.name.setter(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  char v3;

  v2 = *(_WORD *)(result + 8);
  v3 = *(_BYTE *)(result + 10);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 10) = v3;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*ContentTransition.NamedTransition.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NamedTransition.layoutDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 11);
}

_BYTE *ContentTransition.NamedTransition.layoutDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 11) = *result;
  return result;
}

uint64_t (*ContentTransition.NamedTransition.layoutDirection.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NamedTransition.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 12);
}

_BYTE *ContentTransition.NamedTransition.style.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = *result;
  return result;
}

uint64_t (*ContentTransition.NamedTransition.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NamedTransition.hash(into:)()
{
  uint64_t *v0;
  unint64_t v1;
  int v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 11);
  v3 = *((unsigned __int8 *)v0 + 12);
  v4 = ((unint64_t)*v0 >> 38) & 3;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
      __asm { BR              X10 }
    v5 = *((unsigned __int8 *)v0 + 12);
    Hasher._combine(_:)(6uLL);
    v3 = v5;
    ContentTransition.NumericTextConfiguration.hash(into:)();
    if (v2 == 2)
    {
LABEL_9:
      Hasher._combine(_:)(0);
      if ((_DWORD)v3 == 3)
        goto LABEL_10;
LABEL_7:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
    if (v2 == 2)
      goto LABEL_9;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2 & 1);
  if ((_DWORD)v3 != 3)
    goto LABEL_7;
LABEL_10:
  Hasher._combine(_:)(0);
}

Swift::Int ContentTransition.NamedTransition.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  int v2;
  Swift::UInt v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 11);
  v3 = *((unsigned __int8 *)v0 + 12);
  Hasher.init(_seed:)();
  v4 = (v1 >> 38) & 3;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
    if (v2 == 2)
      goto LABEL_8;
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
    goto LABEL_9;
  }
  Hasher._combine(_:)(5uLL);
  Hasher._combine(_:)(v1 & 1);
  if (v2 != 2)
    goto LABEL_6;
LABEL_8:
  Hasher._combine(_:)(0);
LABEL_9:
  if ((_DWORD)v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedTransition()
{
  Hasher.init(_seed:)();
  ContentTransition.NamedTransition.hash(into:)();
  return Hasher._finalize()();
}

void ContentTransition.NumericTextConfiguration.Direction.hash(into:)()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *(_DWORD *)v0;
  if ((*(_BYTE *)(v0 + 4) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFF) != 0)
      v2 = v1;
    else
      v2 = 0;
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1 & 1);
  }
}

BOOL static ContentTransition.NumericTextConfiguration.Direction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  char v4;

  v2 = *(float *)a2;
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
    return (*(_BYTE *)(a2 + 4) & 1) != 0 && *(float *)a1 == v2;
  v4 = ((*(_DWORD *)a1 & 1) == 0) ^ LOBYTE(v2);
  if ((*(_BYTE *)(a2 + 4) & 1) != 0)
    v4 = 0;
  return v4 & 1;
}

Swift::Int ContentTransition.NumericTextConfiguration.Direction.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;
  char v2;
  Swift::UInt32 v3;

  v1 = *(_DWORD *)v0;
  v2 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFF) != 0)
      v3 = v1;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NumericTextConfiguration.Direction()
{
  Hasher.init(_seed:)();
  ContentTransition.NumericTextConfiguration.Direction.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ContentTransition.NumericTextConfiguration.Direction(uint64_t a1, uint64_t a2)
{
  float v2;
  char v4;

  v2 = *(float *)a2;
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
    return (*(_BYTE *)(a2 + 4) & 1) != 0 && *(float *)a1 == v2;
  v4 = ((*(_DWORD *)a1 & 1) == 0) ^ LOBYTE(v2);
  if ((*(_BYTE *)(a2 + 4) & 1) != 0)
    v4 = 0;
  return v4 & 1;
}

uint64_t ContentTransition.NumericTextConfiguration.Options.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ContentTransition.NumericTextConfiguration.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentTransition.NumericTextConfiguration.Options.reversed.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ContentTransition.NumericTextConfiguration.Options.relativeBlur.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void ContentTransition.NumericTextConfiguration.direction.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 4);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t ContentTransition.NumericTextConfiguration.direction.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 4);
  *(_DWORD *)v1 = *(_DWORD *)result;
  *(_BYTE *)(v1 + 4) = v2;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.direction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.axis.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t ContentTransition.NumericTextConfiguration.axis.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.axis.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NumericTextConfiguration.options.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 6);
}

_BYTE *ContentTransition.NumericTextConfiguration.options.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 6) = *result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ContentTransition.NumericTextConfiguration.init(direction:axis:options:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  char v5;
  double result;

  v4 = *(_BYTE *)(a1 + 4);
  v5 = *a3;
  *(_DWORD *)a4 = *(_DWORD *)a1;
  *(_BYTE *)(a4 + 4) = v4;
  *(_BYTE *)(a4 + 5) = a2;
  *(_BYTE *)(a4 + 6) = v5;
  *(_QWORD *)&result = 320877330;
  *(_DWORD *)(a4 + 7) = 320877330;
  return result;
}

float ContentTransition.NumericTextConfiguration.delay.getter(float a1)
{
  uint64_t v1;

  LOBYTE(a1) = *(_BYTE *)(v1 + 7);
  return (float)LODWORD(a1) * 0.0083333;
}

uint64_t ContentTransition.NumericTextConfiguration.delay.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 120.0);
  *(_BYTE *)(v1 + 7) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.delay.modify(uint64_t a1, float a2))(float *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  LOBYTE(a2) = *(_BYTE *)(v2 + 7);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.0083333;
  return ContentTransition.NumericTextConfiguration.delay.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.delay.modify(float *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 120.0);
  *(_BYTE *)(v1 + 7) = result;
  return result;
}

float ContentTransition.NumericTextConfiguration.maxDurationMultiple.getter()
{
  return 1.25;
}

float ContentTransition.NumericTextConfiguration.scale.getter(float a1)
{
  uint64_t v1;

  LOBYTE(a1) = *(_BYTE *)(v1 + 8);
  return (float)LODWORD(a1) * 0.0078125;
}

uint64_t ContentTransition.NumericTextConfiguration.scale.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 128.0);
  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.scale.modify(uint64_t a1, float a2))(float *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  LOBYTE(a2) = *(_BYTE *)(v2 + 8);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.0078125;
  return ContentTransition.NumericTextConfiguration.scale.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.scale.modify(float *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 128.0);
  *(_BYTE *)(v1 + 8) = result;
  return result;
}

float ContentTransition.NumericTextConfiguration.blur.getter(float a1)
{
  uint64_t v1;

  LOBYTE(a1) = *(_BYTE *)(v1 + 9);
  return (float)LODWORD(a1) * 0.25;
}

uint64_t ContentTransition.NumericTextConfiguration.blur.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 4.0);
  *(_BYTE *)(v1 + 9) = result;
  if ((*(_BYTE *)(v1 + 6) & 2) != 0)
    *(_BYTE *)(v1 + 6) &= ~2u;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.blur.modify(uint64_t a1, float a2))(float *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  LOBYTE(a2) = *(_BYTE *)(v2 + 9);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.25;
  return ContentTransition.NumericTextConfiguration.blur.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.blur.modify(float *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 4.0);
  *(_BYTE *)(v1 + 9) = result;
  if ((*(_BYTE *)(v1 + 6) & 2) != 0)
    *(_BYTE *)(v1 + 6) &= ~2u;
  return result;
}

float ContentTransition.NumericTextConfiguration.relativeBlur.getter(float a1)
{
  uint64_t v1;

  LOBYTE(a1) = *(_BYTE *)(v1 + 9);
  return (float)LODWORD(a1) * 0.0078125;
}

uint64_t ContentTransition.NumericTextConfiguration.relativeBlur.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 128.0);
  *(_BYTE *)(v1 + 9) = result;
  if ((*(_BYTE *)(v1 + 6) & 2) == 0)
    *(_BYTE *)(v1 + 6) |= 2u;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.relativeBlur.modify(uint64_t a1, float a2))(float *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  LOBYTE(a2) = *(_BYTE *)(v2 + 9);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.0078125;
  return ContentTransition.NumericTextConfiguration.relativeBlur.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.relativeBlur.modify(float *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 128.0);
  *(_BYTE *)(v1 + 9) = result;
  if ((*(_BYTE *)(v1 + 6) & 2) == 0)
    *(_BYTE *)(v1 + 6) |= 2u;
  return result;
}

float ContentTransition.NumericTextConfiguration.offset.getter(double a1)
{
  uint64_t v1;

  LOBYTE(a1) = *(_BYTE *)(v1 + 10);
  *(float *)&a1 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a1)).i32[0] * 0.03125;
  return *(float *)&a1;
}

uint64_t ContentTransition.NumericTextConfiguration.offset.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 32.0);
  *(_BYTE *)(v1 + 10) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.offset.modify(uint64_t a1, int8x8_t a2))(float *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  a2.i8[0] = *(_BYTE *)(v2 + 10);
  *(float *)(a1 + 8) = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a2)).i32[0] * 0.03125;
  return ContentTransition.NumericTextConfiguration.offset.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.offset.modify(float *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 32.0);
  *(_BYTE *)(v1 + 10) = result;
  return result;
}

void ContentTransition.NumericTextConfiguration.hash(into:)()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt32 v8;
  Swift::UInt8 v9;

  v1 = *(_DWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 5);
  v3 = *(_BYTE *)(v0 + 6);
  v4 = *(_BYTE *)(v0 + 7);
  v5 = *(_BYTE *)(v0 + 8);
  v6 = *(_BYTE *)(v0 + 9);
  v7 = *(_BYTE *)(v0 + 10);
  if ((*(_BYTE *)(v0 + 4) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFF) != 0)
      v8 = v1;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    if (v2 != 2)
      goto LABEL_6;
LABEL_8:
    v9 = 0;
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1 & 1);
  if (v2 == 2)
    goto LABEL_8;
LABEL_6:
  v9 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_9:
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int ContentTransition.NumericTextConfiguration.hashValue.getter()
{
  Hasher.init(_seed:)();
  ContentTransition.NumericTextConfiguration.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContentTransition.NumericTextConfiguration()
{
  Hasher.init(_seed:)();
  ContentTransition.NumericTextConfiguration.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NumericTextConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(_BYTE *))ContentTransition.NumericTextConfiguration.hash(into:));
}

uint64_t ContentTransition.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int16 *)(result + 8) | (*(unsigned __int8 *)(result + 10) << 16) | 0x2000000;
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

uint64_t ContentTransition.CustomTransition.effects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ContentTransition.CustomTransition.effects.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ContentTransition.CustomTransition.effects.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.CustomTransition.method.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *ContentTransition.CustomTransition.method.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ContentTransition.CustomTransition.method.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*ContentTransition.CustomTransition.layoutDirection.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.CustomTransition.init(effects:method:layoutDirection:)@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *a2;
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 12) = 2;
  return result;
}

BOOL static ContentTransition.Method.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL static ContentTransition.EffectType.Arg.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  int v4;

  v2 = *(float *)a1;
  v3 = *(float *)a2;
  v4 = *(unsigned __int8 *)(a2 + 4);
  if (!*(_BYTE *)(a1 + 4))
    return !*(_BYTE *)(a2 + 4) && v2 == v3;
  if (*(_BYTE *)(a1 + 4) == 1)
  {
    if (v4 == 1)
      return LODWORD(v2) == LODWORD(v3);
    return 0;
  }
  return v4 == 2 && LODWORD(v3) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ContentTransition.EffectType.Arg(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  int v4;

  v2 = *(float *)a1;
  v3 = *(float *)a2;
  v4 = *(unsigned __int8 *)(a2 + 4);
  if (!*(_BYTE *)(a1 + 4))
    return !*(_BYTE *)(a2 + 4) && v2 == v3;
  if (*(_BYTE *)(a1 + 4) == 1)
  {
    if (v4 == 1)
      return LODWORD(v2) == LODWORD(v3);
    return 0;
  }
  return v4 == 2 && LODWORD(v3) == 0;
}

uint64_t ContentTransition.EffectType.type.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t ContentTransition.EffectType.type.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ContentTransition.EffectType.type.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.EffectType.arg0.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 4);
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t ContentTransition.EffectType.arg0.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 4);
  *(_DWORD *)(v1 + 4) = *(_DWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t (*ContentTransition.EffectType.arg0.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.EffectType.arg1.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 12);
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t ContentTransition.EffectType.arg1.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 4);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*ContentTransition.EffectType.arg1.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.EffectType.init(type:arg0:arg1:)@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  char v5;
  int v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 4);
  v6 = *a3;
  v7 = *((_BYTE *)a3 + 4);
  *(_DWORD *)a4 = result;
  *(_DWORD *)(a4 + 4) = v4;
  *(_BYTE *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 12) = v6;
  *(_BYTE *)(a4 + 16) = v7;
  return result;
}

double static ContentTransition.EffectType.opacity(_:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

float static ContentTransition.EffectType.blur(radius:)@<S0>(uint64_t a1@<X8>, double a2@<D0>)
{
  float result;

  *(_DWORD *)a1 = 4;
  result = a2;
  *(float *)(a1 + 4) = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

float static ContentTransition.EffectType.relativeBlur(scale:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return static ContentTransition.EffectType.translation(_:)(16, a1, a2, a3);
}

float static ContentTransition.EffectType.scale(_:)@<S0>(uint64_t a1@<X8>, double a2@<D0>)
{
  float result;

  *(_DWORD *)a1 = 2;
  result = a2;
  *(float *)(a1 + 4) = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

float static ContentTransition.EffectType.translation(scale:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return static ContentTransition.EffectType.translation(_:)(15, a1, a2, a3);
}

float static ContentTransition.EffectType.translation(_:)@<S0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v4;
  float result;

  v4 = a3;
  *(_DWORD *)a2 = a1;
  *(float *)(a2 + 4) = v4;
  *(_BYTE *)(a2 + 8) = 0;
  result = a4;
  *(float *)(a2 + 12) = result;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

double static ContentTransition.EffectType.matchMove.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 5;
  *(_QWORD *)a1 = 5;
  *(_BYTE *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

BOOL static ContentTransition.SequenceDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ContentTransition.SequenceDirection.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

double ContentTransition.Effect.type.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  double result;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 12);
  v4 = *(_BYTE *)(v1 + 16);
  result = *(double *)v1;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

double ContentTransition.Effect.type.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  double result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_BYTE *)(a1 + 16);
  result = *(double *)a1;
  *(_QWORD *)v1 = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 12) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*ContentTransition.Effect.type.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ContentTransition.Effect.begin.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 20);
}

void ContentTransition.Effect.begin.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 20) = a1;
}

uint64_t (*ContentTransition.Effect.begin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ContentTransition.Effect.duration.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

void ContentTransition.Effect.duration.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 24) = a1;
}

uint64_t (*ContentTransition.Effect.duration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Effect.events.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

uint64_t ContentTransition.Effect.events.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t (*ContentTransition.Effect.events.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Effect.flags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t ContentTransition.Effect.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*ContentTransition.Effect.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Effect.init(type:begin:duration:events:flags:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char v6;
  int v7;
  char v8;

  v6 = *(_BYTE *)(result + 8);
  v7 = *(_DWORD *)(result + 12);
  v8 = *(_BYTE *)(result + 16);
  *(_QWORD *)a4 = *(_QWORD *)result;
  *(_BYTE *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 12) = v7;
  *(_BYTE *)(a4 + 16) = v8;
  *(float *)(a4 + 20) = a5;
  *(float *)(a4 + 24) = a6;
  *(_DWORD *)(a4 + 28) = a2;
  *(_DWORD *)(a4 + 32) = a3;
  return result;
}

double static ContentTransition.Effect.sequence(direction:delay:maxAllowedDurationMultiple:appliesOnInsertion:appliesOnRemoval:)@<D0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v4;
  float v5;
  double result;

  v4 = a3;
  v5 = a4;
  *(_DWORD *)a2 = dword_2352CE564[*a1];
  *(_DWORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 2;
  *(float *)(a2 + 20) = v4;
  *(float *)(a2 + 24) = 1.0 / v5;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a2 + 28) = 3;
  return result;
}

double ContentTransition.Effect.removeInverts(_:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  int v4;
  char v5;
  int v6;
  unsigned int v7;
  double result;

  v3 = *(_BYTE *)(v2 + 8);
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_BYTE *)(v2 + 16);
  v6 = *(_DWORD *)(v2 + 28);
  v7 = *(_DWORD *)(v2 + 32) & 0xFFFFFFFE | a1 & 1;
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  result = *(double *)(v2 + 20);
  *(double *)(a2 + 20) = result;
  *(_DWORD *)(a2 + 28) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t ContentTransition.Method.method.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t ContentTransition.Method.method.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ContentTransition.Method.method.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Method.init(method:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentTransition.Method.diff.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ContentTransition.Method.forwards.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ContentTransition.Method.backwards.getter(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

void static ContentTransition.Method.prefix.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ContentTransition.Method.suffix.getter(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

void static ContentTransition.Method.prefixAndSuffix.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ContentTransition.Method.binary.getter(_DWORD *a1@<X8>)
{
  *a1 = 6;
}

void static ContentTransition.Method.none.getter(_DWORD *a1@<X8>)
{
  *a1 = 7;
}

void static ContentTransition.default.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000000;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void static ContentTransition.identity.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000001;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void static ContentTransition.opacity.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000002;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void static ContentTransition.fadeIfDifferent.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000004;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void static ContentTransition.interpolate.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000003;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

double static ContentTransition.NumericTextConfiguration.fixed(downwards:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  double result;

  *(_DWORD *)a2 = a1 & 1;
  *(_BYTE *)(a2 + 4) = 0;
  *(_QWORD *)&result = 856818178;
  *(_DWORD *)(a2 + 5) = 856818178;
  *(_WORD *)(a2 + 9) = 4896;
  return result;
}

unsigned int *static ContentTransition.numericText(_:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  int v4;

  v2 = 0x100000000;
  if (!*((_BYTE *)result + 4))
    v2 = 0;
  v3 = v2 | *result | ((unint64_t)*((unsigned __int8 *)result + 5) << 40) | ((unint64_t)*((unsigned __int8 *)result + 6) << 48) | ((unint64_t)*((unsigned __int8 *)result + 7) << 56);
  v4 = (*((unsigned __int16 *)result + 4) | (*((unsigned __int8 *)result + 10) << 16)) & 0xFFFFFF;
  *(_QWORD *)a2 = v3 | 0x4000000000;
  *(_BYTE *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = v4 | 0x2000000;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

uint64_t static ContentTransition.numericText(increasing:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  uint64_t result;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v4 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    result = dyld_program_minos_at_least();
  else
    result = dword_25426FAB8 >= v4;
  *(_QWORD *)a2 = (result ^ a1) & 1 | 0x1202024000000000;
  *(_BYTE *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = 34807859;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

float static ContentTransition.numericText(value:)@<S0>(uint64_t a1@<X8>, double a2@<D0>)
{
  float result;

  result = a2;
  *(_QWORD *)a1 = LODWORD(result) | 0x1202024100000000;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 34807859;
  *(_WORD *)(a1 + 13) = 0;
  return result;
}

double static ContentTransition.NumericTextConfiguration.automatic(value:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  float v2;
  double result;

  v2 = a2;
  *(float *)a1 = v2;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)&result = 856818178;
  *(_DWORD *)(a1 + 5) = 856818178;
  *(_WORD *)(a1 + 9) = 4896;
  return result;
}

void ContentTransition.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 13))
    *a1 = 3;
  else
    *a1 = *(_BYTE *)(v1 + 12);
}

unsigned __int8 *ContentTransition.style.setter(unsigned __int8 *result)
{
  uint64_t v1;

  if (!*(_BYTE *)(v1 + 13))
    *(_WORD *)(v1 + 12) = *result;
  return result;
}

unsigned __int8 *(*ContentTransition.style.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  if (*(_BYTE *)(v1 + 13))
    v2 = 3;
  else
    v2 = *(_BYTE *)(v1 + 12);
  *(_BYTE *)(a1 + 8) = v2;
  return ContentTransition.style.modify;
}

unsigned __int8 *ContentTransition.style.modify(_QWORD *a1)
{
  unsigned __int8 *result;
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  result = (unsigned __int8 *)(a1 + 1);
  v2 = v3;
  if (!*(_BYTE *)(v3 + 13))
    *(_WORD *)(v2 + 12) = *result;
  return result;
}

Swift::Int ContentTransition.NamedKey.hashValue.getter()
{
  uint64_t *v0;
  unint64_t v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt8 v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 11);
  v3 = *((unsigned __int8 *)v0 + 12);
  v4 = *((_BYTE *)v0 + 13);
  Hasher.init(_seed:)();
  v5 = (v1 >> 38) & 3;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
    if (v2 == 2)
      goto LABEL_8;
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
    goto LABEL_9;
  }
  Hasher._combine(_:)(5uLL);
  Hasher._combine(_:)(v1 & 1);
  if (v2 != 2)
    goto LABEL_6;
LABEL_8:
  Hasher._combine(_:)(0);
LABEL_9:
  if ((_DWORD)v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContentTransition.NamedKey()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt8 v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 11);
  v3 = *((unsigned __int8 *)v0 + 12);
  v4 = *((_BYTE *)v0 + 13);
  v5 = ((unint64_t)*v0 >> 38) & 3;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
    if (v2 == 2)
    {
LABEL_9:
      Hasher._combine(_:)(0);
      if ((_DWORD)v3 == 3)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
    if (v2 == 2)
      goto LABEL_9;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2 & 1);
  if ((_DWORD)v3 == 3)
  {
LABEL_10:
    Hasher._combine(_:)(0);
    goto LABEL_11;
  }
LABEL_7:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
LABEL_11:
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedKey()
{
  uint64_t *v0;
  unint64_t v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt8 v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 11);
  v3 = *((unsigned __int8 *)v0 + 12);
  v4 = *((_BYTE *)v0 + 13);
  Hasher.init(_seed:)();
  v5 = (v1 >> 38) & 3;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
    if (v2 == 2)
      goto LABEL_8;
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
    goto LABEL_9;
  }
  Hasher._combine(_:)(5uLL);
  Hasher._combine(_:)(v1 & 1);
  if (v2 != 2)
    goto LABEL_6;
LABEL_8:
  Hasher._combine(_:)(0);
LABEL_9:
  if ((_DWORD)v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContentTransition.NamedKey(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  char v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  __int16 v9;
  int v10;
  uint64_t v12;
  __int16 v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  __int16 v19;

  v2 = *(_WORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 10);
  v4 = *(_WORD *)(a1 + 11);
  v5 = *(unsigned __int8 *)(a1 + 13);
  v6 = *(_QWORD *)a2;
  v7 = *(_WORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 10);
  v9 = *(_WORD *)(a2 + 11);
  v10 = *(unsigned __int8 *)(a2 + 13);
  v16 = *(_QWORD *)a1;
  v18 = v3;
  v17 = v2;
  v19 = v4;
  v12 = v6;
  v14 = v8;
  v13 = v7;
  v15 = v9;
  return specialized static ContentTransition.NamedTransition.== infix(_:_:)(&v16, &v12) & ~(v5 ^ v10) & 1;
}

uint64_t one-time initialization function for _namedTransitions()
{
  uint64_t result;

  type metadata accessor for AtomicBuffer<[ContentTransition.NamedKey : RBTransition]>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  static ContentTransition._namedTransitions = (_UNKNOWN *)result;
  return result;
}

void *ContentTransition.NamedTransition.makeRBTransition()()
{
  unint64_t *v0;
  unint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  id v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  id v18;
  double v19;
  double v20;
  id v21;
  double v22;
  double v23;
  id v24;
  double v25;
  double v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  double v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  double v39;
  id v40;
  double v41;
  double v42;
  id v43;
  float v44;
  id v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  BOOL v55;
  float v56;
  float v57;
  id v58;
  double v59;
  double v60;
  id v61;
  double v62;
  double v63;
  id v65;
  id v66;
  double v67;
  id v68;
  double v69;
  double v70;
  int v71;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 10);
  v3 = *((unsigned __int16 *)v0 + 4);
  v4 = *((unsigned __int8 *)v0 + 11);
  v5 = *((unsigned __int8 *)v0 + 12);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF58]), sel_init);
  v7 = v6;
  if (v5 == 3)
    v8 = 0;
  else
    v8 = v5;
  v9 = (v1 >> 38) & 3;
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 != 1)
      __asm { BR              X11 }
    objc_msgSend(v6, sel_setMethod_, 8);
    if (((v1 >> 40) & 1) != 0)
    {
      if ((v1 & 0x1000000000000) != 0)
        v10 = 14;
      else
        v10 = 13;
LABEL_30:
      v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
      objc_msgSend(v40, sel_setType_, v10);
      objc_msgSend(v40, sel_setEvents_, 3);
      *(float *)&v41 = (float)HIBYTE(v1) * 0.0083333;
      objc_msgSend(v40, sel_setBeginTime_, v41);
      LODWORD(v42) = 1061997773;
      objc_msgSend(v40, sel_setDuration_, v42);
      objc_msgSend(v7, sel_addEffect_, v40);

      v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
      objc_msgSend(v43, sel_setType_, 1);
      objc_msgSend(v43, sel_setEvents_, 3);
      objc_msgSend(v43, sel_setAnimationIndex_, 0);
      objc_msgSend(v7, sel_addEffect_, v43);

      v44 = (float)BYTE1(v3);
      v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
      v46 = v45;
      if ((v1 & 0x2000000000000) != 0)
      {
        objc_msgSend(v45, sel_setType_, 16);
        LODWORD(v48) = 0;
        objc_msgSend(v46, sel_setArgumentValue_atIndex_, 0, v48);
        *(float *)&v49 = v44 * 0.0078125;
        objc_msgSend(v46, sel_setArgumentValue_atIndex_, 1, v49, BYTE5(v1));
      }
      else
      {
        objc_msgSend(v45, sel_setType_, 4);
        *(float *)&v47 = v44 * 0.25;
        objc_msgSend(v46, sel_setArgumentValue_atIndex_, 0, v47, BYTE5(v1));
      }
      objc_msgSend(v46, sel_setEvents_, 3);
      objc_msgSend(v46, sel_setAnimationIndex_, 0);
      objc_msgSend(v7, (SEL)&selRef_lineHeightMultiple + 4, v46);

      v50 = (float)((v3 | (v2 << 16)) << 8 >> 24);
      v51 = v50 * 0.03125;
      v52 = v50 * 0.03125;
      v53 = v50 * -0.03125;
      if ((v1 & 1) == 0)
        v53 = v52;
      if ((v1 & 0x100000000) != 0)
        v54 = 3;
      else
        v54 = 1;
      if ((v1 & 0x100000000) != 0)
        v53 = v51;
      v55 = (v1 & 0x10000000000) == 0 || v71 == 2;
      if (v55)
        v56 = v53;
      else
        v56 = 0.0;
      if (v55)
        v57 = 0.0;
      else
        v57 = v53;
      v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
      objc_msgSend(v58, sel_setType_, 15);
      *(float *)&v59 = v57;
      objc_msgSend(v58, sel_setArgumentValue_atIndex_, 0, v59);
      *(float *)&v60 = v56;
      objc_msgSend(v58, sel_setArgumentValue_atIndex_, 1, v60);
      objc_msgSend(v58, sel_setEvents_, 3);
      objc_msgSend(v58, sel_setFlags_, v54);
      objc_msgSend(v58, sel_setAnimationIndex_, 1);
      objc_msgSend(v7, (SEL)&selRef_lineHeightMultiple + 4, v58);

      v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
      objc_msgSend(v61, sel_setType_, 2);
      *(float *)&v62 = (float)v3 * 0.0078125;
      objc_msgSend(v61, (SEL)&selRef_setDamping_ + 2, 0, v62);
      objc_msgSend(v61, sel_setEvents_, 3);
      objc_msgSend(v61, sel_setAnimationIndex_, 0);
      objc_msgSend(v7, (SEL)&selRef_lineHeightMultiple + 4, v61);

      v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEE8]), sel_init);
      objc_msgSend(v36, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.5, 1.0, 344.0, 37.0, 0.0);
      objc_msgSend(v36, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.8, 2.0, 470.0, 34.0, 0.0);
      goto LABEL_50;
    }
    if (v4 == 2)
    {
      if ((v1 & 0x1000000000000) == 0)
      {
LABEL_9:
        v10 = 11;
        goto LABEL_30;
      }
    }
    else if ((v1 & 0x1000000000000) != 0)
    {
      if ((v4 & 1) != 0)
        goto LABEL_9;
    }
    else if ((v4 & 1) == 0)
    {
      goto LABEL_9;
    }
    v10 = 12;
    goto LABEL_30;
  }
  if ((v1 & 1) == 0)
  {
    v11 = 1;
LABEL_26:
    objc_msgSend(v6, sel_setMethod_, v11);
    v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
    objc_msgSend(v36, sel_setType_, 1);
    LODWORD(v63) = 0;
    objc_msgSend(v36, sel_setDuration_, v63);
    objc_msgSend(v7, sel_addEffect_, v36);
    goto LABEL_51;
  }
  if (v8 == 2)
  {
    objc_msgSend(v6, sel_setMethod_, 6);
    v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
    objc_msgSend(v65, sel_setType_, 1);
    objc_msgSend(v65, sel_setEvents_, 3);
    objc_msgSend(v65, sel_setInsertAnimationIndex_, 1);
    objc_msgSend(v65, sel_setRemoveAnimationIndex_, 0);
    objc_msgSend(v7, sel_addEffect_, v65);

    v66 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
    objc_msgSend(v66, sel_setType_, 2);
    LODWORD(v67) = 1060320051;
    objc_msgSend(v66, sel_setArgumentValue_atIndex_, 0, v67);
    objc_msgSend(v66, sel_setEvents_, 3);
    objc_msgSend(v66, sel_setInsertAnimationIndex_, 1);
    objc_msgSend(v66, sel_setRemoveAnimationIndex_, 0);
    objc_msgSend(v7, sel_addEffect_, v66);

    v68 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
    objc_msgSend(v68, sel_setType_, 16);
    LODWORD(v69) = 0;
    objc_msgSend(v68, sel_setArgumentValue_atIndex_, 0, v69);
    LODWORD(v70) = 0.25;
    objc_msgSend(v68, sel_setArgumentValue_atIndex_, 1, v70);
    objc_msgSend(v68, sel_setEvents_, 3);
    objc_msgSend(v68, sel_setInsertAnimationIndex_, 1);
    objc_msgSend(v68, sel_setRemoveAnimationIndex_, 0);
    objc_msgSend(v7, sel_addEffect_, v68);

    v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEE8]), sel_init);
    objc_msgSend(v36, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.5, 1.0, 331.0, 36.4, 0.0);
    objc_msgSend(v36, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.8, 2.0, 300.0, 50.0, 0.0);
LABEL_50:
    objc_msgSend(v7, sel_setAnimation_, v36);
    goto LABEL_51;
  }
  if (v8 != 1)
  {
    v11 = 6;
    goto LABEL_26;
  }
  objc_msgSend(v6, sel_setMethod_, 8);
  objc_msgSend(v7, sel_setMaxChanges_, 10);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), sel_init);
  v13 = v12;
  if ((v4 & 1) != 0)
    v14 = 12;
  else
    v14 = 11;
  if ((v4 & 1) != 0)
    v15 = 8;
  else
    v15 = 7;
  objc_msgSend(v12, sel_setType_, v14);
  objc_msgSend(v13, sel_setEvents_, 7);
  objc_msgSend(v13, sel_setFlags_, 1);
  LODWORD(v16) = 1025758986;
  objc_msgSend(v13, sel_setBeginTime_, v16);
  LODWORD(v17) = 1.0;
  objc_msgSend(v13, sel_setDuration_, v17);
  objc_msgSend(v7, sel_addEffect_, v13);

  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
  objc_msgSend(v18, sel_setType_, 1);
  objc_msgSend(v18, sel_setEvents_, 7);
  LODWORD(v19) = 0;
  objc_msgSend(v18, sel_setBeginTime_, v19);
  LODWORD(v20) = 1.0;
  objc_msgSend(v18, sel_setDuration_, v20);
  objc_msgSend(v7, sel_addEffect_, v18);

  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
  objc_msgSend(v21, sel_setType_, 1);
  objc_msgSend(v21, sel_setEvents_, 11);
  LODWORD(v22) = 1051260355;
  objc_msgSend(v21, sel_setBeginTime_, v22);
  LODWORD(v23) = 1059816734;
  objc_msgSend(v21, sel_setDuration_, v23);
  objc_msgSend(v7, sel_addEffect_, v21);

  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
  objc_msgSend(v24, sel_setType_, v15);
  objc_msgSend(v24, sel_setEvents_, 7);
  LODWORD(v25) = 0;
  objc_msgSend(v24, sel_setBeginTime_, v25);
  LODWORD(v26) = 1.0;
  objc_msgSend(v24, sel_setDuration_, v26);
  objc_msgSend(v7, sel_addEffect_, v24);

  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
  objc_msgSend(v27, sel_setType_, 16);
  LODWORD(v28) = 0;
  objc_msgSend(v27, sel_setArgumentValue_atIndex_, 0, v28);
  LODWORD(v29) = 0.25;
  objc_msgSend(v27, sel_setArgumentValue_atIndex_, 1, v29);
  objc_msgSend(v27, sel_setEvents_, 3);
  LODWORD(v30) = 1051260355;
  objc_msgSend(v27, sel_setBeginTime_, v30);
  LODWORD(v31) = 1059816734;
  objc_msgSend(v27, sel_setDuration_, v31);
  objc_msgSend(v7, sel_addEffect_, v27);

  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
  objc_msgSend(v32, sel_setType_, 6);
  LODWORD(v33) = 0.5;
  objc_msgSend(v32, sel_setArgumentValue_atIndex_, 0, v33);
  objc_msgSend(v32, sel_setEvents_, 7);
  LODWORD(v34) = 0;
  objc_msgSend(v32, sel_setBeginTime_, v34);
  LODWORD(v35) = 1.0;
  objc_msgSend(v32, sel_setDuration_, v35);
  objc_msgSend(v7, sel_addEffect_, v32);

  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF60]), (SEL)&selRef_nextAnimationTriggerDelay);
  objc_msgSend(v36, sel_setType_, 2);
  LODWORD(v37) = 1062836634;
  objc_msgSend(v36, sel_setArgumentValue_atIndex_, 0, v37);
  objc_msgSend(v36, sel_setEvents_, 11);
  LODWORD(v38) = 1051260355;
  objc_msgSend(v36, sel_setBeginTime_, v38);
  LODWORD(v39) = 1059816734;
  objc_msgSend(v36, sel_setDuration_, v39);
  objc_msgSend(v7, sel_addEffect_, v36);
LABEL_51:

  return v7;
}

uint64_t static ContentTransition.Options.addsDrawingGroup.getter()
{
  return 1;
}

uint64_t static ContentTransition.Options.animatesDifferentContent.getter()
{
  return 2;
}

uint64_t static ContentTransition.Options.formsGroup.getter()
{
  return 4;
}

uint64_t static ContentTransition.Options.implicitGroup.getter()
{
  return 8;
}

uint64_t static ContentTransition.Options.inherited.getter()
{
  return 1;
}

uint64_t ContentTransition.State.init(transition:style:animation:options:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5;
  __int16 v6;
  char v7;
  char v8;

  v5 = *(_DWORD *)(result + 8);
  v6 = *(_WORD *)(result + 12);
  v7 = *(_BYTE *)(result + 14);
  v8 = *a2;
  *(_QWORD *)a5 = *(_QWORD *)result;
  *(_WORD *)(a5 + 12) = v6;
  *(_DWORD *)(a5 + 8) = v5;
  *(_BYTE *)(a5 + 14) = v7;
  *(_BYTE *)(a5 + 15) = v8;
  *(_QWORD *)(a5 + 16) = a3;
  *(_DWORD *)(a5 + 24) = a4;
  return result;
}

void static ContentTransition.State.defaultValue.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000000;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_QWORD *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 20) = 0;
}

uint64_t ContentTransition.State.transition.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  int v4;
  char v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 6);
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 14);
  result = outlined consume of ContentTransition.Storage(*(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(_BYTE *)(v1 + 13));
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(_BYTE *)(v1 + 14) = v5;
  return result;
}

uint64_t (*ContentTransition.State.transition.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.State.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 15);
}

_BYTE *ContentTransition.State.style.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 15) = *result;
  return result;
}

uint64_t (*ContentTransition.State.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.State.animation.getter()
{
  return swift_retain();
}

uint64_t ContentTransition.State.animation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ContentTransition.State.animation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.State.options.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t ContentTransition.State.options.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*ContentTransition.State.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.State.rasterizationOptions.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_DWORD *)(v1 + 24);
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v2 & 1 | 0x20;
  *(_BYTE *)(a1 + 16) = 3;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ContentTransition.State(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000000;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_QWORD *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 20) = 0;
}

uint64_t ContentTransition.NumericTextConfiguration.axis(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  v3 = *(_BYTE *)(v2 + 4);
  v4 = *(_BYTE *)(v2 + 10);
  *(_DWORD *)a2 = *(_DWORD *)v2;
  *(_BYTE *)(a2 + 4) = v3;
  *(_BYTE *)(a2 + 5) = result & 1;
  *(_DWORD *)(a2 + 6) = *(_DWORD *)(v2 + 6);
  *(_BYTE *)(a2 + 10) = v4;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.delay(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int *v2;
  int v4;
  char v5;
  __int16 v6;
  __int16 v7;
  char v8;
  float v9;
  uint64_t result;

  v4 = *v2;
  v5 = *((_BYTE *)v2 + 4);
  v6 = *(_WORD *)((char *)v2 + 5);
  v7 = *((_WORD *)v2 + 4);
  v8 = *((_BYTE *)v2 + 10);
  v9 = a2;
  result = specialized FixedWidthInteger.init<A>(clamping:)(v9 * 120.0);
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_WORD *)(a1 + 5) = v6;
  *(_BYTE *)(a1 + 7) = result;
  *(_WORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 10) = v8;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int *v2;
  int v4;
  char v5;
  __int16 v6;
  char v7;
  __int16 v8;
  float v9;
  uint64_t result;

  v4 = *v2;
  v5 = *((_BYTE *)v2 + 4);
  v6 = *(_WORD *)((char *)v2 + 5);
  v7 = *((_BYTE *)v2 + 7);
  v8 = *(_WORD *)((char *)v2 + 9);
  v9 = a2;
  result = specialized FixedWidthInteger.init<A>(clamping:)(v9 * 128.0);
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_WORD *)(a1 + 5) = v6;
  *(_BYTE *)(a1 + 7) = v7;
  *(_BYTE *)(a1 + 8) = result;
  *(_WORD *)(a1 + 9) = v8;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.blur(radius:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int *v2;
  int v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  char v9;
  float v10;
  uint64_t result;

  v4 = *v2;
  v5 = *((_BYTE *)v2 + 4);
  v6 = *((_BYTE *)v2 + 5);
  v7 = *((_BYTE *)v2 + 6);
  v8 = *(_WORD *)((char *)v2 + 7);
  v9 = *((_BYTE *)v2 + 10);
  v10 = a2;
  result = specialized FixedWidthInteger.init<A>(clamping:)(v10 * 4.0);
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_BYTE *)(a1 + 5) = v6;
  *(_BYTE *)(a1 + 6) = v7 & 0xFD;
  *(_WORD *)(a1 + 7) = v8;
  *(_BYTE *)(a1 + 9) = result;
  *(_BYTE *)(a1 + 10) = v9;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.relativeOffset(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int *v2;
  int v4;
  char v5;
  char v6;
  float v7;
  uint64_t result;

  v4 = *v2;
  v5 = *((_BYTE *)v2 + 4);
  v6 = *((_BYTE *)v2 + 9);
  v7 = a2;
  result = specialized FixedWidthInteger.init<A>(clamping:)(v7 * 32.0);
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 5) = *(int *)((char *)v2 + 5);
  *(_BYTE *)(a1 + 9) = v6;
  *(_BYTE *)(a1 + 10) = result;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.reversed(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;

  v3 = *(_BYTE *)(v2 + 4);
  v4 = *(_BYTE *)(v2 + 5);
  v5 = *(_BYTE *)(v2 + 6) & 0xFE | result;
  *(_DWORD *)a2 = *(_DWORD *)v2;
  *(_BYTE *)(a2 + 4) = v3;
  *(_BYTE *)(a2 + 5) = v4;
  *(_BYTE *)(a2 + 6) = v5;
  *(_DWORD *)(a2 + 7) = *(_DWORD *)(v2 + 7);
  return result;
}

uint64_t EnvironmentValues.contentTransition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 v13;
  char v14;
  char v15;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v11);
    swift_release_n();
    swift_release_n();
    v4 = v11;
    v5 = v12 | ((unint64_t)v13 << 32);
    v6 = v14;
    v7 = v15;
  }
  else
  {
    v8 = swift_retain_n();
    v9 = specialized find<A>(_:key:)(v8);
    if (v9)
    {
      v4 = *(_QWORD *)(v9 + 72);
      v5 = *(unsigned int *)(v9 + 80) | ((unint64_t)*(unsigned __int8 *)(v9 + 84) << 32);
      v6 = *(_BYTE *)(v9 + 85);
      v7 = *(_BYTE *)(v9 + 86);
      outlined copy of ContentTransition.Storage(v4, v5, v6);
      swift_retain();
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v5 = 0x302000000;
      v4 = 0x8000000000;
    }
    swift_release_n();
  }
  outlined copy of ContentTransition.Storage(v4, v5, v6);
  outlined consume of ContentTransition.Storage(v4, v5, v6);
  result = swift_release();
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 12) = BYTE4(v5);
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 13) = v6;
  *(_BYTE *)(a1 + 14) = v7;
  return result;
}

uint64_t EnvironmentValues.contentTransition.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  char v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;

  v2 = v1;
  v3 = *(unsigned __int8 *)(a1 + 13);
  v21 = *(unsigned __int8 *)(a1 + 14);
  v5 = *v1;
  v4 = v1[1];
  v19 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  v20 = *(_QWORD *)a1;
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v5, (uint64_t)&v22);
    swift_release_n();
    swift_release_n();
    v6 = v22;
    v7 = v23 | ((unint64_t)v24 << 32);
    v8 = v25;
    v9 = v26;
    v10 = v27;
    v11 = v28;
  }
  else
  {
    v12 = swift_retain_n();
    v13 = specialized find<A>(_:key:)(v12);
    if (v13)
    {
      v6 = *(_QWORD *)(v13 + 72);
      v7 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      v8 = *(_BYTE *)(v13 + 85);
      v18 = *(unsigned __int8 *)(v13 + 87);
      v10 = *(_QWORD *)(v13 + 88);
      v11 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      v8 = 0;
      v18 = 0;
      v10 = 0;
      v11 = 0;
      v7 = 0x302000000;
      v6 = 0x8000000000;
    }
    swift_release_n();
    v9 = v18;
  }
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v20, v19, v3);
  v14 = 0x1000000000000;
  if (!v21)
    v14 = 0;
  v15 = v19 & 0xFFFFFFFFFFLL | (v3 << 40) | v14 | (v9 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v20, v15, v10, v11);
  swift_release();
  outlined consume of ContentTransition.Storage(v20, v19, v3);
  swift_release();
  if (v4)
  {
    v16 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v16);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v20, v19, v3);
  return swift_release();
}

uint64_t View.contentTransition(_:animation:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;

  v6 = *(unsigned __int8 *)(a1 + 12);
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 | (v6 << 32);
  v9 = *(_BYTE *)(a1 + 14);
  v12 = *(_QWORD *)a1;
  v5 = v12;
  v14 = v6;
  v13 = v7;
  v15 = *(_BYTE *)(a1 + 13);
  v10 = v15;
  v16 = v9;
  v17 = a2;
  v18 = a3;
  View.modifier<A>(_:)(&v12, a4, &type metadata for _ContentTransitionModifier, a5);
  outlined copy of ContentTransition.Storage(v5, v8, v10);
  swift_retain();
  outlined consume of ContentTransition.Storage(v5, v8, v10);
  return swift_release();
}

uint64_t _ContentTransitionModifier.init(transition:animation:options:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  __int16 v5;
  char v6;

  v4 = *(_DWORD *)(result + 8);
  v5 = *(_WORD *)(result + 12);
  v6 = *(_BYTE *)(result + 14);
  *(_QWORD *)a4 = *(_QWORD *)result;
  *(_WORD *)(a4 + 12) = v5;
  *(_DWORD *)(a4 + 8) = v4;
  *(_BYTE *)(a4 + 14) = v6;
  *(_QWORD *)(a4 + 16) = a2;
  *(_DWORD *)(a4 + 24) = a3;
  return result;
}

uint64_t View.contentTransitionGroup()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _ContentTransitionGroup, a2);
}

uint64_t ContentTransition.State.transition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 12);
  v4 = *(unsigned int *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 14);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v6 = *(_BYTE *)(v1 + 13);
  *(_BYTE *)(a1 + 13) = v6;
  *(_BYTE *)(a1 + 14) = v5;
  return outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v6);
}

uint64_t _ContentTransitionModifier.transition.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  int v4;
  char v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 6);
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 14);
  result = outlined consume of ContentTransition.Storage(*(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(_BYTE *)(v1 + 13));
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(_BYTE *)(v1 + 14) = v5;
  return result;
}

uint64_t (*_ContentTransitionModifier.transition.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ContentTransitionModifier.animation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*_ContentTransitionModifier.animation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ContentTransitionModifier.options.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*_ContentTransitionModifier.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ContentTransitionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 8);
  v17 = *((_DWORD *)a2 + 2);
  v18 = *((_DWORD *)a2 + 9);
  v6 = a2[5];
  v7 = a2[6];
  v19 = *((_DWORD *)a2 + 20);
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Attribute.init<A>(body:value:flags:update:)();
  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v11, v12, v13);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v9;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_WORD *)(v14 + 80) = 256;
  *(_QWORD *)(v14 + 88) = v10;
  swift_release();
  v21 = v4;
  v22 = v17;
  v23 = v14;
  v24 = a2[3];
  v25 = v5 | 0x20;
  v26 = v18;
  v27 = v6;
  v28 = v7;
  v29 = *(_OWORD *)(a2 + 7);
  v30 = a2[9];
  v31 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v21);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _ContentTransitionModifier.ChildEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  unsigned __int8 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v2 = Value[1];
  v34 = *Value;
  v35 = v2;
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v28);
    swift_release_n();
    swift_release_n();
    v4 = v28;
    v5 = v29 | ((unint64_t)v30 << 32);
    v6 = v31;
    v25 = v33;
    v26 = v32;
  }
  else
  {
    v7 = swift_retain_n();
    v8 = specialized find<A>(_:key:)(v7);
    if (v8)
    {
      v9 = *(unsigned __int8 *)(v8 + 87);
      v10 = *(_DWORD *)(v8 + 96);
      v4 = *(_QWORD *)(v8 + 72);
      v11 = *(unsigned int *)(v8 + 80) | ((unint64_t)*(unsigned __int8 *)(v8 + 84) << 32);
      v12 = *(_BYTE *)(v8 + 85);
      outlined copy of ContentTransition.Storage(v4, v11, v12);
      swift_retain();
    }
    else
    {
      v12 = 0;
      v9 = 0;
      LOBYTE(v10) = 0;
      v11 = 0x302000000;
      v4 = 0x8000000000;
    }
    v25 = v10;
    v26 = v9;
    swift_release_n();
    v6 = v12;
    v5 = v11;
  }
  v13 = AGGraphGetValue();
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 8) | ((unint64_t)*(unsigned __int8 *)(v13 + 12) << 32);
  v16 = *(unsigned __int8 *)(v13 + 13);
  v24 = *(unsigned __int8 *)(v13 + 14);
  outlined copy of ContentTransition.Storage(*(_QWORD *)v13, v15, v16);
  outlined consume of ContentTransition.Storage(v4, v5, v6);
  v17 = *(_QWORD *)(AGGraphGetValue() + 16);
  swift_retain();
  swift_release();
  v18 = *(_DWORD *)(AGGraphGetValue() + 24) | v25 & 1;
  swift_retain();
  outlined copy of ContentTransition.Storage(v14, v15, v16);
  swift_retain();
  swift_retain();
  outlined copy of ContentTransition.Storage(v14, v15, v16);
  v19 = 0x1000000000000;
  if (!v24)
    v19 = 0;
  v20 = v15 | (v16 << 40) | v19 | (v26 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v34, v14, v20, v17, v18);
  swift_release();
  outlined consume of ContentTransition.Storage(v14, v15, v16);
  swift_release();
  if (v2)
  {
    v21 = v34;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v21);
    swift_release();
    swift_release();
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    result = swift_release();
  }
  else
  {
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    result = swift_release();
    v21 = v34;
  }
  v23 = v35;
  *a1 = v21;
  a1[1] = v23;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ContentTransitionModifier.ChildEnvironment@<X0>(uint64_t *a1@<X8>)
{
  return _ContentTransitionModifier.ChildEnvironment.value.getter(a1);
}

uint64_t key path getter for EnvironmentValues.contentTransitionState : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  __int16 v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v11);
    swift_release_n();
  }
  else
  {
    swift_retain_n();
    specialized PropertyList.subscript.getter((uint64_t)&v11);
  }
  result = swift_release_n();
  v5 = v12;
  v6 = v13;
  v7 = v14;
  v8 = v15;
  v9 = v16;
  v10 = v17;
  *(_QWORD *)a2 = v11;
  *(_WORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 14) = v7;
  *(_BYTE *)(a2 + 15) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t key path setter for EnvironmentValues.contentTransitionState : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)a1;
  v2 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  v3 = *(unsigned __int8 *)(a1 + 13);
  v4 = *(unsigned __int8 *)(a1 + 14);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a1 + 15);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a1, v2, v3);
  v8 = 0x1000000000000;
  if (!v4)
    v8 = 0;
  v9 = v2 | (v3 << 40) | v8 | (v7 << 56);
  swift_retain();
  specialized EnvironmentValues.subscript.setter(v1, v9, v5, v6);
  outlined consume of ContentTransition.Storage(v1, v2, v3);
  return swift_release();
}

void (*EnvironmentValues.contentTransitionState.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  int v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v6 = specialized find<A>(_:key:)(v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 72);
      v8 = *(unsigned int *)(v6 + 80) | ((unint64_t)*(unsigned __int8 *)(v6 + 84) << 32);
      v9 = *(_BYTE *)(v6 + 85);
      v10 = *(_BYTE *)(v6 + 86);
      v11 = *(_BYTE *)(v6 + 87);
      v12 = *(_QWORD *)(v6 + 88);
      v13 = *(_DWORD *)(v6 + 96);
      outlined copy of ContentTransition.Storage(v7, v8, v9);
      swift_retain();
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v8 = 0x302000000;
      v7 = 0x8000000000;
    }
    *v3 = v7;
    *((_DWORD *)v3 + 2) = v8;
    *((_BYTE *)v3 + 12) = BYTE4(v8);
    *((_BYTE *)v3 + 13) = v9;
    *((_BYTE *)v3 + 14) = v10;
    *((_BYTE *)v3 + 15) = v11;
    v3[2] = v12;
    *((_DWORD *)v3 + 6) = v13;
    swift_release();
  }
  swift_release_n();
  return EnvironmentValues.contentTransitionState.modify;
}

void EnvironmentValues.contentTransitionState.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = (uint64_t *)(*a1)[6];
  v4 = **a1;
  v5 = *((unsigned int *)*a1 + 2) | ((unint64_t)*((unsigned __int8 *)*a1 + 12) << 32);
  v6 = *((unsigned __int8 *)*a1 + 13);
  v7 = *((unsigned __int8 *)*a1 + 14);
  v8 = *((unsigned __int8 *)*a1 + 15);
  v9 = (*a1)[2];
  v10 = *((_DWORD *)*a1 + 6);
  v11 = *v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    swift_retain_n();
    swift_retain();
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    v12 = 0x1000000000000;
    if (!v7)
      v12 = 0;
    v13 = v5 & 0xFFFFFFFFFFLL | (v6 << 40) | v12 | (v8 << 56);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v13, v9, v10);
    swift_release();
    outlined consume of ContentTransition.Storage(v4, v5, v6);
    swift_release();
    if (v3[1])
    {
      v14 = *(_QWORD *)v2[6];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v14);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of ContentTransition.Storage(v4, v5, v6);
    swift_release();
    v15 = *v2;
    v16 = *((unsigned int *)v2 + 2) | ((unint64_t)*((unsigned __int8 *)v2 + 12) << 32);
    v17 = *((_BYTE *)v2 + 13);
  }
  else
  {
    swift_retain_n();
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    v18 = 0x1000000000000;
    if (!v7)
      v18 = 0;
    v19 = v5 & 0xFFFFFFFFFFLL | (v6 << 40) | v18 | (v8 << 56);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v19, v9, v10);
    swift_release();
    outlined consume of ContentTransition.Storage(v4, v5, v6);
    swift_release();
    if (v3[1])
    {
      v20 = *(_QWORD *)v2[6];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v20);
      swift_release();
      swift_release();
    }
    swift_release();
    v15 = v4;
    v16 = v5;
    v17 = v6;
  }
  outlined consume of ContentTransition.Storage(v15, v16, v17);
  swift_release();
  free(v2);
}

uint64_t key path setter for EnvironmentValues.contentTransition : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  char v10;

  v1 = *(unsigned __int8 *)(a1 + 12);
  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 14);
  v4 = *(_BYTE *)(a1 + 13);
  v6 = *(_QWORD *)a1;
  v8 = v1;
  v7 = v2;
  v9 = v4;
  v10 = v3;
  outlined copy of ContentTransition.Storage(v6, v2 | (v1 << 32), v4);
  return EnvironmentValues.contentTransition.setter((uint64_t)&v6);
}

uint64_t (*EnvironmentValues.contentTransition.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  EnvironmentValues.contentTransition.getter(a1);
  return EnvironmentValues.contentTransition.modify;
}

uint64_t EnvironmentValues.contentTransition.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  char v11;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  v4 = *(_BYTE *)(a1 + 13);
  v5 = *(_BYTE *)(a1 + 14);
  v7 = *(_QWORD *)a1;
  v8 = v3;
  v9 = BYTE4(v3);
  v10 = v4;
  v11 = v5;
  if ((a2 & 1) == 0)
    return EnvironmentValues.contentTransition.setter((uint64_t)&v7);
  outlined copy of ContentTransition.Storage(v2, v3, v4);
  EnvironmentValues.contentTransition.setter((uint64_t)&v7);
  return outlined consume of ContentTransition.Storage(v2, v3, v4);
}

uint64_t (*EnvironmentValues.contentTransitionStyle.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  EnvironmentValues.contentTransitionStyle.getter((_BYTE *)(a1 + 8));
  return EnvironmentValues.contentTransitionStyle.modify;
}

uint64_t EnvironmentValues.contentTransitionStyle.modify(uint64_t a1, char a2)
{
  unsigned __int8 *v2;
  char v4;
  char v5;

  if ((a2 & 1) != 0)
  {
    v4 = *(_BYTE *)(a1 + 8);
    v2 = (unsigned __int8 *)&v4;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 8);
    v2 = (unsigned __int8 *)&v5;
  }
  return EnvironmentValues.contentTransitionStyle.setter(v2);
}

uint64_t EnvironmentValues.contentTransitionAnimation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  uint64_t v13;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t)&v9);
    swift_release_n();
    swift_release_n();
    v2 = v9;
    v3 = v10 | ((unint64_t)v11 << 32);
    v4 = v12;
    v5 = v13;
  }
  else
  {
    v6 = swift_retain_n();
    v7 = specialized find<A>(_:key:)(v6);
    if (v7)
    {
      v2 = *(_QWORD *)(v7 + 72);
      v3 = *(unsigned int *)(v7 + 80) | ((unint64_t)*(unsigned __int8 *)(v7 + 84) << 32);
      v4 = *(_BYTE *)(v7 + 85);
      v5 = *(_QWORD *)(v7 + 88);
      outlined copy of ContentTransition.Storage(v2, v3, v4);
      swift_retain();
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v3 = 0x302000000;
      v2 = 0x8000000000;
    }
    swift_release_n();
  }
  swift_retain();
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  swift_release();
  return v5;
}

uint64_t EnvironmentValues.contentTransitionAnimation.setter(uint64_t a1)
{
  specialized EnvironmentValues.contentTransitionAnimation.setter(a1);
  return swift_release();
}

uint64_t (*EnvironmentValues.contentTransitionAnimation.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = EnvironmentValues.contentTransitionAnimation.getter();
  return EnvironmentValues.contentTransitionAnimation.modify;
}

uint64_t EnvironmentValues.contentTransitionAnimation.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = swift_retain();
    specialized EnvironmentValues.contentTransitionAnimation.setter(v3);
    swift_release();
  }
  else
  {
    specialized EnvironmentValues.contentTransitionAnimation.setter(v2);
  }
  return swift_release();
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  int v13;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t)&v9);
    swift_release_n();
    swift_release_n();
    v2 = v9;
    v3 = v10 | ((unint64_t)v11 << 32);
    v4 = v12;
    LOBYTE(v5) = v13;
  }
  else
  {
    v6 = swift_retain_n();
    v7 = specialized find<A>(_:key:)(v6);
    if (v7)
    {
      v2 = *(_QWORD *)(v7 + 72);
      v3 = *(unsigned int *)(v7 + 80) | ((unint64_t)*(unsigned __int8 *)(v7 + 84) << 32);
      v4 = *(_BYTE *)(v7 + 85);
      v5 = *(_DWORD *)(v7 + 96);
      outlined copy of ContentTransition.Storage(v2, v3, v4);
      swift_retain();
    }
    else
    {
      v4 = 0;
      LOBYTE(v5) = 0;
      v3 = 0x302000000;
      v2 = 0x8000000000;
    }
    swift_release_n();
  }
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  swift_release();
  return v5 & 1;
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.setter(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  int v27;

  v2 = v1;
  v3 = *v1;
  v4 = v1[1];
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v20);
    swift_release_n();
    swift_release_n();
    v5 = v27;
    v6 = v20;
    v7 = v21 | ((unint64_t)v22 << 32);
    v8 = v23;
    v9 = v24;
    v10 = v25;
    v11 = v26;
  }
  else
  {
    v12 = swift_retain_n();
    v13 = specialized find<A>(_:key:)(v12);
    if (v13)
    {
      v6 = *(_QWORD *)(v13 + 72);
      v7 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      v8 = *(unsigned __int8 *)(v13 + 85);
      v9 = *(unsigned __int8 *)(v13 + 86);
      v10 = *(unsigned __int8 *)(v13 + 87);
      v11 = *(_QWORD *)(v13 + 88);
      v5 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v5 = 0;
      v7 = 0x302000000;
      v6 = 0x8000000000;
    }
    swift_release_n();
  }
  v14 = v5 & 0xFFFFFFFE | a1 & 1;
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v6, v7, v8);
  v15 = 0x1000000000000;
  if (!v9)
    v15 = 0;
  v16 = v7 & 0xFFFFFFFFFFLL | (v8 << 40) | v15 | (v10 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v6, v16, v11, v14);
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  swift_release();
  if (v4)
  {
    v17 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v17);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  return swift_release();
}

uint64_t (*EnvironmentValues.contentTransitionAddsDrawingGroup.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = EnvironmentValues.contentTransitionAddsDrawingGroup.getter() & 1;
  return EnvironmentValues.contentTransitionAddsDrawingGroup.modify;
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.modify(uint64_t a1)
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter(*(_BYTE *)(a1 + 8));
}

uint64_t EnvironmentValues.contentTransitionGroupEffect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  char v32;
  unsigned __int8 v33;
  uint64_t v34;
  int v35;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v28);
    swift_release_n();
    swift_release_n();
    v4 = v35;
    v5 = v33;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v27);
    swift_release_n();
    result = swift_release_n();
    v7 = v27;
    v8 = v28;
    v9 = v29 | ((unint64_t)v30 << 32);
    v10 = v31;
  }
  else
  {
    v11 = swift_retain_n();
    v12 = specialized find<A>(_:key:)(v11);
    if (v12)
    {
      v8 = *(_QWORD *)(v12 + 72);
      v9 = *(unsigned int *)(v12 + 80) | ((unint64_t)*(unsigned __int8 *)(v12 + 84) << 32);
      v10 = *(unsigned __int8 *)(v12 + 85);
      v13 = *(_BYTE *)(v12 + 86);
      v5 = *(unsigned __int8 *)(v12 + 87);
      v14 = *(_QWORD *)(v12 + 88);
      v4 = *(_DWORD *)(v12 + 96);
      outlined copy of ContentTransition.Storage(v8, v9, v10);
      swift_retain();
    }
    else
    {
      v10 = 0;
      v13 = 0;
      v5 = 0;
      v14 = 0;
      v4 = 0;
      v9 = 0x302000000;
      v8 = 0x8000000000;
    }
    v32 = v13;
    v34 = v14;
    swift_release_n();
    v15 = swift_retain_n();
    v16 = specialized find<A>(_:key:)(v15);
    if (v16)
      v7 = *(unsigned __int8 *)(v16 + 72);
    else
      v7 = 0;
    result = swift_release_n();
  }
  if (BYTE4(v9) == 3)
    v17 = v5;
  else
    v17 = BYTE4(v9);
  if ((v9 & 0xFF000000) == 0x2000000)
    v18 = v7;
  else
    v18 = (v9 >> 24) & 1;
  v19 = v18 == 0;
  v20 = 0x1000000;
  if (v19)
    v20 = 0;
  v21 = v20 & 0xFFFFFFFFFF000000 | v9 & 0xFFFFFF | (v17 << 32);
  if (BYTE4(v9) == 2)
    v22 = v7;
  else
    v22 = BYTE4(v9) & 1;
  v19 = v22 == 0;
  v23 = 0x100000000;
  if (v19)
    v23 = 0;
  v24 = v23 & 0xFFFFFFFF00000000 | v9;
  if (v10 != 1)
    v24 = v9;
  if (!v10)
    v24 = v21;
  v25 = v32;
  v26 = v34;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 12) = BYTE4(v24);
  *(_BYTE *)(a1 + 13) = v10;
  *(_BYTE *)(a1 + 14) = v25;
  *(_BYTE *)(a1 + 15) = v5;
  *(_QWORD *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 24) = v4 | 4;
  return result;
}

uint64_t static _ContentTransitionGroup._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a3@<X8>)
{
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  uint64_t KeyPath;
  __int128 v9;
  __int128 v10;
  _OWORD v12[5];
  int v13;
  _OWORD v14[3];

  v4 = (_OWORD *)a1;
  v6 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v7;
  KeyPath = swift_getKeyPath();
  v9 = v4[1];
  v14[0] = *v4;
  v10 = v4[2];
  v14[1] = v9;
  v14[2] = v10;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v14);
  swift_release();
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v12, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, a3, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

uint64_t key path getter for EnvironmentValues.contentTransitionGroupEffect : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  __int16 v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;

  result = EnvironmentValues.contentTransitionGroupEffect.getter((uint64_t)&v9);
  v3 = v10;
  v4 = v11;
  v5 = v12;
  v6 = v13;
  v7 = v14;
  v8 = v15;
  *(_QWORD *)a1 = v9;
  *(_WORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 14) = v5;
  *(_BYTE *)(a1 + 15) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContentTransitionGroup@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a3@<X8>)
{
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  uint64_t KeyPath;
  __int128 v9;
  __int128 v10;
  _OWORD v12[5];
  int v13;
  _OWORD v14[3];

  v4 = (_OWORD *)a1;
  v6 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 64);
  v13 = *(_DWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v7;
  KeyPath = swift_getKeyPath();
  v9 = v4[1];
  v14[0] = *v4;
  v10 = v4[2];
  v14[1] = v9;
  v14[2] = v10;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v14);
  swift_release();
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v12, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, a3, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

uint64_t ContentTransitionEffect.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 12);
  v4 = *(unsigned int *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 14);
  v6 = *(_BYTE *)(v1 + 15);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v9 = *(_BYTE *)(v1 + 13);
  *(_BYTE *)(a1 + 13) = v9;
  *(_BYTE *)(a1 + 14) = v5;
  *(_BYTE *)(a1 + 15) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v9);
  return swift_retain();
}

uint64_t ContentTransitionEffect.state.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t result;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 6);
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 14);
  v6 = *((_BYTE *)a1 + 15);
  v7 = a1[2];
  v8 = *((_DWORD *)a1 + 6);
  outlined consume of ContentTransition.Storage(*(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(_BYTE *)(v1 + 13));
  result = swift_release();
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(_BYTE *)(v1 + 14) = v5;
  *(_BYTE *)(v1 + 15) = v6;
  *(_QWORD *)(v1 + 16) = v7;
  *(_DWORD *)(v1 + 24) = v8;
  return result;
}

uint64_t (*ContentTransitionEffect.state.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransitionEffect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)v1;
  v4 = *(unsigned __int8 *)(v1 + 12);
  v5 = *(unsigned int *)(v1 + 8);
  v6 = *(_BYTE *)(v1 + 14);
  v7 = *(_BYTE *)(v1 + 15);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_DWORD *)(v1 + 24);
  v10 = *(_BYTE *)(v1 + 13);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v3;
  *(_BYTE *)(v11 + 28) = v4;
  *(_DWORD *)(v11 + 24) = v5;
  *(_BYTE *)(v11 + 29) = v10;
  *(_BYTE *)(v11 + 30) = v6;
  *(_BYTE *)(v11 + 31) = v7;
  *(_QWORD *)(v11 + 32) = v8;
  *(_DWORD *)(v11 + 40) = v9;
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 11;
  outlined copy of ContentTransition.Storage(v3, v5 | (v4 << 32), v10);
  return swift_retain();
}

uint64_t ContentTransitionEffect.Init.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *Value;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  char v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t result;
  char v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  __int16 v49;
  char v50;
  unsigned __int8 v51;
  uint64_t v52;
  int v53;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 20);
  v5 = *(unsigned int *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 21);
  Value = (uint64_t *)AGGraphGetValue();
  v8 = *Value;
  v44 = v5;
  v45 = v4;
  if (Value[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)&v47);
    swift_release_n();
    swift_release_n();
    v9 = v47;
    v10 = v48 | ((unint64_t)v49 << 32);
    v11 = HIBYTE(v49);
  }
  else
  {
    v12 = swift_retain_n();
    v13 = specialized find<A>(_:key:)(v12);
    v43 = v3;
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 72);
      v10 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      v11 = *(unsigned __int8 *)(v13 + 85);
      v42 = *(_BYTE *)(v13 + 86);
      v15 = *(_BYTE *)(v13 + 87);
      v16 = *(_QWORD *)(v13 + 88);
      v17 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v14, v10, v11);
      swift_retain();
      v18 = v15;
      v9 = v14;
      v19 = v42;
    }
    else
    {
      v11 = 0;
      v19 = 0;
      v18 = 0;
      v16 = 0;
      v17 = 0;
      v10 = 0x302000000;
      v9 = 0x8000000000;
    }
    v48 = v10;
    LOBYTE(v49) = BYTE4(v10);
    HIBYTE(v49) = v11;
    v50 = v19;
    v51 = v18;
    v52 = v16;
    v53 = v17;
    swift_release_n();
    v3 = v43;
  }
  v20 = BYTE3(v10);
  v21 = BYTE4(v10);
  if (v11)
  {
    LODWORD(v22) = v10;
    v6 = v11;
  }
  else if ((v9 & 0x8000000000) == 0 || v9 ^ 0x8000000000 | v10 & 0xFFFFFF)
  {
    v6 = 0;
    LODWORD(v22) = v10;
  }
  else
  {
    v22 = v44 | (v45 << 32);
    v48 = v44;
    LOBYTE(v49) = BYTE4(v22);
    HIBYTE(v49) = v6;
    v50 = 1;
    outlined copy of ContentTransition.Storage(v3, v22, v6);
    v20 = BYTE3(v44);
    v21 = BYTE4(v22);
    v9 = v3;
    LODWORD(v10) = v44;
  }
  v23 = v51;
  v24 = (uint64_t *)AGGraphGetValue();
  v25 = *v24;
  if (v24[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v25, &v46);
    swift_release_n();
    result = swift_release_n();
    v27 = v46;
    if (v6)
      goto LABEL_15;
LABEL_27:
    if (v21 == 3)
      v34 = v23;
    else
      v34 = v21;
    if (v20 == 2)
      v35 = v27;
    else
      v35 = v20;
    v29 = (v35 & 1) == 0;
    v36 = 0x1000000;
    if (v29)
      v36 = 0;
    v31 = v36 & 0xFFFFFFFFFF000000 | v10 & 0xFFFFFF | (v34 << 32);
    goto LABEL_37;
  }
  v32 = swift_retain_n();
  v33 = specialized find<A>(_:key:)(v32);
  if (v33)
    v27 = *(_BYTE *)(v33 + 72);
  else
    v27 = 0;
  result = swift_release_n();
  if (!v6)
    goto LABEL_27;
LABEL_15:
  if (v6 == 1)
  {
    if (v21 == 2)
      v28 = v27;
    else
      v28 = v21;
    v29 = (v28 & 1) == 0;
    v30 = 0x100000000;
    if (v29)
      v30 = 0;
    v31 = v30 | v22;
LABEL_37:
    v48 = v31;
    LOBYTE(v49) = BYTE4(v31);
    HIBYTE(v49) = v6;
  }
  v37 = v53 | 8;
  v38 = v48;
  v39 = v49;
  v40 = v50;
  v41 = v52;
  *(_QWORD *)a1 = v9;
  *(_WORD *)(a1 + 12) = v39;
  *(_DWORD *)(a1 + 8) = v38;
  *(_BYTE *)(a1 + 14) = v40;
  *(_BYTE *)(a1 + 15) = v23;
  *(_QWORD *)(a1 + 16) = v41;
  *(_DWORD *)(a1 + 24) = v37;
  return result;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance ContentTransitionEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)v1;
  v4 = *(unsigned __int8 *)(v1 + 12);
  v5 = *(unsigned int *)(v1 + 8);
  v6 = *(_BYTE *)(v1 + 14);
  v7 = *(_BYTE *)(v1 + 15);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_DWORD *)(v1 + 24);
  v10 = *(_BYTE *)(v1 + 13);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v3;
  *(_BYTE *)(v11 + 28) = v4;
  *(_DWORD *)(v11 + 24) = v5;
  *(_BYTE *)(v11 + 29) = v10;
  *(_BYTE *)(v11 + 30) = v6;
  *(_BYTE *)(v11 + 31) = v7;
  *(_QWORD *)(v11 + 32) = v8;
  *(_DWORD *)(v11 + 40) = v9;
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 11;
  outlined copy of ContentTransition.Storage(v3, v5 | (v4 << 32), v10);
  return swift_retain();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentTransitionEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

void ContentTransition.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
  v4 = *(_BYTE *)(v0 + 14);
  if (*(_BYTE *)(v0 + 13))
  {
    if (*(_BYTE *)(v0 + 13) == 1)
    {
      swift_bridgeObjectRetain();
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      outlined consume of ContentTransition.Storage(v2, v3, 1);
      if (v1)
        return;
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v2 & 0x1FFFFFFFFLL, *(float *)&v3);
      if (v1)
        return;
    }
  }
  else
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    if (v1)
      return;
  }
  if ((v4 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t ContentTransition.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  unsigned int v48;
  unsigned __int8 v49;
  _BOOL4 v50;

  v4 = (_QWORD *)result;
  v5 = 0x302000000;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (v6 >= v7)
    goto LABEL_75;
  v50 = 0;
  v8 = 0;
  v9 = 0x8000000000;
  while (2)
  {
    result = v4[3];
    if (!result)
      goto LABEL_9;
    v10 = v4[4];
    if (v6 >= v10)
    {
      if (v10 < v6)
        goto LABEL_77;
      v4[3] = 0;
LABEL_9:
      result = ProtobufDecoder.decodeVarint()();
      if (v3)
        return outlined consume of ContentTransition.Storage(v9, v5, v8);
      if (result <= 7)
      {
LABEL_77:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of ContentTransition.Storage(v9, v5, v8);
      }
    }
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_77;
        v11 = v9;
        v12 = (_QWORD *)v4[5];
        v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        v2 = v12[2];
        v13 = v12[3];
        v8 = v2 + 1;
        if (v2 >= v13 >> 1)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v2 + 1, 1, v12);
        v12[2] = v8;
        v12[v2 + 4] = v7;
        v4[5] = v12;
        v14 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_78;
        if (v14 < 0)
        {
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          __break(1u);
          v42 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v2);
          v43 = v42[2];
          if (v43)
            goto LABEL_87;
          __break(1u);
          v42 = (_QWORD *)v4[5];
          if (v42[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v43 = v42[2];
              if (!v43)
                goto LABEL_84;
LABEL_87:
              v44 = v43 - 1;
              v45 = v42[v44 + 4];
              v42[2] = v44;
              v4[5] = v42;
              v4[2] = v45;
              return outlined consume of ContentTransition.Storage(v9, v5, v8);
            }
          }
          else
          {
            __break(1u);
          }
          v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
          v43 = v42[2];
          if (v43)
            goto LABEL_87;
LABEL_84:
          __break(1u);
          v42 = (_QWORD *)v4[5];
          if (v42[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v43 = v42[2];
              if (v43)
                goto LABEL_87;
LABEL_105:
              __break(1u);
              JUMPOUT(0x23513CC54);
            }
          }
          else
          {
            __break(1u);
          }
          v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
          v43 = v42[2];
          if (v43)
            goto LABEL_87;
          goto LABEL_105;
        }
        LOBYTE(v8) = v9;
        v15 = v4[1] + v14;
        if (v7 < v15)
          goto LABEL_79;
        v4[2] = v15;
        ContentTransition.NamedTransition.init(from:)((unint64_t)v4, (uint64_t)&v47);
        v9 = v11;
        v16 = (_QWORD *)v4[5];
        if (!v16[2])
          goto LABEL_92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v17 = v16[2];
          if (!v17)
            goto LABEL_95;
        }
        else
        {
          v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          v17 = v16[2];
          if (!v17)
            goto LABEL_95;
        }
        v18 = v17 - 1;
        v19 = v16[v18 + 4];
        v16[2] = v18;
        v4[5] = v16;
        v4[2] = v19;
        v2 = (uint64_t)v47;
        v20 = v48 | ((unint64_t)v49 << 32);
        result = outlined consume of ContentTransition.Storage(v11, v5, v8);
        v8 = 0;
LABEL_3:
        v5 = v20;
        v9 = v2;
LABEL_4:
        v6 = v4[1];
        v7 = v4[2];
        if (v6 >= v7)
          goto LABEL_76;
        continue;
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_77;
        v11 = v9;
        v21 = (_QWORD *)v4[5];
        v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        v2 = v21[2];
        v22 = v21[3];
        v8 = v2 + 1;
        if (v2 >= v22 >> 1)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v2 + 1, 1, v21);
        v21[2] = v8;
        v21[v2 + 4] = v7;
        v4[5] = v21;
        v23 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_78;
        if (v23 < 0)
          goto LABEL_90;
        LOBYTE(v8) = v9;
        v24 = v4[1] + v23;
        if (v7 < v24)
          goto LABEL_79;
        v4[2] = v24;
        ContentTransition.CustomTransition.init(from:)((unint64_t)v4, (uint64_t)&v47);
        v9 = v11;
        v25 = (_QWORD *)v4[5];
        if (!v25[2])
          goto LABEL_93;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v26 = v25[2];
          if (!v26)
            goto LABEL_96;
        }
        else
        {
          v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          v26 = v25[2];
          if (!v26)
            goto LABEL_96;
        }
        v27 = v26 - 1;
        v28 = v25[v27 + 4];
        v25[2] = v27;
        v4[5] = v25;
        v4[2] = v28;
        v2 = (uint64_t)v47;
        v20 = v48 | ((unint64_t)v49 << 32);
        result = outlined consume of ContentTransition.Storage(v11, v5, v8);
        v8 = 1;
        goto LABEL_3;
      case 3uLL:
        if ((result & 7) == 0)
          goto LABEL_45;
        if ((result & 7) != 2)
          goto LABEL_77;
        v29 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of ContentTransition.Storage(v9, v5, v8);
        if (v29 < 0)
          goto LABEL_97;
        v30 = v4[1] + v29;
        if (v7 < v30)
          goto LABEL_77;
        v4[3] = 24;
        v4[4] = v30;
LABEL_45:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of ContentTransition.Storage(v9, v5, v8);
        v50 = result != 0;
        goto LABEL_4;
      case 4uLL:
        if ((result & 7) != 2)
          goto LABEL_77;
        v11 = v9;
        v31 = (_QWORD *)v4[5];
        v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v2 = v31[2];
        v32 = v31[3];
        v8 = v2 + 1;
        if (v2 >= v32 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v2 + 1, 1, v31);
        v31[2] = v8;
        v31[v2 + 4] = v7;
        v4[5] = v31;
        v33 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
LABEL_78:
          LOBYTE(v8) = v9;
          goto LABEL_80;
        }
        if (v33 < 0)
          goto LABEL_91;
        LOBYTE(v8) = v9;
        v34 = v4[1] + v33;
        if (v7 >= v34)
        {
          v4[2] = v34;
          _SymbolEffect.ReplaceConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v47);
          v9 = v11;
          v35 = (_QWORD *)v4[5];
          if (!v35[2])
            goto LABEL_94;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            v36 = v35[2];
            if (!v36)
              goto LABEL_74;
            goto LABEL_58;
          }
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          v35 = (_QWORD *)result;
          v36 = *(_QWORD *)(result + 16);
          if (v36)
          {
LABEL_58:
            v37 = v36 - 1;
            v38 = v35[v37 + 4];
            v35[2] = v37;
            v4[5] = v35;
            v4[2] = v38;
            v2 = v48;
            v39 = 0x100000000;
            if (!BYTE4(v47))
              v39 = 0;
            v40 = v39 | v47;
            result = outlined consume of ContentTransition.Storage(v11, v5, v8);
            v8 = 2;
            v5 = v2;
            v9 = v40;
            goto LABEL_4;
          }
LABEL_74:
          __break(1u);
LABEL_75:
          v50 = 0;
          LOBYTE(v8) = 0;
          v9 = 0x8000000000;
LABEL_76:
          v4[3] = 0;
          *(_QWORD *)a2 = v9;
          *(_DWORD *)(a2 + 8) = v5;
          *(_BYTE *)(a2 + 12) = BYTE4(v5);
          *(_BYTE *)(a2 + 13) = v8;
          *(_BYTE *)(a2 + 14) = v50;
          return result;
        }
LABEL_79:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_80:
        v9 = v11;
        return outlined consume of ContentTransition.Storage(v9, v5, v8);
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              return outlined consume of ContentTransition.Storage(v9, v5, v8);
            goto LABEL_4;
          case 1uLL:
            v41 = v4[1] + 8;
            if (v7 < v41)
              goto LABEL_77;
            goto LABEL_68;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              return outlined consume of ContentTransition.Storage(v9, v5, v8);
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_98;
            v41 = v4[1] + result;
            if (v7 < v41)
              goto LABEL_77;
LABEL_68:
            v4[1] = v41;
            break;
          case 5uLL:
            v41 = v4[1] + 4;
            if (v7 >= v41)
              goto LABEL_68;
            goto LABEL_77;
          default:
            goto LABEL_77;
        }
        goto LABEL_4;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
  v4 = *(unsigned __int8 *)(v0 + 14);
  if (*(_BYTE *)(v0 + 13))
  {
    if (*(_BYTE *)(v0 + 13) == 1)
    {
      swift_bridgeObjectRetain();
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      outlined consume of ContentTransition.Storage(v2, v3, 1);
      if (v1)
        return;
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v2 & 0x1FFFFFFFFLL, *(float *)&v3);
      if (v1)
        return;
    }
  }
  else
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    if (v1)
      return;
  }
  if (v4)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.init(from:)(a1, a2);
}

void ContentTransition.State.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  Swift::UInt v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  char v27;
  char v28;
  int v29;

  v3 = v1;
  v5 = *(_QWORD *)v3;
  v6 = *(unsigned int *)(v3 + 8) | ((unint64_t)*(unsigned __int8 *)(v3 + 12) << 32);
  v7 = *(unsigned __int8 *)(v3 + 13);
  v8 = *(unsigned __int8 *)(v3 + 14);
  v29 = *(unsigned __int8 *)(v3 + 15);
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
    {
      outlined copy of ContentTransition.Storage(v5, v6, 1);
      swift_bridgeObjectRetain();
    }
    outlined consume of ContentTransition.Storage(v5, v6, v7);
    outlined consume of ContentTransition.Storage(0x8000000000, 0x302000000, 0);
  }
  else
  {
    v24 = v5;
    v25 = v6;
    v26 = BYTE2(v6);
    v27 = BYTE3(v6);
    v28 = BYTE4(v6);
    v20 = 0x8000000000;
    v22 = 0;
    v21 = 0;
    v23 = 770;
    v11 = v9;
    v12 = v10;
    v13 = specialized static ContentTransition.NamedTransition.== infix(_:_:)(&v24, &v20);
    outlined consume of ContentTransition.Storage(v5, v6, 0);
    outlined consume of ContentTransition.Storage(0x8000000000, 0x302000000, 0);
    v14 = v8 | ~v13;
    v10 = v12;
    v9 = v11;
    if ((v14 & 1) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_11;
    }
  }
  v15 = 0x1000000000000;
  if (!v8)
    v15 = 0;
  specialized ProtobufEncoder.messageField<A>(_:_:)(1, v5, v6 & 0xFFFFFFFFFFLL | (v7 << 40) | v15);
  if (v2)
  {
    outlined consume of ContentTransition.Storage(v5, v6, v7);
    return;
  }
LABEL_11:
  outlined consume of ContentTransition.Storage(v5, v6, v7);
  if (!v29 || (specialized ProtobufEncoder.messageField<A>(_:_:)(2), !v2))
  {
    if (v9)
    {
      swift_retain();
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(_QWORD **)(a1 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v19 = v17[2];
      v18 = v17[3];
      if (v19 >= v18 >> 1)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
      v17[2] = v19 + 1;
      v17[v19 + 4] = v16;
      *(_QWORD *)(a1 + 24) = v17;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        return;
      }
      *(_QWORD *)(a1 + 8) = v16 + 1;
      CodableAnimation.encode(to:)(a1, v9);
      if (v2)
      {
        swift_release();
        return;
      }
      ProtobufEncoder.endLengthDelimited()();
      swift_release();
    }
    if ((_DWORD)v10)
    {
      ProtobufEncoder.encodeVarint(_:)(0x20uLL);
      ProtobufEncoder.encodeVarint(_:)(v10);
    }
  }
}

unint64_t ContentTransition.State.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int8 v62;
  char v63;
  unsigned __int8 v64;
  uint64_t v65;

  v3 = (_QWORD *)result;
  v59 = 0x302000000;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    LOBYTE(v7) = 0;
    LODWORD(v8) = 0;
    v65 = 0;
    LOBYTE(v9) = 0;
    v58 = 0;
    v57 = 0x8000000000;
LABEL_4:
    v3[3] = 0;
    *(_QWORD *)a2 = v57;
    *(_DWORD *)(a2 + 8) = v59;
    *(_BYTE *)(a2 + 12) = BYTE4(v59);
    *(_BYTE *)(a2 + 13) = v58;
    *(_BYTE *)(a2 + 14) = v7 & 1;
    *(_BYTE *)(a2 + 15) = v9;
    *(_QWORD *)(a2 + 16) = v65;
    *(_DWORD *)(a2 + 24) = v8;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v65 = 0;
  v9 = 0;
  v58 = 0;
  v57 = 0x8000000000;
  while (2)
  {
    result = v3[3];
    if (result)
    {
      v11 = v3[4];
      if (v5 < v11)
        goto LABEL_14;
      if (v11 < v5)
        goto LABEL_74;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_75;
    if (result <= 7)
      goto LABEL_74;
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_74;
        v12 = (_QWORD *)v3[5];
        v13 = (_QWORD *)v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        v15 = v12[2];
        v14 = v12[3];
        v9 = v15 + 1;
        if (v15 >= v14 >> 1)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
        v12[2] = v9;
        v12[v15 + 4] = v6;
        v3[5] = v12;
        v16 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_75;
        if (v16 < 0)
        {
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
        }
        else
        {
          v17 = v3[1] + v16;
          if (v6 < v17)
            goto LABEL_74;
          v3[2] = v17;
          ContentTransition.init(from:)((unint64_t)v3, (uint64_t)&v60);
          v9 = v3[5];
          if (*(_QWORD *)(v9 + 16))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v18 = *(_QWORD *)(v9 + 16);
              if (!v18)
                goto LABEL_87;
              goto LABEL_26;
            }
            v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
            v18 = *(_QWORD *)(v9 + 16);
            if (v18)
            {
LABEL_26:
              v19 = v18 - 1;
              v20 = *(_QWORD *)(v9 + 8 * v19 + 32);
              *(_QWORD *)(v9 + 16) = v19;
              v3[5] = v9;
              v3[2] = v20;
              v21 = v60;
              v22 = v61 | ((unint64_t)v62 << 32);
              v23 = v63;
              v24 = v8;
              v25 = v64;
              result = outlined consume of ContentTransition.Storage(v57, v59, v58);
              v58 = v23;
              v59 = v22;
              v57 = v21;
              v9 = (unint64_t)v13;
              v7 = v25;
              v8 = v24;
              goto LABEL_7;
            }
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            __break(1u);
            v48 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
            v49 = v48[2];
            if (v49)
              goto LABEL_79;
            __break(1u);
            v48 = (_QWORD *)v3[5];
            if (v48[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v49 = v48[2];
                if (v49)
                {
LABEL_79:
                  v50 = v49 - 1;
                  v51 = v48[v50 + 4];
                  v48[2] = v50;
                  v3[5] = v48;
                  v3[2] = v51;
                  goto LABEL_75;
                }
LABEL_94:
                __break(1u);
                __break(1u);
                v54 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
                v55 = v54[2];
                if (!v55)
                {
                  __break(1u);
                  JUMPOUT(0x23513D748);
                }
                v52 = v55 - 1;
                v53 = v54[v52 + 4];
                v54[2] = v52;
                v3[5] = v54;
                v3[2] = v53;
                goto LABEL_75;
              }
            }
            else
            {
              __break(1u);
            }
            v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
            v49 = v48[2];
            if (v49)
              goto LABEL_79;
            goto LABEL_94;
          }
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        goto LABEL_87;
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_74;
        v26 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        v28 = v26[2];
        v27 = v26[3];
        v9 = v28 + 1;
        if (v28 >= v27 >> 1)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
        v26[2] = v9;
        v26[v28 + 4] = v6;
        v3[5] = v26;
        v29 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_75;
        if (v29 < 0)
          goto LABEL_82;
        v30 = v3[1] + v29;
        if (v6 < v30)
          goto LABEL_74;
        v3[2] = v30;
        ContentTransition.Style.init(from:)((unint64_t)v3, (char *)&v60);
        v9 = v3[5];
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_85;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v31 = *(_QWORD *)(v9 + 16);
          if (!v31)
            goto LABEL_88;
        }
        else
        {
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
          v9 = result;
          v31 = *(_QWORD *)(result + 16);
          if (!v31)
            goto LABEL_88;
        }
        v32 = v31 - 1;
        v33 = *(_QWORD *)(v9 + 8 * v32 + 32);
        *(_QWORD *)(v9 + 16) = v32;
        v3[5] = v9;
        v3[2] = v33;
        v9 = v60;
        goto LABEL_7;
      case 3uLL:
        if ((result & 7) != 2)
          goto LABEL_74;
        v56 = v8;
        v34 = v7;
        v35 = (_QWORD *)v3[5];
        v36 = (_QWORD *)v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        v38 = v35[2];
        v37 = v35[3];
        v9 = v38 + 1;
        if (v38 >= v37 >> 1)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
        v35[2] = v9;
        v35[v38 + 4] = v6;
        v3[5] = v35;
        v39 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_75;
        if (v39 < 0)
          goto LABEL_83;
        v40 = v3[1] + v39;
        if (v6 < v40)
          goto LABEL_74;
        v3[2] = v40;
        v41 = specialized CodableAnimation.init(from:)(v3);
        v9 = v3[5];
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_86;
        v42 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v43 = *(_QWORD *)(v9 + 16);
          if (!v43)
            goto LABEL_73;
          goto LABEL_53;
        }
        v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
        v43 = *(_QWORD *)(v9 + 16);
        if (v43)
        {
LABEL_53:
          v44 = v43 - 1;
          v45 = *(_QWORD *)(v9 + 8 * v44 + 32);
          *(_QWORD *)(v9 + 16) = v44;
          v3[5] = v9;
          v3[2] = v45;
          result = swift_release();
          v65 = v42;
          v9 = (unint64_t)v36;
          v7 = v34;
          v8 = v56;
LABEL_7:
          v5 = v3[1];
          v6 = v3[2];
          if (v5 >= v6)
            goto LABEL_4;
          continue;
        }
LABEL_73:
        __break(1u);
LABEL_74:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_75:
        outlined consume of ContentTransition.Storage(v57, v59, v58);
        return swift_release();
      case 4uLL:
        if ((result & 7) == 0)
          goto LABEL_60;
        if ((result & 7) != 2)
          goto LABEL_74;
        v46 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_75;
        if (v46 < 0)
          goto LABEL_89;
        v47 = v3[1] + v46;
        if (v6 < v47)
          goto LABEL_74;
        v3[3] = 32;
        v3[4] = v47;
LABEL_60:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_75;
        v8 = result;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_75;
            goto LABEL_7;
          case 1uLL:
            v10 = v3[1] + 8;
            if (v6 < v10)
              goto LABEL_74;
            goto LABEL_6;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_75;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_90;
            v10 = v3[1] + result;
            if (v6 < v10)
              goto LABEL_74;
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            v10 = v3[1] + 4;
            if (v6 < v10)
              goto LABEL_74;
            goto LABEL_6;
          default:
            goto LABEL_74;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.State(uint64_t a1)
{
  ContentTransition.State.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.State@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.State.init(from:)(a1, a2);
}

uint64_t ContentTransition.Style.encode(to:)(uint64_t result)
{
  _BYTE *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *v1;
  if (*v1)
  {
    v3 = result;
    if (v2 == 1)
    {
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(_QWORD **)(v3 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v7 = v5[2];
      v6 = v5[3];
      if (v7 >= v6 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
      v5[2] = v7 + 1;
      v5[v7 + 4] = v4;
      *(_QWORD *)(v3 + 24) = v5;
      v8 = v4 + 1;
      if (!__OFADD__(v4, 1))
      {
LABEL_15:
        *(_QWORD *)(v3 + 8) = v8;
        return ProtobufEncoder.endLengthDelimited()();
      }
      __break(1u);
    }
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v9 = *(_QWORD *)(v3 + 8);
    v10 = *(_QWORD **)(v3 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      v10 = (_QWORD *)result;
    }
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
      v10 = (_QWORD *)result;
    }
    v10[2] = v12 + 1;
    v10[v12 + 4] = v9;
    *(_QWORD *)(v3 + 24) = v10;
    v8 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      return result;
    }
    goto LABEL_15;
  }
  return result;
}

unint64_t ContentTransition.Style.init(from:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v9 = v3[4];
        if (v5 < v9)
          goto LABEL_15;
        if (v9 < v5)
          goto LABEL_46;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_46:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      if (result >> 3 == 2)
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            v7 = 2;
            goto LABEL_8;
          case 1uLL:
            v8 = v3[1] + 8;
            if (v6 >= v8)
              goto LABEL_6;
            goto LABEL_46;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_49;
            v8 = v3[1] + result;
            if (v6 < v8)
              goto LABEL_46;
LABEL_6:
            v7 = 2;
            break;
          case 5uLL:
            v8 = v3[1] + 4;
            if (v6 < v8)
              goto LABEL_46;
            goto LABEL_6;
          default:
            goto LABEL_46;
        }
      }
      else
      {
        if (result >> 3 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              goto LABEL_8;
            case 1uLL:
              v8 = v3[1] + 8;
              if (v6 < v8)
                goto LABEL_46;
              goto LABEL_7;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_50;
              v8 = v3[1] + result;
              if (v6 < v8)
                goto LABEL_46;
              goto LABEL_7;
            case 5uLL:
              v8 = v3[1] + 4;
              if (v6 < v8)
                goto LABEL_46;
              goto LABEL_7;
            default:
              goto LABEL_46;
          }
        }
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            v7 = 1;
            goto LABEL_8;
          case 1uLL:
            v8 = v3[1] + 8;
            goto LABEL_31;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
              JUMPOUT(0x23513DB7CLL);
            }
            v8 = v3[1] + result;
LABEL_31:
            if (v6 < v8)
              goto LABEL_46;
            v7 = 1;
            break;
          case 5uLL:
            v8 = v3[1] + 4;
            goto LABEL_31;
          default:
            goto LABEL_46;
        }
      }
LABEL_7:
      v3[1] = v8;
LABEL_8:
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.Style(uint64_t a1)
{
  return ContentTransition.Style.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.Style@<X0>(unint64_t a1@<X0>, char *a2@<X8>)
{
  return ContentTransition.Style.init(from:)(a1, a2);
}

void ContentTransition.NamedTransition.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v3 = v1;
  v5 = *v3;
  v6 = *((_BYTE *)v3 + 11);
  v7 = *((unsigned __int8 *)v3 + 12);
  v8 = ((unint64_t)*v3 >> 38) & 3;
  if (!(_DWORD)v8)
  {
    ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
    v10[2] = v12 + 1;
    v10[v12 + 4] = v9;
    *(_QWORD *)(a1 + 24) = v10;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      JUMPOUT(0x23513DEA0);
    }
    *(_QWORD *)(a1 + 8) = v9 + 1;
    if ((v5 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    ProtobufEncoder.endLengthDelimited()();
    goto LABEL_14;
  }
  if ((_DWORD)v8 != 1)
    __asm { BR              X10 }
  specialized ProtobufEncoder.messageField<A>(_:_:)(6);
  if (!v2)
  {
LABEL_14:
    if ((v6 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x38uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if (v7)
    {
      if (v7 != 3)
        specialized ProtobufEncoder.messageField<A>(_:_:)(8);
    }
  }
}

unint64_t ContentTransition.NamedTransition.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int16 v51;
  unsigned __int8 v52;
  int v53;
  BOOL v54;
  char v55;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0x8000000000;
    v53 = 2;
    v9 = 3;
    while (1)
    {
      result = v3[3];
      if (!result)
        goto LABEL_8;
      v10 = v3[4];
      if (v5 >= v10)
        break;
LABEL_10:
      switch(result >> 3)
      {
        case 1uLL:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v7 = 0;
              goto LABEL_79;
            case 1uLL:
              v37 = v3[1] + 8;
              goto LABEL_77;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_138;
              v37 = v3[1] + result;
LABEL_77:
              if (v6 < v37)
                goto LABEL_120;
              v7 = 0;
              v3[1] = v37;
LABEL_79:
              v8 = 0x8000000001;
              break;
            case 5uLL:
              v37 = v3[1] + 4;
              goto LABEL_77;
            default:
              goto LABEL_120;
          }
          goto LABEL_3;
        case 2uLL:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v7 = 0;
              goto LABEL_95;
            case 1uLL:
              v39 = v3[1] + 8;
              goto LABEL_93;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_140;
              v39 = v3[1] + result;
LABEL_93:
              if (v6 < v39)
                goto LABEL_120;
              v7 = 0;
              v3[1] = v39;
LABEL_95:
              v8 = 0x8000000002;
              break;
            case 5uLL:
              v39 = v3[1] + 4;
              goto LABEL_93;
            default:
              goto LABEL_120;
          }
          goto LABEL_3;
        case 3uLL:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v7 = 0;
              goto LABEL_103;
            case 1uLL:
              v40 = v3[1] + 8;
              goto LABEL_101;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_141;
              v40 = v3[1] + result;
LABEL_101:
              if (v6 < v40)
                goto LABEL_120;
              v7 = 0;
              v3[1] = v40;
LABEL_103:
              v8 = 0x8000000003;
              break;
            case 5uLL:
              v40 = v3[1] + 4;
              goto LABEL_101;
            default:
              goto LABEL_120;
          }
          goto LABEL_3;
        case 4uLL:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v7 = 0;
              goto LABEL_111;
            case 1uLL:
              v41 = v3[1] + 8;
              goto LABEL_109;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_142;
              v41 = v3[1] + result;
LABEL_109:
              if (v6 < v41)
                goto LABEL_120;
              v7 = 0;
              v3[1] = v41;
LABEL_111:
              v8 = 0x8000000004;
              break;
            case 5uLL:
              v41 = v3[1] + 4;
              goto LABEL_109;
            default:
              goto LABEL_120;
          }
          goto LABEL_3;
        case 5uLL:
          if ((result & 7) != 2)
            goto LABEL_120;
          v11 = (_QWORD *)v3[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          v13 = v11[2];
          v12 = v11[3];
          if (v13 >= v12 >> 1)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
          v11[2] = v13 + 1;
          v11[v13 + 4] = v6;
          v3[5] = v11;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
            __break(1u);
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
            v42 = (_QWORD *)result;
            v43 = *(_QWORD *)(result + 16);
            if (v43)
              goto LABEL_128;
            __break(1u);
            v42 = (_QWORD *)v3[5];
            if (v42[2])
            {
              result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) != 0)
              {
                v43 = v42[2];
                if (!v43)
                  goto LABEL_125;
LABEL_128:
                v44 = v43 - 1;
                v45 = v42[v44 + 4];
                v42[2] = v44;
                v3[5] = v42;
                v3[2] = v45;
                return result;
              }
            }
            else
            {
              __break(1u);
            }
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v42);
            v42 = (_QWORD *)result;
            v43 = *(_QWORD *)(result + 16);
            if (v43)
              goto LABEL_128;
LABEL_125:
            __break(1u);
            v42 = (_QWORD *)v3[5];
            if (v42[2])
            {
              result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) != 0)
              {
                v43 = v42[2];
                if (v43)
                  goto LABEL_128;
LABEL_149:
                __break(1u);
                JUMPOUT(0x23513E8B0);
              }
            }
            else
            {
              __break(1u);
            }
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v42);
            v42 = (_QWORD *)result;
            v43 = *(_QWORD *)(result + 16);
            if (v43)
              goto LABEL_128;
            goto LABEL_149;
          }
          v14 = v3[1] + result;
          if (v6 < v14)
            goto LABEL_120;
          v3[2] = v14;
          closure #1 in ContentTransition.NamedTransition.init(from:)((unint64_t)v3, &v54);
          v15 = (_QWORD *)v3[5];
          if (!v15[2])
            goto LABEL_132;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            v16 = v15[2];
            if (!v16)
              goto LABEL_135;
          }
          else
          {
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
            v15 = (_QWORD *)result;
            v16 = *(_QWORD *)(result + 16);
            if (!v16)
              goto LABEL_135;
          }
          v7 = 0;
          v17 = v16 - 1;
          v18 = v15[v17 + 4];
          v15[2] = v17;
          v3[5] = v15;
          v3[2] = v18;
          v8 = v54;
          goto LABEL_3;
        case 6uLL:
          if ((result & 7) != 2)
            goto LABEL_120;
          v19 = (_QWORD *)v3[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
          v21 = v19[2];
          v20 = v19[3];
          if (v21 >= v20 >> 1)
            v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
          v19[2] = v21 + 1;
          v19[v21 + 4] = v6;
          v3[5] = v19;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_130;
          v22 = v3[1] + result;
          if (v6 < v22)
            goto LABEL_120;
          v3[2] = v22;
          ContentTransition.NumericTextConfiguration.init(from:)((unint64_t)v3, (uint64_t)&v46);
          v23 = (_QWORD *)v3[5];
          if (!v23[2])
            goto LABEL_133;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            v24 = v23[2];
            if (!v24)
              goto LABEL_136;
          }
          else
          {
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
            v23 = (_QWORD *)result;
            v24 = *(_QWORD *)(result + 16);
            if (!v24)
              goto LABEL_136;
          }
          v25 = v24 - 1;
          v26 = v23[v25 + 4];
          v23[2] = v25;
          v3[5] = v23;
          v3[2] = v26;
          v27 = 0x100000000;
          if (!v47)
            v27 = 0;
          v7 = v51 | (v52 << 16);
          v8 = v27 | v46 | ((unint64_t)v48 << 40) | ((unint64_t)v49 << 48) | ((unint64_t)v50 << 56) | 0x4000000000;
          goto LABEL_3;
        case 7uLL:
          if ((result & 7) == 0)
            goto LABEL_58;
          if ((result & 7) != 2)
            goto LABEL_120;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_137;
          v28 = v3[1] + result;
          if (v6 < v28)
            goto LABEL_120;
          v3[3] = 56;
          v3[4] = v28;
LABEL_58:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          v53 = result != 0;
          goto LABEL_3;
        case 8uLL:
          if ((result & 7) != 2)
            goto LABEL_120;
          v29 = (_QWORD *)v3[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
          v31 = v29[2];
          v30 = v29[3];
          if (v31 >= v30 >> 1)
            v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
          v29[2] = v31 + 1;
          v29[v31 + 4] = v6;
          v3[5] = v29;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_131;
          v32 = v3[1] + result;
          if (v6 < v32)
            goto LABEL_120;
          v3[2] = v32;
          ContentTransition.Style.init(from:)((unint64_t)v3, &v55);
          v33 = (_QWORD *)v3[5];
          if (!v33[2])
            goto LABEL_134;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            v34 = v33[2];
            if (!v34)
              goto LABEL_117;
          }
          else
          {
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
            v33 = (_QWORD *)result;
            v34 = *(_QWORD *)(result + 16);
            if (!v34)
            {
LABEL_117:
              __break(1u);
              goto LABEL_118;
            }
          }
          v35 = v34 - 1;
          v36 = v33[v35 + 4];
          v33[2] = v35;
          v3[5] = v33;
          v3[2] = v36;
          v9 = v55;
LABEL_3:
          v5 = v3[1];
          v6 = v3[2];
          if (v5 >= v6)
            goto LABEL_119;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              goto LABEL_3;
            case 1uLL:
              v38 = v3[1] + 8;
              if (v6 < v38)
                goto LABEL_120;
              goto LABEL_87;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_139;
              v38 = v3[1] + result;
              if (v6 < v38)
                goto LABEL_120;
LABEL_87:
              v3[1] = v38;
              break;
            case 5uLL:
              v38 = v3[1] + 4;
              if (v6 >= v38)
                goto LABEL_87;
              goto LABEL_120;
            default:
              goto LABEL_120;
          }
          goto LABEL_3;
      }
    }
    if (v10 < v5)
      goto LABEL_120;
    v3[3] = 0;
LABEL_8:
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
    {
LABEL_120:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    goto LABEL_10;
  }
LABEL_118:
  v7 = 0;
  v8 = 0x8000000000;
  v53 = 2;
  v9 = 3;
LABEL_119:
  v3[3] = 0;
  *(_QWORD *)a2 = v8;
  *(_WORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 10) = BYTE2(v7);
  *(_BYTE *)(a2 + 11) = v53;
  *(_BYTE *)(a2 + 12) = v9;
  return result;
}

unint64_t closure #1 in ContentTransition.NamedTransition.init(from:)@<X0>(unint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v9 = v3[4];
        if (v5 < v9)
          goto LABEL_14;
        if (v9 < v5)
          goto LABEL_31;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_31;
LABEL_14:
      if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_31;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_34:
            __break(1u);
            JUMPOUT(0x23513EB08);
          }
          v10 = v3[1] + result;
          if (v6 < v10)
          {
LABEL_31:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 8;
          v3[4] = v10;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result != 0;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            break;
          case 1uLL:
            v8 = v3[1] + 8;
            if (v6 >= v8)
              goto LABEL_6;
            goto LABEL_31;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_34;
            v8 = v3[1] + result;
            if (v6 < v8)
              goto LABEL_31;
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            v8 = v3[1] + 4;
            if (v6 < v8)
              goto LABEL_31;
            goto LABEL_6;
          default:
            goto LABEL_31;
        }
      }
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.NamedTransition(uint64_t a1)
{
  ContentTransition.NamedTransition.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.NamedTransition@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.NamedTransition.init(from:)(a1, a2);
}

void ContentTransition.NumericTextConfiguration.encode(to:)(_QWORD *a1)
{
  int *v1;
  int *v2;
  int v4;
  int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  int64_t v12;
  _DWORD *v13;
  float v14;
  uint64_t v15;
  int64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int64_t v21;
  float *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  int64_t v28;

  v2 = v1;
  v4 = *v2;
  v5 = *((unsigned __int8 *)v2 + 5);
  v6 = *((_BYTE *)v2 + 6);
  v7 = *((unsigned __int8 *)v2 + 7);
  v8 = *((unsigned __int8 *)v2 + 8);
  v9 = *((unsigned __int8 *)v2 + 9);
  v10 = *((_BYTE *)v2 + 10);
  if ((v2[1] & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v11 = a1[1];
    v12 = v11 + 4;
    if (__OFADD__(v11, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v12)
    {
      a1[1] = v12;
      v13 = (_DWORD *)(*a1 + v11);
      goto LABEL_5;
    }
    v13 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v12);
LABEL_5:
    *v13 = v4;
    if (v5 != 2)
      goto LABEL_6;
LABEL_12:
    if ((v6 & 1) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  if ((v4 & 1) != 0)
  {
    if (v5 == 2)
      goto LABEL_12;
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
    if (v5 == 2)
      goto LABEL_12;
  }
LABEL_6:
  ProtobufEncoder.encodeVarint(_:)(0x18uLL);
  ProtobufEncoder.encodeVarint(_:)(v5 & 1);
  if ((v6 & 1) != 0)
  {
LABEL_13:
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
LABEL_14:
  v14 = (float)v7 * 0.0083333;
  if (v14 == 0.15)
    goto LABEL_18;
  ProtobufEncoder.encodeVarint(_:)(0x2DuLL);
  v15 = a1[1];
  v16 = v15 + 4;
  if (__OFADD__(v15, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v16)
  {
    a1[1] = v16;
    *(float *)(*a1 + v15) = v14;
    goto LABEL_18;
  }
  *(float *)ProtobufEncoder.growBufferSlow(to:)(v16) = v14;
LABEL_18:
  v17 = (float)v8 * 0.0078125;
  if (v17 != 0.39844)
  {
    ProtobufEncoder.encodeVarint(_:)(0x35uLL);
    v23 = a1[1];
    v24 = v23 + 4;
    if (__OFADD__(v23, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v24)
    {
      a1[1] = v24;
      *(float *)(*a1 + v23) = v17;
      v18 = (float)v9;
      if ((v6 & 2) == 0)
        goto LABEL_20;
      goto LABEL_28;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v24) = v17;
    v18 = (float)v9;
    if ((v6 & 2) == 0)
      goto LABEL_20;
    goto LABEL_28;
  }
  v18 = (float)v9;
  if ((v6 & 2) == 0)
  {
LABEL_20:
    v19 = v18 * 0.25;
    if ((float)(v18 * 0.25) == 0.0)
      goto LABEL_32;
    ProtobufEncoder.encodeVarint(_:)(0x3DuLL);
    v20 = a1[1];
    v21 = v20 + 4;
    if (!__OFADD__(v20, 4))
    {
      if (a1[2] >= v21)
      {
        a1[1] = v21;
        v22 = (float *)(*a1 + v20);
LABEL_24:
        *v22 = v19;
        goto LABEL_32;
      }
LABEL_44:
      v22 = (float *)ProtobufEncoder.growBufferSlow(to:)(v21);
      goto LABEL_24;
    }
    __break(1u);
LABEL_48:
    __break(1u);
    return;
  }
LABEL_28:
  v19 = v18 * 0.0078125;
  if ((float)(v18 * 0.0078125) != 0.25)
  {
    ProtobufEncoder.encodeVarint(_:)(0x3DuLL);
    v25 = a1[1];
    v21 = v25 + 4;
    if (__OFADD__(v25, 4))
      goto LABEL_48;
    if (a1[2] < v21)
      goto LABEL_44;
    a1[1] = v21;
    *(float *)(*a1 + v25) = v19;
  }
LABEL_32:
  v26 = (float)v10 * 0.03125;
  if (v26 == 0.59375)
    return;
  ProtobufEncoder.encodeVarint(_:)(0x45uLL);
  v27 = a1[1];
  v28 = v27 + 4;
  if (__OFADD__(v27, 4))
  {
    __break(1u);
    goto LABEL_46;
  }
  if (a1[2] < v28)
  {
LABEL_46:
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v28) = v26;
    return;
  }
  a1[1] = v28;
  *(float *)(*a1 + v27) = v26;
}

unint64_t ContentTransition.NumericTextConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  char v9;
  int v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  int *v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  unint64_t v44;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    v40 = 51;
    v9 = 18;
    v41 = 2;
    v42 = 19;
    v10 = 2;
    v11 = 32;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v13 = v3[4];
        if (v5 < v13)
          goto LABEL_14;
        if (v13 < v5)
          goto LABEL_126;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_126:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_14:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 0)
            goto LABEL_21;
          if ((result & 7) != 2)
            goto LABEL_126;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_130;
          v14 = v3[1] + result;
          if (v6 < v14)
            goto LABEL_126;
          v3[3] = 8;
          v3[4] = v14;
LABEL_21:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          v7 = 0;
          v8 = result == 0;
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_132;
            v19 = (int *)v3[1];
            if (v6 < (unint64_t)v19 + result)
              goto LABEL_126;
            v3[3] = 21;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_126;
            v19 = (int *)v3[1];
          }
          if (v6 < (unint64_t)(v19 + 1))
            goto LABEL_126;
          v8 = *v19;
          v3[1] = v19 + 1;
          v7 = 1;
          break;
        case 3uLL:
          if ((result & 7) == 0)
            goto LABEL_32;
          if ((result & 7) != 2)
            goto LABEL_126;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_131;
          v16 = v3[1] + result;
          if (v6 < v16)
            goto LABEL_126;
          v3[3] = 24;
          v3[4] = v16;
LABEL_32:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          v41 = result != 0;
          break;
        case 4uLL:
          if ((result & 7) == 0)
            goto LABEL_40;
          if ((result & 7) != 2)
            goto LABEL_126;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_134;
          v17 = v3[1] + result;
          if (v6 < v17)
            goto LABEL_126;
          v3[3] = 32;
          v3[4] = v17;
LABEL_40:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (result)
            v10 |= 1u;
          else
            v10 &= ~1u;
          break;
        case 5uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_135;
            v15 = (float *)v3[1];
            if (v6 < (unint64_t)v15 + result)
              goto LABEL_126;
            v3[3] = 45;
            v3[4] = (char *)v15 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_126;
            v15 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v15 + 1))
            goto LABEL_126;
          v23 = *v15;
          v3[1] = v15 + 1;
          v24 = v23 * 120.0;
          if (v24 < 0.0)
            v24 = 0.0;
          if (v24 > 255.0)
            v24 = 255.0;
          result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v24);
          if ((v43 & 0x100) != 0)
            goto LABEL_139;
          v9 = v43;
          break;
        case 6uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_136;
            v20 = (float *)v3[1];
            if (v6 < (unint64_t)v20 + result)
              goto LABEL_126;
            v3[3] = 53;
            v3[4] = (char *)v20 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_126;
            v20 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v20 + 1))
            goto LABEL_126;
          v27 = *v20;
          v3[1] = v20 + 1;
          v28 = v27 * 128.0;
          if (v28 < 0.0)
            v28 = 0.0;
          if (v28 > 255.0)
            v28 = 255.0;
          result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v28);
          if ((v43 & 0x100) != 0)
            goto LABEL_139;
          v40 = v43;
          break;
        case 7uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_129;
            v21 = (float *)v3[1];
            if (v6 < (unint64_t)v21 + result)
              goto LABEL_126;
            v3[3] = 61;
            v3[4] = (char *)v21 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_126;
            v21 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v21 + 1))
            goto LABEL_126;
          v29 = *v21;
          v3[1] = v21 + 1;
          v30 = v29 * 4.0;
          if (v30 < 0.0)
            v30 = 0.0;
          if (v30 > 255.0)
            v30 = 255.0;
          result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v30);
          if ((v43 & 0x100) != 0)
            goto LABEL_139;
          v11 = v43;
          v10 &= ~2u;
          break;
        case 8uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              v43 = 0;
              v44 = 0xE000000000000000;
              _StringGuts.grow(_:)(80);
              v33._countAndFlagsBits = 0x74616F6C46;
              v33._object = (void *)0xE500000000000000;
              String.append(_:)(v33);
              v34._object = (void *)0x80000002352E84B0;
              v34._countAndFlagsBits = 0xD00000000000001ELL;
              String.append(_:)(v34);
              v35 = 947154505;
              v36 = 0xE400000000000000;
LABEL_140:
              String.append(_:)(*(Swift::String *)&v35);
              v39._countAndFlagsBits = 0xD00000000000002ELL;
              v39._object = (void *)0x80000002352E84D0;
              String.append(_:)(v39);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x23513F614);
            }
            v18 = (float *)v3[1];
            if (v6 < (unint64_t)v18 + result)
              goto LABEL_126;
            v3[3] = 69;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_126;
            v18 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v18 + 1))
            goto LABEL_126;
          v25 = *v18;
          v3[1] = v18 + 1;
          v26 = fmaxf(v25 * 32.0, -128.0);
          if (v26 > 127.0)
            v26 = 127.0;
          result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v26);
          if ((v43 & 0x100) != 0)
            goto LABEL_138;
          v42 = v43;
          break;
        case 9uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_133;
            v22 = (float *)v3[1];
            if (v6 < (unint64_t)v22 + result)
              goto LABEL_126;
            v3[3] = 77;
            v3[4] = (char *)v22 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_126;
            v22 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v22 + 1))
            goto LABEL_126;
          v31 = *v22;
          v3[1] = v22 + 1;
          v32 = v31 * 128.0;
          if (v32 < 0.0)
            v32 = 0.0;
          if (v32 > 255.0)
            v32 = 255.0;
          result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v32);
          if ((v43 & 0x100) != 0)
          {
LABEL_139:
            v43 = 0;
            v44 = 0xE000000000000000;
            _StringGuts.grow(_:)(80);
            v37._countAndFlagsBits = 0x74616F6C46;
            v37._object = (void *)0xE500000000000000;
            String.append(_:)(v37);
            v38._object = (void *)0x80000002352E84B0;
            v38._countAndFlagsBits = 0xD00000000000001ELL;
            String.append(_:)(v38);
            v35 = 0x38746E4955;
            v36 = 0xE500000000000000;
            goto LABEL_140;
          }
          v11 = v43;
          v10 |= 2u;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              goto LABEL_7;
            case 1uLL:
              v12 = v3[1] + 8;
              if (v6 >= v12)
                goto LABEL_6;
              goto LABEL_126;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_137;
              v12 = v3[1] + result;
              if (v6 < v12)
                goto LABEL_126;
LABEL_6:
              v3[1] = v12;
              break;
            case 5uLL:
              v12 = v3[1] + 4;
              if (v6 < v12)
                goto LABEL_126;
              goto LABEL_6;
            default:
              goto LABEL_126;
          }
          break;
      }
LABEL_7:
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
  v8 = 0;
  v11 = 32;
  v40 = 51;
  v9 = 18;
  v41 = 2;
  v42 = 19;
  LOBYTE(v10) = 2;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v8;
  *(_BYTE *)(a2 + 4) = v7 & 1;
  *(_BYTE *)(a2 + 5) = v41;
  *(_BYTE *)(a2 + 6) = v10;
  *(_BYTE *)(a2 + 7) = v9;
  *(_BYTE *)(a2 + 8) = v40;
  *(_BYTE *)(a2 + 9) = v11;
  *(_BYTE *)(a2 + 10) = v42;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.NumericTextConfiguration(_QWORD *a1)
{
  ContentTransition.NumericTextConfiguration.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.NumericTextConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.NumericTextConfiguration.init(from:)(a1, a2);
}

void ContentTransition.CustomTransition.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  _BYTE *v15;

  v4 = *v1;
  v5 = *((unsigned int *)v1 + 2);
  if ((_DWORD)v5)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v5);
  }
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = v4 + 60;
    while (1)
    {
      v8 = a1[1];
      v9 = a1[2];
      if (v8 >= v9)
      {
        v14 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_23;
        if (v9 < v14)
        {
          v15 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v14);
        }
        else
        {
          a1[1] = v14;
          v15 = (_BYTE *)(*a1 + v8);
        }
        *v15 = 18;
        v10 = a1[1];
      }
      else
      {
        *(_BYTE *)(*a1 + v8) = 18;
        v10 = v8 + 1;
        a1[1] = v8 + 1;
      }
      v11 = (_QWORD *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      v13 = v11[2];
      v12 = v11[3];
      if (v13 >= v12 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
      v11[2] = v13 + 1;
      v11[v13 + 4] = v10;
      a1[3] = v11;
      if (__OFADD__(v10, 1))
        break;
      a1[1] = v10 + 1;
      ContentTransition.Effect.encode(to:)(a1);
      if (!v2)
      {
        ProtobufEncoder.endLengthDelimited()();
        v7 += 36;
        if (--v6)
          continue;
      }
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

unint64_t ContentTransition.CustomTransition.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
LABEL_4:
    v4[3] = 0;
    *(_QWORD *)a2 = v8;
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = 2;
    return result;
  }
  v7 = 0;
  v8 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    result = v4[3];
    if (result)
    {
      v10 = v4[4];
      if (v5 < v10)
        goto LABEL_14;
      if (v10 < v5)
        goto LABEL_53;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (result < 8)
    {
LABEL_53:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_53;
          v11 = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          if (v11 < 0)
            goto LABEL_59;
          v12 = v4[1] + v11;
          if (v6 < v12)
            goto LABEL_53;
          v4[3] = 8;
          v4[4] = v12;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if (HIDWORD(result))
          v7 = 0;
        else
          v7 = result;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            goto LABEL_7;
          case 1uLL:
            v9 = v4[1] + 8;
            if (v6 < v9)
              goto LABEL_53;
            goto LABEL_6;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_60;
            v9 = v4[1] + result;
            if (v6 < v9)
              goto LABEL_53;
LABEL_6:
            v4[1] = v9;
            break;
          case 5uLL:
            v9 = v4[1] + 4;
            if (v6 < v9)
              goto LABEL_53;
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_53;
    v13 = (_QWORD *)v4[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v15 = v13[2];
    v14 = v13[3];
    if (v15 >= v14 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
    v13[2] = v15 + 1;
    v13[v15 + 4] = v6;
    v4[5] = v13;
    v16 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (v16 < 0)
      break;
    v17 = v4[1] + v16;
    if (v6 < v17)
      goto LABEL_53;
    v4[2] = v17;
    ContentTransition.Effect.init(from:)((unint64_t)v4, (uint64_t)&v35);
    v18 = (_QWORD *)v4[5];
    if (!v18[2])
      goto LABEL_57;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v19 = v18[2];
      if (!v19)
        goto LABEL_58;
    }
    else
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v19 = v18[2];
      if (!v19)
        goto LABEL_58;
    }
    v20 = v19 - 1;
    v21 = v18[v20 + 4];
    v18[2] = v20;
    v4[5] = v18;
    v4[2] = v21;
    v22 = v35;
    v23 = v36;
    v24 = v37;
    v25 = v38;
    v26 = v39;
    v27 = v40;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v8 = result;
    }
    v3 = *(_QWORD *)(v8 + 16);
    v28 = *(_QWORD *)(v8 + 24);
    if (v3 >= v28 >> 1)
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v3 + 1, 1, (char *)v8);
      v8 = result;
    }
    *(_QWORD *)(v8 + 16) = v3 + 1;
    v29 = v8 + 36 * v3;
    *(_QWORD *)(v29 + 32) = v22;
    *(_BYTE *)(v29 + 40) = v23;
    *(_DWORD *)(v29 + 44) = v24;
    *(_BYTE *)(v29 + 48) = v25;
    *(_QWORD *)(v29 + 52) = v26;
    *(_QWORD *)(v29 + 60) = v27;
LABEL_7:
    v5 = v4[1];
    v6 = v4[2];
    if (v5 >= v6)
      goto LABEL_4;
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  __break(1u);
  v32 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
  v33 = v32[2];
  if (!v33)
  {
    __break(1u);
    JUMPOUT(0x23513FC70);
  }
  v30 = v33 - 1;
  v31 = v32[v30 + 4];
  v32[2] = v30;
  v4[5] = v32;
  v4[2] = v31;
  return swift_bridgeObjectRelease();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.CustomTransition(_QWORD *a1)
{
  ContentTransition.CustomTransition.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.CustomTransition@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.CustomTransition.init(from:)(a1, a2);
}

void ContentTransition.Effect.encode(to:)(_QWORD *a1)
{
  float *v1;
  float *v2;
  Swift::UInt v4;
  Swift::UInt v5;
  int v6;
  Swift::UInt v7;
  int v8;
  float v9;
  float v10;
  Swift::UInt v11;
  Swift::UInt v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;

  v2 = v1;
  v5 = *(unsigned int *)v2;
  v4 = *((unsigned int *)v2 + 1);
  v6 = *((unsigned __int8 *)v2 + 8);
  v7 = *((unsigned int *)v2 + 3);
  v8 = *((unsigned __int8 *)v2 + 16);
  v10 = v2[5];
  v9 = v2[6];
  v12 = *((unsigned int *)v2 + 7);
  v11 = *((unsigned int *)v2 + 8);
  if ((_DWORD)v5 != 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v5);
  }
  if (v10 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    v13 = a1[1];
    v14 = v13 + 4;
    if (__OFADD__(v13, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v14)
    {
      a1[1] = v14;
      *(float *)(*a1 + v13) = v10;
      goto LABEL_7;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v14) = v10;
  }
LABEL_7:
  if (v9 == 1.0)
    goto LABEL_11;
  ProtobufEncoder.encodeVarint(_:)(0x4DuLL);
  v15 = a1[1];
  v16 = v15 + 4;
  if (__OFADD__(v15, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v16)
  {
    a1[1] = v16;
    *(float *)(*a1 + v15) = v9;
LABEL_11:
    if ((_DWORD)v12 == 3)
      goto LABEL_13;
    goto LABEL_12;
  }
  *(float *)ProtobufEncoder.growBufferSlow(to:)(v16) = v9;
  if ((_DWORD)v12 != 3)
  {
LABEL_12:
    ProtobufEncoder.encodeVarint(_:)(0x30uLL);
    ProtobufEncoder.encodeVarint(_:)(v12);
  }
LABEL_13:
  if (!v6)
  {
    if ((v4 & 0x7FFFFFFF) == 0)
      goto LABEL_22;
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v17 = a1[1];
    v18 = v17 + 4;
    if (__OFADD__(v17, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v18)
    {
      a1[1] = v18;
      *(_DWORD *)(*a1 + v17) = v4;
      goto LABEL_22;
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v18) = v4;
    if (v8)
      goto LABEL_23;
LABEL_34:
    if ((v7 & 0x7FFFFFFF) == 0)
      goto LABEL_38;
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v19 = a1[1];
    v20 = v19 + 4;
    if (__OFADD__(v19, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v20)
    {
      a1[1] = v20;
      *(_DWORD *)(*a1 + v19) = v7;
      goto LABEL_38;
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20) = v7;
    if (!(_DWORD)v11)
      return;
    goto LABEL_39;
  }
  if (v6 != 1 || !(_DWORD)v4)
  {
LABEL_22:
    if (v8)
      goto LABEL_23;
    goto LABEL_34;
  }
  ProtobufEncoder.encodeVarint(_:)(0x38uLL);
  ProtobufEncoder.encodeVarint(_:)(v4);
  if (!v8)
    goto LABEL_34;
LABEL_23:
  if (v8 != 1 || !(_DWORD)v7)
  {
LABEL_38:
    if (!(_DWORD)v11)
      return;
    goto LABEL_39;
  }
  ProtobufEncoder.encodeVarint(_:)(0x40uLL);
  ProtobufEncoder.encodeVarint(_:)(v7);
  if (!(_DWORD)v11)
    return;
LABEL_39:
  ProtobufEncoder.encodeVarint(_:)(0x50uLL);
  ProtobufEncoder.encodeVarint(_:)(v11);
}

unint64_t ContentTransition.Effect.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  char v9;
  float v10;
  float v11;
  int v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int *v19;
  float *v20;
  float *v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  unint64_t v25;
  float v26;
  int v27;
  int v28;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    v27 = 1;
    v28 = 0;
    v9 = 2;
    v10 = 1.0;
    v11 = 0.0;
    v12 = 3;
    v13 = 2;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v15 = v3[4];
        if (v5 < v15)
          goto LABEL_14;
        if (v15 < v5)
          goto LABEL_105;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_105:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_14:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 0)
            goto LABEL_21;
          if ((result & 7) != 2)
            goto LABEL_105;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
            JUMPOUT(0x235140448);
          }
          v16 = v3[1] + result;
          if (v6 < v16)
            goto LABEL_105;
          v3[3] = 8;
          v3[4] = v16;
LABEL_21:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (HIDWORD(result))
            v17 = 0;
          else
            v17 = result;
          v27 = v17;
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_111;
            v18 = (int *)v3[1];
            if (v6 < (unint64_t)v18 + result)
              goto LABEL_105;
            v3[3] = 21;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_105;
            v18 = (int *)v3[1];
          }
          if (v6 < (unint64_t)(v18 + 1))
            goto LABEL_105;
          v13 = 0;
          v7 = *v18;
          v3[1] = v18 + 1;
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_112;
            v19 = (int *)v3[1];
            if (v6 < (unint64_t)v19 + result)
              goto LABEL_105;
            v3[3] = 29;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_105;
            v19 = (int *)v3[1];
          }
          if (v6 < (unint64_t)(v19 + 1))
            goto LABEL_105;
          v9 = 0;
          v28 = *v19;
          v3[1] = v19 + 1;
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_113;
            v20 = (float *)v3[1];
            if (v6 < (unint64_t)v20 + result)
              goto LABEL_105;
            v3[3] = 37;
            v3[4] = (char *)v20 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_105;
            v20 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v20 + 1))
            goto LABEL_105;
          v11 = *v20;
          v3[1] = v20 + 1;
          break;
        case 5uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_114;
            v21 = (float *)v3[1];
            if (v6 < (unint64_t)v21 + result)
              goto LABEL_105;
            v3[3] = 45;
            v3[4] = (char *)v21 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_105;
            v21 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v21 + 1))
            goto LABEL_105;
          v26 = *v21;
          v3[1] = v21 + 1;
          v10 = v26 - v11;
          break;
        case 6uLL:
          if ((result & 7) == 0)
            goto LABEL_44;
          if ((result & 7) != 2)
            goto LABEL_105;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_108;
          v22 = v3[1] + result;
          if (v6 < v22)
            goto LABEL_105;
          v3[3] = 48;
          v3[4] = v22;
LABEL_44:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (HIDWORD(result))
            v12 = 3;
          else
            v12 = result;
          break;
        case 7uLL:
          if ((result & 7) == 0)
            goto LABEL_54;
          if ((result & 7) != 2)
            goto LABEL_105;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_109;
          v23 = v3[1] + result;
          if (v6 < v23)
            goto LABEL_105;
          v3[3] = 56;
          v3[4] = v23;
LABEL_54:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          v7 = result;
          v13 = 1;
          break;
        case 9uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_115;
            v24 = (float *)v3[1];
            if (v6 < (unint64_t)v24 + result)
              goto LABEL_105;
            v3[3] = 77;
            v3[4] = (char *)v24 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_105;
            v24 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v24 + 1))
            goto LABEL_105;
          v10 = *v24;
          v3[1] = v24 + 1;
          break;
        case 0xAuLL:
          if ((result & 7) == 0)
            goto LABEL_68;
          if ((result & 7) != 2)
            goto LABEL_105;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_110;
          v25 = v3[1] + result;
          if (v6 < v25)
            goto LABEL_105;
          v3[3] = 80;
          v3[4] = v25;
LABEL_68:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          v8 = result;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              goto LABEL_7;
            case 1uLL:
              v14 = v3[1] + 8;
              if (v6 >= v14)
                goto LABEL_6;
              goto LABEL_105;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_116;
              v14 = v3[1] + result;
              if (v6 < v14)
                goto LABEL_105;
LABEL_6:
              v3[1] = v14;
              break;
            case 5uLL:
              v14 = v3[1] + 4;
              if (v6 < v14)
                goto LABEL_105;
              goto LABEL_6;
            default:
              goto LABEL_105;
          }
          break;
      }
LABEL_7:
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
  v8 = 0;
  v27 = 1;
  v28 = 0;
  v9 = 2;
  v10 = 1.0;
  v11 = 0.0;
  v12 = 3;
  v13 = 2;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v27;
  *(_DWORD *)(a2 + 4) = v7;
  *(_BYTE *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v28;
  *(_BYTE *)(a2 + 16) = v9;
  *(float *)(a2 + 20) = v11;
  *(float *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 28) = v12;
  *(_DWORD *)(a2 + 32) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.Effect(_QWORD *a1)
{
  ContentTransition.Effect.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.Effect@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.Effect.init(from:)(a1, a2);
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(_BYTE *a1, float a2)
{
  int v4;
  unsigned int v5;
  int v6;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = (LODWORD(a2) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    v7 = 0;
    result = 1;
    goto LABEL_24;
  }
  LOBYTE(v6) = 0;
  v7 = 1;
  if (v4 == 255)
  {
    result = 0;
  }
  else
  {
    result = 0;
    if (a2 > -1.0)
    {
      v9 = Float.exponent.getter();
      if (v9 > 7)
      {
        LOBYTE(v6) = 0;
        result = 0;
        v7 = 1;
        goto LABEL_24;
      }
      v10 = v9;
      v11 = Float.significandWidth.getter();
      v12 = v11 + __clz(__rbit32(v5));
      v13 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 7)
        {
          if (v13 < -8 || v13 > 8)
          {
LABEL_9:
            LOBYTE(v6) = 0;
            LOBYTE(v14) = 0;
            if ((v10 & 0x8000000000000000) == 0)
              goto LABEL_22;
            goto LABEL_23;
          }
          if (v13 < 0)
          {
            if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8)
              goto LABEL_9;
            v6 = LOBYTE(a2) >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v13 >= 8)
              goto LABEL_9;
            v6 = LODWORD(a2) << v13;
          }
LABEL_20:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_22:
            v14 = 1 << v10;
            goto LABEL_23;
          }
          LOBYTE(v14) = 0;
LABEL_23:
          v7 = 0;
          LOBYTE(v6) = v6 | v14;
          result = v10 >= v11;
          goto LABEL_24;
        }
        if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
        {
LABEL_13:
          LOBYTE(v6) = 0;
          goto LABEL_20;
        }
        if ((v13 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v13 < 0x20)
          {
            v6 = v5 << v13;
            goto LABEL_20;
          }
          goto LABEL_13;
        }
      }
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0)
        LOBYTE(v6) = 0;
      else
        v6 = v5 >> (v12 - v10);
      goto LABEL_20;
    }
  }
LABEL_24:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;

  v5 = (LODWORD(a2) >> 23);
  v6 = LODWORD(a2) & 0x7FFFFF;
  v7 = v5 | LODWORD(a2) & 0x7FFFFF;
  if (!v7)
  {
    LOBYTE(v15) = 0;
    result = 1;
    goto LABEL_28;
  }
  if (v5 == 255 || (v8 = Float.exponent.getter(), v8 > 7))
  {
LABEL_37:
    LOBYTE(v15) = 0;
    result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_28;
  }
  v9 = v8;
  v10 = Float.significandWidth.getter();
  result = v9 >= v10;
  v12 = v10 + __clz(__rbit32(v6));
  v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 > 7)
  {
    if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
    {
LABEL_12:
      LOBYTE(v13) = 0;
      goto LABEL_19;
    }
    if (v13 < 0)
    {
      v16 = v6 >> (v12 - v9);
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0)
        LOBYTE(v13) = 0;
      else
        LOBYTE(v13) = v16;
    }
    else
    {
      if ((unint64_t)v13 >= 0x20)
        goto LABEL_12;
      LODWORD(v13) = v6 << v13;
    }
LABEL_19:
    if (v9 != 7)
    {
      if (v9 < 0)
      {
        LOBYTE(v14) = 0;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_30:
    if (a2 >= 0.0 || (_BYTE)v13)
      goto LABEL_37;
    goto LABEL_32;
  }
  if (v13 >= -8 && v13 <= 8)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8)
        goto LABEL_8;
      LODWORD(v13) = LOBYTE(a2) >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 8)
        goto LABEL_8;
      LODWORD(v13) = LODWORD(a2) << v13;
    }
    goto LABEL_19;
  }
LABEL_8:
  if (v9 == 7)
    goto LABEL_36;
  LOBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0)
LABEL_22:
    v14 = 1 << v9;
LABEL_23:
  v15 = (char)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (a2 >= 0.0)
      goto LABEL_37;
LABEL_32:
    LOBYTE(v7) = 0;
    LOBYTE(v15) = 0x80;
    goto LABEL_28;
  }
  LOBYTE(v7) = 0;
  v15 = -v15;
LABEL_28:
  *a1 = v15;
  a1[1] = v7;
  return result;
}

BOOL specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float v10;
  int v11;
  _BOOL8 result;

  v2 = *(float *)a1;
  v3 = *(_BYTE *)(a1 + 4);
  v4 = *(unsigned __int8 *)(a1 + 5);
  v5 = *(unsigned __int8 *)(a1 + 6);
  v6 = *(unsigned __int8 *)(a1 + 7);
  v7 = *(unsigned __int8 *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 9);
  v9 = *(unsigned __int8 *)(a1 + 10);
  v10 = *(float *)a2;
  v11 = *(unsigned __int8 *)(a2 + 5);
  if ((v3 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 4) & 1) == 0 || v2 != v10)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 4) & 1) != 0 || ((((LOBYTE(v2) & 1) == 0) ^ LODWORD(v10)) & 1) == 0)
  {
    return 0;
  }
  if (v4 != 2)
  {
    if (v11 != 2)
    {
      result = 0;
      if (((v11 ^ v4) & 1) != 0)
        return result;
      goto LABEL_13;
    }
    return 0;
  }
  if (v11 != 2)
    return 0;
  result = 0;
LABEL_13:
  if (v5 == *(unsigned __int8 *)(a2 + 6)
    && v6 == *(unsigned __int8 *)(a2 + 7)
    && v7 == *(unsigned __int8 *)(a2 + 8)
    && v8 == *(unsigned __int8 *)(a2 + 9))
  {
    return v9 == *(unsigned __int8 *)(a2 + 10);
  }
  return result;
}

uint64_t specialized static ContentTransition.NamedTransition.Name.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  __int16 v14;
  char v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int16 v21;
  char v22;

  v2 = *a1;
  v3 = *a2;
  v4 = ((unint64_t)*a1 >> 38) & 3;
  if (!(_DWORD)v4)
  {
    if ((v3 & 0xC000000000) == 0)
    {
      v7 = ((*a1 & 1) == 0) ^ v3;
      return v7 & 1;
    }
    goto LABEL_6;
  }
  v5 = *((unsigned __int16 *)a2 + 4) | (*((unsigned __int8 *)a2 + 10) << 16);
  if ((_DWORD)v4 != 1)
    __asm { BR              X12 }
  if ((v3 & 0xC000000000) != 0x4000000000)
  {
LABEL_6:
    v7 = 0;
    return v7 & 1;
  }
  v6 = *((unsigned __int16 *)a1 + 4) | (*((unsigned __int8 *)a1 + 10) << 16);
  v16 = *a1;
  v17 = BYTE4(v2) & 1;
  v18 = BYTE5(v2);
  v19 = BYTE6(v2);
  v20 = HIBYTE(v2);
  v21 = v6;
  v22 = BYTE2(v6);
  v9 = v3;
  v10 = BYTE4(v3) & 1;
  v11 = BYTE5(v3);
  v12 = BYTE6(v3);
  v13 = HIBYTE(v3);
  v14 = v5;
  v15 = BYTE2(v5);
  v7 = specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v9);
  return v7 & 1;
}

void sub_2351409DC(int a1@<W8>)
{
  uint64_t v1;

  if ((v1 & 0xC000000000) == 0x8000000000 && v1 == 0x8000000001 && !a1)
    JUMPOUT(0x235140980);
  JUMPOUT(0x23514097CLL);
}

void sub_235140A00(int a1@<W8>)
{
  uint64_t v1;

  if ((v1 & 0xC000000000) == 0x8000000000 && v1 == 0x8000000002 && !a1)
    JUMPOUT(0x235140980);
  JUMPOUT(0x23514097CLL);
}

void sub_235140A28(int a1@<W8>)
{
  uint64_t v1;

  if ((v1 & 0xC000000000) == 0x8000000000 && v1 == 0x8000000003 && !a1)
    JUMPOUT(0x235140980);
  JUMPOUT(0x23514097CLL);
}

void sub_235140A50()
{
  uint64_t v0;

  if ((v0 & 0xC000000000) == 0x8000000000 && v0 == 0x8000000004)
    JUMPOUT(0x235140A74);
  JUMPOUT(0x23514097CLL);
}

uint64_t specialized static ContentTransition.NamedTransition.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  __int16 v17;
  char v18;
  int v19;
  char v20;
  char v21;
  char v22;
  char v23;
  __int16 v24;
  char v25;

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 11);
  v4 = *((unsigned __int8 *)a1 + 12);
  v5 = *a2;
  v6 = *((unsigned __int8 *)a2 + 11);
  v7 = *((unsigned __int8 *)a2 + 12);
  v8 = ((unint64_t)*a1 >> 38) & 3;
  if ((_DWORD)v8)
  {
    v9 = *((unsigned __int16 *)a2 + 4) | (*((unsigned __int8 *)a2 + 10) << 16);
    if ((_DWORD)v8 != 1)
      __asm { BR              X12 }
    if ((v5 & 0xC000000000) != 0x4000000000)
      return 0;
    v10 = *((unsigned __int16 *)a1 + 4) | (*((unsigned __int8 *)a1 + 10) << 16);
    v19 = *a1;
    v20 = BYTE4(v2) & 1;
    v21 = BYTE5(v2);
    v22 = BYTE6(v2);
    v23 = HIBYTE(v2);
    v24 = v10;
    v25 = BYTE2(v10);
    v12 = v5;
    v13 = BYTE4(v5) & 1;
    v14 = BYTE5(v5);
    v15 = BYTE6(v5);
    v16 = HIBYTE(v5);
    v17 = v9;
    v18 = BYTE2(v9);
    if (!specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v12))
      return 0;
  }
  else
  {
    result = 0;
    if ((v5 & 0xC000000000) != 0 || ((((v2 & 1) == 0) ^ v5) & 1) == 0)
      return result;
  }
  if (v3 == 2)
  {
    if (v6 != 2)
      return 0;
LABEL_15:
    if (v4 == 3)
    {
      if (v7 != 3)
        return 0;
    }
    else if (v7 == 3 || v4 != v7)
    {
      return 0;
    }
    return 1;
  }
  result = 0;
  if (v6 != 2 && ((v6 ^ v3) & 1) == 0)
    goto LABEL_15;
  return result;
}

uint64_t specialized static ContentTransition.CustomTransition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  char v6;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2);
  result = 0;
  if ((v6 & 1) != 0 && v2 == v4)
  {
    if (v3 == 2)
    {
      if (v5 != 2)
        return 0;
    }
    else if (v5 == 2 || ((v5 ^ v3) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t specialized static ContentTransition.EffectType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  int v4;
  float v5;
  int v6;
  float v7;
  int v8;
  uint64_t result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 12);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(float *)(a2 + 4);
  v6 = *(unsigned __int8 *)(a2 + 8);
  v7 = *(float *)(a2 + 12);
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v6 != 1 || LODWORD(v2) != LODWORD(v5))
        return 0;
    }
    else if (v6 != 2 || LODWORD(v5) != 0)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (*(_BYTE *)(a2 + 8) || v2 != v5)
      return result;
  }
  if (v4)
  {
    if (v4 == 1)
    {
      if (v8 != 1 || LODWORD(v3) != LODWORD(v7))
        return 0;
    }
    else if (v8 != 2 || v7 != 0.0)
    {
      return 0;
    }
  }
  else if (*(_BYTE *)(a2 + 16) || v3 != v7)
  {
    return 0;
  }
  return 1;
}

uint64_t specialized static ContentTransition.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  char v22;
  char v23;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  v4 = *(unsigned __int8 *)(a1 + 13);
  v5 = *(_QWORD *)a2;
  v6 = *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32);
  v7 = *(unsigned __int8 *)(a2 + 13);
  if (*(_BYTE *)(a1 + 13))
  {
    if (v4 == 1)
    {
      v8 = *(_QWORD *)a1;
      if (v7 == 1)
      {
        if ((specialized static Array<A>.== infix(_:_:)(v8, *(_QWORD *)a2) & 1) != 0 && (_DWORD)v3 == (_DWORD)v6)
        {
          if (BYTE4(v3) == 2)
          {
            v9 = 1;
            outlined copy of ContentTransition.Storage(v5, v6, 1);
            outlined copy of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v5, v6, 1);
            if (BYTE4(v6) == 2)
              return v9 & 1;
          }
          else
          {
            outlined copy of ContentTransition.Storage(v5, v6, 1);
            outlined copy of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v2, v3, 1);
            outlined consume of ContentTransition.Storage(v5, v6, 1);
            if (BYTE4(v6) != 2 && ((v6 ^ v3) & 0x100000000) == 0)
            {
              v9 = 1;
              return v9 & 1;
            }
          }
          goto LABEL_18;
        }
        outlined copy of ContentTransition.Storage(v5, v6, 1);
        outlined copy of ContentTransition.Storage(v2, v3, 1);
        outlined consume of ContentTransition.Storage(v2, v3, 1);
        v10 = v5;
        v11 = v6;
        v12 = 1;
LABEL_17:
        outlined consume of ContentTransition.Storage(v10, v11, v12);
LABEL_18:
        v9 = 0;
        return v9 & 1;
      }
      swift_bridgeObjectRetain();
LABEL_16:
      outlined copy of ContentTransition.Storage(v5, v6, v7);
      outlined consume of ContentTransition.Storage(v2, v3, v4);
      v10 = v5;
      v11 = v6;
      v12 = v7;
      goto LABEL_17;
    }
    if (v7 != 2)
      goto LABEL_16;
    outlined consume of ContentTransition.Storage(*(_QWORD *)a1, v3, 2);
    outlined consume of ContentTransition.Storage(v5, v6, 2);
    if (*(float *)&v3 == *(float *)&v6)
      v9 = ((_DWORD)v2 == (_DWORD)v5) & (((v2 & 0x100000000) == 0) ^ BYTE4(v5));
    else
      v9 = 0;
  }
  else
  {
    if (*(_BYTE *)(a2 + 13))
      goto LABEL_16;
    v19 = *(_QWORD *)a1;
    v20 = v3;
    v21 = BYTE2(v3);
    v22 = BYTE3(v3);
    v23 = BYTE4(v3);
    v14 = v5;
    v16 = BYTE2(v6);
    v15 = v6;
    v17 = BYTE3(v6);
    v18 = BYTE4(v6);
    v9 = specialized static ContentTransition.NamedTransition.== infix(_:_:)(&v19, &v14);
    outlined consume of ContentTransition.Storage(v2, v3, 0);
    outlined consume of ContentTransition.Storage(v5, v6, 0);
  }
  return v9 & 1;
}

BOOL specialized static ContentTransition.State.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  __int16 v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  _BOOL8 result;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  int v22;
  __int16 v23;

  v2 = *((_WORD *)a1 + 6);
  v3 = *((_DWORD *)a1 + 2);
  v4 = *((unsigned __int8 *)a1 + 14);
  v5 = *((unsigned __int8 *)a1 + 15);
  v6 = a1[2];
  v7 = *((_DWORD *)a1 + 6);
  v8 = *a2;
  v9 = *((_WORD *)a2 + 6);
  v10 = *((_DWORD *)a2 + 2);
  v11 = *((unsigned __int8 *)a2 + 14);
  v12 = *((unsigned __int8 *)a2 + 15);
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 6);
  v21 = *a1;
  v22 = v3;
  v23 = v2;
  v18 = v8;
  v19 = v10;
  v20 = v9;
  v15 = specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v18);
  result = 0;
  if ((v15 & 1) != 0 && ((v4 ^ v11) & 1) == 0 && v5 == v12)
  {
    if (v6)
    {
      if (v13)
      {
        v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104);
        swift_retain();
        swift_retain();
        LOBYTE(v17) = v17(v13);
        swift_release();
        swift_release();
        if ((v17 & 1) != 0)
          return v7 == v14;
      }
    }
    else if (!v13)
    {
      return v7 == v14;
    }
    return 0;
  }
  return result;
}

BOOL specialized static ContentTransition.Effect.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  char v2;
  int v3;
  char v4;
  float v5;
  float v6;
  int v7;
  int v8;
  char v9;
  int v10;
  char v11;
  float v12;
  float v13;
  int v14;
  int v15;
  char v16;
  _BOOL8 result;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *((_DWORD *)a1 + 3);
  v4 = *((_BYTE *)a1 + 16);
  v6 = *((float *)a1 + 5);
  v5 = *((float *)a1 + 6);
  v7 = *((_DWORD *)a1 + 7);
  v8 = *((_DWORD *)a1 + 8);
  v9 = *((_BYTE *)a2 + 8);
  v10 = *((_DWORD *)a2 + 3);
  v11 = *((_BYTE *)a2 + 16);
  v13 = *((float *)a2 + 5);
  v12 = *((float *)a2 + 6);
  v14 = *((_DWORD *)a2 + 7);
  v15 = *((_DWORD *)a2 + 8);
  v22 = *a1;
  v23 = v2;
  v24 = v3;
  v25 = v4;
  v18 = *a2;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  v16 = specialized static ContentTransition.EffectType.== infix(_:_:)((uint64_t)&v22, (uint64_t)&v18);
  result = 0;
  if ((v16 & 1) != 0 && v6 == v13 && v5 == v12)
    return v7 == v14 && v8 == v15;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ContentTransitionModifier.ChildEnvironment, &unk_25063CDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment);
  }
  return result;
}

uint64_t specialized EnvironmentValues.contentTransitionAnimation.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  int v27;

  v4 = *v1;
  v3 = v1[1];
  if (v3)
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)&v21);
    swift_release_n();
    swift_release_n();
    v5 = v21;
    v6 = v22 | ((unint64_t)v23 << 32);
    v7 = v24;
    v8 = v25;
    v9 = v26;
    v19 = v27;
  }
  else
  {
    swift_retain();
    v10 = swift_retain_n();
    v11 = specialized find<A>(_:key:)(v10);
    if (v11)
    {
      v5 = *(_QWORD *)(v11 + 72);
      v6 = *(unsigned int *)(v11 + 80) | ((unint64_t)*(unsigned __int8 *)(v11 + 84) << 32);
      v7 = *(unsigned __int8 *)(v11 + 85);
      v17 = *(unsigned __int8 *)(v11 + 86);
      v18 = *(unsigned __int8 *)(v11 + 87);
      v12 = *(_DWORD *)(v11 + 96);
      outlined copy of ContentTransition.Storage(v5, v6, v7);
      swift_retain();
    }
    else
    {
      v7 = 0;
      v17 = 0;
      v18 = 0;
      v12 = 0;
      v6 = 0x302000000;
      v5 = 0x8000000000;
    }
    v19 = v12;
    swift_release_n();
    v9 = v18;
    v8 = v17;
  }
  swift_release();
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v5, v6, v7);
  v13 = 0x1000000000000;
  if (!v8)
    v13 = 0;
  v14 = v6 & 0xFFFFFFFFFFLL | (v7 << 40) | v13 | (v9 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v20, v5, v14, a1, v19);
  swift_release();
  outlined consume of ContentTransition.Storage(v5, v6, v7);
  swift_release();
  if (v3)
  {
    v15 = *v20;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v15);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v5, v6, v7);
  return swift_release();
}

uint64_t sub_235141514()
{
  uint64_t v0;

  outlined consume of ContentTransition.Storage(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(_BYTE *)(v0 + 29));
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.Style.Storage, &type metadata for ContentTransition.Style.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.Style and conformance ContentTransition.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.Style, &type metadata for ContentTransition.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.Style, &type metadata for ContentTransition.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.Style, &type metadata for ContentTransition.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NamedTransition.Name, &type metadata for ContentTransition.NamedTransition.Name);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NamedTransition, &type metadata for ContentTransition.NamedTransition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NumericTextConfiguration.Direction, &type metadata for ContentTransition.NumericTextConfiguration.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NumericTextConfiguration.Options, &type metadata for ContentTransition.NumericTextConfiguration.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NumericTextConfiguration.Options, &type metadata for ContentTransition.NumericTextConfiguration.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NumericTextConfiguration.Options, &type metadata for ContentTransition.NumericTextConfiguration.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NumericTextConfiguration.Options, &type metadata for ContentTransition.NumericTextConfiguration.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NumericTextConfiguration, &type metadata for ContentTransition.NumericTextConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection;
  if (!lazy protocol witness table cache variable for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.SequenceDirection, &type metadata for ContentTransition.SequenceDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.Options and conformance ContentTransition.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    result = MEMORY[0x23B7C9C04]("-O:\x1B", &type metadata for ContentTransition.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    result = MEMORY[0x23B7C9C04]("EO:\x1BȊ\t", &type metadata for ContentTransition.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.Options, &type metadata for ContentTransition.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.Options, &type metadata for ContentTransition.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContentTransition.Style(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ContentTransition.Style and conformance ContentTransition.Style();
  result = lazy protocol witness table accessor for type ContentTransition.Style and conformance ContentTransition.Style();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

float sub_235141A3C@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  float result;

  LOBYTE(a3) = *(_BYTE *)(a1 + 7);
  result = (float)a3 * 0.0083333;
  *a2 = result;
  return result;
}

uint64_t sub_235141A5C(float *a1, uint64_t a2)
{
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 120.0);
  *(_BYTE *)(a2 + 7) = result;
  return result;
}

float sub_235141A90@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  float result;

  LOBYTE(a3) = *(_BYTE *)(a1 + 8);
  result = (float)a3 * 0.0078125;
  *a2 = result;
  return result;
}

uint64_t sub_235141AA8(float *a1, uint64_t a2)
{
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 128.0);
  *(_BYTE *)(a2 + 8) = result;
  return result;
}

float sub_235141AD8@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  float result;

  LOBYTE(a3) = *(_BYTE *)(a1 + 9);
  result = (float)a3 * 0.25;
  *a2 = result;
  return result;
}

uint64_t sub_235141AF0(float *a1, uint64_t a2)
{
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 4.0);
  *(_BYTE *)(a2 + 9) = result;
  if ((*(_BYTE *)(a2 + 6) & 2) != 0)
    *(_BYTE *)(a2 + 6) &= ~2u;
  return result;
}

float sub_235141B30@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  float result;

  LOBYTE(a3) = *(_BYTE *)(a1 + 9);
  result = (float)a3 * 0.0078125;
  *a2 = result;
  return result;
}

uint64_t sub_235141B48(float *a1, uint64_t a2)
{
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 128.0);
  *(_BYTE *)(a2 + 9) = result;
  if ((*(_BYTE *)(a2 + 6) & 2) == 0)
    *(_BYTE *)(a2 + 6) |= 2u;
  return result;
}

float sub_235141B88@<S0>(uint64_t a1@<X0>, _DWORD *a2@<X8>, double a3@<D0>)
{
  LOBYTE(a3) = *(_BYTE *)(a1 + 10);
  *(float *)&a3 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).i32[0] * 0.03125;
  *a2 = LODWORD(a3);
  return *(float *)&a3;
}

uint64_t sub_235141BA8(float *a1, uint64_t a2)
{
  uint64_t result;

  result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 32.0);
  *(_BYTE *)(a2 + 10) = result;
  return result;
}

uint64_t sub_235141BD8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (*(_BYTE *)(result + 13))
    *a2 = 3;
  else
    *a2 = *(_BYTE *)(result + 12);
  return result;
}

unsigned __int8 *sub_235141BF8(unsigned __int8 *result, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 13))
    *(_WORD *)(a2 + 12) = *result;
  return result;
}

uint64_t sub_235141C1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  char v9;

  result = EnvironmentValues.contentTransition.getter((uint64_t)&v6);
  v3 = v7;
  v4 = v8;
  v5 = v9;
  *(_QWORD *)a1 = v6;
  *(_WORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 14) = v5;
  return result;
}

uint64_t sub_235141C78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.contentTransitionStyle.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_235141CB8(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.contentTransitionStyle.setter(&v2);
}

uint64_t sub_235141CEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.contentTransitionAnimation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_235141D24()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.contentTransitionAnimation.setter(v0);
  return swift_release();
}

uint64_t sub_235141D54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.contentTransitionAddsDrawingGroup.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_235141D90(char *a1)
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter(*a1);
}

ValueMetadata *type metadata accessor for ContentTransition()
{
  return &type metadata for ContentTransition;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentTransition.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 12);
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v5 | (v4 << 32), v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 13) = v6;
  return a1;
}

uint64_t assignWithCopy for ContentTransition.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 12);
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v5 | (v4 << 32), v6);
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v4;
  v9 = *(_BYTE *)(a1 + 13);
  *(_BYTE *)(a1 + 13) = v6;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for ContentTransition.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *a2;
  v4 = *((_WORD *)a2 + 6);
  v5 = *((_DWORD *)a2 + 2);
  v6 = *(_QWORD *)a1;
  v7 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v5;
  v8 = *(_BYTE *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v4;
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransition.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 14))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 13);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 14) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 14) = 0;
    if (a2)
      *(_BYTE *)(result + 13) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ContentTransition.Storage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 13);
}

uint64_t destructiveInjectEnumTag for ContentTransition.Storage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 13) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.Storage()
{
  return &type metadata for ContentTransition.Storage;
}

ValueMetadata *type metadata accessor for ContentTransition.Style()
{
  return &type metadata for ContentTransition.Style;
}

uint64_t storeEnumTagSinglePayload for ContentTransition.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_235142010 + 4 * byte_2352CD771[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235142044 + 4 * byte_2352CD76C[v4]))();
}

uint64_t sub_235142044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23514204C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235142054);
  return result;
}

uint64_t sub_235142060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235142068);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23514206C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235142074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.Style.Storage()
{
  return &type metadata for ContentTransition.Style.Storage;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NamedTransition(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 11) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 11);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 11) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NamedTransition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 11) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NamedTransition()
{
  return &type metadata for ContentTransition.NamedTransition;
}

uint64_t __swift_memcpy11_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NamedTransition.Name(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 11))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 33) >> 5) & 3 | (4 * ((*(_QWORD *)a1 >> 33) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NamedTransition.Name(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
    {
      *(_QWORD *)result = (unint64_t)((((-a2 >> 2) & 0x1F) - 32 * (_BYTE)a2) & 0x7F) << 33;
      *(_BYTE *)(result + 10) = 0;
      *(_WORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ContentTransition.NamedTransition.Name(_QWORD *a1)
{
  if (((*a1 >> 38) & 2) != 0)
    return *a1 + 2;
  else
    return (*a1 >> 38) & 3;
}

_QWORD *destructiveProjectEnumData for ContentTransition.NamedTransition.Name(_QWORD *result)
{
  *result &= 0xFFFFFF3FFFFFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for ContentTransition.NamedTransition.Name(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFF01FFFFFFFFLL | (a2 << 38);
  }
  else
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 2) | 0x8000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NamedTransition.Name()
{
  return &type metadata for ContentTransition.NamedTransition.Name;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NumericTextConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 11))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NumericTextConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NumericTextConfiguration()
{
  return &type metadata for ContentTransition.NumericTextConfiguration;
}

ValueMetadata *type metadata accessor for ContentTransition.NumericTextConfiguration.Direction()
{
  return &type metadata for ContentTransition.NumericTextConfiguration.Direction;
}

ValueMetadata *type metadata accessor for ContentTransition.NumericTextConfiguration.Options()
{
  return &type metadata for ContentTransition.NumericTextConfiguration.Options;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentTransition.CustomTransition(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ContentTransition.CustomTransition(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for ContentTransition.CustomTransition(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransition.CustomTransition(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 13))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.CustomTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 13) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.CustomTransition()
{
  return &type metadata for ContentTransition.CustomTransition;
}

uint64_t getEnumTagSinglePayload for ContentTransition.EffectType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.EffectType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.EffectType()
{
  return &type metadata for ContentTransition.EffectType;
}

uint64_t getEnumTagSinglePayload for ContentTransition.EffectType.Arg(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.EffectType.Arg(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ContentTransition.EffectType.Arg(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for ContentTransition.EffectType.Arg(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.EffectType.Arg()
{
  return &type metadata for ContentTransition.EffectType.Arg;
}

uint64_t storeEnumTagSinglePayload for ContentTransition.SequenceDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_235142654 + 4 * byte_2352CD77B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_235142688 + 4 * byte_2352CD776[v4]))();
}

uint64_t sub_235142688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235142690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235142698);
  return result;
}

uint64_t sub_2351426A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2351426ACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2351426B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351426B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.SequenceDirection()
{
  return &type metadata for ContentTransition.SequenceDirection;
}

uint64_t getEnumTagSinglePayload for ContentTransition.Effect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.Effect()
{
  return &type metadata for ContentTransition.Effect;
}

ValueMetadata *type metadata accessor for ContentTransition.Method()
{
  return &type metadata for ContentTransition.Method;
}

ValueMetadata *type metadata accessor for ContentTransition.Options()
{
  return &type metadata for ContentTransition.Options;
}

ValueMetadata *type metadata accessor for ContentTransition.State()
{
  return &type metadata for ContentTransition.State;
}

uint64_t initializeWithCopy for _ContentTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 13) = v7;
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ContentTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 12) = v5;
  v10 = *(_BYTE *)(a1 + 13);
  *(_BYTE *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for _ContentTransitionModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 2);
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  v9 = *(_BYTE *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release();
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  return a1;
}

ValueMetadata *type metadata accessor for _ContentTransitionModifier()
{
  return &type metadata for _ContentTransitionModifier;
}

ValueMetadata *type metadata accessor for _ContentTransitionGroup()
{
  return &type metadata for _ContentTransitionGroup;
}

uint64_t destroy for ContentTransition.State(uint64_t a1)
{
  outlined consume of ContentTransition.Storage(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(_BYTE *)(a1 + 13));
  return swift_release();
}

uint64_t initializeWithCopy for ContentTransition.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 13) = v7;
  *(_WORD *)(a1 + 14) = *(_WORD *)(a2 + 14);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ContentTransition.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 12) = v5;
  v10 = *(_BYTE *)(a1 + 13);
  *(_BYTE *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ContentTransition.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 2);
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  v9 = *(_BYTE *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  *(_BYTE *)(a1 + 15) = *((_BYTE *)a2 + 15);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release();
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransition.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransitionEffect()
{
  return &type metadata for ContentTransitionEffect;
}

uint64_t sub_235142C28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _ContentTransitionModifier, (uint64_t)&protocol witness table for _ContentTransitionModifier, a4);
}

uint64_t sub_235142C3C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _ContentTransitionGroup, (uint64_t)&protocol witness table for _ContentTransitionGroup, a4);
}

uint64_t sub_235142C50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for PreferTextLayoutManagerInputModifier, (uint64_t)&protocol witness table for PreferTextLayoutManagerInputModifier, a4);
}

void *type metadata accessor for _ContentTransitionModifier.ChildEnvironment()
{
  return &unk_25063CDA8;
}

uint64_t destroy for ContentTransitionEffect.Init(uint64_t a1)
{
  return outlined consume of ContentTransition.Storage(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), *(_BYTE *)(a1 + 21));
}

uint64_t initializeBufferWithCopyOfBuffer for ContentTransitionEffect.Init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 20);
  v6 = *(unsigned int *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 21);
  outlined copy of ContentTransition.Storage(v4, v6 | (v5 << 32), v7);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 21) = v7;
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  return a1;
}

uint64_t assignWithCopy for ContentTransitionEffect.Init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 20);
  v6 = *(unsigned int *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 21);
  outlined copy of ContentTransition.Storage(v4, v6 | (v5 << 32), v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 20) = v5;
  v10 = *(_BYTE *)(a1 + 21);
  *(_BYTE *)(a1 + 21) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  return a1;
}

__n128 __swift_memcpy23_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ContentTransitionEffect.Init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_WORD *)(a2 + 20);
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  v9 = *(_BYTE *)(a1 + 21);
  *(_WORD *)(a1 + 20) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransitionEffect.Init(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 23))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 22);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransitionEffect.Init(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 23) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 23) = 0;
    if (a2)
      *(_BYTE *)(result + 22) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransitionEffect.Init()
{
  return &type metadata for ContentTransitionEffect.Init;
}

unint64_t instantiation function for generic protocol witness table for ContentTransitionEffect.Init(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ContentTransitionModifier.ChildEnvironment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t type metadata accessor for RBTransition()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RBTransition;
  if (!lazy cache variable for type metadata for RBTransition)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBTransition);
  }
  return result;
}

_QWORD *__swift_memcpy14_4(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NamedKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 14))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 13);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NamedKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 14) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 14) = 0;
    if (a2)
      *(_BYTE *)(result + 13) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NamedKey()
{
  return &type metadata for ContentTransition.NamedKey;
}

BOOL static ArchivedViewInput.DeploymentVersion.< infix(_:_:)(char *a1, char *a2)
{
  return *a1 < *a2;
}

uint64_t ArchivedViewInput.Value.isArchived.getter()
{
  _BYTE *v0;

  return *v0 & 1;
}

uint64_t ArchivedViewInput.Value.customFontURLs.getter()
{
  unsigned __int8 *v0;

  return (*v0 >> 2) & 1;
}

uint64_t ArchivedViewInput.Value.preciseTextLayout.getter()
{
  unsigned __int8 *v0;

  return (*v0 >> 4) & 1;
}

_BYTE *ArchivedViewInput.Value.init(flags:deploymentVersion:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  char v3;

  v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

uint64_t ArchivedViewInput.Flags.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void static ArchivedViewInput.Flags.customFontURLs.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static ArchivedViewInput.Flags.assetCatalogRefences.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void static ArchivedViewInput.Flags.preciseTextLayout.getter(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

void ArchivedViewInput.Value.flags.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ArchivedViewInput.Value.flags.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ArchivedViewInput.Value.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ArchivedViewInput.Value.deploymentVersion.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *ArchivedViewInput.Value.deploymentVersion.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*ArchivedViewInput.Value.deploymentVersion.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static ArchivedViewInput.Value.isArchived.getter(_WORD *a1@<X8>)
{
  *a1 = 513;
}

uint64_t ArchivedViewInput.Value.stableIDs.getter()
{
  unsigned __int8 *v0;

  return (*v0 >> 1) & 1;
}

uint64_t ArchivedViewInput.Value.assetCatalogRefences.getter()
{
  unsigned __int8 *v0;

  return (*v0 >> 3) & 1;
}

BOOL static ArchivedViewInput.Value.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL static ArchivedViewInput.DeploymentVersion.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ArchivedViewInput.DeploymentVersion.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ArchivedViewInput.DeploymentVersion.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ArchivedViewInput.DeploymentVersion.v5.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ArchivedViewInput.DeploymentVersion.v6.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void ArchivedViewInput.DeploymentVersion.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ArchivedViewInput.DeploymentVersion.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a2 < *a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivedViewInput.DeploymentVersion@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t ArchivedViewInput.DeploymentVersion.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivedViewInput.DeploymentVersion(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t ArchivedViewInput.DeploymentVersion.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void static ArchivedViewInput.defaultValue.getter(_WORD *a1@<X8>)
{
  *a1 = 512;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewInput.Flags, &type metadata for ArchivedViewInput.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewInput.Flags, &type metadata for ArchivedViewInput.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewInput.Flags, &type metadata for ArchivedViewInput.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewInput.Flags, &type metadata for ArchivedViewInput.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance ArchivedViewInput(_WORD *a1@<X8>)
{
  *a1 = 512;
}

ValueMetadata *type metadata accessor for ArchivedViewInput()
{
  return &type metadata for ArchivedViewInput;
}

ValueMetadata *type metadata accessor for ArchivedViewInput.Flags()
{
  return &type metadata for ArchivedViewInput.Flags;
}

uint64_t getEnumTagSinglePayload for ArchivedViewInput.Value(unsigned __int16 *a1, int a2)
{
  int v2;
  int v3;
  int v4;

  if (!a2)
    return 0;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if ((a2 + 0xFFFF) < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        return 0;
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for ArchivedViewInput.Value(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_235143848 + 4 * byte_2352CE585[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_235143828 + 4 * byte_2352CE580[v4]))();
}

uint64_t sub_235143828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_235143848(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_235143850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_235143858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_235143860(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_235143868(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewInput.Value()
{
  return &type metadata for ArchivedViewInput.Value;
}

ValueMetadata *type metadata accessor for ArchivedViewInput.DeploymentVersion()
{
  return &type metadata for ArchivedViewInput.DeploymentVersion;
}

void _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *i;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t KeyPath;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  int OffsetAttribute2;
  unsigned int v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int8 v83;
  unsigned int v84;
  unsigned __int8 v85;
  unsigned int v86;
  unsigned __int8 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;

  v69 = a5;
  v70 = a4;
  v71 = a2;
  v75 = a1;
  v104 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v11);
  v67 = (char *)v56 - v12;
  v68 = a7;
  v14 = type metadata accessor for InterpolatedDisplayList(0, a6, a7, v13);
  v72 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v66 = (char *)v56 - v15;
  v16 = *(_QWORD *)a3;
  v77 = *(_DWORD *)(a3 + 8);
  v17 = *(_QWORD *)(a3 + 16);
  v76 = *(_DWORD *)(a3 + 24);
  v73 = *(_DWORD *)(a3 + 28);
  LODWORD(v65) = *(_DWORD *)(a3 + 32);
  v79 = *(_DWORD *)(a3 + 36);
  v18 = *(_QWORD *)(a3 + 40);
  v19 = *(_QWORD *)(a3 + 48);
  v64 = *(_DWORD *)(a3 + 56);
  v63 = *(_DWORD *)(a3 + 60);
  v20 = *(_DWORD *)(a3 + 68);
  v74 = *(_DWORD *)(a3 + 64);
  OffsetAttribute2 = *(_DWORD *)(a3 + 72);
  v62 = *(_DWORD *)(a3 + 76);
  v61 = *(_DWORD *)(a3 + 80);
  v21 = *v7;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, v22, v23, v24);
  v26 = *(_QWORD *)(v21 + 16);
  if (v26)
  {
    v27 = v25;
    for (i = (_DWORD *)(v21 + 48); *((_QWORD *)i - 2) != v25; i += 6)
    {
      if (!--v26)
        return;
    }
    v60 = v20;
    v59 = v7;
    v58 = *i;
    swift_beginAccess();
    if ((v79 & 0x20) == 0)
    {
      swift_retain();
      v65 = v74;
      v29 = (uint64_t)v66;
LABEL_20:
      swift_endAccess();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v41 = *(_DWORD *)(v17 + 16);
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v43 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v44 = (v79 >> 10) & 1;
      v45 = (uint64_t)v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(v67, 1, 1, a6);
      v88 = 0;
      *((_QWORD *)&v52 + 1) = __PAIR64__(v58, v43);
      *(_QWORD *)&v52 = __PAIR64__(v41, v73);
      v46 = InterpolatedDisplayList.init(group:content:position:animatedPosition:containerPosition:size:phase:time:transaction:environment:pixelLength:list:animatesSize:defersRender:supportsVFD:lastContent:lastSize:resetSeed:contentVersion:)(v75, v71, v74, v65, v60, OffsetAttribute2, v76, v77, v29, 0.0, 0.0, v52, v70 & 1, v69 & 1, v44, v45, 0, &v88, a6,
              v68);
      v47 = MEMORY[0x24BDAC7A8](v46);
      v54 = v14;
      v55 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for InterpolatedDisplayList<A>, v14, v47);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v29, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v53, v14, MEMORY[0x24BEE4078], v48, MEMORY[0x24BEE40A8], v49);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v29, v14);
      v50 = v88;
      AGGraphSetFlags();
      LOBYTE(v88) = 0;
      PreferencesOutputs.subscript.setter(v50, v27, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v51);
      return;
    }
    v56[0] = v14;
    v88 = v16;
    v89 = v77;
    v90 = v17;
    v91 = v76;
    v92 = v73;
    v93 = v65;
    v94 = v79;
    v95 = v18;
    v96 = v19;
    v97 = v64;
    v98 = v63;
    v30 = v74;
    v99 = v74;
    v100 = v60;
    v101 = OffsetAttribute2;
    v102 = v62;
    v103 = v61;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v57 = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    v31 = _ViewInputs.geometryTransaction()();
    v32 = swift_getKeyPath();
    v56[1] = v17 + 16;
    v33 = specialized CachedEnvironment.attribute<A>(keyPath:)(v32);
    swift_release();
    if ((*(_BYTE *)(v17 + 81) & 1) == 0
      && v30 == *(_DWORD *)(v17 + 32)
      && OffsetAttribute2 == *(_DWORD *)(v17 + 36)
      && v33 == *(_DWORD *)(v17 + 40)
      && v77 == *(_DWORD *)(v17 + 44)
      && v31 == *(_DWORD *)(v17 + 48)
      && v76 == *(_DWORD *)(v17 + 52))
    {
      if ((*(_BYTE *)(v17 + 64) & 1) == 0)
      {
        v40 = *(unsigned int *)(v17 + 60);
        goto LABEL_19;
      }
    }
    else
    {
      v88 = v16;
      v89 = v77;
      v90 = v17;
      v91 = v76;
      v92 = v31;
      v93 = v65;
      v94 = v79;
      v95 = v18;
      v96 = v57;
      v97 = v64;
      v98 = v63;
      v99 = v30;
      v100 = v60;
      v101 = OffsetAttribute2;
      v102 = v62;
      v103 = v61;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v88, v33, (uint64_t)&v80);
      v35 = v81;
      v34 = v82;
      v36 = v83;
      v37 = v87;
      v38 = v83 | ((unint64_t)v84 << 32);
      v39 = v85 | ((unint64_t)v86 << 32);
      *(_OWORD *)(v17 + 32) = v80;
      *(_QWORD *)(v17 + 48) = v35;
      *(_QWORD *)(v17 + 56) = v34;
      *(_QWORD *)(v17 + 64) = v38;
      *(_QWORD *)(v17 + 72) = v39;
      *(_WORD *)(v17 + 80) = v37;
      if (v36 != 1)
      {
        v40 = HIDWORD(v34);
LABEL_19:
        v29 = (uint64_t)v66;
        v14 = v56[0];
        v65 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_20;
      }
    }
    v40 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v17 + 60) = v40;
    *(_BYTE *)(v17 + 64) = 0;
    goto LABEL_19;
  }
}

BOOL protocol witness for InterpolatableContent.requiresTransition(to:) in conformance Image.Resolved(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[10];
  _OWORD v14[2];
  _OWORD v15[10];
  _OWORD v16[2];

  v2 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v2;
  v16[0] = *(_OWORD *)(a1 + 160);
  *(_DWORD *)((char *)v16 + 15) = *(_DWORD *)(a1 + 175);
  v3 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v6;
  v7 = *(_OWORD *)(v1 + 144);
  v13[8] = *(_OWORD *)(v1 + 128);
  v13[9] = v7;
  v14[0] = *(_OWORD *)(v1 + 160);
  *(_DWORD *)((char *)v14 + 15) = *(_DWORD *)(v1 + 175);
  v8 = *(_OWORD *)(v1 + 80);
  v13[4] = *(_OWORD *)(v1 + 64);
  v13[5] = v8;
  v9 = *(_OWORD *)(v1 + 112);
  v13[6] = *(_OWORD *)(v1 + 96);
  v13[7] = v9;
  v10 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v10;
  v11 = *(_OWORD *)(v1 + 48);
  v13[2] = *(_OWORD *)(v1 + 32);
  v13[3] = v11;
  return !specialized static Image.Resolved.== infix(_:_:)((uint64_t)v13, (uint64_t)v15);
}

BOOL InterpolatableContent<>.requiresTransition(to:)()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t InterpolatableContent<>.addsDrawingGroup.getter()
{
  return 0;
}

uint64_t InterpolatableContent.defaultAnimation(to:)()
{
  return 0;
}

uint64_t type metadata accessor for InterpolatedDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InterpolatedDisplayList);
}

void static InterpolatableContent.defaultTransition.getter(uint64_t a1@<X8>)
{
  static InterpolatableContent.defaultTransition.getter(a1);
}

{
  *(_QWORD *)a1 = 0x8000000001;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t InterpolatedDisplayList.init(group:content:position:animatedPosition:containerPosition:size:phase:time:transaction:environment:pixelLength:list:animatesSize:defersRender:supportsVFD:lastContent:lastSize:resetSeed:contentVersion:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, __int128 a12, char a13, char a14, char a15, uint64_t a16, int a17, uint64_t *a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  double *v28;

  v23 = *a18;
  *(_QWORD *)a9 = a1;
  *(_DWORD *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 12) = a3;
  *(_DWORD *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 20) = a5;
  *(_DWORD *)(a9 + 24) = a6;
  *(_DWORD *)(a9 + 28) = a7;
  *(_DWORD *)(a9 + 32) = a8;
  *(_OWORD *)(a9 + 36) = a12;
  *(_BYTE *)(a9 + 52) = a13;
  *(_BYTE *)(a9 + 53) = a14;
  *(_BYTE *)(a9 + 54) = a15;
  v24 = (int *)type metadata accessor for InterpolatedDisplayList(0, a19, a20, a4);
  v25 = a9 + v24[23];
  v26 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a16, v26);
  v28 = (double *)(a9 + v24[24]);
  *v28 = a10;
  v28[1] = a11;
  *(_DWORD *)(a9 + v24[25]) = a17;
  *(_QWORD *)(a9 + v24[26]) = v23;
  return result;
}

uint64_t InterpolatedDisplayList.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t InterpolatedDisplayList.list.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  char v5;

  if (*(_DWORD *)(v1 + 48) == *MEMORY[0x24BE096C0])
  {
    result = 0;
    *(_BYTE *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_BYTE *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(_BYTE *)(a1 + 10) = v5;
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t InterpolatedDisplayList.updateValue()(uint64_t a1)
{
  double v1;
  float64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t Value;
  uint64_t v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned __int8 v46;
  uint64_t v47;
  int v48;
  char *v49;
  void (*v50)(char *);
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char v58;
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  double *v66;
  char *v67;
  unsigned int v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  float64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  char *v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  double *v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  void (*v108)(char *, uint64_t, uint64_t);
  char v109;
  uint64_t v110;
  int v111;
  uint64_t (*v112)(void);
  uint64_t v113;
  unint64_t v114;
  float v115;
  uint64_t v116;
  void (*v117)(double *, uint64_t *, uint64_t, char *, __int128 *, uint64_t, float);
  float64x2_t *v118;
  float64x2_t v119;
  char v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double *v126;
  double v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t);
  char *v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  double *v135;
  uint64_t v136;
  __int16 v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  void (*v143)(char *, uint64_t, uint64_t);
  uint64_t v144;
  float64x2_t v145;
  unint64_t v146;
  unint64_t v147;
  float64x2_t *v148;
  float64_t v149;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t, uint64_t);
  float64x2_t v169;
  uint64_t v170;
  char *v171;
  double v172;
  double v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  char v181;
  int v182;
  uint64_t v183;
  int v184;
  char v185;
  char v186;
  char v187;
  unint64_t v188;
  unsigned int v189;
  __int16 v190;
  char v191;
  unsigned __int8 v192;
  uint64_t v193;
  int v194;
  uint64_t v195;

  v2 = v1;
  v195 = *MEMORY[0x24BDAC8D0];
  v158 = type metadata accessor for FloatingPointRoundingRule();
  v156 = *(_QWORD *)(v158 - 8);
  MEMORY[0x24BDAC7A8](v158);
  v157 = (char *)&v151 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v166 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v165 = (char *)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v151 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v151 = (char *)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v152 = (char *)&v151 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v155 = (char *)&v151 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v153 = (char *)&v151 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v151 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v160 = (char *)&v151 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v171 = (char *)&v151 - v26;
  v27 = *(int *)(a1 + 100);
  v28 = *(_DWORD *)(*(_QWORD *)&v1 + v27);
  v29 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v28 != v29)
  {
    *(_DWORD *)(*(_QWORD *)&v2 + v27) = v29;
    v30 = *(_QWORD *)&v2 + *(int *)(a1 + 92);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v30, v166);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v30, 1, 1, v5);
    *(_QWORD *)(*(_QWORD *)&v2 + *(int *)(a1 + 104)) = 0;
    v31 = *(void (**)(uint64_t))(***(_QWORD ***)&v2 + 88);
    v32 = swift_retain();
    v31(v32);
    swift_release();
  }
  Value = AGGraphGetValue();
  v154 = v34;
  v168 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v168(v171, Value, v5);
  type metadata accessor for CGSize(0);
  v35 = (double *)AGGraphGetValue();
  v36 = *v35;
  v37 = v35[1];
  v169.f64[0] = v2;
  InterpolatedDisplayList.environment.getter(&v174);
  v38 = v174;
  v164 = v174;
  v170 = a1;
  v163 = v11;
  v162 = *((_QWORD *)&v174 + 1);
  if (*((_QWORD *)&v174 + 1))
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v38, (uint64_t)&v188);
    swift_release_n();
  }
  else
  {
    v159 = v6;
    v39 = v5;
    v40 = swift_retain_n();
    v41 = specialized find<A>(_:key:)(v40);
    if (v41)
    {
      v42 = *(_QWORD *)(v41 + 72);
      v43 = *(unsigned int *)(v41 + 80) | ((unint64_t)*(unsigned __int8 *)(v41 + 84) << 32);
      v44 = *(_BYTE *)(v41 + 85);
      v45 = *(_BYTE *)(v41 + 86);
      v46 = *(_BYTE *)(v41 + 87);
      v47 = *(_QWORD *)(v41 + 88);
      v48 = *(_DWORD *)(v41 + 96);
      outlined copy of ContentTransition.Storage(v42, v43, v44);
      swift_retain();
    }
    else
    {
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v43 = 0x302000000;
      v42 = 0x8000000000;
    }
    v188 = v42;
    v189 = v43;
    LOBYTE(v190) = BYTE4(v43);
    HIBYTE(v190) = v44;
    v191 = v45;
    v192 = v46;
    v193 = v47;
    v194 = v48;
    swift_release();
    v5 = v39;
    v11 = v163;
    a1 = v170;
    v6 = v159;
  }
  swift_release_n();
  v167 = ++static DisplayList.Version.lastValue;
  v49 = (char *)(*(_QWORD *)&v169.f64[0] + *(int *)(a1 + 92));
  v50 = *(void (**)(char *))(v6 + 16);
  v161 = v49;
  v51 = v166;
  v50(v10);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v52(v10, 1, v5) != 1)
  {
    v159 = v6;
    v55 = v160;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v160, v10, v5);
    v56 = (void (*)(char *, char *, uint64_t))v168;
    v168(v22, (uint64_t)v55, v5);
    v57 = v153;
    v56(v153, v171, v5);
    if ((v154 & 1) != 0)
      v58 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v170 + 24) + 16))(v57, v5);
    else
      v58 = 0;
    v59 = v155;
    v60 = v57;
    v61 = *(void (**)(char *, uint64_t))(v11 + 8);
    v61(v60, v5);
    v61(v22, v5);
    v168(v59, (uint64_t)v55, v5);
    if ((v58 & 1) != 0)
    {
      v61(v59, v5);
      v54 = v161;
    }
    else
    {
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v170 + 24) + 24))(v5);
      v61(v59, v5);
      v54 = v161;
      if ((v65 & 1) == 0)
        goto LABEL_22;
      v66 = (double *)(*(_QWORD *)&v169.f64[0] + *(int *)(v170 + 96));
      if (*v66 == v36 && v66[1] == v37)
        goto LABEL_22;
    }
    AGGraphGetValue();
    v62 = swift_retain();
    v63 = specialized find<A>(_:key:)(v62);
    if (!v63)
    {
      swift_release();
      goto LABEL_27;
    }
    v64 = *(_BYTE *)(v63 + 72);
    swift_release();
    if ((v64 & 1) == 0)
    {
LABEL_27:
      v72 = v170;
      *(_QWORD *)(*(_QWORD *)&v169.f64[0] + *(int *)(v170 + 104)) = v167;
      v73 = v162;
      if (!HIBYTE(v190))
      {
        v74 = v11;
        v75 = v188;
        v76 = v189 | ((unint64_t)v190 << 32);
        v77 = v188 >> 38;
        if (((v188 >> 38) & 3) >= 2
          && __PAIR128__((__CFADD__(v188, 0xFFFFFF7FFFFFFFFFLL) + v189 - 1) & 0xFFFFFF, v188 - 0x8000000001) >= 3
          && !(v188 ^ 0x8000000000 | v189 & 0xFFFFFFLL))
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v72 + 24) + 8))(&v174, v5);
          v75 = v174;
          v188 = v174;
          v190 = WORD6(v174);
          v189 = DWORD2(v174);
          v191 = 1;
          v11 = v74;
          if (BYTE13(v174))
            goto LABEL_37;
          v76 = DWORD2(v174) | ((unint64_t)BYTE12(v174) << 32);
          v77 = (unint64_t)v174 >> 38;
        }
        outlined copy of ContentTransition.Storage(v75, v76, 0);
        if ((v77 & 2) != 0 && !(v75 ^ 0x8000000001 | v76 & 0xFFFFFF))
        {
          v78 = 0;
          v11 = v74;
LABEL_38:
          v79 = v152;
          if (v78 || (v75 & 0x8000000000) == 0 || v75 ^ 0x8000000001 | v76 & 0xFFFFFF)
          {
            v80 = v11;
            if (AGGraphGetOutputValue())
            {
              AGGraphClearUpdate();
              v81 = *(_QWORD *)(v170 + 24);
              closure #1 in InterpolatedDisplayList.updateValue()(v5, v81, v82, &v174);
              AGGraphSetUpdate();
              if (v193)
                goto LABEL_51;
              v83 = swift_retain();
              v84 = specialized find<A>(_:key:)(v83);
              if (v84)
              {
                v85 = *(_QWORD *)(v84 + 72);
                swift_retain();
              }
              else
              {
                v85 = 0;
              }
              swift_release();
              v86 = v79;
              v87 = (void (*)(char *, char *, uint64_t))v168;
              v168(v86, (uint64_t)v160, v5);
              v88 = v151;
              v87(v151, v171, v5);
              v89 = v152;
              if (!v85)
                v85 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48))(v88, v5, v81);
              v61(v88, v5);
              v61(v89, v5);
              v193 = v85;
              if (v85)
              {
LABEL_51:
                v165 = (char *)Transaction.combinedAnimationListener.getter();
                swift_release();
              }
              else
              {
                swift_release();
                v165 = 0;
              }
              v73 = v162;
LABEL_53:
              v90 = v192;
              if (v73)
              {
                v91 = v164;
                swift_retain_n();
                swift_retain_n();
                specialized PropertyList.Tracker.value<A>(_:for:)(v91, &v174);
                swift_release_n();
                swift_release_n();
                v92 = v174;
              }
              else
              {
                v93 = swift_retain_n();
                v94 = specialized find<A>(_:key:)(v93);
                if (v94)
                  v92 = *(unsigned __int8 *)(v94 + 72);
                else
                  v92 = 0;
                swift_release_n();
              }
              v61(v160, v5);
              if (v78)
              {
                v95 = v76;
                v11 = v80;
                v70 = v170;
                v53 = v166;
                v71 = v169.f64[0];
                if (v78 != 1)
                {
LABEL_79:
                  v69 = *(void (**)(char *, uint64_t))(v159 + 8);
                  v54 = v161;
                  goto LABEL_80;
                }
                v96 = v95;
                if (BYTE4(v95) == 2)
                  v97 = v92;
                else
                  v97 = BYTE4(v95) & 1;
                v98 = v97 == 0;
                v99 = 0x100000000;
                if (v98)
                  v99 = 0;
                v100 = v99 & 0xFFFFFFFF00000000 | v96;
              }
              else
              {
                if (BYTE4(v76) == 3)
                  v101 = v90;
                else
                  v101 = BYTE4(v76);
                if ((v76 & 0xFF000000) == 0x2000000)
                  v102 = v92;
                else
                  v102 = (v76 >> 24) & 1;
                v98 = v102 == 0;
                v103 = 0x1000000;
                if (v98)
                  v103 = 0;
                v100 = v103 & 0xFFFFFFFFFF000000 | v76 & 0xFFFFFF | (v101 << 32);
                v11 = v80;
                v70 = v170;
                v53 = v166;
                v71 = v169.f64[0];
              }
              v189 = v100;
              LOBYTE(v190) = BYTE4(v100);
              HIBYTE(v190) = v78;
              goto LABEL_79;
            }
          }
          else
          {
            v80 = v11;
            outlined copy of ContentTransition.Storage(v75, v76, 0);
          }
          swift_release();
          v165 = 0;
          v193 = 0;
          goto LABEL_53;
        }
        outlined consume of ContentTransition.Storage(v75, v76, 0);
        v11 = v74;
      }
LABEL_37:
      (*(void (**)(unint64_t *, char *, uint64_t))(*(_QWORD *)(v72 + 24) + 40))(&v188, v171, v5);
      v75 = v188;
      v76 = v189 | ((unint64_t)v190 << 32);
      v78 = HIBYTE(v190);
      goto LABEL_38;
    }
LABEL_22:
    v61(v55, v5);
    v53 = v166;
    v6 = v159;
    goto LABEL_23;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v51);
  v53 = v51;
  v54 = v161;
LABEL_23:
  v67 = v165;
  ((void (*)(char *, char *, uint64_t))v50)(v165, v54, v53);
  v68 = v52(v67, 1, v5);
  v69 = *(void (**)(char *, uint64_t))(v6 + 8);
  v69(v67, v53);
  v70 = v170;
  v71 = v169.f64[0];
  if (v68 == 1)
    *(_QWORD *)(*(_QWORD *)&v169.f64[0] + *(int *)(v170 + 104)) = v167;
  swift_release();
  v165 = 0;
  v193 = 0;
LABEL_80:
  v69(v54, v53);
  v168(v54, (uint64_t)v171, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v5);
  v104 = (double *)(*(_QWORD *)&v71 + *(int *)(v70 + 96));
  *v104 = v36;
  v104[1] = v37;
  v105 = v188;
  v106 = v189 | ((unint64_t)v190 << 32);
  v107 = HIBYTE(v190);
  v108 = (void (*)(char *, uint64_t, uint64_t))v5;
  v109 = v191;
  v110 = v193;
  v111 = v194 & 1 | 0x20;
  v112 = *(uint64_t (**)(void))(*(_QWORD *)(v70 + 24) + 32);
  v168 = v108;
  if ((v112() & 1) != 0)
    v111 = 33;
  v113 = **(_QWORD **)&v71;
  v114 = *(_QWORD *)(*(_QWORD *)&v71 + *(int *)(v70 + 104));
  if (v114)
    LODWORD(v114) = (2 * ((33 * (v114 >> 16)) ^ v114)) | 1;
  LOWORD(v173) = v114;
  v183 = v105;
  v185 = BYTE4(v106);
  v184 = v106;
  v186 = v107;
  v187 = v109;
  v115 = 1.0 / *(double *)AGGraphGetValue();
  LOBYTE(v174) = 0;
  DWORD1(v174) = 0;
  BYTE8(v174) = 1;
  HIDWORD(v174) = v111;
  LOBYTE(v175) = 3;
  v116 = *(unsigned __int8 *)(*(_QWORD *)&v71 + 54);
  v117 = *(void (**)(double *, uint64_t *, uint64_t, char *, __int128 *, uint64_t, float))(*(_QWORD *)v113
                                                                                                 + 128);
  swift_retain();
  outlined copy of ContentTransition.Storage(v105, v106, v107);
  swift_retain();
  v117(&v173, &v183, v110, v165, &v174, v116, v115);
  swift_release();
  swift_release();
  outlined consume of ContentTransition.Storage(v105, v106, v107);
  v118 = (float64x2_t *)AGGraphGetValue();
  v119 = vsubq_f64(*v118, *(float64x2_t *)AGGraphGetValue());
  v120 = *(_BYTE *)(*(_QWORD *)&v71 + 52);
  v121 = v119.f64[1];
  v122 = 0.0;
  v169 = v119;
  v124 = v119.f64[1];
  v123 = v119.f64[0];
  v125 = 0.0;
  if ((v120 & 1) == 0)
  {
    v126 = (double *)AGGraphGetValue();
    v127 = *v126;
    v172 = v126[1];
    v128 = *(double *)AGGraphGetValue();
    v173 = v127 + v128 * 0.5;
    v129 = *MEMORY[0x24BEE38E8];
    v130 = v156;
    v131 = *(void (**)(char *, uint64_t, uint64_t))(v156 + 104);
    v132 = v157;
    v133 = v158;
    v131(v157, v129, v158);
    specialized FloatingPoint.round(_:toMultipleOf:)(v132, v128);
    v134 = *(void (**)(char *, uint64_t))(v130 + 8);
    v134(v132, v133);
    v172 = v128 * 0.5 + v172;
    v131(v132, v129, v133);
    specialized FloatingPoint.round(_:toMultipleOf:)(v132, v128);
    v134(v132, v133);
    v135 = (double *)AGGraphGetValue();
    v123 = v173 - *v135;
    v124 = v172 - v135[1];
    v125 = v123 - v169.f64[0];
    v122 = v124 - v121;
  }
  v173 = v123;
  v172 = v124;
  InterpolatedDisplayList.list.getter((uint64_t)&v174);
  if ((_QWORD)v174)
    v136 = v174;
  else
    v136 = MEMORY[0x24BEE4AF8];
  if ((_QWORD)v174)
    v137 = WORD4(v174);
  else
    v137 = 0;
  if ((_QWORD)v174)
    v138 = BYTE10(v174);
  else
    v138 = 0;
  v183 = v136;
  LOWORD(v184) = v137;
  BYTE2(v184) = v138;
  if ((*(_BYTE *)(*(_QWORD *)&v71 + 53) & 1) != 0)
  {
    v139 = swift_allocObject();
    *(_QWORD *)(v139 + 16) = **(_QWORD **)&v71;
    *(double *)(v139 + 24) = v123;
    *(double *)(v139 + 32) = v124;
    *(double *)(v139 + 40) = v125;
    *(double *)(v139 + 48) = v122;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v140 = swift_allocObject();
    *(_OWORD *)(v140 + 16) = xmmword_23527E860;
    *(_OWORD *)(v140 + 32) = 0u;
    *(_OWORD *)(v140 + 48) = 0u;
    v141 = v167;
    *(_QWORD *)(v140 + 64) = v167;
    *(_QWORD *)(v140 + 72) = v139;
    *(_QWORD *)(v140 + 80) = 0x4000001000000000;
    *(_QWORD *)(v140 + 88) = v136;
    *(_BYTE *)(v140 + 98) = v138;
    *(_WORD *)(v140 + 96) = v137;
    *(_DWORD *)(v140 + 100) = 0;
    outlined copy of DisplayList.Effect(v139, 0, 16);
    swift_bridgeObjectRetain();
    outlined copy of DisplayList.Effect(v139, 0, 16);
    swift_retain();
    swift_release();
    v175 = 0u;
    v174 = 0u;
    v176 = v141;
    v177 = v139;
    v178 = 0x4000001000000000;
    v179 = v136;
    v181 = v138;
    v180 = v137;
    v182 = 0;
    DisplayList.Item.properties.getter();
    outlined consume of DisplayList.Effect(v139, 0, 16);
    swift_bridgeObjectRelease();
    v183 = v140;
    LOWORD(v184) = v137 | 0x20;
  }
  else
  {
    v142 = *(_DWORD *)(*(_QWORD *)&v71 + 32);
    v141 = v167;
    *(_QWORD *)&v174 = v167;
    swift_retain();
    DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v183, v142, (uint64_t *)&v174, v123, v124, v125, v122);
    swift_release();
    v140 = v183;
  }
  v143 = v168;
  if (v169.f64[0] != 0.0 || v121 != 0.0)
  {
    v144 = *(_QWORD *)(v140 + 16);
    if (v144)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_111:
        v140 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v140);
      v145 = v169;
      v146 = 0;
      v147 = *(_QWORD *)(v140 + 16);
      v148 = (float64x2_t *)(v140 + 64);
      do
      {
        if (v146 >= v147)
        {
          __break(1u);
          goto LABEL_111;
        }
        ++v146;
        v148[-2] = vaddq_f64(v145, v148[-2]);
        v149 = v148->f64[0];
        if (v141 > *(_QWORD *)&v148->f64[0])
          v149 = *(double *)&v141;
        v148->f64[0] = v149;
        v148 = (float64x2_t *)((char *)v148 + 72);
      }
      while (v144 != v146);
      v183 = v140;
    }
  }
  *(_QWORD *)&v174 = v140;
  WORD4(v174) = v184;
  BYTE10(v174) = BYTE2(v184);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v163 + 8))(v171, v143);
  outlined consume of ContentTransition.Storage(v188, v189 | ((unint64_t)v190 << 32), SHIBYTE(v190));
  return swift_release();
}

uint64_t closure #1 in InterpolatedDisplayList.updateValue()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  type metadata accessor for InterpolatedDisplayList(0, a1, a2, a3);
  *a4 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance InterpolatedDisplayList<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for InterpolatedDisplayList<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t dispatch thunk of static InterpolatableContent.defaultTransition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InterpolatableContent.requiresTransition(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of InterpolatableContent.appliesTransitionsForSizeChanges.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InterpolatableContent.addsDrawingGroup.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InterpolatableContent.modifyTransition(state:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of InterpolatableContent.defaultAnimation(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t type metadata instantiation function for InterpolatedDisplayList()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for InterpolatedDisplayList()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InterpolatedDisplayList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  const void *v37;
  unsigned int (*v38)(const void *, uint64_t, uint64_t);
  _OWORD *v39;
  _OWORD *v40;
  _DWORD *v41;
  _DWORD *v42;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  v11 = *a2;
  *a1 = *a2;
  if (v7 > 7
    || v10 != 0
    || ((((((v8 + 7 + ((v7 + 55) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v16 = *v17;
    v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v18 = *v19;
    v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
    v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v20 = *v21;
    v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v22 = *v23;
    v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFCLL);
    v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v24 = *v25;
    v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v26 = *v27;
    v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFCLL);
    v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v28 = *v29;
    v30 = (_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v31 = (_DWORD *)(((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v30 = *v31;
    v32 = (_DWORD *)(((unint64_t)v30 + 7) & 0xFFFFFFFFFFFFFCLL);
    v33 = (_DWORD *)(((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v32 = *v33;
    v34 = ((unint64_t)v32 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = ((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)v34 = *(_DWORD *)v35;
    *(_BYTE *)(v34 + 4) = *(_BYTE *)(v35 + 4);
    *(_BYTE *)(v34 + 5) = *(_BYTE *)(v35 + 5);
    *(_BYTE *)(v34 + 6) = *(_BYTE *)(v35 + 6);
    v36 = (void *)((v34 + v7 + 7) & ~v7);
    v37 = (const void *)((v35 + v7 + 7) & ~v7);
    v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v38(v37, 1, v4))
    {
      memcpy(v36, v37, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v36, v37, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v36, 0, 1, v4);
    }
    v39 = (_OWORD *)(((unint64_t)v36 + v9) & 0xFFFFFFFFFFFFFFF8);
    v40 = (_OWORD *)(((unint64_t)v37 + v9) & 0xFFFFFFFFFFFFFFF8);
    *v39 = *v40;
    v41 = (_DWORD *)(((unint64_t)v39 + 19) & 0xFFFFFFFFFFFFF8);
    v42 = (_DWORD *)(((unint64_t)v40 + 19) & 0xFFFFFFFFFFFFFFF8);
    *v41 = *v42;
    *(_QWORD *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v42 + 11) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for InterpolatedDisplayList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = a1 + 11;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((((((((((((((((((((((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                + 7) & 0xFFFFFFFFFFFFFFFCLL)
              + 7) & 0xFFFFFFFFFFFFFFFCLL)
            + 7) & 0xFFFFFFFFFFFFFFFCLL)
          + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + *(unsigned __int8 *)(v5 + 80)
      + 7) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

_QWORD *initializeWithCopy for InterpolatedDisplayList(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  unsigned int (*v32)(const void *, uint64_t, uint64_t);
  int v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _OWORD *v37;
  _OWORD *v38;
  _DWORD *v39;
  _DWORD *v40;

  v5 = *a2;
  v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v21 = *v22;
  v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFCLL);
  v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v23 = *v24;
  v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v26 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  *(_BYTE *)(v25 + 5) = *(_BYTE *)(v26 + 5);
  *(_BYTE *)(v25 + 6) = *(_BYTE *)(v26 + 6);
  v27 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (void *)((v29 + 7 + v25) & ~v29);
  v31 = (const void *)((v29 + 7 + v26) & ~v29);
  v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_retain();
  if (v32(v31, 1, v27))
  {
    v33 = *(_DWORD *)(v28 + 84);
    v34 = *(_QWORD *)(v28 + 64);
    if (v33)
      v35 = v34;
    else
      v35 = v34 + 1;
    memcpy(v30, v31, v35);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v30, v31, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
    v33 = *(_DWORD *)(v28 + 84);
    v34 = *(_QWORD *)(v28 + 64);
  }
  if (v33)
    v36 = v34;
  else
    v36 = v34 + 1;
  v37 = (_OWORD *)(((unint64_t)v30 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_OWORD *)(((unint64_t)v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v39 = (_DWORD *)(((unint64_t)v37 + 19) & 0xFFFFFFFFFFFFF8);
  v40 = (_DWORD *)(((unint64_t)v38 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  *(_QWORD *)(((unint64_t)v39 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for InterpolatedDisplayList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  size_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _DWORD *v38;
  _DWORD *v39;

  v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v6 & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((v6 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v5 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFCLL);
  v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v21 = *v22;
  v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFCLL);
  v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v23 = *v24;
  v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v26 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  *(_BYTE *)(v25 + 5) = *(_BYTE *)(v26 + 5);
  *(_BYTE *)(v25 + 6) = *(_BYTE *)(v26 + 6);
  v27 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (void *)((v29 + 7 + v25) & ~v29);
  v31 = (void *)((v29 + 7 + v26) & ~v29);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  LODWORD(v6) = v32(v30, 1, v27);
  v33 = v32(v31, 1, v27);
  if ((_DWORD)v6)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v30, v31, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v30, v31, v27);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
  }
  if (*(_DWORD *)(v28 + 84))
    v34 = *(_QWORD *)(v28 + 64);
  else
    v34 = *(_QWORD *)(v28 + 64) + 1;
  memcpy(v30, v31, v34);
LABEL_10:
  if (*(_DWORD *)(v28 + 84))
    v35 = *(_QWORD *)(v28 + 64);
  else
    v35 = *(_QWORD *)(v28 + 64) + 1;
  v36 = (_QWORD *)(((unint64_t)v30 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_QWORD *)(((unint64_t)v31 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v37;
  v36[1] = v37[1];
  v38 = (_DWORD *)(((unint64_t)v36 + 19) & 0xFFFFFFFFFFFFF8);
  v39 = (_DWORD *)(((unint64_t)v37 + 19) & 0xFFFFFFFFFFFFF8);
  *v38 = *v39;
  *(_QWORD *)(((unint64_t)v38 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for InterpolatedDisplayList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _OWORD *v35;
  _OWORD *v36;
  _DWORD *v37;
  _DWORD *v38;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *v13;
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFCLL);
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v14 = *v15;
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v18 = *v19;
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v20 = *v21;
  v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFCLL);
  v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_BYTE *)(v24 + 5) = *(_BYTE *)(v25 + 5);
  *(_BYTE *)(v24 + 6) = *(_BYTE *)(v25 + 6);
  v26 = *(_QWORD *)(a3 + 16);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (void *)((v28 + 7 + v24) & ~v28);
  v30 = (const void *)((v28 + 7 + v25) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26))
  {
    v31 = *(_DWORD *)(v27 + 84);
    v32 = *(_QWORD *)(v27 + 64);
    if (v31)
      v33 = v32;
    else
      v33 = v32 + 1;
    memcpy(v29, v30, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v29, v30, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
    v31 = *(_DWORD *)(v27 + 84);
    v32 = *(_QWORD *)(v27 + 64);
  }
  if (v31)
    v34 = v32;
  else
    v34 = v32 + 1;
  v35 = (_OWORD *)(((unint64_t)v29 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_OWORD *)(((unint64_t)v30 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = (_DWORD *)(((unint64_t)v35 + 19) & 0xFFFFFFFFFFFFF8);
  v38 = (_DWORD *)(((unint64_t)v36 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  *(_QWORD *)(((unint64_t)v37 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v38 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for InterpolatedDisplayList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _DWORD *v39;
  _DWORD *v40;

  v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 11;
  swift_release();
  *(_DWORD *)(v6 & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((v6 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v5 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
  v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v19 = *v20;
  v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFCLL);
  v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v21 = *v22;
  v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFCLL);
  v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v23 = *v24;
  v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v26 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  *(_BYTE *)(v25 + 5) = *(_BYTE *)(v26 + 5);
  *(_BYTE *)(v25 + 6) = *(_BYTE *)(v26 + 6);
  v27 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (void *)((v29 + 7 + v25) & ~v29);
  v31 = (void *)((v29 + 7 + v26) & ~v29);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v33 = v32(v30, 1, v27);
  v34 = v32(v31, 1, v27);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v30, v31, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v30, v31, v27);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
  }
  if (*(_DWORD *)(v28 + 84))
    v35 = *(_QWORD *)(v28 + 64);
  else
    v35 = *(_QWORD *)(v28 + 64) + 1;
  memcpy(v30, v31, v35);
LABEL_10:
  if (*(_DWORD *)(v28 + 84))
    v36 = *(_QWORD *)(v28 + 64);
  else
    v36 = *(_QWORD *)(v28 + 64) + 1;
  v37 = (_QWORD *)(((unint64_t)v30 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v37[1] = v38[1];
  v39 = (_DWORD *)(((unint64_t)v37 + 19) & 0xFFFFFFFFFFFFF8);
  v40 = (_DWORD *)(((unint64_t)v38 + 19) & 0xFFFFFFFFFFFFF8);
  *v39 = *v40;
  *(_QWORD *)(((unint64_t)v39 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatedDisplayList(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 55) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((((((((((((((((((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                               + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                 + v9
                                                                 + 7) & ~v9);
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  else
  {
    v14 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
}

void storeEnumTagSinglePayload for InterpolatedDisplayList(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 55) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
           + 19) & 0xFFFFFFF8)
         + 11) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 55) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
           + 19) & 0xFFFFFFF8)
         + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((((v11 + ((*(unsigned __int8 *)(v7 + 80) + 55) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 19) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_23514647C@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t result;

  *((_BYTE *)v14 + v15) = 0;
  if (a1)
  {
    if ((v11 & 0x80000000) != 0)
    {
      v17 = (void *)(((((((((((((((((((((((((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                      + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                + 7) & 0xFFFFFFFFFFFFFFFCLL)
                              + 7) & 0xFFFFFFFFFFFFFFFCLL)
                            + 7) & 0xFFFFFFFFFFFFFFFCLL)
                          + 7) & 0xFFFFFFFFFFFFFFFCLL)
                        + 7) & 0xFFFFFFFFFFFFFFFCLL)
                      + 7) & 0xFFFFFFFFFFFFFFFCLL)
                    + v13
                    + 7) & v10);
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v18 = a2;
        else
          v18 = 4;
        bzero(v17, a2);
        __asm { BR              X10 }
      }
    }
    else
    {
      if ((a1 & 0x80000000) != 0)
        v16 = a1 ^ 0x80000000;
      else
        v16 = a1 - 1;
      *v14 = v16;
    }
  }
  return result;
}

void sub_2351465C4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_2351465CC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_2351465DC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t instantiation function for generic protocol witness table for InterpolatedDisplayList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for InterpolatedDisplayList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in InterpolatedDisplayList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_235146624()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t Animation.repeatForever(autoreverses:)(char a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t *, ValueMetadata *, unint64_t);
  unint64_t v3;
  uint64_t v5;
  char v6;
  char v7;

  v5 = 0;
  v6 = 1;
  v7 = a1;
  v2 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t))(*(_QWORD *)a2 + 144);
  v3 = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  return v2(&v5, &type metadata for RepeatAnimation, v3);
}

uint64_t RepeatAnimation.animate<A, B>(base:value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, double a10@<D0>, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t result;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  unint64_t v56[2];
  char v57;
  char v58;

  v52 = a1;
  v53 = a7;
  v43 = a4;
  v51 = a9;
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v43 - v18;
  v20 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v49 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a3 + 8);
  v24 = *(_BYTE *)(a3 + 16);
  v25 = *(_BYTE *)(a3 + 17);
  v56[0] = *(_QWORD *)a3;
  v56[1] = v23;
  v57 = v24;
  v58 = v25;
  v45 = type metadata accessor for AnimationContext(0, a6, a8, v26);
  v30 = AnimationContext.repeatState.getter(v45, v27, v28, v29);
  v32 = v31;
  v54 = v31;
  v55 = v30;
  v46 = a5;
  v33 = ((v31 & 0x8000000000000001) == 1) & (a5 >> 8);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(a11 + 16);
  v44 = a2;
  v50 = a8;
  v34(a2, a3, a6, a8, v53, a11, a10 - v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, a6) != 1)
  {
    v40 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v41 = v49;
    v40(v49, v19, a6);
    v39 = v51;
    if (v33)
    {
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v41, a6);
    }
    else
    {
      v40(v51, v41, a6);
    }
    goto LABEL_11;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v19, v48);
  if (!__OFADD__(v32, 1))
  {
    AnimationState.init()(v56);
    v36 = v56[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v36;
    v54 = v32 + 1;
    AnimationContext.repeatState.setter(v32 + 1, v45, a10, v37, v38);
    if ((v46 & 1) == 0)
    {
      swift_beginAccess();
      if (v54 >= v43)
      {
        v42 = 1;
        v39 = v51;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v39, v42, 1, a6);
      }
    }
    v39 = v51;
    if (v33)
      dispatch thunk of IteratorProtocol.next()();
    else
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v51, v44, a6);
LABEL_11:
    v42 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v39, v42, 1, a6);
  }
  __break(1u);
  return result;
}

double AnimationContext.repeatState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for RepeatState(0, v4, v5, a4);
  v8 = type metadata accessor for AnimationState(0, v4, v5, v7);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatState<A>, v6);
  AnimationState.subscript.getter(v6, v8, v6, v9);
  return v11;
}

uint64_t AnimationContext.repeatState.setter(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a1;
  *(double *)&v11[1] = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for RepeatState(0, v5, v6, a5);
  v9 = type metadata accessor for AnimationState(0, v5, v6, v8);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatState<A>, v7);
  return specialized AnimationState.subscript.setter((uint64_t)v11, v7, v9, v7);
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance RepeatAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>, double a9@<D0>)
{
  uint64_t v9;
  int v10;

  if (*(_BYTE *)(v9 + 9))
    v10 = 256;
  else
    v10 = 0;
  return RepeatAnimation.animate<A, B>(base:value:time:context:)(a1, a2, a3, *(_QWORD *)v9, v10 | *(unsigned __int8 *)(v9 + 8), a4, a5, a6, a8, a9, a7);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance RepeatAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  double v14;

  v4 = *(unsigned __int8 *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 9);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)v2;
  v12 = *(_BYTE *)(a1 + 40);
  v13 = swift_allocObject();
  v14 = (double)v11;
  if (v4)
    v14 = INFINITY;
  *(double *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v6;
  *(_QWORD *)(v13 + 40) = v7;
  *(_QWORD *)(v13 + 48) = v8;
  *(_QWORD *)(v13 + 56) = v9;
  *(_QWORD *)(v13 + 64) = v10;
  *(_BYTE *)(v13 + 72) = v12;
  *(_QWORD *)a2 = v13;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_BYTE *)(a2 + 40) = 9;
  return outlined copy of Animation.Function(v6, v7, v8, v9, v10, v12);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RepeatAnimation()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  Swift::UInt8 v3;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RepeatAnimation()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt v2;

  v1 = *(_BYTE *)(v0 + 9);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RepeatAnimation()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  Swift::UInt8 v3;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RepeatAnimation(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return *(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9) ^ 1u;
}

uint64_t Animation.repeatCount(_:autoreverses:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t *, ValueMetadata *, unint64_t);
  unint64_t v4;
  uint64_t v6;
  char v7;
  char v8;

  v6 = a1;
  v7 = 0;
  v8 = a2;
  v3 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t))(*(_QWORD *)a3 + 144);
  v4 = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  return v3(&v6, &type metadata for RepeatAnimation, v4);
}

uint64_t getEnumTagSinglePayload for RepeatAnimation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for RepeatAnimation()
{
  return &type metadata for RepeatAnimation;
}

uint64_t RepeatAnimation.encode(to:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;

  ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD **)(a1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  *(_QWORD *)(a1 + 24) = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if ((a3 & 1) == 0 && a2 != 0x8000000000000000)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
    }
    if ((a3 & 0x100) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance RepeatAnimation(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;

  if (*(_BYTE *)(v1 + 9))
    v2 = 256;
  else
    v2 = 0;
  return RepeatAnimation.encode(to:)(a1, *(_QWORD *)v1, v2 | *(unsigned __int8 *)(v1 + 8));
}

unint64_t instantiation function for generic protocol witness table for RepeatAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_235146FC4()
{
  uint64_t v0;

  outlined consume of Animation.Function(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject();
}

uint64_t type metadata accessor for RepeatState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepeatState);
}

uint64_t specialized static Animation.decodeRepeatMessage(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = a1[1];
  v4 = a1[2];
  if (v3 < v4)
  {
    v5 = 0;
    while (1)
    {
      v7 = a1[3];
      if (!v7)
        goto LABEL_11;
      v8 = a1[4];
      if (v3 >= v8)
        break;
LABEL_13:
      if (v7 >> 3 == 2)
      {
        if ((v7 & 7) != 0)
        {
          if ((v7 & 7) != 2)
            goto LABEL_39;
          v12 = ProtobufDecoder.decodeVarint()();
          if (v1)
            return v5;
          if (v12 < 0)
            goto LABEL_43;
          v13 = a1[1] + v12;
          if (v4 < v13)
          {
LABEL_39:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return v5;
          }
          a1[3] = 16;
          a1[4] = v13;
        }
        ProtobufDecoder.decodeVarint()();
        if (v1)
          return v5;
      }
      else if (v7 >> 3 == 1)
      {
        if ((v7 & 7) != 0)
        {
          if ((v7 & 7) != 2)
            goto LABEL_39;
          v9 = ProtobufDecoder.decodeVarint()();
          if (v1)
            return v5;
          if (v9 < 0)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            JUMPOUT(0x235147268);
          }
          v10 = a1[1] + v9;
          if (v4 < v10)
            goto LABEL_39;
          a1[3] = 8;
          a1[4] = v10;
        }
        v11 = ProtobufDecoder.decodeVarint()();
        if (v1)
          return v5;
        v5 = -(v11 & 1) ^ (v11 >> 1);
      }
      else
      {
        switch(v7 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            break;
          case 1uLL:
            v6 = a1[1] + 8;
            if (v4 >= v6)
              goto LABEL_5;
            goto LABEL_39;
          case 2uLL:
            v14 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            if (v14 < 0)
              goto LABEL_44;
            v6 = a1[1] + v14;
            if (v4 < v6)
              goto LABEL_39;
LABEL_5:
            a1[1] = v6;
            break;
          case 5uLL:
            v6 = a1[1] + 4;
            if (v4 < v6)
              goto LABEL_39;
            goto LABEL_5;
          default:
            goto LABEL_39;
        }
      }
      v3 = a1[1];
      v4 = a1[2];
      if (v3 >= v4)
      {
        a1[3] = 0;
        return v5;
      }
    }
    if (v8 < v3)
      goto LABEL_39;
    a1[3] = 0;
LABEL_11:
    v7 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return v5;
    if (v7 <= 7)
      goto LABEL_39;
    goto LABEL_13;
  }
  v5 = 0;
  a1[3] = 0;
  return v5;
}

uint64_t CatalogKey.init(_:)@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  char v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v14);
    swift_release_n();
    swift_release_n();
    v4 = v14;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v14);
    swift_release_n();
    result = swift_release_n();
    v6 = v14;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v13);
    if (v9)
      v4 = *(_BYTE *)(v9 + 72);
    else
      v4 = 0;
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey);
    BloomFilter.init(hashValue:)(v10);
    v11 = swift_retain_n();
    v12 = specialized find1<A>(_:key:filter:)(v11, v13);
    if (v12)
      v6 = *(_BYTE *)(v12 + 72);
    else
      v6 = 0;
    result = swift_release_n();
  }
  *a2 = v4;
  a2[1] = v6;
  return result;
}

BOOL static CatalogKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t EnvironmentValues.cuiAssetIdiom.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.cuiAssetSubtype.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

_OWORD *static CatalogAssetMatchType.defaultValue(idiom:)(uint64_t a1)
{
  _OWORD *result;

  if (a1 != 8)
    return &outlined read-only object #0 of static CatalogAssetMatchType.defaultValue(idiom:);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CatalogAssetMatchType>, (uint64_t)&type metadata for CatalogAssetMatchType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  result = (_OWORD *)swift_allocObject();
  result[1] = xmmword_2352828C0;
  *((_QWORD *)result + 4) = 8;
  *((_BYTE *)result + 40) = 0;
  *((_QWORD *)result + 6) = 1;
  *((_BYTE *)result + 56) = 1;
  return result;
}

uint64_t EnvironmentValues.cuiAssetMatchTypes.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_bridgeObjectRetain();
    swift_release_n();
    return v5;
  }
}

void CatalogKey.colorScheme.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *CatalogKey.colorScheme.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CatalogKey.colorScheme.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void CatalogKey.contrast.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *CatalogKey.contrast.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*CatalogKey.contrast.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::CatalogKey __swiftcall CatalogKey.init(colorScheme:contrast:)(SwiftUI::ColorScheme colorScheme, SwiftUI::ColorSchemeContrast contrast)
{
  _BYTE *v2;
  char v3;
  SwiftUI::CatalogKey result;

  v3 = *(_BYTE *)contrast;
  *v2 = *(_BYTE *)colorScheme;
  v2[1] = v3;
  result.colorScheme = colorScheme;
  return result;
}

void CatalogKey.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int CatalogKey.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CatalogKey()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CatalogKey()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CatalogKey()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  Hasher.init(_seed:)();
  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void CatalogKey.encode(to:)()
{
  _BYTE *v0;
  char v1;

  v1 = v0[1];
  if ((*v0 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((v1 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t CatalogKey.init(from:)@<X0>(unint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v10 = v3[4];
        if (v5 < v10)
          goto LABEL_14;
        if (v10 < v5)
          goto LABEL_40;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_40;
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_40;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_43;
          v12 = v3[1] + result;
          if (v6 < v12)
          {
LABEL_40:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v12;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v8 = result == 1;
      }
      else if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_40;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            JUMPOUT(0x2351479E0);
          }
          v11 = v3[1] + result;
          if (v6 < v11)
            goto LABEL_40;
          v3[3] = 8;
          v3[4] = v11;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result == 1;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            break;
          case 1uLL:
            v9 = v3[1] + 8;
            if (v6 >= v9)
              goto LABEL_6;
            goto LABEL_40;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_44;
            v9 = v3[1] + result;
            if (v6 < v9)
              goto LABEL_40;
LABEL_6:
            v3[1] = v9;
            break;
          case 5uLL:
            v9 = v3[1] + 4;
            if (v6 < v9)
              goto LABEL_40;
            goto LABEL_6;
          default:
            goto LABEL_40;
        }
      }
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v8 = 0;
  v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7;
  a2[1] = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CatalogKey()
{
  _BYTE *v0;
  int v1;

  v1 = v0[1];
  if (*v0 == 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CatalogKey@<X0>(unint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return CatalogKey.init(from:)(a1, a2);
}

uint64_t static CatalogAssetMatchType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CatalogAssetMatchType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t EnvironmentValues.cuiAssetIdiom.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.cuiAssetIdiom.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.cuiAssetIdiom.modify;
}

void EnvironmentValues.cuiAssetIdiom.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.cuiAssetIdiom.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    v7 = a3(v9, &v11);
  }
  result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t EnvironmentValues.cuiAssetSubtype.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.cuiAssetSubtype.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.cuiAssetSubtype.modify;
}

void EnvironmentValues.cuiAssetSubtype.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.cuiAssetIdiom.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.cuiAssetIdiom.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, _QWORD **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;

  v7 = *a1;
  v8 = (uint64_t *)(*a1)[4];
  v9 = **a1;
  v10 = *v8;
  swift_retain_n();
  if ((a2 & 1) != 0)
    v11 = (_QWORD **)(v7 + 2);
  else
    v11 = (_QWORD **)(v7 + 3);
  a3(v8, v9, v11);
  swift_release();
  if (v8[1])
  {
    v12 = *(_QWORD *)v7[4];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v7);
}

uint64_t key path getter for EnvironmentValues.cuiAssetMatchTypes : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
    swift_bridgeObjectRetain();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.cuiAssetMatchTypes.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.cuiAssetMatchTypes.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.cuiAssetMatchTypes.modify;
}

void EnvironmentValues.cuiAssetMatchTypes.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (uint64_t *)(*a1)[4];
  v5 = **a1;
  v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v7 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v8 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.CUIAssetMatchTypesKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static EnvironmentValues.CUIAssetMatchTypesKey.defaultValue;
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type CatalogKey and conformance CatalogKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CatalogKey and conformance CatalogKey;
  if (!lazy protocol witness table cache variable for type CatalogKey and conformance CatalogKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CatalogKey, &type metadata for CatalogKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CatalogKey and conformance CatalogKey);
  }
  return result;
}

uint64_t sub_23514826C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235148290(uint64_t *a1)
{
  return EnvironmentValues.cuiAssetIdiom.setter(*a1);
}

uint64_t sub_2351482B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2351482D8(uint64_t *a1)
{
  return EnvironmentValues.cuiAssetSubtype.setter(*a1);
}

uint64_t sub_235148300()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for CatalogKey(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23514837C + 4 * byte_2352CEB35[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_2351483B0 + 4 * byte_2352CEB30[v4]))();
}

uint64_t sub_2351483B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_2351483B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x2351483C0);
  return result;
}

uint64_t sub_2351483CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x2351483D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2351483D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_2351483E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CatalogKey()
{
  return &type metadata for CatalogKey;
}

ValueMetadata *type metadata accessor for CatalogAssetMatchType()
{
  return &type metadata for CatalogAssetMatchType;
}

uint64_t specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, unsigned int a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  int64_t v15;
  id v16;
  __int16 v20;
  char v21;
  uint64_t v22;
  void *v23;
  int v24;
  char *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  void *v70;
  void *v75;
  int v76;
  id v77;
  unsigned int v78;
  uint64_t v79;

  v15 = a5 >> 1;
  if (a5 >> 1 == a4)
    return 0;
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_60;
  }
  v20 = result;
  v21 = result & 1;
  v22 = a3 + 16 * a4;
  v23 = *(void **)v22;
  v24 = *(unsigned __int8 *)(v22 + 8);
  v77 = v23;
  v76 = v24;
  if (v23 != (void *)8)
    LOBYTE(v24) = 1;
  if ((result & 0x100) != 0)
  {
    if ((v24 & 1) != 0)
    {
      type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
      v25 = (char *)swift_allocObject();
      *((_OWORD *)v25 + 1) = xmmword_23528B7A0;
      v25[32] = v21;
      v25[33] = 1;
      v25[34] = v21;
      *(_WORD *)(v25 + 35) = 512;
      v25[37] = 1;
      v26 = v25 + 38;
      v27 = v25 + 39;
      goto LABEL_11;
    }
    v25 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
  else
  {
    if ((v24 & 1) != 0)
    {
      type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
      v25 = (char *)swift_allocObject();
      *((_OWORD *)v25 + 1) = xmmword_2352828C0;
      v25[32] = v21;
      v25[33] = 0;
      v26 = v25 + 34;
      v27 = v25 + 35;
LABEL_11:
      *v26 = 2;
      *v27 = 0;
      goto LABEL_14;
    }
    v25 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
LABEL_14:
  v79 = a8;
  v28 = a13;
  v29 = *((_QWORD *)v25 + 2);
  v70 = a7;
  if (!v29)
  {
    v57 = a14;
    v58 = a7;
    swift_bridgeObjectRetain();
    v59 = a10;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  v68 = v20;
  v69 = a2;
  v30 = v25[32];
  v67 = v15;
  v31 = v25[33];
  v32 = HIWORD(a11) & 1;
  v66 = a10;
  swift_bridgeObjectRetain();
  v65 = a14;
  v33 = a7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v29 + 1;
  v35 = 1;
  v36 = &selRef_bundleURL;
  v75 = v33;
LABEL_16:
  v37 = 0xD00000000000001BLL;
  if ((v31 & 1) != 0)
  {
    v38 = 0x80000002352E4500;
  }
  else
  {
    v37 = 0x7261657070414955;
    v38 = 0xEF796E4165636E61;
  }
  v39 = 0xD00000000000001DLL;
  if ((v31 & 1) != 0)
  {
    v40 = 0x80000002352E4560;
  }
  else
  {
    v39 = 0xD000000000000011;
    v40 = 0x80000002352E4580;
  }
  v41 = 0xD00000000000001CLL;
  if ((v31 & 1) != 0)
  {
    v42 = 0x80000002352E4520;
  }
  else
  {
    v41 = 0xD000000000000010;
    v42 = 0x80000002352E4540;
  }
  if ((v30 & 1) != 0)
  {
    v39 = v41;
    v40 = v42;
  }
  v43 = v30 == 2;
  if (v30 == 2)
    v44 = v37;
  else
    v44 = v39;
  if (v43)
    v45 = v38;
  else
    v45 = v40;
  v46 = (void *)MEMORY[0x23B7C5DAC](a8, a9);
  v47 = (void *)MEMORY[0x23B7C5DAC](v44, v45);
  v16 = objc_msgSend(v33, v36[470], v46, v32, a15, v47);

  if (!v16)
  {
    swift_bridgeObjectRelease();
    v48 = v35;
    goto LABEL_46;
  }
  v48 = v35;
  if (!v76)
  {
    swift_bridgeObjectRelease();
    if (objc_msgSend(v16, sel_idiom) == v77)
      goto LABEL_46;
LABEL_42:

    v16 = 0;
    goto LABEL_46;
  }
  if (!v77)
  {
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  v49 = objc_msgSend(v16, sel_appearance);
  if (!v49)
  {

    swift_bridgeObjectRelease();
    v16 = 0;
    goto LABEL_46;
  }
  v50 = v49;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = v52;

  if (v51 != v44 || v53 != v45)
  {
    v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v54 & 1) != 0)
      goto LABEL_46;
    goto LABEL_42;
  }
  swift_bridgeObjectRelease_n();
LABEL_46:
  v55 = v48;
  v28 = a13;
  while (v34 != ++v55)
  {
    if (!v16)
    {
      v32 = HIWORD(a11) & 1;
      v56 = &v25[2 * v48 + 32];
      v30 = *v56;
      v31 = v56[1];
      v35 = v55;
      a8 = v79;
      v33 = v75;
      v36 = &selRef_bundleURL;
      goto LABEL_16;
    }
  }
  result = swift_bridgeObjectRelease_n();
  a2 = v69;
  v20 = v68;
  v15 = v67;
  if (v16)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return (uint64_t)v16;
  }
LABEL_54:
  if (__OFSUB__(v15, a4))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v60 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v15 < v60)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v60 >= a4)
  {
    v78 = v20 & 0x101;
    v61 = a10;
    swift_bridgeObjectRetain();
    v62 = a14;
    v63 = v70;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v64 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v78, a2, a3, v60, a5, a6, v63, v79, a9, a10, a11 & 0x10101, a12, v28, a14, a15);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return v64;
  }
LABEL_63:
  __break(1u);
  return result;
}

id specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(__int16 a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, unsigned int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12)
{
  char v18;
  uint64_t v19;
  char v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char **v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  id v67;
  uint64_t v68;
  unsigned int v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  id v75;
  int v76;
  id v77;
  uint64_t v78;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v18 = a1 & 1;
  v19 = a2 + 32;
  v75 = *(id *)(a2 + 32);
  v76 = *(unsigned __int8 *)(a2 + 40);
  if (v75 == (id)8)
    v20 = *(_BYTE *)(a2 + 40);
  else
    v20 = 1;
  v68 = *(_QWORD *)(a2 + 16);
  if ((a1 & 0x100) != 0)
  {
    if ((v20 & 1) == 0)
    {
      v21 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
    v21 = (char *)swift_allocObject();
    *((_OWORD *)v21 + 1) = xmmword_23528B7A0;
    v21[32] = v18;
    v21[33] = 1;
    v21[34] = v18;
    *(_WORD *)(v21 + 35) = 512;
    v21[37] = 1;
    v22 = v21 + 38;
    v23 = v21 + 39;
  }
  else
  {
    if ((v20 & 1) == 0)
    {
      v21 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
    v21 = (char *)swift_allocObject();
    *((_OWORD *)v21 + 1) = xmmword_2352828C0;
    v21[32] = v18;
    v21[33] = 0;
    v22 = v21 + 34;
    v23 = v21 + 35;
  }
  *v22 = 2;
  *v23 = 0;
LABEL_14:
  v78 = a5;
  v25 = *((_QWORD *)v21 + 2);
  v72 = a7;
  v73 = a3;
  v71 = v19;
  v70 = a8;
  if (!v25)
  {
    v54 = a2;
    v55 = a10;
    v49 = a11;
    v56 = a4;
    swift_bridgeObjectRetain();
    v57 = a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v58 = v57;
    goto LABEL_54;
  }
  v26 = v21[32];
  v66 = v21 + 32;
  v27 = v21[33];
  v63 = a2;
  v67 = a7;
  swift_bridgeObjectRetain();
  v77 = a11;
  v64 = a4;
  v28 = a4;
  v29 = HIWORD(a8) & 1;
  v30 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = v25 + 1;
  v32 = 1;
  v33 = &selRef_bundleURL;
  v65 = v29;
  v74 = v30;
LABEL_16:
  v34 = 0xD00000000000001BLL;
  if ((v27 & 1) != 0)
  {
    v35 = 0x80000002352E4500;
  }
  else
  {
    v34 = 0x7261657070414955;
    v35 = 0xEF796E4165636E61;
  }
  v36 = 0xD00000000000001DLL;
  if ((v27 & 1) != 0)
  {
    v37 = 0x80000002352E4560;
  }
  else
  {
    v36 = 0xD000000000000011;
    v37 = 0x80000002352E4580;
  }
  v38 = 0xD00000000000001CLL;
  if ((v27 & 1) != 0)
  {
    v39 = 0x80000002352E4520;
  }
  else
  {
    v38 = 0xD000000000000010;
    v39 = 0x80000002352E4540;
  }
  if ((v26 & 1) != 0)
  {
    v36 = v38;
    v37 = v39;
  }
  if (v26 == 2)
    v40 = v34;
  else
    v40 = v36;
  if (v26 == 2)
    v41 = v35;
  else
    v41 = v37;
  v42 = (void *)MEMORY[0x23B7C5DAC](a5, a6);
  v43 = (void *)MEMORY[0x23B7C5DAC](v40, v41);
  v24 = objc_msgSend(v30, v33[470], v42, v29, a12, v43);

  if (!v24)
    goto LABEL_40;
  if (!v76)
  {
    swift_bridgeObjectRelease();
    v49 = v77;
    if (objc_msgSend(v24, sel_idiom) == v75)
      goto LABEL_45;
    goto LABEL_42;
  }
  if (!v75)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    v49 = v77;
    goto LABEL_45;
  }
  v44 = objc_msgSend(v24, sel_appearance);
  if (!v44)
  {

    swift_bridgeObjectRelease();
    v24 = 0;
    v49 = v77;
    goto LABEL_45;
  }
  v45 = v44;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  if (v46 == v40 && v48 == v41)
  {
    swift_bridgeObjectRelease_n();
    v49 = v77;
    goto LABEL_45;
  }
  v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = v77;
  if ((v50 & 1) == 0)
  {
LABEL_42:

    v24 = 0;
  }
LABEL_45:
  v51 = v32;
  while (v31 != ++v51)
  {
    if (!v24)
    {
      v29 = v65;
      v52 = &v66[2 * v32];
      v26 = *v52;
      v27 = v52[1];
      v32 = v51;
      a5 = v78;
      v30 = v74;
      v33 = &selRef_bundleURL;
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease_n();
  if (v24)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return v24;
  }
  v54 = v63;
  a4 = v64;
  v58 = v67;
  v55 = a10;
LABEL_54:
  v59 = v58;
  swift_bridgeObjectRetain();
  v60 = v49;
  v61 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(a1 & 0x101, v54, v71, 1, (2 * v68) | 1, v73, v61, v78, a6, v72, v70 & 0x10101, a9, v55, a11, a12);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return (id)v62;
}

void type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>)
  {
    type metadata accessor for (ColorScheme?, ColorSchemeContrast)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.CUIAsssetIdiomKey()
{
  return &type metadata for EnvironmentValues.CUIAsssetIdiomKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.CUIAssetSubtypeKey()
{
  return &type metadata for EnvironmentValues.CUIAssetSubtypeKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.CUIAssetMatchTypesKey()
{
  return &type metadata for EnvironmentValues.CUIAssetMatchTypesKey;
}

uint64_t key path getter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle()
{
  return Duration.UnitsFormatStyle.unitWidth.getter();
}

uint64_t key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDD0AB8], (uint64_t (*)(char *))MEMORY[0x24BDD0AD8]);
}

uint64_t key path getter for Duration.UnitsFormatStyle.allowedUnits : Duration.UnitsFormatStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Duration.UnitsFormatStyle.allowedUnits.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for Duration.UnitsFormatStyle.allowedUnits : Duration.UnitsFormatStyle()
{
  swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.allowedUnits.setter();
}

uint64_t key path getter for Date.FormatStyle.calendar : Date.FormatStyle()
{
  return Date.FormatStyle.calendar.getter();
}

uint64_t key path setter for Date.FormatStyle.calendar : Date.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCE260]);
}

uint64_t key path getter for Date.VerbatimFormatStyle.calendar : Date.VerbatimFormatStyle()
{
  return Date.VerbatimFormatStyle.calendar.getter();
}

uint64_t key path setter for Date.VerbatimFormatStyle.calendar : Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCE598]);
}

void static Date.FormatStyle.representation<A>(of:for:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = type metadata accessor for Date.FormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, v1, MEMORY[0x24BDCDFC8]);
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_2351491C8(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 144) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v4 - 136) = a1;
  MEMORY[0x24BDAC7A8](a1);
  v5 = *v1;
  v6 = type metadata accessor for Date.FormatStyle();
  v7 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE288]);
  if (v5 <= 1)
  {
    *(_QWORD *)(v4 - 120) = v3;
    *(_QWORD *)(v4 - 112) = v6;
    *(_QWORD *)(v4 - 104) = v2;
    *(_QWORD *)(v4 - 96) = v7;
    *(_QWORD *)(v4 - 88) = &protocol witness table for String;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v6;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v7;
  *(_QWORD *)(v4 - 88) = &protocol witness table for String;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_2351492E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 128), a1);
  JUMPOUT(0x235149314);
}

void static Date.FormatStyle.Attributed.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  _QWORD v25[6];
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _UNKNOWN **v40;

  v32 = a3;
  v33 = a4;
  v34 = a1;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v31 = (char *)v25 - v8;
  v30 = type metadata accessor for TimeZone();
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v27 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v28 = (char *)v25 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v35 = (char *)v25 - v13;
  v26 = type metadata accessor for Calendar();
  v25[3] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25[2] = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v25[5] = (char *)v25 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v25[4] = (char *)v25 - v18;
  v19 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v22 = type metadata accessor for Date.FormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v22);
  LODWORD(a2) = *a2;
  v24 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, v23, MEMORY[0x24BDCDFC8]);
  if ((int)a2 <= 1)
  {
    v25[1] = a5;
    v36 = v32;
    v37 = v22;
    v38 = v33;
    v39 = v24;
    v40 = &protocol witness table for AttributedString;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v36 = v32;
  v37 = v22;
  v38 = v33;
  v39 = v24;
  v40 = &protocol witness table for AttributedString;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_235149A0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 240), a1);
  JUMPOUT(0x235149A38);
}

uint64_t sub_235149A74()
{
  return Date.FormatStyle.locale.getter();
}

uint64_t sub_235149A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCE220]);
}

uint64_t sub_235149AB8()
{
  return Date.FormatStyle.calendar.getter();
}

uint64_t sub_235149AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCE260]);
}

uint64_t key path getter for Date.FormatStyle.timeZone : Date.FormatStyle()
{
  return Date.FormatStyle.timeZone.getter();
}

uint64_t sub_235149B1C()
{
  return Date.FormatStyle.timeZone.getter();
}

uint64_t key path setter for Date.FormatStyle.timeZone : Date.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], MEMORY[0x24BDCE270]);
}

uint64_t sub_235149B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], MEMORY[0x24BDCE270]);
}

uint64_t Date.FormatStyle.Attributed.template()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  void (*v87)(void);
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  char v104;
  Swift::String v105;
  char *v106;
  uint64_t v107;
  Swift::String v108;
  char *v109;
  uint64_t v110;
  Swift::String v111;
  char *v112;
  Swift::String v113;
  char *v114;
  uint64_t v115;
  Swift::String v116;
  char *v117;
  Swift::String v118;
  char *v119;
  uint64_t v120;
  Swift::String v121;
  char *v122;
  uint64_t v123;
  Swift::String v124;
  char *v125;
  Swift::String v126;
  char *v127;
  uint64_t v128;
  Swift::String v129;
  char *v130;
  Swift::String v131;
  char *v132;
  Swift::String v133;
  char *v134;
  Swift::String v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t);
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;

  v183 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  v187 = *(_QWORD *)(v183 - 8);
  MEMORY[0x24BDAC7A8](v183);
  v182 = (char *)&v136 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  v156 = *(_QWORD *)(v180 - 8);
  MEMORY[0x24BDAC7A8](v180);
  v179 = (char *)&v136 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  v154 = *(_QWORD *)(v178 - 8);
  MEMORY[0x24BDAC7A8](v178);
  v177 = (char *)&v136 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for Date.FormatStyle.Symbol.Hour();
  v153 = *(_QWORD *)(v176 - 8);
  MEMORY[0x24BDAC7A8](v176);
  v175 = (char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for Date.FormatStyle.Symbol.Minute();
  v152 = *(_QWORD *)(v174 - 8);
  MEMORY[0x24BDAC7A8](v174);
  v173 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for Date.FormatStyle.Symbol.Second();
  v151 = *(_QWORD *)(v172 - 8);
  MEMORY[0x24BDAC7A8](v172);
  v171 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for Date.FormatStyle.Symbol.TimeZone();
  v149 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v169 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  v148 = *(_QWORD *)(v168 - 8);
  MEMORY[0x24BDAC7A8](v168);
  v167 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for Date.FormatStyle.Symbol.SecondFraction();
  v147 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v165 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for Date.FormatStyle.Symbol.DayOfYear();
  v146 = *(_QWORD *)(v164 - 8);
  MEMORY[0x24BDAC7A8](v164);
  v163 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for Date.FormatStyle.Symbol.Week();
  v145 = *(_QWORD *)(v162 - 8);
  MEMORY[0x24BDAC7A8](v162);
  v161 = (char *)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for Date.FormatStyle.Symbol.Quarter();
  v142 = *(char **)(v160 - 8);
  MEMORY[0x24BDAC7A8](v160);
  v12 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for Date.FormatStyle.Symbol.Era();
  v157 = *(void (**)(char *, uint64_t))(v185 - 8);
  MEMORY[0x24BDAC7A8](v185);
  v14 = (char *)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date.FormatStyle.Attributed();
  v139 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v181 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v184 = (char *)&v136 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v150 = (char *)&v136 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v158 = (char *)&v136 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v136 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v136 - v27;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v136 - v30;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v136 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v136 - v36;
  MEMORY[0x24BDAC7A8](v38);
  v138 = (char *)&v136 - v39;
  MEMORY[0x24BDAC7A8](v40);
  v140 = (char *)&v136 - v41;
  MEMORY[0x24BDAC7A8](v42);
  v141 = (char *)&v136 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v143 = (char *)&v136 - v45;
  MEMORY[0x24BDAC7A8](v46);
  v144 = (char *)&v136 - v47;
  MEMORY[0x24BDAC7A8](v48);
  v159 = (char *)&v136 - v49;
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)&v136 - v51;
  v54 = MEMORY[0x24BDAC7A8](v53);
  v186 = (char *)&v136 - v55;
  MEMORY[0x23B7C4B7C](v54);
  Date.FormatStyle.Attributed.era(_:)();
  v56 = (void (*)(char *, uint64_t))*((_QWORD *)v157 + 1);
  v155 = v14;
  v157 = v56;
  v56(v14, v185);
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.quarter(_:)();
  v57 = (void (*)(char *, uint64_t))*((_QWORD *)v142 + 1);
  v142 = v12;
  v137 = v57;
  v57(v12, v160);
  v58 = v139;
  v59 = *(uint64_t (**)(char *, uint64_t))(v139 + 8);
  v60 = v59(v25, v15);
  v61 = v161;
  MEMORY[0x23B7C4C00](v60);
  Date.FormatStyle.Attributed.week(_:)();
  v62 = v61;
  v63 = *(void (**)(char *, uint64_t))(v145 + 8);
  v63(v62, v162);
  v64 = v59(v28, v15);
  v65 = v163;
  MEMORY[0x23B7C4D50](v64);
  Date.FormatStyle.Attributed.dayOfYear(_:)();
  v145 = *(_QWORD *)(v146 + 8);
  ((void (*)(char *, uint64_t))v145)(v65, v164);
  v59(v31, v15);
  v66 = v165;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  Date.FormatStyle.Attributed.secondFraction(_:)();
  v146 = *(_QWORD *)(v147 + 8);
  ((void (*)(char *, uint64_t))v146)(v66, v166);
  v67 = v59(v34, v15);
  v68 = v167;
  MEMORY[0x23B7C4D20](v67);
  v69 = v138;
  Date.FormatStyle.Attributed.weekday(_:)();
  v147 = *(_QWORD *)(v148 + 8);
  ((void (*)(char *, uint64_t))v147)(v68, v168);
  v59(v37, v15);
  v70 = v169;
  static Date.FormatStyle.Symbol.TimeZone.omitted.getter();
  v71 = v140;
  Date.FormatStyle.Attributed.timeZone(_:)();
  v148 = *(_QWORD *)(v149 + 8);
  ((void (*)(char *, uint64_t))v148)(v70, v170);
  v72 = v59(v69, v15);
  v73 = v171;
  MEMORY[0x23B7C4CC0](v72);
  v74 = v141;
  Date.FormatStyle.Attributed.second(_:)();
  v149 = *(_QWORD *)(v151 + 8);
  ((void (*)(char *, uint64_t))v149)(v73, v172);
  v75 = v59(v71, v15);
  v76 = v173;
  MEMORY[0x23B7C4C9C](v75);
  v77 = v143;
  Date.FormatStyle.Attributed.minute(_:)();
  v151 = *(_QWORD *)(v152 + 8);
  ((void (*)(char *, uint64_t))v151)(v76, v174);
  v59(v74, v15);
  v78 = v175;
  static Date.FormatStyle.Symbol.Hour.omitted.getter();
  v79 = v144;
  Date.FormatStyle.Attributed.hour(_:)();
  v152 = *(_QWORD *)(v153 + 8);
  ((void (*)(char *, uint64_t))v152)(v78, v176);
  v80 = v59(v77, v15);
  v81 = v177;
  MEMORY[0x23B7C4B58](v80);
  v82 = v159;
  Date.FormatStyle.Attributed.day(_:)();
  v153 = *(_QWORD *)(v154 + 8);
  ((void (*)(char *, uint64_t))v153)(v81, v178);
  v59(v79, v15);
  v83 = v179;
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.month(_:)();
  v154 = *(_QWORD *)(v156 + 8);
  ((void (*)(char *, uint64_t))v154)(v83, v180);
  v59(v82, v15);
  v84 = v182;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  v85 = v186;
  Date.FormatStyle.Attributed.year(_:)();
  v156 = *(_QWORD *)(v187 + 8);
  ((void (*)(char *, uint64_t))v156)(v84, v183);
  v59(v52, v15);
  v187 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDFD8], MEMORY[0x24BDCDFE8]);
  v86 = v85;
  LOBYTE(v84) = dispatch thunk of static Equatable.== infix(_:_:)();
  v87 = *(void (**)(void))(v58 + 16);
  v88 = v158;
  v87();
  v89 = v150;
  v90 = ((uint64_t (*)(void))v87)();
  if ((v84 & 1) != 0)
  {
    v59(v89, v15);
    v59(v88, v15);
    ((void (*)(char *))v87)(v184);
    ((void (*)(char *, char *, uint64_t))v87)(v181, v86, v15);
    v91 = v155;
LABEL_6:
    v59(v181, v15);
    v102 = v59(v184, v15);
    goto LABEL_7;
  }
  v144 = (char *)v63;
  v92 = v155;
  MEMORY[0x23B7C4B70](v90);
  v93 = v159;
  Date.FormatStyle.Attributed.era(_:)();
  v94 = v185;
  v95 = v157;
  v96 = ((uint64_t (*)(char *, uint64_t))v157)(v92, v185);
  MEMORY[0x23B7C4B7C](v96);
  Date.FormatStyle.Attributed.era(_:)();
  v95(v92, v94);
  v59(v93, v15);
  LOBYTE(v94) = static Date.FormatStyle.Attributed.== infix(_:_:)();
  v59(v52, v15);
  v59(v89, v15);
  v59(v158, v15);
  ((void (*)(char *))v87)(v184);
  ((void (*)(char *, char *, uint64_t))v87)(v181, v186, v15);
  v91 = v92;
  v63 = (void (*)(char *, uint64_t))v144;
  if ((v94 & 1) == 0)
    goto LABEL_6;
  v97 = v182;
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
  v98 = v159;
  Date.FormatStyle.Attributed.year(_:)();
  v99 = v183;
  v100 = (void (*)(char *, uint64_t))v156;
  ((void (*)(char *, uint64_t))v156)(v97, v183);
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  Date.FormatStyle.Attributed.year(_:)();
  v63 = (void (*)(char *, uint64_t))v144;
  v100(v97, v99);
  v59(v98, v15);
  v101 = v181;
  LOBYTE(v99) = static Date.FormatStyle.Attributed.== infix(_:_:)();
  v59(v52, v15);
  v59(v101, v15);
  v102 = v59(v184, v15);
  if ((v99 & 1) != 0)
  {
    v59(v186, v15);
    return 0x594D646D6D6ALL;
  }
LABEL_7:
  v188 = 0;
  v189 = 0xE000000000000000;
  MEMORY[0x23B7C4B7C](v102);
  Date.FormatStyle.Attributed.era(_:)();
  v157(v91, v185);
  v104 = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v15);
  if ((v104 & 1) == 0)
  {
    v105._countAndFlagsBits = 71;
    v105._object = (void *)0xE100000000000000;
    String.append(_:)(v105);
  }
  v106 = v142;
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.quarter(_:)();
  v137(v106, v160);
  LOBYTE(v106) = dispatch thunk of static Equatable.== infix(_:_:)();
  v107 = v59(v52, v15);
  if ((v106 & 1) == 0)
  {
    v108._countAndFlagsBits = 5329233;
    v108._object = (void *)0xE300000000000000;
    String.append(_:)(v108);
  }
  v109 = v161;
  MEMORY[0x23B7C4C00](v107);
  Date.FormatStyle.Attributed.week(_:)();
  v63(v109, v162);
  LOBYTE(v109) = dispatch thunk of static Equatable.== infix(_:_:)();
  v110 = v59(v52, v15);
  if ((v109 & 1) == 0)
  {
    v111._countAndFlagsBits = 119;
    v111._object = (void *)0xE100000000000000;
    String.append(_:)(v111);
  }
  v112 = v163;
  MEMORY[0x23B7C4D50](v110);
  Date.FormatStyle.Attributed.dayOfYear(_:)();
  ((void (*)(char *, uint64_t))v145)(v112, v164);
  LOBYTE(v112) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v15);
  if ((v112 & 1) == 0)
  {
    v113._countAndFlagsBits = 68;
    v113._object = (void *)0xE100000000000000;
    String.append(_:)(v113);
  }
  v114 = v165;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  Date.FormatStyle.Attributed.secondFraction(_:)();
  ((void (*)(char *, uint64_t))v146)(v114, v166);
  LOBYTE(v114) = dispatch thunk of static Equatable.== infix(_:_:)();
  v115 = v59(v52, v15);
  if ((v114 & 1) == 0)
  {
    v116._countAndFlagsBits = 83;
    v116._object = (void *)0xE100000000000000;
    String.append(_:)(v116);
  }
  v117 = v167;
  MEMORY[0x23B7C4D20](v115);
  Date.FormatStyle.Attributed.weekday(_:)();
  ((void (*)(char *, uint64_t))v147)(v117, v168);
  LOBYTE(v117) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v15);
  if ((v117 & 1) == 0)
  {
    v118._countAndFlagsBits = 4539717;
    v118._object = (void *)0xE300000000000000;
    String.append(_:)(v118);
  }
  v119 = v169;
  static Date.FormatStyle.Symbol.TimeZone.omitted.getter();
  Date.FormatStyle.Attributed.timeZone(_:)();
  ((void (*)(char *, uint64_t))v148)(v119, v170);
  LOBYTE(v119) = dispatch thunk of static Equatable.== infix(_:_:)();
  v120 = v59(v52, v15);
  if ((v119 & 1) == 0)
  {
    v121._countAndFlagsBits = 118;
    v121._object = (void *)0xE100000000000000;
    String.append(_:)(v121);
  }
  v122 = v171;
  MEMORY[0x23B7C4CC0](v120);
  Date.FormatStyle.Attributed.second(_:)();
  ((void (*)(char *, uint64_t))v149)(v122, v172);
  LOBYTE(v122) = dispatch thunk of static Equatable.== infix(_:_:)();
  v123 = v59(v52, v15);
  if ((v122 & 1) == 0)
  {
    v124._countAndFlagsBits = 29555;
    v124._object = (void *)0xE200000000000000;
    String.append(_:)(v124);
  }
  v125 = v173;
  MEMORY[0x23B7C4C9C](v123);
  Date.FormatStyle.Attributed.minute(_:)();
  ((void (*)(char *, uint64_t))v151)(v125, v174);
  LOBYTE(v125) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v15);
  if ((v125 & 1) == 0)
  {
    v126._countAndFlagsBits = 28013;
    v126._object = (void *)0xE200000000000000;
    String.append(_:)(v126);
  }
  v127 = v175;
  static Date.FormatStyle.Symbol.Hour.omitted.getter();
  Date.FormatStyle.Attributed.hour(_:)();
  ((void (*)(char *, uint64_t))v152)(v127, v176);
  LOBYTE(v127) = dispatch thunk of static Equatable.== infix(_:_:)();
  v128 = v59(v52, v15);
  if ((v127 & 1) == 0)
  {
    v129._countAndFlagsBits = 106;
    v129._object = (void *)0xE100000000000000;
    String.append(_:)(v129);
  }
  v130 = v177;
  MEMORY[0x23B7C4B58](v128);
  Date.FormatStyle.Attributed.day(_:)();
  ((void (*)(char *, uint64_t))v153)(v130, v178);
  LOBYTE(v130) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v15);
  if ((v130 & 1) == 0)
  {
    v131._countAndFlagsBits = 100;
    v131._object = (void *)0xE100000000000000;
    String.append(_:)(v131);
  }
  v132 = v179;
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.month(_:)();
  ((void (*)(char *, uint64_t))v154)(v132, v180);
  LOBYTE(v132) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v15);
  if ((v132 & 1) == 0)
  {
    v133._countAndFlagsBits = 77;
    v133._object = (void *)0xE100000000000000;
    String.append(_:)(v133);
  }
  v134 = v182;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  Date.FormatStyle.Attributed.year(_:)();
  ((void (*)(char *, uint64_t))v156)(v134, v183);
  LOBYTE(v134) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v15);
  if ((v134 & 1) == 0)
  {
    v135._countAndFlagsBits = 1499027801;
    v135._object = (void *)0xE400000000000000;
    String.append(_:)(v135);
  }
  v59(v186, v15);
  return v188;
}

void static Date.VerbatimFormatStyle.representation<A>(of:for:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = type metadata accessor for Date.VerbatimFormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, v1, MEMORY[0x24BDCE558]);
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514AEA4(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 144) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v4 - 136) = a1;
  MEMORY[0x24BDAC7A8](a1);
  v5 = *v1;
  v6 = type metadata accessor for Date.VerbatimFormatStyle();
  v7 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE5C0], MEMORY[0x24BDCE5B0]);
  if (v5 <= 1)
  {
    *(_QWORD *)(v4 - 120) = v3;
    *(_QWORD *)(v4 - 112) = v6;
    *(_QWORD *)(v4 - 104) = v2;
    *(_QWORD *)(v4 - 96) = v7;
    *(_QWORD *)(v4 - 88) = &protocol witness table for String;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v6;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v7;
  *(_QWORD *)(v4 - 88) = &protocol witness table for String;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514AFC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 128), a1);
  JUMPOUT(0x23514AFF0);
}

void static Date.VerbatimFormatStyle.Attributed.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  _QWORD v30[5];
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;

  v38 = a3;
  v39 = a4;
  v40 = a1;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)v30 - v9;
  v36 = type metadata accessor for TimeZone();
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v32 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v34 = (char *)v30 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v33 = (char *)v30 - v14;
  v31 = type metadata accessor for Calendar();
  v30[4] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v30[3] = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v42 = (char *)v30 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v41 = (char *)v30 - v19;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], v7);
  MEMORY[0x24BDAC7A8](v20);
  v21 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v22);
  v30[2] = (char *)v30 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v30[1] = (char *)v30 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v27 = type metadata accessor for Date.VerbatimFormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v27);
  LODWORD(a2) = *a2;
  v29 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, v28, MEMORY[0x24BDCE558]);
  if ((int)a2 <= 1)
  {
    v30[0] = a5;
    v43 = v38;
    v44 = v27;
    v45 = v39;
    v46 = v29;
    v47 = &protocol witness table for AttributedString;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v43 = v38;
  v44 = v27;
  v45 = v39;
  v46 = v29;
  v47 = &protocol witness table for AttributedString;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514B41C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 240), a1);
  JUMPOUT(0x23514B7E4);
}

uint64_t sub_23514B820()
{
  return Date.VerbatimFormatStyle.locale.getter();
}

uint64_t key path setter for Date.VerbatimFormatStyle.locale : Date.VerbatimFormatStyle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of Locale?(a1, (uint64_t)&v5 - v3);
  return Date.VerbatimFormatStyle.locale.setter();
}

uint64_t sub_23514B8CC()
{
  return Date.VerbatimFormatStyle.calendar.getter();
}

uint64_t sub_23514B8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCE598]);
}

uint64_t key path getter for Date.VerbatimFormatStyle.timeZone : Date.VerbatimFormatStyle()
{
  return Date.VerbatimFormatStyle.timeZone.getter();
}

uint64_t sub_23514B930()
{
  return Date.VerbatimFormatStyle.timeZone.getter();
}

uint64_t key path setter for Date.VerbatimFormatStyle.timeZone : Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], MEMORY[0x24BDCE5A8]);
}

uint64_t sub_23514B964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], MEMORY[0x24BDCE5A8]);
}

uint64_t Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for Date.VerbatimFormatStyle.Attributed();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE568], MEMORY[0x24BDCE578]);
  v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v2 = v1;
  swift_release();
  lazy protocol witness table accessor for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  return v4;
}

void static Date.ComponentsFormatStyle.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  _QWORD v38[9];
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _UNKNOWN **v64;

  v58 = a4;
  v59 = a1;
  v39 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  v38[6] = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v38[7] = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v38[8] = (char *)v38 - v10;
  type metadata accessor for Range<Date>();
  v52 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Date();
  v51 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v40 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v54 = (char *)v38 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v55 = (char *)v38 - v17;
  v50 = type metadata accessor for Calendar();
  v42 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v49 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v41 = (char *)v38 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v44 = (char *)v38 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v43 = (char *)v38 - v24;
  v57 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v57);
  v48 = (char *)v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  MEMORY[0x24BDAC7A8](v27);
  MEMORY[0x24BDAC7A8](v28);
  v29 = type metadata accessor for Date.ComponentsFormatStyle();
  MEMORY[0x24BDAC7A8](v29);
  v45 = (char *)v38 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v46 = (char *)v38 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v47 = (char *)v38 - v34;
  MEMORY[0x24BDAC7A8](v35);
  LODWORD(a2) = *a2;
  v37 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, v36, MEMORY[0x24BDCE750]);
  if ((int)a2 <= 1)
  {
    v38[5] = a5;
    v38[4] = a3;
    v60 = a3;
    v61 = v29;
    v62 = v58;
    v63 = v37;
    v64 = &protocol witness table for String;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v60 = a3;
  v61 = v29;
  v62 = v58;
  v63 = v37;
  v64 = &protocol witness table for String;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void static Date.AnchoredRelativeFormatStyle.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _UNKNOWN **v37;

  v30 = a3;
  v31 = a4;
  v32 = a1;
  v7 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v26 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v27 = (char *)v23 - v11;
  v24 = type metadata accessor for Calendar();
  v23[2] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23[1] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v23[4] = (char *)v23 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v23[3] = (char *)v23 - v16;
  v17 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v19);
  v20 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  MEMORY[0x24BDAC7A8](v20);
  LODWORD(a2) = *a2;
  v22 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, v21, MEMORY[0x24BDCE818]);
  if ((int)a2 <= 1)
  {
    v23[0] = a5;
    v33 = v30;
    v34 = v20;
    v35 = v31;
    v36 = v22;
    v37 = &protocol witness table for String;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v33 = v30;
  v34 = v20;
  v35 = v31;
  v36 = v22;
  v37 = &protocol witness table for String;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void static Duration.TimeFormatStyle.representation<A>(of:for:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, v1, MEMORY[0x24BDD0848]);
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514CECC(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 144) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v4 - 136) = a1;
  MEMORY[0x24BDAC7A8](a1);
  v5 = *v1;
  v6 = type metadata accessor for Duration.TimeFormatStyle();
  v7 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDD08D0], MEMORY[0x24BDD08C0]);
  if (v5 <= 1)
  {
    *(_QWORD *)(v4 - 120) = v3;
    *(_QWORD *)(v4 - 112) = v6;
    *(_QWORD *)(v4 - 104) = v2;
    *(_QWORD *)(v4 - 96) = v7;
    *(_QWORD *)(v4 - 88) = &protocol witness table for String;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v6;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v7;
  *(_QWORD *)(v4 - 88) = &protocol witness table for String;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514CFEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 128), a1);
  JUMPOUT(0x23514D018);
}

void static Duration.TimeFormatStyle.Attributed.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  _QWORD v29[12];
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _UNKNOWN **v48;

  v41 = a4;
  v42 = a1;
  v8 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v8);
  v29[8] = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Duration.TimeFormatStyle.Pattern();
  v33 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v39 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Duration.TimeFormatStyle();
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v29[7] = (char *)v29 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v34 = (char *)v29 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v35 = (char *)v29 - v17;
  v31 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x24BDAC7A8](v31);
  v29[11] = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for AttributedString();
  v29[10] = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29[9] = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v43);
  v29[6] = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v32 = (char *)v29 - v22;
  MEMORY[0x24BDAC7A8](v23);
  MEMORY[0x24BDAC7A8](v24);
  MEMORY[0x24BDAC7A8](v25);
  v26 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v26);
  LODWORD(a2) = *a2;
  v28 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, v27, MEMORY[0x24BDD0848]);
  if ((int)a2 <= 1)
  {
    v29[1] = a5;
    v29[5] = a3;
    v44 = a3;
    v45 = v26;
    v46 = v41;
    v47 = v28;
    v48 = &protocol witness table for AttributedString;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v44 = a3;
  v45 = v26;
  v46 = v41;
  v47 = v28;
  v48 = &protocol witness table for AttributedString;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514D64C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 248), a1);
  JUMPOUT(0x23514D9E0);
}

void static Duration.UnitsFormatStyle.representation<A>(of:for:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, v1, MEMORY[0x24BDD0950]);
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514DACC(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 144) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v4 - 136) = a1;
  MEMORY[0x24BDAC7A8](a1);
  v5 = *v1;
  v6 = type metadata accessor for Duration.UnitsFormatStyle();
  v7 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AF0], MEMORY[0x24BDD0AE0]);
  if (v5 <= 1)
  {
    *(_QWORD *)(v4 - 120) = v3;
    *(_QWORD *)(v4 - 112) = v6;
    *(_QWORD *)(v4 - 104) = v2;
    *(_QWORD *)(v4 - 96) = v7;
    *(_QWORD *)(v4 - 88) = &protocol witness table for String;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v6;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v7;
  *(_QWORD *)(v4 - 88) = &protocol witness table for String;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_23514DBEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 128), a1);
  JUMPOUT(0x23514DC18);
}

void static Duration.UnitsFormatStyle.Attributed.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v25 = a1;
  v9 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v23[9] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23[10] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v23[11] = (char *)v23 - v14;
  v15 = type metadata accessor for Locale();
  v23[6] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  v23[8] = (char *)v23 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v23[7] = (char *)v23 - v19;
  v20 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  MEMORY[0x24BDAC7A8](v20);
  LODWORD(a2) = *a2;
  v22 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, v21, MEMORY[0x24BDD0950]);
  if ((int)a2 <= 1)
  {
    v23[4] = v11;
    v23[5] = a5;
    v23[1] = a3;
    v26 = a3;
    v27 = v20;
    v23[2] = a4;
    v28 = a4;
    v29 = v22;
    v30 = &protocol witness table for AttributedString;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v26 = a3;
  v27 = v20;
  v28 = a4;
  v29 = v22;
  v30 = &protocol witness table for AttributedString;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

uint64_t key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return 0x615074616D726F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x615074616D726F66 && a2 == 0xED00006E72657474)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;

  v15 = a2;
  type metadata accessor for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>, (void (*)(void))lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v15;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *v9 = v10;
  v9[1] = v12;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = specialized init(from:) in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t outlined destroy of Range<Date>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23514E648()
{
  return Duration.TimeFormatStyle.locale.getter();
}

uint64_t sub_23514E668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], MEMORY[0x24BDD0870]);
}

uint64_t sub_23514E68C()
{
  return Duration.UnitsFormatStyle.locale.getter();
}

uint64_t sub_23514E6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], MEMORY[0x24BDD0A80]);
}

uint64_t sub_23514E6D0()
{
  return Duration.UnitsFormatStyle.unitWidth.getter();
}

uint64_t sub_23514E6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDD0AB8], (uint64_t (*)(char *))MEMORY[0x24BDD0AD8]);
}

uint64_t sub_23514E714@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Duration.UnitsFormatStyle.allowedUnits.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23514E73C()
{
  swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.allowedUnits.setter();
}

_UNKNOWN **associated type witness table accessor for FormatStyle.FormatOutput : AttributedStringConvertible in Date.FormatStyle()
{
  return &protocol witness table for String;
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDD08D0], MEMORY[0x24BDD08C0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0850], MEMORY[0x24BDD0848]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static SafelySerializableDiscreteFormatStyle.representation<A>(of:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

unint64_t lazy protocol witness table accessor for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CBF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_25060CBF0;
}

_QWORD *specialized init(from:) in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;

  type metadata accessor for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>, (void (*)(void))lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v11 - v6;
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v9 = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

unint64_t lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CB70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

void *type metadata accessor for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_25060CA50;
}

void *type metadata accessor for Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_25060CB70;
}

void type metadata accessor for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for KeyedDecodingContainer();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CAE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04]("i@:\x1B {\t", &unk_25060CAE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CAE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter, &unk_25060CAE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23514EE30 + 4 * byte_2352CECD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23514EE50 + 4 * byte_2352CECD5[v4]))();
}

_BYTE *sub_23514EE30(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23514EE50(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23514EE58(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23514EE60(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23514EE68(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23514EE70(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_25060CAE0;
}

void View.testID<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for TestIDView();
}

uint64_t sub_23514F048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

uint64_t TestIDView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TestIDView.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TestIDView.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TestIDView.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t TestIDView.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*TestIDView.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static TestIDView._makeView(view:inputs:)()
{
  uint64_t v0;

  v0 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for TestIDView.IdentifiedView();
}

void sub_23514F1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;

  MEMORY[0x24BDAC7A8](a1);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (_DWORD *)((char *)&a9 - v17);
  v19 = *v13;
  *(_QWORD *)(v14 - 328) = *(_QWORD *)v12;
  *(_DWORD *)(v14 - 412) = *(_DWORD *)(v12 + 8);
  *(_QWORD *)(v14 - 336) = *(_QWORD *)(v12 + 16);
  *(_DWORD *)(v14 - 416) = *(_DWORD *)(v12 + 24);
  *(_DWORD *)(v14 - 420) = *(_DWORD *)(v12 + 28);
  *(_DWORD *)(v14 - 380) = *(_DWORD *)(v12 + 32);
  *(_DWORD *)(v14 - 384) = *(_DWORD *)(v12 + 36);
  *(_QWORD *)(v14 - 352) = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v14 - 368) = *(_QWORD *)(v12 + 48);
  *(_DWORD *)(v14 - 388) = *(_DWORD *)(v12 + 56);
  *(_DWORD *)(v14 - 392) = *(_DWORD *)(v12 + 60);
  *(_DWORD *)(v14 - 396) = *(_DWORD *)(v12 + 64);
  *(_DWORD *)(v14 - 400) = *(_DWORD *)(v12 + 68);
  *(_DWORD *)(v14 - 404) = *(_DWORD *)(v12 + 72);
  *(_DWORD *)(v14 - 408) = *(_DWORD *)(v12 + 76);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v9 - 8) + 56))(v11, 1, 1, v9, v16);
  *(_QWORD *)(v14 - 360) = v10;
  TestIDView.IdentifiedView.init(view:id:)(v19, v18);
}

uint64_t sub_23514F304()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  int ShouldRecordTree;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v29;

  *(_QWORD *)(v6 - 320) = v4;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8 = v5;
  *(_QWORD *)(v6 - 344) = v3;
  v7(v2, v3, v1);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TestIDView<A, B>.IdentifiedView, v1);
  *(_QWORD *)(v6 - 376) = v1;
  _GraphValue.init<A>(_:)(v2, v5, v1, v9, (_DWORD *)(v6 - 276));
  v10 = *(_DWORD *)(v6 - 276);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v12 = *(_QWORD *)(v6 - 328);
  *(_QWORD *)(v6 - 184) = v12;
  v13 = (_QWORD *)(v6 - 184);
  v14 = *(_QWORD *)(v6 - 336);
  v13[2] = v14;
  v15 = *(_DWORD *)(v6 - 412);
  *(_DWORD *)(v6 - 176) = v15;
  v16 = *(_DWORD *)(v6 - 416);
  v17 = *(_DWORD *)(v6 - 420);
  *(_DWORD *)(v6 - 160) = v16;
  *(_DWORD *)(v6 - 156) = v17;
  v18 = *(_DWORD *)(v6 - 384);
  *(_DWORD *)(v6 - 148) = v18;
  v19 = *(_QWORD *)(v6 - 352);
  v20 = *(_QWORD *)(v6 - 368);
  v13[5] = v19;
  v13[6] = v20;
  v21 = *(_DWORD *)(v6 - 388);
  v22 = *(_DWORD *)(v6 - 392);
  *(_DWORD *)(v6 - 128) = v21;
  *(_DWORD *)(v6 - 124) = v22;
  v23 = *(_DWORD *)(v6 - 396);
  v24 = *(_DWORD *)(v6 - 400);
  *(_DWORD *)(v6 - 120) = v23;
  *(_DWORD *)(v6 - 116) = v24;
  v25 = *(_DWORD *)(v6 - 404);
  v26 = *(_DWORD *)(v6 - 408);
  *(_DWORD *)(v6 - 112) = v25;
  *(_DWORD *)(v6 - 108) = v26;
  *(_DWORD *)(v6 - 104) = v0;
  *(_DWORD *)(v6 - 300) = v10;
  *(_QWORD *)(v6 - 272) = v12;
  *(_DWORD *)(v6 - 264) = v15;
  *(_QWORD *)(v6 - 256) = v14;
  *(_DWORD *)(v6 - 248) = v16;
  *(_QWORD *)(v6 - 244) = v17;
  *(_DWORD *)(v6 - 236) = v18;
  *(_QWORD *)(v6 - 232) = v19;
  *(_QWORD *)(v6 - 224) = v20;
  *(_DWORD *)(v6 - 216) = v21;
  *(_DWORD *)(v6 - 212) = v22;
  *(_DWORD *)(v6 - 208) = v23;
  *(_DWORD *)(v6 - 204) = v24;
  *(_DWORD *)(v6 - 200) = v25;
  *(_DWORD *)(v6 - 196) = v26;
  *(_DWORD *)(v6 - 192) = v0;
  v27 = *(_QWORD *)(v6 - 360);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(v6 - 300, v6 - 272, v8, v27);
  *(_DWORD *)(v6 - 152) = *(_DWORD *)(v6 - 380);
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v6 - 296, v6 - 184);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v29 = *(_QWORD **)(v6 - 312);
  *v29 = *(_QWORD *)(v6 - 296);
  v29[1] = *(_QWORD *)(v6 - 288);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 320) + 8))(*(_QWORD *)(v6 - 344), *(_QWORD *)(v6 - 376));
}

void type metadata accessor for TestIDView.IdentifiedView()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void TestIDView.IdentifiedView.init(view:id:)(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for TestIDView.IdentifiedView();
}

uint64_t sub_23514F5A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 52);
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void TestIDView.IdentifiedView.view.getter()
{
  type metadata accessor for TestIDView();
}

uint64_t sub_23514F618(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void TestIDView.IdentifiedView.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v1 - 8);
  v7 = v1;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v3 + 40);
  v10 = v5;
  v6 = *(_OWORD *)(v3 + 24);
  v11 = v6;
  v12 = v4;
  type metadata accessor for TestIDView();
}

void sub_23514F6F0(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  v1 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v1);
  TestIDView.IdentifiedView.view.getter();
}

void sub_23514F768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v4 + *(int *)(v3 + 52), v5);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v0 + *(int *)(v1 + 52), v7, v6);
  TestIDView.IdentifiedView.view.getter();
}

uint64_t sub_23514F7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 - 184);
  v5 = *(_QWORD *)(v4 - 176);
  v7 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v7);
  v3(v2, v1);
  *(_QWORD *)(v4 - 144) = v0;
  *(_QWORD *)(v4 - 136) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TestIDView<A, B>.IdentifiedView, v0);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, v4 - 160, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
}

uint64_t TestIDView.IdentifiedView.matchesIdentifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v21 = a4;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(a2 + 24);
  v13 = type metadata accessor for Optional();
  v14 = MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v20 - v16, v4 + *(int *)(a2 + 52), v13, v14);
  v17 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v11, v17 ^ 1u, 1, a3);
  v23 = *(_QWORD *)(a2 + 16);
  v24 = v12;
  v25 = a3;
  v26 = *(_OWORD *)(a2 + 32);
  v27 = v21;
  v28 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TestIDView.IdentifiedView.matchesIdentifier<A>(_:), (uint64_t)v22, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v18, (uint64_t)&v29);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v29 & 1;
}

uint64_t TestIDView.IdentifiedView.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Swift::String v14;
  _QWORD v16[2];

  v3 = *(_QWORD *)(a1 + 24);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v16 - v6;
  v8 = *(_QWORD *)(v3 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v1 + *(int *)(a1 + 52), v4, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 17481;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v7, v3);
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    v14._countAndFlagsBits = 540689481;
    v14._object = (void *)0xE400000000000000;
    String.append(_:)(v14);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13 = v16[0];
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v3);
  }
  return v13;
}

uint64_t protocol witness for IdentifierProvider.matchesIdentifier<A>(_:) in conformance TestIDView<A, B>.IdentifiedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TestIDView.IdentifiedView.matchesIdentifier<A>(_:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TestIDView<A, B>.IdentifiedView(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TestIDView<A, B>.IdentifiedView, a1);
  return static AsyncAttribute.flags.getter();
}

void protocol witness for static View._makeView(view:inputs:) in conformance TestIDView<A, B>()
{
  static TestIDView._makeView(view:inputs:)();
}

uint64_t getEnumTagSinglePayload for TestIDView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23514FCA0 + 4 * byte_2352CF298[v17 - 1]))();
}

void storeEnumTagSinglePayload for TestIDView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for TestIDView()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata completion function for TestIDView.IdentifiedView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TestIDView.IdentifiedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  void *v13;
  const void *v14;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 4) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (void *)(((unint64_t)a1 + v7 + 4) & ~v7);
    v14 = (const void *)(((unint64_t)a2 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for TestIDView.IdentifiedView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_DWORD *initializeWithCopy for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithCopy for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
  return a1;
}

_DWORD *initializeWithTake for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithTake for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for TestIDView.IdentifiedView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = v7 + ((v8 + 4) & ~v8);
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_7;
    v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_14;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_21;
LABEL_7:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_21;
LABEL_14:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_14;
    }
  }
LABEL_21:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v8 + 4) & ~v8);
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for TestIDView.IdentifiedView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_16;
      goto LABEL_23;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_16:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_23:
      __asm { BR              X13 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_16;
  goto LABEL_23;
}

void sub_2351507BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2351507C4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t instantiation function for generic protocol witness table for TestIDView<A, B>.IdentifiedView(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TestIDView<A, B>.IdentifiedView);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in TestIDView<A, B>.IdentifiedView()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in TestIDView.IdentifiedView.matchesIdentifier<A>(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SS_Sdts5NeverOTg503_s7d5UI10_f36_pSaySdGSSSdIgngod_AaB_p_ACtSS_Sdts5g48OIegnrzr_TR03_s7a23UI9summarizeySSSayAA10_C32_p_jk10GtGFSS_SdtN22C_p_ADtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v19 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = 0;
    v2 = v19;
    v5 = a1 + 32;
    do
    {
      v6 = (_QWORD *)(v5 + 48 * v4);
      v7 = v6[5];
      __swift_project_boxed_opaque_existential_1(v6, v6[3]);
      swift_getDynamicType();
      type metadata accessor for _Benchmark.Type();
      v8 = String.init<A>(describing:)();
      v10 = v9;
      v11 = *(_QWORD *)(v7 + 16);
      if (v11)
      {
        v12 = (double *)(v7 + 32);
        v13 = 0.0;
        do
        {
          v14 = *v12++;
          v13 = v13 + v14;
          --v11;
        }
        while (v11);
      }
      else
      {
        v13 = 0.0;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
      v16 = *(_QWORD *)(v19 + 16);
      v15 = *(_QWORD *)(v19 + 24);
      if (v16 >= v15 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      ++v4;
      *(_QWORD *)(v19 + 16) = v16 + 1;
      v17 = v19 + 24 * v16;
      *(_QWORD *)(v17 + 32) = v8;
      *(_QWORD *)(v17 + 40) = v10;
      *(double *)(v17 + 48) = v13;
    }
    while (v4 != v1);
  }
  return v2;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SDySSAHGs5NeverOTg503_s7d5UI10_f35_pSaySdGSDySSACGIgngo_AaB_p_ACtADs5g32OIegnrzr_TR03_s7a21UI5write_2toyj13AA10_c3_p_H33K41GtG_SStKFSDySSAEGAaD_p_AEtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v22 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  type metadata accessor for [String : [Double]](0, &lazy cache variable for type metadata for _DictionaryStorage<String, [Double]>, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  for (i = (uint64_t *)(a1 + 72); ; i += 6)
  {
    v5 = *i;
    __swift_project_boxed_opaque_existential_1(i - 5, *(i - 2));
    swift_getDynamicType();
    type metadata accessor for _Benchmark.Type();
    v6 = String.init<A>(describing:)();
    v8 = v7;
    type metadata accessor for _ContiguousArrayStorage<(String, [Double])>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    *(_QWORD *)(inited + 32) = v6;
    *(_QWORD *)(inited + 40) = v8;
    *(_QWORD *)(inited + 48) = v5;
    v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    swift_bridgeObjectRetain();
    swift_retain();
    v11 = *(_QWORD *)(inited + 32);
    v12 = *(_QWORD *)(inited + 40);
    v13 = *(_QWORD *)(inited + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
    if ((v15 & 1) != 0)
      break;
    v10[(result >> 6) + 8] |= 1 << result;
    v16 = (uint64_t *)(v10[6] + 16 * result);
    *v16 = v11;
    v16[1] = v12;
    *(_QWORD *)(v10[7] + 8 * result) = v13;
    v17 = v10[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_12;
    v10[2] = v19;
    swift_release();
    swift_bridgeObjectRelease();
    v2 = v22;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
      v2 = v22;
    }
    v21 = *(_QWORD *)(v2 + 16);
    v20 = *(_QWORD *)(v2 + 24);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      v2 = v22;
    }
    *(_QWORD *)(v2 + 16) = v21 + 1;
    *(_QWORD *)(v2 + 8 * v21 + 32) = v10;
    if (!--v1)
      return v2;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _BenchmarkHost._renderAsyncForTest(interval:)(Swift::Double interval)
{
  return 0;
}

const char *one-time initialization function for enableProfiler(int a1)
{
  return one-time initialization function for enableProfiler(a1, "SWIFTUI_PROFILE_BENCHMARKS", &enableProfiler);
}

uint64_t enableProfiler.getter()
{
  return enableProfiler.getter(&one-time initialization token for enableProfiler, (unsigned __int8 *)&enableProfiler);
}

uint64_t enableProfiler.setter(char a1)
{
  return enableProfiler.setter(a1, &one-time initialization token for enableProfiler, &enableProfiler);
}

uint64_t (*enableProfiler.modify())()
{
  if (one-time initialization token for enableProfiler != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

const char *one-time initialization function for enableTracer(int a1)
{
  return one-time initialization function for enableProfiler(a1, "SWIFTUI_TRACE_BENCHMARKS", &enableTracer);
}

const char *one-time initialization function for enableProfiler(int a1, char *a2, BOOL *a3)
{
  const char *result;
  BOOL v5;

  result = getenv(a2);
  if (result)
  {
    result = (const char *)atoi(result);
    v5 = (_DWORD)result != 0;
  }
  else
  {
    v5 = 0;
  }
  *a3 = v5;
  return result;
}

uint64_t enableTracer.getter()
{
  return enableProfiler.getter(&one-time initialization token for enableTracer, (unsigned __int8 *)&enableTracer);
}

uint64_t enableProfiler.getter(_QWORD *a1, unsigned __int8 *a2)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return *a2;
}

uint64_t enableTracer.setter(char a1)
{
  return enableProfiler.setter(a1, &one-time initialization token for enableTracer, &enableTracer);
}

uint64_t enableProfiler.setter(char a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t result;

  if (*a2 != -1)
    swift_once();
  result = swift_beginAccess();
  *a3 = a1 & 1;
  return result;
}

uint64_t (*enableTracer.modify())()
{
  if (one-time initialization token for enableTracer != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

double _BenchmarkHost.measureAction(action:)(void (*a1)(uint64_t))
{
  uint64_t v1;
  double v3;
  uint64_t started;
  double v6;
  uint64_t v7;

  v3 = CACurrentMediaTime();
  if (one-time initialization token for enableTracer != -1)
    swift_once();
  swift_beginAccess();
  if (enableTracer)
  {
    if (one-time initialization token for tracingOptions != -1)
      swift_once();
    started = AGGraphStartTracing();
  }
  else
  {
    if (one-time initialization token for enableProfiler != -1)
      swift_once();
    started = swift_beginAccess();
    if (enableProfiler)
    {
      swift_getObjectType();
      started = swift_conformsToProtocol2();
      if (started ? v1 : 0)
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        ViewRendererHost.startProfiling()();
        started = swift_unknownObjectRelease();
      }
    }
  }
  a1(started);
  v6 = CACurrentMediaTime();
  if (enableTracer)
  {
    AGGraphStopTracing();
  }
  else
  {
    if (one-time initialization token for enableProfiler != -1)
      swift_once();
    swift_beginAccess();
    if (enableProfiler)
    {
      swift_getObjectType();
      if (swift_conformsToProtocol2())
        v7 = v1;
      else
        v7 = 0;
      if (v7)
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        ViewRendererHost.stopProfiling()();
        swift_unknownObjectRelease();
      }
    }
  }
  return v6 - v3;
}

Swift::Double __swiftcall _BenchmarkHost.measureRender(interval:)(Swift::Double interval)
{
  return _BenchmarkHost.measureAction(action:)((void (*)(uint64_t))partial apply for closure #1 in _BenchmarkHost.measureRender(interval:));
}

uint64_t partial apply for closure #1 in _BenchmarkHost.measureRender(interval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)(v0 + 24) + 8))(*(_QWORD *)(v0 + 16), *(double *)(v0 + 40));
}

_QWORD *_BenchmarkHost.measureRenders(duration:)(double a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;

  v6 = a1 / 60.0;
  v7 = *(_QWORD *)&v6;
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = 0xC3E0000000000001;
  if (v6 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = 0x43E0000000000000;
  if (v6 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v4 = (uint64_t)v6;
  if ((uint64_t)v6 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!__OFADD__(v4, 1))
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 0, MEMORY[0x24BEE4AF8]);
    v5 = _BenchmarkHost.measureAction(action:)((void (*)(uint64_t))partial apply for closure #1 in _BenchmarkHost.measureRender(interval:));
    v3 = v1[2];
    v7 = v1[3];
    v2 = v3 + 1;
    if (v3 < v7 >> 1)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v2, 1, v1);
LABEL_7:
  v1[2] = v2;
  for (*(double *)&v1[v3 + 4] = v5; v4; --v4)
  {
    v8 = _BenchmarkHost.measureAction(action:)((void (*)(uint64_t))partial apply for closure #1 in _BenchmarkHost.measureRender(interval:));
    v10 = v1[2];
    v9 = v1[3];
    if (v10 >= v9 >> 1)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v1);
    v1[2] = v10 + 1;
    *(double *)&v1[v10 + 4] = v8;
  }
  return v1;
}

Swift::String __swiftcall summarize(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String result;

  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SS_Sdts5NeverOTg503_s7d5UI10_f36_pSaySdGSSSdIgngod_AaB_p_ACtSS_Sdts5g48OIegnrzr_TR03_s7a23UI9summarizeySSSayAA10_C32_p_jk10GtGFSS_SdtN22C_p_ADtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)a1._rawValue);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1;
    v4 = 0;
    v5 = v1 + 40;
    v6 = *(_QWORD *)(v1 + 16);
    do
    {
      swift_bridgeObjectRetain();
      v7 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v7 > v4)
        v4 = v7;
      v5 += 24;
      --v6;
    }
    while (v6);
    v8 = (double *)(v3 + 48);
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v10 = MEMORY[0x24BEE1448];
    while (1)
    {
      v11 = *((_QWORD *)v8 - 2);
      v12 = *((_QWORD *)v8 - 1);
      v13 = *v8;
      swift_bridgeObjectRetain();
      v14 = String.count.getter();
      v16 = v4 - v14;
      if (__OFSUB__(v4, v14))
        break;
      if (__OFADD__(v16, 1))
        goto LABEL_16;
      v17 = MEMORY[0x23B7C5FA4](32, 0xE100000000000000, v16 + 1);
      v19 = v18;
      swift_bridgeObjectRetain();
      v20._countAndFlagsBits = 58;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = v17;
      v21._object = v19;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_23527E860;
      *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE13C8];
      *(_QWORD *)(v22 + 64) = v10;
      *(double *)(v22 + 32) = v13 * 1000.0;
      v23 = String.init(format:_:)();
      v25 = v24;
      swift_bridgeObjectRetain();
      v26._countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v28 = v9[2];
      v27 = v9[3];
      if (v28 >= v27 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v9);
      v9[2] = v28 + 1;
      v29 = &v9[2 * v28];
      v29[4] = v11;
      v29[5] = v12;
      v8 += 3;
      if (!--v2)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v30 = BidirectionalCollection<>.joined(separator:)();
    v32 = v31;
    swift_bridgeObjectRelease();
    v14 = v30;
    v15 = v32;
  }
  result._object = v15;
  result._countAndFlagsBits = v14;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> write(_:to:)(Swift::OpaquePointer _, Swift::String to)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  Class isa;
  id v11;
  id v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  unsigned int v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30[3];

  object = to._object;
  countAndFlagsBits = to._countAndFlagsBits;
  v30[2] = *(id *)MEMORY[0x24BDAC8D0];
  v29 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SDySSAHGs5NeverOTg503_s7d5UI10_f35_pSaySdGSDySSACGIgngo_AaB_p_ACtADs5g32OIegnrzr_TR03_s7a21UI5write_2toyj13AA10_c3_p_H33K41GtG_SStKFSDySSAEGAaD_p_AEtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)_._rawValue);
  v9 = (void *)objc_opt_self();
  type metadata accessor for [String : [Double]](0, (unint64_t *)&lazy cache variable for type metadata for [String : [Double]], (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v30[0] = 0;
  v11 = objc_msgSend(v9, sel_dataWithJSONObject_options_error_, isa, 1, v30);

  v12 = v30[0];
  if (v11)
  {
    v26[1] = v2;
    v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v13;

    v14 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v15 = (void *)MEMORY[0x23B7C5DAC](countAndFlagsBits, object);
    v16 = objc_msgSend(v15, sel_stringByDeletingLastPathComponent);

    if (!v16)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = (id)MEMORY[0x23B7C5DAC](v17);
      swift_bridgeObjectRelease();
    }
    v30[0] = 0;
    v18 = objc_msgSend(v14, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v16, 1, 0, v30);

    if (v18)
    {
      v19 = v30[0];
      URL.init(fileURLWithPath:)();
      v21 = v27;
      v20 = v28;
      Data.write(to:options:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v29);

      v22 = v21;
      v23 = v20;
    }
    else
    {
      v25 = v30[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      v22 = v27;
      v23 = v28;
    }
    outlined consume of Data._Representation(v22, v23);
  }
  else
  {
    v24 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

Swift::Void __swiftcall log(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  Class isa;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  void *v24;
  uint64_t v25;
  _OWORD v26[2];
  unint64_t v27;
  unint64_t v28;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = summarize(_:)(a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v7 = swift_allocObject();
  v26[0] = xmmword_23527E860;
  *(_OWORD *)(v7 + 16) = xmmword_23527E860;
  v8 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
  *(Swift::String *)(v7 + 32) = v6;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(static CommandLine.arguments.getter() + 16);
  swift_bridgeObjectRelease();
  if (v9 < 2)
  {
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
    v14 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000011, 0x80000002352E8520);
    objc_msgSend(v13, sel_setDateFormat_, v14);

    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v16 = objc_msgSend(v13, sel_stringFromDate_, isa);

    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    v27 = 0xD000000000000022;
    v28 = 0x80000002352E8540;
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = 0x6E6F736A2ELL;
    v21._object = (void *)0xE500000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();

    v12 = v27;
    v11 = (void *)v28;
  }
  else
  {
    v10 = (_QWORD *)static CommandLine.arguments.getter();
    if (v10[2] < 2uLL)
    {
      __break(1u);
      return;
    }
    v12 = v10[6];
    v11 = (void *)v10[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v26[0];
  *(_QWORD *)(v22 + 56) = v8;
  *(_QWORD *)(v22 + 32) = v12;
  *(_QWORD *)(v22 + 40) = v11;
  swift_bridgeObjectRetain();
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = v12;
  v23._object = v11;
  write(_:to:)(a1, v23);
  v25 = swift_bridgeObjectRelease();
  if (v24)
  {
    MEMORY[0x24BDAC7A8](v25);
    *(_QWORD *)&v26[-1] = v24;
    specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, partial apply for implicit closure #1 in log(_:));

  }
}

uint64_t implicit closure #1 in log(_:)()
{
  swift_getErrorValue();
  return Error.localizedDescription.getter();
}

uint64_t partial apply for implicit closure #1 in log(_:)()
{
  return implicit closure #1 in log(_:)();
}

uint64_t dispatch thunk of _BenchmarkHost._renderForTest(interval:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _BenchmarkHost._renderAsyncForTest(interval:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _BenchmarkHost._performScrollTest(startOffset:iterations:delta:length:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of _Benchmark.measure(host:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

unint64_t type metadata accessor for _Benchmark.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _Benchmark.Type;
  if (!lazy cache variable for type metadata for _Benchmark.Type)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for _Benchmark);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _Benchmark.Type);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(String, [Double])>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>)
  {
    type metadata accessor for (String, [Double])();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  }
}

void type metadata accessor for (String, [Double])()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, [Double]))
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, [Double]));
  }
}

BOOL TransitionPhase.isIdentity.getter(char a1)
{
  return a1 == 1;
}

void protocol witness for static Transition.properties.getter in conformance ModifierTransition<A>(_BYTE *a1@<X8>)
{
  static Transition.properties.getter(a1);
}

void static Transition.properties.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Transition._makeContentTransition(transition:)(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)result == 3)
  {
    v1 = result;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(result + 24), *(_BYTE *)(result + 32));
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

SwiftUI::TransitionProperties __swiftcall TransitionProperties.init(hasMotion:)(SwiftUI::TransitionProperties hasMotion)
{
  SwiftUI::TransitionProperties *v1;

  v1->hasMotion = hasMotion.hasMotion;
  return hasMotion;
}

BOOL static TransitionPhase.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t Transition.apply<A>(content:phase:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v21 = a4;
  v22 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ApplyTransitionModifier(0, v12, v14, v13);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v6, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v19, v11, a3);
  v19[*(int *)(v15 + 36)] = a2;
  View.modifier<A>(_:)(v19, v21, v15, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t type metadata accessor for ApplyTransitionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ApplyTransitionModifier);
}

SwiftUI::TransitionProperties __swiftcall TransitionProperties.union(_:)(SwiftUI::TransitionProperties result)
{
  _BYTE *v1;
  _BYTE *v2;

  *v1 = (*v2 | *(_BYTE *)result.hasMotion) & 1;
  return result;
}

BOOL Transition.hasContentTransition.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v3[3];
  uint64_t v4;
  char v5;

  v3[0] = 3;
  v3[1] = 0;
  v3[2] = 0;
  v4 = 0;
  v5 = 2;
  (*(void (**)(_QWORD *, uint64_t))(a2 + 40))(v3, a1);
  if (v5)
  {
    outlined consume of _Transition_ContentTransition.Result(v4, v5);
    return 0;
  }
  return (v4 & 1) != 0;
}

uint64_t Transition.contentTransitionEffects(style:size:)(unsigned __int8 *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  char v8;

  v6[0] = *a1;
  *(double *)&v6[1] = a2;
  *(double *)&v6[2] = a3;
  v7 = 0;
  v8 = 2;
  (*(void (**)(_QWORD *))(a5 + 40))(v6);
  result = v7;
  if (v8 != 1)
  {
    outlined consume of _Transition_ContentTransition.Result(v7, v8);
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

double static Transition.makeView(view:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  void (*v16)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v18;
  uint64_t AssociatedTypeWitness;
  int v21;
  int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v21 = *a1;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 20);
  v47 = *a2;
  v49 = v9;
  v50 = *(_OWORD *)(a2 + 3);
  v51 = v10;
  v52 = v11;
  v53 = *(_OWORD *)(a2 + 7);
  v54 = a2[9];
  v48 = v8;
  v55 = v12;
  v13 = type metadata accessor for PlaceholderContentView(0, a5, a3, a4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v13, a3, a4, v13);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = DWORD2(v50);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v47;
  v37 = v48;
  v38 = v9;
  v39 = v50;
  v42 = v10;
  v43 = v11;
  v44 = v53;
  v45 = v54;
  v46 = v55;
  v40 = 0;
  v41 = HIDWORD(v50);
  v22 = v21;
  v25 = v47;
  v26 = v48;
  v27 = v9;
  v28 = v50;
  v29 = 0;
  v30 = HIDWORD(v50);
  v31 = v10;
  v32 = v11;
  v33 = v53;
  v34 = v54;
  v35 = v55;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v23, &v22, &v25, AssociatedTypeWitness, AssociatedConformanceWitness);
  v40 = v18;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v23, (uint64_t)&v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a6 = v23;
  result = v24;
  a6[1] = v24;
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(a1, a2, a3, 0);
}

uint64_t ApplyTransitionModifier.init(transition:phase:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for ApplyTransitionModifier(0, a3, a4, v9);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance ModifierTransition<A>(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)result == 3)
  {
    v1 = result;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(result + 24), *(_BYTE *)(result + 32));
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t ApplyTransitionModifier.transition.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ApplyTransitionModifier.transition.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ApplyTransitionModifier.transition.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ApplyTransitionModifier.phase.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t ApplyTransitionModifier.phase.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*ApplyTransitionModifier.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static ApplyTransitionModifier._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  int v35[3];

  v11 = *(_QWORD *)a2;
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_DWORD *)(a2 + 80);
  LODWORD(v26) = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for ApplyTransitionModifier.Child(0, a5, a6, v16);
  v18 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ApplyTransitionModifier<A>.Child, v17);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a2 + 32);
  v22 = *(_OWORD *)(a2 + 56);
  v23 = *(_OWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 72);
  _GraphValue.init<A>(_:)((uint64_t)&v26, AssociatedTypeWitness, v17, v18, v35);
  v26 = v11;
  v27 = v12;
  v28 = v13;
  v29 = v19;
  v30 = v20;
  v31 = v23;
  v32 = v22;
  v33 = v21;
  v34 = v14;
  static Transition.makeView(view:inputs:body:)(v35, &v26, a3, a4, a5, a7);
}

uint64_t static ApplyTransitionModifier.viewListCount(inputs:body:)()
{
  return 0;
}

uint64_t ApplyTransitionModifier.Child.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t CurrentAttribute;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  void *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55[24];
  uint64_t v56;

  v49 = a4;
  v56 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for ObservationTracking._AccessList();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v47 = (char *)&v44 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v48 = (char *)&v44 - v14;
  type metadata accessor for ObservationTracking._AccessList?();
  v16 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v44 - v20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v50 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v45 = (char *)&v44 - v25;
  v52 = a2;
  v53 = a3;
  v54 = a1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    a3 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v44 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v21, 1, 1, v7);
  MEMORY[0x24BDAC7A8](v27);
  *(&v44 - 4) = (void *)AssociatedTypeWitness;
  *(&v44 - 3) = partial apply for closure #1 in ApplyTransitionModifier.Child.value.getter;
  *(&v44 - 2) = &v51;
  v28 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v21, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v44 - 6), v16, v28, AssociatedTypeWitness, MEMORY[0x24BEE3F20], (uint64_t)v55);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v21, (uint64_t)v18);
  v29 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v18, 1, v7) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  }
  else
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v31 = v48;
    v30(v48, v18, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v47, v31, v7);
    swift_beginAccess();
    v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    v35 = *((_QWORD *)v32 + 2);
    v34 = *((_QWORD *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((_QWORD *)v32 + 2) = v35 + 1;
    v30(&v32[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v35], v47, v7);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v48, v7);
    v29 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v36 = v45;
  v37 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v37(v45, v50, AssociatedTypeWitness);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  v37(v49, v36, AssociatedTypeWitness);
  v38 = v29[463];
  v39 = *(_QWORD *)(v38 + 16);
  if (v39)
  {
    v40 = v38 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v41 = *(_QWORD *)(v8 + 72);
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v42(v10, v40, v7);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v10, a3, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v40 += v41;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
    v29 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v29[463] = v44;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ApplyTransitionModifier.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  _QWORD v8[4];

  v8[2] = a1;
  v8[3] = a2;
  v5 = type metadata accessor for ApplyTransitionModifier(0, a1, a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter, (uint64_t)v8, v5, AssociatedTypeWitness, a4);
}

uint64_t closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  PlaceholderContentView.init()(a2);
  type metadata accessor for ApplyTransitionModifier(0, a2, a3, v5);
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ApplyTransitionModifier<A>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance ApplyTransitionModifier<A>.Child@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  int *v2;

  return ApplyTransitionModifier.Child.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ApplyTransitionModifier<A>.Child(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ApplyTransitionModifier<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ApplyTransitionModifier<A>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  static ApplyTransitionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

__n128 _Transition_ContentTransition.operation.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

__n128 _Transition_ContentTransition.operation.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*_Transition_ContentTransition.operation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _Transition_ContentTransition.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of _Transition_ContentTransition.Result(v2, v3);
}

uint64_t _Transition_ContentTransition.result.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 32) = v3;
  return result;
}

uint64_t (*_Transition_ContentTransition.result.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void TransitionPhase.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int TransitionPhase.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

double TransitionPhase.value.getter(char a1)
{
  return dbl_2352CF6E8[a1];
}

uint64_t TransitionProperties.hasMotion.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TransitionProperties.hasMotion.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*TransitionProperties.hasMotion.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t one-time initialization function for identity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  type metadata accessor for TransitionBox<IdentityTransition>(0, a2, a3, a4);
  result = swift_allocObject();
  static AnyTransition.identity = result;
  return result;
}

uint64_t static AnyTransition.identity.getter()
{
  if (one-time initialization token for identity != -1)
    swift_once();
  return swift_retain();
}

void static IdentityTransition.properties.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t IdentityTransition._makeContentTransition(transition:)(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)result == 3)
  {
    v1 = result;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(result + 24), *(_BYTE *)(result + 32));
    *(_QWORD *)(v1 + 24) = 1;
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance IdentityTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(a1, a2, a3, 1);
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (*(_BYTE *)result == 3)
  {
    v5 = result;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(result + 24), *(_BYTE *)(result + 32));
    *(_QWORD *)(v5 + 24) = a4;
    *(_BYTE *)(v5 + 32) = 0;
  }
  return result;
}

uint64_t type metadata accessor for ApplyTransitionModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ApplyTransitionModifier.Child);
}

uint64_t outlined copy of _Transition_ContentTransition.Result(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t lazy protocol witness table accessor for type TransitionPhase and conformance TransitionPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransitionPhase and conformance TransitionPhase;
  if (!lazy protocol witness table cache variable for type TransitionPhase and conformance TransitionPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransitionPhase, &type metadata for TransitionPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransitionPhase and conformance TransitionPhase);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Transition.Body : View in IdentityTransition()
{
  return &protocol witness table for PlaceholderContentView<A>;
}

uint64_t dispatch thunk of Transition.body(content:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static Transition.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Transition._makeContentTransition(transition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t type metadata completion function for ApplyTransitionModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ApplyTransitionModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 3)
        return v15 - 2;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_235153004 + 4 * byte_2352CF430[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for ApplyTransitionModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t destroy for _Transition_ContentTransition(uint64_t a1)
{
  return outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for _Transition_ContentTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 32);
  outlined copy of _Transition_ContentTransition.Result(v3, v4);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for _Transition_ContentTransition(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_BYTE *)a2 + 32);
  outlined copy of _Transition_ContentTransition.Result(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v7 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v5;
  outlined consume of _Transition_ContentTransition.Result(v6, v7);
  return a1;
}

uint64_t assignWithTake for _Transition_ContentTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v6 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of _Transition_ContentTransition.Result(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for _Transition_ContentTransition()
{
  return &type metadata for _Transition_ContentTransition;
}

uint64_t getEnumTagSinglePayload for _Transition_ContentTransition.Operation(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[24])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  if (v5 + 1 >= 2)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _Transition_ContentTransition.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for _Transition_ContentTransition.Operation(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

_QWORD *destructiveInjectEnumTag for _Transition_ContentTransition.Operation(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xFD)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 - 254;
  }
  else if (a2)
  {
    *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _Transition_ContentTransition.Operation()
{
  return &type metadata for _Transition_ContentTransition.Operation;
}

uint64_t initializeBufferWithCopyOfBuffer for _Transition_ContentTransition.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of _Transition_ContentTransition.Result(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for _Transition_ContentTransition.Result(uint64_t a1)
{
  return outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for _Transition_ContentTransition.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of _Transition_ContentTransition.Result(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of _Transition_ContentTransition.Result(v5, v6);
  return a1;
}

uint64_t assignWithTake for _Transition_ContentTransition.Result(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of _Transition_ContentTransition.Result(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for _Transition_ContentTransition.Result()
{
  return &type metadata for _Transition_ContentTransition.Result;
}

uint64_t storeEnumTagSinglePayload for TransitionPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_235153560 + 4 * byte_2352CF443[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235153594 + 4 * byte_2352CF43E[v4]))();
}

uint64_t sub_235153594(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23515359C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2351535A4);
  return result;
}

uint64_t sub_2351535B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2351535B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2351535BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351535C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransitionPhase()
{
  return &type metadata for TransitionPhase;
}

uint64_t storeEnumTagSinglePayload for TransitionProperties(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23515362C + 4 * byte_2352CF44D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_235153660 + 4 * byte_2352CF448[v4]))();
}

uint64_t sub_235153660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235153668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235153670);
  return result;
}

uint64_t sub_23515367C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235153684);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_235153688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235153690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransitionProperties()
{
  return &type metadata for TransitionProperties;
}

ValueMetadata *type metadata accessor for IdentityTransition()
{
  return &type metadata for IdentityTransition;
}

uint64_t sub_2351536BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = a1[1];
  v5 = a1[3];
  v6 = type metadata accessor for ApplyTransitionModifier(255, *a1, a1[2], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for ApplyTransitionModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t instantiation function for generic protocol witness table for ApplyTransitionModifier<A>.Child(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ApplyTransitionModifier<A>.Child);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ApplyTransitionModifier<A>.Child()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in ApplyTransitionModifier.Child.value.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ApplyTransitionModifier.Child.value.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t partial apply for closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void type metadata accessor for TransitionBox<IdentityTransition>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TransitionBox<IdentityTransition>)
  {
    v4 = type metadata accessor for TransitionBox(0, (uint64_t)&type metadata for IdentityTransition, (uint64_t)&protocol witness table for IdentityTransition, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<IdentityTransition>);
  }
}

uint64_t EnvironmentValues.isVisionEnabled.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.isVisionEnabled : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.isVisionEnabled.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.isVisionEnabled.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isVisionEnabled.modify;
}

void EnvironmentValues.isVisionEnabled.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t static IsVisionEnabledKey.defaultValue.getter()
{
  return 0;
}

uint64_t sub_235153B54(char *a1)
{
  return EnvironmentValues.isVisionEnabled.setter(*a1);
}

ValueMetadata *type metadata accessor for IsVisionEnabledKey()
{
  return &type metadata for IsVisionEnabledKey;
}

uint64_t static VisualEffectModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  unsigned int v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[12];
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  int v41;
  int32x2_t v42;
  int32x2_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v13 = *((_DWORD *)a2 + 14);
  v14 = *((_DWORD *)a2 + 15);
  v15 = *((_DWORD *)a2 + 20);
  swift_beginAccess();
  v16 = *(_DWORD *)(v12 + 16);
  v17 = *MEMORY[0x24BE096C0];
  *(_DWORD *)v34 = v9;
  v35 = v14;
  v36 = __PAIR64__(v17, v16);
  LODWORD(v37) = 0;
  v31 = a5;
  v32 = type metadata accessor for VisualEffectModifier.Child(0, a5, a6, v18);
  v19 = (int32x2_t)a2[8];
  v20 = (int32x2_t)a2[9];
  *(int32x2_t *)&v34[4] = vzip1_s32(v19, v20);
  v33 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VisualEffectModifier<A>.Child, v32);
  v21 = type metadata accessor for Attribute();
  v26 = *(_OWORD *)(a2 + 5);
  v22 = a2[3];
  v23 = a2[4];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v34, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v30, v32, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v24);
  _GraphValue.init(_:)(v29, &v29);
  *(_QWORD *)v34 = v10;
  *(_DWORD *)&v34[8] = v11;
  v36 = v12;
  v37 = v22;
  v38 = v23;
  v39 = v26;
  v40 = v13;
  v41 = v14;
  v42 = v19;
  v43 = v20;
  v44 = v15;
  return (*(uint64_t (**)(unsigned int *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 16))(&v29, v34, a3, a4, a5, a6);
}

uint64_t static VisualEffectModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  int v29;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v17 = *(_OWORD *)(a2 + 5);
  v11 = a2[7];
  v12 = *((_DWORD *)a2 + 16);
  v13 = a2[9];
  v14 = *((_BYTE *)a2 + 80);
  v15 = type metadata accessor for VisualEffectModifier(0, a5, a6, a4);
  v29 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v17;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v29, (uint64_t)&v20, a3, a4, v15, (uint64_t)&protocol witness table for VisualEffectModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VisualEffectModifier<A>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static VisualEffectModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VisualEffectModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static VisualEffectModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance VisualEffectModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _OffsetEffect(a1, a2);
}

uint64_t VisualEffectModifier.Child.updateValue()(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, _DWORD *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD v43[13];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[6] + 1;
  v1[6] = v7;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
    __break(1u);
  v37 = *v1;
  v40 = v7;
  v33 = *(_QWORD *)(a1 + 24);
  v38 = v3;
  v39 = v6;
  v8 = AGCreateWeakAttribute();
  v41 = a1;
  v9 = v8;
  v36 = HIDWORD(v8);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v35 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v13 = v12;
  v34 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v32 = HIDWORD(v14);
  v16 = AGCreateWeakAttribute();
  v17 = v16;
  v42 = v4;
  v31 = HIDWORD(v16);
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for VisualEffectModifier(0, v3, v33, v21);
  v22 = *(void (**)(uint64_t, _DWORD *))AGGraphGetValue();
  v43[0] = v9;
  v43[1] = v36;
  v43[2] = v11;
  v43[3] = v35;
  v43[4] = v13;
  v43[5] = v34;
  v43[6] = v15;
  v43[7] = v32;
  v43[8] = v17;
  v43[9] = v31;
  v43[10] = v19;
  v43[11] = v20;
  v43[12] = v40;
  v23 = swift_retain();
  v24 = (uint64_t)v39;
  v22(v23, v43);
  v25 = swift_release();
  v26 = MEMORY[0x24BDAC7A8](v25);
  *(&v30 - 2) = v41;
  *(&v30 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VisualEffectModifier<A>.Child, v26);
  v27 = v38;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v24, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v30 - 4), v38, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v24, v27);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance VisualEffectModifier<A>.Child(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for VisualEffectModifier<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t View.geometryEffect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = type metadata accessor for VisualEffectModifier(0, a4, a6, a4);
  return View.modifier<A>(_:)(v10, a3, v8, a5);
}

uint64_t View.visualEffect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = type metadata accessor for VisualEffectModifier(0, a4, a6, a4);
  return View.modifier<A>(_:)(v10, a3, v8, a5);
}

uint64_t type metadata accessor for VisualEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VisualEffectModifier);
}

uint64_t static EmptyVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 20);
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = v5;
  return a3(a1, &v8);
}

unint64_t instantiation function for generic protocol witness table for EmptyVisualEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EmptyVisualEffect and conformance EmptyVisualEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyVisualEffect and conformance EmptyVisualEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyVisualEffect and conformance EmptyVisualEffect;
  if (!lazy protocol witness table cache variable for type EmptyVisualEffect and conformance EmptyVisualEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyVisualEffect, &type metadata for EmptyVisualEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyVisualEffect and conformance EmptyVisualEffect);
  }
  return result;
}

uint64_t dispatch thunk of static VisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

ValueMetadata *type metadata accessor for EmptyVisualEffect()
{
  return &type metadata for EmptyVisualEffect;
}

uint64_t sub_2351542B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for VisualEffectModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for VisualEffectModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t type metadata accessor for VisualEffectModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VisualEffectModifier.Child);
}

uint64_t instantiation function for generic protocol witness table for VisualEffectModifier<A>.Child(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VisualEffectModifier<A>.Child);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in VisualEffectModifier<A>.Child()
{
  JUMPOUT(0x23B7C9C04);
}

BOOL CoordinateSpace.isGlobal.getter()
{
  uint64_t v0;
  int8x16_t v1;
  uint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  char v6;

  outlined init with copy of CoordinateSpace(v0, (uint64_t)&v3);
  if (v6)
  {
    if (v6 != 1)
    {
      v1 = vorrq_s8(v4, v5);
      return (*(_QWORD *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)) | v3) == 0;
    }
  }
  else
  {
    outlined destroy of CoordinateSpace((uint64_t)&v3);
  }
  return 0;
}

SwiftUI::CoordinateSpace::ID __swiftcall CoordinateSpace.ID.init()()
{
  SwiftUI::CoordinateSpace::ID *v0;
  SwiftUI::CoordinateSpace::ID *v1;
  SwiftUI::CoordinateSpace::ID result;

  v1 = v0;
  result.value.value = AGMakeUniqueID();
  v1->value.value = result.value.value;
  return result;
}

BOOL static CoordinateSpace.ID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

double one-time initialization function for root()
{
  double result;

  qword_2542658C8 = 0;
  result = 0.0;
  static CoordinateSpace.root = 0u;
  unk_2542658B8 = 0u;
  byte_2542658D0 = 2;
  return result;
}

uint64_t static CoordinateSpace.root.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for root != -1)
    swift_once();
  return outlined init with copy of CoordinateSpace((uint64_t)&static CoordinateSpace.root, a1);
}

uint64_t CoordinateSpace.canonical.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CoordinateSpace(v1, a1);
}

uint64_t CoordinateSpace.Name.space.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  char v8;

  result = outlined init with copy of CoordinateSpace.Name(v1, (uint64_t)v6);
  if ((v8 & 1) != 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)&v6[0];
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v5 = v6[1];
    *(_OWORD *)a1 = v6[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return result;
}

uint64_t outlined init with copy of CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CoordinateSpace.Name(a2, a1);
  return a2;
}

BOOL CoordinateSpace.isLocal.getter()
{
  uint64_t v0;
  int8x16_t v1;
  uint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  char v6;

  outlined init with copy of CoordinateSpace(v0, (uint64_t)&v3);
  if (v6)
  {
    if (v6 != 1)
    {
      v1 = vorrq_s8(v4, v5);
      return (*(_QWORD *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)) | v3) != 0;
    }
  }
  else
  {
    outlined destroy of CoordinateSpace((uint64_t)&v3);
  }
  return 0;
}

void CoordinateSpace.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _OWORD v3[2];
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;

  outlined init with copy of CoordinateSpace(v0, (uint64_t)&v5);
  if (v8)
  {
    v1 = v5;
    if (v8 == 1)
    {
      Hasher._combine(_:)(3uLL);
      v2 = v1;
    }
    else
    {
      v2 = (*((_QWORD *)&v6 + 1) | v7 | (unint64_t)v5 | (unint64_t)v6 | *((_QWORD *)&v5 + 1)) != 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    v3[0] = v5;
    v3[1] = v6;
    v4 = v7;
    Hasher._combine(_:)(2uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
  }
}

Swift::Int CoordinateSpace.hashValue.getter()
{
  Hasher.init(_seed:)();
  CoordinateSpace.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CoordinateSpace()
{
  Hasher.init(_seed:)();
  CoordinateSpace.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CoordinateSpace()
{
  Hasher.init(_seed:)();
  CoordinateSpace.hash(into:)();
  return Hasher._finalize()();
}

uint64_t NamedCoordinateSpace.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CoordinateSpace.Name(v1, a1);
}

uint64_t NamedCoordinateSpace.name.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of CoordinateSpace.Name(a1, v1);
}

uint64_t (*NamedCoordinateSpace.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_OWORD *NamedCoordinateSpace.init(name:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  return outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1, a2);
}

uint64_t NamedCoordinateSpace.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  char v8;

  result = outlined init with copy of CoordinateSpace.Name(v1, (uint64_t)v6);
  if ((v8 & 1) != 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)&v6[0];
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v5 = v6[1];
    *(_OWORD *)a1 = v6[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return result;
}

uint64_t protocol witness for CoordinateSpaceProtocol.coordinateSpace.getter in conformance NamedCoordinateSpace@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  char v8;

  result = outlined init with copy of CoordinateSpace.Name(v1, (uint64_t)v6);
  if ((v8 & 1) != 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)&v6[0];
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v5 = v6[1];
    *(_OWORD *)a1 = v6[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return result;
}

uint64_t static CoordinateSpaceProtocol<>.named<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = _convertToAnyHashable<A>(_:)();
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

_QWORD *static CoordinateSpaceProtocol<>.id(_:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

double LocalCoordinateSpace.coordinateSpace.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 2;
  return result;
}

double protocol witness for CoordinateSpaceProtocol.coordinateSpace.getter in conformance LocalCoordinateSpace@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 2;
  return result;
}

double GlobalCoordinateSpace.coordinateSpace.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 2;
  return result;
}

double protocol witness for CoordinateSpaceProtocol.coordinateSpace.getter in conformance GlobalCoordinateSpace@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 2;
  return result;
}

uint64_t specialized static CoordinateSpace.Name.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _BYTE v11[48];
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  outlined init with copy of CoordinateSpace.Name(a1, (uint64_t)v11);
  outlined init with copy of CoordinateSpace.Name(a2, (uint64_t)v12);
  if ((v11[40] & 1) != 0)
  {
    outlined init with copy of CoordinateSpace.Name((uint64_t)v11, (uint64_t)v9);
    if (v14 == 1)
    {
      v3 = *(_QWORD *)&v9[0] == *(_QWORD *)&v12[0];
LABEL_8:
      outlined destroy of CoordinateSpace.Name((uint64_t)v11);
      return v3 & 1;
    }
  }
  else
  {
    outlined init with copy of CoordinateSpace.Name((uint64_t)v11, (uint64_t)v9);
    if ((v14 & 1) == 0)
    {
      v7[0] = v9[0];
      v7[1] = v9[1];
      v8 = v10;
      v5[0] = v12[0];
      v5[1] = v12[1];
      v6 = v13;
      v3 = MEMORY[0x23B7C6C4C](v7, v5);
      outlined destroy of AnyHashable((uint64_t)v5);
      outlined destroy of AnyHashable((uint64_t)v7);
      goto LABEL_8;
    }
    outlined destroy of AnyHashable((uint64_t)v9);
  }
  outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)v11, &lazy cache variable for type metadata for (CoordinateSpace.Name, CoordinateSpace.Name));
  v3 = 0;
  return v3 & 1;
}

uint64_t specialized static CoordinateSpace.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  int8x16_t v4;
  int8x16_t v5;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _QWORD v13[5];
  char v14;
  _BYTE v15[40];
  char v16;

  outlined init with copy of CoordinateSpace(a1, (uint64_t)v13);
  outlined init with copy of CoordinateSpace(a2, (uint64_t)v15);
  if (!v14)
  {
    outlined init with copy of CoordinateSpace((uint64_t)v13, (uint64_t)v11);
    if (!v16)
    {
      v9[0] = v11[0];
      v9[1] = v11[1];
      v10 = v12;
      v7[0] = *(_OWORD *)v15;
      v7[1] = *(_OWORD *)&v15[16];
      v8 = *(_QWORD *)&v15[32];
      v3 = MEMORY[0x23B7C6C4C](v9, v7);
      outlined destroy of AnyHashable((uint64_t)v7);
      outlined destroy of AnyHashable((uint64_t)v9);
      goto LABEL_13;
    }
    outlined destroy of AnyHashable((uint64_t)v11);
    goto LABEL_16;
  }
  if (v14 != 1)
  {
    if (v13[3] | v13[4] | v13[0] | v13[2] | v13[1])
    {
      if (v16 != 2)
        goto LABEL_16;
      if (*(_QWORD *)v15 != 1)
        goto LABEL_16;
      v4 = vorrq_s8(*(int8x16_t *)&v15[8], *(int8x16_t *)&v15[24]);
      if (vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)))
        goto LABEL_16;
    }
    else
    {
      if (v16 != 2)
        goto LABEL_16;
      v5 = vorrq_s8(*(int8x16_t *)&v15[8], *(int8x16_t *)&v15[24]);
      if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | *(_QWORD *)v15)
        goto LABEL_16;
    }
    outlined destroy of CoordinateSpace((uint64_t)v13);
    v3 = 1;
    return v3 & 1;
  }
  outlined init with copy of CoordinateSpace((uint64_t)v13, (uint64_t)v11);
  if (v16 != 1)
  {
LABEL_16:
    outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)v13, &lazy cache variable for type metadata for (CoordinateSpace, CoordinateSpace));
    v3 = 0;
    return v3 & 1;
  }
  v3 = *(_QWORD *)&v11[0] == *(_QWORD *)v15;
LABEL_13:
  outlined destroy of CoordinateSpace((uint64_t)v13);
  return v3 & 1;
}

uint64_t outlined assign with take of CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  assignWithTake for CoordinateSpace.Name(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpace and conformance CoordinateSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace;
  if (!lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CoordinateSpace, &type metadata for CoordinateSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace);
  }
  return result;
}

uint64_t destroy for CoordinateSpace(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for CoordinateSpace(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for CoordinateSpace(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for CoordinateSpace(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

ValueMetadata *type metadata accessor for CoordinateSpace()
{
  return &type metadata for CoordinateSpace;
}

ValueMetadata *type metadata accessor for CoordinateSpace.ID()
{
  return &type metadata for CoordinateSpace.ID;
}

uint64_t destroy for CoordinateSpace.Name(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 != 1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = 1;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    v4 = 0;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      v6 = 0;
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t assignWithTake for CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

ValueMetadata *type metadata accessor for CoordinateSpace.Name()
{
  return &type metadata for CoordinateSpace.Name;
}

uint64_t dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t destroy for NamedCoordinateSpace(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for NamedCoordinateSpace(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for NamedCoordinateSpace(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name(a1);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v4 = *a2;
      v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

_OWORD *assignWithTake for NamedCoordinateSpace(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name((uint64_t)a1);
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

ValueMetadata *type metadata accessor for NamedCoordinateSpace()
{
  return &type metadata for NamedCoordinateSpace;
}

ValueMetadata *type metadata accessor for LocalCoordinateSpace()
{
  return &type metadata for LocalCoordinateSpace;
}

ValueMetadata *type metadata accessor for GlobalCoordinateSpace()
{
  return &type metadata for GlobalCoordinateSpace;
}

uint64_t outlined destroy of (CoordinateSpace, CoordinateSpace)(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for (CGFloat, CGFloat)(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ClosedRange<>.minimumValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9[2];
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  type metadata accessor for AccessibilityNumeric();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v9, (uint64_t)v11);
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7) & 1) != 0)
    {
      outlined init with copy of AnyTrackedValue((uint64_t)v11, a2);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    result = outlined destroy of AccessibilityNumeric?((uint64_t)v9);
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

unint64_t type metadata accessor for AccessibilityNumeric()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AccessibilityNumeric;
  if (!lazy cache variable for type metadata for AccessibilityNumeric)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric);
  }
  return result;
}

uint64_t outlined destroy of AccessibilityNumeric?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AccessibilityNumeric?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ClosedRange<>.maximumValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12[2];
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2 + *(int *)(v7 + 36), v4, v5);
  type metadata accessor for AccessibilityNumeric();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v12, (uint64_t)v14);
    v9 = v15;
    v10 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10) & 1) != 0)
    {
      outlined init with copy of AnyTrackedValue((uint64_t)v14, a2);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    result = outlined destroy of AccessibilityNumeric?((uint64_t)v12);
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t AccessibilityNumeric<>.isValidMinValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24);
  if (Numeric.isNaN.getter() || (Numeric.isFinite.getter(a1, v6) & 1) == 0)
  {
    v7 = 0;
  }
  else if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0
         && dispatch thunk of static FixedWidthInteger.bitWidth.getter() != 8)
  {
    dispatch thunk of static FixedWidthInteger.min.getter();
    v7 = dispatch thunk of static Comparable.> infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    v7 = 1;
  }
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  char v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - v6;
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isSignalingNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isFinite.getter() & 1) == 0)
  {
    v9 = 0;
  }
  else
  {
    dispatch thunk of static FloatingPoint.greatestFiniteMagnitude.getter();
    dispatch thunk of RawRepresentable.init(rawValue:)();
    v8 = *(void (**)(char *, uint64_t))(v2 + 8);
    v8(v4, a1);
    v9 = dispatch thunk of static Comparable.> infix(_:_:)();
    v8(v7, a1);
  }
  return v9 & 1;
}

uint64_t AccessibilityNumeric<>.isValidMaxValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24);
  if (Numeric.isNaN.getter() || (Numeric.isFinite.getter(a1, v6) & 1) == 0)
  {
    v7 = 0;
  }
  else
  {
    dispatch thunk of static FixedWidthInteger.max.getter();
    v7 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isSignalingNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isFinite.getter() & 1) == 0)
  {
    v5 = 0;
  }
  else
  {
    dispatch thunk of static FloatingPoint.greatestFiniteMagnitude.getter();
    v5 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return v5 & 1;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int.asNumber()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  Swift::Bool v3;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithInteger_, v1);
  result.value.base.super.super.isa = v2;
  result.is_nil = v3;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Int()
{
  _QWORD *v0;

  return *v0 != 0x8000000000000000;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int()
{
  _QWORD *v0;

  return *v0 != 0x7FFFFFFFFFFFFFFFLL;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithInteger_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int8.asNumber()()
{
  char v0;
  objc_class **v1;
  objc_class **v2;
  objc_class *v3;
  Swift::Bool v4;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = v1;
  v3 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithChar_, v0);
  *v2 = v3;
  result.value.base.super.super.isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int8()
{
  unsigned __int8 *v0;

  return *v0 != 127;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int8@<X0>(_QWORD *a1@<X8>)
{
  char *v1;
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithChar_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int16.asNumber()()
{
  __int16 v0;
  objc_class **v1;
  objc_class **v2;
  objc_class *v3;
  Swift::Bool v4;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = v1;
  v3 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithShort_, v0);
  *v2 = v3;
  result.value.base.super.super.isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Int16()
{
  __int16 *v0;

  return *v0 != -32768;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int16()
{
  unsigned __int16 *v0;

  return *v0 != 0x7FFF;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int16@<X0>(_QWORD *a1@<X8>)
{
  __int16 *v1;
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithShort_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int32.asNumber()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  Swift::Bool v3;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithInt_, v1);
  result.value.base.super.super.isa = v2;
  result.is_nil = v3;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Int32()
{
  _DWORD *v0;

  return *v0 != 0x80000000;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int32()
{
  _DWORD *v0;

  return *v0 != 0x7FFFFFFF;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int32@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int32((SEL *)&selRef_initWithInt_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int64.asNumber()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  Swift::Bool v3;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithLongLong_, v1);
  result.value.base.super.super.isa = v2;
  result.is_nil = v3;
  return result;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int64@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithLongLong_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt.asNumber()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  Swift::Bool v3;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithUnsignedInteger_, v1);
  result.value.base.super.super.isa = v2;
  result.is_nil = v3;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt()
{
  _QWORD *v0;

  return *v0 != -1;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithUnsignedInteger_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt8.asNumber()()
{
  unsigned __int8 v0;
  objc_class **v1;
  objc_class **v2;
  objc_class *v3;
  Swift::Bool v4;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = v1;
  v3 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedChar_, v0);
  *v2 = v3;
  result.value.base.super.super.isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt8()
{
  unsigned __int8 *v0;

  return *v0 != 255;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt8@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedChar_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt16.asNumber()()
{
  unsigned __int16 v0;
  objc_class **v1;
  objc_class **v2;
  objc_class *v3;
  Swift::Bool v4;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = v1;
  v3 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedShort_, v0);
  *v2 = v3;
  result.value.base.super.super.isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt16()
{
  __int16 *v0;

  return *v0 != -1;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt16@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int16 *v1;
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedShort_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt32.asNumber()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  Swift::Bool v3;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithUnsignedInt_, v1);
  result.value.base.super.super.isa = v2;
  result.is_nil = v3;
  return result;
}

id Int32.asNumber()@<X0>(uint64_t a1@<X0>, SEL *a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), *a2, a1);
  *a3 = result;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt32()
{
  _DWORD *v0;

  return *v0 != -1;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt32@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int32((SEL *)&selRef_initWithUnsignedInt_, a1);
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int32@<X0>(SEL *a1@<X2>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), *a1, *v2);
  *a2 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt64.asNumber()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  Swift::Bool v3;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithUnsignedLongLong_, v1);
  result.value.base.super.super.isa = v2;
  result.is_nil = v3;
  return result;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt64@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithUnsignedLongLong_, a1);
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int@<X0>(SEL *a1@<X2>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), *a1, *v2);
  *a2 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Double.asNumber()()
{
  objc_class **v0;
  double v1;
  objc_class **v2;
  objc_class *v3;
  Swift::Bool v4;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = v0;
  v3 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v1);
  *v2 = v3;
  result.value.base.super.super.isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Double()
{
  double *v0;

  return *v0 > -1.79769313e308 && (~*(_QWORD *)v0 & 0x7FF0000000000000) != 0;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Double()
{
  double *v0;

  return *v0 < 1.79769313e308 && (~*(_QWORD *)v0 & 0x7FF0000000000000) != 0;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Double@<X0>(_QWORD *a1@<X8>)
{
  double *v1;
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Float.asNumber()()
{
  objc_class **v0;
  int v1;
  int v2;
  objc_class **v3;
  id v4;
  double v5;
  objc_class *v6;
  Swift::Bool v7;
  SwiftUI::AccessibilityNumber_optional result;

  v2 = v1;
  v3 = v0;
  v4 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
  LODWORD(v5) = v2;
  v6 = (objc_class *)objc_msgSend(v4, sel_initWithFloat_, v5);
  *v3 = v6;
  result.value.base.super.super.isa = v6;
  result.is_nil = v7;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Float()
{
  float *v0;

  return *v0 > -3.4028e38 && (~*(_DWORD *)v0 & 0x7F800000) != 0;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Float()
{
  float *v0;

  return *v0 < 3.4028e38 && (~*(_DWORD *)v0 & 0x7F800000) != 0;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Float@<X0>(_QWORD *a1@<X8>)
{
  int *v1;
  int v3;
  id v4;
  double v5;
  id result;

  v3 = *v1;
  v4 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
  LODWORD(v5) = v3;
  result = objc_msgSend(v4, sel_initWithFloat_, v5);
  *a1 = result;
  return result;
}

double AccessibilityValueStorage.init<A>(_:from:to:description:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(char *, uint64_t);
  int v46;
  uint64_t v47;
  id v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  void (*v58)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  double result;
  _QWORD v72[2];
  void (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v78 = a7;
  v75 = a5;
  v74 = a4;
  v81 = a3;
  v82 = a2;
  v79 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v15 = (char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v72 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v72 - v20;
  MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(a9 + 32) = 0;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  v80 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a8);
  v25 = type metadata accessor for AccessibilityNumeric();
  v26 = swift_dynamicCast();
  v77 = a1;
  v76 = a6;
  if ((v26 & 1) != 0)
  {
    v28 = *((_QWORD *)&v90 + 1);
    v27 = v91;
    __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v27 + 24))(&v83, v28, v27);
    v29 = (void *)v83;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
    if (v29)
    {
      v72[1] = v25;
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
      v31 = v30((uint64_t)v82, 1, a8);
      v32 = v79;
      v73 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v73(v21, (uint64_t)v81, v79);
      if (v31 == 1 && v30((uint64_t)v21, 1, a8) == 1)
      {
        v33 = *(void (**)(char *, uint64_t))(v13 + 8);
        v33(v21, v32);
        v87 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>();
        v88 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>);
        *(_QWORD *)&v86 = v29;
        *(_QWORD *)&v85 = 0;
        v83 = 0u;
        v84 = 0u;
        v34 = v29;
        outlined assign with copy of AnyAccessibilityValue?((uint64_t)&v86, (uint64_t)&v83);
        v35 = v78;
        if (v78)
        {
          type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v36 = swift_allocObject();
          *(_OWORD *)(v36 + 16) = xmmword_23527E860;
          v37 = v75;
          *(_QWORD *)(v36 + 32) = v74;
          *(_QWORD *)(v36 + 40) = v37;
          *(_BYTE *)(v36 + 48) = v76 & 1;
          *(_QWORD *)(v36 + 56) = v35;
        }
        else
        {
          v36 = MEMORY[0x24BEE4AF8];
        }
        v69 = v77;
        outlined destroy of AnyAccessibilityValue?((uint64_t)&v86);
        *((_QWORD *)&v85 + 1) = v36;
        v89 = v83;
        v90 = v84;
        v91 = v85;

        v33(v81, v32);
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v69, a8);
        v33(v82, v32);
        goto LABEL_32;
      }
      v45 = *(void (**)(char *, uint64_t))(v13 + 8);
      v45(v21, v32);
      v73(v18, (uint64_t)v82, v32);
      v72[0] = v30;
      v46 = v30((uint64_t)v18, 1, a8);
      v47 = v32;
      v48 = v29;
      if (v46 == 1)
      {
        v45(v18, v32);
        v49 = v45;
      }
      else
      {
        v49 = v45;
        if (swift_dynamicCast())
        {
          v50 = *((_QWORD *)&v90 + 1);
          v51 = (unsigned int (*)(char *, uint64_t, uint64_t))v72[0];
          if (*((_QWORD *)&v90 + 1))
          {
            v52 = v91;
            __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v52 + 24))(&v83, v50, v52);
            v51 = (unsigned int (*)(char *, uint64_t, uint64_t))v72[0];
            v53 = (void *)v83;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
            goto LABEL_19;
          }
LABEL_18:
          outlined destroy of AccessibilityNumeric?((uint64_t)&v89);
          v53 = 0;
LABEL_19:
          v73(v15, (uint64_t)v81, v47);
          if (v51(v15, 1, a8) == 1)
          {
            v49(v15, v47);
          }
          else if (swift_dynamicCast())
          {
            v54 = *((_QWORD *)&v90 + 1);
            v55 = v78;
            if (*((_QWORD *)&v90 + 1))
            {
              v56 = v49;
              v57 = v91;
              __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
              v58 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v57 + 24);
              v59 = v57;
              v49 = v56;
              v58(&v83, v54, v59);
              v60 = (void *)v83;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
LABEL_26:
              v87 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>();
              v88 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>);
              v61 = (_QWORD *)swift_allocObject();
              *(_QWORD *)&v86 = v61;
              v61[2] = v48;
              v61[3] = v53;
              v61[4] = v60;
              v61[5] = 0;
              *(_QWORD *)&v85 = 0;
              v83 = 0u;
              v84 = 0u;
              v62 = v60;
              v63 = v48;
              v64 = v53;
              outlined assign with copy of AnyAccessibilityValue?((uint64_t)&v86, (uint64_t)&v83);
              if (v55)
              {
                type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                v65 = swift_allocObject();
                *(_OWORD *)(v65 + 16) = xmmword_23527E860;
                v66 = v75;
                *(_QWORD *)(v65 + 32) = v74;
                *(_QWORD *)(v65 + 40) = v66;
                *(_BYTE *)(v65 + 48) = v76 & 1;
                *(_QWORD *)(v65 + 56) = v55;
              }
              else
              {
                v65 = MEMORY[0x24BEE4AF8];
              }
              v67 = v77;
              outlined destroy of AnyAccessibilityValue?((uint64_t)&v86);
              *((_QWORD *)&v85 + 1) = v65;
              v89 = v83;
              v90 = v84;
              v91 = v85;

              v68 = v79;
              v49(v81, v79);
              (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v67, a8);
              v49(v82, v68);
              goto LABEL_32;
            }
LABEL_25:
            outlined destroy of AccessibilityNumeric?((uint64_t)&v89);
            v60 = 0;
            goto LABEL_26;
          }
          *(_QWORD *)&v91 = 0;
          v89 = 0u;
          v90 = 0u;
          v55 = v78;
          goto LABEL_25;
        }
      }
      *(_QWORD *)&v91 = 0;
      v89 = 0u;
      v90 = 0u;
      v51 = (unsigned int (*)(char *, uint64_t, uint64_t))v72[0];
      goto LABEL_18;
    }
  }
  else
  {
    *(_QWORD *)&v91 = 0;
    v89 = 0u;
    v90 = 0u;
    outlined destroy of AccessibilityNumeric?((uint64_t)&v89);
  }
  *(_QWORD *)&v89 = 0;
  *((_QWORD *)&v89 + 1) = 0xE000000000000000;
  v38 = v77;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v39 = v89;
  v87 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>();
  v88 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>);
  v86 = v39;
  *(_QWORD *)&v85 = 0;
  v83 = 0u;
  v84 = 0u;
  swift_bridgeObjectRetain();
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)&v86, (uint64_t)&v83);
  v40 = v78;
  if (v78)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_23527E860;
    v42 = v75;
    *(_QWORD *)(v41 + 32) = v74;
    *(_QWORD *)(v41 + 40) = v42;
    *(_BYTE *)(v41 + 48) = v76 & 1;
    *(_QWORD *)(v41 + 56) = v40;
  }
  else
  {
    v41 = MEMORY[0x24BEE4AF8];
  }
  v43 = v79;
  outlined destroy of AnyAccessibilityValue?((uint64_t)&v86);
  *((_QWORD *)&v85 + 1) = v41;
  v89 = v83;
  v90 = v84;
  v91 = v85;
  swift_bridgeObjectRelease();
  v44 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v44((uint64_t)v81, v43);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v38, a8);
  v44((uint64_t)v82, v43);
LABEL_32:
  outlined destroy of AnyAccessibilityValue?(a9);
  v70 = v90;
  *(_OWORD *)a9 = v89;
  *(_OWORD *)(a9 + 16) = v70;
  result = *(double *)&v91;
  *(_OWORD *)(a9 + 32) = v91;
  return result;
}

uint64_t outlined destroy of AnyAccessibilityValue?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2351566A0()
{
  id *v0;

  return swift_deallocObject();
}

uint64_t dispatch thunk of AccessibilityNumeric.isValidMinValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AccessibilityNumeric.isValidMaxValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AccessibilityNumeric.asNumber()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void _SaturationEffect.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_SaturationEffect.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _SaturationEffect.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*_SaturationEffect.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _SaturationEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 7;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_2351567C0()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

BOOL static _SaturationEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _SaturationEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 7;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t View.saturation(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return View.modifier<A>(_:)(&v4, a1, &type metadata for _SaturationEffect, a2);
}

double sub_2351568D0@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_2351568DC(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _SaturationEffect()
{
  return &type metadata for _SaturationEffect;
}

uint64_t sub_2351568F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _SaturationEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _SaturationEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t Color.opacity(_:)(uint64_t a1, double a2)
{
  uint64_t v4;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  swift_retain();
  return v4;
}

uint64_t Color.multiplyingHierarchicalOpacity(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.HierarchicalOpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor, (uint64_t)&unk_25064A990);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor;
  if (!lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.HierarchicalOpacityColor, &unk_25064A990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor;
  if (!lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.HierarchicalOpacityColor, &unk_25064A990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor;
  if (!lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.HierarchicalOpacityColor, &unk_25064A990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor);
  }
  return result;
}

uint64_t Color.OpacityColor.description.getter(uint64_t result, double a2)
{
  double v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;

  v2 = a2 * 100.0 + 0.5;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
  {
    v3 = result;
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v4._countAndFlagsBits = 8229;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144);
    v6 = swift_retain();
    v7._countAndFlagsBits = v5(v6);
    String.append(_:)(v7);
    swift_release();
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance Color.OpacityColor(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v4;

  v2 = *v1;
  v4 = *a1;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v2 + 104))(&v4);
}

CGColorRef protocol witness for ColorProvider.staticColor.getter in conformance Color.OpacityColor()
{
  double *v0;
  double v1;
  CGColor *v2;
  CGColor *v3;
  CGFloat Alpha;
  CGColorRef result;
  CGColorRef v6;

  v1 = v0[1];
  v2 = (CGColor *)(*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
  if (!v2)
    return 0;
  v3 = v2;
  Alpha = CGColorGetAlpha(v2);
  result = CGColorCreateCopyWithAlpha(v3, v1 * Alpha);
  if (result)
  {
    v6 = result;

    return v6;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color.OpacityColor()
{
  uint64_t v0;

  return Color.OpacityColor.description.getter(*(_QWORD *)v0, *(double *)(v0 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.OpacityColor()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.OpacityColor()
{
  _QWORD *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = v0[1];
  (*(void (**)(void))(*(_QWORD *)*v0 + 136))();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.OpacityColor()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t Color.HierarchicalOpacityColor.description.getter(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  Swift::String v6;

  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144);
  v5 = swift_retain();
  v6._countAndFlagsBits = v4(v5);
  String.append(_:)(v6);
  swift_release();
  swift_bridgeObjectRelease();
  return 0x206C6576654CLL;
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance Color.HierarchicalOpacityColor(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v2 = v1[1];
  v5 = a1[1];
  v7 = *a1;
  v4 = v7;
  v8 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 152))(v2, &v7);
  v7 = v4;
  v8 = v5;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v3 + 104))(&v7);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color.HierarchicalOpacityColor()
{
  uint64_t *v0;

  return Color.HierarchicalOpacityColor.description.getter(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.HierarchicalOpacityColor()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.HierarchicalOpacityColor()
{
  _QWORD *v0;
  Swift::UInt v1;

  v1 = v0[1];
  (*(void (**)(void))(*(_QWORD *)*v0 + 136))();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.HierarchicalOpacityColor()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Color.HierarchicalOpacityColor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return (*a1 == *a2 || ((*(uint64_t (**)(void))(*(_QWORD *)*a1 + 88))() & 1) != 0) && v2 == v3;
}

uint64_t Color.over(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.DestinationOverProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider, (uint64_t)&unk_25064AE08);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  swift_retain();
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider;
  if (!lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DestinationOverProvider, &unk_25064AE08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider;
  if (!lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DestinationOverProvider, &unk_25064AE08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider;
  if (!lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DestinationOverProvider, &unk_25064AE08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider);
  }
  return result;
}

void protocol witness for ColorProvider.resolve(in:) in conformance Color.DestinationOverProvider(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *v1;
  v3 = v1[1];
  v5 = a1[1];
  v17 = *a1;
  v4 = v17;
  v18 = v5;
  v6 = (*(float (**)(uint64_t *))(*(_QWORD *)v2 + 104))(&v17);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v17 = v4;
  v18 = v5;
  v13 = (*(float (**)(uint64_t *))(*(_QWORD *)v3 + 104))(&v17);
  Color.Resolved.over(_:)(v13, v14, v15, v16, v6, v8, v10, v12);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.DestinationOverProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v5);
  v3 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 136);
  swift_retain();
  v3(v5);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color.DestinationOverProvider(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  void (*v4)(uint64_t);

  v3 = v1[1];
  (*(void (**)(void))(*(_QWORD *)*v1 + 136))();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 136);
  swift_retain();
  v4(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.DestinationOverProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v5);
  v3 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 136);
  swift_retain();
  v3(v5);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color.DestinationOverProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if (*a1 != *a2 && ((*(uint64_t (**)(void))(*(_QWORD *)*a1 + 88))() & 1) == 0)
    return 0;
  if (v2 == v3)
    return 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v3) & 1;
}

uint64_t Color.mix(with:by:in:)(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  char v6;
  float v7;
  uint64_t v8;

  v6 = *a2;
  v7 = a4;
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.MixProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider, (uint64_t)&unk_25064AC30);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  *(_BYTE *)(v8 + 32) = v6;
  *(float *)(v8 + 36) = v7;
  swift_retain();
  swift_retain();
  return v8;
}

unint64_t lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider;
  if (!lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.MixProvider, &unk_25064AC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider;
  if (!lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.MixProvider, &unk_25064AC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider;
  if (!lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider)
  {
    result = MEMORY[0x23B7C9C04]("I7:\x1Bxu\t", &unk_25064AC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider);
  }
  return result;
}

uint64_t Color.blend(with:in:by:)(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  char v6;
  float v7;
  uint64_t v8;

  v6 = *a2;
  v7 = a4;
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.MixProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider, (uint64_t)&unk_25064AC30);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  *(_BYTE *)(v8 + 32) = v6;
  *(float *)(v8 + 36) = v7;
  swift_retain();
  swift_retain();
  return v8;
}

void Color.MixProvider.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt32 v4;
  void (*v5)(uint64_t);
  Swift::UInt8 v6;
  void (*v7)(uint64_t);
  Swift::UInt32 v8;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 20);
  v5 = *(void (**)(uint64_t))(**(_QWORD **)v1 + 136);
  v6 = *(_BYTE *)(v1 + 16);
  swift_retain();
  v5(a1);
  swift_release();
  v7 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 136);
  swift_retain();
  v7(a1);
  swift_release();
  Hasher._combine(_:)(v6);
  if ((v4 & 0x7FFFFFFF) != 0)
    v8 = v4;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
}

Swift::Int Color.MixProvider.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v3;
  Swift::UInt8 v4;
  void (*v5)(_BYTE *);
  void (*v6)(_BYTE *);
  Swift::UInt32 v7;
  _BYTE v9[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_DWORD *)v0 + 5);
  v4 = *((_BYTE *)v0 + 16);
  Hasher.init(_seed:)();
  v5 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
  swift_retain();
  v5(v9);
  swift_release();
  v6 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 136);
  swift_retain();
  v6(v9);
  swift_release();
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFF) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void protocol witness for ColorProvider.resolve(in:) in conformance Color.MixProvider(uint64_t *a1)
{
  float *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int8x16_t v14;
  float v15;
  __int32 v16;
  int8x16_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)v1;
  v5 = *((_QWORD *)v1 + 1);
  v6 = v1[5];
  v22 = *((_BYTE *)v1 + 16);
  v20 = v2;
  v21 = v3;
  v7 = (*(float (**)(uint64_t *))(*(_QWORD *)v4 + 104))(&v20);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v20 = v2;
  v21 = v3;
  *(double *)v14.i64 = (*(double (**)(uint64_t *))(*(_QWORD *)v5 + 104))(&v20);
  v15 = *(float *)v14.i32;
  v17.i32[0] = v16;
  *(float *)v14.i32 = v7;
  ResolvedGradient.ColorSpace.mix(_:_:by:)(v14, v9, v11, v13, v15, v17, v18, v19, v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.MixProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v3;
  Swift::UInt8 v4;
  void (*v5)(_BYTE *);
  void (*v6)(_BYTE *);
  Swift::UInt32 v7;
  _BYTE v9[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_DWORD *)v0 + 5);
  v4 = *((_BYTE *)v0 + 16);
  Hasher.init(_seed:)();
  v5 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
  swift_retain();
  v5(v9);
  swift_release();
  v6 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 136);
  swift_retain();
  v6(v9);
  swift_release();
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFF) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t Color._settingOpacity(_:)(uint64_t a1, double a2)
{
  float v3;
  uint64_t v4;

  v3 = a2;
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.SettingOpacityProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider, (uint64_t)&unk_25064B188);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(float *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider;
  if (!lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.SettingOpacityProvider, &unk_25064B188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider;
  if (!lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.SettingOpacityProvider, &unk_25064B188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider;
  if (!lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.SettingOpacityProvider, &unk_25064B188);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider);
  }
  return result;
}

Swift::Int Color.SettingOpacityProvider.hashValue.getter(uint64_t a1, float a2)
{
  Swift::UInt32 v4;
  _BYTE v6[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 136))(v6);
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0)
    v4 = LODWORD(a2);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance Color.SettingOpacityProvider(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v4;

  v2 = *v1;
  v4 = *a1;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v2 + 104))(&v4);
}

CGColorRef protocol witness for ColorProvider.staticColor.getter in conformance Color.SettingOpacityProvider()
{
  float *v0;
  float v1;
  CGColor *v2;
  CGColor *v3;
  CGColorRef CopyWithAlpha;

  v1 = v0[2];
  v2 = (CGColor *)(*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
  if (!v2)
    return 0;
  v3 = v2;
  CopyWithAlpha = CGColorCreateCopyWithAlpha(v2, v1);

  return CopyWithAlpha;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.SettingOpacityProvider()
{
  uint64_t v0;

  return Color.SettingOpacityProvider.hashValue.getter(*(_QWORD *)v0, *(float *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance Color.SettingOpacityProvider()
{
  _DWORD *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = v0[2];
  (*(void (**)(void))(**(_QWORD **)v0 + 136))();
  if ((v1 & 0x7FFFFFFF) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.SettingOpacityProvider()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 2);
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v5);
  if ((v2 & 0x7FFFFFFF) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Color.SettingOpacityProvider(float *a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = a1[2];
  v3 = *(float *)(a2 + 8);
  return (*(_QWORD *)a1 == *(_QWORD *)a2 || ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))() & 1) != 0) && v2 == v3;
}

void Color.vibrancy(_:tertiaryOpacity:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t assignWithCopy for Color.SettingOpacityProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Color.SettingOpacityProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

void *type metadata accessor for Color.SettingOpacityProvider()
{
  return &unk_25064B188;
}

uint64_t initializeBufferWithCopyOfBuffer for Color.MixProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Color.MixProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for Color.MixProvider(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

void *type metadata accessor for Color.MixProvider()
{
  return &unk_25064AC30;
}

void *type metadata accessor for Color.DestinationOverProvider()
{
  return &unk_25064AE08;
}

void *type metadata accessor for Color.HierarchicalOpacityColor()
{
  return &unk_25064A990;
}

ValueMetadata *type metadata accessor for Color.OpacityColor()
{
  return &type metadata for Color.OpacityColor;
}

unint64_t instantiation function for generic protocol witness table for Color.SettingOpacityProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.MixProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.DestinationOverProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.HierarchicalOpacityColor(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.OpacityColor(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

BOOL specialized static Color.MixProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  int v6;
  float v7;
  char v8;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(float *)(a1 + 20);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(float *)(a2 + 20);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 && ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))() & 1) == 0)
    return 0;
  if (v2 == v5)
  {
    if (v3 == v6)
      return v4 == v7;
    return 0;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v5);
  result = 0;
  if ((v8 & 1) != 0 && v3 == v6)
    return v4 == v7;
  return result;
}

BOOL static TextAlignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

double TextAlignment.value.getter(char a1)
{
  return dbl_2352D0090[a1];
}

void TextAlignment.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

void *static TextAlignment.allCases.getter()
{
  return &outlined read-only object #0 of static TextAlignment.allCases.getter;
}

Swift::Int TextAlignment.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance TextAlignment(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance TextAlignment;
}

uint64_t static TextAlignment.unwrap(codingProxy:)(char a1)
{
  if (a1 == 2)
    return 2;
  else
    return a1 == 1;
}

unsigned __int8 *protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance TextAlignment@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;

  v2 = *result;
  if (v2 == 2)
    v3 = 2;
  else
    v3 = v2 == 1;
  *a2 = v3;
  return result;
}

uint64_t TextAlignment.protobufValue.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

SwiftUI::TextAlignment_optional __swiftcall TextAlignment.init(protobufValue:)(Swift::UInt protobufValue)
{
  if (protobufValue >= 4)
    return (SwiftUI::TextAlignment_optional)3;
  else
    return (SwiftUI::TextAlignment_optional)(0x2010003u >> (8 * protobufValue));
}

unint64_t lazy protocol witness table accessor for type TextAlignment and conformance TextAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment;
  if (!lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextAlignment, &type metadata for TextAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [TextAlignment] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [TextAlignment] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TextAlignment] and conformance [A])
  {
    type metadata accessor for [TextAlignment]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TextAlignment] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [TextAlignment]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [TextAlignment])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [TextAlignment]);
  }
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in TextAlignment()
{
  return MEMORY[0x24BEE4290];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in TextAlignment()
{
  return MEMORY[0x24BEE4268];
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance TextAlignment@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = 0x2010003u >> (8 * result);
  if (result >= 4)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for TextAlignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23515821C + 4 * byte_2352CFFB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235158250 + 4 * byte_2352CFFB0[v4]))();
}

uint64_t sub_235158250(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235158258(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235158260);
  return result;
}

uint64_t sub_23515826C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235158274);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_235158278(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235158280(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextAlignment()
{
  return &type metadata for TextAlignment;
}

double static Angle.zero.getter()
{
  return 0.0;
}

BOOL static Angle.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double Angle.animatableData.getter(double a1)
{
  return a1 * 128.0;
}

double Angle.animatableData.setter(double a1)
{
  double *v1;
  double result;

  result = a1 * 0.0078125;
  *v1 = result;
  return result;
}

double Angle.degrees.getter(double a1)
{
  return a1 * 57.2957795;
}

SwiftUI::Angle __swiftcall Angle.init()()
{
  return 0;
}

SwiftUI::Angle __swiftcall Angle.init(degrees:)(Swift::Double degrees)
{
  SwiftUI::Angle result;

  result.radians = degrees * 0.0174532925;
  return result;
}

double static Angle.degrees(_:)(double a1)
{
  return a1 * 0.0174532925;
}

void Angle.radians.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Angle.radians.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Angle.degrees.setter(double a1)
{
  double *v1;
  double result;

  result = a1 * 0.0174532925;
  *v1 = result;
  return result;
}

double (*Angle.degrees.modify(uint64_t a1))(uint64_t a1)
{
  double *v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 57.2957795;
  return Angle.degrees.modify;
}

double Angle.degrees.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1 * 0.0174532925;
  **(double **)(a1 + 8) = result;
  return result;
}

BOOL static Angle.< infix(_:_:)(double a1, double a2)
{
  return a1 < a2;
}

void Angle.hash(into:)(double a1)
{
  Swift::UInt64 v1;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)&a1;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int Angle.hashValue.getter(double a1)
{
  Swift::UInt64 v2;

  Hasher.init(_seed:)();
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Angle(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Angle(double *a1, double *a2)
{
  return *a2 < *a1;
}

double (*Angle.animatableData.modify(uint64_t a1))(uint64_t a1)
{
  double *v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 128.0;
  return Angle.animatableData.modify;
}

double Angle.animatableData.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1 * 0.0078125;
  **(double **)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Angle and conformance Angle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Angle and conformance Angle;
  if (!lazy protocol witness table cache variable for type Angle and conformance Angle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Angle, &type metadata for Angle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Angle and conformance Angle);
  }
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance Angle@<D0>(double *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1 * 128.0;
  *a1 = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance Angle(double *a1)
{
  double *v1;
  double result;

  result = *a1 * 0.0078125;
  *v1 = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance Angle(uint64_t a1))()
{
  double *v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 128.0;
  return protocol witness for Animatable.animatableData.modify in conformance Angle;
}

double sub_23515852C@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *a1 * 57.2957795;
  *a2 = result;
  return result;
}

double sub_235158544(double *a1, double *a2)
{
  double result;

  result = *a1 * 0.0174532925;
  *a2 = result;
  return result;
}

double sub_23515855C@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *a1 * 128.0;
  *a2 = result;
  return result;
}

double sub_235158574(double *a1, double *a2)
{
  double result;

  result = *a1 * 0.0078125;
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for Angle()
{
  return &type metadata for Angle;
}

uint64_t View.ignoresSafeArea(_:edges:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;

  v5 = a1;
  v6 = a2;
  return View.modifier<A>(_:)(&v5, a3, &type metadata for _SafeAreaRegionsIgnoringLayout, a4);
}

uint64_t _SafeAreaIgnoringLayout.edges.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SafeAreaIgnoringLayout.edges.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _SafeAreaIgnoringLayout.placement(of:in:)@<D0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;

  v2 = *((_DWORD *)a1 + 6);
  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = v2;
  return _SafeAreaRegionsIgnoringLayout.placement(of:in:)((int *)&v4, -1, a2);
}

double _SafeAreaRegionsIgnoringLayout.placement(of:in:)@<D0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  double v11;
  uint64_t InputValue;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  char v23;
  char v24;
  double v25;
  double result;
  __int128 v27;
  double v28;
  char v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v9 = a1[4];
  v8 = a1[5];
  v10 = a1[6];
  v11 = 0.0;
  if (v10 != *MEMORY[0x24BE096C0])
  {
    InputValue = AGGraphGetInputValue();
    v14 = *(double *)(InputValue + 16);
    v27 = *(_OWORD *)InputValue;
    v28 = v14;
    v30 = v4;
    v31 = v5;
    v32 = v6;
    v33 = v7;
    v34 = v9;
    v35 = v8;
    v36 = v10;
    v11 = SafeAreaInsets.resolve(regions:in:)(a2, &v30);
  }
  v15 = EdgeInsets.in(_:)(v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v30 = v4;
  v31 = v5;
  v32 = v6;
  v33 = v7;
  v34 = v9;
  v35 = v8;
  v36 = v10;
  _PositionAwarePlacementContext.proposedSize.getter((uint64_t)&v27);
  v22 = *(double *)&v27;
  v23 = BYTE8(v27);
  v24 = v29;
  if ((BYTE8(v27) & 1) == 0)
  {
    if (*(double *)&v27 - (0.0 - v17 + 0.0 - v21) < 0.0)
      v22 = 0.0;
    else
      v22 = *(double *)&v27 - (0.0 - v17 + 0.0 - v21);
  }
  v25 = v28;
  if ((v29 & 1) == 0)
  {
    if (v28 - (0.0 - v15 + 0.0 - v19) < 0.0)
      v25 = 0.0;
    else
      v25 = v28 - (0.0 - v15 + 0.0 - v19);
  }
  if (one-time initialization token for topLeading != -1)
    swift_once();
  result = -v17;
  *(double *)a3 = v22;
  *(_BYTE *)(a3 + 8) = v23;
  *(double *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v24;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(double *)(a3 + 48) = -v17;
  *(double *)(a3 + 56) = -v15;
  return result;
}

uint64_t _SafeAreaIgnoringLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *((_DWORD *)a3 + 2);
  v13 = *a3;
  v14 = v7;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

uint64_t _SafeAreaRegionsIgnoringLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *((_DWORD *)a3 + 2);
  v13 = *a3;
  v14 = v7;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

uint64_t _SafeAreaIgnoringLayout.ignoresAutomaticPadding(child:)()
{
  return 1;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _SafeAreaIgnoringLayout@<D0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;

  v2 = *((_DWORD *)a1 + 6);
  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = v2;
  return _SafeAreaRegionsIgnoringLayout.placement(of:in:)((int *)&v4, -1, a2);
}

uint64_t _SafeAreaRegionsIgnoringLayout.regions.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SafeAreaRegionsIgnoringLayout.regions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SafeAreaRegionsIgnoringLayout.edges.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _SafeAreaRegionsIgnoringLayout.edges.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SafeAreaRegionsIgnoringLayout.edges.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SafeAreaRegionsIgnoringLayout.ignoresAutomaticPadding(child:)()
{
  return 1;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _SafeAreaRegionsIgnoringLayout@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return _SafeAreaRegionsIgnoringLayout.placement(of:in:)(a1, *v2, a2);
}

uint64_t View.edgesIgnoringSafeArea(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for _SafeAreaIgnoringLayout, a3);
}

unint64_t instantiation function for generic protocol witness table for _SafeAreaIgnoringLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _SafeAreaRegionsIgnoringLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _SafeAreaIgnoringLayout()
{
  return &type metadata for _SafeAreaIgnoringLayout;
}

ValueMetadata *type metadata accessor for _SafeAreaRegionsIgnoringLayout()
{
  return &type metadata for _SafeAreaRegionsIgnoringLayout;
}

uint64_t sub_235158A6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaIgnoringLayout, a4);
}

uint64_t sub_235158A80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout, a4);
}

void UnsafeHeterogeneousBuffer.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL UnsafeHeterogeneousBuffer.isEmpty.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 12) == 0;
}

void UnsafeHeterogeneousBuffer.append<A>(_:vtable:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __OFADD__(v10, 16);
  v13 = v10 + 16;
  if (v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  v12 = __OFADD__(v13, 15);
  v14 = v13 + 15;
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v15 = v14 & 0xFFFFFFFFFFFFFFF0;
  v16 = UnsafeHeterogeneousBuffer.allocate(bytes:)(v14 & 0xFFFFFFFFFFFFFFF0);
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v15 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v17 = v16;
  *(_QWORD *)v16 = a2;
  *(_DWORD *)(v16 + 8) = v15;
  *(_DWORD *)(v16 + 12) = 0;
  v18 = v16 + 16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v18, v11, a3);
  if (*(_QWORD *)v4)
  {
    v19 = v17 - *(_QWORD *)v4;
    if (v19 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v19 <= 0x7FFFFFFF)
      {
        v20 = *(_DWORD *)(v4 + 12);
        *a4 = v20;
        a4[1] = v19;
        if (!__OFADD__(v20, 1))
        {
          *(_DWORD *)(v4 + 12) = v20 + 1;
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

uint64_t UnsafeHeterogeneousBuffer.subscript.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (*v2)
    *a2 = *v2 + *(int *)(result + 4);
  else
    __break(1u);
  return result;
}

uint64_t _UnsafeHeterogeneousBuffer_Element.address.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Swift::Void __swiftcall UnsafeHeterogeneousBuffer.destroy()()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 3);
  if (v2)
  {
    if (!v1)
    {
      __break(1u);
LABEL_11:
      JUMPOUT(0x23B7C9D54);
    }
    v3 = 0;
    v4 = v2 - 1;
    do
    {
      v7 = (uint64_t *)(v1 + v3);
      if (v4)
        v3 += *((_DWORD *)v7 + 2);
      else
        v3 = 0;
      v5 = v4 | v3;
      v6 = *v7;
      v8 = v7;
      (*(void (**)(uint64_t **))(v6 + 96))(&v8);
      --v4;
    }
    while (v5);
  }
  if (v1)
    goto LABEL_11;
}

uint64_t _UnsafeHeterogeneousBuffer_Element.vtable<A>(as:)()
{
  uint64_t v0;

  return **(_QWORD **)v0;
}

uint64_t _UnsafeHeterogeneousBuffer_Element.flags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)v0 + 12);
}

uint64_t _UnsafeHeterogeneousBuffer_Element.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(*(_QWORD *)v1 + 12) = result;
  return result;
}

uint64_t _UnsafeHeterogeneousBuffer_VTable.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t static _UnsafeHeterogeneousBuffer_VTable.hasType<A>(_:)()
{
  return 0;
}

void static _UnsafeHeterogeneousBuffer_VTable.moveInitialize(elt:from:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static _UnsafeHeterogeneousBuffer_VTable.deinitialize(elt:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _UnsafeHeterogeneousBuffer_Element.body<A>(as:)()
{
  _QWORD *v0;

  return *v0 + 16;
}

uint64_t _sSpsRi_zrlE10initialize2toyxn_tF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
}

BOOL static UnsafeHeterogeneousBuffer.Index.< infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL static UnsafeHeterogeneousBuffer.Index.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

uint64_t UnsafeHeterogeneousBuffer.count.getter()
{
  uint64_t v0;

  return *(int *)(v0 + 12);
}

void UnsafeHeterogeneousBuffer.startIndex.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void UnsafeHeterogeneousBuffer.endIndex.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(unsigned int *)(v1 + 12);
}

int *UnsafeHeterogeneousBuffer.formIndex(after:)(int *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *v1;
  if (*v1)
  {
    v3 = *((_DWORD *)v1 + 3);
    v4 = result[1];
    v5 = *result + 1;
    *result = v5;
    if (v5 == v3)
      result[1] = 0;
    else
      result[1] = *(_DWORD *)(v2 + v4 + 8) + v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *UnsafeHeterogeneousBuffer.index(after:)@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;

  if (*(_QWORD *)v2)
  {
    v3 = *result + 1;
    if (v3 == *(_DWORD *)(v2 + 12))
    {
      *a2 = v3;
      a2[1] = 0;
    }
    else
    {
      v4 = *(_DWORD *)(*(_QWORD *)v2 + (int)result[1] + 8) + result[1];
      *a2 = v3;
      a2[1] = v4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t UnsafeHeterogeneousBuffer.allocate(bytes:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;

  v2 = result;
  v3 = *(_DWORD *)(v1 + 12);
  v4 = *(int *)(v1 + 8);
  if (!v3)
  {
    v6 = 0;
    if (v4 >= result)
      goto LABEL_12;
LABEL_10:
    if (__OFADD__(v6, v4))
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    result = UnsafeHeterogeneousBuffer.growBuffer(by:capacity:)(result, v6 + v4);
LABEL_12:
    if (!*(_QWORD *)v1)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v2 <= 0x7FFFFFFF)
    {
      v8 = *(_DWORD *)(v1 + 8);
      v9 = __OFSUB__(v8, (_DWORD)v2);
      v10 = v8 - v2;
      if (!v9)
      {
        result = *(_QWORD *)v1 + v6;
        *(_DWORD *)(v1 + 8) = v10;
        return result;
      }
      goto LABEL_19;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(_QWORD *)v1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(int *)(*(_QWORD *)v1 + 8 + v5);
      v5 += v7;
      if (!--v3)
        v5 = 0;
      v6 += v7;
    }
    while (v3);
    if (v4 >= result)
      goto LABEL_12;
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t UnsafeHeterogeneousBuffer.growBuffer(by:capacity:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v3 = a2 + result;
  if (__OFADD__(a2, result))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v4 = a2;
  if (2 * a2 <= 64)
    v5 = 64;
  else
    v5 = 2 * a2;
  for (; v5 < v3; v5 *= 2)
    ;
  result = swift_slowAlloc();
  v6 = *(_QWORD **)v2;
  if (*(_QWORD *)v2)
  {
    v21 = v2;
    v22 = result;
    v20 = v4;
    v7 = *(_DWORD *)(v2 + 12);
    if (v7)
    {
      v8 = 0;
      v9 = v7 - 1;
      v10 = *(_QWORD **)v2;
      v11 = (_QWORD *)result;
      do
      {
        if (v9)
          v8 += *(_DWORD *)((char *)v6 + v8 + 8);
        else
          v8 = 0;
        v12 = v9 | v8;
        v13 = v10[1];
        v14 = (int)v13;
        *v11 = *v10;
        v11[1] = v13;
        v15 = *v10;
        v23 = v10;
        v24 = v11;
        (*(void (**)(_QWORD **, _QWORD **))(v15 + 88))(&v24, &v23);
        v10 = (_QWORD *)((char *)v10 + v14);
        v11 = (_QWORD *)((char *)v11 + v14);
        --v9;
      }
      while (v12);
    }
    MEMORY[0x23B7C9D54](v6, -1, -1);
    v4 = v20;
    v2 = v21;
    result = v22;
  }
  *(_QWORD *)v2 = result;
  v16 = v5 - v4;
  if (v5 - v4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_20;
  if (v16 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v17 = *(_DWORD *)(v2 + 8);
  v18 = __OFADD__(v17, (_DWORD)v16);
  v19 = v17 + v16;
  if (!v18)
  {
    *(_DWORD *)(v2 + 8) = v19;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance UnsafeHeterogeneousBuffer(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(unsigned int *)(v1 + 12);
}

_QWORD *protocol witness for Collection.subscript.read in conformance UnsafeHeterogeneousBuffer(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*v2)
  {
    *result = *v2 + *(int *)(a2 + 4);
    return _ViewInputs.base.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

int *protocol witness for Collection.subscript.getter in conformance UnsafeHeterogeneousBuffer@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = *(_DWORD *)(v2 + 12);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *result;
    if ((*result & 0x80000000) == 0)
    {
      v5 = result[2];
      if (v3 >= v5)
      {
        v6 = *(_DWORD *)(v2 + 8);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)v2;
        *(_DWORD *)(a2 + 24) = v6;
        *(_DWORD *)(a2 + 28) = v3;
        v7 = result[1];
        v8 = result[3];
        *(_DWORD *)a2 = v4;
        *(_DWORD *)(a2 + 4) = v7;
        *(_DWORD *)(a2 + 8) = v5;
        *(_DWORD *)(a2 + 12) = v8;
        return result;
      }
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance UnsafeHeterogeneousBuffer(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 12);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v3;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance UnsafeHeterogeneousBuffer()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 12) == 0;
}

int *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance UnsafeHeterogeneousBuffer(int *result, int *a2)
{
  int v2;
  int v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[2];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_DWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance UnsafeHeterogeneousBuffer(_DWORD *result, _DWORD *a2)
{
  if (*result < *a2 || a2[2] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[2] < result[2])
    __break(1u);
  return result;
}

_DWORD *protocol witness for Collection.index(after:) in conformance UnsafeHeterogeneousBuffer@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;

  if (*(_QWORD *)v2)
  {
    v3 = *result + 1;
    if (v3 == *(_DWORD *)(v2 + 12))
    {
      *a2 = v3;
      a2[1] = 0;
    }
    else
    {
      v4 = *(_DWORD *)(*(_QWORD *)v2 + (int)result[1] + 8) + result[1];
      *a2 = v3;
      a2[1] = v4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

int *protocol witness for Collection.formIndex(after:) in conformance UnsafeHeterogeneousBuffer(int *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *v1;
  if (*v1)
  {
    v3 = *((_DWORD *)v1 + 3);
    v4 = result[1];
    v5 = *result + 1;
    *result = v5;
    if (v5 == v3)
      result[1] = 0;
    else
      result[1] = *(_DWORD *)(v2 + v4 + 8) + v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance UnsafeHeterogeneousBuffer@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(double *)(v1 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance UnsafeHeterogeneousBuffer()
{
  uint64_t v0;

  return *(int *)(v0 + 12);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UnsafeHeterogeneousBuffer()
{
  uint64_t v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(v0);
}

uint64_t _UnsafeHeterogeneousBuffer_Element.hasType<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))() & 1;
}

_DWORD *(*_UnsafeHeterogeneousBuffer_Element.flags.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v2 + 12);
  return SecondaryLayerGeometryQuery.$primarySize.modify;
}

uint64_t _UnsafeHeterogeneousBuffer_VTable.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeHeterogeneousBuffer.Index, &type metadata for UnsafeHeterogeneousBuffer.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeHeterogeneousBuffer.Index, &type metadata for UnsafeHeterogeneousBuffer.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeHeterogeneousBuffer, &type metadata for UnsafeHeterogeneousBuffer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer)
  {
    result = MEMORY[0x23B7C9C04]("a4:\x1Bpr\t", &type metadata for UnsafeHeterogeneousBuffer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in UnsafeHeterogeneousBuffer()
{
  return lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<UnsafeHeterogeneousBuffer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE0650], MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in UnsafeHeterogeneousBuffer()
{
  return lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<UnsafeHeterogeneousBuffer> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<UnsafeHeterogeneousBuffer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for DefaultIndices<UnsafeHeterogeneousBuffer>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UnsafeHeterogeneousBuffer()
{
  return lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type IndexingIterator<UnsafeHeterogeneousBuffer> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<UnsafeHeterogeneousBuffer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

void type metadata accessor for DefaultIndices<UnsafeHeterogeneousBuffer>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer();
    v7 = a3(a1, &type metadata for UnsafeHeterogeneousBuffer, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_235159568@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(_QWORD *)result + 12);
  return result;
}

_DWORD *sub_235159578(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a2 + 12) = *result;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeterogeneousBuffer()
{
  return &type metadata for UnsafeHeterogeneousBuffer;
}

ValueMetadata *type metadata accessor for UnsafeHeterogeneousBuffer.Index()
{
  return &type metadata for UnsafeHeterogeneousBuffer.Index;
}

ValueMetadata *type metadata accessor for UnsafeHeterogeneousBuffer.Item()
{
  return &type metadata for UnsafeHeterogeneousBuffer.Item;
}

ValueMetadata *type metadata accessor for _UnsafeHeterogeneousBuffer_Element()
{
  return &type metadata for _UnsafeHeterogeneousBuffer_Element;
}

uint64_t type metadata accessor for _UnsafeHeterogeneousBuffer_VTable()
{
  return objc_opt_self();
}

uint64_t method lookup function for _UnsafeHeterogeneousBuffer_VTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static _UnsafeHeterogeneousBuffer_VTable.hasType<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static _UnsafeHeterogeneousBuffer_VTable.moveInitialize(elt:from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static _UnsafeHeterogeneousBuffer_VTable.deinitialize(elt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t _ConditionalContent<>.init(storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for _ConditionalContent.Storage(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t _ConditionalContent.storage.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for _ConditionalContent.Storage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

uint64_t type metadata accessor for _ConditionalContent.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalContent.Storage);
}

uint64_t static _ConditionalContent<>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v37[2];
  _QWORD v38[2];
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;

  v9 = *a1;
  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v14 = *(_DWORD *)(a2 + 24);
  v13 = *(_DWORD *)(a2 + 28);
  v23 = *(_DWORD *)(a2 + 32);
  v24 = *(_DWORD *)(a2 + 36);
  v25 = *(_QWORD *)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 48);
  v27 = *(_DWORD *)(a2 + 56);
  v28 = *(_DWORD *)(a2 + 60);
  v29 = *(_DWORD *)(a2 + 64);
  v30 = *(_DWORD *)(a2 + 68);
  v31 = *(_DWORD *)(a2 + 72);
  v32 = *(_DWORD *)(a2 + 76);
  v33 = *(_DWORD *)(a2 + 80);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v15 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v17 = type metadata accessor for _ConditionalContent(0, a3, a4, v16);
      static _ConditionalContent.makeConditionalMetadata<A>(_:)(a3, a4, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v59);
      v18 = v59;
      v57 = v60;
      v56 = v59;
      v58 = v61;
      v55 = v9;
      v39 = v10;
      v40 = v11;
      v41 = v12;
      v42 = v14;
      v43 = v13;
      v44 = v23;
      v45 = v24;
      v46 = v25;
      v47 = v26;
      v48 = v27;
      v49 = v28;
      v50 = v29;
      v51 = v30;
      v52 = v31;
      v53 = v32;
      v54 = v33;
      v38[0] = a5;
      v38[1] = a6;
      v19 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v17, v38);
      static DynamicView.makeDynamicView(metadata:view:inputs:)((uint64_t)&v56, &v55, (uint64_t)&v39, v17, v19, a7);
      outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v18);
      return swift_bridgeObjectRelease();
    }
  }
  else if (static Semantics.forced < v15)
  {
    goto LABEL_7;
  }
  v21 = type metadata accessor for _ConditionalContent(0, a3, a4, v16);
  LODWORD(v59) = v9;
  v39 = v10;
  v40 = v11;
  v41 = v12;
  v42 = v14;
  v43 = v13;
  v44 = v23;
  v45 = v24;
  v46 = v25;
  v47 = v26;
  v48 = v27;
  v49 = v28;
  v50 = v29;
  v51 = v30;
  v52 = v31;
  v53 = v32;
  v54 = v33;
  v37[0] = a5;
  v37[1] = a6;
  v22 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21, v37);
  return static View.makeImplicitRoot(view:inputs:)((int *)&v59, &v39, v21, v22, (uint64_t)a7);
}

uint64_t type metadata accessor for _ConditionalContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalContent);
}

uint64_t static _ConditionalContent<>._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X8>)
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v26[2];
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;

  v10 = *a1;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v22 = *(_OWORD *)(a2 + 5);
  v14 = a2[7];
  v15 = *((_DWORD *)a2 + 16);
  v21 = a2[9];
  v20 = *((_BYTE *)a2 + 80);
  v16 = type metadata accessor for _ConditionalContent(0, a3, a4, a4);
  static _ConditionalContent.makeConditionalMetadata<A>(_:)(a3, a4, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v40);
  v17 = v40;
  v37 = v40;
  v38 = v41;
  v39 = v42;
  v36 = v10;
  v28 = v12;
  v29 = v13;
  v30 = *(_OWORD *)(a2 + 3);
  v31 = v22;
  v32 = v14;
  v33 = v15;
  v34 = v21;
  v35 = v20;
  v26[0] = a5;
  v26[1] = a6;
  v27 = v11;
  v18 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v16, v26);
  static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)&v37, &v36, (uint64_t)&v27, v16, v18, a7);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v17);
  return swift_bridgeObjectRelease();
}

uint64_t static _ConditionalContent<>._viewListCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  unsigned __int8 v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v7 = *a1;
  v8 = a1[1];
  v9 = *((_DWORD *)a1 + 4);
  v10 = a1[3];
  v16 = *a1;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v11 = (*(uint64_t (**)(uint64_t *))(a4 + 40))(&v16);
  if ((v12 & 1) == 0)
  {
    v16 = v7;
    v17 = v8;
    v18 = v9;
    v19 = v10;
    v13 = v11 != (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 40))(&v16, a3, a5);
    if (((v14 | v13) & 1) != 0)
      return 0;
  }
  return v11;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static _ConditionalContent<>._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return static _ConditionalContent<>._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> _ConditionalContent<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t static _ConditionalContent<>.canTransition.getter()
{
  return 1;
}

uint64_t _ConditionalContent<>.childInfo(metadata:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v8 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  v14[1] = *(_OWORD *)(a3 + 16);
  v15 = a4;
  v16 = a5;
  v17 = *a2;
  v18 = v8;
  v19 = v9;
  type metadata accessor for (Any.Type, UniqueID?)();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)partial apply for closure #1 in _ConditionalContent<>.childInfo(metadata:), (uint64_t)v14, a3, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  result = v20;
  v13 = v22;
  *(_QWORD *)a1 = v21;
  *(_BYTE *)(a1 + 8) = v13;
  return result;
}

unint64_t closure #1 in _ConditionalContent<>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;

  v11 = (uint64_t)(a7 + 1);
  type metadata accessor for ConditionalMetadata<ViewDescriptor>(0, a2, a3, a4);
  v13 = v12;
  v15 = type metadata accessor for _ConditionalContent(0, a5, a6, v14);
  result = ConditionalMetadata.childInfo<A>(ptr:emptyType:)(v11, a1, (unint64_t)&type metadata for EmptyView, v13, v15);
  *a7 = result;
  return result;
}

unint64_t partial apply for closure #1 in _ConditionalContent<>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in _ConditionalContent<>.childInfo(metadata:)(a1, v2[6], v2[7], v2[8], v2[2], v2[3], a2);
}

uint64_t _ConditionalContent<>.makeChildView(metadata:view:inputs:)(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _OWORD *v21;
  _OWORD v22[5];
  int v23;

  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *(_OWORD *)(a3 + 48);
  v22[2] = *(_OWORD *)(a3 + 32);
  v22[3] = v11;
  v22[4] = *(_OWORD *)(a3 + 64);
  v23 = *(_DWORD *)(a3 + 80);
  v12 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v12;
  v14[1] = *(_OWORD *)(a4 + 16);
  v15 = a5;
  v16 = a6;
  v17 = *a1;
  v18 = v9;
  v19 = v10;
  v20 = a2;
  v21 = v22;
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in _ConditionalContent<>.makeChildView(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x24BEE4078], (uint64_t)&type metadata for _ViewOutputs, MEMORY[0x24BEE40A8], a8);
}

unint64_t *partial apply for closure #1 in _ConditionalContent<>.makeChildView(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v16[5];
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(_QWORD *)(v3 + 72);
  v10 = *(_DWORD *)(v3 + 80);
  v11 = *(_QWORD *)(v3 + 88);
  v18 = *(_OWORD *)(v3 + 48);
  v19 = v8;
  v20 = v9;
  v12 = *(_OWORD *)(v11 + 48);
  v16[2] = *(_OWORD *)(v11 + 32);
  v16[3] = v12;
  v16[4] = *(_OWORD *)(v11 + 64);
  v17 = *(_DWORD *)(v11 + 80);
  v13 = *(_OWORD *)(v11 + 16);
  v16[0] = *(_OWORD *)v11;
  v16[1] = v13;
  v14 = type metadata accessor for _ConditionalContent(0, v6, v7, a2);
  return ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(a1, v10, (uint64_t *)v16, v14, a3);
}

uint64_t _ConditionalContent<>.makeChildViewList(metadata:view:inputs:)(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _OWORD *v21;
  _OWORD v22[5];
  char v23;

  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *(_OWORD *)(a3 + 48);
  v22[2] = *(_OWORD *)(a3 + 32);
  v22[3] = v11;
  v22[4] = *(_OWORD *)(a3 + 64);
  v23 = *(_BYTE *)(a3 + 80);
  v12 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v12;
  v14[1] = *(_OWORD *)(a4 + 16);
  v15 = a5;
  v16 = a6;
  v17 = *a1;
  v18 = v9;
  v19 = v10;
  v20 = a2;
  v21 = v22;
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in _ConditionalContent<>.makeChildViewList(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x24BEE4078], (uint64_t)&type metadata for _ViewListOutputs, MEMORY[0x24BEE40A8], a8);
}

uint64_t partial apply for closure #1 in _ConditionalContent<>.makeChildViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v16[5];
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(_QWORD *)(v3 + 72);
  v10 = *(_DWORD *)(v3 + 80);
  v11 = *(_QWORD *)(v3 + 88);
  v18 = *(_OWORD *)(v3 + 48);
  v19 = v8;
  v20 = v9;
  v12 = *(_OWORD *)(v11 + 48);
  v16[2] = *(_OWORD *)(v11 + 32);
  v16[3] = v12;
  v16[4] = *(_OWORD *)(v11 + 64);
  v17 = *(_BYTE *)(v11 + 80);
  v13 = *(_OWORD *)(v11 + 16);
  v16[0] = *(_OWORD *)v11;
  v16[1] = v13;
  v14 = type metadata accessor for _ConditionalContent(0, v6, v7, a2);
  return ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(a1, v10, (uint64_t *)v16, v14, a3);
}

uint64_t protocol witness for DynamicView.childInfo(metadata:) in conformance <> _ConditionalContent<A, B>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return _ConditionalContent<>.childInfo(metadata:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t protocol witness for DynamicView.makeChildView(metadata:view:inputs:) in conformance <> _ConditionalContent<A, B>(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _ConditionalContent<>.makeChildView(metadata:view:inputs:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8), *(_QWORD *)(a5 - 16), a7, a8);
}

uint64_t protocol witness for DynamicView.makeChildViewList(metadata:view:inputs:) in conformance <> _ConditionalContent<A, B>(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _ConditionalContent<>.makeChildViewList(metadata:view:inputs:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8), *(_QWORD *)(a5 - 16), a7, a8);
}

uint64_t _ConditionalContent.Info.matches(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  void (*v24)(char *, uint64_t);
  uint64_t v25;

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for _ConditionalContent.Storage(255, v7, v8, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v25 - v12;
  v15 = type metadata accessor for _ConditionalContent(0, v7, v8, v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, double))(v19 + 16))((char *)&v25 - v17, v5, v16);
  v20 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v21 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v13, v18, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, a1, v9);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)a1 == 1)
  {
    if (EnumCaseMultiPayload != 1)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, TupleTypeMetadata2);
      return 0;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    goto LABEL_3;
  }
  v24 = *(void (**)(char *, uint64_t))(v21 + 8);
  v24(v20, v9);
  v24(v13, v9);
  return 1;
}

uint64_t _ConditionalContent.Info.init(content:subgraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = type metadata accessor for _ConditionalContent(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for _ConditionalContent.Info(0, a3, a4, v11);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t _ConditionalContent.Container.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for _ConditionalContent(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

void _ConditionalContent.Container.init(content:provider:)(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for _ConditionalContent.Container();
}

id sub_23515A2A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  id result;
  id v7;

  v5 = *(_QWORD *)(v1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2 + *(int *)(a1 + 52), v3, v1);
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    v7 = result;
    result = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    *(_QWORD *)(v2 + *(int *)(a1 + 56)) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for _ConditionalContent.Container()
{
  JUMPOUT(0x23B7C9B5CLL);
}

Swift::Void __swiftcall _ConditionalContent.Container.updateValue()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t OutputValue;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;

  v3 = v2;
  v4 = v0;
  v61 = *MEMORY[0x24BDAC8D0];
  v5 = v0[2];
  v6 = v0[3];
  v7 = type metadata accessor for _ConditionalContent.Info(0, v5, v6, v1);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v54 = (void (*)(uint64_t, uint64_t))((char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v49 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v50 = (char *)&v49 - v13;
  v59 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v52 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v49 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v49 - v20;
  v23 = type metadata accessor for _ConditionalContent(0, v5, v6, v22);
  v55 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v49 - v24;
  v56 = v4;
  v53 = v3;
  _ConditionalContent.Container.content.getter((uint64_t)v4, v26, (uint64_t)&v49 - v24);
  OutputValue = AGGraphGetOutputValue();
  v57 = v23;
  if (OutputValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v21, OutputValue, v7);
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v21, v28, 1, v7);
  v29 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v60 = v21;
  v30 = v59;
  v29(v18, v21, v59);
  v31 = v14;
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v33 = v32(v18, 1, v7);
  v58 = v31;
  if (v33 == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v30);
    goto LABEL_9;
  }
  v36 = _ConditionalContent.Info.matches(_:)((uint64_t)v25, v7, v34, v35);
  v37 = *(void (**)(char *, uint64_t))(v8 + 8);
  v37(v18, v7);
  if ((v36 & 1) == 0)
  {
LABEL_9:
    v46 = v52;
    v29(v52, v60, v30);
    if (v32(v46, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v30);
      v47 = v56;
    }
    else
    {
      v48 = (uint64_t)v51;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v51, v46, v7);
      v47 = v56;
      _ConditionalContent.Container.eraseInfo(_:)(v48, v56);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v48, v7);
    }
    _ConditionalContent.Container.makeInfo(_:)((uint64_t)v25, v47, (uint64_t)v54);
  }
  v54 = (void (*)(uint64_t, uint64_t))v37;
  v38 = AGGraphGetOutputValue();
  if (v38)
  {
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v40 = (uint64_t)v50;
    v39(v50, v38, v7);
    v41 = v55;
    v42 = v57;
    v43 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v55 + 24))(v40, v25, v57);
    v44 = MEMORY[0x24BDAC7A8](v43);
    *(&v49 - 2) = (uint64_t)v56;
    *(&v49 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.Container<A1>, v44);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v40, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v49 - 4), v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v45);
    v54(v40, v7);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v30);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v42);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for _ConditionalContent.Info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalContent.Info);
}

uint64_t _ConditionalContent.Container.eraseInfo(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t))(a2[5] + 56))(a2[4]);
  type metadata accessor for _ConditionalContent.Info(0, a2[2], a2[3], v3);
  AGSubgraphApply();
  return AGSubgraphInvalidate();
}

void _ConditionalContent.Container.makeInfo(_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int CurrentAttribute;
  int v8;
  id v9;
  id v10;
  uint64_t v11;

  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute != *MEMORY[0x24BE096C0])
  {
    v8 = CurrentAttribute;
    v9 = (id)AGSubgraphGetGraph();
    v11 = AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v10 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in _ConditionalContent.Container.makeInfo(_:)(v3, a1, v8, v11, a2[2], a2[3], a2[4], a2[5], a3);
  }
  __break(1u);
}

void closure #1 in _ConditionalContent.Container.makeInfo(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v43 = a4;
  v30 = a3;
  v44 = a1;
  v45 = a2;
  v41 = a9;
  v50 = *MEMORY[0x24BDAC8D0];
  v13 = type metadata accessor for _ConditionalContent(0, a5, a6, a4);
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v38 = (char *)v29 - v14;
  v31 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v29[3] = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v32 = (char *)v29 - v18;
  v29[2] = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v29[1] = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v42 = (char *)v29 - v22;
  v24 = type metadata accessor for _ConditionalContent.Storage(0, a5, a6, v23);
  MEMORY[0x24BDAC7A8](v24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v35 = (char *)v29 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v28 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v28 - 8);
  v34 = v28;
  MEMORY[0x24BDAC7A8](v28);
  v46 = a5;
  v47 = a6;
  v48 = a7;
  v49 = a8;
  type metadata accessor for _ConditionalContent.Container();
}

id sub_23515ABC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void (*v13)(uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v12 = *(void (**)(uint64_t))(v10 + 16);
  *(_QWORD *)(v11 - 256) = *(_QWORD *)(v11 - 160) + *(int *)(a1 + 52);
  *(_QWORD *)(v11 - 160) = v12;
  v12(v2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 72))(v8, v9);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  *(_QWORD *)(v11 - 264) = v13;
  v13(v2, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v3, *(_QWORD *)(v11 - 152), v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 280) + 32);
    *(_QWORD *)(v11 - 176) = v5;
    v15 = *(_QWORD *)(v11 - 272);
    v16 = v14(v15, v3, v1);
    *(_DWORD *)(v11 - 128) = *(_DWORD *)(v11 - 284);
    MEMORY[0x24BDAC7A8](v16);
    v43 = v1;
    v44 = type metadata accessor for _ConditionalContent.FalseChild(0, v4, v1, v17);
    v45 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.FalseChild, v44);
    v18 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v11 - 128, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v42, v44, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
    v20 = *(unsigned int *)(v11 - 132);
    v21 = *(_QWORD *)(v11 - 280);
    v22 = *(_QWORD *)(v11 - 296);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v15, v1);
    MEMORY[0x24BDAC7A8](v23);
    v45 = v1;
    v46 = v20;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v22, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)&v43, v1, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v24);
    v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v25(v22, v1);
    v26 = *(_QWORD *)(v11 - 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 - 160))(v2, v26, v8);
    v27 = *(_QWORD *)(v11 - 232);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 88))(v20, *(_QWORD *)(v11 - 176), v8, v9);
    v28 = *(void (**)(uint64_t, uint64_t))(v11 - 264);
    v28(v2, v8);
    v29 = *(_QWORD *)(v11 - 272);
    v5 = *(_QWORD *)(v11 - 176);
    v30 = v1;
  }
  else
  {
    v31 = *(_QWORD *)(v11 - 304);
    v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v31 + 32))(*(_QWORD *)(v11 - 176), v3, v4);
    *(_QWORD *)(v11 - 272) = &v47;
    *(_DWORD *)(v11 - 128) = *(_DWORD *)(v11 - 284);
    MEMORY[0x24BDAC7A8](v32);
    v43 = v4;
    v44 = type metadata accessor for _ConditionalContent.TrueChild(0, v4, v1, v33);
    v45 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.TrueChild, v44);
    v34 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v11 - 128, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v42, v44, MEMORY[0x24BEE4078], v34, MEMORY[0x24BEE40A8], v35);
    v36 = *(unsigned int *)(v11 - 132);
    v37 = *(_QWORD *)(v11 - 312);
    v38 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v31 + 16))(v37, *(_QWORD *)(v11 - 176), v4);
    *(_QWORD *)(v11 - 272) = v42;
    MEMORY[0x24BDAC7A8](v38);
    *(_QWORD *)&v42[-16] = v4;
    *(_DWORD *)&v42[-8] = v36;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v37, (uint64_t)closure #1 in Attribute.setValue(_:)partial apply, (uint64_t)&v42[-32], v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v39);
    v25 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v25(v37, v4);
    v26 = *(_QWORD *)(v11 - 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 - 160))(v2, v26, v8);
    v27 = *(_QWORD *)(v11 - 232);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 80))(v36, v5, v8, v9);
    v28 = *(void (**)(uint64_t, uint64_t))(v11 - 264);
    v28(v2, v8);
    v29 = *(_QWORD *)(v11 - 176);
    v30 = v4;
  }
  v25(v29, v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 - 160))(v2, v26, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 64))(v27, v8, v9);
  v28(v2, v8);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v11 - 224) + 8))(v27, *(_QWORD *)(v11 - 216));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v11 - 248) + 8))(v5, *(_QWORD *)(v11 - 240));
  v40 = *(_QWORD *)(v11 - 208);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v11 - 200) + 16))(v40, *(_QWORD *)(v11 - 152), *(_QWORD *)(v11 - 192));
  _ConditionalContent.Info.init(content:subgraph:)(v40, *(_QWORD *)(v11 - 168), v4, v1, *(_QWORD *)(v11 - 184));
  return *(id *)(v11 - 168);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance _ConditionalContent<A, B>.Container<A1>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for _ConditionalContent.Info(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalContent<A, B>.Container<A1>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.Container<A1>, a1);
  return static AsyncAttribute.flags.getter();
}

Swift::Void __swiftcall _ConditionalContent.TrueChild.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v3 = v0;
  v43 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = type metadata accessor for _ConditionalContent.Storage(0, v4, v5, v1);
  v7 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  v41 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v35 - v8;
  v11 = type metadata accessor for _ConditionalContent(0, v4, v5, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v35 - v13;
  v16 = type metadata accessor for _ConditionalContent.Info(0, v4, v5, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v35 - v18;
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v37 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v36 = (char *)&v35 - v23;
  v42 = *v2;
  v39 = v3;
  _ConditionalContent.TrueChild.info.getter(v3, v24, (uint64_t)v19);
  v25 = v40;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v19, v11);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27 = v41;
  v26(v19, v16);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v9, v14, v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v25);
  }
  else
  {
    v28 = v38;
    v29 = v36;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v36, v9, v4);
    v30 = (uint64_t)v37;
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 16))(v37, v29, v4);
    v32 = MEMORY[0x24BDAC7A8](v31);
    *(&v35 - 2) = v39;
    *(&v35 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.TrueChild, v32);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v30, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v35 - 4), v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v33);
    v34 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v34(v30, v4);
    v34((uint64_t)v29, v4);
  }
}

uint64_t _ConditionalContent.TrueChild.info.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for _ConditionalContent.Info(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalContent<A, B>.TrueChild(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.TrueChild, a1);
  return static AsyncAttribute.flags.getter();
}

Swift::Void __swiftcall _ConditionalContent.FalseChild.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v3 = v0;
  v43 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v6 = type metadata accessor for _ConditionalContent.Storage(0, v5, v4, v1);
  v7 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  v41 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v35 - v8;
  v11 = type metadata accessor for _ConditionalContent(0, v5, v4, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v35 - v13;
  v16 = type metadata accessor for _ConditionalContent.Info(0, v5, v4, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v35 - v18;
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v37 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v36 = (char *)&v35 - v23;
  v42 = *v2;
  v39 = v3;
  _ConditionalContent.TrueChild.info.getter(v3, v24, (uint64_t)v19);
  v25 = v40;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v19, v11);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27 = v41;
  v26(v19, v16);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v9, v14, v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v28 = v38;
    v29 = v36;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v36, v9, v4);
    v30 = (uint64_t)v37;
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 16))(v37, v29, v4);
    v32 = MEMORY[0x24BDAC7A8](v31);
    *(&v35 - 2) = v39;
    *(&v35 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.FalseChild, v32);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v30, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v35 - 4), v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v33);
    v34 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v34(v30, v4);
    v34((uint64_t)v29, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v25);
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalContent<A, B>.FalseChild(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.FalseChild, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t instantiation function for generic protocol witness table for <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in _ConditionalContent<A, B>.Container<A1>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for _ConditionalContent<A, B>.Container<A1>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04]("]2:\x1Bxp\t");
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in _ConditionalContent<A, B>.TrueChild()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for _ConditionalContent<A, B>.TrueChild(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.TrueChild);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in _ConditionalContent<A, B>.FalseChild()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for _ConditionalContent<A, B>.FalseChild(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalContent<A, B>.FalseChild);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for _ConditionalContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for _ConditionalContent.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _ConditionalContent.Storage()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ConditionalContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for _ConditionalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_23515BACC + 4 * byte_2352D0515[v7]))();
  }
}

uint64_t initializeWithCopy for _ConditionalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t initializeWithTake for _ConditionalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithTake for _ConditionalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23515C088 + 4 * byte_2352D0538[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for _ConditionalContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for _ConditionalContent.Storage(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23515C2CC + 4 * byte_2352D0546[v3]))();
}

void destructiveInjectEnumTag for _ConditionalContent.Storage(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t type metadata completion function for _ConditionalContent.Info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for _ConditionalContent.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ConditionalContent.Info(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  id v18;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18 && (v9 & 0x1000F8) == 0)
  {
    v12 = v8 + 1;
    v13 = *((unsigned __int8 *)a2 + v8);
    if (v13 >= 2)
    {
      if (v8 <= 3)
        v14 = v8;
      else
        v14 = 4;
      __asm { BR              X16 }
    }
    v15 = v13 == 1;
    if (v13 == 1)
    {
      v6 = *(_QWORD *)(v5 - 8);
      v16 = *(_QWORD *)(a3 + 24);
    }
    else
    {
      v16 = *(_QWORD *)(a3 + 16);
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v16);
    *((_BYTE *)v4 + v8) = v15;
    v17 = *(void **)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v4 + v12 + 7) & 0xFFFFFFFFFFFFF8) = v17;
    v18 = v17;
  }
  else
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + (((v9 & 0xF8 | 7u) + 16) & ~(unint64_t)(v9 & 0xF8 | 7u)));
    swift_retain();
  }
  return v4;
}

void destroy for _ConditionalContent.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(_QWORD *)(v3 - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X16 }
  }
  if (v7 == 1)
  {
    v4 = *(_QWORD *)(v3 - 8);
    v9 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v9);

}

uint64_t initializeWithCopy for _ConditionalContent.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X16 }
  }
  v11 = v9 == 1;
  if (v9 == 1)
  {
    v6 = *(_QWORD *)(v5 - 8);
    v12 = *(_QWORD *)(a3 + 24);
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v12);
  *(_BYTE *)(a1 + v8) = v11;
  v13 = *(void **)((v8 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v8 + 8 + a1) & 0xFFFFFFFFFFFFF8) = v13;
  v14 = v13;
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  void *v21;
  id v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  if (a1 != a2)
  {
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  v19 = (void **)((v9 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v20 = *(void **)((v9 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  v21 = *v19;
  *v19 = v20;
  v22 = v20;

  return a1;
}

uint64_t initializeWithTake for _ConditionalContent.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X16 }
  }
  v11 = v9 == 1;
  if (v9 == 1)
  {
    v6 = *(_QWORD *)(v5 - 8);
    v12 = *(_QWORD *)(a3 + 24);
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v12);
  *(_BYTE *)(a1 + v8) = v11;
  *(_QWORD *)((v8 + 8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _ConditionalContent.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  if (a1 != a2)
  {
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  v19 = (void **)((v9 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  *v19 = *(void **)((v9 + 8 + a2) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent.Info(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  v7 = v6 & 0xFFFFFFF8;
  v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0)
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v10 = 1;
  else
    v10 = v9;
  if (v10 == 4)
  {
    v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else if (v10 == 2)
  {
    v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else
  {
    v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_5:
      v4 = *(_QWORD *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFF8);
      if (v4 >= 0xFFFFFFFF)
        LODWORD(v4) = -1;
      return (v4 + 1);
    }
  }
  v12 = v11 - 1;
  if (v7)
  {
    v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void storeEnumTagSinglePayload for _ConditionalContent.Info(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (a3 < 0)
  {
    v7 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v6 = 1;
    else
      v6 = v8;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X11 }
  }
  else
  {
    v6 = 0;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v9 = a2 ^ 0x80000000;
    bzero(a1, (v5 & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v9;
  }
  __asm { BR              X10 }
}

void sub_23515CDC4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x23515CDB0);
  JUMPOUT(0x23515CD9CLL);
}

void sub_23515CDD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23515CDB0);
}

void sub_23515CDD8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23515CDB0);
}

uint64_t type metadata completion function for _ConditionalContent.Container()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ConditionalContent.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 4) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v10 = ((unint64_t)a1 + v5 + 4) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = *(void **)((v6 + v11) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFF8) = v12;
    v13 = v12;
  }
  return v3;
}

void destroy for _ConditionalContent.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 32) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);

}

_DWORD *initializeWithCopy for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFF8);
  v10 = *(void **)((v8 + v7) & 0xFFFFFFFFFFFFF8);
  *v9 = v10;
  v11 = v10;
  return a1;
}

_DWORD *assignWithCopy for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  id v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (void **)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(void **)((v8 + v7) & 0xFFFFFFFFFFFFF8);
  v11 = *v9;
  *v9 = v10;
  v12 = v10;

  return a1;
}

_DWORD *initializeWithTake for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (void **)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  *v9 = *(void **)((v8 + v7) & 0xFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent.Container(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 4) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 4) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23515D23C + 4 * byte_2352D057D[v11]))();
  }
}

void storeEnumTagSinglePayload for _ConditionalContent.Container(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 4) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 4) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 4) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23515D3D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23515D44CLL);
}

void sub_23515D3DC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23515D3E4);
  JUMPOUT(0x23515D44CLL);
}

void sub_23515D428()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23515D44CLL);
}

void sub_23515D430()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23515D44CLL);
}

uint64_t sub_23515D438@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x23515D44CLL);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x23515D448);
    JUMPOUT(0x23515D444);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 4) & a3);
}

uint64_t type metadata accessor for _ConditionalContent.TrueChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalContent.TrueChild);
}

uint64_t type metadata accessor for _ConditionalContent.FalseChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalContent.FalseChild);
}

uint64_t dispatch thunk of ConditionalContentProvider.inputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConditionalContentProvider.outputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ConditionalContentProvider.detachOutputs()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ConditionalContentProvider.attachOutputs(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ConditionalContentProvider.makeChildInputs()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ConditionalContentProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of ConditionalContentProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t EnvironmentValues.locale.setter(uint64_t a1)
{
  return EnvironmentValues.locale.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.calendar.setter(uint64_t a1)
{
  return EnvironmentValues.locale.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.timeZone.setter(uint64_t a1)
{
  return EnvironmentValues.locale.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.locale.setter(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v5 = a2(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - v7, a1, v5);
  a3(v8);
  v9 = *(void (**)(char *, uint64_t))(v6 + 8);
  v9(v8, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(a1, v5);
}

uint64_t EnvironmentValues.pixelLength.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  _BYTE v9[16];

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    v3 = v2;
    swift_release_n();
    result = swift_release_n();
    if ((v3 & 1) != 0)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v1);
      swift_release_n();
      return swift_release_n();
    }
  }
  else
  {
    v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v9);
    v7 = v6;
    result = swift_release_n();
    if ((v7 & 1) != 0)
    {
      v8 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v8);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t EnvironmentValues.defaultRenderingMode.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.displayScale.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.legibilityWeight.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.locale.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void _diagnoseUnavailableCodeReached()()
{
  if (__isPlatformVersionAtLeast(2, 17, 0, 0))
  {
    _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  back deployment fallback for _diagnoseUnavailableCodeReached()();
}

uint64_t EnvironmentValues.calendar.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.timeZone.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.defaultBaselineOffset.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.defaultKerning.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.defaultTracking.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.displayGamut.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.displayGamut.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.displayGamut.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

double EnvironmentValues.displayScale.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues.textSizing : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v7);
  }
  result = swift_release_n();
  v6 = v8;
  *(_BYTE *)a2 = v7[0];
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.textSizing : EnvironmentValues(uint64_t a1)
{
  unint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)a1;
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v2, v1);
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.effectiveSymbolFont.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5[2];

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v5[0] = *v0;
    v5[1] = 0;
    swift_retain();
    v4 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(v5);
    swift_release();
    return v4;
  }
}

uint64_t EnvironmentValues.imageScale.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.horizontalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.verticalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.horizontalSizeClass.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

uint64_t DisplayGamut.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t View.font(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.fontModifiers : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
    swift_bridgeObjectRetain();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.fontModifiers : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.allowsVibrantBlending.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    v3 = swift_retain_n();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)&v5);
  }
  swift_release_n();
  return (v2 == 2) | v2 & 1u;
}

uint64_t EnvironmentValues.effectiveFont.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5[2];

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v5[0] = *v0;
    v5[1] = 0;
    swift_retain();
    v4 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(v5);
    swift_release();
    return v4;
  }
}

uint64_t EnvironmentValues.defaultFont.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.fallbackFont.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v9);
    swift_release_n();
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    v8[0] = v1;
    v8[1] = 0;
    v7 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 8))(v8, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    swift_release_n();
    return v7;
  }
}

uint64_t EnvironmentValues.font.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

BOOL static Image.Scale.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Image.Scale.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Image.Scale.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t static DisplayGamut.deviceDefault.getter@<X0>(BOOL *a1@<X8>)
{
  unint64_t result;

  result = _CUIDefaultDisplayGamut();
  if (result > 1)
    __break(1u);
  else
    *a1 = result != 0;
  return result;
}

SwiftUI::DisplayGamut_optional __swiftcall DisplayGamut.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (SwiftUI::DisplayGamut_optional)rawValue;
}

void ControlActiveState.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static ControlActiveState.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static ControlActiveState.allCases.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ControlActiveState.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL static LegibilityWeight.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void LegibilityWeight.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t View.imageScale(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *KeyPath;

  KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.imageScale : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.imageScale.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t View.adjustsTextFrameForOversizedCharacters(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *KeyPath;
  char *v7;
  uint64_t v8;
  char v10[8];
  uint64_t v11;

  KeyPath = (uint64_t *)swift_getKeyPath();
  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for adjustsForOversizedCharacters != -1)
      swift_once();
    v7 = &static Text.Sizing.adjustsForOversizedCharacters;
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v7 = &static Text.Sizing.standard;
  }
  v8 = *((_QWORD *)v7 + 1);
  v10[0] = *v7;
  v11 = v8;
  swift_bridgeObjectRetain();
  View.environment<A>(_:_:)(KeyPath, (uint64_t)v10, a2, a3);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t View.monospacedDigit()(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;

  KeyPath = (uint64_t *)swift_getKeyPath();
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)closure #1 in View.monospacedDigit(), 0, a1, a2);
  return swift_release();
}

uint64_t closure #1 in View.monospacedDigit()(_QWORD *a1)
{
  specialized static AnyFontModifier.static<A>(_:)();
  MEMORY[0x23B7C61A8]();
  if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t View.monospaced(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.monospaced(_:)(a1, a2, a3, (uint64_t)&unk_250673928, (uint64_t)partial apply for closure #1 in View.monospaced(_:));
}

uint64_t View.fontWeight(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *KeyPath;
  uint64_t v9;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = a2 & 1;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.fontWeight(_:), v9, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.fontWeight(_:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ValueMetadata *v14;
  _UNKNOWN **v15;
  unint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  ValueMetadata *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if ((a3 & 1) == 0)
  {
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier);
    *(_QWORD *)(swift_allocObject() + 16) = a2;
    MEMORY[0x23B7C61A8]();
    if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_23;
    goto LABEL_3;
  }
  v6 = *a1;
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_6;
LABEL_14:
    swift_bridgeObjectRelease();
    if (*a1 >> 62)
      goto LABEL_28;
    v8 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
LABEL_19:
      if (*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v11 >= v8)
          return specialized Array.replaceSubrange<A>(_:with:)(v8, v11);
      }
      else
      {
        v11 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= v8)
          return specialized Array.replaceSubrange<A>(_:with:)(v8, v11);
      }
      __break(1u);
LABEL_28:
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_14;
LABEL_6:
  v8 = 0;
  while (1)
  {
    if ((v6 & 0xC000000000000001) != 0)
      MEMORY[0x23B7C6D9C](v8, v6);
    else
      swift_retain();
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier);
    if (swift_dynamicCastClass())
      break;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    if (swift_dynamicCastClass())
      break;
    swift_release();
    v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_23:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    }
    ++v8;
    if (v9 == v7)
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  result = swift_release();
  v10 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v10 == v12)
      goto LABEL_19;
    goto LABEL_31;
  }
  if (*a1 >> 62)
    goto LABEL_30;
  if (v10 == *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_19;
LABEL_31:
  v13 = v8 + 5;
  v14 = &type metadata for Font.BoldModifier;
  v15 = &protocol witness table for Font.BoldModifier;
  while (1)
  {
    v16 = v13 - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x23B7C6D9C](v13 - 4);
      goto LABEL_36;
    }
    if ((v16 & 0x8000000000000000) != 0)
      break;
    if (v16 >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_69;
    swift_retain();
LABEL_36:
    if (swift_dynamicCastClass())
    {
      result = swift_release();
      goto LABEL_59;
    }
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)v14, (uint64_t)v15, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    v17 = swift_dynamicCastClass();
    result = swift_release();
    if (!v17)
    {
      if (v16 == v8)
        goto LABEL_58;
      v18 = v15;
      v19 = v14;
      v20 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        result = MEMORY[0x23B7C6D9C](v8, *a1);
        v21 = result;
        v20 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
          goto LABEL_44;
      }
      else
      {
        if (v8 < 0)
          goto LABEL_72;
        if ((unint64_t)v8 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_73;
        v21 = *(_QWORD *)(v20 + 8 * v8 + 32);
        result = swift_retain();
        if ((v20 & 0xC000000000000001) == 0)
        {
LABEL_44:
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_74;
          if (v16 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_75;
          v22 = *(_QWORD *)(v20 + 8 * v13);
          swift_retain();
LABEL_47:
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v20;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v20 < 0 || (v20 & 0x4000000000000000) != 0)
            specialized _ArrayBuffer._consumeAndCreateNew()(v20);
          *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v22;
          swift_release();
          specialized Array._endMutation()();
          v24 = *a1;
          result = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v24;
          if (!(_DWORD)result || v24 < 0 || (v24 & 0x4000000000000000) != 0)
            specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_76;
          if (v16 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_77;
          v14 = v19;
          *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v13) = v21;
          swift_release();
          result = specialized Array._endMutation()();
          v15 = v18;
LABEL_58:
          if (__OFADD__(v8++, 1))
            goto LABEL_71;
          goto LABEL_59;
        }
      }
      v22 = MEMORY[0x23B7C6D9C](v13 - 4, v20);
      v20 = *a1;
      goto LABEL_47;
    }
LABEL_59:
    v26 = v13 - 3;
    if (__OFADD__(v16, 1))
      goto LABEL_70;
    if (*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v27 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v27 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    ++v13;
    if (v26 == v27)
      goto LABEL_19;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

uint64_t View.fontWidth(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t *KeyPath;
  uint64_t v8;

  v5 = *a1;
  v6 = *((_BYTE *)a1 + 8);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.fontWidth(_:), v8, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.fontWidth(_:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((a3 & 1) == 0)
  {
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WidthModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier, (uint64_t)&type metadata for Font.WidthModifier);
    *(_QWORD *)(swift_allocObject() + 16) = a2;
    MEMORY[0x23B7C61A8]();
    if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_61;
    goto LABEL_3;
  }
  v6 = *a1;
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_6;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_6:
      v8 = 0;
      while (1)
      {
        if ((v6 & 0xC000000000000001) != 0)
          MEMORY[0x23B7C6D9C](v8, v6);
        else
          swift_retain();
        type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WidthModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier, (uint64_t)&type metadata for Font.WidthModifier);
        if (swift_dynamicCastClass())
          break;
        swift_release();
        v9 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          return specialized Array._endMutation()();
        }
        ++v8;
        if (v9 == v7)
          goto LABEL_13;
      }
      swift_bridgeObjectRelease();
      swift_release();
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
      }
      else if (!(*a1 >> 62))
      {
        if (v11 == *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_15;
LABEL_21:
        v12 = v8 + 5;
        while (1)
        {
          v13 = v12 - 4;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            MEMORY[0x23B7C6D9C](v12 - 4);
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_57;
            if (v13 >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_58;
            swift_retain();
          }
          v14 = swift_dynamicCastClass();
          swift_release();
          if (!v14)
            break;
LABEL_47:
          v22 = v12 - 3;
          if (__OFADD__(v13, 1))
            goto LABEL_59;
          if (*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            v23 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v23 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          ++v12;
          if (v22 == v23)
            goto LABEL_15;
        }
        if (v13 == v8)
        {
LABEL_46:
          if (__OFADD__(v8++, 1))
            goto LABEL_60;
          goto LABEL_47;
        }
        v15 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v16 = MEMORY[0x23B7C6D9C](v8, *a1);
          v15 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_32:
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_68;
            if (v13 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_69;
            v17 = *(_QWORD *)(v15 + 8 * v12);
            swift_retain();
            goto LABEL_35;
          }
        }
        else
        {
          if (v8 < 0)
            goto LABEL_66;
          if ((unint64_t)v8 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_67;
          v16 = *(_QWORD *)(v15 + 8 * v8 + 32);
          swift_retain();
          if ((v15 & 0xC000000000000001) == 0)
            goto LABEL_32;
        }
        v17 = MEMORY[0x23B7C6D9C](v12 - 4, v15);
        v15 = *a1;
LABEL_35:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v15;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v15 < 0 || (v15 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v17;
        swift_release();
        specialized Array._endMutation()();
        v19 = *a1;
        v20 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v19;
        if (!v20 || v19 < 0 || (v19 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v19);
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_70;
        if (v13 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_71;
        *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v12) = v16;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_46;
      }
      swift_bridgeObjectRetain();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 == v24)
        goto LABEL_15;
      goto LABEL_21;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if (*a1 >> 62)
    goto LABEL_72;
  v8 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  while (!(*a1 >> 62))
  {
    v10 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10 >= v8)
      return specialized Array.replaceSubrange<A>(_:with:)(v8, v10);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10 < v8)
    goto LABEL_65;
  return specialized Array.replaceSubrange<A>(_:with:)(v8, v10);
}

uint64_t View.bold(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.monospaced(_:)(a1, a2, a3, (uint64_t)&unk_2506739A0, (uint64_t)partial apply for closure #1 in View.bold(_:));
}

uint64_t closure #1 in View.bold(_:)(_QWORD *a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  if ((a2 & 1) != 0)
  {
    specialized static AnyFontModifier.static<A>(_:)();
    MEMORY[0x23B7C61A8]();
    if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_3:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    }
LABEL_30:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_3;
  }
  v4 = *a1;
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5)
      goto LABEL_6;
LABEL_18:
    swift_bridgeObjectRelease();
    if (*a1 >> 62)
      goto LABEL_35;
    v6 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
LABEL_23:
      if (*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v11 >= v6)
          return specialized Array.replaceSubrange<A>(_:with:)(v6, v11);
      }
      else
      {
        v11 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= v6)
          return specialized Array.replaceSubrange<A>(_:with:)(v6, v11);
      }
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_18;
LABEL_6:
  v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
      MEMORY[0x23B7C6D9C](v6, v4);
    else
      swift_retain();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    if (swift_dynamicCastClass())
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      v10 = v6 + 1;
      if (!__OFADD__(v6, 1))
        goto LABEL_21;
      goto LABEL_28;
    }
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier);
    v7 = swift_dynamicCastClass();
    if (!v7)
    {
      swift_release();
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_29;
      goto LABEL_17;
    }
    v8 = *(double *)(v7 + 16);
    swift_release();
    if (v8 >= 0.3)
      break;
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_29;
LABEL_17:
    ++v6;
    if (v9 == v5)
      goto LABEL_18;
  }
  result = swift_bridgeObjectRelease();
  v10 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_21:
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v10 == v12)
      goto LABEL_23;
  }
  else if (v10 == *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_23;
  }
  v13 = v6 + 5;
  while (1)
  {
    v14 = v13 - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x23B7C6D9C](v13 - 4);
      goto LABEL_42;
    }
    if ((v14 & 0x8000000000000000) != 0)
      break;
    if (v14 >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_78;
    swift_retain();
LABEL_42:
    if (swift_dynamicCastClass())
    {
      result = swift_release();
      goto LABEL_68;
    }
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier);
    v15 = swift_dynamicCastClass();
    if (!v15)
    {
      result = swift_release();
      if (v14 == v6)
        goto LABEL_67;
LABEL_49:
      v17 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        result = MEMORY[0x23B7C6D9C](v6, *a1);
        v18 = result;
        v17 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
          goto LABEL_53;
      }
      else
      {
        if (v6 < 0)
          goto LABEL_81;
        if ((unint64_t)v6 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_82;
        v18 = *(_QWORD *)(v17 + 8 * v6 + 32);
        result = swift_retain();
        if ((v17 & 0xC000000000000001) == 0)
        {
LABEL_53:
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_83;
          if (v14 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_84;
          v19 = *(_QWORD *)(v17 + 8 * v13);
          swift_retain();
          goto LABEL_56;
        }
      }
      v19 = MEMORY[0x23B7C6D9C](v13 - 4, v17);
      v17 = *a1;
LABEL_56:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v19;
      swift_release();
      specialized Array._endMutation()();
      v21 = *a1;
      result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v21;
      if (!(_DWORD)result || v21 < 0 || (v21 & 0x4000000000000000) != 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v21);
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_85;
      if (v14 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_86;
      *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v13) = v18;
      swift_release();
      result = specialized Array._endMutation()();
      goto LABEL_67;
    }
    v16 = *(double *)(v15 + 16);
    result = swift_release();
    if (v16 >= 0.3)
      goto LABEL_68;
    if (v14 != v6)
      goto LABEL_49;
LABEL_67:
    if (__OFADD__(v6++, 1))
      goto LABEL_80;
LABEL_68:
    v23 = v13 - 3;
    if (__OFADD__(v14, 1))
      goto LABEL_79;
    if (*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v24 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    ++v13;
    if (v23 == v24)
      goto LABEL_23;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

uint64_t View.italic(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.monospaced(_:)(a1, a2, a3, (uint64_t)&unk_2506739C8, (uint64_t)partial apply for closure #1 in View.italic(_:));
}

uint64_t View.monospaced(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *KeyPath;
  uint64_t v10;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = a1;
  View.transformEnvironment<A>(_:transform:)(KeyPath, a5, v10, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.monospaced(_:)(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4), char a2, void (*a3)(void), unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if ((a2 & 1) != 0)
  {
    a3();
    MEMORY[0x23B7C61A8]();
    if (*(_QWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
      goto LABEL_61;
    goto LABEL_3;
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
      goto LABEL_6;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_6:
      v13 = 0;
      v14 = type metadata accessor for AnyStaticFontModifier;
      while (1)
      {
        if ((v11 & 0xC000000000000001) != 0)
          MEMORY[0x23B7C6D9C](v13, v11);
        else
          swift_retain();
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
        if (swift_dynamicCastClass())
          break;
        swift_release();
        v15 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          return specialized Array._endMutation()();
        }
        ++v13;
        if (v15 == v12)
          goto LABEL_13;
      }
      swift_bridgeObjectRelease();
      swift_release();
      v17 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
      }
      else
      {
        v14 = a1;
        if (!(*(_QWORD *)a1 >> 62))
        {
          if (v17 == *(_QWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_15;
LABEL_21:
          v18 = v13 + 5;
          while (1)
          {
            v19 = v18 - 4;
            if ((*(_QWORD *)v14 & 0xC000000000000001) != 0)
            {
              MEMORY[0x23B7C6D9C](v18 - 4);
            }
            else
            {
              if ((v19 & 0x8000000000000000) != 0)
                goto LABEL_57;
              if (v19 >= *(_QWORD *)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_58;
              swift_retain();
            }
            v20 = swift_dynamicCastClass();
            swift_release();
            if (!v20)
              break;
LABEL_47:
            v28 = v18 - 3;
            if (__OFADD__(v19, 1))
              goto LABEL_59;
            if (*(_QWORD *)v14 >> 62)
            {
              swift_bridgeObjectRetain();
              v29 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v29 = *(_QWORD *)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            ++v18;
            if (v28 == v29)
              goto LABEL_15;
          }
          if (v19 == v13)
          {
LABEL_46:
            if (__OFADD__(v13++, 1))
              goto LABEL_60;
            goto LABEL_47;
          }
          v21 = *(_QWORD *)v14;
          if ((*(_QWORD *)v14 & 0xC000000000000001) != 0)
          {
            v22 = MEMORY[0x23B7C6D9C](v13, *(_QWORD *)v14);
            v21 = *(_QWORD *)v14;
            if ((*(_QWORD *)v14 & 0xC000000000000001) == 0)
            {
LABEL_32:
              if ((v19 & 0x8000000000000000) != 0)
                goto LABEL_68;
              if (v19 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_69;
              v23 = *(_QWORD *)(v21 + 8 * v18);
              swift_retain();
              goto LABEL_35;
            }
          }
          else
          {
            if (v13 < 0)
              goto LABEL_66;
            if ((unint64_t)v13 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_67;
            v22 = *(_QWORD *)(v21 + 8 * v13 + 32);
            swift_retain();
            if ((v21 & 0xC000000000000001) == 0)
              goto LABEL_32;
          }
          v23 = MEMORY[0x23B7C6D9C](v18 - 4, v21);
          v21 = *(_QWORD *)v14;
LABEL_35:
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *(_QWORD *)v14 = v21;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v21 < 0 || (v21 & 0x4000000000000000) != 0)
            specialized _ArrayBuffer._consumeAndCreateNew()(v21);
          *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v13 + 0x20) = v23;
          swift_release();
          specialized Array._endMutation()();
          v25 = *(_QWORD *)v14;
          v26 = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *(_QWORD *)v14 = v25;
          if (!v26 || v25 < 0 || (v25 & 0x4000000000000000) != 0)
            specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_70;
          if (v19 >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_71;
          *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 8 * v18) = v22;
          swift_release();
          specialized Array._endMutation()();
          goto LABEL_46;
        }
      }
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17 == v30)
        goto LABEL_15;
      goto LABEL_21;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease();
  v14 = a1;
  if (*(_QWORD *)a1 >> 62)
    goto LABEL_72;
  v13 = *(_QWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  while (!(*(_QWORD *)v14 >> 62))
  {
    v16 = *(_QWORD *)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16 >= v13)
      return specialized Array.replaceSubrange<A>(_:with:)(v13, v16);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16 < v13)
    goto LABEL_65;
  return specialized Array.replaceSubrange<A>(_:with:)(v13, v16);
}

uint64_t View.fontDesign(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t *KeyPath;
  uint64_t v7;

  v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = v5;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.fontDesign(_:), v7, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.fontDesign(_:)(unint64_t *a1, char a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a2 != 4)
  {
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier, (uint64_t)&type metadata for Font.DesignModifier);
    *(_BYTE *)(swift_allocObject() + 16) = a2;
    MEMORY[0x23B7C61A8]();
    if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_65;
    goto LABEL_17;
  }
  v3 = *a1;
  if (*a1 >> 62)
  {
LABEL_61:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease();
    if (*a1 >> 62)
      goto LABEL_72;
    v5 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_13;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_11;
LABEL_4:
  v5 = 0;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
      MEMORY[0x23B7C6D9C](v5, v3);
    else
      swift_retain();
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier, (uint64_t)&type metadata for Font.DesignModifier);
    if (swift_dynamicCastClass())
      break;
    swift_release();
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    ++v5;
    if (v6 == v4)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v10 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_74:
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 == v22)
      goto LABEL_13;
    goto LABEL_21;
  }
  if (*a1 >> 62)
    goto LABEL_74;
  if (v10 == *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_13;
LABEL_21:
  v11 = v5 + 5;
  while (1)
  {
    v3 = v11 - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x23B7C6D9C](v11 - 4);
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_57;
      if (v3 >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_58;
      swift_retain();
    }
    v12 = swift_dynamicCastClass();
    swift_release();
    if (v12)
      goto LABEL_47;
    if (v3 != v5)
      break;
LABEL_46:
    if (__OFADD__(v5++, 1))
      goto LABEL_60;
LABEL_47:
    v20 = v11 - 3;
    if (__OFADD__(v3, 1))
      goto LABEL_59;
    if (*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    ++v11;
    if (v20 == v21)
      goto LABEL_13;
  }
  v13 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    v14 = MEMORY[0x23B7C6D9C](v5, *a1);
    v13 = *a1;
    if ((*a1 & 0xC000000000000001) == 0)
    {
LABEL_32:
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_68;
      if (v3 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_69;
      v15 = *(_QWORD *)(v13 + 8 * v11);
      swift_retain();
      goto LABEL_35;
    }
LABEL_55:
    v15 = MEMORY[0x23B7C6D9C](v11 - 4, v13);
    v13 = *a1;
LABEL_35:
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *a1 = v13;
    if (!isUniquelyReferenced_nonNull_bridgeObject
      || (v13 & 0x8000000000000000) != 0
      || (v13 & 0x4000000000000000) != 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(v13);
    }
    *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = v15;
    swift_release();
    specialized Array._endMutation()();
    v17 = *a1;
    v18 = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *a1 = v17;
    if (!v18 || (v17 & 0x8000000000000000) != 0 || (v17 & 0x4000000000000000) != 0)
      specialized _ArrayBuffer._consumeAndCreateNew()(v17);
    if ((v3 & 0x8000000000000000) != 0)
      goto LABEL_70;
    if (v3 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_71;
    *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v11) = v14;
    swift_release();
    specialized Array._endMutation()();
    goto LABEL_46;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v5 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_67;
    v14 = *(_QWORD *)(v13 + 8 * v5 + 32);
    swift_retain();
    if ((v13 & 0xC000000000000001) == 0)
      goto LABEL_32;
    goto LABEL_55;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_13:
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 < v5)
      goto LABEL_64;
    return specialized Array.replaceSubrange<A>(_:with:)(v5, v7);
  }
  else
  {
    v7 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7 >= v5)
      return specialized Array.replaceSubrange<A>(_:with:)(v5, v7);
LABEL_64:
    __break(1u);
LABEL_65:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_17:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
}

uint64_t View.symbolFont(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.symbolFont.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues.symbolFont : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.symbolFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t EnvironmentValues.symbolFont.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t View.defaultFont(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.defaultFont : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t EnvironmentValues.defaultFont.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t View.defaultSymbolFont(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.defaultSymbolFont.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues.defaultSymbolFont : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultSymbolFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t key path setter for EnvironmentValues.symbolFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_retain();
  a5(v6);
  return swift_release();
}

uint64_t EnvironmentValues.defaultSymbolFont.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t View.kerning(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.defaultKerning : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultKerning : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultKerning.setter(*a1);
}

uint64_t EnvironmentValues.defaultKerning.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t View.tracking(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.defaultTracking : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultTracking : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultTracking.setter(*a1);
}

uint64_t EnvironmentValues.defaultTracking.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t View.baselineOffset(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.defaultBaselineOffset : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultBaselineOffset : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultBaselineOffset.setter(*a1);
}

uint64_t EnvironmentValues.defaultBaselineOffset.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

Swift::Void __swiftcall EnvironmentValues.configureForRoot()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v0 = type metadata accessor for TimeZone();
  v27 = *(_QWORD *)(v0 - 8);
  v28 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v26 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - v3;
  v5 = type metadata accessor for Calendar();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - v10;
  v12 = type metadata accessor for Locale();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v25 - v17;
  static Locale.current.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v15);
  v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v15, v12);
  v19(v18, v12);
  static Calendar.current.getter();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v8);
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v8, v5);
  v20(v11, v5);
  static TimeZone.current.getter();
  v22 = (uint64_t)v26;
  v21 = v27;
  v23 = v28;
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v26, v4, v28);
  specialized EnvironmentValues._set<A>(_:for:)(v22);
  v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v24(v22, v23);
  v24((uint64_t)v4, v23);
}

void EnvironmentValues.configuredForRoot()(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();
  swift_retain();
  EnvironmentValues.configureForRoot()();
}

void (*EnvironmentValues.font.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.font.modify;
}

void EnvironmentValues.font.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.font.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.EffectiveFontKey@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.EffectiveSymbolFontKey@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t EnvironmentValues.fallbackFontProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.FallbackFontKey@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized static EnvironmentValues.FallbackFontKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.fallbackFontProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.fallbackFontProvider : EnvironmentValues(uint64_t a1)
{
  _BYTE v2[40];
  _BYTE v3[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v3);
  outlined init with copy of AnyTrackedValue((uint64_t)v3, (uint64_t)v2);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t EnvironmentValues.fallbackFontProvider.setter(uint64_t a1)
{
  _BYTE v3[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v3);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*EnvironmentValues.fallbackFontProvider.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  return EnvironmentValues.fallbackFontProvider.modify;
}

void EnvironmentValues.fallbackFontProvider.modify(uint64_t *a1, char a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*a1;
  v3 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of AnyTrackedValue(*a1, v3);
    outlined init with copy of AnyTrackedValue(v3, (uint64_t)v2 + 80);
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2 + 80);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2 + 80);
  }
  else
  {
    outlined init with copy of AnyTrackedValue(*a1, v3);
    specialized EnvironmentValues._set<A>(_:for:)(v3);
  }
  __swift_destroy_boxed_opaque_existential_1(v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  free(v2);
}

void (*EnvironmentValues.defaultFont.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.defaultFont.modify;
}

void EnvironmentValues.defaultFont.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.font.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.defaultSymbolFont.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.defaultSymbolFont.modify;
}

void EnvironmentValues.defaultSymbolFont.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.font.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.symbolFont.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.symbolFont.modify;
}

void EnvironmentValues.symbolFont.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.font.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.font.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, _QWORD **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  v7 = **a1;
  v8 = (uint64_t *)(*a1)[4];
  v9 = *v8;
  if ((a2 & 1) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    a3(v8, v7, (_QWORD **)v6 + 2);
    swift_release();
    swift_release();
    if (v8[1])
    {
      v10 = *(_QWORD *)v6[4];
      swift_retain();
      swift_retain();
      a4(v9, v10);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain_n();
    a3(v8, v7, (_QWORD **)v6 + 3);
    swift_release();
    swift_release();
    if (v8[1])
    {
      v11 = *(_QWORD *)v6[4];
      swift_retain();
      swift_retain();
      a4(v9, v11);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  swift_release();
  free(v6);
}

uint64_t key path getter for EnvironmentValues.imageScale : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t (*EnvironmentValues.imageScale.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 1;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.imageScale.modify;
}

uint64_t EnvironmentValues.imageScale.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.isInTouchBar.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.isInTouchBar : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.isInTouchBar.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.isInTouchBar.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isInTouchBar.modify;
}

void EnvironmentValues.isInTouchBar.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t DefaultFallbackFontProvider.makeFont(in:)()
{
  if (one-time initialization token for body != -1)
    swift_once();
  return swift_retain();
}

uint64_t protocol witness for FallbackFontProvider.makeFont(in:) in conformance DefaultFallbackFontProvider()
{
  if (one-time initialization token for body != -1)
    swift_once();
  return swift_retain();
}

uint64_t key path getter for EnvironmentValues.defaultKerning : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double (*a2)(uint64_t)@<X3>, double (*a3)(uint64_t, uint64_t *)@<X4>, double *a4@<X8>)
{
  uint64_t v5;
  double v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    v7 = a3(v9, &v11);
  }
  result = swift_release_n();
  *a4 = v7;
  return result;
}

void (*EnvironmentValues.displayScale.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.displayScale.modify;
}

void EnvironmentValues.displayScale.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultPixelLength.getter()
{
  return EnvironmentValues.defaultPixelLength.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultPixelLength.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.defaultPixelLength.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  *((_BYTE *)v3 + 8) = v7 & 1;
  return EnvironmentValues.defaultPixelLength.modify;
}

void EnvironmentValues.defaultPixelLength.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.defaultPixelLength.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.dividerThickness.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  _BYTE v14[16];

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    v3 = v2;
    swift_release_n();
    result = swift_release_n();
    if ((v3 & 1) == 0)
      return result;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v13);
    swift_release_n();
    result = swift_release_n();
    v5 = v13;
  }
  else
  {
    v6 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v14);
    v8 = v7;
    result = swift_release_n();
    if ((v8 & 1) == 0)
      return result;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v9);
    v10 = swift_retain_n();
    v11 = specialized find1<A>(_:key:filter:)(v10, v12);
    if (v11)
      v5 = *(unsigned __int8 *)(v11 + 72);
    else
      v5 = 3;
    result = swift_release_n();
  }
  if ((v5 - 7) >= 5)
    return EnvironmentValues.pixelLength.getter();
  return result;
}

uint64_t EnvironmentValues.dividerThickness.setter(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, *(uint64_t *)&a1, 0);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.dividerThickness.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = v1;
  EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return EnvironmentValues.dividerThickness.modify;
}

uint64_t EnvironmentValues.dividerThickness.modify(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[3];
  v3 = *a1;
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, 0);
  swift_release();
  if (v2[1])
  {
    v5 = *(_QWORD *)a1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.defaultRenderingMode.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.displayGamut.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.displayGamut.setter(unsigned __int8 *a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = *a1;
  v7 = *v3;
  swift_retain_n();
  a2(v3, v6, &v10);
  swift_release();
  if (v3[1])
  {
    v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.defaultRenderingMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 1;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.defaultRenderingMode.modify;
}

uint64_t EnvironmentValues.defaultRenderingMode.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.defaultRenderingMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.displayCornerRadius.getter()
{
  return EnvironmentValues.defaultPixelLength.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultPixelLength.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = a1(v3);
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v5 = a2(v7, &v9);
  }
  swift_release_n();
  return v5;
}

uint64_t key path getter for EnvironmentValues.defaultPixelLength : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    v9 = v8;
    swift_release_n();
  }
  else
  {
    v11 = swift_retain_n();
    v7 = a3(v11, &v14);
    v9 = v12;
  }
  result = swift_release_n();
  *(_QWORD *)a4 = v7;
  *(_BYTE *)(a4 + 8) = v9 & 1;
  return result;
}

uint64_t EnvironmentValues.displayCornerRadius.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.displayCornerRadius.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  *((_BYTE *)v3 + 8) = v7 & 1;
  return EnvironmentValues.displayCornerRadius.modify;
}

void EnvironmentValues.displayCornerRadius.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.defaultPixelLength.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.defaultPixelLength.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, _QWORD **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;

  v7 = *a1;
  v8 = (uint64_t *)(*a1)[5];
  v9 = **a1;
  v10 = *((unsigned __int8 *)*a1 + 8);
  v11 = *v8;
  swift_retain_n();
  if ((a2 & 1) != 0)
    v12 = (_QWORD **)(v7 + 3);
  else
    v12 = (_QWORD **)(v7 + 4);
  a3(v8, v9, v10, v12);
  swift_release();
  if (v8[1])
  {
    v13 = *(_QWORD *)v7[5];
    swift_retain();
    swift_retain();
    a4(v11, v13);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v7);
}

uint64_t EnvironmentValues.legibilityWeight.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.legibilityWeight.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = 2;
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7)
      v5 = *(_BYTE *)(v7 + 72);
    *v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.legibilityWeight.modify;
}

uint64_t EnvironmentValues.legibilityWeight.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.locale.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = v1;
  v4 = type metadata accessor for Locale();
  v3[2] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  return EnvironmentValues.locale.modify;
}

void EnvironmentValues.locale.modify(uint64_t a1, char a2)
{
  EnvironmentValues.locale.modify(a1, a2, (void (*)(void *))specialized EnvironmentValues._set<A>(_:for:));
}

void (*EnvironmentValues.calendar.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = v1;
  v4 = type metadata accessor for Calendar();
  v3[2] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  return EnvironmentValues.calendar.modify;
}

void EnvironmentValues.calendar.modify(uint64_t a1, char a2)
{
  EnvironmentValues.locale.modify(a1, a2, (void (*)(void *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t key path setter for EnvironmentValues.locale : EnvironmentValues(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v8 = a5(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v18 - v13;
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15((char *)&v18 - v13, a1, v8);
  v15(v12, v14, v8);
  a6(v12);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
}

void (*EnvironmentValues.timeZone.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = v1;
  v4 = type metadata accessor for TimeZone();
  v3[2] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  v7 = malloc(v6);
  v3[6] = v7;
  v8 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  return EnvironmentValues.timeZone.modify;
}

void EnvironmentValues.timeZone.modify(uint64_t a1, char a2)
{
  EnvironmentValues.locale.modify(a1, a2, (void (*)(void *))specialized EnvironmentValues._set<A>(_:for:));
}

void EnvironmentValues.locale.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  _QWORD *v5;
  void (*v6)(_QWORD, _QWORD, _QWORD);
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, uint64_t);

  v5 = *(_QWORD **)a1;
  v6 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16);
  v6(*(_QWORD *)(*(_QWORD *)a1 + 40), v5[6], v5[2]);
  v7 = (void *)v5[5];
  v8 = (void *)v5[6];
  v10 = v5[3];
  v9 = (void *)v5[4];
  v11 = v5[2];
  if ((a2 & 1) != 0)
  {
    v6(v5[4], v5[5], v5[2]);
    a3(v9);
    v12 = *(void (**)(void *, uint64_t))(v10 + 8);
    v12(v9, v11);
  }
  else
  {
    a3((void *)v5[5]);
    v12 = *(void (**)(void *, uint64_t))(v10 + 8);
  }
  v12(v7, v11);
  v12(v8, v11);
  free(v8);
  free(v7);
  free(v9);
  free(v5);
}

uint64_t (*EnvironmentValues.displayGamut.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 0;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.displayGamut.modify;
}

uint64_t EnvironmentValues.displayGamut.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.defaultRenderingMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultRenderingMode.modify(uint64_t a1, char a2, void (*a3)(_QWORD *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = *(unsigned __int8 *)(a1 + 24);
  v10 = *v8;
  swift_retain_n();
  if ((a2 & 1) != 0)
  {
    v11 = v8;
    v12 = v9;
    v13 = a1;
  }
  else
  {
    v13 = a1 + 8;
    v11 = v8;
    v12 = v9;
  }
  a3(v11, v12, v13);
  swift_release();
  if (v8[1])
  {
    v14 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    a4(v10, v14);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void EnvironmentValues.controlActiveState.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.controlActiveState.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t EnvironmentValues.horizontalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.realHorizontalSizeClass.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.realHorizontalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.horizontalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = 2;
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7)
      v5 = *(_BYTE *)(v7 + 72);
    *v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.horizontalSizeClass.modify;
}

uint64_t EnvironmentValues.horizontalSizeClass.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.realHorizontalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = 2;
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7)
      v5 = *(_BYTE *)(v7 + 72);
    *v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.horizontalSizeClass.modify;
}

uint64_t EnvironmentValues.verticalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.realVerticalSizeClass.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.realVerticalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.verticalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = 2;
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7)
      v5 = *(_BYTE *)(v7 + 72);
    *v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.verticalSizeClass.modify;
}

uint64_t EnvironmentValues.verticalSizeClass.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.realVerticalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = 2;
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7)
      v5 = *(_BYTE *)(v7 + 72);
    *v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.verticalSizeClass.modify;
}

uint64_t EnvironmentValues.allowsVibrantBlending.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1 & 1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.allowsVibrantBlending.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = (v5 == 2) | v5 & 1;
  return EnvironmentValues.allowsVibrantBlending.modify;
}

void EnvironmentValues.allowsVibrantBlending.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

void EnvironmentValues._useVibrantStyling.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._useVibrantStyling.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._useVibrantStyling.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.reduceDesktopTinting.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void (*EnvironmentValues.defaultKerning.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.defaultKerning.modify;
}

void EnvironmentValues.defaultKerning.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.defaultTracking.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.defaultTracking.modify;
}

void EnvironmentValues.defaultTracking.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.defaultBaselineOffset.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.defaultBaselineOffset.modify;
}

void EnvironmentValues.defaultBaselineOffset.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultKerningKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, static DefaultKerningKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultTrackingKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static DefaultTrackingKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultBaselineOffsetKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static DefaultBaselineOffsetKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DisplayScaleKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, static DisplayScaleKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FallbackFontProviderKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of AnyTrackedValue((uint64_t)&static FallbackFontProviderKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (uint64_t)static LocaleKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance CalendarKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], (uint64_t)static CalendarKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;

  v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  return a4();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TimeZoneKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], (uint64_t)static TimeZoneKey.defaultValue, a1);
}

void DisplayGamut.codingProxy.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

SwiftUI::CodableDisplayGamut __swiftcall CodableDisplayGamut.init(_:)(SwiftUI::CodableDisplayGamut result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result.base;
  return result;
}

void CodableDisplayGamut.base.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *CodableDisplayGamut.base.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CodableDisplayGamut.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::CodableDisplayGamut::CodingKind_optional __swiftcall CodableDisplayGamut.CodingKind.init(rawValue:)(SwiftUI::CodableDisplayGamut::CodingKind_optional rawValue)
{
  char *v1;
  char v2;

  if (rawValue.value == SwiftUI_CodableDisplayGamut_CodingKind_displayP3)
    v2 = 1;
  else
    v2 = 2;
  if (rawValue.value == SwiftUI_CodableDisplayGamut_CodingKind_sRGB)
    v2 = 0;
  *v1 = v2;
  return rawValue;
}

uint64_t CodableDisplayGamut.CodingKind.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableDisplayGamut.CodingKind()
{
  lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableDisplayGamut.CodingKind()
{
  lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind();
  return RawRepresentable<>.encode(to:)();
}

uint64_t CodableDisplayGamut.encode(to:)(_QWORD *a1)
{
  char *v1;
  char v2;
  _BYTE v4[24];
  uint64_t v5;
  char v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t CodableDisplayGamut.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v6;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableDisplayGamut@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CodableDisplayGamut.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableDisplayGamut(_QWORD *a1)
{
  return CodableDisplayGamut.encode(to:)(a1);
}

void back deployment fallback for _diagnoseUnavailableCodeReached()()
{
  _diagnoseUnavailableCodeReached_aeic()();
}

void _diagnoseUnavailableCodeReached_aeic()()
{
  _assertionFailure(_:_:flags:)();
  __break(1u);
}

uint64_t specialized static EnvironmentValues.FallbackFontKey.value(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = a1[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t)v9);
    swift_release_n();
  }
  else
  {
    v3 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)v9);
  }
  swift_release_n();
  v4 = v10;
  v5 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v8[0] = v1;
  v8[1] = v2;
  v6 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 8))(v8, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t specialized static EnvironmentValues.EffectiveFontKey.value(in:)(unint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  _BYTE v15[16];

  v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (!v2)
    {
      swift_retain_n();
      swift_retain_n();
      v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
      swift_release_n();
      swift_release_n();
      if (!v2)
      {
        swift_retain_n();
        swift_retain_n();
        v3 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
        swift_release_n();
        swift_release_n();
        return v3;
      }
    }
  }
  else
  {
    v5 = swift_retain_n();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v15);
    swift_release_n();
    if (!v2)
    {
      v6 = swift_retain_n();
      v2 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v14);
      swift_release_n();
      if (!v2)
      {
        v7 = swift_retain_n();
        specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v11);
        swift_release_n();
        v8 = v12;
        v9 = v13;
        __swift_project_boxed_opaque_existential_1(v11, v12);
        v10[0] = v1;
        v10[1] = 0;
        v2 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v9 + 8))(v10, v8, v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
        swift_release_n();
      }
    }
  }
  return v2;
}

uint64_t specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(unint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8[2];
  _BYTE v9[8];
  _BYTE v10[8];
  _BYTE v11[16];

  v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (!v2)
    {
      swift_retain_n();
      swift_retain_n();
      v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
      swift_release_n();
      swift_release_n();
      if (!v2)
      {
        swift_retain_n();
        swift_retain_n();
        v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
        swift_release_n();
        swift_release_n();
        if (!v2)
        {
          swift_retain_n();
          swift_retain_n();
          v3 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
          swift_release_n();
          swift_release_n();
          return v3;
        }
      }
    }
  }
  else
  {
    v5 = swift_retain_n();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v11);
    swift_release_n();
    if (!v2)
    {
      v6 = swift_retain_n();
      v2 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v10);
      swift_release_n();
      if (!v2)
      {
        v7 = swift_retain_n();
        v2 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v9);
        swift_release_n();
        if (!v2)
        {
          v8[0] = v1;
          v8[1] = 0;
          swift_retain();
          v2 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(v8);
          swift_release();
        }
      }
    }
  }
  return v2;
}

uint64_t sub_2351635F8(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.imageScale.setter(&v2);
}

uint64_t sub_235163638()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_235163668()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.monospaced(_:)(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))
{
  uint64_t v1;

  return closure #1 in View.monospaced(_:)(a1, *(_BYTE *)(v1 + 16), (void (*)(void))specialized static AnyFontModifier.static<A>(_:), &lazy cache variable for type metadata for AnyStaticFontModifier<Font.MonospacedModifier>, (uint64_t)&type metadata for Font.MonospacedModifier, (uint64_t)&protocol witness table for Font.MonospacedModifier);
}

uint64_t sub_2351636B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.fontWeight(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in View.fontWeight(_:)(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_2351636CC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.fontWidth(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in View.fontWidth(_:)(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_2351636E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.bold(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in View.bold(_:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_235163700()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.italic(_:)(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))
{
  uint64_t v1;

  return closure #1 in View.monospaced(_:)(a1, *(_BYTE *)(v1 + 16), (void (*)(void))specialized static AnyFontModifier.static<A>(_:), &lazy cache variable for type metadata for AnyStaticFontModifier<Font.ItalicModifier>, (uint64_t)&type metadata for Font.ItalicModifier, (uint64_t)&protocol witness table for Font.ItalicModifier);
}

uint64_t sub_235163748()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.fontDesign(_:)(unint64_t *a1)
{
  uint64_t v1;

  return closure #1 in View.fontDesign(_:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_235163764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_235163774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_235163784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_235163794(double *a1)
{
  return EnvironmentValues.defaultKerning.setter(*a1);
}

uint64_t sub_2351637BC(double *a1)
{
  return EnvironmentValues.defaultTracking.setter(*a1);
}

uint64_t sub_2351637E4(double *a1)
{
  return EnvironmentValues.defaultBaselineOffset.setter(*a1);
}

unint64_t lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableDisplayGamut.CodingKind, &type metadata for CodableDisplayGamut.CodingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableDisplayGamut.CodingKind, &type metadata for CodableDisplayGamut.CodingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableDisplayGamut.CodingKind, &type metadata for CodableDisplayGamut.CodingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableDisplayGamut.CodingKind, &type metadata for CodableDisplayGamut.CodingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode;
  if (!lazy protocol witness table cache variable for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.TemplateRenderingMode, &type metadata for Image.TemplateRenderingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Scale and conformance Image.Scale()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Scale and conformance Image.Scale;
  if (!lazy protocol witness table cache variable for type Image.Scale and conformance Image.Scale)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Scale, &type metadata for Image.Scale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Scale and conformance Image.Scale);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass;
  if (!lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UserInterfaceSizeClass, &type metadata for UserInterfaceSizeClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayGamut and conformance DisplayGamut()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayGamut and conformance DisplayGamut;
  if (!lazy protocol witness table cache variable for type DisplayGamut and conformance DisplayGamut)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayGamut, &type metadata for DisplayGamut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayGamut and conformance DisplayGamut);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlActiveState and conformance ControlActiveState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ControlActiveState and conformance ControlActiveState;
  if (!lazy protocol witness table cache variable for type ControlActiveState and conformance ControlActiveState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ControlActiveState, &type metadata for ControlActiveState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlActiveState and conformance ControlActiveState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ControlActiveState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ControlActiveState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ControlActiveState] and conformance [A])
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [ControlActiveState], (uint64_t)&type metadata for ControlActiveState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ControlActiveState] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LegibilityWeight and conformance LegibilityWeight()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LegibilityWeight and conformance LegibilityWeight;
  if (!lazy protocol witness table cache variable for type LegibilityWeight and conformance LegibilityWeight)
  {
    result = MEMORY[0x23B7C9C04]("I.:\x1B$k\t", &type metadata for LegibilityWeight);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegibilityWeight and conformance LegibilityWeight);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableDisplayGamut and conformance CodableDisplayGamut()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableDisplayGamut, &type metadata for CodableDisplayGamut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableDisplayGamut, &type metadata for CodableDisplayGamut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableDisplayGamut(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CodableDisplayGamut and conformance CodableDisplayGamut();
  result = lazy protocol witness table accessor for type CodableDisplayGamut and conformance CodableDisplayGamut();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_235163BA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_235163BE4(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.imageScale.setter(&v2);
}

uint64_t sub_235163C1C(char *a1)
{
  return EnvironmentValues.isInTouchBar.setter(*a1);
}

uint64_t sub_235163C40@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163C64(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_235163C88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultPixelLength : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163CAC(uint64_t a1)
{
  return EnvironmentValues.defaultPixelLength.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_235163CD8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_235163D10(double *a1)
{
  return EnvironmentValues.dividerThickness.setter(*a1);
}

uint64_t sub_235163D34@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163D58(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.defaultRenderingMode.setter(&v2);
}

uint64_t sub_235163D8C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultPixelLength : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163DB0(uint64_t a1)
{
  return EnvironmentValues.displayCornerRadius.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_235163DDC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163E00(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.legibilityWeight.setter(&v2);
}

uint64_t sub_235163E34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_235163E58(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_235163E7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_235163EA0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_235163EC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_235163EE8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_235163F0C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163F30(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.displayGamut.setter(&v2);
}

void sub_235163F64()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_235163F88()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

_QWORD *sub_235163F98@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_82Tm((_QWORD *(*)(uint64_t *__return_ptr))EnvironmentValues.horizontalSizeClass.getter, a1);
}

uint64_t sub_235163FA4(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.horizontalSizeClass.setter(&v2);
}

uint64_t sub_235163FD8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_235163FFC(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.realHorizontalSizeClass.setter(&v2);
}

_QWORD *sub_235164030@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_82Tm((_QWORD *(*)(uint64_t *__return_ptr))EnvironmentValues.verticalSizeClass.getter, a1);
}

_QWORD *keypath_get_82Tm@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X3>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = a1(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_23516407C(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.verticalSizeClass.setter(&v2);
}

uint64_t sub_2351640B0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2351640D4(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.realVerticalSizeClass.setter(&v2);
}

uint64_t sub_235164108@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsVibrantBlending.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_235164144(char *a1)
{
  return EnvironmentValues.allowsVibrantBlending.setter(*a1);
}

void sub_235164168()
{
  keypath_get_92Tm();
}

void sub_235164174()
{
  keypath_get_92Tm();
}

void keypath_get_92Tm()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for Image.TemplateRenderingMode()
{
  return &type metadata for Image.TemplateRenderingMode;
}

uint64_t storeEnumTagSinglePayload for Image.Scale(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_235164204 + 4 * byte_2352D0955[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_235164238 + 4 * byte_2352D0950[v4]))();
}

uint64_t sub_235164238(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235164240(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235164248);
  return result;
}

uint64_t sub_235164254(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23516425CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_235164260(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235164268(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Image.Scale()
{
  return &type metadata for Image.Scale;
}

ValueMetadata *type metadata accessor for UserInterfaceSizeClass()
{
  return &type metadata for UserInterfaceSizeClass;
}

ValueMetadata *type metadata accessor for DisplayGamut()
{
  return &type metadata for DisplayGamut;
}

uint64_t storeEnumTagSinglePayload for ControlActiveState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2351642F0 + 4 * byte_2352D095F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235164324 + 4 * byte_2352D095A[v4]))();
}

uint64_t sub_235164324(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23516432C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235164334);
  return result;
}

uint64_t sub_235164340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235164348);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23516434C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235164354(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ControlActiveState()
{
  return &type metadata for ControlActiveState;
}

ValueMetadata *type metadata accessor for LegibilityWeight()
{
  return &type metadata for LegibilityWeight;
}

uint64_t dispatch thunk of FallbackFontProvider.makeFont(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for DefaultFallbackFontProvider()
{
  return &type metadata for DefaultFallbackFontProvider;
}

ValueMetadata *type metadata accessor for CodableDisplayGamut()
{
  return &type metadata for CodableDisplayGamut;
}

uint64_t storeEnumTagSinglePayload for Image.TemplateRenderingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2351643F4 + 4 * byte_2352D0969[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_235164428 + 4 * byte_2352D0964[v4]))();
}

uint64_t sub_235164428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235164430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235164438);
  return result;
}

uint64_t sub_235164444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23516444CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_235164450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235164458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodableDisplayGamut.CodingKind()
{
  return &type metadata for CodableDisplayGamut.CodingKind;
}

uint64_t sub_235164474(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, (uint64_t)&type metadata for Image.Scale);
}

uint64_t sub_235164488(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Sizing>, (uint64_t)&type metadata for Text.Sizing);
}

uint64_t sub_23516449C(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVySayAA07AnyFontI0CGGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>, (uint64_t)&protocol witness table for _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVySayAA07AnyFontI0CGGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = a2(255);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = a3;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t sub_235164510(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVySayAA07AnyFontI0CGGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t)&protocol witness table for _EnvironmentKeyTransformModifier<A>);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t))type metadata accessor for [AnyFontModifier], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier);
}

void type metadata accessor for [AnyFontModifier](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, (unint64_t *)&lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t sub_23516455C(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x24BEE50B0]);
}

ValueMetadata *type metadata accessor for VerticalUserInterfaceSizeClassKey()
{
  return &type metadata for VerticalUserInterfaceSizeClassKey;
}

ValueMetadata *type metadata accessor for HorizontalUserInterfaceSizeClassKey()
{
  return &type metadata for HorizontalUserInterfaceSizeClassKey;
}

ValueMetadata *type metadata accessor for ImageScaleKey()
{
  return &type metadata for ImageScaleKey;
}

ValueMetadata *type metadata accessor for LegibilityWeightKey()
{
  return &type metadata for LegibilityWeightKey;
}

ValueMetadata *type metadata accessor for DisplayGamutKey()
{
  return &type metadata for DisplayGamutKey;
}

ValueMetadata *type metadata accessor for DefaultRenderingModeKey()
{
  return &type metadata for DefaultRenderingModeKey;
}

ValueMetadata *type metadata accessor for TimeZoneKey()
{
  return &type metadata for TimeZoneKey;
}

ValueMetadata *type metadata accessor for LocaleKey()
{
  return &type metadata for LocaleKey;
}

ValueMetadata *type metadata accessor for CalendarKey()
{
  return &type metadata for CalendarKey;
}

ValueMetadata *type metadata accessor for DisplayScaleKey()
{
  return &type metadata for DisplayScaleKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FallbackFontKey()
{
  return &type metadata for EnvironmentValues.FallbackFontKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.EffectiveFontKey()
{
  return &type metadata for EnvironmentValues.EffectiveFontKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.EffectiveSymbolFontKey()
{
  return &type metadata for EnvironmentValues.EffectiveSymbolFontKey;
}

ValueMetadata *type metadata accessor for FontKey()
{
  return &type metadata for FontKey;
}

ValueMetadata *type metadata accessor for SymbolFontKey()
{
  return &type metadata for SymbolFontKey;
}

ValueMetadata *type metadata accessor for DefaultFontKey()
{
  return &type metadata for DefaultFontKey;
}

ValueMetadata *type metadata accessor for DefaultSymbolFontKey()
{
  return &type metadata for DefaultSymbolFontKey;
}

ValueMetadata *type metadata accessor for DefaultKerningKey()
{
  return &type metadata for DefaultKerningKey;
}

ValueMetadata *type metadata accessor for DefaultTrackingKey()
{
  return &type metadata for DefaultTrackingKey;
}

ValueMetadata *type metadata accessor for DefaultBaselineOffsetKey()
{
  return &type metadata for DefaultBaselineOffsetKey;
}

ValueMetadata *type metadata accessor for FallbackFontProviderKey()
{
  return &type metadata for FallbackFontProviderKey;
}

ValueMetadata *type metadata accessor for InTouchBarKey()
{
  return &type metadata for InTouchBarKey;
}

ValueMetadata *type metadata accessor for DefaultPixelLengthKey()
{
  return &type metadata for DefaultPixelLengthKey;
}

ValueMetadata *type metadata accessor for DividerThicknessKey()
{
  return &type metadata for DividerThicknessKey;
}

ValueMetadata *type metadata accessor for DisplayCornerRadiusKey()
{
  return &type metadata for DisplayCornerRadiusKey;
}

ValueMetadata *type metadata accessor for AllowsVibrantBlendingKey()
{
  return &type metadata for AllowsVibrantBlendingKey;
}

void EnvironmentValues.reduceDesktopTinting.setter()
{
  EnvironmentValues._useVibrantStyling.setter();
}

void sub_2351647B0()
{
  sub_235163F88();
}

void sub_2351647BC()
{
  sub_235163F88();
}

uint64_t WeakUncheckedSendable.init(_:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t UncheckedSendable.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UncheckedSendable.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*UncheckedSendable.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t UncheckedSendable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static UncheckedSendable<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> UncheckedSendable<A>()
{
  return static UncheckedSendable<A>.== infix(_:_:)();
}

uint64_t UncheckedSendable<A>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int UncheckedSendable<A>.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> UncheckedSendable<A>()
{
  return UncheckedSendable<A>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <A> UncheckedSendable<A>()
{
  return UncheckedSendable<A>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> UncheckedSendable<A>()
{
  Hasher.init(_seed:)();
  UncheckedSendable<A>.hash(into:)();
  return Hasher._finalize()();
}

uint64_t key path getter for WeakUncheckedSendable.value : <A>WeakUncheckedSendable<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[8];

  v7 = type metadata accessor for WeakUncheckedSendable(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v9 = MEMORY[0x23B7C9E44](v11);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  *a5 = v9;
  return result;
}

void WeakUncheckedSendable.value.getter()
{
  JUMPOUT(0x23B7C9E44);
}

uint64_t WeakUncheckedSendable.value.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*WeakUncheckedSendable.value.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = MEMORY[0x23B7C9E44](v1);
  return WeakBox.base.modify;
}

uint64_t base witness table accessor for Equatable in <A> UncheckedSendable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> UncheckedSendable<A>, a1, &v4);
}

uint64_t sub_235164A78()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_235164A88()
{
  return 8;
}

_QWORD *sub_235164A94(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for UncheckedSendable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_235164B50 + 4 * byte_2352D1510[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for UncheckedSendable(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for UncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncheckedSendable);
}

uint64_t type metadata accessor for WeakUncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakUncheckedSendable);
}

void TransactionID.init<A>(context:)(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t Counter;

  v2 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  *a1 = Counter;
}

SwiftUI::TransactionID __swiftcall TransactionID.init()()
{
  _QWORD *v0;
  SwiftUI::TransactionID result;

  *v0 = 0;
  return result;
}

void TransactionID.init(graph:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Counter;

  Counter = AGGraphGetCounter();

  *a2 = Counter;
}

void TransactionID.init(context:)(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t Counter;

  v2 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  *a1 = Counter;
}

BOOL static TransactionID.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void TransactionID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static TransactionID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int TransactionID.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TransactionID and conformance TransactionID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransactionID and conformance TransactionID;
  if (!lazy protocol witness table cache variable for type TransactionID and conformance TransactionID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionID, &type metadata for TransactionID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionID and conformance TransactionID);
  }
  return result;
}

ValueMetadata *type metadata accessor for TransactionID()
{
  return &type metadata for TransactionID;
}

void static Gradient.ColorSpace.device.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

BOOL static Gradient.ColorSpace.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static Gradient.ColorSpace.perceptual.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Gradient.ColorSpace.linear.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void Gradient.ColorSpace.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Gradient.ColorSpace.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Gradient.colorSpace(_:)(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *a1;
  type metadata accessor for GradientBox<ColorSpaceGradientProvider>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 25) = v3;
  swift_bridgeObjectRetain();
  return v4;
}

void type metadata accessor for GradientBox<ColorSpaceGradientProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for GradientBox<ColorSpaceGradientProvider>)
  {
    v2 = lazy protocol witness table accessor for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider();
    v4 = type metadata accessor for GradientBox(a1, (uint64_t)&unk_25063C660, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for GradientBox<ColorSpaceGradientProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorSpaceGradientProvider, &unk_25063C660);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorSpaceGradientProvider, &unk_25063C660);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorSpaceGradientProvider, &unk_25063C660);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider);
  }
  return result;
}

uint64_t AnyGradient.colorSpace(_:)(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *a1;
  type metadata accessor for GradientBox<ColorSpaceGradientProvider>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = 1;
  *(_BYTE *)(v4 + 25) = v3;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Gradient.ColorSpace and conformance Gradient.ColorSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Gradient.ColorSpace and conformance Gradient.ColorSpace;
  if (!lazy protocol witness table cache variable for type Gradient.ColorSpace and conformance Gradient.ColorSpace)
  {
    result = MEMORY[0x23B7C9C04]("]&:\x1Bxk\t", &type metadata for Gradient.ColorSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient.ColorSpace and conformance Gradient.ColorSpace);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Gradient.ColorSpace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2351651BC + 4 * byte_2352D16E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2351651F0 + 4 * asc_2352D16E0[v4]))();
}

uint64_t sub_2351651F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351651F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235165200);
  return result;
}

uint64_t sub_23516520C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235165214);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_235165218(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235165220(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Gradient.ColorSpace()
{
  return &type metadata for Gradient.ColorSpace;
}

uint64_t initializeBufferWithCopyOfBuffer for ColorSpaceGradientProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of EitherGradient(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t assignWithCopy for ColorSpaceGradientProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of EitherGradient(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t assignWithTake for ColorSpaceGradientProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorSpaceGradientProvider(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorSpaceGradientProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for ColorSpaceGradientProvider()
{
  return &unk_25063C660;
}

uint64_t ColorSpaceGradientProvider.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)v2;
  v7 = *(_BYTE *)(v2 + 9);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    v11[0] = *a1;
    v11[1] = v4;
    v8 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)v6 + 104);
    swift_retain();
    v8(&v12, v11);
    result = outlined consume of EitherGradient(v6, 1);
    v10 = v12;
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined copy of EitherGradient(v6, 0);
    v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(v6, v5, v4);
    if (one-time initialization token for default != -1)
      swift_once();
    result = outlined consume of EitherGradient(v6, 0);
  }
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

Swift::Int ColorSpaceGradientProvider.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::UInt8 v3;
  void (*v4)(_BYTE *);
  _BYTE v6[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 9);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v4 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
    swift_retain();
    v4(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for GradientProvider.fallbackColor(in:) in conformance ColorSpaceGradientProvider(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(__int128 *);
  uint64_t v4;
  __int128 v6;

  if (*(_BYTE *)(v1 + 8) != 1)
    return 0;
  v2 = *(_QWORD *)v1;
  v6 = *a1;
  v3 = *(uint64_t (**)(__int128 *))(*(_QWORD *)v2 + 112);
  swift_retain();
  v4 = v3(&v6);
  outlined consume of EitherGradient(v2, 1);
  return v4;
}

void protocol witness for Hashable.hash(into:) in conformance ColorSpaceGradientProvider(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  Swift::UInt8 v5;
  void (*v6)(uint64_t);

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 9);
  if ((v4 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v6 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
    swift_retain();
    v6(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }
  outlined consume of EitherGradient(v3, v4);
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColorSpaceGradientProvider()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::UInt8 v3;
  void (*v4)(_BYTE *);
  _BYTE v6[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 9);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v4 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
    swift_retain();
    v4(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for ColorSpaceGradientProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

BOOL specialized static ColorSpaceGradientProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t (*v8)(uint64_t);
  _BOOL8 result;
  char v10;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 9);
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 9);
  if ((v3 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    {
      if (v2 == v5)
      {
        outlined copy of EitherGradient(*(_QWORD *)a2, 1);
        outlined copy of EitherGradient(v2, 1);
        outlined consume of EitherGradient(v2, 1);
        outlined consume of EitherGradient(v5, 1);
      }
      else
      {
        v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88);
        outlined copy of EitherGradient(*(_QWORD *)a2, 1);
        outlined copy of EitherGradient(v2, 1);
        LOBYTE(v8) = v8(v5);
        outlined consume of EitherGradient(v2, 1);
        outlined consume of EitherGradient(v5, 1);
        if ((v8 & 1) == 0)
          return 0;
      }
      return v4 == v7;
    }
LABEL_7:
    outlined copy of EitherGradient(*(_QWORD *)a2, *(_BYTE *)(a2 + 8));
    outlined copy of EitherGradient(v2, v3);
    outlined consume of EitherGradient(v2, v3);
    outlined consume of EitherGradient(v5, v6);
    return 0;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    goto LABEL_7;
  outlined copy of EitherGradient(*(_QWORD *)a2, 0);
  outlined copy of EitherGradient(v2, 0);
  v10 = specialized static Array<A>.== infix(_:_:)(v2, v5);
  outlined consume of EitherGradient(v2, 0);
  outlined consume of EitherGradient(v5, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v4 == v7;
  return result;
}

uint64_t _GraphInputs.makeReusable(indirectMap:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = v1;
  specialized Attribute.makeReusable(indirectMap:)(a1);
  specialized Attribute.makeReusable(indirectMap:)(a1);
  v4 = *(_DWORD *)(v1 + 32);
  if ((v4 & 0x40) == 0)
  {
    v4 |= 0x40u;
    *(_DWORD *)(v1 + 32) = v4;
  }
  v5 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  v17 = *(_DWORD *)(v5 + 16);
  specialized Attribute.makeReusable(indirectMap:)(a1);
  v6 = MEMORY[0x24BEE4AF8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v17;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_WORD *)(v8 + 80) = 256;
  *(_QWORD *)(v8 + 88) = v7;
  swift_release();
  *(_QWORD *)(v2 + 16) = v8;
  if ((v4 & 0x20) == 0)
    *(_DWORD *)(v2 + 32) = v4 | 0x20;
  specialized Attribute.makeReusable(indirectMap:)(a1);
  v9 = swift_retain();
  v10 = specialized find<A>(_:key:)(v9);
  if (v10)
  {
    v11 = (uint64_t *)(v10 + 80);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v11 = &qword_254287C00;
  }
  v12 = (_QWORD *)*v11;
  swift_retain();
  result = swift_release();
  if (v12)
  {
    do
    {
      v15 = v12[3];
      v14 = (_QWORD *)v12[4];
      v16 = v12[2];
      swift_retain();
      swift_release();
      result = project #1 <A>(_:) in _GraphInputs.makeReusable(indirectMap:)(v16, (uint64_t *)v2, a1, v16, v15);
      v12 = v14;
    }
    while (v14);
  }
  return result;
}

uint64_t _GraphInputs.tryToReuse(by:indirectMap:testOnly:)(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  v16 = a1[5];
  v17 = *a1;
  v8 = *v3;
  v9 = *((_DWORD *)v3 + 2);
  v10 = v3[2];
  v18 = *(_OWORD *)(v3 + 3);
  v19 = *(_OWORD *)(a1 + 3);
  v11 = v3[5];
  if ((specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v6, a2, a3, v9, 1701669204, (void *)0xE400000000000000) & 1) != 0&& (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v19, a2, a3 & 1, v18, 0x6573616850, (void *)0xE500000000000000) & 1) != 0&& (swift_beginAccess(), v12 = *(_DWORD *)(v10 + 16), swift_beginAccess(), (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(*(unsigned int *)(v7 + 16), a2,
           a3 & 1,
           v12,
           0xD000000000000011,
           (void *)0x80000002352E8790) & 1) != 0)
    && (v13 = a3 & 1,
        (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(DWORD1(v19), a2, v13, DWORD1(v18), 0x746361736E617254, (void *)0xEB000000006E6F69) & 1) != 0))
  {
    v25 = v9;
    v26 = v10;
    v27 = v18;
    v28 = v11;
    *(_QWORD *)&v20 = v17;
    DWORD2(v20) = v6;
    v21 = v7;
    v22 = v19;
    v23 = v16;
    v24 = v8;
    v14 = _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(&v20, a2, v13);
  }
  else
  {
    specialized static Log.graphReuse(_:)();
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized Attribute.makeReusable(indirectMap:)(uint64_t a1)
{
  unsigned int *v1;
  _DWORD *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  int IndirectAttribute2;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    IndirectAttribute2 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v6);
  }
  else
  {
    swift_endAccess();
    AGGraphClearUpdate();
    v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute2, v4, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a1 + 24) = v12;
    swift_bridgeObjectRelease();
  }
  result = swift_endAccess();
  *v2 = IndirectAttribute2;
  return result;
}

uint64_t Attribute.makeReusable(indirectMap:)(uint64_t a1)
{
  unsigned int *v1;
  _DWORD *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  int IndirectAttribute2;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    IndirectAttribute2 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v6);
  }
  else
  {
    swift_endAccess();
    AGGraphClearUpdate();
    v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute2, v4, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a1 + 24) = v12;
    swift_bridgeObjectRelease();
  }
  result = swift_endAccess();
  *v2 = IndirectAttribute2;
  return result;
}

uint64_t specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 1701669204, (void *)0xE400000000000000);
}

{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 0x6573616850, (void *)0xE500000000000000);
}

{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 0xD000000000000011, (void *)0x80000002352E8790);
}

{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 0x746361736E617254, (void *)0xEB000000006E6F69);
}

uint64_t specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4, uint64_t a5, void *a6)
{
  char v11;

  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a4), (v11 & 1) != 0))
  {
    swift_endAccess();
    if ((a3 & 1) == 0)
      AGGraphSetIndirectAttribute();
    return 1;
  }
  else
  {
    swift_endAccess();
    specialized static Log.graphReuse(_:)(a5, a6);
    return 0;
  }
}

uint64_t Attribute.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  char v7;
  uint64_t v9;

  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a4), (v7 & 1) != 0))
  {
    swift_endAccess();
    if ((a3 & 1) == 0)
      AGGraphSetIndirectAttribute();
    return 1;
  }
  else
  {
    v9 = swift_endAccess();
    MEMORY[0x24BDAC7A8](v9);
    specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:));
    return 0;
  }
}

uint64_t IndirectAttributeMap.__allocating_init(subgraph:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_allocObject();
  v3 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = v3;
  return result;
}

id IndirectAttributeMap.subgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t IndirectAttributeMap.map.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t IndirectAttributeMap.map.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*IndirectAttributeMap.map.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t IndirectAttributeMap.init(subgraph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v2;
  return v1;
}

uint64_t IndirectAttributeMap.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IndirectAttributeMap.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t static GraphReusable.isTriviallyReusable.getter()
{
  return 0;
}

uint64_t _GraphValue.makeReusable(indirectMap:)(uint64_t a1)
{
  type metadata accessor for Attribute();
  return Attribute.makeReusable(indirectMap:)(a1);
}

uint64_t _GraphValue.tryToReuse(by:indirectMap:testOnly:)(unsigned int *a1, uint64_t a2, char a3)
{
  unsigned int *v3;

  return Attribute.tryToReuse(by:indirectMap:testOnly:)(*a1, a2, a3, *v3);
}

uint64_t static _GraphValue<A>.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t project #1 <A>(_:) in _GraphInputs.makeReusable(indirectMap:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v19 - v13;
  result = (*(uint64_t (**)(uint64_t, uint64_t, double))(a5 + 16))(a4, a5, v12);
  if ((result & 1) == 0)
  {
    v16 = *((_DWORD *)a2 + 2);
    v17 = a2[2];
    v18 = a2[5];
    v19 = *a2;
    v20 = v16;
    v21 = v17;
    v22 = *(_OWORD *)(a2 + 3);
    v23 = v18;
    _GraphInputs.subscript.getter(a1, a4, a5);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 24))(a3, v14, a4, a5);
    specialized _ViewListCountInputs.subscript.setter((uint64_t)v14, a1, a4, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(__int128 *a1, uint64_t a2, char a3)
{
  __int128 *v3;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 v46[3];
  __int128 v47[3];
  uint64_t v48;
  _QWORD v49[2];

  v6 = a1[1];
  v47[0] = *a1;
  v47[1] = v6;
  v47[2] = a1[2];
  v7 = v3[1];
  v46[0] = *v3;
  v46[1] = v7;
  v46[2] = v3[2];
  v8 = *(_QWORD *)&v46[0];
  v49[0] = *(_QWORD *)&v46[0];
  outlined retain of _GraphInputs((uint64_t)v46);
  outlined retain of ViewTransform((uint64_t)v49);
  v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 72);
    v11 = (uint64_t *)(v9 + 80);
  }
  else
  {
    v10 = &static ReusableInputs.defaultValue;
    v11 = &qword_254287C00;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v12 = (_QWORD *)*v11;
  v13 = *v10;
  swift_retain();
  outlined release of ViewTransform((uint64_t)v49);
  outlined release of _GraphInputs((uint64_t)v46);
  v14 = *(_QWORD *)&v47[0];
  v48 = *(_QWORD *)&v47[0];
  outlined retain of _GraphInputs((uint64_t)v47);
  outlined retain of ViewTransform((uint64_t)&v48);
  v15 = specialized find<A>(_:key:)(v14);
  if (v15)
  {
    v16 = (uint64_t *)(v15 + 72);
    v17 = (uint64_t *)(v15 + 80);
  }
  else
  {
    v16 = &static ReusableInputs.defaultValue;
    v17 = &qword_254287C00;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v18 = *v17;
  v19 = *v16;
  swift_retain();
  outlined release of ViewTransform((uint64_t)&v48);
  outlined release of _GraphInputs((uint64_t)v47);
  if (v13 == v19)
  {
    v42 = a3;
    v43 = a2;
    swift_retain();
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v12)
    {
      v21 = v12;
      do
      {
        v22 = (_QWORD *)v21[4];
        v23 = v21[2];
        swift_retain();
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        v25 = v20[2];
        v24 = v20[3];
        if (v25 >= v24 >> 1)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v20);
        v20[2] = v25 + 1;
        v20[v25 + 4] = v23;
        v21 = v22;
      }
      while (v22);
    }
    swift_retain();
    v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v18)
    {
      v27 = v18;
      do
      {
        v28 = *(_QWORD *)(v27 + 32);
        v29 = *(_QWORD *)(v27 + 16);
        swift_retain();
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        v31 = v26[2];
        v30 = v26[3];
        if (v31 >= v30 >> 1)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v26);
        v26[2] = v31 + 1;
        v26[v31 + 4] = v29;
        v27 = v28;
      }
      while (v28);
    }
    v32 = specialized static Array<A>.== infix(_:_:)(v20, v26);
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      v34 = v20[2];
      v33 = v20[3];
      if (v34 >= v33 >> 1)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v20);
      v20[2] = v34 + 1;
      v20[v34 + 4] = &type metadata for ReusableInputs;
      v45 = v20;
      if (v8)
      {
        v35 = v43;
        if (v14)
        {
          v44 = v20;
          swift_bridgeObjectRetain();
          outlined retain of ViewTransform((uint64_t)v49);
          outlined retain of ViewTransform((uint64_t)&v48);
          swift_bridgeObjectRetain();
          v36 = compareLists(_:_:ignoredTypes:)(v8, v14, (uint64_t)&v44);
          swift_bridgeObjectRelease();
          outlined release of ViewTransform((uint64_t)&v48);
          outlined release of ViewTransform((uint64_t)v49);
          swift_bridgeObjectRelease();
          if (v36)
          {
            v34 = v20[2] - 1;
            goto LABEL_38;
          }
        }
      }
      else
      {
        v35 = v43;
        if (!v14)
        {
LABEL_38:
          v44 = (_QWORD *)v34;
          swift_retain();
          v38 = v12;
          while (v38)
          {
            v39 = v38[3];
            v40 = (_QWORD *)v38[4];
            v41 = v38[2];
            swift_retain();
            swift_release();
            v38 = v40;
            if ((specialized project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(v41, (uint64_t *)&v45, (unint64_t *)&v44, v46, v47, v35, v42 & 1, v41, v39) & 1) == 0)
            {
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              return 0;
            }
          }
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      swift_bridgeObjectRelease();
      specialized static Log.graphReuse(_:)();
    }
    else
    {
      swift_bridgeObjectRelease();
      specialized static Log.graphReuse(_:)();
    }
  }
  swift_release();
  swift_release();
  return 0;
}

uint64_t specialized project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(uint64_t a1, uint64_t *a2, unint64_t *a3, __int128 *a4, __int128 *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  void (*v33)(_BYTE *, uint64_t);
  uint64_t v34;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v38 = a4;
  v39 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v41 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v35[-v19];
  swift_beginAccess();
  v21 = *a3;
  result = swift_beginAccess();
  v23 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v23 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v24 = *a2;
  if (*(_QWORD *)(*a2 + 16) < v23)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v36 = a7;
  v37 = a6;
  v25 = 1;
  v26 = specialized Collection<>.firstIndex(of:)(a1, v24 + 32, 0, (2 * v23) | 1);
  if ((v27 & 1) == 0)
  {
    v28 = v26;
    swift_beginAccess();
    specialized MutableCollection.swapAt(_:_:)(v28, v21);
    swift_endAccess();
    v25 = 1;
    swift_beginAccess();
    --*a3;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a9 + 16))(a8, a9) & 1) == 0)
    {
      v29 = v38[1];
      v42 = *v38;
      v43 = v29;
      v44 = v38[2];
      _GraphInputs.subscript.getter(a1, a8, a9);
      v30 = v39[1];
      v42 = *v39;
      v43 = v30;
      v44 = v39[2];
      _GraphInputs.subscript.getter(a1, a8, a9);
      v31 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, _QWORD, uint64_t, uint64_t))(a9 + 32))(v20, v17, v37, v36 & 1, a8, a9);
      v32 = v41;
      v33 = *(void (**)(_BYTE *, uint64_t))(v40 + 8);
      v33(v17, v41);
      v34 = ((uint64_t (*)(_BYTE *, uint64_t))v33)(v20, v32);
      if ((v31 & 1) != 0)
      {
        return 1;
      }
      else
      {
        MEMORY[0x24BDAC7A8](v34);
        *(_QWORD *)&v35[-16] = a8;
        *(_QWORD *)&v35[-8] = a9;
        specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:));
        return 0;
      }
    }
  }
  return v25;
}

uint64_t implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x80000002352E8740;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(40);
  v0._object = (void *)0x80000002352E86E0;
  v0._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance Attribute<A>(unsigned int *a1, uint64_t a2, char a3)
{
  unsigned int *v3;

  return Attribute.tryToReuse(by:indirectMap:testOnly:)(*a1, a2, a3, *v3);
}

uint64_t one-time initialization function for graphReuseLog()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.graphReuseLog);
  __swift_project_value_buffer(v0, (uint64_t)static Log.graphReuseLog);
  return Logger.init(subsystem:category:)();
}

void specialized static Log.graphReuse(_:)(uint64_t (*a1)(void))
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _OWORD v17[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    v9 = a1();
    v11 = v10;
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.graphReuseLog);
    swift_bridgeObjectRetain();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      *(_QWORD *)&v17[0] = v16;
      *(_DWORD *)v15 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, (uint64_t *)v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2349C4000, v13, v14, "%s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v16, -1, -1);
      MEMORY[0x23B7C9D54](v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_standardUserDefaults);
  v4 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v5 = objc_msgSend(v3, sel_objectForKey_, v4);

  if (!v5)
  {
    memset(v17, 0, sizeof(v17));
    outlined destroy of Any?((uint64_t)v17);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v17);
  v6 = objc_msgSend(v2, sel_standardUserDefaults);
  v7 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  static EnableGraphReuseLogging.cachedValue = v8;
  if ((v8 & 1) != 0)
    goto LABEL_6;
}

void specialized static Log.graphReuse(_:)(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  __int128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _OWORD v20[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    *(_QWORD *)&v20[0] = 0;
    *((_QWORD *)&v20[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v11._countAndFlagsBits = 0xD000000000000026;
    v11._object = (void *)0x80000002352E86E0;
    String.append(_:)(v11);
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    v14 = v20[0];
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.graphReuseLog);
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      *(_QWORD *)&v20[0] = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, *((unint64_t *)&v14 + 1), (uint64_t *)v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2349C4000, v16, v17, "%s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v19, -1, -1);
      MEMORY[0x23B7C9D54](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v4, sel_standardUserDefaults);
  v6 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v7 = objc_msgSend(v5, sel_objectForKey_, v6);

  if (!v7)
  {
    memset(v20, 0, sizeof(v20));
    outlined destroy of Any?((uint64_t)v20);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v20);
  v8 = objc_msgSend(v4, sel_standardUserDefaults);
  v9 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v10 = objc_msgSend(v8, sel_BOOLForKey_, v9);

  static EnableGraphReuseLogging.cachedValue = v10;
  if ((v10 & 1) != 0)
    goto LABEL_6;
}

void specialized static Log.graphReuse(_:)()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_QWORD *)&v12[0] = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000002352E87B0, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2349C4000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v11, -1, -1);
      MEMORY[0x23B7C9D54](v10, -1, -1);
    }

    return;
  }
  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  v4 = objc_msgSend(v0, sel_standardUserDefaults);
  v5 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cachedValue = v6;
  if ((v6 & 1) != 0)
    goto LABEL_6;
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_QWORD *)&v12[0] = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x80000002352E8760, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2349C4000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v11, -1, -1);
      MEMORY[0x23B7C9D54](v10, -1, -1);
    }

    return;
  }
  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  v4 = objc_msgSend(v0, sel_standardUserDefaults);
  v5 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cachedValue = v6;
  if ((v6 & 1) != 0)
    goto LABEL_6;
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_QWORD *)&v12[0] = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000002352E8710, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2349C4000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v11, -1, -1);
      MEMORY[0x23B7C9D54](v10, -1, -1);
    }

    return;
  }
  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  v4 = objc_msgSend(v0, sel_standardUserDefaults);
  v5 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cachedValue = v6;
  if ((v6 & 1) != 0)
    goto LABEL_6;
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _OWORD v16[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    *(_QWORD *)&v16[0] = 0;
    *((_QWORD *)&v16[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v7._countAndFlagsBits = 0x207475706E49;
    v7._object = (void *)0xE600000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0xD000000000000014;
    v9._object = (void *)0x80000002352E8690;
    String.append(_:)(v9);
    v10 = v16[0];
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.graphReuseLog);
    swift_bridgeObjectRetain();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_QWORD *)&v16[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, *((unint64_t *)&v10 + 1), (uint64_t *)v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2349C4000, v12, v13, "%s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v15, -1, -1);
      MEMORY[0x23B7C9D54](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  v4 = objc_msgSend(v0, sel_standardUserDefaults);
  v5 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cachedValue = v6;
  if ((v6 & 1) != 0)
    goto LABEL_6;
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_QWORD *)&v12[0] = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000002352E87D0, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2349C4000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v11, -1, -1);
      MEMORY[0x23B7C9D54](v10, -1, -1);
    }

    return;
  }
  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  v4 = objc_msgSend(v0, sel_standardUserDefaults);
  v5 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cachedValue = v6;
  if ((v6 & 1) != 0)
    goto LABEL_6;
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0)
      return;
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_QWORD *)&v12[0] = v11;
      *(_DWORD *)v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000002352E86B0, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2349C4000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v11, -1, -1);
      MEMORY[0x23B7C9D54](v10, -1, -1);
    }

    return;
  }
  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cachedValue = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  v4 = objc_msgSend(v0, sel_standardUserDefaults);
  v5 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E8660);
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cachedValue = v6;
  if ((v6 & 1) != 0)
    goto LABEL_6;
}

uint64_t partial apply for implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:)();
}

uint64_t type metadata accessor for IndirectAttributeMap()
{
  return objc_opt_self();
}

uint64_t method lookup function for IndirectAttributeMap()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IndirectAttributeMap.__allocating_init(subgraph:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static GraphReusable.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of GraphReusable.makeReusable(indirectMap:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of GraphReusable.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t partial apply for implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)();
}

uint64_t specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(uint64_t a1, char a2)
{
  ValueMetadata **v2;
  ValueMetadata **v3;
  ValueMetadata *v6;
  uint64_t Kind;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t result;
  unint64_t Description;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v3 = v2;
  v6 = *v2;
  Kind = v6[1].Kind;
  if (Kind)
  {
    v8 = 0;
    v9 = 32;
    while (v8 < (*v3)[1].Kind)
    {
      outlined init with copy of AnyTrackedValue((uint64_t)*v3 + v9, (uint64_t)&v16);
      v10 = v17;
      v11 = v18;
      __swift_project_boxed_opaque_existential_1(&v16, v17);
      v6 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v11[1])(v10, v11);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
      if (v6 == &type metadata for DynamicViewContentIDTraitKey)
        return result;
      ++v8;
      v9 += 40;
      if (Kind == v8)
      {
        v6 = *v3;
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
    v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[1].Kind + 1, 1, v6);
  v14 = v6[1].Kind;
  Description = (unint64_t)v6[1].Description;
  if (v14 >= Description >> 1)
    v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v14 + 1, 1, v6);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DynamicViewContentIDTraitKey>, (uint64_t)&type metadata for DynamicViewContentIDTraitKey, (uint64_t)&protocol witness table for DynamicViewContentIDTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
  v17 = v15;
  v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
  *(_QWORD *)&v16 = a1;
  BYTE8(v16) = a2 & 1;
  v6[1].Kind = v14 + 1;
  result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v6[2] + 40 * v14);
  *v3 = v6;
  return result;
}

{
  ValueMetadata **v2;
  ValueMetadata **v3;
  ValueMetadata *v6;
  uint64_t Kind;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t result;
  unint64_t Description;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v3 = v2;
  v6 = *v2;
  Kind = v6[1].Kind;
  if (Kind)
  {
    v8 = 0;
    v9 = 32;
    while (v8 < (*v3)[1].Kind)
    {
      outlined init with copy of AnyTrackedValue((uint64_t)*v3 + v9, (uint64_t)&v16);
      v10 = v17;
      v11 = v18;
      __swift_project_boxed_opaque_existential_1(&v16, v17);
      v6 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v11[1])(v10, v11);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
      if (v6 == &type metadata for DynamicViewContentOffsetTraitKey)
        return result;
      ++v8;
      v9 += 40;
      if (Kind == v8)
      {
        v6 = *v3;
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
    v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[1].Kind + 1, 1, v6);
  v14 = v6[1].Kind;
  Description = (unint64_t)v6[1].Description;
  if (v14 >= Description >> 1)
    v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v14 + 1, 1, v6);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DynamicViewContentOffsetTraitKey>, (uint64_t)&type metadata for DynamicViewContentOffsetTraitKey, (uint64_t)&protocol witness table for DynamicViewContentOffsetTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
  v17 = v15;
  v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
  *(_QWORD *)&v16 = a1;
  BYTE8(v16) = a2 & 1;
  v6[1].Kind = v14 + 1;
  result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v6[2] + 40 * v14);
  *v3 = v6;
  return result;
}

{
  _QWORD **v2;
  _QWORD **v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v3 = v2;
  v6 = *v2;
  v7 = v6[2];
  if (v7)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1778], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TagValueTraitKey);
    v9 = v8;
    v10 = 0;
    v11 = 4;
    while (v10 < (*v3)[2])
    {
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v3)[v11], (uint64_t)&v18);
      v12 = v19;
      v13 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, v19);
      v6 = (_QWORD *)((uint64_t (*)(uint64_t, _UNKNOWN **))v13[1])(v12, v13);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
      if (v6 == v9)
        return result;
      ++v10;
      v11 += 5;
      if (v7 == v10)
      {
        v6 = *v3;
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v16 = v6[2];
  v15 = v6[3];
  if (v16 >= v15 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v6);
  type metadata accessor for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>(0);
  v19 = v17;
  v20 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
  *(_QWORD *)&v18 = a1;
  BYTE8(v18) = a2 & 1;
  v6[2] = v16 + 1;
  result = outlined init with take of ScrollStateRequest(&v18, (uint64_t)&v6[5 * v16 + 4]);
  *v3 = v6;
  return result;
}

void ForEach<>.init(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v13[1] = a6;
  v13[2] = a7;
  v9 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12, v10);
  v13[3] = a2;
  ForEach.init(_:idGenerator:content:)();
}

uint64_t sub_235168998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

__n128 static ForEach<>._makeViewList(view:inputs:)@<Q0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_OWORD *__return_ptr, _DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t);
  void *v19;
  __int128 v20;
  __n128 result;
  char v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v32;
  _DWORD v34[8];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  v14 = *a2;
  v30 = *((_DWORD *)a2 + 2);
  v32 = a2[2];
  v29 = *((_DWORD *)a2 + 6);
  v28 = *((_DWORD *)a2 + 7);
  v27 = *((_DWORD *)a2 + 8);
  v26 = *((_DWORD *)a2 + 9);
  v16 = a2[5];
  v15 = a2[6];
  v25 = a2[7];
  v24 = *((_DWORD *)a2 + 16);
  v17 = a2[9];
  v23 = *((_BYTE *)a2 + 80);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v34[0] = v13;
  v35 = v14;
  LODWORD(v36) = v30;
  v37 = v32;
  v38 = __PAIR64__(v28, v29);
  v39 = __PAIR64__(v26, v27);
  v40 = v16;
  v41 = v15;
  v42 = v25;
  v43 = v24;
  v44 = v17;
  v45 = v23;
  v18 = *(void (**)(_OWORD *__return_ptr, _DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xD0);
  v19 = static CoreGlue.shared;
  v18(v46, v34, &v35, a3, a4, a5, a6, a7, a8);

  if (BYTE8(v47) == 0xFF)
  {
    outlined destroy of _ViewListOutputs?((uint64_t)v46);
    v35 = a3;
    v36 = a4;
    v37 = a5;
    v38 = a6;
    v39 = a7;
    v40 = a8;
    type metadata accessor for ForEachState();
  }
  v20 = v48;
  *(_OWORD *)(a9 + 32) = v47;
  *(_OWORD *)(a9 + 48) = v20;
  *(_BYTE *)(a9 + 64) = v49;
  result = (__n128)v46[1];
  *(_OWORD *)a9 = v46[0];
  *(__n128 *)(a9 + 16) = result;
  return result;
}

void ForEach<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[10];

  v19[0] = a2;
  v19[1] = a3;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  v19[2] = a4;
  v19[3] = a5;
  v19[4] = a6;
  v19[5] = a7;
  v19[6] = a8;
  v19[7] = a9;
  v19[9] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
}

uint64_t sub_235169450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t ForEach.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ForEach.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ForEach.data.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ForEach.content.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 60));
  swift_retain();
  return v2;
}

uint64_t ForEach.content.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 60));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*ForEach.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL ForEach.IDGenerator.isConstant.getter()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t ForEach.IDGenerator.makeID(data:index:offset:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v15 = a1;
  v16 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v15 - v10;
  if (*v4)
  {
    swift_retain();
    v12 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v8 + 16))(v11);
    v12(v17, 0);
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  else
  {
    result = v16;
    v17[0] = a2;
    v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    if (*(_QWORD *)(v14 + 64) == 8)
      return (*(uint64_t (**)(uint64_t, _QWORD *, double))(v14 + 16))(v16, v17, v9);
    else
      __break(1u);
  }
  return result;
}

uint64_t ForEach.idGenerator.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(a1 + 64));
  return swift_retain();
}

uint64_t ForEach.idGenerator.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(a2 + 64);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = v3;
  return result;
}

uint64_t (*ForEach.idGenerator.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ForEach.reuseID.getter()
{
  return swift_retain();
}

uint64_t ForEach.reuseID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 68);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*ForEach.reuseID.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ForEach.init(_:idGenerator:content:)()
{
  type metadata accessor for ForEach();
}

uint64_t sub_2351697A8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;

  *(_QWORD *)(v2 + a1[17]) = 0;
  v8 = *(_QWORD *)(v1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v2, v3, v1);
  *(_QWORD *)(v2 + a1[16]) = v6;
  v9 = (_QWORD *)(v2 + a1[15]);
  *v9 = v5;
  v9[1] = v4;
  v10 = one-time initialization token for v6;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v11)
      goto LABEL_7;
LABEL_9:
    v12 = 0;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v12 = AGMakeUniqueID();
LABEL_10:
  swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v1);
  *(_QWORD *)(v2 + a1[18]) = v12;
  return result;
}

void ForEach.init<A>(_:transform:)()
{
  type metadata accessor for ForEach();
}

void sub_235169938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v6 - 120) = v5;
  *(_QWORD *)(v6 - 112) = v1;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v3;
  *(_QWORD *)(v6 - 88) = v4;
  type metadata accessor for ForEach();
}

uint64_t sub_235169980(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)();
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t result;

  v8 = *(_QWORD *)(v6 - 184);
  *(_QWORD *)(v8 + a1[17]) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v8, v1, v5);
  *(_QWORD *)(v8 + a1[16]) = *(_QWORD *)(v1 + *(int *)(v2 + 64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v1, v2);
  v9 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v10 = (char *)swift_allocObject();
  v11 = *(_QWORD *)(v6 - 176);
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = v11;
  v12 = *(_QWORD *)(v6 - 144);
  *((_QWORD *)v10 + 4) = *(_QWORD *)(v6 - 168);
  *((_QWORD *)v10 + 5) = v12;
  v13 = *(_QWORD *)(v6 - 160);
  *((_QWORD *)v10 + 6) = *(_QWORD *)(v6 - 152);
  *((_QWORD *)v10 + 7) = v13;
  v14 = *(_QWORD *)(v6 - 128);
  *((_QWORD *)v10 + 8) = *(_QWORD *)(v6 - 136);
  *((_QWORD *)v10 + 9) = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v10[v9], v4, v2);
  v15 = (void (**)())(v8 + a1[15]);
  *v15 = partial apply for closure #1 in ForEach.init<A>(_:transform:);
  v15[1] = (void (*)())v10;
  v16 = *(_QWORD *)(v1 + *(int *)(v2 + 72));
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_retain();
  result = v17(v1, v2);
  *(_QWORD *)(v8 + a1[18]) = v16;
  return result;
}

void closure #1 in ForEach.init<A>(_:transform:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for ForEach();
}

uint64_t sub_235169B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t))(v2 + *(int *)(a1 + 60)))(v4);
  v3(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
}

void static ForEach<>._makeView(view:inputs:)(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void (*v18)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  _QWORD v51[3];

  v11 = *a1;
  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 6);
  v16 = *((_DWORD *)a2 + 7);
  v17 = *((_DWORD *)a2 + 8);
  v34 = *((_DWORD *)a2 + 9);
  v32 = a2[6];
  v33 = a2[5];
  v30 = *((_DWORD *)a2 + 15);
  v31 = *((_DWORD *)a2 + 14);
  v28 = *((_DWORD *)a2 + 17);
  v29 = *((_DWORD *)a2 + 16);
  v26 = *((_DWORD *)a2 + 19);
  v27 = *((_DWORD *)a2 + 18);
  v25 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v50 = v11;
  v36 = v12;
  LODWORD(v37) = v13;
  v38 = v14;
  v39 = __PAIR64__(v16, v15);
  v40 = __PAIR64__(v34, v17);
  v41 = v33;
  v42 = v32;
  v43 = v31;
  v44 = v30;
  v45 = v29;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v18 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xC8);
  v19 = static CoreGlue.shared;
  v18(v51, &v50, &v36, a3, a4, a5, a6, a7, a8);

  if (!v51[0])
  {
    v36 = a3;
    v37 = a4;
    v38 = a5;
    v39 = a6;
    v40 = a7;
    type metadata accessor for ForEach();
  }
  v20 = v51[1];
  *a9 = v51[0];
  a9[1] = v20;
}

void ForEachState.__allocating_init(inputs:)()
{
  swift_allocObject();
  ForEachState.init(inputs:)();
}

void protocol witness for static View._makeView(view:inputs:) in conformance <> ForEach<A, B, C>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  static ForEach<>._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a4 - 8), a5);
}

double protocol witness for static View._makeViewList(view:inputs:) in conformance <> ForEach<A, B, C>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  *(_QWORD *)&result = static ForEach<>._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a4 - 8), a5).n128_u64[0];
  return result;
}

uint64_t static ForEachEvictionInput.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return static ForEachEvictionInput.defaultValue;
}

uint64_t one-time initialization function for evictByDefault()
{
  unsigned int v0;
  uint64_t result;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v0;
  static ForEachEvictionInput.evictByDefault = result;
  return result;
}

uint64_t static ForEachEvictionInput.evictByDefault.getter()
{
  if (one-time initialization token for evictByDefault != -1)
    swift_once();
  return static ForEachEvictionInput.evictByDefault;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance ForEachEvictionInput@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static ForEachEvictionInput.defaultValue;
  *a1 = static ForEachEvictionInput.defaultValue;
  return result;
}

void type metadata accessor for ForEachState()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t key path getter for Identifiable.id : <A, B, C>A.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

void ForEach<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a5;
  v10[3] = a6;
  v10[4] = a3;
  v10[5] = a4;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
  ForEach.init(_:idGenerator:content:)();
}

__n128 sub_23516A128()
{
  uint64_t v0;
  __n128 result;
  __int128 v2;
  __n128 v3;
  __int128 v4;
  uint64_t v5;

  result = v3;
  *(_OWORD *)v0 = v2;
  *(__n128 *)(v0 + 16) = v3;
  *(_OWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 48) = v5;
  return result;
}

void ForEachState.init(inputs:)()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 116) = 1;
  *(_DWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 124) = 1;
  type metadata accessor for ForEach();
}

void sub_23516A1FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v2, 1, 1, a1);
  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 176)) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184)) = 2;
  type metadata accessor for ForEachState.Item();
}

void sub_23516A27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + v1) = Dictionary.init()();
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  *(_QWORD *)(v0 + v2) = Dictionary.init()();
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208)) = 0;
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216)) = -1;
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224)) = 0;
  *(_DWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 232)) = 0;
  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 240)) = 0;
  *(_DWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 248)) = 0;
  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 256)) = 0;
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  *(_QWORD *)(v0 + v3) = Set.init()();
  type metadata accessor for ForEachState.IDTypeMatchingStrategy();
}

id sub_23516A340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)(v0 + v1) = Dictionary.init()();
  *(_QWORD *)(v0 + 16) = v2;
  *(_DWORD *)(v0 + 24) = v7;
  *(_QWORD *)(v0 + 32) = v6;
  *(_QWORD *)(v0 + 40) = v3;
  *(_QWORD *)(v0 + 48) = v4;
  *(_OWORD *)(v0 + 56) = v12;
  *(_QWORD *)(v0 + 72) = v11;
  *(_DWORD *)(v0 + 80) = v10;
  *(_QWORD *)(v0 + 88) = v9;
  *(_BYTE *)(v0 + 96) = v8;
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_QWORD *)(v0 + 104) = result;
    return (id)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ForEachState.invalidateViewCounts()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t result;

  v1 = v0;
  v2 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v4 + 16));
  }
  else
  {
    *v2 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  result = swift_endAccess();
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184)) = 2;
  return result;
}

void ForEachState.update(view:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[15];
  uint64_t AssociatedTypeWitness;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v18 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14[7] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v16 = (char *)v14 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v17 = (char *)v14 - v8;
  v9 = *(_QWORD *)(v2 + 104);
  v10 = *(_QWORD *)(v2 + 80);
  v14[13] = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v11);
  v14[14] = (char *)v14 - v12;
  v13 = *(_QWORD *)(v2 + 96);
  v21 = v10;
  v22 = v3;
  v23 = v13;
  v24 = v9;
  v19 = *(_OWORD *)(v2 + 112);
  v25 = v19;
  type metadata accessor for ForEachState.Item();
}

uint64_t ForEachState.eraseItem(_:)(_DWORD *a1)
{
  uint64_t result;
  int v3;

  AGSubgraphApply();
  AGSubgraphRemoveChild();
  *((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 + 240)) = 1;
  *((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 + 232)) = 0;
  result = swift_beginAccess();
  v3 = a1[6] - 1;
  a1[6] = v3;
  if (!v3)
  {
    ForEachState.Item.invalidate()(result);
    result = AGSubgraphIsValid();
    if ((_DWORD)result)
    {
      MEMORY[0x24BDAC7A8](result);
      AGSubgraphApply();
      return AGSubgraphInvalidate();
    }
  }
  return result;
}

void ForEachState.item(at:offset:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[14];
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v57 = a2;
  v58 = a1;
  v65 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)*v2;
  v35 = type metadata accessor for ObservationTracking._AccessList();
  v42 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)v34 - v6;
  v59 = v3[12];
  v37 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)v34 - v10;
  type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v34[11] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v34[12] = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v41 = (char *)v34 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v34[13] = (char *)v34 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v44 = (char *)v34 - v18;
  v19 = v3[13];
  v20 = v3[10];
  v40 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v47 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v22);
  v34[6] = (char *)v34 - v23;
  v24 = v3[11];
  v25 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v25 - 8);
  v51 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v49 = (char *)v34 - v26;
  v48 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v53 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v34[10] = (char *)v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v43 = (char *)v34 - v31;
  MEMORY[0x24BDAC7A8](v32);
  *((_BYTE *)v2 + v3[32]) = 1;
  swift_beginAccess();
  v52 = v3;
  v33 = v3[14];
  v55 = v24;
  v56 = v20;
  v60 = v20;
  v61 = v24;
  v62 = v59;
  v63 = v19;
  v54 = v33;
  v64 = v33;
  type metadata accessor for ForEach();
}

void sub_23516BFC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48);
  if (v10(v5, 1, a1) == 1)
  {
    __break(1u);
  }
  else
  {
    v1[9] = v7;
    v1[40] = v6;
    v1[28] = a1;
    v1[29] = v2;
    v1[42] = v3;
    v1[56] = *(_QWORD *)(v5 + *(int *)(a1 + 64));
    v1[22] = v10;
    if (v10(v5, 1, a1) != 1)
    {
      v11 = v1[38];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[30] + 16))(v4, v5, v11);
      swift_retain();
      v1[8] = v5;
      v13 = v1[36];
      v12 = v1[37];
      *(_QWORD *)(v8 - 208) = v11;
      *(_QWORD *)(v8 - 200) = v12;
      v14 = v1[40];
      *(_QWORD *)(v8 - 192) = v1[43];
      *(_QWORD *)(v8 - 184) = v14;
      *(_QWORD *)(v8 - 176) = v13;
      type metadata accessor for ForEach.IDGenerator();
    }
  }
  __break(1u);
  JUMPOUT(0x23516CD9CLL);
}

uint64_t ForEachState.uneraseItem(_:)(_DWORD *a1)
{
  swift_beginAccess();
  ++a1[6];
  *((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 + 240)) = 0;
  *((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 + 232)) = 8;
  AGSubgraphAddChild();
  return AGSubgraphApply();
}

void closure #1 in ForEachState.item(at:offset:)()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v0);
  swift_beginAccess();
  type metadata accessor for ForEach();
}

uint64_t sub_23516CF38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v10)(uint64_t);
  void (*v11)(uint64_t, _QWORD);
  uint64_t v12;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v6, 1, a1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = *(void (**)(uint64_t))(v6 + *(int *)(a1 + 60));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v6, v2);
    swift_retain();
    v11 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
    v12 = *(_QWORD *)(v7 - 160);
    (*(void (**)(uint64_t))(v1 + 16))(v3);
    v11(v7 - 144, 0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v2);
    v10(v3);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v12);
  }
  return result;
}

void closure #2 in ForEachState.item(at:offset:)(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[14];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v20[3] = a5;
  v20[12] = a4;
  v20[10] = a3;
  v24 = a1;
  v25 = a2;
  v20[13] = a6;
  v32 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*a2;
  v7 = type metadata accessor for ObservationTracking._AccessList();
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  v20[2] = (char *)v20 - v9;
  type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v20[11] = (char *)v20 - v11;
  v12 = v6[12];
  v20[9] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v20[8] = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v6[11];
  v20[4] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v17 = v6[13];
  v18 = v6[14];
  v19 = v6[15];
  v21 = v6[10];
  v26 = v21;
  v27 = v15;
  v28 = v12;
  v29 = v17;
  v22 = v17;
  v30 = v18;
  v31 = v19;
  v23 = v19;
  type metadata accessor for ForEachChild();
}

void closure #3 in ForEachState.item(at:offset:)()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v0);
  swift_beginAccess();
  type metadata accessor for ForEach();
}

uint64_t sub_23516D900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, _QWORD);
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v1, 1, a1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v1, v3);
    v9 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
    v10 = *(_QWORD *)(v7 - 160);
    (*(void (**)(uint64_t))(v2 + 16))(v4);
    v9(v7 - 144, 0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v3);
    swift_getAtKeyPath();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v4, v10);
  }
  return result;
}

void ForEachState.evictItems(seed:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  v6 = *(_QWORD *)(v5 + 248);
  if (*(_DWORD *)(v1 + v6) != v4 && *(_BYTE *)(v1 + *(_QWORD *)(v5 + 256)) == 1)
  {
    *(_DWORD *)(v1 + v6) = v4;
    type metadata accessor for ForEachState.Item();
  }
}

uint64_t ForEachState.fetchViewsPerElement()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD v10[5];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 104);
  v3 = *(_QWORD *)(*v0 + 80);
  v10[3] = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10[1] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10[2] = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10[0] = (char *)v10 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v7 = (char *)v0 + *(_QWORD *)(v1 + 168);
  if (v7[9] == 1)
  {
    swift_beginAccess();
    v8 = *(_QWORD *)(v1 + 112);
    v10[4] = v3;
    v11 = *(_OWORD *)(v1 + 88);
    v12 = v2;
    v13 = v8;
    type metadata accessor for ForEach();
  }
  if (v7[9])
    return 0;
  else
    return *(_QWORD *)v7;
}

uint64_t ForEachState.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 0;
  v4[2] = &v7;
  v5 = 2;
  v6 = 0;
  ForEachState.forEachItem(from:style:do:)((uint64_t)&v6, &v5, (uint64_t)partial apply for closure #1 in ForEachState.traitKeys.getter, (uint64_t)v4);
  result = v7;
  v3 = v8;
  if (v7 && (v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = 0;
    v3 = 0;
  }
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

uint64_t closure #1 in ForEachState.traitKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t InputValue;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;

  outlined init with copy of _ViewListOutputs.Views(a3 + *(_QWORD *)(*(_QWORD *)a3 + 176), (uint64_t)&v17);
  if ((v18 & 1) == 0)
  {
    *(_QWORD *)a4 = MEMORY[0x24BEE4B08];
    *(_BYTE *)(a4 + 8) = 0;
    swift_bridgeObjectRelease();
    outlined destroy of _ViewListOutputs.Views((uint64_t)&v17);
    return 0;
  }
  result = swift_release();
  if (*(_BYTE *)(a5 + 124) != 1)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    InputValue = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v14);
    v9 = v15;
    v10 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v12, v9, v10);
    v11 = v13;
    *(_QWORD *)a4 = v12;
    *(_BYTE *)(a4 + 8) = v11;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t ForEachState.forEachItem(from:style:do:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[18];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v17[9] = a3;
  v17[10] = a4;
  v17[14] = a1;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  MEMORY[0x24BDAC7A8](a1);
  v17[5] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v6 + 104);
  v17[13] = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v13);
  v17[15] = (char *)v17 - v14;
  v17[12] = *a2;
  if (AGSubgraphIsValid())
  {
    v17[4] = AssociatedTypeWitness;
    v17[3] = v12;
    v17[11] = v4;
    swift_beginAccess();
    v15 = *(_QWORD *)(v6 + 112);
    v17[17] = v7;
    v18 = *(_OWORD *)(v6 + 88);
    v19 = v10;
    v20 = v15;
    type metadata accessor for ForEach();
  }
  return 1;
}

uint64_t ForEachState.count(style:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  if (AGSubgraphIsValid())
  {
    swift_beginAccess();
    type metadata accessor for ForEach();
  }
  return 0;
}

uint64_t closure #1 in ForEachState.count(style:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _BYTE *a6, uint64_t *a7)
{
  uint64_t result;
  uint64_t InputValue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  __int128 v32[2];
  char v33;

  outlined init with copy of _ViewListOutputs.Views(a3 + *(_QWORD *)(*(_QWORD *)a3 + 176), (uint64_t)v32);
  if ((v33 & 1) == 0)
    goto LABEL_6;
  result = swift_release();
  if (a6[124] == 1)
    goto LABEL_20;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  InputValue = AGGraphGetInputValue();
  outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v29);
  v13 = v30;
  v14 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  v28 = a5;
  v15 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v14 + 8))(&v28, v13, v14);
  v16 = *a4 + v15;
  if (__OFADD__(*a4, v15))
  {
    __break(1u);
LABEL_6:
    outlined init with take of ScrollStateRequest(v32, (uint64_t)v29);
    v17 = v30;
    v18 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
    if ((a5 & 1) == 0
      || (v19 = (unsigned __int128)(result * (__int128)(a5 >> 1)) >> 64, result *= a5 >> 1, v19 == result >> 63))
    {
      v16 = *a4 + result;
      if (!__OFADD__(*a4, result))
        goto LABEL_9;
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
LABEL_9:
  *a4 = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v20 = &a6[*(_QWORD *)(*(_QWORD *)a6 + 176)];
  swift_beginAccess();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21
    || (v22 = *a7, v21 == *a7)
    && (v22 = *(_QWORD *)(*(_QWORD *)v20 + 16), *(_QWORD *)&a6[*(_QWORD *)(*(_QWORD *)a6 + 184)] == a5))
  {
    v23 = *a4;
    swift_beginAccess();
    v24 = *(_QWORD **)v20;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      *(_QWORD *)v20 = v24;
    }
    v27 = v24[2];
    v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
      *(_QWORD *)v20 = v24;
    }
    v24[2] = v27 + 1;
    v24[v27 + 4] = v23;
    swift_endAccess();
    *(_QWORD *)&a6[*(_QWORD *)(*(_QWORD *)a6 + 184)] = a5;
    v22 = *a7;
  }
  *a7 = v22 + 1;
  return 1;
}

void ForEachState.estimatedCount(style:)()
{
  type metadata accessor for ForEachState.Item();
}

void ForEachState.viewIDs.getter(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for ForEachState.ForEachViewIDCollection();
}

uint64_t sub_23516F77C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[96];

  *(_QWORD *)(v7 - 192) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 184) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v7 - 200) = &v14[-v8];
  if (AGSubgraphIsValid())
  {
    v9 = ForEachState.fetchViewsPerElement()();
    if ((v10 & 1) == 0)
    {
      *(_QWORD *)(v7 - 152) = 0;
      *(_QWORD *)(v7 - 144) = 0;
      MEMORY[0x24BDAC7A8](v9);
      *(_QWORD *)&v14[-32] = v7 - 144;
      *(_QWORD *)&v14[-24] = v11;
      *(_QWORD *)(v7 - 208) = v11;
      *(_QWORD *)&v14[-16] = v1;
      *(_QWORD *)(v7 - 136) = 2;
      ForEachState.forEachItem(from:style:do:)(v7 - 152, (_QWORD *)(v7 - 136), (uint64_t)partial apply for closure #1 in ForEachState.viewIDs.getter, (uint64_t)&v14[-48]);
      v12 = *(_QWORD *)(v7 - 144);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 16) & 1) == 0)
        {
          *(_QWORD *)(v7 - 232) = v12;
          *(_QWORD *)(v7 - 216) = v1 + *(_QWORD *)(*(_QWORD *)v1 + 160);
          swift_beginAccess();
          *(_QWORD *)(v7 - 136) = v2;
          *(_QWORD *)(v7 - 128) = v3;
          *(_QWORD *)(v7 - 120) = v5;
          *(_QWORD *)(v7 - 112) = v6;
          *(_QWORD *)(v7 - 104) = v4;
          type metadata accessor for ForEach();
        }
        swift_release();
      }
    }
  }
  return 0;
}

uint64_t sub_23516F890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48);
  v8 = *(_QWORD *)(v5 - 216);
  *(_QWORD *)(v5 - 224) = v7;
  result = v7(v8, 1, a1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v11 = *(_QWORD *)(v5 - 216);
  v10(v4, v11, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 - 224))(v11, 1, a1);
  if ((_DWORD)result == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v11 + *(int *)(a1 + 64));
  *(_QWORD *)(v5 - 240) = v12;
  *(_QWORD *)(v5 - 136) = v12;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 - 224))(v11, 1, a1);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(v5 - 208);
  if ((*(_BYTE *)(v1 + 124) & 1) == 0)
  {
    *(_DWORD *)(v5 - 224) = *(_DWORD *)(v1 + 120);
    *(_DWORD *)(v5 - 208) = v13 == 1;
    swift_retain();
    swift_retain_n();
    swift_retain();
    ForEachState.ForEachViewIDCollection.init(base:data:idGenerator:reuseID:isUnary:owner:)();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t closure #1 in ForEachState.viewIDs.getter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v8;
  uint64_t result;
  uint64_t InputValue;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  char v18;

  v8 = *(_OWORD **)a3;
  outlined init with copy of _ViewListOutputs.Views(a3 + *(_QWORD *)(*(_QWORD *)a3 + 176), (uint64_t)&v17);
  if ((v18 & 1) == 0)
  {
    v13 = v8[8];
    v14 = v8[7];
    v15 = v13;
    v16 = v8[9];
    type metadata accessor for ForEachState.StaticViewIDCollection();
  }
  result = swift_release();
  if (*(_BYTE *)(a6 + 124) == 1)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    InputValue = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)&v14);
    v11 = *((_QWORD *)&v15 + 1);
    v12 = v16;
    __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v15 + 1));
    *a4 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    return 0;
  }
  return result;
}

void ForEachState.ForEachViewIDCollection.init(base:data:idGenerator:reuseID:isUnary:owner:)()
{
  type metadata accessor for ForEachState.ForEachViewIDCollection();
}

uint64_t sub_23516FBF8(int *a1)
{
  char *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  *(_QWORD *)&v1[a1[19]] = 0;
  *(_QWORD *)v1 = v6;
  v9 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(&v1[a1[17]], v4, v3);
  *(_QWORD *)&v1[a1[18]] = v5;
  v1[a1[20]] = v7;
  *(_DWORD *)&v1[a1[21]] = v2;
  v10 = *(uint64_t (**)(void))(*(_QWORD *)v6 + 88);
  v11 = swift_retain();
  v12 = ((uint64_t (*)(uint64_t))v10)(v11);
  result = v10();
  if (result < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  result = v10();
  if (v12 < 0 || result < v12)
    goto LABEL_7;
  *(_QWORD *)&v1[a1[22]] = v12;
  v14 = dispatch thunk of Collection.count.getter();
  swift_release();
  swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v4, v3);
  if ((unsigned __int128)(v12 * (__int128)v14) >> 64 == (v12 * v14) >> 63)
  {
    *(_QWORD *)&v1[a1[23]] = v12 * v14;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

void closure #1 in ForEachState.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[52];

  v15[10] = a6;
  v15[11] = a7;
  v15[12] = a5;
  v15[14] = a1;
  v7 = *(_QWORD **)a3;
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 120);
  v15[1] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15[2] = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[13] = *v10;
  swift_beginAccess();
  v11 = v7[14];
  v12 = v7[16];
  v13 = v7[17];
  v15[9] = v7;
  v14 = v7[18];
  v15[15] = v11;
  v15[16] = v8;
  v15[17] = v12;
  v15[18] = v13;
  v15[19] = v14;
  type metadata accessor for ForEach();
}

void sub_23516FDBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1) != 1)
  {
    v9 = *(_QWORD *)(v2 + *(int *)(a1 + 64));
    v1[7] = v4;
    v1[8] = v9;
    v1[15] = v5;
    v1[16] = v4;
    v1[17] = v6;
    v1[18] = v7;
    v1[19] = v3;
    type metadata accessor for ForEach.IDGenerator();
  }
  __break(1u);
  JUMPOUT(0x235170374);
}

void ForEachState.edit(forID:since:)(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v23 = a3;
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v16 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v18 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v20 = a1[1];
  v21 = v11;
  v19 = *((_QWORD *)a1 + 1);
  v17 = *a2;
  swift_beginAccess();
  v12 = v7[12];
  v13 = v7[13];
  v14 = v7[14];
  v24 = v7[10];
  v25 = v8;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  type metadata accessor for ForEach();
}

void sub_235170494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v1, 1, a1) != 1)
  {
    *(_QWORD *)(v7 - 160) = v5;
    *(_QWORD *)(v7 - 152) = v2;
    *(_QWORD *)(v7 - 144) = v3;
    *(_QWORD *)(v7 - 136) = v6;
    *(_QWORD *)(v7 - 128) = v4;
    type metadata accessor for ForEach.IDGenerator();
  }
  __break(1u);
  JUMPOUT(0x2351707FCLL);
}

void ForEachState.matchingStrategy<A>(for:)()
{
  swift_beginAccess();
  type metadata accessor for ForEachState.IDTypeMatchingStrategy();
}

uint64_t sub_235170878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[23];

  MEMORY[0x23B7C5A4C](v10, &v9, v2, MEMORY[0x24BEE0940], a1, MEMORY[0x24BEE0948]);
  v6 = LOBYTE(v10[0]);
  if (LOBYTE(v10[0]) == 4)
  {
    swift_endAccess();
    swift_beginAccess();
    v10[2] = v3;
    v10[3] = v1;
    v10[4] = v4;
    v10[5] = v5;
    v10[6] = v8;
    type metadata accessor for ForEach();
  }
  swift_endAccess();
  return v6;
}

uint64_t ForEachState.firstOffset<A>(forID:style:)()
{
  if (AGSubgraphIsValid())
    ForEachState.matchingStrategy<A>(for:)();
  return 0;
}

uint64_t closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  double v43;
  char *v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, double);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  unsigned int (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, _QWORD, uint64_t, uint64_t);
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(void);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  void (*v87)(uint64_t, uint64_t);
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char v93;
  void (*v94)(char *, uint64_t);
  void (*v95)(char *, uint64_t);
  char *v96;
  void (*v97)(char *, uint64_t);
  void (*v98)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t InputValue;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;

  v127 = a8;
  v135 = a5;
  LODWORD(v134) = a4;
  v129 = a6;
  v130 = a10;
  v12 = *a3;
  v13 = *(_QWORD *)(a9 - 8);
  v132 = a7;
  v133 = v13;
  MEMORY[0x24BDAC7A8](a1);
  v125 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v119 - v18;
  v20 = *(_QWORD *)(*(_QWORD *)(v12 + 120) - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v119 - v25;
  MEMORY[0x24BDAC7A8](v27);
  MEMORY[0x24BDAC7A8](v28);
  MEMORY[0x24BDAC7A8](v29);
  MEMORY[0x24BDAC7A8](v30);
  MEMORY[0x24BDAC7A8](v31);
  v43 = MEMORY[0x24BDAC7A8](v32);
  v44 = (char *)&v119 - v39;
  v128 = *a2;
  v143 = 0;
  v45 = v134;
  v46 = v134 == 2;
  v134 = a9;
  v131 = v47;
  if (v45 >= 2)
  {
    v65 = v133;
    v123 = v15;
    v66 = a3;
    if (!v46)
      goto LABEL_20;
    v67 = v36;
    v121 = v33;
    v124 = v40;
    v68 = *(_QWORD *)(v12 + 160);
    v126 = a3;
    v69 = v41;
    v70 = (char *)v42;
    v71 = v34;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, (uint64_t)a3 + v68, v38, v43);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for HasCustomIDRepresentation);
    swift_dynamicCast();
    v72 = v139;
    v73 = v140;
    __swift_project_boxed_opaque_existential_1(v138, v139);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v73 + 8))(&v141, v72, v73);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
    v74 = v134;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v71, v135, v134);
    v75 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56);
    v75(v71, 0, 1, v74);
    outlined init with copy of AnyHashable((uint64_t)&v141, (uint64_t)v138);
    v76 = swift_dynamicCast();
    v75((uint64_t)v70, v76 ^ 1u, 1, v74);
    v77 = v67;
    v78 = v69;
    v79 = v69 + *(int *)(v67 + 48);
    v80 = v131;
    v81 = *(void (**)(void))(v131 + 16);
    v82 = v78;
    v83 = v123;
    v81();
    v122 = v70;
    v84 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v70;
    v85 = v82;
    ((void (*)(uint64_t, char *, uint64_t))v81)(v79, (char *)v84, v83);
    v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
    if (v86(v85, 1, v74) == 1)
    {
      v87 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
      v87(v71, v83);
      outlined destroy of AnyHashable((uint64_t)&v141);
      if (v86(v79, 1, v74) == 1)
      {
        v87(v85, v83);
        v87((uint64_t)v122, v83);
        goto LABEL_24;
      }
    }
    else
    {
      v91 = v121;
      ((void (*)(char *, uint64_t, uint64_t))v81)(v121, v85, v83);
      if (v86(v79, 1, v74) != 1)
      {
        v96 = v125;
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v125, v79, v74);
        v93 = dispatch thunk of static Equatable.== infix(_:_:)();
        v97 = *(void (**)(char *, uint64_t))(v65 + 8);
        v97(v96, v74);
        v98 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
        v98(v71, v83);
        outlined destroy of AnyHashable((uint64_t)&v141);
        v97(v91, v74);
        v98(v85, v83);
        v98((uint64_t)v122, v83);
LABEL_19:
        v66 = v126;
        if ((v93 & 1) != 0)
          goto LABEL_24;
        goto LABEL_20;
      }
      v87 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
      v87(v71, v83);
      outlined destroy of AnyHashable((uint64_t)&v141);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v91, v74);
    }
    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v85, v77);
    v87((uint64_t)v122, v83);
    v66 = v126;
    goto LABEL_20;
  }
  v120 = v37;
  v124 = v40;
  v48 = v133;
  v49 = *(void (**)(char *, uint64_t, uint64_t, double))(v133 + 16);
  v50 = v35;
  v123 = v36;
  v51 = v38;
  v49((char *)&v119 - v39, v135, a9, v43);
  v122 = *(char **)(v48 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v122)(v44, 0, 1, a9);
  v52 = *(_QWORD *)(*a3 + 160);
  v126 = a3;
  v53 = (uint64_t)a3 + v52;
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v55 = v44;
  v54(v26, v53, v51);
  v56 = swift_dynamicCast();
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v122)(v50, v56 ^ 1u, 1, a9);
  v57 = v123;
  v58 = &v19[*(int *)(v123 + 48)];
  v59 = v131;
  v60 = *(void (**)(char *, char *, uint64_t))(v131 + 16);
  v121 = v55;
  v60(v19, v55, v15);
  v61 = v58;
  v122 = v50;
  v60(v58, v50, v15);
  v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v63 = v19;
  if (v62(v19, 1, a9) == 1)
  {
    v64 = *(void (**)(char *, uint64_t))(v59 + 8);
    v64(v121, v15);
    if (v62(v61, 1, a9) == 1)
    {
      v64(v19, v15);
      v64(v122, v15);
      goto LABEL_24;
    }
    v66 = v126;
    v90 = v63;
    goto LABEL_13;
  }
  v88 = v121;
  v89 = v120;
  v60(v120, v63, v15);
  if (v62(v61, 1, a9) != 1)
  {
    v92 = v125;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v125, v61, a9);
    v93 = dispatch thunk of static Equatable.== infix(_:_:)();
    v94 = *(void (**)(char *, uint64_t))(v48 + 8);
    v94(v92, a9);
    v95 = *(void (**)(char *, uint64_t))(v59 + 8);
    v95(v88, v15);
    v94(v89, a9);
    v95(v63, v15);
    v95(v122, v15);
    goto LABEL_19;
  }
  v64 = *(void (**)(char *, uint64_t))(v59 + 8);
  v64(v88, v15);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v89, a9);
  v66 = v126;
  v90 = v63;
  v57 = v123;
LABEL_13:
  (*(void (**)(char *, uint64_t))(v124 + 8))(v90, v57);
  v64(v122, v15);
LABEL_20:
  outlined init with copy of _ViewListOutputs.Views((uint64_t)v66 + *(_QWORD *)(*v66 + 176), (uint64_t)&v141);
  if ((v142 & 1) == 0)
  {
LABEL_32:
    outlined destroy of _ViewListOutputs.Views((uint64_t)&v141);
LABEL_34:
    ++*v132;
    return 1;
  }
  result = swift_release();
  if (*(_BYTE *)(v129 + 124) == 1)
  {
LABEL_47:
    __break(1u);
    return result;
  }
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  InputValue = AGGraphGetInputValue();
  outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v138);
  v101 = v139;
  v102 = v140;
  __swift_project_boxed_opaque_existential_1(v138, v139);
  v137 = v128;
  v103 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 64))(v135, &v137, v134, v130, v101, v102);
  if ((v104 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
    goto LABEL_34;
  }
  v105 = v103;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
  v143 = v105;
LABEL_24:
  v106 = v132;
  if (*v132)
  {
    v107 = v129;
    result = ForEachState.fetchViewsPerElement()();
    if ((v108 & 1) != 0)
    {
      v113 = v107 + *(_QWORD *)(*(_QWORD *)v107 + 176);
      result = swift_beginAccess();
      v114 = *(_QWORD *)(*(_QWORD *)v113 + 16);
      if ((uint64_t)v114 < *v106 || *(_QWORD *)(v107 + *(_QWORD *)(*(_QWORD *)v107 + 184)) != v128)
      {
        v137 = 0;
        v138[0] = 0;
        v136 = v128;
        MEMORY[0x24BDAC7A8](result);
        v117 = v130;
        *(&v119 - 6) = v134;
        *(&v119 - 5) = v117;
        *(&v119 - 4) = (uint64_t)&v137;
        *(&v119 - 3) = (uint64_t)v106;
        *(&v119 - 2) = (uint64_t)&v143;
        *(&v119 - 1) = v107;
        ForEachState.forEachItem(from:style:do:)((uint64_t)v138, &v136, (uint64_t)partial apply for closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:), (uint64_t)(&v119 - 8));
        goto LABEL_41;
      }
      v115 = *v106 - 1;
      if (v115 < v114)
      {
        v116 = *(_QWORD *)(*(_QWORD *)v113 + 8 * v115 + 32);
        v111 = __OFADD__(v143, v116);
        v112 = v143 + v116;
        if (!v111)
        {
LABEL_39:
          v143 = v112;
          goto LABEL_41;
        }
        goto LABEL_46;
      }
    }
    else
    {
      if ((v128 & 1) == 0
        || (v109 = (unsigned __int128)(result * (__int128)(v128 >> 1)) >> 64, result *= v128 >> 1, v109 == result >> 63))
      {
        v110 = *v106 * result;
        if ((unsigned __int128)(*v106 * (__int128)result) >> 64 == v110 >> 63)
        {
          v111 = __OFADD__(v143, v110);
          v112 = v143 + v110;
          if (!v111)
            goto LABEL_39;
          __break(1u);
          goto LABEL_32;
        }
        __break(1u);
      }
      __break(1u);
    }
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_41:
  result = 0;
  v118 = v127;
  *v127 = v143;
  *((_BYTE *)v118 + 8) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v11;
  uint64_t result;
  uint64_t InputValue;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  char v26;

  v7 = *a4;
  v8 = *a5;
  if (*a4 == *a5)
    return v7 != v8;
  v11 = *a2;
  *a4 = v7 + 1;
  outlined init with copy of _ViewListOutputs.Views(a3 + *(_QWORD *)(*(_QWORD *)a3 + 176), (uint64_t)v25);
  if ((v26 & 1) != 0)
  {
    result = swift_release();
    if (*(_BYTE *)(a7 + 124) == 1)
      goto LABEL_14;
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    InputValue = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v22);
    v14 = v23;
    v15 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v21 = v11;
    v16 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v15 + 8))(&v21, v14, v15);
    v17 = *a6 + v16;
    if (!__OFADD__(*a6, v16))
      goto LABEL_10;
    __break(1u);
  }
  outlined init with take of ScrollStateRequest(v25, (uint64_t)v22);
  v18 = v23;
  v19 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  if ((v11 & 1) == 0
    || (v20 = (unsigned __int128)(result * (__int128)(v11 >> 1)) >> 64, result *= v11 >> 1, v20 == result >> 63))
  {
    v17 = *a6 + result;
    if (!__OFADD__(*a6, result))
    {
LABEL_10:
      *a6 = v17;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      return v7 != v8;
    }
    __break(1u);
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t ForEachState.Transform.apply(sublist:)(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  ValueMetadata *v12;
  _UNKNOWN **v13;

  ForEachState.Transform.bindID(_:)(a1 + 16, a2, a3 & 0x10101, a4, a5, a6, a7, a8);
  v12 = &type metadata for SubgraphElements;
  v13 = &protocol witness table for SubgraphElements;
  *(_QWORD *)&v11 = swift_allocObject();
  outlined init with copy of AnyTrackedValue(a1 + 32, v11 + 16);
  *(_QWORD *)(v11 + 56) = a2;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  outlined init with take of ScrollStateRequest(&v11, a1 + 32);
  return ForEachState.Item.applyTraits(to:)();
}

uint64_t ForEachState.Transform.bindID(_:)(uint64_t result, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;

  if ((a3 & 1) != 0)
  {
    v12 = result;
    result = swift_weakLoadStrong();
    if (result)
    {
      v13 = *(_DWORD *)(result + 120);
      v14 = *(_BYTE *)(result + 124);
      result = swift_release();
      if ((v14 & 1) == 0)
      {
        v15 = a3 & 0x100;
        v16 = (_QWORD *)*a2;
        if ((a3 & 0x10000) != 0)
        {
          v17 = *(_QWORD *)((char *)a2 + v16[25]);
          v18 = *(_QWORD *)((char *)a2 + v16[21]);
          type metadata accessor for _AnyHashableBox<Pair<Int, AGAttribute>>(0);
          v19 = swift_allocObject();
          *(_QWORD *)(v19 + 16) = v17;
          *(_DWORD *)(v19 + 24) = v13;
          v20 = *(_QWORD **)(v12 + 8);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          v21 = v20[2];
          v22 = v20[3];
          v23 = v21 + 1;
          if (v21 >= v22 >> 1)
          {
            v25 = v20;
            v26 = v20[2];
            v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v21 + 1, 1, v25);
            v21 = v26;
            v20 = v27;
          }
          v20[2] = v23;
          v24 = &v20[3 * v21];
          v24[4] = v19;
          v24[5] = v18;
          *((_DWORD *)v24 + 12) = v13;
          *((_BYTE *)v24 + 52) = BYTE1(v15);
          result = swift_release();
          *(_QWORD *)(v12 + 8) = v20;
        }
        else
        {
          return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)((uint64_t)a2 + v16[20], v13, v15 != 0, *(_QWORD *)((char *)a2 + v16[21]), a5, a8);
        }
      }
    }
  }
  return result;
}

uint64_t ForEachState.Item.applyTraits(to:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *v0;
  specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(*(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 208)), 0);
  v3 = *(_QWORD *)(*v0 + 200);
  specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(*(uint64_t *)((char *)v0 + v3), 0);
  if (*((_BYTE *)v1 + *(_QWORD *)(*v1 + 224)) == 1)
    return specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(*(uint64_t *)((char *)v0 + v3), 0);
  else
    return ViewTraitCollection.setTagIfUnset<A>(for:value:)(*(_QWORD *)(v2 + 120), (uint64_t)v0 + *(_QWORD *)(*v0 + 160), *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 144));
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.apply(sublist:) in conformance ForEachState<A, B, C>.Transform(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  v4 = v3 | *(unsigned __int8 *)(v2 + 8);
  if (*(_BYTE *)(v2 + 10))
    v5 = 0x10000;
  else
    v5 = 0;
  return ForEachState.Transform.apply(sublist:)(a1, *(_QWORD **)v2, v4 | v5, a2[2], a2[3], a2[4], a2[5], a2[6]);
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.bindID(_:) in conformance ForEachState<A, B, C>.Transform(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  v4 = v3 | *(unsigned __int8 *)(v2 + 8);
  if (*(_BYTE *)(v2 + 10))
    v5 = 0x10000;
  else
    v5 = 0;
  return ForEachState.Transform.bindID(_:)(a1, *(_QWORD **)v2, v4 | v5, a2[2], a2[3], a2[4], a2[5], a2[6]);
}

void ForEachState.Info.Init.value.getter()
{
  type metadata accessor for ForEach();
}

void sub_235171B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v6 - 120) = v5;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v2;
  *(_QWORD *)(v6 - 88) = v1;
  type metadata accessor for ForEach();
}

void sub_235171B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
  ForEachState.update(view:)(v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForEachState<A, B, C>.Info.Init()
{
  return 0x697463656C6C6F43;
}

void protocol witness for Rule.value.getter in conformance ForEachState<A, B, C>.Info.Init()
{
  ForEachState.Info.Init.value.getter();
}

uint64_t sub_235171C20(uint64_t result, int a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_DWORD *)(v2 + 8) = a2;
  return result;
}

void ForEachState.Evictor.value.getter()
{
  _BYTE *WeakValue;
  unsigned int *Value;

  WeakValue = (_BYTE *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    if ((*WeakValue & 1) == 0)
      return;
    goto LABEL_3;
  }
  if (one-time initialization token for evictByDefault != -1)
    swift_once();
  if (static ForEachEvictionInput.evictByDefault == 1)
  {
LABEL_3:
    Value = (unsigned int *)AGGraphGetValue();
    ForEachState.evictItems(seed:)(*Value);
  }
}

void protocol witness for Rule.value.getter in conformance ForEachState<A, B, C>.Evictor()
{
  ForEachState.Evictor.value.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ForEachState<A, B, C>.Evictor(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.Evictor, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t ForEachState.Item.invalidate()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;

  v2 = v1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 120);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = (uint64_t *)(result + *(_QWORD *)(*(_QWORD *)result + 192));
    swift_beginAccess();
    v10 = *v9;
    v11 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
    v12 = *v9 & 0xC000000000000001;
    v20 = v5;
    v21 = v12;
    if (v12)
    {
      swift_bridgeObjectRetain();
      _bridgeAnythingToObjectiveC<A>(_:)();
      v13 = __CocoaDictionary.index(forKey:)();
      v15 = v14;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if (!v13)
        goto LABEL_10;
LABEL_8:
      v19 = v21 != 0;
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.remove(at:)();
      swift_endAccess();
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v13, v15, v19);
      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v7, v4);
    }
    if (*(_QWORD *)(v10 + 16))
    {
      v16 = *(_QWORD *)(v3 + 144);
      swift_bridgeObjectRetain();
      v17 = __RawDictionaryStorage.find<A>(_:)(v11, v4, v16);
      if ((v18 & 1) != 0)
      {
        v13 = v17;
        v15 = *(unsigned int *)(v10 + 36);
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
LABEL_10:
    swift_bridgeObjectRetain();
    *v9 = Dictionary.filter(_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL closure #1 in ForEachState.Item.invalidate()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, double);
  uint64_t v17;
  _BOOL8 v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 120);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v14 = *a2;
  v15 = *(_QWORD *)(v5 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v16((char *)&v21 - v12, a1, v5, v11);
  *(_QWORD *)&v13[*(int *)(TupleTypeMetadata2 + 48)] = v14;
  v17 = *(int *)(TupleTypeMetadata2 + 48);
  ((void (*)(char *, char *, uint64_t))v16)(v9, v13, v5);
  *(_QWORD *)&v9[v17] = v14;
  v18 = v14 != v22;
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_retain();
  v19(v13, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v5);
  return v18;
}

uint64_t ForEachState.Item.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 120) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
  outlined destroy of _ViewListOutputs.Views(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_weakDestroy();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

id *ForEachState.Item.deinit()
{
  id *v0;
  _QWORD *v1;
  char *v2;
  uint64_t AssociatedTypeWitness;

  v1 = *v0;

  (*(void (**)(char *))(*(_QWORD *)(v1[15] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 20));
  outlined destroy of _ViewListOutputs.Views((uint64_t)v0 + *((_QWORD *)*v0 + 22));
  swift_weakDestroy();
  v2 = (char *)v0 + *((_QWORD *)*v0 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  return v0;
}

uint64_t ForEachState.Item.__deallocating_deinit()
{
  return ForEachState.Item.__deallocating_deinit((void (*)(void))ForEachState.Item.deinit);
}

void ForEachState.ItemList.value.getter()
{
  uint64_t Value;
  _BYTE v1[40];

  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v1);
  type metadata accessor for ForEachState.ItemList.WrappedList();
}

uint64_t sub_235172288(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  __int128 v5;

  v2[3] = a1;
  v2[4] = (uint64_t)&protocol witness table for ForEachState<A, B, C>.ItemList.WrappedList;
  v3 = swift_allocObject();
  *v2 = v3;
  outlined init with take of ScrollStateRequest(&v5, v3 + 16);
  *(_QWORD *)(v3 + 56) = v1;
  return swift_retain();
}

_QWORD *ForEachState.ItemList.WrappedList.traits.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(&v6, v3, v4);
  if (v1[5])
    result = (_QWORD *)ForEachState.Item.applyTraits(to:)();
  *a1 = v6;
  return result;
}

uint64_t ForEachState.ItemList.WrappedList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v12 = *a2;
  v13 = v6[3];
  v14 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v13);
  v16 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 48))(a1, &v16, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v13, v14) & 1;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ForEachState<A, B, C>.ItemList.WrappedList(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ForEachState.ItemList.WrappedList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

void protocol witness for Rule.value.getter in conformance ForEachState<A, B, C>.ItemList()
{
  ForEachState.ItemList.value.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t *a1, uint64_t *a2)
{
  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ForEachState<A, B, C>.StaticViewIDCollection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  result = _ViewInputs.base.modify(*v2, *(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t (**a1)(), uint64_t *a2))()
{
  uint64_t (*v4)();

  v4 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 4) = ForEachState.StaticViewIDCollection.subscript.read(v4, *a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*ForEachState.StaticViewIDCollection.subscript.read(uint64_t (*result)(), uint64_t a2))()
{
  uint64_t v2;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    v2 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)result = a2;
    *((_DWORD *)result + 1) = 0;
    *((_QWORD *)result + 1) = v2;
    return destroy for Image.Location.Error;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  return MEMORY[0x23B7C604C]();
}

uint64_t ForEachState.ForEachViewIDCollection.endIndex.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 92));
}

void ForEachState.ForEachViewIDCollection.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  __int128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = v3;
  v37 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(_QWORD *)(v11 + 40);
  v12 = *(_QWORD *)(v11 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17.n128_f64[0] = MEMORY[0x24BDAC7A8](v16);
  v38 = (char *)v30 - v18;
  v19 = *(_QWORD *)(v4 + *(int *)(a2 + 88));
  if (v19)
  {
    if (a1 == 0x8000000000000000 && v19 == -1)
    {
LABEL_10:
      __break(1u);
      JUMPOUT(0x235172CA4);
    }
    v20 = a1 / v19 * v19;
    if ((unsigned __int128)(a1 / v19 * (__int128)v19) >> 64 == v20 >> 63)
    {
      if (!__OFSUB__(a1, v20))
      {
        v30[2] = v10;
        v30[3] = v8;
        v35 = a3;
        v21 = a1 / v19;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, __n128))(**(_QWORD **)v4 + 96))(&v47, a1 % v19, v17);
        v22 = v4 + *(int *)(a2 + 68);
        dispatch thunk of Collection.startIndex.getter();
        v23 = v38;
        v33 = v21;
        v30[1] = v22;
        v24 = v36;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        v34 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v25 = v34(v15, AssociatedTypeWitness);
        v32 = v30;
        v45 = *(_QWORD *)(v4 + *(int *)(a2 + 76));
        MEMORY[0x24BDAC7A8](v25);
        v26 = v37;
        v30[-8] = v12;
        v30[-7] = v26;
        v27 = *(_QWORD *)(a2 + 32);
        v30[-6] = v27;
        v30[-5] = v24;
        v31 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v30[-4] = v31;
        v30[-2] = v4;
        v30[-1] = v23;
        swift_getAssociatedTypeWitness();
        v28 = MEMORY[0x24BEE1768];
        type metadata accessor for KeyPath();
        type metadata accessor for Optional();
        swift_retain();
        _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter, (uint64_t)&v30[-10], MEMORY[0x24BEE4078], v28, v29, (uint64_t)&v46);
        swift_release();
        v40 = v12;
        v41 = v26;
        v42 = v27;
        v43 = v24;
        v44 = v31;
        type metadata accessor for ForEach.IDGenerator();
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  goto LABEL_10;
}

void closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for ForEachState.ForEachViewIDCollection();
}

uint64_t sub_235172DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);

  v4 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
  (*(void (**)(uint64_t))(v2 + 16))(v0);
  v4(v3 - 128, 0);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void static ForEachState.ForEachViewIDCollection.== infix(_:_:)()
{
  type metadata accessor for ForEachState.ForEachViewIDCollection();
}

uint64_t sub_235172E74(int *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  void (*v23)(_BYTE *, uint64_t, int *);
  int v24;
  void (*v25)(_BYTE *, int *);
  int v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[96];

  v5 = *((_QWORD *)a1 - 1);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v3 - 152) = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v3 - 160) = &v35[-v8];
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v35[-v10];
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v35[-v13];
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v35[-v16];
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = &v35[-v20];
  v22 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)v2 + 104))(*v1, v19);
  v23 = *(void (**)(_BYTE *, uint64_t, int *))(v5 + 16);
  v23(v21, v2, a1);
  v23(v17, (uint64_t)v1, a1);
  if ((v22 & 1) != 0)
  {
    v24 = v21[a1[20]];
    v25 = *(void (**)(_BYTE *, int *))(v5 + 8);
    v25(v21, a1);
    v26 = v17[a1[20]];
    v25(v17, a1);
    v23(v14, v2, a1);
    v23(v11, (uint64_t)v1, a1);
    v27 = v24 == v26 && *(_DWORD *)&v14[a1[21]] == *(_DWORD *)&v11[a1[21]];
  }
  else
  {
    v25 = *(void (**)(_BYTE *, int *))(v5 + 8);
    v25(v17, a1);
    v25(v21, a1);
    v23(v14, v2, a1);
    v23(v11, (uint64_t)v1, a1);
    v27 = 0;
  }
  v25(v11, a1);
  v25(v14, a1);
  v28 = *(_BYTE **)(v3 - 160);
  v23(v28, v2, a1);
  v29 = *(_BYTE **)(v3 - 152);
  v23(v29, (uint64_t)v1, a1);
  if ((_DWORD)v27)
  {
    MEMORY[0x24BDAC7A8](&v28[a1[17]]);
    v30 = *(_QWORD *)(v3 - 168);
    *(_QWORD *)&v35[-32] = v30;
    *(_QWORD *)&v35[-24] = v31;
    *(_DWORD *)&v35[-16] = 515;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v32, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v35[-48], v30, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v33);
    v27 = *(unsigned __int8 *)(v3 - 136);
  }
  v25(v29, a1);
  v25(v28, a1);
  return v27;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection()
{
  static ForEachState.ForEachViewIDCollection.== infix(_:_:)();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ForEachState<A, B, C>.ForEachViewIDCollection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = ForEachState.ForEachViewIDCollection.endIndex.getter(a1);
  *a2 = result;
  return result;
}

void protocol witness for Collection.subscript.read in conformance ForEachState<A, B, C>.ForEachViewIDCollection(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  void *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  ForEachState.ForEachViewIDCollection.subscript.read((uint64_t)v6, *a2, a3);
}

uint64_t (*sub_235173324(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void ForEachState.ForEachViewIDCollection.subscript.read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ForEachState.ForEachViewIDCollection.subscript.getter(a2, a3, a1);
}

uint64_t (*sub_235173364())()
{
  return destroy for HostPreferencesCombiner;
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ForEachState<A, B, C>.ForEachViewIDCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection, a1);
  result = type metadata accessor for IndexingIterator();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection, a1);
  v4 = specialized Collection._copyToContiguousArray()(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

void ForEachState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  type metadata accessor for ForEach();
}

uint64_t sub_235173640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ForEachState.__deallocating_deinit()
{
  return ForEachState.Item.__deallocating_deinit((void (*)(void))ForEachState.deinit);
}

uint64_t ForEachState.Item.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t ForEachList.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return ForEachState.traitKeys.getter(a1);
}

void ForEachList.viewIDs.getter(uint64_t a1)
{
  ForEachState.viewIDs.getter(a1);
}

uint64_t ForEachList.count(style:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t *))
{
  uint64_t v11;

  v11 = *a1;
  return a10(&v11);
}

void ForEachList.edit(forID:since:)(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v3 = a1[1];
  v4 = *a2;
  v6[0] = *a1;
  v6[1] = v3;
  v5 = v4;
  ForEachState.edit(forID:since:)((int *)v6, &v5, a3);
}

uint64_t ForEachList.firstOffset<A>(forID:style:)()
{
  return ForEachState.firstOffset<A>(forID:style:)();
}

void ForEachList.Init.updateValue()()
{
  specialized ForEachList.Init.info.getter();
}

void sub_23517385C()
{
  uint64_t v0;
  int v1;

  swift_retain();
  ForEachState.invalidateViewCounts()();
  swift_release();
  *(_DWORD *)(v0 + 4) = v1 + 1;
  specialized ForEachList.Init.info.getter();
}

void sub_235173898()
{
  type metadata accessor for ForEachList();
}

uint64_t sub_2351738B4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _UNKNOWN **v7;

  v6 = a1;
  v7 = &protocol witness table for ForEachList<A, B, C>;
  v4 = v1;
  v5 = v2;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  swift_retain();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForEachList<A, B, C>.Init()
{
  return 0x697463656C6C6F43;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ForEachList<A, B, C>.Init(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachList<A, B, C>.Init, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(a1, a2, a3, (uint64_t (*)(uint64_t *))ForEachState.count(style:));
}

uint64_t protocol witness for ViewList.estimatedCount(style:) in conformance ForEachList<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(a1, a2, a3, (uint64_t (*)(uint64_t *))ForEachState.estimatedCount(style:));
}

uint64_t protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v4;

  return ForEachList.count(style:)(a1, *(_QWORD *)v4, *(unsigned int *)(v4 + 8), a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a4);
}

uint64_t protocol witness for ViewList.traitKeys.getter in conformance ForEachList<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return ForEachList.traitKeys.getter(a1);
}

void protocol witness for ViewList.viewIDs.getter in conformance ForEachList<A, B, C>()
{
  uint64_t *v0;

  ForEachList.viewIDs.getter(*v0);
}

void protocol witness for ViewList.traits.getter in conformance ForEachList<A, B, C>(_QWORD *a1@<X8>)
{
  protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.AnimatableData(a1);
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ForEachList<A, B, C>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return specialized ForEachList.applyNodes(from:style:list:transform:to:)(a1, a2, a4, a5, a6, *v6) & 1;
}

void protocol witness for ViewList.edit(forID:since:) in conformance ForEachList<A, B, C>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  ForEachList.edit(forID:since:)(a1, a2, a3);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance ForEachList<A, B, C>()
{
  return ForEachList.firstOffset<A>(forID:style:)();
}

void ForEachChild.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[30];

  v18[28] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v18[8] = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  v18[6] = (char *)v18 - v4;
  MEMORY[0x24BDAC7A8](v5);
  v18[7] = (char *)v18 - v6;
  type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v18[3] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v18[4] = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v18[10] = (char *)v18 - v10;
  v18[13] = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
  MEMORY[0x24BDAC7A8](v11);
  v18[11] = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v18[5] = (char *)v18 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v18[12] = (char *)v18 - v16;
  MEMORY[0x24BDAC7A8](v17);
  specialized ForEachChild.info.getter();
}

void closure #1 in ForEachChild.updateValue()(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[14];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v11[9] = a2;
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8);
  v5 = *(_QWORD *)(*a1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[8] = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11[5] = (char *)v11 - v7;
  v11[6] = v4;
  v8 = swift_getAssociatedTypeWitness();
  v11[3] = *(_QWORD *)(v8 - 8);
  v11[4] = v8;
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  swift_beginAccess();
  v10 = *(_QWORD *)(v2 + 112);
  v11[13] = v5;
  v12 = *(_OWORD *)(v2 + 88);
  v13 = v3;
  v14 = v10;
  type metadata accessor for ForEach();
}

uint64_t sub_2351743D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v1, 1, a1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + *(int *)(a1 + 60));
    *(_QWORD *)(v7 - 256) = *(_QWORD *)(v1 + *(int *)(a1 + 60) + 8);
    *(_QWORD *)(v7 - 248) = v4;
    *(_QWORD *)(v7 - 240) = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
    v11 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 192);
    swift_beginAccess();
    v13 = *(_QWORD *)(v7 - 232);
    v12 = *(_QWORD *)(v7 - 224);
    v14 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v5, v11, v12);
    swift_retain();
    v15 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
    v16 = *(_QWORD *)(v7 - 200);
    v17 = *(_QWORD *)(v7 - 192);
    v18 = *(_QWORD *)(v7 - 216);
    (*(void (**)(uint64_t))(v16 + 16))(v18);
    v15(v7 - 152, 0);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 248) + 8))(v2, v3);
    (*(void (**)(uint64_t))(v7 - 240))(v18);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  }
  return result;
}

uint64_t ForEachChild.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x697463656C6C6F43;
  v0._object = (void *)0xEB000000005B6E6FLL;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t, __n128);
  char v17;
  _QWORD v19[2];

  v5 = v4;
  v19[0] = a1;
  v19[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  v8.n128_f64[0] = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = -1 << *(_BYTE *)(v5 + 32);
  v13 = v12 & ~v11;
  if (((*(_QWORD *)(v5 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v11;
    v15 = *(_QWORD *)(v7 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
    do
    {
      v16(v10, *(_QWORD *)(v5 + 48) + v15 * v13, a3, v8);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a3);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

void type metadata accessor for ForEachState.Info()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ForEachState.Info.Init()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ForEachState.Evictor()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ForEachList.Init()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t sub_23517477C()
{
  return 48;
}

__n128 sub_235174788(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void type metadata accessor for ForEach()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void sub_2351747A8()
{
  type metadata accessor for ForEach();
}

uint64_t sub_2351747E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v3 = (v2 + 80) & ~v2;
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v1 + v3);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ForEach.init<A>(_:transform:)()
{
  type metadata accessor for ForEach();
}

void sub_2351748C4()
{
  uint64_t v0;

  closure #1 in ForEach.init<A>(_:transform:)(v0);
}

uint64_t sub_23517491C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out C)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 32))(*a1);
}

uint64_t type metadata completion function for ForEach()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEach(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ForEach(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_retain();
  swift_release();
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *v10 = *(_QWORD *)v9;
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEach(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235174ED8 + 4 * byte_2352D18A0[v10]))();
  }
}

void storeEnumTagSinglePayload for ForEach(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_235175068()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2351750E0);
}

void sub_235175070(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235175078);
  JUMPOUT(0x2351750E0);
}

void sub_2351750B8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2351750E0);
}

void sub_2351750C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2351750E0);
}

uint64_t sub_2351750C8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x2351750E0);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x2351750DCLL);
    JUMPOUT(0x2351750D4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for ForEach.IDGenerator()
{
  JUMPOUT(0x23B7C9B5CLL);
}

ValueMetadata *type metadata accessor for ForEachEvictionInput()
{
  return &type metadata for ForEachEvictionInput;
}

uint64_t dispatch thunk of HasCustomIDRepresentation.toCustomIDRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void type metadata completion function for ForEachState()
{
  type metadata accessor for ForEach();
}

uint64_t sub_235175170()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t type metadata completion function for ForEachState.Item()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

void type metadata accessor for ForEachState.Item()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t storeEnumTagSinglePayload for ForEachState.IDTypeMatchingStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_235175364 + 4 * byte_2352D18B4[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_235175398 + 4 * byte_2352D18AF[v4]))();
}

uint64_t sub_235175398(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351753A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2351753A8);
  return result;
}

uint64_t sub_2351753B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2351753BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2351753C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2351753C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ForEachState.IDTypeMatchingStrategy()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t initializeBufferWithCopyOfBuffer for ForEachState.Evictor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForEachState.Evictor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ForEachState.Evictor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for ForEachState<A, B, C>.Evictor(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.Evictor);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ForEachList<A, B, C>.Init(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachList<A, B, C>.Init);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in ForEachState<A, B, C>.IDTypeMatchingStrategy()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ForEachList<A, B, C>.Init()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ForEachState<A, B, C>.Evictor()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ForEachState<A, B, C>.Info.Init()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized ForEachState.Item.init(id:reuseID:views:subgraph:index:offset:contentID:seed:state:isConstant:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t *a9, char a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;

  v18 = *a9;
  swift_weakInit();
  *(_BYTE *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 232)) = 8;
  *(_BYTE *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 240)) = 0;
  *(_BYTE *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 248)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 88) - 8) + 32))(a11 + *(_QWORD *)(*(_QWORD *)a11 + 160), a1);
  *(_QWORD *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 168)) = a2;
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a3, (_OWORD *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 176)));
  swift_weakAssign();
  v19 = a11 + *(_QWORD *)(*(_QWORD *)a11 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v19, a5, AssociatedTypeWitness);
  *(_QWORD *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 200)) = a6;
  *(_QWORD *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 208)) = a7;
  *(_DWORD *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 216)) = a8;
  *(_BYTE *)(a11 + *(_QWORD *)(*(_QWORD *)a11 + 224)) = a10;
  *(_DWORD *)(a11 + 24) = 1;
  *(_QWORD *)(a11 + 16) = a4;
  return swift_retain();
}

uint64_t specialized ForEachState.Item.__allocating_init(id:reuseID:views:subgraph:index:offset:contentID:seed:state:isConstant:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t *a9, char a10)
{
  uint64_t v17;
  uint64_t v18;

  v17 = swift_allocObject();
  v18 = specialized ForEachState.Item.init(id:reuseID:views:subgraph:index:offset:contentID:seed:state:isConstant:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, v17);
  swift_release();
  return v18;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = type metadata accessor for Range();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - v9;
  v11 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v7, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t specialized ForEachList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[7];
  uint64_t v8;

  v8 = *a2;
  v7[2] = a6;
  v7[3] = a3;
  v7[4] = a4;
  v7[5] = a5;
  return ForEachState.forEachItem(from:style:do:)(a1, &v8, (uint64_t)partial apply for closure #1 in ForEachState.applyNodes(from:style:list:transform:to:), (uint64_t)v7) & 1;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v22 - v17;
  v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

void specialized ForEachList.Init.info.getter()
{
  type metadata accessor for ForEachState.Info();
}

uint64_t sub_235175B58()
{
  return *(_QWORD *)AGGraphGetValue();
}

void type metadata accessor for ForEachList()
{
  JUMPOUT(0x23B7C9B5CLL);
}

BOOL partial apply for closure #1 in ForEachState.Item.invalidate()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in ForEachState.Item.invalidate()(a1, a2, v2);
}

uint64_t partial apply for closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in ForEachState.firstOffset<A>(forID:style:)(a1, a2, a3, *(unsigned __int8 *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(uint64_t **)(v3 + 56), *(uint64_t **)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24)) & 1;
}

void type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ObservationTracking._AccessList();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void partial apply for closure #1 in ForEachState.item(at:offset:)()
{
  closure #1 in ForEachState.item(at:offset:)();
}

void partial apply for closure #3 in ForEachState.item(at:offset:)()
{
  closure #3 in ForEachState.item(at:offset:)();
}

uint64_t partial apply for closure #4 in ForEachState.item(at:offset:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 8) = v1;
  return result;
}

void type metadata accessor for ForEachState.ItemList()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ForEachChild()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v9 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  return a3(a1, v9, v8, v7, a2);
}

uint64_t partial apply for closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:)(a1, a2, a3, *(uint64_t **)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD **)(v3 + 48), *(_QWORD *)(v3 + 56)) & 1;
}

void partial apply for closure #1 in ForEachState.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  closure #1 in ForEachState.applyNodes(from:style:list:transform:to:)(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

void type metadata accessor for ForEachState.Transform()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _AnyHashableBox<Pair<Int, AGAttribute>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _AnyHashableBox<Pair<Int, AGAttribute>>)
  {
    type metadata accessor for Pair<Int, AGAttribute>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>();
    v6 = type metadata accessor for _AnyHashableBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _AnyHashableBox<Pair<Int, AGAttribute>>);
  }
}

void type metadata accessor for Pair<Int, AGAttribute>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Pair<Int, AGAttribute>)
  {
    type metadata accessor for AGAttribute(255);
    v4 = type metadata accessor for Pair(a1, MEMORY[0x24BEE1768], v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Pair<Int, AGAttribute>);
  }
}

unint64_t lazy protocol witness table accessor for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>;
  if (!lazy protocol witness table cache variable for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>)
  {
    type metadata accessor for Pair<Int, AGAttribute>(255);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AGAttribute and conformance AGAttribute();
    v4[0] = MEMORY[0x24BEE1778];
    v4[1] = v3;
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> Pair<A, B>, v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>);
  }
  return result;
}

void type metadata accessor for ForEachState.ForEachViewIDCollection()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in ForEachState.viewIDs.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ForEachState.viewIDs.getter(a1, a2, a3, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

void type metadata accessor for ForEachState.StaticViewIDCollection()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in ForEachState.traitKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ForEachState.traitKeys.getter(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t partial apply for closure #1 in ForEachState.count(style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in ForEachState.count(style:)(a1, a2, a3, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE **)(v3 + 32), *(uint64_t **)(v3 + 40));
}

uint64_t type metadata completion function for ForEachState.ForEachViewIDCollection()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEachState.ForEachViewIDCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((((((v6 + ((v5 + 8) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v11 = a1;
    v12 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v13 = ((unint64_t)a2 + v5 + 8) & ~v5;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    v14(v12, v13, v3);
    v15 = (_QWORD *)((v6 + v12) & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)((v6 + v13) & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
    *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
    v19 = (_QWORD *)((v17 + 23) & 0xFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((v18 + 23) & 0xFFFFFFFFFFFFF8);
    *v19 = *v20;
    *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v11;
}

uint64_t destroy for ForEachState.ForEachViewIDCollection(uint64_t a1, uint64_t a2)
{
  swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for ForEachState.ForEachViewIDCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64) + 7;
  v11 = (_QWORD *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
  v15 = (_QWORD *)((v13 + 23) & 0xFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  *v15 = *v16;
  *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ForEachState.ForEachViewIDCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = v10 + v9;
  v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v11 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v13;
  swift_retain();
  swift_release();
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v13 + 8);
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(v13 + 12);
  v15 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v13 + 23) & 0xFFFFFFFFFFFFF8);
  *v15 = *v16;
  *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for ForEachState.ForEachViewIDCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  v13 = (_QWORD *)((v11 + 23) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v12 + 23) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ForEachState.ForEachViewIDCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_release();
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
  v15 = (_QWORD *)((v13 + 23) & 0xFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  *v15 = *v16;
  *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEachState.ForEachViewIDCollection(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((((((*(_QWORD *)(v4 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2351765B0 + 4 * byte_2352D18B9[v10]))();
  }
}

void storeEnumTagSinglePayload for ForEachState.ForEachViewIDCollection(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_235176750()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2351767B8);
}

void sub_235176758(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235176760);
  JUMPOUT(0x2351767B8);
}

void sub_235176770()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2351767B8);
}

void sub_235176778()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2351767B8);
}

void sub_235176780(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x2351767B4);
      JUMPOUT(0x2351767B0);
    }
    JUMPOUT(0x23517678CLL);
  }
  JUMPOUT(0x2351767B8);
}

uint64_t initializeBufferWithCopyOfBuffer for ForEachState.Transform(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForEachState.Transform(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t assignWithTake for ForEachState.Transform(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t type metadata completion function for ForEachChild()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEachChild(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t destroy for ForEachChild(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_DWORD *initializeWithCopy for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithCopy for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *initializeWithTake for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithTake for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEachChild(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_235176BF4 + 4 * byte_2352D18C8[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for ForEachChild(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t assignWithCopy for ForEachState.ItemList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ForEachState.ItemList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void base witness table accessor for Sequence in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Collection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for Sequence in ForEachState<A, B, C>.StaticViewIDCollection()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Collection in ForEachState<A, B, C>.StaticViewIDCollection()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in ForEachState<A, B, C>.StaticViewIDCollection()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.StaticViewIDCollection);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForEachState<A, B, C>.ForEachViewIDCollection);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], a1, &v3);
}

void base witness table accessor for _AttributeBody in ForEachState<A, B, C>.ItemList()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ForEachChild<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

void specialized ForEachChild.info.getter()
{
  type metadata accessor for ForEachState.Info();
}

uint64_t sub_235177068()
{
  return *(_QWORD *)AGGraphGetValue();
}

void partial apply for closure #1 in ForEachChild.updateValue()(uint64_t a1@<X8>)
{
  uint64_t v1;

  closure #1 in ForEachChild.updateValue()(*(uint64_t **)(v1 + 16), a1);
}

void type metadata accessor for ForEachState.ItemList.WrappedList()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1778], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TagValueTraitKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>();
    v6 = type metadata accessor for ViewTraitCollection.AnyTrait(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>);
  }
}

unint64_t lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>;
  if (!lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1778], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TagValueTraitKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>);
  }
  return result;
}

void partial apply for closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter()
{
  closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter();
}

uint64_t *assignWithCopy for ForEachState.ItemList.WrappedList(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ForEachState.ItemList.WrappedList(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

uint64_t closure #1 in _withObservation<A>(do:)partial apply(uint64_t a1, _QWORD *a2)
{
  return partial apply for closure #1 in _withObservation<A>(do:)(a1, a2);
}

void static VersionSeed.empty.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

unsigned int *VersionSeed.merge(_:)(unsigned int *result)
{
  _DWORD *v1;
  unint64_t v2;
  uint64_t v3;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *result;
  v3 = *v1;
  if ((_DWORD)v3 != -1 && (_DWORD)v2 != 0)
  {
    if ((_DWORD)v3)
      v5 = (_DWORD)v2 == -1;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = (v2 | (v3 << 32)) + ~(v2 << 32);
      v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
      v2 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
      LODWORD(v2) = ((v2 + ~(v2 << 27)) >> 31) ^ (v2 + ~((_DWORD)v2 << 27));
    }
    *v1 = v2;
  }
  return result;
}

uint64_t VersionSeed.init(nodeId:viewSeed:)@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (a2 | (unint64_t)(result << 32)) + ~((unint64_t)a2 << 32);
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  *a3 = ((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27));
  return result;
}

void static VersionSeed.invalid.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

BOOL VersionSeed.matches(_:)(int *a1)
{
  _DWORD *v1;
  int v2;

  v2 = *a1;
  return *v1 != -1 && v2 != -1 && *v1 == v2;
}

uint64_t VersionSeed.init(value:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL VersionSeed.isInvalid.getter()
{
  _DWORD *v0;

  return *v0 == -1;
}

uint64_t merge32(_:_:)(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (a2 | (unint64_t)(a1 << 32)) + ~((unint64_t)a2 << 32);
  v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ ((_DWORD)v4 + ~((_DWORD)v4 << 27));
}

Swift::Void __swiftcall VersionSeed.mergeValue(_:)(Swift::UInt32 a1)
{
  Swift::UInt32 *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *v1;
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2)
    {
      v3 = (~((unint64_t)a1 << 32) + a1 + (v2 << 32)) ^ ((~((unint64_t)a1 << 32) + a1 + (v2 << 32)) >> 22);
      v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
      v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
      a1 = (v5 >> 31) ^ v5;
    }
    *v1 = a1;
  }
}

uint64_t VersionSeed.description.getter()
{
  _DWORD *v0;

  if (!*v0)
    return 0x7974706D65;
  if (*v0 == -1)
    return 0x64696C61766E69;
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance VersionSeed()
{
  _DWORD *v0;

  if (*v0 == -1)
    return 0x64696C61766E69;
  if (*v0)
    return dispatch thunk of CustomStringConvertible.description.getter();
  return 0x7974706D65;
}

ValueMetadata *type metadata accessor for VersionSeed()
{
  return &type metadata for VersionSeed;
}

uint64_t AnyInterfaceIdiom.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(a1 - 8) + 8))();
  result = type metadata accessor for InterfaceIdiomBox(0, a1, a2, v6);
  *a3 = result;
  a3[1] = (uint64_t)&protocol witness table for InterfaceIdiomBox<A>;
  return result;
}

uint64_t type metadata accessor for InterfaceIdiomBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InterfaceIdiomBox);
}

BOOL static InterfaceIdiom.accepts<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return a1 == v1;
}

BOOL static InterfaceIdiomKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void InterfaceIdiomKind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int InterfaceIdiomKind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static InterfaceIdiom.accepts<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(a3, a3, a5, a2, a4);
}

void static CarPlayInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ClarityUIInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ComplicationInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static ComplicationInterfaceIdiom.accepts<A>(_:)(ValueMetadata *a1)
{
  return a1 == &type metadata for WidgetInterfaceIdiom || a1 == &type metadata for ComplicationInterfaceIdiom;
}

void static WidgetInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static MacInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static MacCatalystInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

BOOL static MacCatalystInterfaceIdiom.accepts<A>(_:)(ValueMetadata *a1)
{
  return a1 == &type metadata for PadInterfaceIdiom || a1 == &type metadata for MacCatalystInterfaceIdiom;
}

void static PhoneInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static PadInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static TVInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void static TouchBarInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static WatchInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

void static VisionInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

void static NoKitInterfaceIdiom.hashValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

void protocol witness for static InterfaceIdiom.hashValue.getter in conformance NoKitInterfaceIdiom(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t static AnyInterfaceIdiom.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

uint64_t AnyInterfaceIdiom.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 8) + 24))();
}

uint64_t AnyInterfaceIdiom.accepts<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 8) + 16))() & 1;
}

uint64_t AnyInterfaceIdiom.accepts<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 16))(a2) & 1;
}

Swift::Int AnyInterfaceIdiom.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 24))(v4, v1, v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyInterfaceIdiom()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 24))(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyInterfaceIdiom()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 8) + 24))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyInterfaceIdiom()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)(v0 + 8) + 24))(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomKind and conformance InterfaceIdiomKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InterfaceIdiomKind and conformance InterfaceIdiomKind;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomKind and conformance InterfaceIdiomKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for InterfaceIdiomKind, &type metadata for InterfaceIdiomKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomKind and conformance InterfaceIdiomKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom;
  if (!lazy protocol witness table cache variable for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyInterfaceIdiom, &type metadata for AnyInterfaceIdiom);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom);
  }
  return result;
}

uint64_t dispatch thunk of static InterfaceIdiom.accepts<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static InterfaceIdiom.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t getEnumTagSinglePayload for InterfaceIdiomKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InterfaceIdiomKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_235177A90 + 4 * byte_2352D25E5[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_235177AC4 + 4 * asc_2352D25E0[v4]))();
}

uint64_t sub_235177AC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235177ACC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235177AD4);
  return result;
}

uint64_t sub_235177AE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235177AE8);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_235177AEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235177AF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InterfaceIdiomKind()
{
  return &type metadata for InterfaceIdiomKind;
}

ValueMetadata *type metadata accessor for CarPlayInterfaceIdiom()
{
  return &type metadata for CarPlayInterfaceIdiom;
}

ValueMetadata *type metadata accessor for ClarityUIInterfaceIdiom()
{
  return &type metadata for ClarityUIInterfaceIdiom;
}

ValueMetadata *type metadata accessor for ComplicationInterfaceIdiom()
{
  return &type metadata for ComplicationInterfaceIdiom;
}

ValueMetadata *type metadata accessor for WidgetInterfaceIdiom()
{
  return &type metadata for WidgetInterfaceIdiom;
}

ValueMetadata *type metadata accessor for MacInterfaceIdiom()
{
  return &type metadata for MacInterfaceIdiom;
}

ValueMetadata *type metadata accessor for MacCatalystInterfaceIdiom()
{
  return &type metadata for MacCatalystInterfaceIdiom;
}

ValueMetadata *type metadata accessor for PhoneInterfaceIdiom()
{
  return &type metadata for PhoneInterfaceIdiom;
}

ValueMetadata *type metadata accessor for PadInterfaceIdiom()
{
  return &type metadata for PadInterfaceIdiom;
}

ValueMetadata *type metadata accessor for TVInterfaceIdiom()
{
  return &type metadata for TVInterfaceIdiom;
}

ValueMetadata *type metadata accessor for TouchBarInterfaceIdiom()
{
  return &type metadata for TouchBarInterfaceIdiom;
}

ValueMetadata *type metadata accessor for WatchInterfaceIdiom()
{
  return &type metadata for WatchInterfaceIdiom;
}

ValueMetadata *type metadata accessor for VisionInterfaceIdiom()
{
  return &type metadata for VisionInterfaceIdiom;
}

ValueMetadata *type metadata accessor for NoKitInterfaceIdiom()
{
  return &type metadata for NoKitInterfaceIdiom;
}

ValueMetadata *type metadata accessor for AnyInterfaceIdiom()
{
  return &type metadata for AnyInterfaceIdiom;
}

void static InterfaceIdiomBox.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt v3;

  (*(void (**)(Swift::UInt *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v3, a2, a3);
  Hasher._combine(_:)(v3);
}

BOOL static InterfaceIdiomBox.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for InterfaceIdiomBox(0, a3, a4, a4);
  return swift_dynamicCastMetatype() != 0;
}

uint64_t static InterfaceIdiomBox.accepts<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, a3, a5) & 1;
}

BOOL protocol witness for static AnyInterfaceIdiomBox.isEqual(to:) in conformance InterfaceIdiomBox<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static InterfaceIdiomBox.isEqual(to:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static AnyInterfaceIdiomBox.accepts<A>(_:) in conformance InterfaceIdiomBox<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static InterfaceIdiomBox.accepts<A>(_:)(a1, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
}

void protocol witness for static AnyInterfaceIdiomBox.hash(into:) in conformance InterfaceIdiomBox<A>(uint64_t a1, uint64_t a2)
{
  static InterfaceIdiomBox.hash(into:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void base witness table accessor for Equatable in InterfaceIdiomBox<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t OffsetShape.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t OffsetShape.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*OffsetShape.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double OffsetShape.offset.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t OffsetShape.offset.setter(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  double *v4;

  v4 = (double *)(v3 + *(int *)(result + 36));
  *v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*OffsetShape.offset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t OffsetShape.init(shape:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t result;
  double *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  result = type metadata accessor for OffsetShape(0, a2, a3, v11);
  v13 = (double *)(a4 + *(int *)(result + 36));
  *v13 = a5;
  v13[1] = a6;
  return result;
}

uint64_t type metadata accessor for OffsetShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OffsetShape);
}

_QWORD *OffsetShape.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  CGFloat *v6;
  double v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  char v14;
  _OWORD v15[2];
  char v16;
  CGAffineTransform v17;

  result = (*(_QWORD *(**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 24) + 24))(v13, *(_QWORD *)(a1 + 16));
  v6 = (CGFloat *)(v2 + *(int *)(a1 + 36));
  v7 = v6[1];
  if (*v6 == 0.0 && v7 == 0.0)
  {
    v8 = v13[0];
    v9 = v13[1];
    v10 = v14;
  }
  else
  {
    CGAffineTransformMakeTranslation(&v17, *v6, v7);
    Path.applying(_:)(&v17.a, (uint64_t)v15);
    v11 = v15[1];
    v12 = v15[0];
    v10 = v16;
    result = (_QWORD *)outlined release of Path((uint64_t)v13);
    v9 = v11;
    v8 = v12;
  }
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t static OffsetShape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t OffsetShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

void OffsetShape.animatableData.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v8;
  uint64_t v9;
  char *v10;
  __int128 v11;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v11 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  v11 = *(_OWORD *)(v2 + *(int *)(a1 + 36));
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  AnimatablePair.init(_:_:)((uint64_t)v10, AssociatedTypeWitness, a2);
}

void OffsetShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  OffsetShape.animatableData.setter(a1, a2, (void (*)(void))specialized OffsetShape.animatableData.setter, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
}

void OffsetShape.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_2351780BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  OffsetShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_2351780F4())(uint64_t a1, char a2)
{
  return OffsetShape.animatableData.modify;
}

void OffsetShape.animatableData.modify(uint64_t a1, char a2)
{
  OffsetShape.animatableData.modify(a1, a2, (void (*)(void *, uint64_t))specialized OffsetShape.animatableData.setter);
}

double protocol witness for Shape.path(in:) in conformance OffsetShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  OffsetShape.path(in:)(a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance OffsetShape<A>(uint64_t a1)
{
  return static OffsetShape.role.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(a1, a2, a3, (void (*)(void))specialized OffsetShape.animatableData.setter, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
}

void protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_235178258(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  OffsetShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_235178290())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(uint64_t a1, char a2)
{
  protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(a1, a2, (void (*)(void *, uint64_t))specialized OffsetShape.animatableData.setter);
}

uint64_t OffsetShape<>.inset(by:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double *v12;
  double v13;
  double v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v7 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(v7, a2, a3);
  v12 = (double *)(v3 + *(int *)(a1 + 36));
  v13 = *v12;
  v14 = v12[1];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Shape.offset(x:y:)(AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8), v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for InsettableShape.inset(by:) in conformance <> OffsetShape<A>(uint64_t a1, uint64_t a2, double a3)
{
  return OffsetShape<>.inset(by:)(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t (*ScaledShape.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*ScaledShape.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ScaledShape.anchor.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t ScaledShape.anchor.setter(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  double *v4;

  v4 = (double *)(v3 + *(int *)(result + 40));
  *v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*ScaledShape.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScaledShape.init(shape:scale:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v15;
  uint64_t result;
  double *v17;
  double *v18;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  result = type metadata accessor for ScaledShape(0, a2, a3, v15);
  v17 = (double *)(a4 + *(int *)(result + 36));
  *v17 = a5;
  v17[1] = a6;
  v18 = (double *)(a4 + *(int *)(result + 40));
  *v18 = a7;
  v18[1] = a8;
  return result;
}

CGFloat ScaledShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  double *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat tx;
  CGFloat ty;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGFloat v21;
  CGFloat v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGFloat result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CGAffineTransform v32;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v13 = (double *)(v6 + *(int *)(a1 + 40));
  v14 = *v13 * a5 + a3;
  v15 = v13[1] * a6 + a4;
  CGAffineTransformMakeTranslation(&t1, -v14, -v15);
  v28 = *(_OWORD *)&t1.c;
  v30 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeScale(&t1, *(CGFloat *)(v6 + *(int *)(a1 + 36)), *(CGFloat *)(v6 + *(int *)(a1 + 36) + 8));
  v18 = *(_OWORD *)&t1.a;
  v19 = *(_OWORD *)&t1.c;
  v20 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v30;
  *(_OWORD *)&t1.c = v28;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v18;
  *(_OWORD *)&t2.c = v19;
  *(_OWORD *)&t2.tx = v20;
  CGAffineTransformConcat(&v32, &t1, &t2);
  v29 = *(_OWORD *)&v32.c;
  v31 = *(_OWORD *)&v32.a;
  v21 = v32.tx;
  v22 = v32.ty;
  CGAffineTransformMakeTranslation(&t1, v14, v15);
  v23 = *(_OWORD *)&t1.a;
  v24 = *(_OWORD *)&t1.c;
  v25 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v31;
  *(_OWORD *)&t1.c = v29;
  t1.tx = v21;
  t1.ty = v22;
  *(_OWORD *)&t2.a = v23;
  *(_OWORD *)&t2.c = v24;
  *(_OWORD *)&t2.tx = v25;
  CGAffineTransformConcat(&v32, &t1, &t2);
  t1 = v32;
  (*(void (**)(CGAffineTransform *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 24)
                                                                                                  + 24))(&v32, *(_QWORD *)(a1 + 16), a3, a4, a5, a6);
  Path.applying(_:)(&t1.a, (uint64_t)&t2);
  outlined release of Path((uint64_t)&v32);
  result = t2.a;
  v27 = *(_OWORD *)&t2.c;
  *(_OWORD *)a2 = *(_OWORD *)&t2.a;
  *(_OWORD *)(a2 + 16) = v27;
  *(_BYTE *)(a2 + 32) = LOBYTE(t2.tx);
  return result;
}

void ScaledShape.animatableData.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v8;
  uint64_t v9;
  char *v10;
  float64x2_t v11;
  _OWORD v12[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  v11 = vmulq_f64(*(float64x2_t *)(v2 + *(int *)(a1 + 40)), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  v12[0] = *(_OWORD *)(v2 + *(int *)(a1 + 36));
  v12[1] = v11;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  AnimatablePair.init(_:_:)((uint64_t)v10, AssociatedTypeWitness, a2);
}

void ScaledShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  OffsetShape.animatableData.setter(a1, a2, (void (*)(void))specialized ScaledShape.animatableData.setter, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

void OffsetShape.animatableData.setter(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  a3();
  swift_getAssociatedTypeWitness();
  a4(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(a5, a4);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_235178840(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void ScaledShape.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_235178930(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  ScaledShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_235178968())(uint64_t a1, char a2)
{
  return ScaledShape.animatableData.modify;
}

void ScaledShape.animatableData.modify(uint64_t a1, char a2)
{
  OffsetShape.animatableData.modify(a1, a2, (void (*)(void *, uint64_t))specialized ScaledShape.animatableData.setter);
}

double protocol witness for Shape.path(in:) in conformance ScaledShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  ScaledShape.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

void protocol witness for Animatable.animatableData.setter in conformance ScaledShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(a1, a2, a3, (void (*)(void))specialized ScaledShape.animatableData.setter, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

void protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6)
{
  a4();
  swift_getAssociatedTypeWitness();
  a5(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(a6, a5);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_235178AA8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void protocol witness for Animatable.animatableData.modify in conformance ScaledShape<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_235178B98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  ScaledShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_235178BD0())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance ScaledShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance ScaledShape<A>(uint64_t a1, char a2)
{
  protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(a1, a2, (void (*)(void *, uint64_t))specialized ScaledShape.animatableData.setter);
}

uint64_t (*RotatedShape.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double RotatedShape.angle.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t RotatedShape.angle.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t (*RotatedShape.angle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RotatedShape.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t RotatedShape.init(shape:angle:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v13;
  uint64_t result;
  double *v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  result = type metadata accessor for RotatedShape(0, a2, a3, v13);
  *(double *)(a4 + *(int *)(result + 36)) = a5;
  v15 = (double *)(a4 + *(int *)(result + 40));
  *v15 = a6;
  v15[1] = a7;
  return result;
}

uint64_t RotatedShape.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  double *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat tx;
  CGFloat ty;
  __double2 v18;
  CGFloat v19;
  CGFloat v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CGAffineTransform t1;
  CGAffineTransform v31;
  CGAffineTransform t2;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v13 = (double *)(v6 + *(int *)(a1 + 40));
  v14 = *v13 * a5 + a3;
  v15 = v13[1] * a6 + a4;
  CGAffineTransformMakeTranslation(&t1, -v14, -v15);
  v26 = *(_OWORD *)&t1.c;
  v28 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  v18 = __sincos_stret(*(double *)(v6 + *(int *)(a1 + 36)));
  *(_OWORD *)&t1.a = v28;
  *(_OWORD *)&t1.c = v26;
  t1.tx = tx;
  t1.ty = ty;
  t2.a = v18.__cosval;
  t2.b = v18.__sinval;
  t2.c = -v18.__sinval;
  t2.d = v18.__cosval;
  t2.tx = 0.0;
  t2.ty = 0.0;
  CGAffineTransformConcat(&v31, &t1, &t2);
  v27 = *(_OWORD *)&v31.c;
  v29 = *(_OWORD *)&v31.a;
  v19 = v31.tx;
  v20 = v31.ty;
  CGAffineTransformMakeTranslation(&t1, v14, v15);
  v21 = *(_OWORD *)&t1.a;
  v22 = *(_OWORD *)&t1.c;
  v23 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v29;
  *(_OWORD *)&t1.c = v27;
  t1.tx = v19;
  t1.ty = v20;
  *(_OWORD *)&t2.a = v21;
  *(_OWORD *)&t2.c = v22;
  *(_OWORD *)&t2.tx = v23;
  CGAffineTransformConcat(&v31, &t1, &t2);
  t1 = v31;
  (*(void (**)(CGAffineTransform *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 24)
                                                                                                  + 24))(&v31, *(_QWORD *)(a1 + 16), a3, a4, a5, a6);
  Path.applying(_:)(&t1.a, (uint64_t)&t2);
  result = outlined release of Path((uint64_t)&v31);
  v25 = *(_OWORD *)&t2.c;
  *(_OWORD *)a2 = *(_OWORD *)&t2.a;
  *(_OWORD *)(a2 + 16) = v25;
  *(_BYTE *)(a2 + 32) = LOBYTE(t2.tx);
  return result;
}

void RotatedShape.animatableData.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12[2];
  float64x2_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  v11 = *(int *)(a1 + 40);
  v12[1] = *(double *)(v2 + *(int *)(a1 + 36)) * 128.0;
  v13 = vmulq_f64(*(float64x2_t *)(v2 + v11), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  AnimatablePair.init(_:_:)((uint64_t)v10, AssociatedTypeWitness, a2);
}

void RotatedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  OffsetShape.animatableData.setter(a1, a2, (void (*)(void))specialized RotatedShape.animatableData.setter, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

void RotatedShape.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_235179098(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  RotatedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_2351790D0())(uint64_t a1, char a2)
{
  return RotatedShape.animatableData.modify;
}

void RotatedShape.animatableData.modify(uint64_t a1, char a2)
{
  OffsetShape.animatableData.modify(a1, a2, (void (*)(void *, uint64_t))specialized RotatedShape.animatableData.setter);
}

void OffsetShape.animatableData.modify(uint64_t a1, char a2, void (*a3)(void *, uint64_t))
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v4 = *(void **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 64);
  v6 = *(void **)(*(_QWORD *)a1 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), v6, v7);
    a3(v5, v9);
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v7);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 72), v9);
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

double protocol witness for Shape.path(in:) in conformance RotatedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  RotatedShape.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

void protocol witness for Animatable.animatableData.setter in conformance RotatedShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(a1, a2, a3, (void (*)(void))specialized RotatedShape.animatableData.setter, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

void protocol witness for Animatable.animatableData.modify in conformance RotatedShape<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_2351792D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  RotatedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_235179308())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance RotatedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance RotatedShape<A>(uint64_t a1, char a2)
{
  protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(a1, a2, (void (*)(void *, uint64_t))specialized RotatedShape.animatableData.setter);
}

void protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(uint64_t a1, char a2, void (*a3)(void *, uint64_t))
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v4 = *(void **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 64);
  v6 = *(void **)(*(_QWORD *)a1 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), v6, v7);
    a3(v5, v9);
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v7);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 72), v9);
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

uint64_t RotatedShape<>.inset(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;

  v9 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v20 - v12;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(v9, a2, a4);
  v14 = *(int *)(a1 + 40);
  v15 = *(double *)(v4 + *(int *)(a1 + 36));
  v16 = *(double *)(v4 + v14);
  v17 = *(double *)(v4 + v14 + 8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Shape.rotation(_:anchor:)(AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8), a3, v15, v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t Shape.rotation(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v6;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  double *v19;
  uint64_t v20;

  v13 = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v6, a1, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v16, a1);
  result = type metadata accessor for RotatedShape(0, a1, a2, v17);
  *(double *)(a3 + *(int *)(result + 36)) = a4;
  v19 = (double *)(a3 + *(int *)(result + 40));
  *v19 = a5;
  v19[1] = a6;
  return result;
}

uint64_t protocol witness for InsettableShape.inset(by:) in conformance <> RotatedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return RotatedShape<>.inset(by:)(a1, *(_QWORD *)(a2 - 8), a3, a4);
}

uint64_t (*TransformedShape.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 TransformedShape.transform.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = v2 + *(int *)(a1 + 36);
  v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 TransformedShape.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = v2 + *(int *)(a2 + 36);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  return result;
}

uint64_t (*TransformedShape.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 TransformedShape.init(shape:transform:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for TransformedShape(0, a3, a4, v9) + 36);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v11;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v10 + 32) = result;
  return result;
}

double TransformedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _OWORD *v5;
  __int128 v6;
  double result;
  __int128 v8;
  _QWORD v9[5];
  _OWORD v10[2];
  char v11;
  _OWORD v12[3];

  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 24) + 24))(v9, *(_QWORD *)(a1 + 16));
  v5 = (_OWORD *)(v2 + *(int *)(a1 + 36));
  v6 = v5[1];
  v12[0] = *v5;
  v12[1] = v6;
  v12[2] = v5[2];
  Path.applying(_:)((double *)v12, (uint64_t)v10);
  outlined release of Path((uint64_t)v9);
  result = *(double *)v10;
  v8 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v11;
  return result;
}

uint64_t TransformedShape.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t TransformedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  specialized RendererVisualEffect.animatableData.setter(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*TransformedShape.animatableData.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  size_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v7 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _ScrollClipEffect.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance TransformedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  TransformedShape.path(in:)(a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance TransformedShape<A>(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = v2;
  v5[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  TransformedShape.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>;
}

uint64_t Shape.offset(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  double *v17;
  uint64_t v18;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v5, a1, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v14, a1);
  result = type metadata accessor for OffsetShape(0, a1, a2, v15);
  v17 = (double *)(a3 + *(int *)(result + 36));
  *v17 = a4;
  v17[1] = a5;
  return result;
}

uint64_t Shape.scale(x:y:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  double *v21;
  double *v22;
  uint64_t v23;

  v15 = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v7, a1, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v18, a1);
  result = type metadata accessor for ScaledShape(0, a1, a2, v19);
  v21 = (double *)(a3 + *(int *)(result + 36));
  *v21 = a4;
  v21[1] = a5;
  v22 = (double *)(a3 + *(int *)(result + 40));
  *v22 = a6;
  v22[1] = a7;
  return result;
}

uint64_t Shape.scale(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  return Shape.scale(x:y:anchor:)(a1, a2, a3, a4, a4, a5, a6);
}

__n128 Shape.transform(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __n128 result;
  uint64_t v17;

  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a2, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a2);
  v14 = a4 + *(int *)(type metadata accessor for TransformedShape(0, a2, a3, v13) + 36);
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v14 = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 16) = v15;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v14 + 32) = result;
  return result;
}

void specialized RotatedShape.animatableData.setter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  type metadata accessor for AnimatablePair();
}

float64x2_t sub_235179C6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t result;

  AnimatablePair.subscript.getter(v6, v8 - 112, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v5, v4);
  AnimatablePair.subscript.getter(v6, v8 - 112, a1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  *(double *)(v1 + *(int *)(v2 + 36)) = *(double *)(v8 - 112) * 0.0078125;
  result = vmulq_f64(*(float64x2_t *)(v8 - 104), (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)(v1 + *(int *)(v2 + 40)) = result;
  return result;
}

void specialized ScaledShape.animatableData.setter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  type metadata accessor for AnimatablePair();
}

float64x2_t sub_235179DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v10;
  float64x2_t result;

  AnimatablePair.subscript.getter(v6, v8 - 112, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v5, v4);
  AnimatablePair.subscript.getter(v6, v8 - 112, a1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  v10 = *(float64x2_t *)(v8 - 96);
  *(_OWORD *)(v1 + *(int *)(v2 + 36)) = *(_OWORD *)(v8 - 112);
  result = vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)(v1 + *(int *)(v2 + 40)) = result;
  return result;
}

void specialized OffsetShape.animatableData.setter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_235179F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;

  AnimatablePair.subscript.getter(v5, v6 - 128, a1);
  v7 = *(_QWORD *)(v6 - 128);
  v8 = *(_QWORD *)(v6 - 120);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v4, v3);
  v10 = (_QWORD *)(v1 + *(int *)(v2 + 36));
  *v10 = v7;
  v10[1] = v8;
  return result;
}

uint64_t type metadata accessor for ScaledShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScaledShape);
}

uint64_t type metadata accessor for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RotatedShape);
}

uint64_t type metadata accessor for TransformedShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransformedShape);
}

uint64_t instantiation function for generic protocol witness table for OffsetShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for OffsetShape<A>, (uint64_t)&protocol conformance descriptor for OffsetShape<A>);
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> OffsetShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> OffsetShape<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> OffsetShape<A>);
}

uint64_t instantiation function for generic protocol witness table for <> OffsetShape<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for OffsetShape<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ScaledShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for ScaledShape<A>, (uint64_t)&protocol conformance descriptor for ScaledShape<A>);
}

uint64_t instantiation function for generic protocol witness table for RotatedShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for RotatedShape<A>, (uint64_t)&protocol conformance descriptor for RotatedShape<A>);
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> RotatedShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> OffsetShape<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> RotatedShape<A>);
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> OffsetShape<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x23B7C9C04](a4, a1, &AssociatedConformanceWitness);
}

uint64_t instantiation function for generic protocol witness table for <> RotatedShape<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RotatedShape<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TransformedShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for TransformedShape<A>, (uint64_t)&protocol conformance descriptor for TransformedShape<A>);
}

uint64_t sub_23517A0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for OffsetShape, (uint64_t (*)(uint64_t))OffsetShape.animatableData.getter);
}

uint64_t sub_23517A108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for OffsetShape, (uint64_t (*)(uint64_t, uint64_t))specialized OffsetShape.animatableData.setter);
}

uint64_t sub_23517A11C()
{
  return 16;
}

__n128 sub_23517A128(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23517A134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for ScaledShape, (uint64_t (*)(uint64_t))ScaledShape.animatableData.getter);
}

uint64_t sub_23517A148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for ScaledShape, (uint64_t (*)(uint64_t, uint64_t))specialized ScaledShape.animatableData.setter);
}

uint64_t sub_23517A15C()
{
  return 16;
}

__n128 sub_23517A168(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23517A174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for RotatedShape, (uint64_t (*)(uint64_t))RotatedShape.animatableData.getter);
}

uint64_t sub_23517A188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for RotatedShape, (uint64_t (*)(uint64_t, uint64_t))specialized RotatedShape.animatableData.setter);
}

uint64_t sub_23517A19C()
{
  return 16;
}

__n128 sub_23517A1A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23517A1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TransformedShape, TransformedShape.animatableData.getter);
}

uint64_t sub_23517A1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TransformedShape, specialized RendererVisualEffect.animatableData.setter);
}

uint64_t keypath_setTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a5(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return a6(a1, v8);
}

uint64_t sub_23517A224()
{
  return 16;
}

__n128 sub_23517A230(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for OffsetShape()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t getEnumTagSinglePayload for OffsetShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23517A2B8 + 4 * byte_2352D2A80[v8]))();
}

void storeEnumTagSinglePayload for OffsetShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23517A3F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23517A400(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23517A408);
}

void sub_23517A424()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23517A42C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23517A434(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23517A43CLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for ScaledShape()
{
  return type metadata completion function for ScaledShape();
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScaledShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23517A4D8 + 4 * byte_2352D2A8F[v8]))();
}

void storeEnumTagSinglePayload for ScaledShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23517A620()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23517A628(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23517A630);
}

void sub_23517A64C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23517A654()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23517A65C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23517A664);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for RotatedShape()
{
  return type metadata completion function for ScaledShape();
}

uint64_t *initializeBufferWithCopyOfBuffer for RotatedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t initializeWithTake for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for RotatedShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23517AA08 + 4 * byte_2352D2A9E[v8]))();
}

void storeEnumTagSinglePayload for RotatedShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23517AB50()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23517AB58(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23517AB60);
}

void sub_23517AB7C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23517AB84()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23517AB8C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23517AB94);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for TransformedShape()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t *initializeBufferWithCopyOfBuffer for TransformedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v10[1];
    v11 = v10[2];
    v13 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v10;
    v13[1] = v12;
    v13[2] = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for TransformedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8[1];
  v9 = v8[2];
  *v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  return a1;
}

uint64_t assignWithCopy for TransformedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v7[4] = v8[4];
  v7[5] = v8[5];
  return a1;
}

uint64_t assignWithTake for TransformedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v7[4] = v8[4];
  v7[5] = v8[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformedShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23517AE4C + 4 * byte_2352D2AAD[v8]))();
}

void storeEnumTagSinglePayload for TransformedShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23517AF8C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23517AF94(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23517AF9CLL);
}

void sub_23517AFB8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23517AFC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23517AFC8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23517AFD0);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t _ColorMultiplyEffect.color.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_ColorMultiplyEffect.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ColorMultiplyEffect.resolve(in:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  __int128 v7;

  v7 = *a1;
  *(float *)a3 = (*(float (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v7);
  *(_DWORD *)(a3 + 4) = v4;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v6;
}

uint64_t static _ColorMultiplyEffect._requiresMainThread.getter()
{
  return 0;
}

uint64_t _ColorMultiplyEffect._requiresMainThread.getter()
{
  return 0;
}

float _ColorMultiplyEffect._Resolved.animatableData.getter()
{
  uint64_t v0;
  float v1;
  float v2;
  unsigned __int32 v3;
  float v4;
  int8x16_t v5;
  int8x16_t v6;
  float v8;

  v1 = *(float *)v0;
  v2 = *(float *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(float *)(v0 + 12);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    *(float *)v5.i32 = v1;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v8, v5, v2, v3, v4, v6);
    v1 = v8;
  }
  return v1 * 128.0;
}

void _ColorMultiplyEffect._Resolved.animatableData.setter(float a1, float a2, float a3, float a4)
{
  float *v4;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16[4];
  char v17;

  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  v9 = a1 * 0.0078125;
  v10 = a2 * 0.0078125;
  v11 = a3 * 0.0078125;
  v12 = a4 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v17 = 2;
    v16[0] = v9;
    v16[1] = v10;
    v16[2] = v11;
    v16[3] = v12;
    v9 = ResolvedGradient.ColorSpace.convertOut(_:)(v16);
    v10 = v13;
    v11 = v14;
    v12 = v15;
  }
  *v4 = v9;
  v4[1] = v10;
  v4[2] = v11;
  v4[3] = v12;
}

void (*_ColorMultiplyEffect._Resolved.animatableData.modify(float32x4_t **a1))(float32x4_t **a1, char a2)
{
  int8x16_t *v1;
  float32x4_t *v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v8;
  float32x4_t v9;

  v3 = (float32x4_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].i64[1] = (uint64_t)v1;
  v8 = *(float32x4_t *)v1;
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, (int8x16_t)v8, v8.f32[1], v8.u32[2], v8.f32[3], v4);
    v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  v3[2] = vmulq_f32(v5, v6);
  return Color.Resolved.animatableData.modify;
}

double _ColorMultiplyEffect._Resolved.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = *v1;
  v3 = v1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_DWORD *)(v5 + 128) = 0;
  *(_BYTE *)(v5 + 132) = 5;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_23517B3B4()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMultiplyEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = *v1;
  v3 = v1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_DWORD *)(v5 + 128) = 0;
  *(_BYTE *)(v5 + 132) = 5;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

void protocol witness for Animatable.animatableData.getter in conformance _ColorMultiplyEffect._Resolved(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;

  *(float *)a1 = _ColorMultiplyEffect._Resolved.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void protocol witness for Animatable.animatableData.setter in conformance _ColorMultiplyEffect._Resolved(float *a1)
{
  _ColorMultiplyEffect._Resolved.animatableData.setter(*a1, a1[1], a1[2], a1[3]);
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ColorMultiplyEffect._Resolved(float32x4_t ***a1))(_QWORD *a1)
{
  float32x4_t **v2;

  v2 = (float32x4_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float32x4_t *)_ColorMultiplyEffect._Resolved.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t static _ColorMultiplyEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a2) & 1;
}

uint64_t View.colorMultiply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for _ColorMultiplyEffect, a3);
}

unint64_t instantiation function for generic protocol witness table for _ColorMultiplyEffect._Resolved(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in _ColorMultiplyEffect()
{
  return &protocol witness table for _ColorMultiplyEffect._Resolved;
}

void sub_23517B590(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;

  *(float *)a1 = _ColorMultiplyEffect._Resolved.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_23517B5CC(float *a1)
{
  _ColorMultiplyEffect._Resolved.animatableData.setter(*a1, a1[1], a1[2], a1[3]);
}

ValueMetadata *type metadata accessor for _ColorMultiplyEffect()
{
  return &type metadata for _ColorMultiplyEffect;
}

ValueMetadata *type metadata accessor for _ColorMultiplyEffect._Resolved()
{
  return &type metadata for _ColorMultiplyEffect._Resolved;
}

uint64_t sub_23517B614(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _ColorMultiplyEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _ColorMultiplyEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void specialized PreferenceKeys.add<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v2 = v1;
  v3 = *(_QWORD **)v0;
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v4)
  {
    v5 = v3 + 4;
    v6 = *(_QWORD *)(*(_QWORD *)v0 + 16);
    while (*v5 != v1)
    {
      v5 += 2;
      if (!--v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 1, v3);
    v8 = v3[2];
    v7 = v3[3];
    if (v8 >= v7 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
    v3[2] = v8 + 1;
    v9 = &v3[2 * v8];
    v9[4] = v2;
    v9[5] = &protocol witness table for _AnyPreferenceKey<A>;
    *(_QWORD *)v0 = v3;
  }
}

uint64_t Canvas.symbols.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Canvas.symbols.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Canvas.symbols.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for Canvas.renderer : <A>Canvas<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)(uint64_t a1, double *a2)@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for Canvas(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4)+ 36));
  v8 = *v6;
  v7 = v6[1];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  *a5 = partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @unowned CGSize) -> ();
  a5[1] = (uint64_t (*)(uint64_t, double *))v9;
  return swift_retain();
}

uint64_t key path setter for Canvas.renderer : <A>Canvas<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t, double, double);
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  v11 = (uint64_t (**)(uint64_t, double, double))(a2
                                                         + *(int *)(type metadata accessor for Canvas(0, v5, v6, v10)
                                                                  + 36));
  swift_retain();
  result = swift_release();
  *v11 = partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @in_guaranteed CGSize) -> (@out ());
  v11[1] = (uint64_t (*)(uint64_t, double, double))v9;
  return result;
}

uint64_t Canvas.renderer.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t Canvas.renderer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Canvas.renderer.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Canvas.preservesMetadata.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t Canvas.preservesMetadata.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*Canvas.preservesMetadata.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Canvas.isOpaque.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 1) & 1;
}

uint64_t Canvas.isOpaque.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if ((result & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFFD | v3;
  return result;
}

uint64_t (*Canvas.isOpaque.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = (*(_BYTE *)(v2 + *(int *)(a2 + 40) + 12) & 2) != 0;
  return Canvas.isOpaque.modify;
}

uint64_t Canvas.isOpaque.modify(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(result + 16))
    v2 = 2;
  else
    v2 = 0;
  v1 = *(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t Canvas.colorMode.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 40));
  return result;
}

_BYTE *Canvas.colorMode.setter(_BYTE *result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 40)) = *result;
  return result;
}

uint64_t (*Canvas.colorMode.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v2 + *(int *)(a2 + 40));
  return Canvas.colorMode.modify;
}

uint64_t Canvas.colorMode.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 40)) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t Canvas.rendersAsynchronously.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 2) & 1;
}

uint64_t Canvas.rendersAsynchronously.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if ((result & 1) != 0)
    v3 = 4;
  else
    v3 = 0;
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFFB | v3;
  return result;
}

uint64_t (*Canvas.rendersAsynchronously.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = (*(_BYTE *)(v2 + *(int *)(a2 + 40) + 12) & 4) != 0;
  return Canvas.rendersAsynchronously.modify;
}

uint64_t Canvas.rendersAsynchronously.modify(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(result + 16))
    v2 = 4;
  else
    v2 = 0;
  v1 = *(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t Canvas.rendersFirstFrameAsynchronously.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 4) & 1;
}

uint64_t Canvas.rendersFirstFrameAsynchronously.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if ((result & 1) != 0)
    v3 = 16;
  else
    v3 = 0;
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t (*Canvas.rendersFirstFrameAsynchronously.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = (*(_BYTE *)(v2 + *(int *)(a2 + 40) + 12) & 0x10) != 0;
  return Canvas.rendersFirstFrameAsynchronously.modify;
}

uint64_t Canvas.rendersFirstFrameAsynchronously.modify(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(result + 16))
    v2 = 16;
  else
    v2 = 0;
  v1 = *(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t Canvas.isAccelerated.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_DWORD *)(v1 + *(int *)(a1 + 40) + 12) & 1;
}

uint64_t Canvas.isAccelerated.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFFE | result & 1;
  return result;
}

uint64_t (*Canvas.isAccelerated.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v2 + *(int *)(a2 + 40) + 12) & 1;
  return Canvas.isAccelerated.modify;
}

uint64_t Canvas.isAccelerated.modify(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFE | *(unsigned __int8 *)(result + 16);
  return result;
}

uint64_t Canvas.init(opaque:colorMode:rendersAsynchronously:renderer:symbols:)@<X0>(char a1@<W0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  char v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t *v21;

  v15 = *a2;
  v16 = (int *)type metadata accessor for Canvas(0, a7, a9, a4);
  v17 = a8 + v16[10];
  *(_BYTE *)v17 = 0;
  *(_DWORD *)(v17 + 4) = 0;
  *(_BYTE *)(v17 + 8) = 1;
  *(_DWORD *)(v17 + 12) = 160;
  *(_BYTE *)(v17 + 16) = 3;
  *(_BYTE *)(a8 + v16[11]) = 0;
  *(_BYTE *)v17 = v15;
  if ((a1 & 1) != 0)
    v18 = 167;
  else
    v18 = 165;
  if ((a1 & 1) != 0)
    v19 = 163;
  else
    v19 = 161;
  if ((a3 & 1) == 0)
    v18 = v19;
  *(_DWORD *)(v17 + 12) = v18;
  result = a6();
  v21 = (uint64_t *)(a8 + v16[9]);
  *v21 = a4;
  v21[1] = a5;
  return result;
}

uint64_t type metadata accessor for Canvas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Canvas);
}

id static Canvas._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id result;
  Swift::UInt32 v58;
  char v59;
  __int128 v60;
  int v61;
  int OffsetAttribute2;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t KeyPath;
  int v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  unsigned __int8 v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  char v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  __int128 v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  __int128 v135;
  uint64_t v136;
  unsigned __int8 v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(__int128 *, _QWORD);
  char v154[8];
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int hasDestroy;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  unsigned int v179;
  uint64_t v180;
  __int128 v181;
  Swift::UInt32 v182[3];
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  __int128 v187;
  __int128 v188;
  _OWORD v189[3];
  uint64_t v190;
  int v191;
  id v192;
  uint64_t v193;
  int v194;
  __int128 v195;
  __int128 v196;
  _OWORD v197[3];
  int v198;
  _QWORD v199[12];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  int v205;
  _DWORD v206[8];
  uint64_t v207;
  uint64_t v208;

  v178 = a5;
  v208 = *MEMORY[0x24BDAC8D0];
  v179 = *a1;
  v7 = a2[3];
  v202 = a2[2];
  v203 = v7;
  v204 = a2[4];
  v205 = *((_DWORD *)a2 + 20);
  v8 = a2[1];
  v200 = *a2;
  v201 = v8;
  v183 = MEMORY[0x24BEE4AF8];
  v9 = *MEMORY[0x24BE096C0];
  LODWORD(v184) = 0;
  HIDWORD(v184) = v9;
  v186 = DWORD2(v7);
  v185 = v7;
  v10 = v7;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v12 = *(_QWORD *)(v10 + 16);
  v180 = a4;
  *(_QWORD *)&v181 = a3;
  v177 = v10;
  if (!v12)
  {
LABEL_5:
    v16 = 0;
    goto LABEL_49;
  }
  v13 = v11;
  v14 = (_QWORD *)(v10 + 32);
  v15 = v12;
  while (*v14 != v11)
  {
    v14 += 2;
    if (!--v15)
      goto LABEL_5;
  }
  LODWORD(v166) = v9;
  v17 = v200;
  v18 = v201;
  LODWORD(v164) = DWORD2(v201);
  hasDestroy = DWORD2(v200);
  LODWORD(v168) = HIDWORD(v201);
  LODWORD(v174) = DWORD1(v202);
  LODWORD(v172) = v202;
  v19 = *((_QWORD *)&v202 + 1);
  outlined retain of _ViewInputs((uint64_t)&v200);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = specialized find<A>(_:key:)(v17);
  if (v20)
    LODWORD(v173) = *(unsigned __int8 *)(v20 + 72);
  else
    LODWORD(v173) = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  outlined release of _ViewInputs((uint64_t)&v200);
  *(_QWORD *)&v170 = v18 + 16;
  v21 = swift_beginAccess();
  v176 = v19;
  LODWORD(v187) = *(_DWORD *)(v18 + 16);
  MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)&v171 = v17;
  v175 = v18;
  v159 = type metadata accessor for Canvas.ChildEnvironment(0, (uint64_t)a3, a4, v22);
  v160 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Canvas<A>.ChildEnvironment, v159);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  v25 = _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v187, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v158, v159, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
  v165 = 0;
  LODWORD(v169) = v195;
  if (a3 == &type metadata for EmptyView)
  {
    v45 = v166;
  }
  else
  {
    v162 = &v161;
    *(_QWORD *)&v163 = v13;
    MEMORY[0x24BDAC7A8](v25);
    v159 = (uint64_t)a3;
    v160 = a4;
    LODWORD(v187) = v179;
    v27 = type metadata accessor for Canvas(255, (uint64_t)a3, a4, v26);
    type metadata accessor for _GraphValue(0, v27, v28, v29);
    v30 = v171;
    swift_retain();
    v31 = v175;
    swift_retain();
    swift_bridgeObjectRetain();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static Canvas._makeView(view:inputs:), (uint64_t)a3, &v195);
    v32 = v195;
    v33 = v31;
    if (AGSubgraphShouldRecordTree())
      AGSubgraphBeginTreeElement();
    v206[0] = v32;
    *(_QWORD *)&v187 = v30;
    DWORD2(v187) = hasDestroy;
    *(_QWORD *)&v188 = v31;
    v34 = v164;
    *((_QWORD *)&v188 + 1) = __PAIR64__(v168, v164);
    *(_QWORD *)&v189[0] = __PAIR64__(v174, v172);
    HIDWORD(v161) = v32;
    v35 = v174;
    v189[1] = 0uLL;
    v36 = v176;
    *((_QWORD *)&v189[0] + 1) = v176;
    v37 = v166;
    LODWORD(v189[2]) = v166;
    *((_QWORD *)&v189[2] + 1) = MEMORY[0x24BEE4B08];
    LOBYTE(v190) = 0;
    v38 = v33;
    v39 = v180;
    (*(void (**)(_QWORD *__return_ptr, _DWORD *, __int128 *, _QWORD, uint64_t))(v180 + 32))(v199, v206, &v187, v181, v180);
    $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(HIDWORD(v161), v181, v39);
    *(_QWORD *)&v187 = v30;
    DWORD2(v187) = hasDestroy;
    *(_QWORD *)&v188 = v38;
    *((_QWORD *)&v188 + 1) = __PAIR64__(v168, v34);
    LODWORD(v38) = (_DWORD)v172;
    *(_QWORD *)&v189[0] = __PAIR64__(v35, v172);
    v189[1] = 0uLL;
    *((_QWORD *)&v189[0] + 1) = v36;
    LODWORD(v189[2]) = v37;
    *((_QWORD *)&v189[2] + 1) = MEMORY[0x24BEE4B08];
    LOBYTE(v190) = 0;
    v40 = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v187);
    v41 = specialized static ViewGraph.current.getter();
    v197[1] = v203;
    v197[2] = v204;
    v196 = v201;
    v197[0] = v202;
    v198 = v205;
    v195 = v200;
    LODWORD(v197[2]) = *(_DWORD *)(v41 + 248);
    DWORD1(v197[2]) = v197[2];
    v207 = 0;
    memset(v206, 0, sizeof(v206));
    outlined retain of _ViewInputs((uint64_t)&v200);
    HIDWORD(v197[1]) = specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v206, (Swift::UInt)&type metadata for ViewTransform, 0);
    LODWORD(v197[0]) = v38 | 0xC;
    v42 = MEMORY[0x24BEE4AF8];
    v43 = specialized GraphHost.intern<A>(_:for:id:)(MEMORY[0x24BEE4AF8], (Swift::UInt)&type metadata for PreferenceKeys, 0);
    outlined release of LinearGradient((uint64_t)&v185);
    *(_QWORD *)&v197[1] = v42;
    DWORD2(v197[1]) = v43;
    specialized PreferenceKeys.add<A>(_:)();
    DWORD1(v197[0]) = v35 | 0x22;
    *(_QWORD *)&v168 = v41;
    hasDestroy = v40;
    LODWORD(v164) = v35 | 0x22;
    if ((_DWORD)v173)
    {
      v44 = v196;
      v13 = v163;
    }
    else
    {
      v46 = v171;
      v47 = swift_retain();
      v48 = specialized find<A>(_:key:)(v47);
      if (!v48 || *(_BYTE *)(v48 + 72) != 1)
      {
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<UsingGraphicsRenderer>, (uint64_t)&type metadata for UsingGraphicsRenderer, (uint64_t)&protocol witness table for UsingGraphicsRenderer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
        *(_BYTE *)(swift_allocObject() + 72) = 1;
        *(SwiftUI::BloomFilter *)&v195 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for UsingGraphicsRenderer, 0, v46);
      }
      swift_release();
      v49 = specialized Dictionary.init(dictionaryLiteral:)(v42);
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
      v44 = swift_allocObject();
      *(_DWORD *)(v44 + 16) = v169;
      *(_QWORD *)(v44 + 24) = v42;
      *(_OWORD *)(v44 + 32) = 0u;
      *(_OWORD *)(v44 + 48) = 0u;
      *(_OWORD *)(v44 + 64) = 0u;
      *(_WORD *)(v44 + 80) = 256;
      *(_QWORD *)(v44 + 88) = v49;
      swift_release();
      *(_QWORD *)&v196 = v44;
      v13 = v163;
      if ((v172 & 0x20) == 0)
        LODWORD(v197[0]) = v172 | 0x2C;
    }
    v50 = v195;
    v51 = *((_QWORD *)&v196 + 1);
    v52 = DWORD2(v195);
    v53 = v197[0];
    v55 = *((_QWORD *)&v197[0] + 1);
    v54 = *(_QWORD *)&v197[1];
    v163 = *(_OWORD *)((char *)&v197[1] + 8);
    v56 = *((_QWORD *)&v197[2] + 1);
    LODWORD(v172) = v198;
    result = (id)AGSubgraphGetCurrent();
    if (!result)
    {
      __break(1u);
      goto LABEL_87;
    }
    LODWORD(v187) = hasDestroy;
    *((_QWORD *)&v187 + 1) = v50;
    LODWORD(v188) = v52;
    *((_QWORD *)&v188 + 1) = v44;
    *(_QWORD *)&v189[0] = v51;
    *((_QWORD *)&v189[0] + 1) = __PAIR64__(v164, v53);
    *(_QWORD *)&v189[1] = v55;
    *((_QWORD *)&v189[1] + 1) = v54;
    v189[2] = v163;
    v190 = v56;
    v192 = result;
    v193 = MEMORY[0x24BEE4B00];
    v191 = (int)v172;
    v194 = 0;
    v172 = result;
    hasDestroy = protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CanvasSymbols.Child], (uint64_t)&type metadata for CanvasSymbols.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type CanvasSymbols and conformance CanvasSymbols();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v199);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  v58 = ++lastIdentity;
  v59 = v174;
  if ((v174 & 0x100) == 0)
    goto LABEL_23;
  outlined retain of _ViewInputs((uint64_t)&v200);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v200);
  result = (id)AGWeakAttributeGetAttribute();
  if ((_DWORD)result == (_DWORD)v166)
  {
LABEL_87:
    __break(1u);
    return result;
  }
  LODWORD(v195) = v58;
  v153 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
  _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v195);
  v153(&v187, 0);
  v59 = v174;
LABEL_23:
  v182[0] = v58;
  swift_beginAccess();
  if ((v59 & 0x20) != 0)
  {
    hasDestroy = v45;
    v176 = v200;
    v164 = v201;
    v65 = DWORD2(v200);
    v66 = DWORD2(v201);
    v174 = *((_QWORD *)&v202 + 1);
    v67 = v202;
    v68 = *((_QWORD *)&v203 + 1);
    v172 = (id)v203;
    *(_QWORD *)&v60 = v204;
    v171 = v60;
    *(_QWORD *)&v60 = *((_QWORD *)&v204 + 1);
    v168 = v60;
    v69 = v205;
    v189[0] = v202;
    v189[1] = v203;
    v189[2] = v204;
    LODWORD(v190) = v205;
    v187 = v200;
    v188 = v201;
    outlined retain of _ViewInputs((uint64_t)&v200);
    v70 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v72 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    v73 = v175;
    if ((*(_BYTE *)(v175 + 81) & 1) == 0
      && (_DWORD)v171 == *(_DWORD *)(v175 + 32)
      && (_DWORD)v168 == *(_DWORD *)(v175 + 36)
      && v72 == *(_DWORD *)(v175 + 40)
      && v65 == *(_DWORD *)(v175 + 44)
      && v70 == *(_DWORD *)(v175 + 48)
      && v66 == *(_DWORD *)(v175 + 52))
    {
      v79 = v175;
      if ((*(_BYTE *)(v175 + 64) & 1) == 0)
      {
        v166 = *(unsigned int *)(v175 + 60);
        goto LABEL_36;
      }
    }
    else
    {
      *(_QWORD *)&v187 = v176;
      DWORD2(v187) = v65;
      *(_QWORD *)&v188 = v164;
      *((_QWORD *)&v188 + 1) = __PAIR64__(v70, v66);
      *(_QWORD *)&v189[0] = v67;
      *((_QWORD *)&v189[0] + 1) = v174;
      *(_QWORD *)&v189[1] = v172;
      *((_QWORD *)&v189[1] + 1) = v68;
      *(_QWORD *)&v189[2] = v171;
      *((_QWORD *)&v189[2] + 1) = v168;
      LODWORD(v190) = v69;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v187, v72, (uint64_t)&v195);
      v74 = v196;
      v75 = LOBYTE(v197[0]);
      v76 = v197[1];
      v77 = LOBYTE(v197[0]) | ((unint64_t)DWORD1(v197[0]) << 32);
      v78 = BYTE8(v197[0]) | ((unint64_t)HIDWORD(v197[0]) << 32);
      *(_OWORD *)(v73 + 32) = v195;
      *(_OWORD *)(v73 + 48) = v74;
      *(_QWORD *)(v73 + 64) = v77;
      *(_QWORD *)(v73 + 72) = v78;
      *(_WORD *)(v73 + 80) = v76;
      v79 = v73;
      if (v75 != 1)
      {
        v166 = HIDWORD(*((_QWORD *)&v74 + 1));
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v175 = v201;
        v176 = v200;
        v80 = DWORD2(v200);
        v81 = DWORD2(v201);
        v174 = *((_QWORD *)&v202 + 1);
        v82 = v202;
        v84 = *((_QWORD *)&v203 + 1);
        v172 = (id)v203;
        *(_QWORD *)&v83 = v204;
        v171 = v83;
        *(_QWORD *)&v83 = *((_QWORD *)&v204 + 1);
        v168 = v83;
        v189[0] = v202;
        v189[1] = v203;
        v189[2] = v204;
        LODWORD(v164) = v205;
        LODWORD(v190) = v205;
        v187 = v200;
        v188 = v201;
        outlined retain of _ViewInputs((uint64_t)&v200);
        v85 = _ViewInputs.geometryTransaction()();
        v86 = swift_getKeyPath();
        v87 = specialized CachedEnvironment.attribute<A>(keyPath:)(v86);
        swift_release();
        v88 = v79;
        if ((*(_BYTE *)(v79 + 81) & 1) == 0
          && (_DWORD)v171 == *(_DWORD *)(v79 + 32)
          && (_DWORD)v168 == *(_DWORD *)(v79 + 36)
          && v87 == *(_DWORD *)(v79 + 40)
          && v80 == *(_DWORD *)(v79 + 44)
          && v85 == *(_DWORD *)(v79 + 48)
          && v81 == *(_DWORD *)(v79 + 52))
        {
          v93 = *(_BYTE *)(v79 + 80);
          v63 = v180;
          v64 = v181;
          v45 = hasDestroy;
          v61 = v166;
          if ((v93 & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v88 + 76);
            goto LABEL_47;
          }
        }
        else
        {
          *(_QWORD *)&v187 = v176;
          DWORD2(v187) = v80;
          *(_QWORD *)&v188 = v175;
          *((_QWORD *)&v188 + 1) = __PAIR64__(v85, v81);
          *(_QWORD *)&v189[0] = v82;
          *((_QWORD *)&v189[0] + 1) = v174;
          *(_QWORD *)&v189[1] = v172;
          *((_QWORD *)&v189[1] + 1) = v84;
          *(_QWORD *)&v189[2] = v171;
          *((_QWORD *)&v189[2] + 1) = v168;
          LODWORD(v190) = v164;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v187, v87, (uint64_t)&v195);
          OffsetAttribute2 = HIDWORD(v197[0]);
          v89 = LOBYTE(v197[1]);
          v90 = LOBYTE(v197[0]) | ((unint64_t)DWORD1(v197[0]) << 32);
          v91 = BYTE8(v197[0]) | ((unint64_t)HIDWORD(v197[0]) << 32);
          v92 = v196;
          *(_OWORD *)(v79 + 32) = v195;
          *(_OWORD *)(v79 + 48) = v92;
          *(_QWORD *)(v79 + 64) = v90;
          *(_QWORD *)(v79 + 72) = v91;
          *(_WORD *)(v79 + 80) = v89;
          v63 = v180;
          v64 = v181;
          v45 = hasDestroy;
          v61 = v166;
          if (v89 != 1)
            goto LABEL_47;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v88 + 76) = OffsetAttribute2;
        *(_BYTE *)(v88 + 80) = 0;
LABEL_47:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_48;
      }
    }
    v166 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v79 + 60) = v166;
    *(_BYTE *)(v79 + 64) = 0;
    goto LABEL_36;
  }
  v61 = v204;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v63 = v180;
  v64 = v181;
LABEL_48:
  swift_endAccess();
  v94 = *MEMORY[0x24BDBF028];
  v95 = *(double *)(MEMORY[0x24BDBF028] + 8);
  v96 = *(double *)(MEMORY[0x24BDBF028] + 16);
  v97 = *(double *)(MEMORY[0x24BDBF028] + 24);
  v155 = v64;
  v98 = CanvasDisplayList.init(identity:view:position:containerPosition:size:transform:environment:symbols:lastBounds:isFlattened:)(v182, v179, v61, SDWORD1(v204), OffsetAttribute2, SHIDWORD(v203), v169, v45, (uint64_t)&v187, v94, v95, v96, v97, v173);
  v195 = v187;
  v196 = v188;
  *(_QWORD *)&v197[0] = *(_QWORD *)&v189[0];
  *(_OWORD *)((char *)v197 + 8) = *(_OWORD *)((char *)v189 + 8);
  *(_OWORD *)((char *)&v197[1] + 8) = *(_OWORD *)((char *)&v189[1] + 8);
  BYTE8(v197[2]) = BYTE8(v189[2]);
  MEMORY[0x24BDAC7A8](v98);
  v156 = type metadata accessor for CanvasDisplayList(0, v64, v63, v99);
  v157 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CanvasDisplayList<A>, v156);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  v16 = v165;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v195, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v154, v156, MEMORY[0x24BEE4078], v100, MEMORY[0x24BEE40A8], v101);
  swift_release();
  LOBYTE(v187) = 0;
  PreferencesOutputs.subscript.setter(LODWORD(v199[0]), v13, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v102);
LABEL_49:
  v103 = v201;
  v104 = BYTE4(v202);
  swift_beginAccess();
  v174 = v16;
  if ((v104 & 0x20) != 0)
  {
    v111 = DWORD2(v200);
    v112 = DWORD2(v201);
    v113 = v202;
    v172 = (id)v201;
    v173 = *((_QWORD *)&v202 + 1);
    v175 = v200;
    v114 = *((_QWORD *)&v203 + 1);
    v176 = v203;
    *(_QWORD *)&v105 = *((_QWORD *)&v204 + 1);
    *(_QWORD *)&v106 = v204;
    v170 = v105;
    v171 = v106;
    v115 = v205;
    v189[0] = v202;
    v189[1] = v203;
    v189[2] = v204;
    LODWORD(v190) = v205;
    v187 = v200;
    v188 = v201;
    outlined retain of _ViewInputs((uint64_t)&v200);
    v116 = _ViewInputs.geometryTransaction()();
    v117 = swift_getKeyPath();
    v118 = specialized CachedEnvironment.attribute<A>(keyPath:)(v117);
    swift_release();
    if ((*(_BYTE *)(v103 + 81) & 1) == 0
      && (_DWORD)v171 == *(_DWORD *)(v103 + 32)
      && (_DWORD)v170 == *(_DWORD *)(v103 + 36)
      && v118 == *(_DWORD *)(v103 + 40)
      && v111 == *(_DWORD *)(v103 + 44)
      && v116 == *(_DWORD *)(v103 + 48)
      && v112 == *(_DWORD *)(v103 + 52))
    {
      if ((*(_BYTE *)(v103 + 72) & 1) == 0)
      {
        v119 = *(unsigned int *)(v103 + 68);
LABEL_62:
        v173 = v119;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        *(_QWORD *)&v171 = v200;
        v172 = (id)v201;
        v125 = DWORD2(v200);
        v126 = DWORD2(v201);
        v127 = v202;
        v175 = v203;
        v176 = *((_QWORD *)&v202 + 1);
        v128 = *((_QWORD *)&v203 + 1);
        *(_QWORD *)&v129 = *((_QWORD *)&v204 + 1);
        *(_QWORD *)&v130 = v204;
        v169 = v129;
        v170 = v130;
        v131 = v205;
        v189[0] = v202;
        v189[1] = v203;
        v189[2] = v204;
        LODWORD(v190) = v205;
        v187 = v200;
        v188 = v201;
        outlined retain of _ViewInputs((uint64_t)&v200);
        v132 = _ViewInputs.geometryTransaction()();
        v133 = swift_getKeyPath();
        v134 = specialized CachedEnvironment.attribute<A>(keyPath:)(v133);
        swift_release();
        if ((*(_BYTE *)(v103 + 81) & 1) == 0
          && (_DWORD)v170 == *(_DWORD *)(v103 + 32)
          && (_DWORD)v169 == *(_DWORD *)(v103 + 36)
          && v134 == *(_DWORD *)(v103 + 40)
          && v125 == *(_DWORD *)(v103 + 44)
          && v132 == *(_DWORD *)(v103 + 48)
          && v126 == *(_DWORD *)(v103 + 52))
        {
          v109 = v178;
          v110 = v181;
          if ((*(_BYTE *)(v103 + 64) & 1) == 0)
          {
            LODWORD(v108) = *(_DWORD *)(v103 + 60);
LABEL_74:
            v107 = v173;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_75;
          }
        }
        else
        {
          *(_QWORD *)&v187 = v171;
          DWORD2(v187) = v125;
          *(_QWORD *)&v188 = v172;
          *((_QWORD *)&v188 + 1) = __PAIR64__(v132, v126);
          *(_QWORD *)&v189[0] = v127;
          *((_QWORD *)&v189[0] + 1) = v176;
          *(_QWORD *)&v189[1] = v175;
          *((_QWORD *)&v189[1] + 1) = v128;
          *(_QWORD *)&v189[2] = v170;
          *((_QWORD *)&v189[2] + 1) = v169;
          LODWORD(v190) = v131;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v187, v134, (uint64_t)&v195);
          v135 = v196;
          v136 = LOBYTE(v197[0]);
          v137 = v197[1];
          v138 = LOBYTE(v197[0]) | ((unint64_t)DWORD1(v197[0]) << 32);
          v139 = BYTE8(v197[0]) | ((unint64_t)HIDWORD(v197[0]) << 32);
          *(_OWORD *)(v103 + 32) = v195;
          *(_OWORD *)(v103 + 48) = v135;
          *(_QWORD *)(v103 + 64) = v138;
          *(_QWORD *)(v103 + 72) = v139;
          *(_WORD *)(v103 + 80) = v137;
          v109 = v178;
          v110 = v181;
          if (v136 != 1)
          {
            v108 = HIDWORD(*((_QWORD *)&v135 + 1));
            goto LABEL_74;
          }
        }
        LODWORD(v108) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v103 + 60) = v108;
        *(_BYTE *)(v103 + 64) = 0;
        goto LABEL_74;
      }
    }
    else
    {
      *(_QWORD *)&v187 = v175;
      DWORD2(v187) = v111;
      *(_QWORD *)&v188 = v172;
      *((_QWORD *)&v188 + 1) = __PAIR64__(v116, v112);
      *(_QWORD *)&v189[0] = v113;
      *((_QWORD *)&v189[0] + 1) = v173;
      *(_QWORD *)&v189[1] = v176;
      *((_QWORD *)&v189[1] + 1) = v114;
      *(_QWORD *)&v189[2] = v171;
      *((_QWORD *)&v189[2] + 1) = v170;
      LODWORD(v190) = v115;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v187, v118, (uint64_t)&v195);
      v119 = DWORD1(v197[0]);
      v120 = BYTE8(v197[0]);
      v121 = v197[1];
      v122 = LOBYTE(v197[0]) | ((unint64_t)DWORD1(v197[0]) << 32);
      v123 = BYTE8(v197[0]) | ((unint64_t)HIDWORD(v197[0]) << 32);
      v124 = v196;
      *(_OWORD *)(v103 + 32) = v195;
      *(_OWORD *)(v103 + 48) = v124;
      *(_QWORD *)(v103 + 64) = v122;
      *(_QWORD *)(v103 + 72) = v123;
      *(_WORD *)(v103 + 80) = v121;
      if (v120 != 1)
        goto LABEL_62;
    }
    v119 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v103 + 68) = v119;
    *(_BYTE *)(v103 + 72) = 0;
    goto LABEL_62;
  }
  v107 = DWORD2(v204);
  LODWORD(v108) = v204;
  v109 = v178;
  v110 = v181;
LABEL_75:
  swift_endAccess();
  v140 = HIDWORD(v203);
  v142 = type metadata accessor for Canvas(0, v110, v180, v141);
  LeafResponderFilter.init(data:size:position:transform:)(v179, v107, v108, v140, (uint64_t)&v187);
  v181 = v187;
  v143 = v188;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v12)
  {
    v145 = v144;
    v146 = (_QWORD *)(v177 + 32);
    while (*v146 != v144)
    {
      v146 += 2;
      if (!--v12)
        goto LABEL_81;
    }
    v187 = v181;
    *(_QWORD *)&v188 = v143;
    MEMORY[0x24BDAC7A8](v144);
    v148 = type metadata accessor for LeafResponderFilter(0, v142, (uint64_t)&protocol witness table for Canvas<A>, v147);
    v156 = v148;
    v157 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafResponderFilter<A>, v148);
    outlined retain of LinearGradient((uint64_t)&v185);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
    v150 = v149;
    swift_retain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v187, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v154, v148, MEMORY[0x24BEE4078], v150, MEMORY[0x24BEE40A8], v151);
    swift_release();
    LOBYTE(v187) = 0;
    PreferencesOutputs.subscript.setter(v195, v145, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v152);
    outlined release of LinearGradient((uint64_t)&v185);
  }
LABEL_81:
  result = (id)swift_release();
  *v109 = v183;
  v109[1] = v184;
  return result;
}

uint64_t closure #1 in static Canvas._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for Canvas(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t CanvasDisplayList.init(identity:view:position:containerPosition:size:transform:environment:symbols:lastBounds:isFlattened:)@<X0>(_DWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, char a14)
{
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)a9 = *a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  *(_DWORD *)(a9 + 28) = a8;
  type metadata accessor for PropertyList.Tracker();
  v19 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  v21 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = v21;
  v22 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 40) = v21;
  *(_QWORD *)(result + 48) = v22;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(v19 + 16) = result;
  *(_QWORD *)(a9 + 32) = v19;
  *(double *)(a9 + 40) = a10;
  *(double *)(a9 + 48) = a11;
  *(double *)(a9 + 56) = a12;
  *(double *)(a9 + 64) = a13;
  *(_BYTE *)(a9 + 72) = a14;
  return result;
}

uint64_t Canvas.ChildEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  EnvironmentFetch.environment.getter(a1);
  v2 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, 8uLL, 0);
  swift_release();
  if (a1[1])
  {
    v3 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance Canvas<A>.ChildEnvironment@<X0>(uint64_t *a1@<X8>)
{
  return Canvas.ChildEnvironment.value.getter(a1);
}

id protocol witness for static View._makeView(view:inputs:) in conformance Canvas<A>@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return static Canvas._makeView(view:inputs:)(a1, a2, *(ValueMetadata **)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t Canvas.allowsPackedDrawable.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 5) & 1;
}

uint64_t Canvas.allowsPackedDrawable.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if ((result & 1) != 0)
    v3 = 32;
  else
    v3 = 0;
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t (*Canvas.allowsPackedDrawable.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = (*(_BYTE *)(v2 + *(int *)(a2 + 40) + 12) & 0x20) != 0;
  return Canvas.allowsPackedDrawable.modify;
}

uint64_t Canvas.allowsPackedDrawable.modify(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(result + 16))
    v2 = 32;
  else
    v2 = 0;
  v1 = *(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t Canvas<>.init(opaque:colorMode:rendersAsynchronously:renderer:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  int v7;
  int v8;

  v6 = *a2;
  if ((result & 1) != 0)
    v7 = 163;
  else
    v7 = 161;
  *(_QWORD *)a6 = a4;
  *(_QWORD *)(a6 + 8) = a5;
  *(_BYTE *)(a6 + 16) = v6;
  if ((a3 & 1) != 0)
    v8 = v7 | 4;
  else
    v8 = v7;
  *(_DWORD *)(a6 + 20) = 0;
  *(_BYTE *)(a6 + 24) = 1;
  *(_DWORD *)(a6 + 28) = v8;
  *(_WORD *)(a6 + 32) = 3;
  return result;
}

uint64_t CanvasDisplayList.symbols.getter()
{
  uint64_t v0;

  if (*(_DWORD *)(v0 + 28) == *MEMORY[0x24BE096C0])
    return 0;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CanvasSymbols.Child], (uint64_t)&type metadata for CanvasSymbols.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t CanvasDisplayList.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  double *Value;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float64x2_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  char v42;
  CGFloat x;
  CGFloat y;
  double v45;
  CGFloat height;
  CGPoint v47;
  __int128 v48;
  uint64_t v49;
  CGFloat Width;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  void (*v60)(void);
  char *v61;
  uint64_t (*v62)(char *, uint64_t);
  double *v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t);
  char *v69;
  uint64_t (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  CGFloat v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t);
  uint64_t (*v77)(char *, uint64_t);
  char v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t TupleTypeMetadata;
  uint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  int v92;
  double v93;
  ValueMetadata *v94;
  int v95;
  uint64_t OutputValue;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  char *v106;
  uint64_t (*v107)(char *, uint64_t);
  uint64_t v108;
  char *v109;
  char v110;
  int v111;
  char v112;
  double v113;
  uint64_t v114;
  CGFloat v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  double v123;
  double v124;
  uint64_t v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  id v131;
  char *v132;
  uint64_t State;
  char *v134;
  char v135;
  __int128 v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  unint64_t StatusReg;
  uint64_t v144;
  char v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  void (*v149)(char *, uint64_t, uint64_t);
  char *v150;
  char *v151;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t, uint64_t);
  char v161;
  id v162;
  CGFloat v163;
  CGFloat v164;
  CGFloat v165;
  CGFloat v166;
  CGFloat v167;
  BOOL IsEmpty;
  CGFloat MinX;
  double v170;
  double v171;
  double v172;
  CGFloat MaxY;
  double v174;
  double v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  CGFloat v181;
  int v182;
  char v183;
  int v184;
  char v185;
  int v186;
  char v187;
  __int16 v188;
  uint64_t v189;
  double v190;
  double v191;
  uint64_t v192;
  uint64_t result;
  uint64_t v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  CGFloat v201;
  CGFloat v202;
  CGFloat v203;
  uint64_t (*v204)(char *, uint64_t);
  CGFloat v205;
  uint64_t v206;
  char *v207;
  void *v208;
  char *v209;
  double v210;
  char *v211;
  uint64_t v212;
  CGFloat v213;
  char *v214;
  float64x2_t v215;
  double v216;
  double v217;
  uint64_t v218;
  CGFloat v219;
  uint64_t v220;
  ValueMetadata *v221;
  uint64_t TupleTypeMetadata2;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char v226;
  _BYTE v227[24];
  float64x2_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  CGPoint v234;
  __int128 v235;
  char v236;
  uint64_t v237;
  CGPoint v238;
  CGRect v239;
  CGRect v240;
  CGRect v241;
  CGRect v242;
  CGRect v243;
  CGRect v244;
  CGRect v245;
  CGRect v246;
  CGRect v247;
  CGRect v248;
  CGRect v249;
  CGRect v250;
  CGRect v251;
  CGRect v252;

  v237 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for ObservationTracking._AccessList();
  v4 = *(double *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v195 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v207 = (char *)&v195 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v195 - v10;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v206 = (uint64_t)&v195 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v209 = (char *)&v195 - v16;
  v17 = *(ValueMetadata **)(a1 + 16);
  v18 = *(uint64_t *)(a1 + 24);
  v208 = (void *)a1;
  v221 = v17;
  v216 = *(double *)&v18;
  v223 = type metadata accessor for Canvas(255, (uint64_t)v17, v18, v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v218 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v21 = (char *)&v195 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v214 = (char *)&v195 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v211 = (char *)&v195 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v224 = (char *)&v195 - v27;
  LODWORD(v217) = *(_DWORD *)(v1 + 24);
  v204 = *(uint64_t (**)(char *, uint64_t))(v1 + 32);
  v28 = *(double *)(v1 + 40);
  v29 = *(double *)(v1 + 48);
  v31 = *(double *)(v1 + 56);
  v30 = *(double *)(v1 + 64);
  type metadata accessor for CGSize(0);
  Value = (double *)AGGraphGetValue();
  v34 = v33;
  v35 = *Value;
  v219 = Value[1];
  v36 = (float64x2_t *)AGGraphGetValue();
  v38 = v37;
  v215 = *v36;
  v39 = AGGraphGetValue();
  v41 = *(double *)v39;
  v212 = v3;
  if ((v38 & 1) == 0 && (v34 & 1) == 0 && (v40 & 1) == 0)
  {
    swift_retain();
LABEL_5:
    v42 = AGGraphCurrentAttributeWasModified();
    goto LABEL_15;
  }
  v213 = v30;
  v203 = v31;
  v205 = v29;
  v210 = v28;
  v234 = (CGPoint)0;
  v235 = 0u;
  v233 = 0u;
  v231 = 0u;
  v232 = 0u;
  v230 = 0u;
  v229 = 0u;
  v236 = 1;
  *(double *)v227 = v41;
  *(float64x2_t *)&v227[8] = v215;
  v228 = vsubq_f64(*(float64x2_t *)(v39 + 24), vsubq_f64(v215, *(float64x2_t *)(v39 + 8)));
  swift_retain();
  specialized ViewTransform.forEach(inverted:_:)(0, (uint64_t)v227, (uint64_t)&v229);
  x = 0.0;
  if ((v236 & 1) != 0)
  {
    y = 0.0;
    v45 = v35;
    height = v219;
  }
  else
  {
    v47 = v234;
    v48 = v235;
    v238 = v234;
    v49 = *((_QWORD *)&v235 + 1);
    v202 = *(double *)&v235;
    Width = CGRectGetWidth(*(CGRect *)(&v48 - 1));
    v45 = v35;
    if (Width + Width <= v35
      || (v239.origin = v47,
          v239.size.width = v202,
          v239.size.height = *((CGFloat *)&v48 + 1),
          v51 = CGRectGetHeight(v239),
          height = v219,
          y = 0.0,
          v51 + v51 <= v219))
    {
      v201 = floor(v47.x * 0.0078125) * 128.0;
      v240.origin = v47;
      v52 = v202;
      v240.size.width = v202;
      v240.size.height = *((CGFloat *)&v48 + 1);
      v53 = CGRectGetWidth(v240) + 128.0;
      v241.origin = v47;
      v241.size.width = v52;
      v241.size.height = *((CGFloat *)&v48 + 1);
      v251.size.height = CGRectGetHeight(v241) + 128.0;
      v242.origin.x = 0.0;
      v242.origin.y = 0.0;
      v242.size.width = v35;
      v242.size.height = v219;
      v251.origin.x = v201;
      v251.origin.y = floor(v47.y * 0.0078125) * 128.0;
      v251.size.width = v53;
      v243 = CGRectIntersection(v242, v251);
      x = v243.origin.x;
      y = v243.origin.y;
      v35 = v243.size.width;
      height = v243.size.height;
    }
  }
  v244.origin.x = x;
  v244.origin.y = y;
  v244.size.width = v35;
  v244.size.height = height;
  v28 = v210;
  v252.origin.x = v210;
  v29 = v205;
  v252.origin.y = v205;
  v31 = v203;
  v252.size.width = v203;
  v252.size.height = v213;
  if (CGRectEqualToRect(v244, v252))
  {
    v35 = v45;
    v30 = v213;
    if ((v34 & 1) == 0)
      goto LABEL_5;
    v42 = 1;
  }
  else
  {
    *(CGFloat *)(v1 + 40) = x;
    *(CGFloat *)(v1 + 48) = y;
    v42 = 1;
    v28 = x;
    v29 = y;
    v31 = v35;
    v30 = height;
    *(double *)(v1 + 56) = v35;
    *(CGFloat *)(v1 + 64) = height;
    v35 = v45;
  }
LABEL_15:
  v226 = v42;
  v245.origin.x = v28;
  v245.origin.y = v29;
  v245.size.width = v31;
  v245.size.height = v30;
  if (CGRectIsEmpty(v245))
  {
    *(_QWORD *)&v229 = MEMORY[0x24BEE4AF8];
    WORD4(v229) = 0;
    BYTE10(v229) = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  v197 = v38;
  v199 = v34;
  v220 = v1;
  v200 = v11;
  v203 = v4;
  v201 = *(double *)&v21;
  v205 = v41;
  v54 = TupleTypeMetadata2;
  v55 = *(int *)(TupleTypeMetadata2 + 48);
  v56 = v223;
  v57 = AGGraphGetValue();
  v59 = v58;
  v202 = *(double *)(v56 - 8);
  v60 = *(void (**)(void))(*(_QWORD *)&v202 + 16);
  v61 = v224;
  ((void (*)(char *, uint64_t, uint64_t))v60)(v224, v57, v56);
  v62 = v59 & 1;
  v61[v55] = v62;
  v63 = (double *)AGGraphGetValue();
  v196 = v64;
  v66 = *v63;
  v65 = v63[1];
  v198 = ++static DisplayList.Version.lastValue;
  v67 = *(int *)(v54 + 48);
  v68 = (uint64_t (*)(char *, uint64_t))v62;
  v69 = v211;
  v210 = *(double *)&v60;
  v60();
  v69[v67] = (char)v68;
  v213 = v65;
  v217 = v66;
  if ((v42 & 1) == 0)
  {
    v71 = v54;
    v74 = v220;
    if (v68)
    {
      v77 = *(uint64_t (**)(char *, uint64_t))(v218 + 8);
      swift_retain();
      swift_retain();
      v204 = v77;
      v72 = v77(v69, v71);
      v73 = v203;
      v75 = v212;
    }
    else
    {
      v73 = v203;
      v75 = v212;
      if ((LOBYTE(v196) & 1) == 0)
      {
        v76 = *(uint64_t (**)(char *, uint64_t))(v218 + 8);
        swift_retain();
        swift_retain();
        v204 = v76;
        v72 = v76(v69, v71);
        goto LABEL_24;
      }
      swift_retain();
      swift_retain();
      v194 = swift_retain_n();
      LODWORD(v196) = PropertyList.Tracker.hasDifferentUsedValues(_:)(v194);
      swift_release();
      swift_release();
      v204 = *(uint64_t (**)(char *, uint64_t))(v218 + 8);
      v72 = v204(v69, v54);
      if ((LOBYTE(v196) & 1) == 0)
        goto LABEL_24;
    }
    v226 = 1;
    goto LABEL_24;
  }
  v70 = *(uint64_t (**)(char *, uint64_t))(v218 + 8);
  swift_retain();
  swift_retain();
  v71 = v54;
  v204 = v70;
  v72 = v70(v69, v54);
  v73 = v203;
  v74 = v220;
  v75 = v212;
LABEL_24:
  v78 = v226;
  if ((v226 & 1) != 0 || v221 == &type metadata for EmptyView)
  {
    v211 = 0;
  }
  else
  {
    *(_OWORD *)v227 = *(_OWORD *)(v74 + 4);
    *(_QWORD *)&v227[16] = *(_QWORD *)(v74 + 20);
    MEMORY[0x24BDAC7A8](v72);
    v79 = v216;
    *(&v195 - 4) = v80;
    *((double *)&v195 - 3) = v79;
    *(&v195 - 2) = 6;
    *(&v195 - 1) = (uint64_t)&v226;
    v81 = type metadata accessor for Attribute();
    v82 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0];
    *(_QWORD *)&v229 = v81;
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Attribute<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    *((_QWORD *)&v229 + 1) = v83;
    *(_QWORD *)&v230 = v83;
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for Attribute<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, v82);
    *((_QWORD *)&v230 + 1) = v84;
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTransform>, (uint64_t)&type metadata for ViewTransform, v82);
    *(_QWORD *)&v231 = v85;
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, v82);
    *((_QWORD *)&v231 + 1) = v86;
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v227, (uint64_t)partial apply for closure #1 in CanvasDisplayList.updateValue(), (uint64_t)(&v195 - 6), TupleTypeMetadata, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v88);
    v211 = 0;
    v71 = TupleTypeMetadata2;
    v78 = v226;
  }
  v90 = *(double *)(v74 + 56);
  v89 = *(double *)(v74 + 64);
  v91 = AGGraphGetValue();
  v93 = *(double *)v91;
  v94 = *(ValueMetadata **)(v91 + 8);
  if ((v78 & 1) == 0)
  {
    v95 = v92;
    OutputValue = AGGraphGetOutputValue();
    if (OutputValue)
    {
      if (((v197 | v95) & 1) == 0
        || (v97 = *(_QWORD *)OutputValue, !*(_QWORD *)(*(_QWORD *)OutputValue + 16)))
      {
        swift_release();
        swift_release();
        v204(v224, v71);
        return swift_release();
      }
      v90 = *(double *)(v97 + 48);
      v89 = *(double *)(v97 + 56);
      v99 = *(_QWORD *)(v97 + 72);
      v98 = *(_QWORD *)(v97 + 80);
      v100 = *(_QWORD *)(v97 + 88);
      v101 = *(unsigned __int16 *)(v97 + 96) | (*(unsigned __int8 *)(v97 + 98) << 16);
      v196 = v93;
      if (v98 >> 62)
      {
        outlined copy of DisplayList.Item.Value(v99, v98);
        v103 = 0.0;
        v104 = 0.0;
        v102 = v198;
      }
      else
      {
        v102 = v198;
        if (v99 >> 60 == 10)
        {
          v104 = *(double *)(v99 + 24);
          v103 = *(double *)(v99 + 32);
          outlined copy of DisplayList.Item.Value(v99, v98);
        }
        else
        {
          outlined copy of DisplayList.Item.Value(v99, v98);
          v103 = 0.0;
          v104 = 0.0;
        }
      }
      goto LABEL_75;
    }
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  v105 = *(int *)(v71 + 48);
  v106 = v214;
  v107 = v68;
  v108 = v223;
  (*(void (**)(char *, char *, uint64_t))&v210)(v214, v224, v223);
  v204 = v107;
  v106[v105] = (char)v107;
  v109 = &v106[*(int *)(v108 + 40)];
  LOBYTE(v105) = *v109;
  LODWORD(v107) = *((_DWORD *)v109 + 1);
  v110 = v109[8];
  v111 = *((_DWORD *)v109 + 3);
  v112 = v109[16];
  v202 = *(double *)(*(_QWORD *)&v202 + 8);
  (*(void (**)(char *, uint64_t))&v202)(v106, v108);
  LOBYTE(v229) = v105;
  DWORD1(v229) = (_DWORD)v107;
  BYTE8(v229) = v110;
  HIDWORD(v229) = v111;
  LOBYTE(v230) = v112;
  LODWORD(v197) = RasterizationOptions.colorSpace.getter();
  v203 = *(double *)(v220 + 32);
  v113 = v217;
  v196 = v93;
  if (v217 == 0.0)
    v114 = 0;
  else
    v114 = *(_QWORD *)(*(_QWORD *)&v217 + 64);
  v115 = v203;
  v116 = *(_QWORD *)(*(_QWORD *)&v203 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v116 + 16));
  *(_QWORD *)(v116 + 24) = v114;
  os_unfair_lock_unlock((os_unfair_lock_t)(v116 + 16));
  swift_release();
  swift_release();
  swift_release();
  v117 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  v118 = *(int *)(TupleTypeMetadata2 + 48);
  v119 = v214;
  v120 = v223;
  (*(void (**)(char *, char *, uint64_t))&v210)(v214, v224, v223);
  v119[v118] = (char)v204;
  LOBYTE(v118) = v119[*(int *)(v120 + 44)];
  (*(void (**)(char *, uint64_t))&v202)(v119, v120);
  objc_msgSend(v117, sel_setProfile_, (v118 & 1) == 0);
  v121 = v197;
  objc_msgSend(v117, sel_setDefaultColorSpace_, v197);
  v122 = v220;
  v123 = *(double *)(v220 + 56);
  v124 = *(double *)(v220 + 64);
  objc_msgSend(v117, sel_setContentRect_, 0.0, 0.0, v123, v124);
  swift_retain_n();
  v125 = swift_retain_n();
  v126 = specialized PropertyList.Tracker.value<A>(_:for:)(v125);
  swift_release_n();
  swift_release_n();
  objc_msgSend(v117, sel_setDeviceScale_, v126);
  v127 = *(double *)(v122 + 40);
  v128 = *(double *)(v122 + 48);
  objc_msgSend(v117, sel_translateByX_Y_, -v127, -v128);
  type metadata accessor for GraphicsContext.Storage();
  v129 = v113;
  v130 = swift_allocObject();
  *(_QWORD *)(v130 + 32) = 1065353216;
  *(_QWORD *)(v130 + 40) = 0x7FF8000000000000;
  *(double *)&v229 = v129;
  *((CGFloat *)&v229 + 1) = v115;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  v131 = v117;
  swift_retain();
  swift_retain();
  v132 = (char *)v131;
  *(_QWORD *)(v130 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v132, (uint64_t *)&v229);
  State = RBDisplayListGetState();
  v214 = v132;

  *(_QWORD *)(v130 + 24) = State;
  *(_BYTE *)(v130 + 48) = 0;
  v225 = v130;
  v134 = *(char **)(v122 + 32);
  v135 = *(_BYTE *)(v122 + 72);
  v136 = *(_OWORD *)(v122 + 16);
  v229 = *(_OWORD *)v122;
  v230 = v136;
  *(_QWORD *)&v231 = v134;
  *((double *)&v231 + 1) = v127;
  *(double *)&v232 = v128;
  *((double *)&v232 + 1) = v123;
  *(double *)&v233 = v124;
  BYTE8(v233) = v135;
  v137 = CanvasDisplayList.symbols.getter();
  if (v137)
  {
    *(_QWORD *)&v229 = v137;
    v138 = v211;
    closure #2 in CanvasDisplayList.updateValue()((uint64_t *)&v229, v122, v121, (uint64_t)v221, *(uint64_t *)&v216, (uint64_t *)v227);
    v211 = v138;
    swift_retain();
    swift_bridgeObjectRelease();
    v139 = *(_QWORD *)v227;
  }
  else
  {
    swift_retain();
    v139 = 0;
  }
  v140 = (uint64_t)v209;
  *(_QWORD *)(*(_QWORD *)(v130 + 16) + 24) = v139;
  swift_release();
  swift_release();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v141 = one-time initialization token for lastestAccessLists;
    v209 = v134;
    swift_retain();
    if (v141 == -1)
      goto LABEL_43;
  }
  swift_once();
LABEL_43:
  v142 = v199 & 1;
  swift_beginAccess();
  v208 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)&v73 + 56))(v140, 1, 1, v75);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v144 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v140;
  v145 = v142;
  v146 = v211;
  closure #3 in CanvasDisplayList.updateValue()((uint64_t)&v225, v145, (uint64_t)v221, *(uint64_t *)&v216, (uint64_t)&v233, v35, v219);
  *(_QWORD *)(StatusReg + 848) = v144;
  if (!v146)
  {
    v147 = v206;
    outlined init with copy of ObservationTracking._AccessList?(v140, v206);
    v148 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)&v73 + 48))(v147, 1, v75) == 1)
    {
      outlined destroy of ObservationTracking._AccessList?(v147);
    }
    else
    {
      v149 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v73 + 32);
      v150 = v200;
      v149(v200, v147, v75);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v73 + 16))(v207, v150, v75);
      swift_beginAccess();
      v151 = (char *)static ObservationRegistrar.lastestAccessLists;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static ObservationRegistrar.lastestAccessLists = v151;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v151 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v151 + 2) + 1, 1, (unint64_t)v151);
        static ObservationRegistrar.lastestAccessLists = v151;
      }
      v154 = *((_QWORD *)v151 + 2);
      v153 = *((_QWORD *)v151 + 3);
      if (v154 >= v153 >> 1)
      {
        v151 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v153 > 1, v154 + 1, 1, (unint64_t)v151);
        static ObservationRegistrar.lastestAccessLists = v151;
      }
      *((_QWORD *)v151 + 2) = v154 + 1;
      v149(&v151[((*(unsigned __int8 *)(*(_QWORD *)&v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)&v73 + 80))+ *(_QWORD *)(*(_QWORD *)&v73 + 72) * v154], (uint64_t)v207, v75);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v73 + 8))(v200, v75);
      v148 = &type metadata instantiation cache for InterfaceIdiomBox;
    }
    outlined destroy of ObservationTracking._AccessList?(v140);
    v155 = v148;
    v156 = v148[463];
    v157 = *(_QWORD *)(v156 + 16);
    if (v157)
    {
      v158 = v156
           + ((*(unsigned __int8 *)(*(_QWORD *)&v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)&v73 + 80));
      v159 = *(_QWORD *)(*(_QWORD *)&v73 + 72);
      v160 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v73 + 16);
      swift_bridgeObjectRetain();
      do
      {
        v160(v6, v158, v75);
        specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)&v73 + 8))(v6, v75);
        v158 += v159;
        --v157;
      }
      while (v157);
      swift_bridgeObjectRelease();
    }
    v155[463] = v208;
    swift_release();
    swift_bridgeObjectRelease();
    v74 = v220;
    v103 = 0.0;
    v71 = TupleTypeMetadata2;
    v161 = (char)v204;
    v162 = v214;
    if ((*(_BYTE *)(v220 + 72) & 1) != 0)
    {
      v104 = 0.0;
      v163 = v201;
    }
    else
    {
      objc_msgSend(v214, sel_boundingRect);
      v164 = v246.origin.x;
      v165 = v246.origin.y;
      v166 = v246.size.width;
      v167 = v246.size.height;
      IsEmpty = CGRectIsEmpty(v246);
      v163 = v201;
      if (IsEmpty)
      {
        *(_QWORD *)&v229 = MEMORY[0x24BEE4AF8];
        WORD4(v229) = 0;
        BYTE10(v229) = 0;
        AGGraphSetOutputValue();
        swift_release();
        swift_release_n();

        swift_release();
        (*(void (**)(char *, uint64_t))(v218 + 8))(v224, v71);
        swift_release();
        return swift_release();
      }
      v247.origin.x = v164;
      v247.origin.y = v165;
      v247.size.width = v166;
      v247.size.height = v167;
      MinX = CGRectGetMinX(v247);
      v221 = v94;
      v219 = v90;
      v216 = floor(MinX * 0.0625) * 16.0;
      v248.origin.x = v164;
      v248.origin.y = v165;
      v248.size.width = v166;
      v248.size.height = v167;
      v170 = v89;
      v171 = floor(CGRectGetMinY(v248) * 0.0625) * 16.0;
      v249.origin.x = v164;
      v249.origin.y = v165;
      v249.size.width = v166;
      v249.size.height = v167;
      v172 = ceil(CGRectGetMaxX(v249) * 0.0625) * 16.0;
      v250.origin.x = v164;
      v250.origin.y = v165;
      v250.size.width = v166;
      v250.size.height = v167;
      MaxY = CGRectGetMaxY(v250);
      v94 = v221;
      v174 = ceil(MaxY * 0.0625) * 16.0;
      if (v216 < 0.0)
        v104 = 0.0;
      else
        v104 = v216;
      if (v171 < 0.0)
        v103 = 0.0;
      else
        v103 = v171;
      v175 = v219;
      if (v172 < v219)
        v175 = v172;
      v90 = v175 - v104;
      if (v174 >= v170)
        v174 = v170;
      v89 = v174 - v103;
    }
    v176 = swift_allocObject();
    v177 = objc_msgSend(v162, sel_moveContents);
    swift_release();
    swift_release();

    *(_QWORD *)(v176 + 16) = v177;
    *(double *)(v176 + 24) = v104;
    *(double *)(v176 + 32) = v103;
    v178 = *(int *)(v71 + 48);
    v179 = v223;
    (*(void (**)(_QWORD, char *, uint64_t))&v210)(*(_QWORD *)&v163, v224, v223);
    *(_BYTE *)(*(_QWORD *)&v163 + v178) = v161;
    v180 = *(_QWORD *)&v163 + *(int *)(v179 + 40);
    LOBYTE(v178) = *(_BYTE *)v180;
    v181 = v163;
    v182 = *(_DWORD *)(v180 + 4);
    v183 = *(_BYTE *)(v180 + 8);
    v184 = *(_DWORD *)(v180 + 12);
    v185 = *(_BYTE *)(v180 + 16);
    (*(void (**)(CGFloat, uint64_t))&v202)(COERCE_CGFLOAT(*(_QWORD *)&v181), v179);
    *(_BYTE *)(v176 + 40) = v178;
    *(_DWORD *)(v176 + 44) = v182;
    *(_BYTE *)(v176 + 48) = v183;
    *(_DWORD *)(v176 + 52) = v184;
    *(_BYTE *)(v176 + 56) = v185;
    v102 = v198;
    if (v198)
      v98 = (2 * (((33 * WORD1(v198)) ^ v198) & 0x7FFFLL)) | 1;
    else
      v98 = 0;
    v99 = v176 | 0xA000000000000000;
    swift_release();
    v100 = 0;
    v101 = 0;
LABEL_75:
    v186 = *(_DWORD *)v74;
    if (v98 >> 62 != 3 || (v101 & 0xFFFFFF) != 0 || v98 != 0xC000000000000000 || v100 | v99)
    {
      v190 = v104 + v215.f64[0] - v196 + *(double *)(v74 + 40);
      v191 = v103 + v215.f64[1] - *(double *)&v94 + *(double *)(v74 + 48);
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v189 = swift_allocObject();
      *(_OWORD *)(v189 + 16) = xmmword_23527E860;
      *(double *)(v189 + 32) = v190;
      *(double *)(v189 + 40) = v191;
      *(double *)(v189 + 48) = v90;
      *(double *)(v189 + 56) = v89;
      *(_QWORD *)(v189 + 64) = v102;
      *(_QWORD *)(v189 + 72) = v99;
      *(_QWORD *)(v189 + 80) = v98;
      *(_QWORD *)(v189 + 88) = v100;
      *(_BYTE *)(v189 + 98) = BYTE2(v101);
      *(_WORD *)(v189 + 96) = v101;
      *(_DWORD *)(v189 + 100) = v186;
      *(double *)&v229 = v190;
      *((double *)&v229 + 1) = v191;
      *(double *)&v230 = v90;
      *((double *)&v230 + 1) = v89;
      *(_QWORD *)&v231 = v102;
      *((_QWORD *)&v231 + 1) = v99;
      *(_QWORD *)&v232 = v98;
      *((_QWORD *)&v232 + 1) = v100;
      BYTE2(v233) = BYTE2(v101);
      LOWORD(v233) = v101;
      DWORD1(v233) = v186;
      outlined copy of DisplayList.Item.Value(v99, v98);
      DisplayList.Item.features.getter();
      v192 = v102;
      v188 = v225;
      *(double *)&v229 = v190;
      *((double *)&v229 + 1) = v191;
      *(double *)&v230 = v90;
      *((double *)&v230 + 1) = v89;
      *(_QWORD *)&v231 = v192;
      *((_QWORD *)&v231 + 1) = v99;
      *(_QWORD *)&v232 = v98;
      *((_QWORD *)&v232 + 1) = v100;
      BYTE2(v233) = BYTE2(v101);
      LOWORD(v233) = v101;
      DWORD1(v233) = v186;
      DisplayList.Item.properties.getter();
      v187 = v225;
    }
    else
    {
      outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
      v187 = 0;
      v188 = 0;
      v189 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v229 = v189;
    WORD4(v229) = v188;
    BYTE10(v229) = v187;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    outlined consume of DisplayList.Item.Value(v99, v98);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v218 + 8))(v224, v71);
    return swift_release();
  }
  result = outlined destroy of ObservationTracking._AccessList?(v140);
  __break(1u);
  return result;
}

uint64_t closure #2 in CanvasDisplayList.updateValue()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v14 = result;
    v15 = *a1;
    v16 = *(_DWORD *)(a2 + 24);
    type metadata accessor for CanvasDisplayList(0, a4, a5, v13);
    type metadata accessor for SymbolRenderer();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 40) = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v17 + 16) = v15;
    *(_DWORD *)(v17 + 24) = v14;
    *(_DWORD *)(v17 + 28) = a3;
    *(_DWORD *)(v17 + 32) = v16;
    *a6 = v17;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t closure #3 in CanvasDisplayList.updateValue()@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[7];
  char v18;

  type metadata accessor for CanvasDisplayList(0, a3, a4, a3);
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a1;
  *(double *)&v17[5] = a6;
  *(double *)&v17[6] = a7;
  v18 = a2;
  v15 = type metadata accessor for Canvas(0, a3, a4, v14);
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #3 in CanvasDisplayList.updateValue(), (uint64_t)v17, v15, MEMORY[0x24BEE4AE0] + 8, a5);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CanvasDisplayList<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CanvasDisplayList<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t SymbolRenderer.symbol<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __n128 **v30;
  _QWORD *v31;
  uint64_t v32;
  double *InputValue;
  double v34;
  double v35;
  id v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  __n128 *v44;
  int v45;
  uint64_t v46;
  id v47;
  uint64_t *v48;
  id v49;
  char isUniquelyReferenced_nonNull_native;
  double *v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61[3];
  uint64_t v62[6];

  v5 = v4;
  v10 = (_QWORD *)type metadata accessor for Optional();
  v57 = *(v10 - 1);
  v58 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v52 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a1;
  _convertToAnyHashable<A>(_:)();
  v17 = (uint64_t *)(v4 + 40);
  swift_beginAccess();
  v18 = *(_QWORD *)(v4 + 40);
  if (*(_QWORD *)(v18 + 16))
  {
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
    if ((v20 & 1) != 0)
    {
      v21 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 24 * v19);
      v23 = *v21;
      v22 = v21[1];
      v24 = v21[2];
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      result = outlined destroy of AnyHashable((uint64_t)v62);
      *a4 = v23;
      a4[1] = v22;
      a4[2] = v24;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  v54 = v17;
  v56 = a4;
  result = outlined destroy of AnyHashable((uint64_t)v62);
  v55 = v5;
  v27 = *(_QWORD *)(v5 + 16);
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
LABEL_13:
    v31 = v56;
    *v56 = 0;
    v31[1] = 0;
    v31[2] = 0;
    return result;
  }
  v29 = 0;
  v30 = (__n128 **)(v27 + 72);
  while (1)
  {
    if (v29 >= *(_QWORD *)(v27 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v62[0] = (uint64_t)*(v30 - 2);
    ViewTraitCollection.tag<A>(for:)(a2, a3, v26, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a2) != 1)
      break;
    result = (*(uint64_t (**)(char *, id))(v57 + 8))(v12, v58);
LABEL_8:
    ++v29;
    v30 += 6;
    if (v28 == v29)
      goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, a2);
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a2);
    goto LABEL_8;
  }
  if (v29 >= *(_QWORD *)(v27 + 16))
    goto LABEL_21;
  v32 = v55;
  InputValue = (double *)AGGraphGetInputValue();
  v34 = *InputValue;
  v35 = InputValue[1];
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  result = (uint64_t)objc_msgSend(v36, sel_setDefaultColorSpace_, *(unsigned int *)(v32 + 28));
  if (v29 >= *(_QWORD *)(v27 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (*((_DWORD *)v30 - 1) == *MEMORY[0x24BE096C0])
  {
LABEL_19:
    v47 = v36;
    _convertToAnyHashable<A>(_:)();
    v48 = v54;
    swift_beginAccess();
    v49 = v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v60 = *v48;
    *v48 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v49, (uint64_t)v62, isUniquelyReferenced_nonNull_native, v34, v35);
    *v48 = v60;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v62);
    swift_endAccess();

    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a2);
    v51 = (double *)v56;
    *v56 = v49;
    v51[1] = v34;
    v51[2] = v35;
    return result;
  }
  v37 = AGGraphGetInputValue();
  v57 = *(_QWORD *)v37;
  v38 = *(unsigned __int16 *)(v37 + 8);
  v52 = *(unsigned __int8 *)(v37 + 10);
  v53 = v38;
  v39 = (uint64_t *)AGGraphGetInputValue();
  v55 = *v39;
  v40 = v55;
  v58 = v36;
  v41 = v39[1];
  type metadata accessor for GraphicsContext.Storage();
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 32) = 1065353216;
  *(_QWORD *)(v42 + 40) = 0x7FF8000000000000;
  v62[0] = v40;
  v62[1] = v41;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v43 = v58;
  swift_retain();
  *(_QWORD *)(v42 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v43, v62);
  result = RBDisplayListGetState();
  *(_QWORD *)(v42 + 24) = result;
  *(_BYTE *)(v42 + 48) = 0;
  v62[0] = v42;
  if (v29 < *(_QWORD *)(v27 + 16))
  {
    v44 = *v30;
    v61[0] = 0;
    v45 = v53 | (v52 << 16);
    v46 = v57;
    swift_bridgeObjectRetain();
    swift_retain();
    specialized DisplayList.GraphicsRenderer.render(at:do:)(v61, v44, (uint64_t)v44, v46, v45, v62);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v36 = v58;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t SymbolRenderer.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SymbolRenderer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CanvasSymbols.updateValue()()
{
  unsigned int *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t *v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (uint64_t)v0;
  v17 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = MEMORY[0x24BEE4AF8];
  ++v0[28];
  v2 = *v0;
  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v14);
  v4 = v15;
  v5 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  v12 = v1;
  v13 = &v10;
  ViewList.applySublists(from:list:to:)((uint64_t)&v9, v2, (uint64_t)partial apply for closure #1 in CanvasSymbols.updateValue(), (uint64_t)v11, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  v6 = swift_bridgeObjectRetain();
  v7 = specialized _NativeDictionary.filter(_:)(v6, v1);
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + 104) = v7;
  v14[0] = v10;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CanvasSymbols.Child], (uint64_t)&type metadata for CanvasSymbols.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CanvasSymbols.updateValue()(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  id v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  id v36;
  void *v37;
  id v38;
  uint64_t result;
  id v40;
  id v41;
  Swift::String v42;
  uint64_t v43;
  _QWORD **v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v7 = *(unsigned int *)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 20);
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(unsigned __int8 *)(v8 + 52);
    swift_retain();
    if (v10)
      v6 = 0xFFFFFFFFLL;
    else
      v6 = v6;
  }
  else
  {
    v9 = 0;
  }
  v11 = *(_QWORD *)(a2 + 104);
  if (!*(_QWORD *)(v11 + 16))
  {
    v12 = v7 | (v6 << 32);
LABEL_16:
    v36 = (id)AGSubgraphGetGraph();
    v37 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v38 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in closure #1 in CanvasSymbols.updateValue()(a2, (_QWORD *)a1, v37, v12, v9, a3);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();

    return 1;
  }
  v12 = v7 | (v6 << 32);
  swift_retain();
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v9);
  if ((v14 & 1) == 0)
  {
    swift_release();
    goto LABEL_16;
  }
  v44 = a3;
  v15 = *(_QWORD *)(v11 + 56) + 48 * v13;
  v16 = *(void **)v15;
  v17 = *(_QWORD *)(v15 + 8);
  v18 = *(_DWORD *)(v15 + 16);
  v19 = *(_QWORD *)(v15 + 32);
  v20 = *(_QWORD *)(v15 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  v43 = v20;
  swift_retain();
  v21 = v16;
  swift_release();
  v22 = *(_DWORD *)(a2 + 112);
  if (v18 != v22)
  {
    v23 = *(_QWORD *)(a1 + 72);
    v24 = v21;
    swift_retain_n();
    swift_retain_n();
    v25 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46 = v25;
    *((_QWORD *)&v46 + 1) = v17;
    LODWORD(v47) = v22;
    *((_QWORD *)&v47 + 1) = v23;
    *(_QWORD *)&v48 = v19;
    *((_QWORD *)&v48 + 1) = v43;
    swift_retain();
    v26 = v25;
    swift_retain();
    swift_bridgeObjectRetain();

    swift_release();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v46, v7 | (v6 << 32), v9, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a2 + 104) = v45;
    swift_release();
    swift_bridgeObjectRelease();
    v28 = v26;
    swift_retain();
    swift_bridgeObjectRetain();

    swift_release();
    v29 = *v44;
    v30 = swift_isUniquelyReferenced_nonNull_native();
    *v44 = v29;
    if ((v30 & 1) == 0)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      *v44 = v29;
    }
    v32 = v29[2];
    v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
      *v44 = v29;
    }
    v29[2] = v32 + 1;
    v33 = &v29[6 * v32];
    v34 = v46;
    v35 = v48;
    v33[3] = v47;
    v33[4] = v35;
    v33[2] = v34;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    return 1;
  }
  v40 = v21;
  swift_retain_n();
  swift_retain_n();
  v41 = v40;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = _ViewList_ID.Canonical.description.getter();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in closure #1 in CanvasSymbols.updateValue()(uint64_t a1, _QWORD *a2, void *a3, unint64_t a4, uint64_t a5, _QWORD **a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, uint64_t *, __int128 *, _QWORD, uint64_t (*)(_QWORD *, uint64_t *, void (*)(_QWORD *__return_ptr, uint64_t *)), _QWORD, uint64_t, uint64_t);
  _QWORD *v27;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  id v44;
  char isUniquelyReferenced_nonNull_native;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  _QWORD v76[6];

  v76[5] = *MEMORY[0x24BDAC8D0];
  v66 = *(_QWORD *)(a1 + 8);
  v60 = *(_DWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v62 = *(_DWORD *)(a1 + 44);
  v65 = *(_QWORD **)(a1 + 48);
  v64 = *(_QWORD *)(a1 + 56);
  v59 = *(_DWORD *)(a1 + 40) | 0x10;
  v63 = a2 + 4;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 84);
  swift_beginAccess();
  v13 = *(_DWORD *)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v58 = *(_OWORD *)(v8 + 32);
  v56 = *(_OWORD *)(v8 + 48);
  v15 = *(_QWORD *)(v8 + 64);
  v16 = *(_QWORD *)(v8 + 72);
  v17 = *(_BYTE *)(v8 + 80);
  v18 = *(_BYTE *)(v8 + 81);
  v19 = *(_QWORD *)(v8 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v13;
  *(_QWORD *)(v20 + 24) = v14;
  *(_OWORD *)(v20 + 32) = v58;
  *(_OWORD *)(v20 + 48) = v56;
  *(_QWORD *)(v20 + 64) = v15;
  *(_QWORD *)(v20 + 72) = v16;
  *(_BYTE *)(v20 + 80) = v17;
  *(_BYTE *)(v20 + 81) = v18;
  *(_QWORD *)(v20 + 88) = v19;
  swift_retain();
  v21 = v65;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = *MEMORY[0x24BE096C0];
  LODWORD(v68) = *(_DWORD *)(a1 + 80);
  DWORD1(v68) = v22;
  v57 = v22;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  v24 = a2[7];
  v25 = a2[8];
  __swift_project_boxed_opaque_existential_1(v63, v24);
  v67 = 0;
  *(_QWORD *)&v68 = v66;
  DWORD2(v68) = v60;
  *(_QWORD *)&v69 = v20;
  *((_QWORD *)&v69 + 1) = v9;
  *(_QWORD *)&v70 = __PAIR64__(v62, v59);
  *((_QWORD *)&v70 + 1) = v65;
  v71 = v64;
  v72 = v10;
  v73 = v11;
  v61 = v23;
  v74 = v23;
  v75 = v12;
  v26 = *(void (**)(_QWORD *, uint64_t *, __int128 *, _QWORD, uint64_t (*)(_QWORD *, uint64_t *, void (*)(_QWORD *__return_ptr, uint64_t *)), _QWORD, uint64_t, uint64_t))(v25 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v76, &v67, &v68, 0, specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), 0, v24, v25);
  v27 = (_QWORD *)v76[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v29 = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_16:
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
    *v21 = v27;
    goto LABEL_12;
  }
  v30 = v57;
  if (v27)
    v31 = v27;
  else
    v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](v29);
  MEMORY[0x24BDAC7A8](v32);
  AGGraphMutateAttribute();
  v34 = a2[7];
  v33 = a2[8];
  __swift_project_boxed_opaque_existential_1(v63, v34);
  v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 32);
  v36 = a3;
  v37 = v35(v34, v33);
  v38 = *(_DWORD *)(a1 + 112);
  v39 = a2[9];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v41 = v31[2];
  if (v41)
  {
    v42 = v31 + 6;
    while (*((_QWORD *)v42 - 2) != v40)
    {
      v42 += 6;
      if (!--v41)
        goto LABEL_11;
    }
    v30 = *v42;
  }
LABEL_11:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v68) = 1;
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  v43 = DisplayList.GraphicsRenderer.init(platformViewMode:)((char *)&v68);
  *(_QWORD *)&v68 = v36;
  *((_QWORD *)&v68 + 1) = v37;
  LODWORD(v69) = v38;
  *((_QWORD *)&v69 + 1) = v39;
  *(_QWORD *)&v70 = __PAIR64__(v30, v61);
  *((_QWORD *)&v70 + 1) = v43;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v44 = v36;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76[0] = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v68, a4, a5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 104) = v76[0];
  swift_release();
  swift_bridgeObjectRelease();
  v21 = a6;
  v27 = *a6;
  isEscapingClosureAtFileLocation = (uint64_t)v44;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v46 = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v27;
  if ((v46 & 1) == 0)
    goto LABEL_16;
LABEL_12:
  v48 = v27[2];
  v47 = v27[3];
  if (v48 >= v47 >> 1)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v27);
    *v21 = v27;
  }
  v27[2] = v48 + 1;
  v49 = &v27[6 * v48];
  v50 = v68;
  v51 = v70;
  v49[3] = v69;
  v49[4] = v51;
  v49[2] = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

}

double *CanvasSymbols.SymbolSize.value.getter@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double *result;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double *Value;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  uint64_t v14;
  char v15;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
  {
    result = (double *)AGGraphGetValue();
    v4 = *result;
    v5 = *((_QWORD *)result + 1);
    v6 = *result;
    v7 = v5;
LABEL_10:
    *a2 = v4;
    *((_QWORD *)a2 + 1) = v5;
    a2[2] = v6;
    *((_QWORD *)a2 + 3) = v7;
    return result;
  }
  v8 = *(_QWORD *)AGGraphGetValue();
  Value = (double *)AGGraphGetValue();
  v6 = *Value;
  v7 = *((_QWORD *)Value + 1);
  v10 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v10 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_9;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_9:
    v12 = v6;
    v13 = 0;
    v14 = v7;
    v15 = 0;
    v4 = (*(double (**)(double *))(*(_QWORD *)v8 + 120))(&v12);
    v5 = v11;
    result = (double *)swift_release();
    goto LABEL_10;
  }
  result = (double *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double *protocol witness for Rule.value.getter in conformance CanvasSymbols.SymbolSize@<X0>(double *a1@<X8>)
{
  uint64_t *v1;

  return CanvasSymbols.SymbolSize.value.getter(*v1, a1);
}

uint64_t type metadata accessor for Canvas.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Canvas.ChildEnvironment);
}

uint64_t partial apply for closure #1 in static Canvas._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static Canvas._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;

  v4 = 0;
  v5 = 0;
  v21 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v22 = (unint64_t)(v6 + 63) >> 6;
  while (2)
  {
    v20 = v4;
    if (v8)
    {
LABEL_6:
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      v11 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v11 >= v22)
        goto LABEL_24;
      v12 = *(_QWORD *)(v21 + 8 * v11);
      ++v5;
      if (!v12)
      {
        v5 = v11 + 1;
        if (v11 + 1 >= v22)
          goto LABEL_24;
        v12 = *(_QWORD *)(v21 + 8 * v5);
        if (!v12)
        {
          v5 = v11 + 2;
          if (v11 + 2 >= v22)
            goto LABEL_24;
          v12 = *(_QWORD *)(v21 + 8 * v5);
          if (!v12)
          {
            v13 = v11 + 3;
            if (v13 >= v22)
            {
LABEL_24:
              specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v20, a3);
              return;
            }
            v12 = *(_QWORD *)(v21 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                v5 = v13 + 1;
                if (__OFADD__(v13, 1))
                  goto LABEL_26;
                if (v5 >= v22)
                  goto LABEL_24;
                v12 = *(_QWORD *)(v21 + 8 * v5);
                ++v13;
                if (v12)
                  goto LABEL_20;
              }
            }
            v5 = v13;
          }
        }
      }
LABEL_20:
      v8 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_21:
      v14 = *(_QWORD *)(a3 + 56);
      if (*(_DWORD *)(v14 + 48 * v10 + 16) == *(_DWORD *)(a4 + 112))
        break;
      v15 = *(void **)(v14 + 48 * v10);
      MEMORY[0x24BDAC7A8](a1);
      swift_retain();
      v16 = v15;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v17 = v16;
      AGSubgraphApply();
      AGSubgraphInvalidate();
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();

      if (v8)
        goto LABEL_6;
    }
    *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v4 = v20 + 1;
    if (!__OFADD__(v20, 1))
      continue;
    break;
  }
LABEL_27:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type CanvasSymbols and conformance CanvasSymbols()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasSymbols and conformance CanvasSymbols;
  if (!lazy protocol witness table cache variable for type CanvasSymbols and conformance CanvasSymbols)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CanvasSymbols, &unk_2506163E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasSymbols and conformance CanvasSymbols);
  }
  return result;
}

uint64_t type metadata accessor for CanvasDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasDisplayList);
}

uint64_t sub_235180448()
{
  return 16;
}

__n128 sub_235180454(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_235180460@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return keypath_get_3Tm(a1, a2, Canvas.isOpaque.getter, a3);
}

uint64_t sub_23518046C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_4Tm(a1, a2, a3, a4, Canvas.isOpaque.setter);
}

uint64_t sub_235180478()
{
  return 16;
}

__n128 sub_235180484(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_235180490@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char v7;

  v5 = type metadata accessor for Canvas(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  result = Canvas.colorMode.getter(v5, &v7);
  *a4 = v7;
  return result;
}

_BYTE *sub_2351804D8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v6 = type metadata accessor for Canvas(0, v4, v5, a4);
  return Canvas.colorMode.setter(&v8, v6);
}

uint64_t sub_235180520()
{
  return 16;
}

__n128 sub_23518052C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_235180538@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return keypath_get_3Tm(a1, a2, Canvas.rendersAsynchronously.getter, a3);
}

uint64_t sub_235180544(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_4Tm(a1, a2, a3, a4, Canvas.rendersAsynchronously.setter);
}

uint64_t sub_235180550()
{
  return 16;
}

__n128 sub_23518055C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_235180568@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return keypath_get_3Tm(a1, a2, Canvas.rendersFirstFrameAsynchronously.getter, a3);
}

uint64_t sub_235180574(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_4Tm(a1, a2, a3, a4, Canvas.rendersFirstFrameAsynchronously.setter);
}

uint64_t sub_235180580()
{
  return 16;
}

__n128 sub_23518058C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_235180598@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return keypath_get_3Tm(a1, a2, Canvas.isAccelerated.getter, a3);
}

uint64_t sub_2351805A4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_4Tm(a1, a2, a3, a4, Canvas.isAccelerated.setter);
}

uint64_t sub_2351805B0()
{
  return 16;
}

__n128 sub_2351805BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2351805C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return keypath_get_3Tm(a1, a2, Canvas.allowsPackedDrawable.getter, a3);
}

uint64_t keypath_get_3Tm@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for Canvas(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), (uint64_t)a3);
  result = a3(v6);
  *a4 = result & 1;
  return result;
}

uint64_t sub_23518061C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_4Tm(a1, a2, a3, a4, Canvas.allowsPackedDrawable.setter);
}

uint64_t keypath_set_4Tm(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = type metadata accessor for Canvas(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return a5(v6, v7);
}

uint64_t sub_235180670()
{
  return 16;
}

__n128 sub_23518067C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for Canvas()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Canvas(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_BYTE *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_BYTE *)(v13 + 16) = v15;
    *(_BYTE *)(v13 + 17) = *(_BYTE *)(v14 + 17);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = ((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = v12;
  *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  v12 = *(_DWORD *)(v11 + 4);
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_DWORD *)(v10 + 4) = v12;
  *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  return a1;
}

uint64_t initializeWithTake for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *v8;
  v9 = (v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  return a1;
}

uint64_t assignWithTake for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 19;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v10 = ((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_BYTE *)(v10 + 8) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_DWORD *)(v10 + 4) = v11;
  *(_DWORD *)(v10 + 12) = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 12);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v10 + 17) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Canvas(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((v7 + 7) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) + 18;
    v9 = (a2 - v6 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_235180AD8 + 4 * byte_2352D2E60[v12]))();
  }
}

void storeEnumTagSinglePayload for Canvas(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 18;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 0xFFFF) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v11 = ~v6 + a2;
  bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 18);
  if (v7 > 3)
    *a1 = v11;
  else
    *(_WORD *)a1 = v11;
  __asm { BR              X11 }
}

void sub_235180C84(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x235180CFCLL);
}

void sub_235180C8C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x235180C94);
  JUMPOUT(0x235180CFCLL);
}

void sub_235180CD4(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x235180CFCLL);
}

void sub_235180CDC(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x235180CFCLL);
}

uint64_t sub_235180CE4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x235180CFCLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x235180CF8);
    JUMPOUT(0x235180CF0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for SymbolRenderer()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for CanvasDisplayList(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CanvasDisplayList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for CanvasDisplayList(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasDisplayList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasDisplayList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for CanvasSymbols(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v5 = *(void **)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = v4;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasSymbols(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(void **)(a2 + 96);
  v5 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for CanvasSymbols(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasSymbols(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 116))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasSymbols(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 116) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 116) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for CanvasSymbols()
{
  return &unk_2506163E8;
}

uint64_t destroy for CanvasSymbols.Child(id *a1)
{

  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CanvasSymbols.Child()
{
  return &type metadata for CanvasSymbols.Child;
}

unint64_t instantiation function for generic protocol witness table for CanvasSymbols(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CanvasSymbols and conformance CanvasSymbols();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CanvasDisplayList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CanvasDisplayList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in CanvasDisplayList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in Canvas<A>.ChildEnvironment()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in CanvasDisplayList.updateValue()()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(v0 + 40);
  result = AGGraphAnyInputsChanged();
  if ((_DWORD)result)
    *v1 = 1;
  return result;
}

uint64_t sub_235181508()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in CanvasDisplayList.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;

  v6 = v4[4];
  v7 = *((double *)v4 + 5);
  v8 = *((double *)v4 + 6);
  v9 = type metadata accessor for Canvas(0, v4[2], v4[3], a4);
  return (*(uint64_t (**)(uint64_t, double, double))(a1 + *(int *)(v9 + 36)))(v6, v7, v8);
}

uint64_t partial apply for closure #1 in CanvasSymbols.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CanvasSymbols.updateValue()(a1, *(_QWORD *)(v1 + 16), *(_QWORD ***)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize;
  if (!lazy protocol witness table cache variable for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CanvasSymbols.SymbolSize, &unk_2506162C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize);
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in CanvasSymbols.updateValue()(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 4) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t sub_2351815E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @in_guaranteed CGSize) -> (@out ())(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD *);
  _QWORD v6[2];

  v4 = *(uint64_t (**)(uint64_t, _QWORD *))(v3 + 16);
  *(double *)v6 = a2;
  *(double *)&v6[1] = a3;
  return v4(a1, v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @unowned CGSize) -> ()(uint64_t a1, double *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(double, double))(v2 + 16))(*a2, a2[1]);
}

void *type metadata accessor for CanvasSymbols.SymbolSize()
{
  return &unk_2506162C0;
}

unint64_t instantiation function for generic protocol witness table for CanvasSymbols.SymbolSize(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Animatable.makeAnimatable(value:inputs:)(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<ColorView>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView);
    a1 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<SummarySymbol>(0, v3, v4, v5);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableAttribute<SummarySymbol>, (uint64_t)&protocol conformance descriptor for AnimatableAttribute<A>);
    a1 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  _BYTE v9[80];
  _DWORD v10[6];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_DWORD *)(a2 + 28);
    swift_beginAccess();
    v7 = *(_DWORD *)(v4 + 16);
    v10[0] = a1;
    v10[1] = v7;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10[2] = v5;
    v10[3] = v3;
    v14 = 0;
    v10[4] = v6;
    outlined init with copy of AnimatableAttribute<AnyShape>((uint64_t)v10, (uint64_t)v9);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    a1 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v9);
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v10);
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return a1;
}

void ColorView.init(_:)(float *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

float ColorView.color.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ColorView.color.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ColorView.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static ColorView._makeView(view:inputs:)(unsigned int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _OWORD v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = v5;
  v10 = *(_OWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v6;
  v12[1] = v6;
  v12[2] = v8;
  v12[0] = v7[0];
  if ((BYTE4(v8) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)v12);
    type metadata accessor for AnimatableAttribute<ColorView>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView);
    v4 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)v12);
  }
  specialized static RendererLeafView.makeLeafView(view:inputs:)(v4, (uint64_t)v7, a3);
}

_QWORD *ColorView.descriptionAttributes.getter()
{
  float *v0;
  float v1;
  float v2;
  float v3;
  _QWORD *v4;
  float v5;
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  if (*v0 == 0.0 && v1 == 0.0 && v3 == 0.0 && v0[3] == 0.0)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = -v2;
  if (v2 > 0.0)
    v5 = *v0;
  if (v5 > 0.0031308 && v5 != 1.0)
    powf(v5, 0.41667);
  v6 = -v1;
  if (v1 > 0.0)
    v6 = v1;
  if (v6 > 0.0031308 && v6 != 1.0)
    powf(v6, 0.41667);
  v7 = -v3;
  if (v3 > 0.0)
    v7 = v3;
  if (v7 > 0.0031308 && v7 != 1.0)
    powf(v7, 0.41667);
  type metadata accessor for (Float, Float, Float, Float)();
  _print_unlocked<A, B>(_:_:)();
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v9 = v4[2];
  v8 = v4[3];
  if (v9 >= v8 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v4);
  v4[2] = v9 + 1;
  v10 = &v4[4 * v9];
  v10[4] = 0x726F6C6F63;
  v10[5] = 0xE500000000000000;
  v10[6] = 0;
  v10[7] = 0xE000000000000000;
  return v4;
}

uint64_t ColorView.contains(points:size:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  uint64_t v13;

  if (*(float *)(v4 + 12) <= 0.0 || (v5 = *(_QWORD *)(result + 16)) == 0)
  {
    *a2 = 0;
    return result;
  }
  v6 = 0;
  v7 = 0;
  v8 = (double *)(result + 40);
  do
  {
    v10 = *(v8 - 1);
    if (v10 < 0.0 || ((v11 = *v8, *v8 >= 0.0) ? (v12 = v10 < a3) : (v12 = 0), !v12))
    {
      if (v7 >= 0x40)
        v9 = 0;
      else
        v9 = 1 << v7;
LABEL_7:
      v6 &= ~v9;
      goto LABEL_8;
    }
    if (v7 < 0x40)
    {
      v13 = 1 << v7;
      v9 = 1 << v7;
      if (v11 >= a4)
        goto LABEL_7;
    }
    else
    {
      v13 = 0;
      v9 = 0;
      if (v11 >= a4)
        goto LABEL_7;
    }
    v6 |= v13;
LABEL_8:
    ++v7;
    v8 += 2;
  }
  while (v5 != v7);
  *a2 = v6;
  return result;
}

__n128 ColorView.content()@<Q0>(uint64_t *a1@<X8>)
{
  __n128 *v1;
  uint64_t v3;
  __n128 result;

  v3 = swift_allocObject();
  result = *v1;
  *(__n128 *)(v3 + 16) = *v1;
  *a1 = v3 | 0x1000000000000000;
  return result;
}

float ColorView.animatableData.getter()
{
  uint64_t v0;
  float v1;
  float v2;
  unsigned __int32 v3;
  float v4;
  int8x16_t v5;
  int8x16_t v6;
  float v8;

  v1 = *(float *)v0;
  v2 = *(float *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(float *)(v0 + 12);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    *(float *)v5.i32 = v1;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v8, v5, v2, v3, v4, v6);
    v1 = v8;
  }
  return v1 * 128.0;
}

void ColorView.animatableData.setter(float a1, float a2, float a3, float a4)
{
  float *v4;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16[4];
  char v17;

  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  v9 = a1 * 0.0078125;
  v10 = a2 * 0.0078125;
  v11 = a3 * 0.0078125;
  v12 = a4 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v17 = 2;
    v16[0] = v9;
    v16[1] = v10;
    v16[2] = v11;
    v16[3] = v12;
    v9 = ResolvedGradient.ColorSpace.convertOut(_:)(v16);
    v10 = v13;
    v11 = v14;
    v12 = v15;
  }
  *v4 = v9;
  v4[1] = v10;
  v4[2] = v11;
  v4[3] = v12;
}

void (*ColorView.animatableData.modify(float32x4_t **a1))(float32x4_t **a1, char a2)
{
  int8x16_t *v1;
  float32x4_t *v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v8;
  float32x4_t v9;

  v3 = (float32x4_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].i64[1] = (uint64_t)v1;
  v8 = *(float32x4_t *)v1;
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, (int8x16_t)v8, v8.f32[1], v8.u32[2], v8.f32[3], v4);
    v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  v3[2] = vmulq_f32(v5, v6);
  return Color.Resolved.animatableData.modify;
}

__n128 protocol witness for RendererLeafView.content() in conformance ColorView@<Q0>(uint64_t *a1@<X8>)
{
  __n128 *v1;
  uint64_t v3;
  __n128 result;

  v3 = swift_allocObject();
  result = *v1;
  *(__n128 *)(v3 + 16) = *v1;
  *a1 = v3 | 0x1000000000000000;
  return result;
}

void protocol witness for Animatable.animatableData.getter in conformance ColorView(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;

  *(float *)a1 = ColorView.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void protocol witness for Animatable.animatableData.setter in conformance ColorView(float *a1)
{
  ColorView.animatableData.setter(*a1, a1[1], a1[2], a1[3]);
}

void (*protocol witness for Animatable.animatableData.modify in conformance ColorView(float32x4_t ***a1))(_QWORD *a1)
{
  float32x4_t **v2;

  v2 = (float32x4_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float32x4_t *)ColorView.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void protocol witness for static View._makeView(view:inputs:) in conformance ColorView(unsigned int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _OWORD v12[3];
  _OWORD v13[3];

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = v5;
  v10 = *(_OWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v6;
  v13[0] = v7[0];
  v13[1] = v6;
  v13[2] = v8;
  v12[1] = v6;
  v12[2] = v8;
  v12[0] = v7[0];
  outlined retain of _GraphInputs((uint64_t)v13);
  LODWORD(v4) = specialized static Animatable.makeAnimatable(value:inputs:)(v4, (uint64_t)v12);
  outlined release of _GraphInputs((uint64_t)v13);
  specialized static RendererLeafView.makeLeafView(view:inputs:)(v4, (uint64_t)v7, a3);
}

void type metadata accessor for (Float, Float, Float, Float)()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Float, Float, Float, Float))
  {
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (Float, Float, Float, Float));
  }
}

uint64_t sub_2351823D0()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ColorView()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void sub_23518240C(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;

  *(float *)a1 = ColorView.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_235182448(float *a1)
{
  ColorView.animatableData.setter(*a1, a1[1], a1[2], a1[3]);
}

ValueMetadata *type metadata accessor for ColorView()
{
  return &type metadata for ColorView;
}

void type metadata accessor for AnimatableAttribute<SummarySymbol>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>)
  {
    v4 = type metadata accessor for AnimatableAttribute(0, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>);
  }
}

uint64_t outlined init with copy of AnimatableAttribute<AnyShape>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnimatableAttribute<ColorView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for AnimatableAttribute(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for AnimatableAttribute<ColorView>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of AnimatableAttribute<AnyShape>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t withAnimation<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(&v10, a1);
  swift_release_n();
  v8 = swift_retain();
  withTransaction<A>(_:_:)(v8, a2, a3, a4);
  return swift_release_n();
}

uint64_t Text.storedAccessibilityLabel.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Text.storedAccessibilityLabel.getter(a4);
}

BOOL AccessibilityTextStorage.hasResolvableAttributes.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  BOOL v6;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    outlined copy of AccessibilityText.Storage(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), 1);
    v3 = v1;
  }
  else
  {
    v4 = objc_allocWithZone(MEMORY[0x24BDD1458]);
    outlined copy of AccessibilityText.Storage(v1, v2, 0);
    v5 = (void *)MEMORY[0x23B7C5DAC](v1, v2);
    v3 = objc_msgSend(v4, sel_initWithString_, v5);

    outlined consume of AccessibilityText.Storage(v1, v2, 0);
  }
  v6 = NSAttributedString.isDynamic.getter();

  return v6;
}

uint64_t AccessibilityText.init(_:environment:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  __int16 v14;
  __int128 v15;
  uint64_t v16[2];

  v10 = a5[1];
  v16[0] = *a5;
  v16[1] = v10;
  v15 = *a6;
  v11 = a3 & 1;
  v12 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(a1, a2, a3 & 1, a4, v16, 1, 1, 0, 0, &v15);
  outlined consume of Text.Storage(a1, a2, v11);
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if (v12)
    v14 = 1;
  else
    v14 = 255;
  *(_QWORD *)a7 = v12;
  *(_QWORD *)(a7 + 8) = 0;
  *(_WORD *)(a7 + 16) = v14;
  return result;
}

uint64_t specialized CodableByProtobuf.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v11;
  char v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = (uint64_t)v13;
    v6 = v14;
    outlined copy of Data._Representation((uint64_t)v13, v14);
    ProtobufDecoder.init(_:)((uint64_t)v13, v14);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = dispatch thunk of Hashable.hashValue.getter();
    swift_bridgeObjectRelease();
    v15 = v7;
    ResolvedGradient.init(from:)((unint64_t)&v13, (uint64_t)&v11);
    outlined consume of Data._Representation(v5, v6);
    v8 = v12;
    *(_QWORD *)a2 = v11;
    *(_BYTE *)(a2 + 8) = v8;
    v9 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  void *v10;
  __int128 v12;
  char v13;
  char v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = (uint64_t)v15;
    v6 = v16;
    outlined copy of Data._Representation((uint64_t)v15, v16);
    ProtobufDecoder.init(_:)((uint64_t)v15, v16);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = dispatch thunk of Hashable.hashValue.getter();
    swift_bridgeObjectRelease();
    v17 = v7;
    AccessibilityText.init(from:)((uint64_t)&v15, (id **)&v12);
    outlined consume of Data._Representation(v5, v6);
    v8 = v13;
    v9 = v14;
    *(_OWORD *)a2 = v12;
    *(_BYTE *)(a2 + 16) = v8;
    *(_BYTE *)(a2 + 17) = v9;
    v10 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t specialized CodableByProtobuf.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  char v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = (uint64_t)v11;
    v6 = v12;
    outlined copy of Data._Representation((uint64_t)v11, v12);
    ProtobufDecoder.init(_:)((uint64_t)v11, v12);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = dispatch thunk of Hashable.hashValue.getter();
    swift_bridgeObjectRelease();
    v13 = v7;
    ContentTransition.Style.init(from:)((unint64_t)&v11, &v10);
    outlined consume of Data._Representation(v5, v6);
    *a2 = v10;
    v8 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t specialized CodableByProtobuf.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = v11;
    v6 = v12;
    outlined copy of Data._Representation(v11, v12);
    ProtobufDecoder.init(_:)(v11, v12);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = dispatch thunk of Hashable.hashValue.getter();
    swift_bridgeObjectRelease();
    v13 = v7;
    CodableNSAttributes.init(from:)((id *)&v11, &v10);
    outlined consume of Data._Representation(v5, v6);
    *a2 = v10;
    v8 = (id)v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t specialized CodableByProtobuf.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v2)
  {
    v6 = result;
    v7 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v2)
  {
    v6 = result;
    v7 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return result;
}

uint64_t specialized CodableByProtobuf.encode(to:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v9[24];
  uint64_t v10;
  uint64_t v11;
  char v12;

  v11 = a2;
  v12 = a3;
  result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v3)
  {
    v7 = result;
    v8 = v6;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v10);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v7, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  return result;
}

uint64_t specialized CodableByProtobuf.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  v12 = a2;
  v13 = a3;
  v14 = a4 & 0x101;
  result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v4)
  {
    v8 = result;
    v9 = v7;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v8, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return result;
}

uint64_t specialized CodableByProtobuf.encode(to:)(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[24];
  uint64_t v9;
  char v10;

  v10 = a2;
  result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v2)
  {
    v6 = result;
    v7 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return result;
}

uint64_t AccessibilityText.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  char v13;

  v13 = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v4 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v5 = objc_msgSend(v4, sel_isKindOfClass_, swift_getObjCClassFromMetadata());
  swift_unknownObjectRelease();
  if (v5)
  {
    outlined init with take of Any(a1, v12);
    result = swift_dynamicCast();
    v7 = 0;
    v8 = v10;
    v9 = v13;
LABEL_5:
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 17) = v9;
    return result;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v12);
  if (swift_dynamicCast())
  {
    v8 = v10;
    v7 = v11;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v9 = 0;
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityText.text.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 17);
  type metadata accessor for AccessibilityTextStorage();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v2;
  *(_BYTE *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 33) = v4;
  outlined copy of AccessibilityText.Storage(v1, v2, v3);
  return v5;
}

uint64_t _ViewInputs.textAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t AccessibilityText.init(texts:environment:optional:idiom:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int16 v10;
  __int128 v11;
  __int128 v12;

  v7 = a2[1];
  *(_QWORD *)&v12 = *a2;
  *((_QWORD *)&v12 + 1) = v7;
  v11 = *a4;
  v8 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(a1, &v12, 1, 1, 0, 0, &v11, 8236, 0xE200000000000000);
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if ((a3 & 1) != 0)
    v10 = 257;
  else
    v10 = 1;
  if (!v8)
    v10 = 255;
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = v10;
  return result;
}

uint64_t AccessibilityImageLabel.text.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  if ((*(_QWORD *)(v0 + 16) & 0x8000000000000000) != 0)
  {
    type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    v2 = v3;
  }
  else
  {
    outlined copy of Text.Storage(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16) & 1);
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AccessibilityImageLabel.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3 & 1;
  if (a4)
    v6 = result;
  else
    v6 = 0;
  if (a4)
    v7 = a2;
  else
    v7 = 0;
  *a5 = v6;
  a5[1] = v7;
  if (!a4)
    v5 = 0x1FFFFFFFELL;
  a5[2] = v5;
  a5[3] = a4;
  return result;
}

uint64_t _GraphInputs.textAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.textAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.textAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.textAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.textAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.textAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (__int128 *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *(_QWORD *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.textAccessibilityProvider.modify;
}

void _GraphInputs.textAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.TextAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.textAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.textAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _ViewInputs.textAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.textAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (__int128 *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *(_QWORD *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.textAccessibilityProvider.modify;
}

uint64_t protocol witness for static TextAccessibilityProvider.makeView(content:text:resolved:) in conformance EmptyTextAccessibilityProvider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  swift_retain();
  return swift_retain();
}

id AccessibilityText.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of AccessibilityText.Storage(v2, v3, v4);
}

void AccessibilityText.storage.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  outlined consume of AccessibilityText.Storage(*(void **)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
}

uint64_t (*AccessibilityText.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityText.optional.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AccessibilityText.optional.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*AccessibilityText.optional.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityText.init(storage:optional:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 a2@<W1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3;
  __n128 result;

  v3 = a1[1].n128_u8[0];
  result = *a1;
  *a3 = *a1;
  a3[1].n128_u8[0] = v3;
  a3[1].n128_u8[1] = a2;
  return result;
}

__n128 AccessibilityTextStorage.__allocating_init(_:)(__n128 *a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  __n128 result;

  v2 = swift_allocObject();
  v3 = a1[1].n128_u8[0];
  v4 = a1[1].n128_u8[1];
  result = *a1;
  *(__n128 *)(v2 + 16) = *a1;
  *(_BYTE *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 33) = v4;
  return result;
}

id AccessibilityText.attributedString.getter()
{
  uint64_t v0;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return *(id *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v6 = *(id *)v0;
  v3 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  swift_bridgeObjectRetain();
  v4 = (void *)MEMORY[0x23B7C5DAC](v6, v2);
  outlined consume of AccessibilityText.Storage(v6, v2, 0);
  v5 = objc_msgSend(v3, sel_initWithString_, v4);

  return v5;
}

BOOL AccessibilityText.isEmpty.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return (uint64_t)objc_msgSend((id)v1, sel_length) < 1;
  v3 = *(_QWORD *)(v0 + 8);
  if ((v3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v3) & 0xF;
  else
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  return v4 == 0;
}

id AccessibilityTextStorage.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  char v5;
  char v6;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 33);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 17) = v6;
  return outlined copy of AccessibilityText.Storage(v3, v4, v5);
}

void AccessibilityTextStorage.base.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 17);
  swift_beginAccess();
  v6 = *(void **)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  *(_BYTE *)(v1 + 33) = v5;
  outlined consume of AccessibilityText.Storage(v6, v7, v8);
}

uint64_t (*AccessibilityTextStorage.base.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t AccessibilityTextStorage.init(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_BYTE *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 33) = v3;
  return v1;
}

void AccessibilityTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19[2];

  v8 = *a2;
  v9 = a2[1];
  v10 = *a3;
  swift_beginAccess();
  v11 = *(void **)(v5 + 16);
  v12 = *(_QWORD *)(v5 + 24);
  if ((*(_BYTE *)(v5 + 32) & 1) != 0)
  {
    outlined copy of AccessibilityText.Storage(*(void **)(v5 + 16), *(_QWORD *)(v5 + 24), 1);
    v13 = v11;
  }
  else
  {
    v14 = objc_allocWithZone(MEMORY[0x24BDD1458]);
    outlined copy of AccessibilityText.Storage(v11, v12, 0);
    v15 = a4;
    v16 = a5;
    v17 = (void *)MEMORY[0x23B7C5DAC](v11, v12);
    v13 = objc_msgSend(v14, sel_initWithString_, v17);

    a5 = v16;
    a4 = v15;
    outlined consume of AccessibilityText.Storage(v11, v12, 0);
  }
  v19[0] = v8;
  v19[1] = v9;
  v18 = v10;
  ResolvedTextContainer.append(_:in:with:)((uint64_t)v13, v19, &v18, a4, a5);

}

BOOL AccessibilityTextStorage.resolvesToEmpty(in:with:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    return (uint64_t)objc_msgSend((id)v1, sel_length) < 1;
  v3 = *(_QWORD *)(v0 + 24);
  if ((v3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v3) & 0xF;
  else
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  return v4 == 0;
}

uint64_t AccessibilityTextStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  void *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  _QWORD v15[2];
  char v16;
  char v17;
  void *v18;
  uint64_t v19;
  __int16 v20;

  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = v1;
    swift_beginAccess();
    v3 = *(void **)(v2 + 16);
    v4 = *(_QWORD *)(v2 + 24);
    v5 = *(unsigned __int8 *)(v2 + 32);
    if (*(_BYTE *)(v2 + 33))
      v6 = 256;
    else
      v6 = 0;
    v7 = v6 | v5;
    outlined copy of AccessibilityText.Storage(v3, v4, v5);
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v7 = 255;
  }
  swift_beginAccess();
  v9 = *(void **)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v10 = *(_BYTE *)(v0 + 32);
  v11 = *(_BYTE *)(v0 + 33);
  if ((_BYTE)v7 == 0xFF)
  {
    v12 = *(_BYTE *)(v0 + 32);
    outlined copy of AccessibilityText.Storage(v9, v8, v10);
    outlined consume of AccessibilityText?(v3, v4, 255);
    outlined consume of AccessibilityText?(v9, v8, v12);
    v13 = 0;
  }
  else
  {
    v18 = v3;
    v19 = v4;
    v20 = v7;
    v15[0] = v9;
    v15[1] = v8;
    v16 = v10;
    v17 = v11;
    outlined copy of AccessibilityText?(v3, v4, v7);
    v13 = specialized static AccessibilityText.== infix(_:_:)((uint64_t)&v18, (uint64_t)v15);
    outlined consume of AccessibilityText.Storage(v18, v19, v20);
    outlined consume of AccessibilityText?(v3, v4, v7);
  }
  return v13 & 1;
}

void AccessibilityTextStorage.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of AccessibilityText.Storage(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t AccessibilityTextStorage.deinit()
{
  uint64_t v0;

  outlined consume of AccessibilityText.Storage(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return v0;
}

uint64_t AccessibilityTextStorage.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of AccessibilityText.Storage(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocClassInstance();
}

void AccessibilityText.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  BOOL v5;

  v2 = *(void **)v0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_BYTE *)(v0 + 17);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(2, (uint64_t)v2);
    outlined consume of AccessibilityText.Storage(v2, v3, 1);
    if (v1)
      return;
    goto LABEL_10;
  }
  if (v2)
    v5 = 0;
  else
    v5 = v3 == 0xE000000000000000;
  if (v5
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (swift_bridgeObjectRetain(),
        ProtobufEncoder.stringFieldAlways(_:_:)(1),
        outlined consume of AccessibilityText.Storage(v2, v3, 0),
        !v1))
  {
LABEL_10:
    if ((v4 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
}

void AccessibilityText.init(from:)(uint64_t a1@<X0>, id **a2@<X8>)
{
  uint64_t v2;
  id *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  char v10;
  unint64_t v11;
  id **v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id *v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  id *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  id **v52;
  char *v53;
  _BOOL4 v54;
  id *v55;

  v52 = a2;
  v5 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 >= v8)
  {
    v54 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0xE000000000000000;
LABEL_4:
    *(_QWORD *)(a1 + 24) = 0;
    v12 = v52;
    *v52 = v9;
    v12[1] = (id *)v11;
    *((_BYTE *)v12 + 16) = v10 & 1;
    *((_BYTE *)v12 + 17) = v54;
    return;
  }
  v54 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0xE000000000000000;
  while (1)
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(a1 + 32);
      if (v7 < v15)
        goto LABEL_14;
      if (v15 < v7)
        goto LABEL_59;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v14 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_60;
    if (v14 < 8)
      goto LABEL_59;
LABEL_14:
    v16 = v14 >> 3;
    if (v14 >> 3 == 3)
    {
      if ((v14 & 7) != 0)
      {
        if ((v14 & 7) != 2)
          goto LABEL_59;
        v28 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_60;
        if (v28 < 0)
          goto LABEL_72;
        v29 = *(_QWORD *)(a1 + 8) + v28;
        if (v8 < v29)
          goto LABEL_59;
        *(_QWORD *)(a1 + 24) = 24;
        *(_QWORD *)(a1 + 32) = v29;
      }
      v30 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_60;
      v54 = v30 != 0;
      goto LABEL_7;
    }
    if (v16 == 2)
    {
      if ((v14 & 7) != 2)
        goto LABEL_59;
      v3 = v9;
      v31 = *(_QWORD **)(a1 + 40);
      v9 = (id *)v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
      v11 = v31[2];
      v32 = v31[3];
      if (v11 >= v32 >> 1)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v11 + 1, 1, v31);
      v31[2] = v11 + 1;
      v31[v11 + 4] = v8;
      *(_QWORD *)(a1 + 40) = v31;
      v33 = ProtobufDecoder.decodeVarint()();
      if (v2)
      {
        v44 = v10;
        v45 = v3;
        v46 = (uint64_t)v9;
      }
      else
      {
        if (v33 < 0)
          goto LABEL_68;
        v11 = (unint64_t)v9;
        v34 = *(_QWORD *)(a1 + 8) + v33;
        if (v8 < v34)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          v44 = v10 & 1;
          v45 = v3;
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v34;
          CodableAttributedString.init(from:)((id *)a1, &v55);
          v9 = v3;
          v35 = *(_QWORD **)(a1 + 40);
          if (!v35[2])
            goto LABEL_69;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v36 = v35[2];
            if (!v36)
              goto LABEL_58;
            goto LABEL_44;
          }
          v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          v36 = v35[2];
          if (v36)
          {
LABEL_44:
            v37 = v36 - 1;
            v38 = v35[v37 + 4];
            v35[2] = v37;
            outlined consume of AccessibilityText.Storage(v3, v11, v10 & 1);
            v11 = 0;
            *(_QWORD *)(a1 + 40) = v35;
            *(_QWORD *)(a1 + 16) = v38;
            v10 = 1;
            v9 = v55;
            goto LABEL_7;
          }
LABEL_58:
          __break(1u);
LABEL_59:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_60:
          v44 = v10;
          v45 = v9;
        }
        v46 = v11;
      }
LABEL_62:
      outlined consume of AccessibilityText.Storage(v45, v46, v44);
      return;
    }
    if (v16 != 1)
    {
      switch(v14 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_60;
          goto LABEL_7;
        case 1uLL:
          v13 = *(_QWORD *)(a1 + 8) + 8;
          if (v8 < v13)
            goto LABEL_59;
          goto LABEL_6;
        case 2uLL:
          v43 = ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_60;
          if (v43 < 0)
            goto LABEL_73;
          v13 = *(_QWORD *)(a1 + 8) + v43;
          if (v8 < v13)
            goto LABEL_59;
LABEL_6:
          *(_QWORD *)(a1 + 8) = v13;
          break;
        case 5uLL:
          v13 = *(_QWORD *)(a1 + 8) + 4;
          if (v8 < v13)
            goto LABEL_59;
          goto LABEL_6;
        default:
          goto LABEL_59;
      }
      goto LABEL_7;
    }
    if ((v14 & 7) != 2)
      goto LABEL_59;
    v17 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_60;
    v18 = v17;
    if (v17 < 0)
      break;
    v19 = *(_QWORD *)(a1 + 8);
    if (v8 < v19 + v17)
      goto LABEL_59;
    v3 = (id *)v11;
    *(_QWORD *)(a1 + 8) = v19 + v17;
    if (v17)
    {
      v20 = v19 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
      v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;
      if (__OFADD__(v20, v18))
        goto LABEL_70;
      if (v20 + v18 < v20)
        goto LABEL_71;
      v24 = v21;
      v25 = Data._Representation.subscript.getter();
      v27 = v26;
      outlined consume of Data._Representation(v24, v23);
    }
    else
    {
      v25 = 0;
      v27 = 0xC000000000000000;
    }
    static String.Encoding.utf8.getter();
    v39 = String.init(data:encoding:)();
    if (!v40)
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      outlined consume of Data._Representation(v25, v27);
      v44 = v10 & 1;
      v45 = v9;
      v46 = (uint64_t)v3;
      goto LABEL_62;
    }
    v41 = (id *)v39;
    v42 = v40;
    outlined consume of Data._Representation(v25, v27);
    outlined consume of AccessibilityText.Storage(v9, (uint64_t)v3, v10 & 1);
    v10 = 0;
    v9 = v41;
    v11 = v42;
LABEL_7:
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v7 >= v8)
      goto LABEL_4;
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  __break(1u);
  v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v50 = v49[2];
  if (!v50)
  {
    __break(1u);
    JUMPOUT(0x2351848F0);
  }
  v47 = v50 - 1;
  v48 = v49[v47 + 4];
  v49[2] = v47;
  outlined consume of AccessibilityText.Storage(v9, v11, v10 & 1);
  *(_QWORD *)(a1 + 40) = v49;
  *(_QWORD *)(a1 + 16) = v48;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AccessibilityText()
{
  AccessibilityText.encode(to:)();
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance AccessibilityText(uint64_t a1@<X0>, id **a2@<X8>)
{
  AccessibilityText.init(from:)(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityText@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityText(_QWORD *a1)
{
  uint64_t v1;
  __int16 v2;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  return specialized CodableByProtobuf.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), v2 | *(unsigned __int8 *)(v1 + 16));
}

uint64_t CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int16 v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  id v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  __int128 v29[2];
  uint64_t v30;
  __int128 v31;
  __int16 v32;
  __int16 v33;
  unsigned __int8 v34;
  __int128 v35;

  v7 = *a2;
  v6 = a2[1];
  if (!a1)
  {
LABEL_23:
    swift_release();
    result = swift_release();
    goto LABEL_24;
  }
  v11 = *a4;
  v10 = a4[1];
  if (one-time initialization token for current != -1)
    swift_once();
  if ((static CodableAccessibilityVersion.current & 1) == 0)
  {
    *(_QWORD *)&v29[0] = v7;
    *((_QWORD *)&v29[0] + 1) = v6;
    *(_QWORD *)&v35 = v11;
    *((_QWORD *)&v35 + 1) = v10;
    v15 = (void *)static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(a1, v29, 0, 1, 0, 0, &v35, 8236, 0xE200000000000000);
    if (v15)
    {
      v16 = v15;
      *(_QWORD *)&v35 = v7;
      *((_QWORD *)&v35 + 1) = v6;
      v17 = *(_QWORD *)(a1 + 16);
      if (v17)
      {
        v18 = a1 + 32;
        v27 = v15;
        v26 = v15;
        swift_bridgeObjectRetain();
        v19 = 0;
        while (1)
        {
          v20 = *(_QWORD *)(v18 + 32 * v19 + 24);
          v21 = *(_QWORD *)(v20 + 16);
          if (v21)
            break;
LABEL_14:
          if (++v19 == v17)
          {
            swift_bridgeObjectRelease();
            v23 = 0;
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRetain();
        v22 = (_BYTE *)(v20 + 40);
        while (1)
        {
          if ((*v22 & 0xE0) == 0xC0)
          {
            type metadata accessor for CollapsibleTextModifier();
            if (swift_dynamicCastClass())
              break;
          }
          v22 += 16;
          if (!--v21)
          {
            swift_bridgeObjectRelease();
            v18 = a1 + 32;
            goto LABEL_14;
          }
        }
        swift_bridgeObjectRelease_n();
        v23 = 1;
LABEL_21:
        v24 = v26;
        v16 = v27;
      }
      else
      {
        v24 = v15;
        v23 = 0;
      }
      swift_bridgeObjectRelease();
      v34 = 2;
      v33 = 512;
      v32 = 0;
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      v31 = xmmword_235260F00;
      v28 = MEMORY[0x24BEE4AF8];
      v25 = specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v16, (unint64_t *)&v35, (char *)&v33, v23, &v32, v29, &v28, MEMORY[0x24BEE4AF8], 0.0, 0.0, 0.0, 0.0, MEMORY[0x24BEE4AF8], &v34, 0);

      swift_release();
      result = swift_release();
      *(_QWORD *)a5 = v25;
      *(_QWORD *)(a5 + 8) = 0;
      *(_BYTE *)(a5 + 18) = 0;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  *(_QWORD *)&v29[0] = v7;
  *((_QWORD *)&v29[0] + 1) = v6;
  *(_QWORD *)&v35 = v11;
  *((_QWORD *)&v35 + 1) = v10;
  v12 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(a1, v29, 1, 1, 0, 0, &v35, 8236, 0xE200000000000000);
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if (!v12)
  {
LABEL_24:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 18) = -1;
LABEL_27:
    *(_WORD *)(a5 + 16) = 0;
    return result;
  }
  *(_QWORD *)a5 = v12;
  *(_QWORD *)(a5 + 8) = 0;
  if ((a3 & 1) != 0)
    v14 = 257;
  else
    v14 = 1;
  *(_BYTE *)(a5 + 18) = 1;
  *(_WORD *)(a5 + 16) = v14;
  return result;
}

void AccessibilityTextAttributes.contentType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *AccessibilityTextAttributes.contentType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*AccessibilityTextAttributes.contentType.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityTextAttributes.headingLevel.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AccessibilityTextAttributes.headingLevel.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*AccessibilityTextAttributes.headingLevel.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityTextAttributes.durationTimeMMSS.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AccessibilityTextAttributes.durationTimeMMSS.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*AccessibilityTextAttributes.durationTimeMMSS.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityTextAttributes.label.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[1];
  outlined copy of Text?(v1, v0[2], v0[3], v0[4]);
  return v1;
}

uint64_t AccessibilityTextAttributes.label.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t result;

  result = outlined consume of Text?(v4[1], v4[2], v4[3], v4[4]);
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
  return result;
}

uint64_t (*AccessibilityTextAttributes.label.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_BYTE *AccessibilityTextAttributes.init(contentType:headingLevel:durationTimeMMSS:label:)@<X0>(_BYTE *result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_BYTE *)a8 = *result;
  *(_BYTE *)(a8 + 1) = a2;
  *(_BYTE *)(a8 + 2) = a3;
  *(_QWORD *)(a8 + 8) = a4;
  *(_QWORD *)(a8 + 16) = a5;
  *(_QWORD *)(a8 + 24) = a6;
  *(_QWORD *)(a8 + 32) = a7;
  return result;
}

uint64_t AccessibilityTextAttributes.combined(with:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *((_QWORD *)a1 + 4);
  v8 = v2[1];
  v16 = *v2;
  v17 = v2[2];
  if (v7)
  {
    v10 = *((_QWORD *)a1 + 2);
    v9 = *((_QWORD *)a1 + 3);
    v11 = *((_QWORD *)a1 + 1);
    outlined copy of Text.Storage(v11, v10, a1[24] & 1);
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *((_QWORD *)v2 + 3);
    v7 = *((_QWORD *)v2 + 4);
    v11 = *((_QWORD *)v2 + 1);
    v10 = *((_QWORD *)v2 + 2);
    result = outlined copy of Text?(v11, v10, v9, v7);
  }
  if (v5 == 7)
    v13 = v8;
  else
    v13 = v5;
  v14 = v16;
  if (v4 != 8)
    v14 = v4;
  *(_BYTE *)a2 = v14;
  *(_BYTE *)(a2 + 1) = v13;
  v15 = v17;
  if (v6 != 2)
    v15 = v6;
  *(_BYTE *)(a2 + 2) = v15;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t AccessibilityTextModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_BYTE *)(v1 + 18);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  *(_WORD *)a1 = *(_WORD *)(v1 + 16);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  return outlined copy of Text?(v3, v4, v5, v6);
}

__n128 AccessibilityTextModifier.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  __n128 result;

  v2 = swift_allocObject();
  v3 = *(_BYTE *)(a1 + 2);
  *(_WORD *)(v2 + 16) = *(_WORD *)a1;
  *(_BYTE *)(v2 + 18) = v3;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

uint64_t AccessibilityTextModifier.init(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(a1 + 2);
  *(_WORD *)(v1 + 16) = *(_WORD *)a1;
  *(_BYTE *)(v1 + 18) = v2;
  *(_OWORD *)(v1 + 24) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 24);
  return v1;
}

Swift::Bool __swiftcall AccessibilityTextModifier.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  return *(_DWORD *)options.rawValue & 1;
}

uint64_t AccessibilityTextModifier.modify(style:environment:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v3 = a1[36];
  if (v3 == 1)
  {
    v4 = *(unsigned __int8 *)(v1 + 16);
    v5 = *(unsigned __int8 *)(v1 + 17);
    v6 = *(unsigned __int8 *)(v1 + 18);
    v8 = *(_QWORD *)(v1 + 24);
    v7 = *(_QWORD *)(v1 + 32);
    v10 = *(_QWORD *)(v1 + 40);
    v9 = *(_QWORD *)(v1 + 48);
    result = outlined copy of Text?(v8, v7, v10, v9);
  }
  else
  {
    v12 = a1[32];
    v19 = a1[33];
    v14 = a1[34];
    v13 = a1[35];
    v15 = v12;
    v18 = *(unsigned __int8 *)(v1 + 18);
    if (v12 == 8)
      v15 = *(unsigned __int8 *)(v1 + 16);
    v21 = v15;
    if (BYTE1(v12) == 7)
      v16 = *(unsigned __int8 *)(v1 + 17);
    else
      v16 = BYTE1(v12);
    v20 = v16;
    if (v3)
    {
      v17 = a1[33];
      outlined copy of Text.Storage(v19, v14, v13 & 1);
      swift_bridgeObjectRetain();
      v10 = v13;
      v7 = v14;
      v8 = v19;
      v9 = v3;
    }
    else
    {
      v10 = *(_QWORD *)(v1 + 40);
      v9 = *(_QWORD *)(v1 + 48);
      v8 = *(_QWORD *)(v1 + 24);
      v7 = *(_QWORD *)(v1 + 32);
      outlined copy of Text?(v8, v7, v10, v9);
      v17 = v19;
      outlined consume of AccessibilityTextAttributes?(v12, v19, v14, v13, 0);
    }
    result = outlined consume of AccessibilityTextAttributes?(v12, v17, v14, v13, v3);
    if (BYTE2(v12) == 2)
      v6 = v18;
    else
      v6 = BYTE2(v12);
    v5 = v20;
    v4 = v21;
  }
  a1[32] = v4 | ((unint64_t)v5 << 8) | ((unint64_t)v6 << 16);
  a1[33] = v8;
  a1[34] = v7;
  a1[35] = v10;
  a1[36] = v9;
  return result;
}

uint64_t AccessibilityTextModifier.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int16 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(_QWORD *)(v1 + 32);
    v4 = *(_QWORD *)(v1 + 40);
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_WORD *)(v0 + 16);
    v7 = *(_BYTE *)(v0 + 18);
    v19 = *(unsigned __int16 *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 18) << 16);
    v20 = v2;
    v21 = v3;
    v22 = v4;
    v23 = v5;
    v15 = v6;
    v16 = v7;
    v17 = *(_OWORD *)(v0 + 24);
    v18 = *(_OWORD *)(v0 + 40);
    outlined copy of Text?(v2, v3, v4, v5);
    outlined copy of Text?(v2, v3, v4, v5);
    v8 = specialized static AccessibilityTextAttributes.== infix(_:_:)((unsigned __int8 *)&v19, (unsigned __int8 *)&v15);
    outlined consume of Text?(v20, v21, v22, v23);
    outlined consume of Text?(v2, v3, v4, v5);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 24);
    v10 = *(_QWORD *)(v0 + 32);
    v11 = *(_QWORD *)(v0 + 40);
    v12 = *(_QWORD *)(v0 + 48);
    v13 = *(unsigned __int16 *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 18) << 16);
    outlined copy of Text?(v9, v10, v11, v12);
    outlined consume of AccessibilityTextAttributes?(0, 0, 0, 0, 1);
    outlined consume of AccessibilityTextAttributes?(v13, v9, v10, v11, v12);
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t AccessibilityTextModifier.__ivar_destroyer()
{
  uint64_t *v0;

  return outlined consume of Text?(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t *AccessibilityTextModifier.deinit()
{
  uint64_t *v0;

  outlined consume of Text?(v0[3], v0[4], v0[5], v0[6]);
  return v0;
}

uint64_t AccessibilityTextModifier.__deallocating_deinit()
{
  uint64_t *v0;

  outlined consume of Text?(v0[3], v0[4], v0[5], v0[6]);
  return swift_deallocClassInstance();
}

uint64_t AccessibilityImageLabel.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;

  if (a1)
  {
    result = String.init<A>(_:)();
    v5 = v4;
    v6 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    result = 0;
    v6 = 0;
    v5 = xmmword_2352D3330;
  }
  *(_QWORD *)a2 = result;
  *(_OWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t AccessibilityImageLabel.SystemSymbolTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *a2;
  v8 = a2[1];
  v10 = *a3;
  if ((*a3 & 1) == 0)
    goto LABEL_4;
  v11 = *(_QWORD *)(v5 + 16);
  v12 = *(_QWORD *)(v5 + 24);
  v23 = *a2;
  v24 = v8;
  swift_bridgeObjectRetain();
  v13 = specialized static AccessibilityCore.description(for:in:)(v11, v12, &v23);
  v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    v23 = v13;
    v24 = v15;
    v21 = v9;
    v22 = v8;
    v20 = v10;
    v16 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v23, &v21, &v20, a4, MEMORY[0x24BEE0D00], a5, v16);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_4:
    v18 = *(_QWORD *)(v5 + 24);
    v23 = *(_QWORD *)(v5 + 16);
    v24 = v18;
    v21 = v9;
    v22 = v8;
    v20 = v10;
    v19 = lazy protocol witness table accessor for type String and conformance String();
    return ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v23, &v21, &v20, a4, MEMORY[0x24BEE0D00], a5, v19);
  }
}

uint64_t AccessibilityImageLabel.SystemSymbolTextStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage();
  v1 = swift_dynamicCastClass();
  if (v1
    && (v3 = *(_QWORD *)(v1 + 16),
        v2 = *(_QWORD *)(v1 + 24),
        v5 = *(_QWORD *)(v0 + 16),
        v4 = *(_QWORD *)(v0 + 24),
        swift_bridgeObjectRetain(),
        v2))
  {
    if (v3 == v5 && v2 == v4)
      v7 = 1;
    else
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t AccessibilityImageLabel.SystemSymbolTextStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, _QWORD *a2, void **a3)
{
  void *v4;
  uint64_t v5;

  v4 = *a3;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v5 = dispatch thunk of Hashable.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v5;
  CodablePlatformFont.encode(to:)((__CFString **)a1, v4);
}

void specialized closure #1 in CodableByProtobuf.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v3 = dispatch thunk of Hashable.hashValue.getter();
  swift_bridgeObjectRelease();
  a1[4] = v3;
  ResolvedGradient.encode(to:)(a1);
}

void specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v3 = dispatch thunk of Hashable.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v3;
  AccessibilityText.encode(to:)();
}

{
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v3 = dispatch thunk of Hashable.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v3;
  CodableNSAttributes.encode(to:)(a1);
}

uint64_t specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v3 = dispatch thunk of Hashable.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v3;
  return ContentTransition.Style.encode(to:)(a1);
}

uint64_t specialized static AccessibilityText.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      v4 = 1;
      outlined copy of AccessibilityText.Storage(v5, v6, 1);
      outlined copy of AccessibilityText.Storage(v2, v3, 1);
      v8 = static NSObject.== infix(_:_:)();
      v7 = 1;
      goto LABEL_13;
    }
LABEL_5:
    outlined copy of AccessibilityText.Storage(*(void **)a2, *(_QWORD *)(a2 + 8), v7);
    outlined copy of AccessibilityText.Storage(v2, v3, v4);
    v8 = 0;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_5;
  if (v2 == v5 && v3 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of AccessibilityText.Storage(v5, v6, 0);
  outlined copy of AccessibilityText.Storage(v2, v3, 0);
  v4 = 0;
  v7 = 0;
LABEL_13:
  outlined consume of AccessibilityText.Storage(v2, v3, v4);
  outlined consume of AccessibilityText.Storage(v5, v6, v7);
  return v8 & 1;
}

uint64_t specialized static AccessibilityText.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  int v5;
  uint64_t v6;
  void *v7;
  char v8;
  int v9;
  char v10;
  uint64_t result;
  void *v12;
  char v14;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 17);
  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 17);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      outlined copy of AccessibilityText.Storage(v7, v6, 1);
      outlined copy of AccessibilityText.Storage(v3, v2, 1);
      outlined copy of AccessibilityText.Storage(v7, v6, 1);
      outlined copy of AccessibilityText.Storage(v3, v2, 1);
      v10 = static NSObject.== infix(_:_:)();
      outlined consume of AccessibilityText.Storage(v3, v2, 1);
      outlined consume of AccessibilityText.Storage(v7, v6, 1);
      outlined consume of AccessibilityText.Storage(v7, v6, 1);
      outlined consume of AccessibilityText.Storage(v3, v2, 1);
      if ((v10 & 1) == 0)
        return 0;
      return v5 ^ v9 ^ 1u;
    }
LABEL_6:
    outlined copy of AccessibilityText.Storage(*(void **)a2, *(_QWORD *)(a2 + 8), v8);
    outlined copy of AccessibilityText.Storage(v3, v2, v4);
    outlined consume of AccessibilityText.Storage(v3, v2, v4);
    outlined consume of AccessibilityText.Storage(v7, v6, v8);
    return 0;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_6;
  v12 = *(void **)a1;
  if (v3 == v7 && v2 == v6)
  {
    outlined copy of AccessibilityText.Storage(v12, v2, 0);
    outlined copy of AccessibilityText.Storage(v3, v2, 0);
    outlined consume of AccessibilityText.Storage(v3, v2, 0);
    outlined consume of AccessibilityText.Storage(v3, v2, 0);
    return v5 ^ v9 ^ 1u;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of AccessibilityText.Storage(v7, v6, 0);
  outlined copy of AccessibilityText.Storage(v3, v2, 0);
  outlined consume of AccessibilityText.Storage(v3, v2, 0);
  outlined consume of AccessibilityText.Storage(v7, v6, 0);
  result = 0;
  if ((v14 & 1) != 0)
    return v5 ^ v9 ^ 1u;
  return result;
}

uint64_t specialized static AccessibilityTextAttributes.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t (*v19)(uint64_t);
  char v20;
  char v21;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v13 = *((_QWORD *)a2 + 1);
  v12 = *((_QWORD *)a2 + 2);
  v15 = *((_QWORD *)a2 + 3);
  v14 = *((_QWORD *)a2 + 4);
  if (v2 == 8)
  {
    if (v9 != 8)
      goto LABEL_22;
  }
  else
  {
    v16 = 0;
    if (v9 == 8 || v2 != v9)
      return v16 & 1;
  }
  if (v3 == 7)
  {
    if (v10 != 7)
      goto LABEL_22;
  }
  else
  {
    v16 = 0;
    if (v10 == 7 || v3 != v10)
      return v16 & 1;
  }
  if (!v7)
  {
    if (!v14)
      goto LABEL_29;
LABEL_22:
    v16 = 0;
    return v16 & 1;
  }
  if (!v14)
    goto LABEL_22;
  if ((v8 & 1) != 0)
  {
    if ((v15 & 1) != 0)
    {
      v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96);
      outlined copy of Text?(v5, v6, v8, v7);
      outlined copy of Text?(v5, v6, v8, v7);
      outlined copy of Text?(v13, v12, v15, v14);
      outlined copy of Text.Storage(v5, v6, 1);
      outlined copy of Text.Storage(v13, v12, 1);
      LOBYTE(v19) = v19(v13);
      outlined consume of Text.Storage(v13, v12, 1);
      outlined consume of Text.Storage(v5, v6, 1);
      v17 = 1;
      if ((v19 & 1) != 0)
        goto LABEL_28;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((v15 & 1) != 0)
  {
LABEL_20:
    outlined copy of Text?(*((_QWORD *)a1 + 1), v6, v8, v7);
    outlined copy of Text?(v5, v6, v8, v7);
    outlined copy of Text?(v13, v12, v15, v14);
    v17 = (v8 & 1) == 0;
LABEL_21:
    outlined consume of Text.Storage(v13, v12, v17);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v5, v6, v8 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v5, v6, v8, v7);
    goto LABEL_22;
  }
  if (v5 == v13 && v6 == v12)
  {
    outlined copy of Text?(*((_QWORD *)a1 + 1), v6, v8, v7);
    outlined copy of Text?(v5, v6, v8, v7);
    outlined copy of Text?(v5, v6, v15, v14);
    goto LABEL_28;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v5, v6, v8, v7);
  outlined copy of Text?(v5, v6, v8, v7);
  outlined copy of Text?(v13, v12, v15, v14);
  v17 = 0;
  if ((v20 & 1) == 0)
    goto LABEL_21;
LABEL_28:
  v21 = specialized static Array<A>.== infix(_:_:)(v7, v14);
  outlined consume of Text.Storage(v13, v12, v15 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v5, v6, v8 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v5, v6, v8, v7);
  if ((v21 & 1) == 0)
    goto LABEL_22;
LABEL_29:
  v16 = v4 == 2;
  if (v11 != 2)
    v16 = 0;
  if (v4 != 2 && v11 != 2)
    v16 = ((v4 & 1) == 0) ^ v11;
  return v16 & 1;
}

uint64_t specialized static AccessibilityImageLabel.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  char v12;
  char v14;
  char v15;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v7 = *a2;
  v6 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  if ((v5 & 0x8000000000000000) == 0)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if ((v5 & 1) != 0)
      {
        if ((v9 & 1) != 0)
        {
          v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96);
          outlined copy of AccessibilityImageLabel(*a2, a2[1], v9);
          outlined copy of AccessibilityImageLabel(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 1);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 1);
          if ((v10(v7) & 1) == 0)
            goto LABEL_26;
          goto LABEL_24;
        }
      }
      else if ((v9 & 1) == 0)
      {
        if (v2 == v7 && v3 == v6)
        {
          outlined copy of AccessibilityImageLabel(*a1, v3, v9);
          outlined copy of AccessibilityImageLabel(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
        }
        else
        {
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of AccessibilityImageLabel(v7, v6, v9);
          outlined copy of AccessibilityImageLabel(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
          if ((v14 & 1) == 0)
          {
LABEL_26:
            outlined consume of Text.Storage(v7, v6, v9 & 1);
            swift_bridgeObjectRelease();
            outlined consume of Text.Storage(v2, v3, v5 & 1);
            swift_bridgeObjectRelease();
            goto LABEL_15;
          }
        }
LABEL_24:
        v15 = specialized static Array<A>.== infix(_:_:)(v4, v8);
        outlined consume of Text.Storage(v7, v6, v9 & 1);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v2, v3, v5 & 1);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityImageLabel(v2, v3, v5);
        outlined consume of AccessibilityImageLabel(v7, v6, v9);
        if ((v15 & 1) != 0)
        {
          v12 = 1;
          return v12 & 1;
        }
        goto LABEL_16;
      }
    }
LABEL_14:
    outlined copy of AccessibilityImageLabel(*a2, a2[1], v9);
    outlined copy of AccessibilityImageLabel(v2, v3, v5);
LABEL_15:
    outlined consume of AccessibilityImageLabel(v2, v3, v5);
    outlined consume of AccessibilityImageLabel(v7, v6, v9);
LABEL_16:
    v12 = 0;
    return v12 & 1;
  }
  if ((v9 & 0x8000000000000000) == 0)
    goto LABEL_14;
  if (v2 == v7 && v3 == v6)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of AccessibilityImageLabel(v7, v6, v9);
  outlined copy of AccessibilityImageLabel(v2, v3, v5);
  outlined consume of AccessibilityImageLabel(v2, v3, v5);
  outlined consume of AccessibilityImageLabel(v7, v6, v9);
  return v12 & 1;
}

uint64_t specialized Text.storedAccessibilityLabel.getter(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_BYTE *)(a1 + 16 * v1 + 24);
    v3 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      if ((*v2 & 0xE0) == 0xC0)
      {
        type metadata accessor for AccessibilityTextModifier();
        result = swift_dynamicCastClass();
        if (result)
        {
          if (*(_QWORD *)(result + 48))
            break;
        }
      }
      v2 -= 16;
      if (!--v3)
        return 0;
    }
    if (!v3)
      return 0;
    if (v3 > v1)
    {
      __break(1u);
    }
    else if ((*v2 & 0xE0) == 0xC0)
    {
      result = swift_dynamicCastClass();
      if (result)
      {
        if (*(_QWORD *)(result + 48))
        {
          v5 = *(_QWORD *)(result + 24);
          outlined copy of Text.Storage(v5, *(_QWORD *)(result + 32), *(_BYTE *)(result + 40) & 1);
          swift_bridgeObjectRetain();
          return v5;
        }
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTextStorage()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage()
{
  return objc_opt_self();
}

unint64_t instantiation function for generic protocol witness table for AccessibilityText(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  result = lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t dispatch thunk of static TextAccessibilityProvider.makeView(content:text:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a8 + 24))(a1, a2, a3, a4 & 1);
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityText(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithCopy for AccessibilityText(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of AccessibilityText.Storage(v7, v8, v9);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for AccessibilityText(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of AccessibilityText.Storage(v5, v6, v7);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityText()
{
  return &type metadata for AccessibilityText;
}

void destroy for AccessibilityText.Storage(uint64_t a1)
{
  outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityText.Storage(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessibilityText.Storage(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AccessibilityText.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AccessibilityText.Storage(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AccessibilityText.Storage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityText.Storage()
{
  return &type metadata for AccessibilityText.Storage;
}

uint64_t method lookup function for AccessibilityTextStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AccessibilityTextStorage.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t destroy for AccessibilityTextAttributes(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
  {
    outlined consume of Text.Storage(*(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_BYTE *)(result + 24));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityTextAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_BYTE *)(a2 + 24);
    outlined copy of Text.Storage(v4, v5, v6);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityTextAttributes(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_BYTE *)(a2 + 24);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      v12 = *(_BYTE *)(a1 + 24);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 24) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 8);
      v16 = v5[1];
      *v4 = *v5;
      v4[1] = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(_BYTE *)(a2 + 24);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v14;
    *(_BYTE *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 24);
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v17;
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityTextAttributes(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = (_OWORD *)(a1 + 8);
  v4 = (_OWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5)
  {
    outlined destroy of Text(a1 + 8);
LABEL_5:
    v10 = v4[1];
    *v3 = *v4;
    v3[1] = v10;
    return a1;
  }
  v6 = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityTextAttributes()
{
  return &type metadata for AccessibilityTextAttributes;
}

uint64_t type metadata accessor for AccessibilityTextModifier()
{
  return objc_opt_self();
}

uint64_t method lookup function for AccessibilityTextModifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AccessibilityTextModifier.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t destroy for AccessibilityImageLabel(uint64_t *a1)
{
  return outlined consume of AccessibilityImageLabel(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for AccessibilityImageLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of AccessibilityImageLabel(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessibilityImageLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of AccessibilityImageLabel(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of AccessibilityImageLabel(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for AccessibilityImageLabel(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of AccessibilityImageLabel(v3, v5, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityImageLabel()
{
  return &type metadata for AccessibilityImageLabel;
}

void partial apply for specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(_QWORD **)(v1 + 16));
}

{
  uint64_t v1;

  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(_QWORD **)(v1 + 16));
}

{
  uint64_t v1;

  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(_QWORD **)(v1 + 16), *(void ***)(v1 + 24));
}

unint64_t specialized CodableByProtobuf.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v3 = (unint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v4 = (uint64_t)v9;
    v5 = v10;
    outlined copy of Data._Representation((uint64_t)v9, v10);
    ProtobufDecoder.init(_:)((uint64_t)v9, v10);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v6 = dispatch thunk of Hashable.hashValue.getter();
    swift_bridgeObjectRelease();
    v11 = v6;
    v3 = specialized CodablePlatformFont.init(from:)((uint64_t)&v9);
    outlined consume of Data._Representation(v4, v5);
    v7 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t partial apply for specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(_QWORD **)(v1 + 16));
}

void partial apply for specialized closure #1 in CodableByProtobuf.encode(to:)(_QWORD *a1)
{
  uint64_t v1;

  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(_QWORD **)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyTextAccessibilityProvider, &type metadata for EmptyTextAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyTextAccessibilityProvider()
{
  return &type metadata for EmptyTextAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.TextAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.TextAccessibilityProviderKey;
}

uint64_t associated type witness table accessor for TextAccessibilityProvider.Body : View in EmptyTextAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_235186AB8()
{
  return &protocol witness table for StyledTextContentView;
}

void static _GraphInputs.defaultInterfaceIdiom.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;

  type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, a1, a2, a3);
  *a4 = v5;
  a4[1] = &protocol witness table for InterfaceIdiomBox<A>;
}

void _GraphInputs.interfaceIdiom.getter(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _UNKNOWN **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = specialized find<A>(_:key:)(v3);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
LABEL_5:
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, v7, v8, v9);
    v6 = v10;
    v5 = &protocol witness table for InterfaceIdiomBox<A>;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v4 + 72);
  v5 = *(_UNKNOWN ***)(v4 + 80);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (!v6)
    goto LABEL_5;
LABEL_6:
  *a1 = v6;
  a1[1] = v5;
}

uint64_t static AnyInterfaceIdiom.~= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];

  v6 = MEMORY[0x24BDAC7A8](a1);
  v9 = *v8;
  v10 = v8[1];
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v6);
  AnyInterfaceIdiom.init<A>(_:)(a3, a4, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(v14[0], v14[1], v9, v10) & 1;
}

uint64_t static InterfaceIdiomPredicate.evaluate(inputs:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (!v2)
  {
    swift_release();
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(v2 + 72);
  swift_release();
  if (!v3)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, v4, v5, v6);
    return AnyInterfaceIdiom.accepts<A>(_:)() & 1;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return AnyInterfaceIdiom.accepts<A>(_:)() & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InterfaceIdiomPredicate<A>(uint64_t *a1)
{
  return static InterfaceIdiomPredicate.evaluate(inputs:)(a1);
}

void static InterfaceIdiomInput.defaultValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t type metadata accessor for InterfaceIdiomPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InterfaceIdiomPredicate);
}

ValueMetadata *type metadata accessor for InterfaceIdiomInput()
{
  return &type metadata for InterfaceIdiomInput;
}

uint64_t _ClipEffect.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ClipEffect.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ClipEffect.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ClipEffect.style.getter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;

  v2 = (unsigned __int8 *)(v1 + *(int *)(a1 + 36));
  v3 = *v2;
  if (v2[1])
    v4 = 256;
  else
    v4 = 0;
  return v4 | v3;
}

uint64_t _ClipEffect.style.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = (_BYTE *)(v2 + *(int *)(a2 + 36));
  *v3 = result & 1;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*_ClipEffect.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ClipEffect.init(shape:style:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  _BYTE *v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for _ClipEffect(0, a3, a4, v9);
  v11 = (_BYTE *)(a5 + *(int *)(result + 36));
  *v11 = a2 & 1;
  v11[1] = HIBYTE(a2) & 1;
  return result;
}

uint64_t type metadata accessor for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ClipEffect);
}

uint64_t _ClipEffect.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t _ClipEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  specialized RendererVisualEffect.animatableData.setter(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*_ClipEffect.animatableData.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  size_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v7 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _ScrollClipEffect.animatableData.modify;
}

double _ClipEffect.effectValue(size:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  double result;
  __int128 v8;
  char *v9;
  char v10;
  _OWORD v11[2];
  char v12;

  Shape.effectivePath(in:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)v11, a3);
  v6 = swift_allocObject();
  result = *(double *)v11;
  v8 = v11[1];
  *(_OWORD *)(v6 + 16) = v11[0];
  *(_OWORD *)(v6 + 32) = v8;
  *(_BYTE *)(v6 + 48) = v12;
  v9 = (char *)(v3 + *(int *)(a1 + 36));
  v10 = *v9;
  LOBYTE(v9) = v9[1];
  *(_BYTE *)(v6 + 49) = v10;
  *(_BYTE *)(v6 + 50) = (_BYTE)v9;
  *(_DWORD *)(v6 + 52) = 0;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 6;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ClipEffect<A>(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = v2;
  v5[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  _ClipEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>;
}

uint64_t View.clipShape<A>(_:style:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;

  v21 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _ClipEffect(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v16);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v11, a4);
  v19 = &v18[*(int *)(v14 + 36)];
  *v19 = a2 & 1;
  v19[1] = HIBYTE(a2) & 1;
  View.modifier<A>(_:)(v18, a3, v14, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t View.clipped(antialiased:)(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  __int16 v7;

  v6 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  if ((a1 & 1) != 0)
    v7 = 256;
  else
    v7 = 0;
  return View.clipShape<A>(_:style:)(v6, v7, a2, (uint64_t)&type metadata for Rectangle, a3);
}

uint64_t View.cornerRadius(_:antialiased:)(char a1, uint64_t a2, uint64_t a3, double a4)
{
  __int16 v7;
  _QWORD v9[2];
  char v10;

  v10 = 1;
  *(double *)v9 = a4;
  *(double *)&v9[1] = a4;
  lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
  if ((a1 & 1) != 0)
    v7 = 256;
  else
    v7 = 0;
  return View.clipShape<A>(_:style:)((uint64_t)v9, v7, a2, (uint64_t)&type metadata for RoundedRectangle, a3);
}

void HoverEffectContent.clipShape<A>(_:style:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void VisualEffect.clipShape<A>(_:style:)(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v21 = a5;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _ClipEffect(0, v14, v15, v14);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a1, a4, v17);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v13, a4);
  v20 = &v19[*(int *)(v16 + 36)];
  *v20 = a2 & 1;
  v20[1] = HIBYTE(a2) & 1;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ClipEffect<A>, v16);
  VisualEffect.rendererEffect<A>(_:)((uint64_t)v19, a3, v16, v21, a6);
}

uint64_t sub_235187424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_235187454()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t instantiation function for generic protocol witness table for _ClipEffect<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ClipEffect<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2351874AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _ClipEffect(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4);
  return _ClipEffect.animatableData.getter(v4);
}

uint64_t sub_2351874E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for _ClipEffect(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return specialized RendererVisualEffect.animatableData.setter(a1, v5);
}

uint64_t sub_235187520()
{
  return 16;
}

__n128 sub_23518752C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _ClipEffect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ClipEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_WORD *)((char *)v4 + v6) = *(_WORD *)((char *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_WORD *)(*(_QWORD *)(v5 + 64) + a1) = *(_WORD *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_WORD *)(*(_QWORD *)(v5 + 64) + a1) = *(_WORD *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _ClipEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 2;
  v10 = 8 * (v7 + 2);
  if ((v7 + 2) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -2)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_235187838 + 4 * byte_2352D36C8[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _ClipEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 2;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -2)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 2);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_235187A94(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _ClipEffect(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _ClipEffect<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t sub_235187AF4(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA11_ClipEffectVyAA9RectangleVGGAaBHPxAaBHD1__AiA0C8ModifierHPyHCHCTm(a1, &lazy cache variable for type metadata for _ClipEffect<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, (uint64_t)&type metadata for Rectangle);
}

uint64_t sub_235187B10(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA11_ClipEffectVyAA9RectangleVGGAaBHPxAaBHD1__AiA0C8ModifierHPyHCHCTm(a1, &lazy cache variable for type metadata for _ClipEffect<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA11_ClipEffectVyAA9RectangleVGGAaBHPxAaBHD1__AiA0C8ModifierHPyHCHCTm(uint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _ClipEffect<Rectangle>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _ClipEffect<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for _ClipEffect<Rectangle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for _ClipEffect(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_235187BE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_235187BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for _ClipEffect(255, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), a4);
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ClipEffect<A>, v4);
  v7 = type metadata accessor for RendererVisualEffect(255, v4, v5, v6);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for RendererVisualEffect<A>, v7);
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_235187C58(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedVisualEffect<A, B>, a1);
}

uint64_t static TupleDescriptor.tupleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t *, _QWORD);
  uint64_t v16[5];
  uint64_t v17;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v17 = a1;
  v9 = *(_QWORD *)(a3 + 8);
  v11 = type metadata accessor for TupleTypeDescription(0, a2, v9, v10);
  MEMORY[0x23B7C5A4C](v16, &v17, v8, MEMORY[0x24BEE0940], v11, MEMORY[0x24BEE0948]);
  result = swift_bridgeObjectRelease();
  v13 = v16[0];
  if (!v16[0])
  {
    TupleTypeDescription.init(_:)(a1, a2, v9, v16);
    v13 = v16[0];
    v16[4] = a1;
    v17 = v16[0];
    v14 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 32);
    swift_bridgeObjectRetain();
    v15 = (uint64_t (*)(uint64_t *, _QWORD))v14(v16, a2, a3);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    result = v15(v16, 0);
  }
  *a4 = v13;
  return result;
}

uint64_t type metadata accessor for TupleTypeDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleTypeDescription);
}

uint64_t TupleTypeDescription.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t TupleTypeMetadata2;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TypeConformance(255, a2, a3, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = Array.init()();
  v48 = v13;
  result = AGTupleCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v16 = result;
    if (result)
    {
      v36[0] = a4;
      v17 = 0;
      v40 = 0x80000002352E1320;
      *(_QWORD *)&v15 = 136446210;
      v37 = v15;
      v36[1] = MEMORY[0x24BEE4AD8] + 8;
      v38 = a3;
      v39 = v8;
      v41 = result;
      do
      {
        v19 = AGTupleElementType();
        static ProtocolDescriptor.conformance(of:)(v19, a2, a3, &v44);
        v20 = v44;
        if (v44)
        {
          v18 = v45;
          v44 = v17;
          v45 = v20;
          v46 = v18;
          type metadata accessor for Array();
          result = Array.append(_:)();
        }
        else
        {
          v44 = 0;
          v45 = 0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v44 = 0x65646E6920746120;
          v45 = 0xEA00000000002078;
          v47 = v17;
          v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v21);
          swift_bridgeObjectRelease();
          v22._countAndFlagsBits = 0x2065707974202CLL;
          v22._object = (void *)0xE700000000000000;
          String.append(_:)(v22);
          v23._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._countAndFlagsBits = v44;
          v25 = (void *)v45;
          v44 = 0xD000000000000015;
          v45 = v40;
          v24._object = v25;
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          v26 = v45;
          v42 = v44;
          if (one-time initialization token for unlocatedIssuesLog != -1)
            swift_once();
          v27 = __swift_project_value_buffer(v8, (uint64_t)static Log.unlocatedIssuesLog);
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v27, v8);
          swift_bridgeObjectRetain_n();
          v28 = Logger.logObject.getter();
          v29 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v28, v29))
          {
            v30 = swift_slowAlloc();
            v31 = v9;
            v32 = a1;
            v33 = swift_slowAlloc();
            v44 = v33;
            *(_DWORD *)v30 = v37;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v30 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v26, &v44);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_2349C4000, v28, v29, "%{public}s", (uint8_t *)v30, 0xCu);
            swift_arrayDestroy();
            v34 = v33;
            a1 = v32;
            v9 = v31;
            MEMORY[0x23B7C9D54](v34, -1, -1);
            v35 = v30;
            a3 = v38;
            v8 = v39;
            MEMORY[0x23B7C9D54](v35, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          result = swift_bridgeObjectRelease();
          v16 = v41;
        }
        ++v17;
      }
      while (v16 != v17);
      v13 = v48;
      a4 = (uint64_t *)v36[0];
    }
    *a4 = v13;
  }
  return result;
}

uint64_t TupleTypeDescription.contentTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of static TupleDescriptor.typeCache.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static TupleDescriptor.typeCache.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static TupleDescriptor.typeCache.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t _ViewInputs.geometryTransaction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned int *)(v0 + 28);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v3 = specialized find<A>(_:key:)(v1);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = (uint64_t *)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  v5 = *v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (*(_QWORD *)(v5 + 16))
    v2 = *(unsigned int *)(v5 + 32);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t ViewModifier.transaction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v14, v5, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a3);
  v16 = (_QWORD *)(a5 + *(int *)(type metadata accessor for _PushPopTransactionModifier(0, a3, a4, v15) + 36));
  *v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t View.transaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return View.modifier<A>(_:)(v5, a3, &type metadata for _TransactionModifier, a4);
}

uint64_t _ValueTransactionModifier.init(value:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueActionModifier.init(value:action:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier, a6);
}

uint64_t View.animation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v8[0] = partial apply for closure #1 in View.animation(_:);
  v8[1] = v6;
  View.modifier<A>(_:)(v8, a2, &type metadata for _TransactionModifier, a3);
  swift_retain();
  return swift_release();
}

uint64_t _PushPopTransactionModifier.init(content:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueActionModifier.init(value:action:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _PushPopTransactionModifier, a6);
}

uint64_t ViewModifier.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  ViewModifier.transaction(_:)((uint64_t)partial apply for closure #1 in ViewModifier.animation(_:), v8, a2, a3, a4);
  swift_retain();
  return swift_release();
}

uint64_t View.transaction<A>(_:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[2];
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a7;
  v27[1] = a4;
  v28 = a3;
  v29 = a1;
  v30 = a2;
  v31 = a8;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[0] = v13;
  v16 = type metadata accessor for CustomModifier(0, v13, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v27 - v18;
  v21 = type metadata accessor for _PushPopTransactionModifier(0, v16, (uint64_t)&protocol witness table for CustomModifier<A, B>, v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v27 - v23;
  v25 = PlaceholderContentView.init()(a5);
  v28(v25);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v12, a6);
  ViewModifier.transaction(_:)(v29, v30, v16, (uint64_t)&protocol witness table for CustomModifier<A, B>, (uint64_t)v24);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  View.modifier<A>(_:)(v24, v27[0], v21, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

uint64_t View.animation<A>(_:body:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  swift_retain();
  View.transaction<A>(_:body:)((uint64_t)partial apply for closure #1 in View.animation(_:), v14, a2, a3, a4, a5, a6, a7);
  return swift_release();
}

uint64_t closure #1 in View.animation(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t result;

  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  result = swift_release();
  if ((v5 & 1) == 0)
  {
    swift_retain_n();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(a1, a2);
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t static PlaceholderContentView.withPlaceholderContent<A>(result:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = PlaceholderContentView.init()(v9);
  a1(v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
}

double static CustomModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, double *a8@<X8>)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int ShouldRecordTree;
  void (*v29)(uint64_t *__return_ptr, int *, uint64_t *);
  double result;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v44;
  int v45;
  uint64_t v46;
  double v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v14 = a2[5];
  v15 = a2[6];
  v16 = *((_DWORD *)a2 + 20);
  v84 = *a2;
  v86 = v13;
  v87 = *(_OWORD *)(a2 + 3);
  v88 = v14;
  v89 = v15;
  v90 = *(_OWORD *)(a2 + 7);
  v91 = a2[9];
  v85 = v12;
  v92 = v16;
  v17 = type metadata accessor for PlaceholderContentView(0, a5, a3, a4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v17, a3, a4, v17);
  v49 = a5;
  v50 = a6;
  v51 = a7;
  LODWORD(v68) = v11;
  v40 = a7;
  v18 = type metadata accessor for CustomModifier(255, a5, a6, a7);
  type metadata accessor for _GraphValue(0, v18, v19, v20);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:), a6, &v48);
  v44 = v48;
  v21 = v84;
  v22 = v86;
  v38 = v87;
  v36 = v85;
  v37 = DWORD1(v87);
  v23 = HIDWORD(v87);
  v39 = DWORD2(v87);
  v24 = v88;
  v25 = v89;
  v26 = v90;
  v34 = DWORD2(v90);
  v35 = DWORD1(v90);
  v27 = HIDWORD(v91);
  v32 = v91;
  v33 = HIDWORD(v90);
  v31 = v92;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v68 = v21;
  v70 = v22;
  v69 = v36;
  v71 = v38;
  v72 = v37;
  v74 = v23;
  v75 = v24;
  v76 = v25;
  v77 = v26;
  v78 = v35;
  v79 = v34;
  v80 = v33;
  v81 = v32;
  v82 = v27;
  v83 = v31;
  v45 = v44;
  v52 = v21;
  v53 = v36;
  v54 = v22;
  v55 = v38;
  v56 = v37;
  v57 = 0;
  v58 = v23;
  v59 = v24;
  v60 = v25;
  v61 = v26;
  v62 = v35;
  v63 = v34;
  v64 = v33;
  v65 = v32;
  v66 = v27;
  v67 = v31;
  v29 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v40 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29(&v46, &v45, &v52);
  v73 = v39;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v46, (uint64_t)&v68);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  *(_QWORD *)a8 = v46;
  result = v47;
  a8[1] = v47;
  return result;
}

uint64_t closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for CustomModifier(0, a2, a3, a4);
  v9[3] = a3;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a3, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomModifier<A, B>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>)
{
  return static CustomModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a6);
}

uint64_t key path setter for _TransactionModifier.transform : _TransactionModifier(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t _TransactionModifier.transform.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t _TransactionModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_TransactionModifier.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _TransactionModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _TransactionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t _ValueTransactionModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ValueTransactionModifier.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ValueTransactionModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _ValueTransactionModifier.transform : <A>_ValueTransactionModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for _ValueTransactionModifier(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4)+ 36));
  v8 = *v6;
  v7 = v6[1];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  *a5 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  a5[1] = v9;
  return swift_retain();
}

uint64_t key path setter for _ValueTransactionModifier.transform : <A>_ValueTransactionModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  v11 = (_QWORD *)(a2 + *(int *)(type metadata accessor for _ValueTransactionModifier(0, v5, v6, v10) + 36));
  swift_retain();
  result = swift_release();
  *v11 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v11[1] = v9;
  return result;
}

uint64_t _ValueTransactionModifier.transform.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_ValueTransactionModifier.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ValueTransactionModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int OffsetAttribute2;
  id v17;
  void *v18;
  id v19;
  uint64_t Context;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD v44[2];
  unint64_t v45;
  uint64_t v46;

  v42 = a2;
  v46 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - v8;
  v11 = type metadata accessor for ValueTransactionSeed(0, a3, a4, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (_DWORD *)((char *)&v41 - v13);
  v15 = *a1;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
    closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(1, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for _ValueTransactionModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v17 = (id)AGSubgraphGetCurrent();
    if (!v17)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v18 = v17;
    v19 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v19 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (!Context)
    __break(1u);
  v21 = Context;
  swift_retain();

  swift_beginAccess();
  v22 = *(_DWORD *)(v21 + 68);
  swift_release();
  ChangedCallbacks.StateType.init()(a3, (uint64_t)v9);
  v23 = ValueTransactionSeed.init(value:transactionSeed:oldValue:)(OffsetAttribute2, v22, (uint64_t)v9, a3, a4, v14);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v39 = v11;
  v40 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueTransactionSeed<A>, v11, v24);
  type metadata accessor for Attribute<UInt32>();
  v25 = MEMORY[0x24BEE4078];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)(&v41 - 4), v11, MEMORY[0x24BEE4078], v26, MEMORY[0x24BEE40A8], v27);
  (*(void (**)(_DWORD *, uint64_t))(v12 + 8))(v14, v11);
  v28 = v44[0];
  v29 = AGGraphSetFlags();
  MEMORY[0x24BDAC7A8](v29);
  KeyPath = swift_getKeyPath();
  v44[0] = v15;
  v45 = KeyPath;
  MEMORY[0x24BDAC7A8](KeyPath);
  type metadata accessor for _ValueTransactionModifier(255, a3, a4, v31);
  type metadata accessor for (_:)();
  v32 = type metadata accessor for Focus();
  v39 = v32;
  v40 = MEMORY[0x23B7C9C04](MEMORY[0x24BE09660], v32);
  type metadata accessor for Attribute<(_:)>();
  v34 = v33;
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v44, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)(&v41 - 4), v32, v25, v34, MEMORY[0x24BEE40A8], v35);
  swift_release();
  swift_release();
  v36 = v42;
  v37 = *(_DWORD *)(v42 + 28);
  v44[0] = v28;
  v44[1] = v43;
  v45 = __PAIR64__(v22, v37);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildValueTransaction and conformance ChildValueTransaction();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v36 + 28) = result;
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ValueTransactionModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _ValueTransactionModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t (*_PushPopTransactionModifier.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_PushPopTransactionModifier.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _PushPopTransactionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt value;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char ShouldRecordTree;
  uint64_t v39;
  void (*v40)(_QWORD *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t);
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  int v60;
  _QWORD v61[2];
  int v62;
  Swift::UInt v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  Swift::UInt v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;

  v59 = a6;
  v45 = a4;
  v44 = a3;
  v95 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 28);
  v53 = *(_DWORD *)(a2 + 24);
  v14 = *(_DWORD *)(a2 + 32);
  v54 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v52 = *(_DWORD *)(a2 + 56);
  v51 = *(_DWORD *)(a2 + 60);
  v50 = *(_DWORD *)(a2 + 64);
  v49 = *(_DWORD *)(a2 + 68);
  v48 = *(_DWORD *)(a2 + 72);
  v47 = *(_DWORD *)(a2 + 76);
  v46 = *(_DWORD *)(a2 + 80);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v17 = specialized find<A>(_:key:)(v10);
  v56 = v14;
  if (v17)
  {
    v18 = (char **)(v17 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v18 = (char **)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  v19 = *v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v57 = a7;
  v55 = v11;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
  v21 = *((_QWORD *)v19 + 2);
  v20 = *((_QWORD *)v19 + 3);
  if (v21 >= v20 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v19);
  *((_QWORD *)v19 + 2) = v21 + 1;
  *(_DWORD *)&v19[4 * v21 + 32] = v13;
  v22 = swift_retain();
  v23 = specialized find<A>(_:key:)(v22);
  if (!v23 || (value = v10, !specialized static Array<A>.== infix(_:_:)((uint64_t)v19, *(_QWORD *)(v23 + 72))))
  {
    type metadata accessor for TypedElement<_GraphInputs.SavedTransactionKey>(0, v24, v25, v26);
    *(_QWORD *)(swift_allocObject() + 72) = v19;
    swift_bridgeObjectRetain();
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.SavedTransactionKey, 0, v10).value;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v28 = v59;
  closure #1 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(1, a5, v59, v29);
  LODWORD(v79) = AGGraphCreateOffsetAttribute2();
  HIDWORD(v79) = v13;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  v30 = Attribute.init<A>(body:value:flags:update:)();
  v31 = v30;
  v43 = (uint64_t)&v43;
  MEMORY[0x24BDAC7A8](v30);
  LODWORD(v79) = v9;
  v33 = type metadata accessor for _PushPopTransactionModifier(255, a5, v28, v32);
  type metadata accessor for _GraphValue(0, v33, v34, v35);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:), a5, &v62);
  v58 = v62;
  v36 = swift_allocObject();
  v37 = v45;
  *(_QWORD *)(v36 + 16) = v44;
  *(_QWORD *)(v36 + 24) = v37;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if ((ShouldRecordTree & 1) != 0)
    AGSubgraphBeginTreeElement();
  v79 = value;
  v81 = v12;
  v80 = v55;
  v82 = v53;
  v83 = v31;
  v85 = v54;
  v86 = v15;
  v87 = v16;
  v88 = v52;
  v89 = v51;
  v90 = v50;
  v91 = v49;
  v92 = v48;
  v93 = v47;
  v94 = v46;
  v60 = v58;
  v63 = value;
  v64 = v55;
  v65 = v12;
  v66 = v53;
  v67 = v31;
  v68 = 0;
  v69 = v54;
  v70 = v15;
  v71 = v16;
  v72 = v52;
  v73 = v51;
  v74 = v50;
  v75 = v49;
  v76 = v48;
  v77 = v47;
  v78 = v46;
  v39 = v59;
  v40 = *(void (**)(_QWORD *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v59 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v40(v61, &v60, &v63, partial apply for closure #3 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:), v36, a5, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v84 = v56;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v61, (uint64_t)&v79);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  v41 = v57;
  *v57 = v61[0];
  v41[1] = v61[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

