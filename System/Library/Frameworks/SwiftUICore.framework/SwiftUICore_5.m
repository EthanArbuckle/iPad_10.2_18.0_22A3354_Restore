uint64_t CollectionOfTwo.elements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  char *v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v21;

  v6 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v15 = (char *)&v21 + *(int *)(v14 + 48) - v12;
  v16 = *(_QWORD *)(v6 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 32);
  v17((char *)&v21 - v12, a1, v6, v11);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v15, a2, v6);
  v18 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v17)(v9, v13, v6);
  ((void (*)(char *, char *, uint64_t))v17)(v18, v15, v6);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 40);
  v19(v3, v9, v6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(v3 + *(int *)(TupleTypeMetadata2 + 48), v18, v6);
}

uint64_t (*CollectionOfTwo.elements.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CollectionOfTwo.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, double);
  uint64_t result;
  uint64_t v23;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v23 - v11;
  if (a1 == 1)
  {
    v13 = *(int *)(v9 + 48);
    v14 = &v12[v13];
    v15 = v4 + v13;
    v16 = *(_QWORD *)(v7 - 8);
    v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
    v17(v12, v4, v7, v10);
    ((void (*)(char *, uint64_t, uint64_t))v17)(v14, v15, v7);
LABEL_5:
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v14, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v12, v7);
  }
  if (!a1)
  {
    v18 = *(int *)(v9 + 48);
    v19 = &v12[v18];
    v20 = v4 + v18;
    v16 = *(_QWORD *)(v7 - 8);
    v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
    v21(v12, v4, v7, v10);
    ((void (*)(char *, uint64_t, uint64_t))v21)(v19, v20, v7);
    v14 = v12;
    v12 = v19;
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t key path setter for CollectionOfTwo.subscript(_:) : <A>CollectionOfTwo<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - v6;
  v9 = *v8;
  (*(void (**)(char *, double))(v10 + 16))((char *)&v15 - v6, v5);
  v13 = type metadata accessor for CollectionOfTwo(0, v4, v11, v12);
  return CollectionOfTwo.subscript.setter((uint64_t)v7, v9, v13);
}

uint64_t CollectionOfTwo.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
    v8 = a1;
    v9 = v5;
    return v7(v6, v8, v9);
  }
  if (!a2)
  {
    v9 = *(_QWORD *)(a3 + 16);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
    v6 = v3;
    v8 = a1;
    return v7(v6, v8, v9);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*CollectionOfTwo.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v11 = malloc(v10);
  v7[6] = v11;
  CollectionOfTwo.subscript.getter(a2, a3, (uint64_t)v11);
  return CollectionOfTwo.subscript.modify;
}

void CollectionOfTwo.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    v5 = v2[3];
    v6 = v2[4];
    v7 = v2[1];
    v8 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    CollectionOfTwo.subscript.setter((uint64_t)v3, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CollectionOfTwo.subscript.setter((*a1)[6], *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return CollectionOfTwo.subscript.setter(a1, *a2, a3);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance CollectionOfTwo<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = CollectionOfTwo.subscript.modify(v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  specialized MutableCollection<>.subscript.setter();
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a3);
  v5 = type metadata accessor for Slice();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a3);
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance CollectionOfTwo<A>()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance CollectionOfTwo<A>(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CollectionOfTwo<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = CollectionOfTwo.subscript.read(v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*CollectionOfTwo.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  *a1 = v6;
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = v8;
  CollectionOfTwo.subscript.getter(a2, a3, (uint64_t)v8);
  return CountingIndexCollection.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance CollectionOfTwo<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>);
  return MutableCollection<>.subscript.getter(a1, a2, v6, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance CollectionOfTwo<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance CollectionOfTwo<A>()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance CollectionOfTwo<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance CollectionOfTwo<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a1);
  result = type metadata accessor for IndexingIterator();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CollectionOfTwo<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CollectionOfTwo<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>, a1);
  return Collection._copyToContiguousArray()();
}

BOOL conformsToProtocol(_:_:)()
{
  return swift_conformsToProtocol() != 0;
}

uint64_t String.isNewLineOrReturn.getter(uint64_t a1, uint64_t a2)
{
  char v4;
  BOOL v5;
  BOOL v6;

  if (a1 == 10 && a2 == 0xE100000000000000)
    return 1;
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v5 = a1 == 13 && a2 == 0xE100000000000000;
  v6 = v5;
  if ((v4 & 1) != 0 || v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id one-time initialization function for roundingFormatter()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  objc_msgSend(v0, sel_setMinimumFractionDigits_, 1);
  result = objc_msgSend(v0, sel_setMaximumFractionDigits_, 3);
  roundingFormatter.super.super.isa = (Class)v0;
  return result;
}

void specialized BinaryFloatingPoint.roundedForDisplay()()
{
  if (one-time initialization token for roundingFormatter != -1)
    swift_once();
  __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
}

Swift::Void __swiftcall DefaultStringInterpolation.appendInterpolation(rounding:)(Swift::Float rounding)
{
  Class isa;
  int v2;
  int v3;
  id v4;
  double v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;

  if (one-time initialization token for roundingFormatter != -1)
    swift_once();
  isa = roundingFormatter.super.super.isa;
  specialized BinaryFloatingPoint.roundedForDisplay()();
  v3 = v2;
  v4 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
  LODWORD(v5) = v3;
  v6 = objc_msgSend(v4, sel_initWithFloat_, v5);
  v7 = -[objc_class stringFromNumber:](isa, sel_stringFromNumber_, v6);

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    v11._countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall DefaultStringInterpolation.appendInterpolation(rounding:)(Swift::Double rounding)
{
  Class isa;
  double v3;
  double v4;
  double v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;

  if (one-time initialization token for roundingFormatter != -1)
    swift_once();
  isa = roundingFormatter.super.super.isa;
  v3 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
  v4 = round(v3 * rounding) / v3;
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v4;
  else
    v5 = 0.0;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v5);
  v7 = -[objc_class stringFromNumber:](isa, sel_stringFromNumber_, v6);

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    v11._countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void DefaultStringInterpolation.appendInterpolation(rounding:)(__n128 a1)
{
  Class isa;
  double v2;
  double v3;
  double v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Class v12;
  double v13;
  double v14;
  double v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  float64x2_t v25;

  if (one-time initialization token for roundingFormatter != -1)
    swift_once();
  isa = roundingFormatter.super.super.isa;
  v2 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits, *(_OWORD *)&a1));
  v3 = round(v25.f64[0] * v2) / v2;
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v3;
  else
    v4 = 0.0;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v4);
  v6 = -[objc_class stringFromNumber:](isa, sel_stringFromNumber_, v5);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 8236;
    v11._object = (void *)0xE200000000000000;
    String.append(_:)(v11);
    v12 = roundingFormatter.super.super.isa;
    v13 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
    v14 = round(vmuld_lane_f64(v13, v25, 1)) / v13;
    if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v15 = v14;
    else
      v15 = 0.0;
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v15);
    v17 = -[objc_class stringFromNumber:](v12, sel_stringFromNumber_, v16);

    if (v17)
    {
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v19;

      v21._countAndFlagsBits = v18;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 41;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      v23._countAndFlagsBits = 40;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void DefaultStringInterpolation.appendInterpolation(rounding:)(float64x2_t a1, __n128 a2)
{
  Class isa;
  double v3;
  double v4;
  double v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Class v13;
  double v14;
  double v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Class v24;
  double v25;
  double v26;
  double v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  double v37;

  if (one-time initialization token for roundingFormatter != -1)
    swift_once();
  isa = roundingFormatter.super.super.isa;
  v3 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits, *(_OWORD *)&a2));
  v4 = round(a1.f64[0] * v3) / v3;
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v4;
  else
    v5 = 0.0;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v5);
  v7 = -[objc_class stringFromNumber:](isa, sel_stringFromNumber_, v6);

  if (!v7)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13 = roundingFormatter.super.super.isa;
  v14 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
  v15 = round(vmuld_lane_f64(v14, a1, 1)) / v14;
  if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = v15;
  else
    v16 = 0.0;
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v16);
  v18 = -[objc_class stringFromNumber:](v13, sel_stringFromNumber_, v17);

  if (!v18)
    goto LABEL_17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24 = roundingFormatter.super.super.isa;
  v25 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
  v26 = round(v25 * v37) / v25;
  if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v27 = v26;
  else
    v27 = 0.0;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v27);
  v29 = -[objc_class stringFromNumber:](v24, sel_stringFromNumber_, v28);

  if (v29)
  {
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 41;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 40;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_18:
  __break(1u);
}

{
  Class isa;
  double v3;
  double v4;
  double v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Class v13;
  double v14;
  double v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Class v24;
  double v25;
  double v26;
  double v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Class v35;
  double v36;
  double v37;
  double v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  float64x2_t v48;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  if (one-time initialization token for roundingFormatter != -1)
    swift_once();
  isa = roundingFormatter.super.super.isa;
  v3 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits, *(_OWORD *)&a2));
  v4 = round(a1.f64[0] * v3) / v3;
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v4;
  else
    v5 = 0.0;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v5);
  v7 = -[objc_class stringFromNumber:](isa, sel_stringFromNumber_, v6);

  if (!v7)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13 = roundingFormatter.super.super.isa;
  v14 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
  v15 = round(vmuld_lane_f64(v14, a1, 1)) / v14;
  if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = v15;
  else
    v16 = 0.0;
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v16);
  v18 = -[objc_class stringFromNumber:](v13, sel_stringFromNumber_, v17);

  if (!v18)
    goto LABEL_21;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24 = roundingFormatter.super.super.isa;
  v25 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
  v26 = round(v25 * v48.f64[0]) / v25;
  if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v27 = v26;
  else
    v27 = 0.0;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v27);
  v29 = -[objc_class stringFromNumber:](v24, sel_stringFromNumber_, v28);

  if (!v29)
    goto LABEL_22;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v32 = v31;

  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 8236;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  v35 = roundingFormatter.super.super.isa;
  v36 = __exp10((double)(uint64_t)-[objc_class maximumFractionDigits](roundingFormatter.super.super.isa, sel_maximumFractionDigits));
  v37 = round(vmuld_lane_f64(v36, v48, 1)) / v36;
  if ((*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v38 = v37;
  else
    v38 = 0.0;
  v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v38);
  v40 = -[objc_class stringFromNumber:](v35, sel_stringFromNumber_, v39);

  if (v40)
  {
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 41;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 40;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t Sequence.sorted<A>(by:)()
{
  return Sequence.sorted(by:)();
}

uint64_t closure #1 in Sequence.sorted<A>(by:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v3 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - v8;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  v10 = dispatch thunk of static Comparable.< infix(_:_:)();
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  v11(v9, v3);
  return v10 & 1;
}

uint64_t Array.sort<A>(by:reversed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12B8], a3);
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D8], a3);
  return MutableCollection<>.sort(by:)();
}

uint64_t closure #1 in Array.sort<A>(by:reversed:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  void (*v14)(char *, uint64_t);
  _QWORD v16[2];

  v5 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a4 + 8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v16 - v10;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  if ((a3 & 1) != 0)
    v12 = dispatch thunk of static Comparable.> infix(_:_:)();
  else
    v12 = dispatch thunk of static Comparable.< infix(_:_:)();
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  v14(v11, v5);
  return v13 & 1;
}

uint64_t Array<A>.removingDuplicates()()
{
  uint64_t v0;
  uint64_t v1;

  Dictionary.init()();
  v0 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12F0], v0);
  v1 = _ArrayProtocol.filter(_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Array<A>.removeDuplicates()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = Array<A>.removingDuplicates()();
  result = swift_bridgeObjectRelease();
  *v0 = v1;
  return result;
}

uint64_t EquatableOptionalObject.wrappedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t EquatableOptionalObject.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*EquatableOptionalObject.wrappedValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t partial apply for closure #1 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in BidirectionalCollection<>.formNextLexicographicalPermutation()(a1, v1[6], v1[2], v1[3], v1[4], v1[5]) & 1;
}

uint64_t partial apply for closure #2 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in BidirectionalCollection<>.formNextLexicographicalPermutation()(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]) & 1;
}

uint64_t partial apply for closure #1 in RandomAccessCollection<>.lowerBound(of:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t partial apply for closure #1 in Sequence.sorted<A>(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in Sequence.sorted<A>(by:)(a1, a2, *(_QWORD **)(v2 + 40)) & 1;
}

uint64_t partial apply for closure #1 in Array.sort<A>(by:reversed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in Array.sort<A>(by:reversed:)(a1, a2, *(_BYTE *)(v2 + 24), *(_QWORD **)(v2 + 32)) & 1;
}

BOOL partial apply for closure #1 in Array<A>.removingDuplicates()()
{
  char v1;

  type metadata accessor for Dictionary();
  Dictionary.updateValue(_:forKey:)();
  return v1 == 2;
}

uint64_t base witness table accessor for Equatable in <> Pair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v5[1] = v3;
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> Pair<A, B>, a1, v5);
}

unint64_t lazy protocol witness table accessor for type ArrayID and conformance ArrayID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrayID and conformance ArrayID;
  if (!lazy protocol witness table cache variable for type ArrayID and conformance ArrayID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayID, &type metadata for ArrayID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrayID and conformance ArrayID);
  }
  return result;
}

void base witness table accessor for BidirectionalCollection in UnsafeMutableBufferProjectionPointer<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], a1, &v3);
}

void base witness table accessor for Collection in UnsafeMutableBufferProjectionPointer<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4220], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnsafeMutableBufferProjectionPointer<A, B>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for Sequence in UnsafeMutableBufferProjectionPointer<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Collection in CountingIndexCollection<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in CountingIndexCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CountingIndexCollection<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE0658], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CountingIndexCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CountingIndexCollection<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for Sequence in CountingIndexCollection<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void associated type witness table accessor for Collection.Index : Comparable in CountingIndexCollection<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void associated type witness table accessor for Collection.Indices : Collection in CountingIndexCollection<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Equatable in CountingIndex<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t base witness table accessor for Equatable in <A> IndirectOptional<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> IndirectOptional<A>, a1, &v4);
}

void base witness table accessor for BidirectionalCollection in CollectionOfTwo<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CollectionOfTwo<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], a1, &v3);
}

void base witness table accessor for Collection in CollectionOfTwo<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in CollectionOfTwo<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4220], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CollectionOfTwo<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CollectionOfTwo<A>);
  return MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for Sequence in CollectionOfTwo<A>()
{
  JUMPOUT(0x23B7C9C04);
}

_QWORD *sub_234C3181C@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(uint64_t *)((char *)a2 + a3 - 16) - 8) + 72);
  v5 = v4 * *a2;
  if ((unsigned __int128)(v4 * (__int128)*a2) >> 64 == v5 >> 63)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(uint64_t *)((char *)a2 + a3 - 8) - 8)
                                                                 + 16))(a4, *result + v5);
  __break(1u);
  return result;
}

uint64_t sub_234C31860(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(uint64_t *)((char *)a3 + a4 - 16) - 8) + 72);
  v5 = v4 * *a3;
  if ((unsigned __int128)(v4 * (__int128)*a3) >> 64 == v5 >> 63)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(uint64_t *)((char *)a3 + a4 - 8) - 8) + 24))(*a2 + v5, result);
  __break(1u);
  return result;
}

uint64_t sub_234C318A8()
{
  return 16;
}

__n128 sub_234C318B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234C318C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for IndirectOptional(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return IndirectOptional.wrappedValue.getter(v5, a4);
}

uint64_t sub_234C3190C()
{
  return 8;
}

_QWORD *sub_234C31918(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_234C31924@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a1;
  v6 = type metadata accessor for CollectionOfTwo(0, *(uint64_t *)((char *)a1 + a2 - 8), a2, a3);
  return CollectionOfTwo.subscript.getter(v5, v6, a4);
}

uint64_t sub_234C31978()
{
  return 8;
}

uint64_t type metadata completion function for Pair()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Pair(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C31AEC + 4 * byte_23528DC20[v17 - 1]))();
}

void storeEnumTagSinglePayload for Pair(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

ValueMetadata *type metadata accessor for ArrayID()
{
  return &type metadata for ArrayID;
}

uint64_t type metadata accessor for UnsafeMutableBufferProjectionPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeMutableBufferProjectionPointer);
}

uint64_t getEnumTagSinglePayload for CountingIndexCollection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C31E34 + 4 * byte_23528DC2E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CountingIndexCollection(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for CountingIndexCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountingIndexCollection);
}

uint64_t type metadata completion function for CountingIndex()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CountingIndex(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_BYTE *)(v10 + 8);
    v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v10;
    *(_BYTE *)(v12 + 8) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithCopy for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t initializeWithTake for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithTake for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for CountingIndex(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  v7 = (a2 - v5 + 255) >> (8 * v6);
  if (v6 < 4)
    v8 = v7 + 1;
  else
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234C32378 + 4 * byte_23528DC3C[v10]))();
}

void storeEnumTagSinglePayload for CountingIndex(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v7 >= a3)
  {
    v12 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_234C324F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234C324F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234C32500);
}

void sub_234C3251C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234C32524()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234C3252C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234C32534);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

_QWORD *assignWithCopy for IndirectOptional(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for IndirectOptional(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndirectOptional(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IndirectOptional(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for IndirectOptional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndirectOptional);
}

uint64_t type metadata completion function for Cache3()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char *v3;

  swift_getTupleTypeMetadata2();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v3 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Cache3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = *(_QWORD *)(a3 + 16);
  v35 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v34 - 8);
  v6 = *(_QWORD *)(v35 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_DWORD *)(v6 + 80);
  v33 = *(_QWORD *)(v5 + 64) + v8;
  v9 = (v33 & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = *(unsigned int *)(v5 + 84);
  if (v7 | v10)
    v11 = (v33 & ~v8) + *(_QWORD *)(v6 + 64);
  else
    v11 = v9 + 1;
  v12 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v6 + 80));
  v13 = ~v12;
  v14 = v11 + v12;
  if (v12 <= 7
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12) + v11 <= 0x18)
  {
    v31 = ~v8;
    v32 = v7 | v10;
    if (v7 | v10)
    {
      if (v10 >= v7)
      {
        if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, v10, v34))
        {
LABEL_31:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v34);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v33) & v31, ((unint64_t)a2 + v33) & v31, v35);
          if (v32)
          {
            v21 = (_BYTE *)(((unint64_t)a1 + v14) & v13);
            v22 = (unsigned __int8 *)(((unint64_t)a2 + v14) & v13);
            if (v10 >= v7)
            {
LABEL_33:
              if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v22, v10, v34))
                goto LABEL_49;
              goto LABEL_45;
            }
LABEL_28:
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((unint64_t)&v22[v33] & v31, v7, v35))
            {
LABEL_49:
              (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(v21, v22, v34);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((unint64_t)&v21[v33] & v31, (unint64_t)&v22[v33] & v31, v35);
              if (v32)
              {
                v25 = (_BYTE *)((unint64_t)&v21[v14] & v13);
                v26 = (unsigned __int8 *)((unint64_t)&v22[v14] & v13);
                if (v10 >= v7)
                {
LABEL_51:
                  if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v26, v10, v34))
                  {
LABEL_64:
                    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(v25, v26, v34);
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((unint64_t)&v25[v33] & v31, (unint64_t)&v26[v33] & v31, v35);
                    if (!v32)
                      v25[v9] = 0;
                    return a1;
                  }
LABEL_63:
                  memcpy(v25, v26, v11);
                  return a1;
                }
LABEL_47:
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((unint64_t)&v26[v33] & v31, v7, v35))goto LABEL_64;
                goto LABEL_63;
              }
              v21[v9] = 0;
              v25 = (_BYTE *)((unint64_t)&v21[v14] & v13);
              v26 = (unsigned __int8 *)((unint64_t)&v22[v14] & v13);
              goto LABEL_54;
            }
LABEL_45:
            memcpy(v21, v22, v11);
            v25 = (_BYTE *)((unint64_t)&v21[v14] & v13);
            v26 = (unsigned __int8 *)((unint64_t)&v22[v14] & v13);
            if (v32)
            {
              if (v10 >= v7)
                goto LABEL_51;
              goto LABEL_47;
            }
LABEL_54:
            if (!v26[v9])
              goto LABEL_64;
            v27 = (v26[v9] - 1) << (8 * v9);
            if (v9 > 3)
              v27 = 0;
            if ((_DWORD)v9)
            {
              if (v9 <= 3)
                v28 = v9;
              else
                v28 = 4;
              __asm { BR              X11 }
            }
            if (v27 == -1)
              goto LABEL_64;
            goto LABEL_63;
          }
          *((_BYTE *)a1 + v9) = 0;
          v21 = (_BYTE *)(((unint64_t)a1 + v14) & v13);
          v22 = (unsigned __int8 *)(((unint64_t)a2 + v14) & v13);
          goto LABEL_36;
        }
      }
      else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)a2 + v33) & v31, v7, v35))
      {
        goto LABEL_31;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + v9))
        goto LABEL_31;
      v19 = (*((unsigned __int8 *)a2 + v9) - 1) << (8 * v9);
      if (v9 > 3)
        v19 = 0;
      if ((_DWORD)v9)
      {
        if (v9 <= 3)
          v20 = v9;
        else
          v20 = 4;
        __asm { BR              X11 }
      }
      if (v19 == -1)
        goto LABEL_31;
    }
    memcpy(a1, a2, v11);
    v21 = (_BYTE *)(((unint64_t)a1 + v14) & v13);
    v22 = (unsigned __int8 *)(((unint64_t)a2 + v14) & v13);
    if (v32)
    {
      if (v10 >= v7)
        goto LABEL_33;
      goto LABEL_28;
    }
LABEL_36:
    if (!v22[v9])
      goto LABEL_49;
    v23 = (v22[v9] - 1) << (8 * v9);
    if (v9 > 3)
      v23 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v24 = v9;
      else
        v24 = 4;
      __asm { BR              X11 }
    }
    if (v23 == -1)
      goto LABEL_49;
    goto LABEL_45;
  }
  v17 = *a2;
  *a1 = *a2;
  v18 = v17 + ((v12 + 16) & v13);
  swift_retain();
  return (_QWORD *)v18;
}

uint64_t destroy for Cache3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v27 - 8);
  v4 = *(unsigned int *)(v3 + 84);
  v5 = *(_QWORD *)(v28 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(unsigned int *)(v5 + 84);
  v26 = ~(unint64_t)v6;
  v8 = *(_QWORD *)(v3 + 64) + v6;
  v9 = (v8 & v26) + *(_QWORD *)(v5 + 64);
  v10 = v7 | v4;
  if (v7 | v4)
  {
    if (v4 >= v7)
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, v4, v27);
    else
      v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v8 + a1) & v26, v7, v28);
    if (!v11)
    {
LABEL_14:
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v27);
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v8 + a1) & v26, v28);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + v9))
      goto LABEL_14;
    v12 = (*(unsigned __int8 *)(a1 + v9) - 1) << (8 * v9);
    if (v9 > 3)
      v12 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v13 = (v8 & v26) + *(_DWORD *)(v5 + 64);
      else
        v13 = 4;
      __asm { BR              X11 }
    }
    if (v12 == -1)
      goto LABEL_14;
  }
  if (v10)
    v14 = v9;
  else
    v14 = v9 + 1;
  v15 = *(unsigned __int8 *)(v3 + 80) | v6;
  v16 = v14 + v15;
  v17 = ~v15;
  v18 = (v14 + v15 + a1) & ~v15;
  if (v10)
  {
    if (v4 >= v7)
      v19 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v18, v4, v27);
    else
      v19 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v8 + v18) & v26, v7, v28);
    if (!v19)
    {
LABEL_31:
      (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v18, v27);
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v8 + v18) & v26, v28);
    }
  }
  else
  {
    if (!*(_BYTE *)(v18 + v9))
      goto LABEL_31;
    v20 = (*(unsigned __int8 *)(v18 + v9) - 1) << (8 * v9);
    if (v9 > 3)
      v20 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v21 = v9;
      else
        v21 = 4;
      __asm { BR              X11 }
    }
    if (v20 == -1)
      goto LABEL_31;
  }
  v22 = (v16 + v18) & v17;
  if (v10)
  {
    if (v4 >= v7)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v22, v4, v27);
    else
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v8 + v22) & v26, v7, v28);
    if ((_DWORD)result)
      return result;
LABEL_54:
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22, v27);
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))((v8 + v22) & v26, v28);
  }
  if (!*(_BYTE *)(v22 + v9))
    goto LABEL_54;
  v24 = (*(unsigned __int8 *)(v22 + v9) - 1) << (8 * v9);
  if (v9 > 3)
    v24 = 0;
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      v25 = v9;
    else
      v25 = 4;
    __asm { BR              X11 }
  }
  result = (v24 + 1);
  if (v24 == -1)
    goto LABEL_54;
  return result;
}

char *initializeWithCopy for Cache3(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  _BYTE *v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  char *v33;
  size_t __n;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = *(_QWORD *)(a3 + 16);
  v39 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v38 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v39 - 8);
  v9 = *(_DWORD *)(v7 + 80);
  v8 = *(unsigned int *)(v7 + 84);
  v35 = *(_QWORD *)(v5 + 64) + v9;
  v36 = ~(unint64_t)v9;
  v37 = v7;
  v10 = (v35 & v36) + *(_QWORD *)(v7 + 64);
  v11 = v8 | v6;
  if (v8 | v6)
  {
    if (v6 >= v8)
      v12 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, v6, v38);
    else
      v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((unint64_t)&a2[v35] & v36, v8, v39);
    if (v12)
    {
LABEL_14:
      if (v11)
        v15 = v10;
      else
        v15 = v10 + 1;
      memcpy(a1, a2, v15);
      goto LABEL_21;
    }
  }
  else if (a2[v10])
  {
    v13 = (a2[v10] - 1) << (8 * v10);
    if (v10 > 3)
      v13 = 0;
    if ((_DWORD)v10)
    {
      if (v10 <= 3)
        v14 = (v35 & v36) + *(_DWORD *)(v7 + 64);
      else
        v14 = 4;
      __asm { BR              X11 }
    }
    if (v13 != -1)
      goto LABEL_14;
  }
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v38);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))((unint64_t)&a1[v35] & v36, (unint64_t)&a2[v35] & v36, v39);
  if (!v11)
    a1[v10] = 0;
LABEL_21:
  if (v11)
    v16 = v10;
  else
    v16 = v10 + 1;
  v17 = *(unsigned __int8 *)(v5 + 80) | v9;
  v33 = a1;
  __n = v16;
  v18 = v16 + v17;
  v19 = (unint64_t)&a1[v16 + v17];
  v20 = ~v17;
  v21 = (void *)(v19 & ~v17);
  v22 = (unsigned __int8 *)((unint64_t)&a2[v16 + v17] & ~v17);
  if (v11)
  {
    if (v6 >= v8)
      v23 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v22, v6, v38);
    else
      v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v37 + 48))((unint64_t)&v22[v35] & v36, v8, v39);
    if (v23)
      goto LABEL_37;
  }
  else if (v22[v10])
  {
    v24 = (v22[v10] - 1) << (8 * v10);
    if (v10 > 3)
      v24 = 0;
    if ((_DWORD)v10)
    {
      if (v10 <= 3)
        v25 = v10;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 != -1)
    {
LABEL_37:
      memcpy(v21, v22, __n);
      v26 = (void *)(((unint64_t)v21 + v18) & v20);
      v27 = (_BYTE *)((unint64_t)&v22[v18] & v20);
      if (!v11)
        goto LABEL_48;
      goto LABEL_42;
    }
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v21, v22, v38);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))(((unint64_t)v21 + v35) & v36, (unint64_t)&v22[v35] & v36, v39);
  if (!v11)
  {
    *((_BYTE *)v21 + v10) = 0;
    v26 = (void *)(((unint64_t)v21 + v18) & v20);
    v27 = (_BYTE *)((unint64_t)&v22[v18] & v20);
LABEL_48:
    v28 = v33;
    if (v27[v10])
    {
      v30 = (v27[v10] - 1) << (8 * v10);
      if (v10 > 3)
        v30 = 0;
      if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v31 = v10;
        else
          v31 = 4;
        __asm { BR              X11 }
      }
      if (v30 != -1)
        goto LABEL_57;
    }
    goto LABEL_58;
  }
  v26 = (void *)(((unint64_t)v21 + v18) & v20);
  v27 = (_BYTE *)((unint64_t)&v22[v18] & v20);
LABEL_42:
  v28 = v33;
  if (v6 >= v8)
    v29 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v27, v6, v38);
  else
    v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v37 + 48))((unint64_t)&v27[v35] & v36, v8, v39);
  if (v29)
  {
LABEL_57:
    memcpy(v26, v27, __n);
    return v28;
  }
LABEL_58:
  (*(void (**)(void *, _BYTE *, uint64_t))(v5 + 16))(v26, v27, v38);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))(((unint64_t)v26 + v35) & v36, (unint64_t)&v27[v35] & v36, v39);
  if (!v11)
    *((_BYTE *)v26 + v10) = 0;
  return v28;
}

unsigned __int8 *assignWithCopy for Cache3(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t (*v14)(unint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t (*v21)(unsigned __int8 *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t (*v34)(_BYTE *, uint64_t, uint64_t);
  int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t (*v49)(unint64_t, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t (*v53)(unsigned __int8 *, _QWORD, uint64_t);
  int v54;
  char v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  size_t __n;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  unint64_t v77;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v5 - 8);
  v76 = v6;
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(unsigned int *)(v8 + 84);
  v11 = ~(unint64_t)v9;
  v73 = v8;
  v74 = *(_QWORD *)(v6 + 64) + v9;
  v77 = (v74 & v11) + *(_QWORD *)(v8 + 64);
  v12 = v10 | v7;
  v72 = v5;
  v69 = v10 | v7;
  v70 = *(_DWORD *)(v6 + 84);
  v71 = *(_DWORD *)(v8 + 84);
  if (v10 | v7)
  {
    if (v7 < v10)
    {
      v13 = *(_QWORD *)(a3 + 16);
      v14 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
      v15 = v14((unint64_t)&a1[v74] & v11, v10, v5);
      v12 = v10 | v7;
      v16 = v10;
      v17 = ~(unint64_t)v9;
      v18 = v14((unint64_t)&a2[v74] & v11, v16, v5);
      if (!v15)
        goto LABEL_27;
      goto LABEL_32;
    }
    v21 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v22 = v21(a1, v7, v4);
    v23 = v4;
    v24 = v22;
    v13 = v23;
    v18 = ((uint64_t (*)(unsigned __int8 *, uint64_t))v21)(a2, v7);
    v17 = ~(unint64_t)v9;
    if (!v24)
    {
LABEL_27:
      v4 = v13;
      v7 = v7;
      if (v18)
      {
        v27 = a1;
        (*(void (**)(unsigned __int8 *, uint64_t))(v76 + 8))(a1, v13);
        (*(void (**)(unint64_t, uint64_t))(v73 + 8))((unint64_t)&a1[v74] & v17, v5);
        if (v12)
          v28 = v77;
        else
          v28 = v77 + 1;
LABEL_37:
        memcpy(v27, a2, v28);
        goto LABEL_38;
      }
LABEL_31:
      v27 = a1;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 24))(a1, a2, v4);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 24))((unint64_t)&a1[v74] & v17, (unint64_t)&a2[v74] & v17, v5);
LABEL_38:
      v29 = v71;
      goto LABEL_39;
    }
  }
  else
  {
    v17 = ~(unint64_t)v9;
    if (!a1[v77])
      goto LABEL_18;
    v19 = (a1[v77] - 1) << (8 * v77);
    if (v77 > 3)
      v19 = 0;
    if ((_DWORD)v77)
    {
      if (v77 <= 3)
        v20 = (v74 & v11) + *(_DWORD *)(v8 + 64);
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == -1)
    {
LABEL_18:
      if (!a2[v77])
        goto LABEL_31;
      v25 = (a2[v77] - 1) << (8 * v77);
      if (v77 > 3)
        v25 = 0;
      if ((_DWORD)v77)
      {
        if (v77 <= 3)
          v26 = (v74 & v11) + *(_DWORD *)(v8 + 64);
        else
          v26 = 4;
        __asm { BR              X11 }
      }
      v13 = *(_QWORD *)(a3 + 16);
      v18 = v25 + 1;
      goto LABEL_27;
    }
    if (!a2[v77])
      goto LABEL_57;
    v13 = *(_QWORD *)(a3 + 16);
    v18 = ((a2[v77] - 1) << (8 * v77)) + 1;
  }
LABEL_32:
  v4 = v13;
  v7 = v7;
  if (v18)
  {
    if (v12)
      v28 = v77;
    else
      v28 = v77 + 1;
    v27 = a1;
    goto LABEL_37;
  }
LABEL_57:
  v27 = a1;
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 16))(a1, a2, v4);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 16))((unint64_t)&a1[v74] & v17, (unint64_t)&a2[v74] & v17, v5);
  v29 = v71;
  if (!v12)
    a1[v77] = 0;
LABEL_39:
  if (v12)
    v30 = v77;
  else
    v30 = v77 + 1;
  v31 = *(unsigned __int8 *)(v76 + 80) | v9;
  __n = v30;
  v66 = v30 + v31;
  v67 = ~v31;
  v32 = (_BYTE *)((unint64_t)&v27[v30 + v31] & ~v31);
  v33 = (_BYTE *)((unint64_t)&a2[v30 + v31] & ~v31);
  if (!v12)
  {
    if (v32[v77])
    {
      v39 = (v32[v77] - 1) << (8 * v77);
      if (v77 > 3)
        v39 = 0;
      if ((_DWORD)v77)
      {
        if (v77 <= 3)
          v40 = v77;
        else
          v40 = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (v33[v77] && (v33[v77] - 1) << (8 * v77) != -1)
          goto LABEL_56;
        goto LABEL_77;
      }
    }
    if (!v33[v77])
      goto LABEL_73;
    v43 = (v33[v77] - 1) << (8 * v77);
    if (v77 > 3)
      v43 = 0;
    if ((_DWORD)v77)
    {
      if (v77 <= 3)
        v44 = v77;
      else
        v44 = 4;
      __asm { BR              X11 }
    }
    v41 = v43 + 1;
LABEL_71:
    v27 = a1;
    if (v41)
    {
      (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v32, v4);
      v42 = v17;
      (*(void (**)(unint64_t, uint64_t))(v73 + 8))((unint64_t)&v32[v74] & v17, v72);
      memcpy(v32, v33, __n);
      goto LABEL_74;
    }
LABEL_73:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 24))(v32, v33, v4);
    v42 = v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 24))((unint64_t)&v32[v74] & v17, (unint64_t)&v33[v74] & v17, v72);
LABEL_74:
    v45 = v71;
    v46 = (unsigned __int8 *)((unint64_t)&v32[v66] & v67);
    v47 = (unsigned __int8 *)((unint64_t)&v33[v66] & v67);
    if (!v12)
      goto LABEL_88;
LABEL_79:
    v64 = v42;
    v65 = v4;
    if (v70 >= v45)
    {
      v53 = *(uint64_t (**)(unsigned __int8 *, _QWORD, uint64_t))(v76 + 48);
      v54 = v53(v46, v70, v4);
      v51 = v53(v47, v70, v4);
      v27 = a1;
      v48 = v72;
      if (v54)
      {
LABEL_81:
        v12 = v69;
        if (!v51)
        {
LABEL_82:
          v42 = v64;
          v52 = v65;
          goto LABEL_109;
        }
LABEL_86:
        memcpy(v46, v47, __n);
        return v27;
      }
    }
    else
    {
      v48 = v72;
      v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v73 + 48);
      v50 = v49((unint64_t)&v46[v74] & v42, v45, v72);
      v51 = v49((unint64_t)&v47[v74] & v42, v45, v72);
      v27 = a1;
      if (v50)
        goto LABEL_81;
    }
    if (!v51)
      goto LABEL_112;
    goto LABEL_85;
  }
  if (v7 >= v29)
  {
    v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v76 + 48);
    v35 = v34(v32, v7, v4);
    v36 = v33;
    v37 = v7;
    v38 = v4;
  }
  else
  {
    v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v73 + 48);
    v35 = v34((_BYTE *)((unint64_t)&v32[v74] & v17), v29, v72);
    v12 = v69;
    v36 = (_BYTE *)((unint64_t)&v33[v74] & v17);
    v37 = v29;
    v38 = v72;
  }
  v41 = v34(v36, v37, v38);
  if (!v35)
    goto LABEL_71;
  if (v41)
  {
LABEL_56:
    v42 = v17;
    memcpy(v32, v33, __n);
    v27 = a1;
    goto LABEL_74;
  }
LABEL_77:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 16))(v32, v33, v4);
  v42 = v17;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 16))((unint64_t)&v32[v74] & v17, (unint64_t)&v33[v74] & v17, v72);
  if (v12)
  {
    v46 = (unsigned __int8 *)((unint64_t)&v32[v66] & v67);
    v47 = (unsigned __int8 *)((unint64_t)&v33[v66] & v67);
    v45 = v71;
    goto LABEL_79;
  }
  v32[v77] = 0;
  v46 = (unsigned __int8 *)((unint64_t)&v32[v66] & v67);
  v47 = (unsigned __int8 *)((unint64_t)&v33[v66] & v67);
  v27 = a1;
LABEL_88:
  v55 = 8 * v77;
  if (!v46[v77])
    goto LABEL_99;
  v56 = (v46[v77] - 1) << v55;
  if (v77 > 3)
    v56 = 0;
  if ((_DWORD)v77)
  {
    if (v77 <= 3)
      v57 = v77;
    else
      v57 = 4;
    __asm { BR              X12 }
  }
  if (v56 == -1)
  {
LABEL_99:
    v59 = v4;
    v48 = v72;
    if (!v47[v77])
    {
      v62 = v59;
LABEL_113:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 24))(v46, v47, v62);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 24))((unint64_t)&v46[v74] & v42, (unint64_t)&v47[v74] & v42, v48);
      return v27;
    }
    v60 = (v47[v77] - 1) << v55;
    if (v77 > 3)
      v60 = 0;
    v64 = v42;
    v65 = v59;
    if ((_DWORD)v77)
    {
      if (v77 <= 3)
        v61 = v77;
      else
        v61 = 4;
      __asm { BR              X11 }
    }
    if (v60 == -1)
    {
LABEL_112:
      v42 = v64;
      v62 = v65;
      goto LABEL_113;
    }
LABEL_85:
    (*(void (**)(unsigned __int8 *, uint64_t))(v76 + 8))(v46, v65);
    (*(void (**)(unint64_t, uint64_t))(v73 + 8))((unint64_t)&v46[v74] & v64, v48);
    goto LABEL_86;
  }
  v58 = v4;
  v48 = v72;
  if (v47[v77])
  {
    v64 = v42;
    v65 = v58;
    v12 = v69;
    if ((v47[v77] - 1) << v55 == -1)
      goto LABEL_82;
    goto LABEL_86;
  }
  v52 = v58;
LABEL_109:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 16))(v46, v47, v52);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 16))((unint64_t)&v46[v74] & v42, (unint64_t)&v47[v74] & v42, v48);
  if (!v12)
    v46[v77] = 0;
  return v27;
}

char *initializeWithTake for Cache3(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  _BYTE *v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  char *v33;
  size_t __n;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = *(_QWORD *)(a3 + 16);
  v39 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v38 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v39 - 8);
  v9 = *(_DWORD *)(v7 + 80);
  v8 = *(unsigned int *)(v7 + 84);
  v35 = *(_QWORD *)(v5 + 64) + v9;
  v36 = ~(unint64_t)v9;
  v37 = v7;
  v10 = (v35 & v36) + *(_QWORD *)(v7 + 64);
  v11 = v8 | v6;
  if (v8 | v6)
  {
    if (v6 >= v8)
      v12 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, v6, v38);
    else
      v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((unint64_t)&a2[v35] & v36, v8, v39);
    if (v12)
    {
LABEL_14:
      if (v11)
        v15 = v10;
      else
        v15 = v10 + 1;
      memcpy(a1, a2, v15);
      goto LABEL_21;
    }
  }
  else if (a2[v10])
  {
    v13 = (a2[v10] - 1) << (8 * v10);
    if (v10 > 3)
      v13 = 0;
    if ((_DWORD)v10)
    {
      if (v10 <= 3)
        v14 = (v35 & v36) + *(_DWORD *)(v7 + 64);
      else
        v14 = 4;
      __asm { BR              X11 }
    }
    if (v13 != -1)
      goto LABEL_14;
  }
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v38);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 32))((unint64_t)&a1[v35] & v36, (unint64_t)&a2[v35] & v36, v39);
  if (!v11)
    a1[v10] = 0;
LABEL_21:
  if (v11)
    v16 = v10;
  else
    v16 = v10 + 1;
  v17 = *(unsigned __int8 *)(v5 + 80) | v9;
  v33 = a1;
  __n = v16;
  v18 = v16 + v17;
  v19 = (unint64_t)&a1[v16 + v17];
  v20 = ~v17;
  v21 = (void *)(v19 & ~v17);
  v22 = (unsigned __int8 *)((unint64_t)&a2[v16 + v17] & ~v17);
  if (v11)
  {
    if (v6 >= v8)
      v23 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v22, v6, v38);
    else
      v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v37 + 48))((unint64_t)&v22[v35] & v36, v8, v39);
    if (v23)
      goto LABEL_37;
  }
  else if (v22[v10])
  {
    v24 = (v22[v10] - 1) << (8 * v10);
    if (v10 > 3)
      v24 = 0;
    if ((_DWORD)v10)
    {
      if (v10 <= 3)
        v25 = v10;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 != -1)
    {
LABEL_37:
      memcpy(v21, v22, __n);
      v26 = (void *)(((unint64_t)v21 + v18) & v20);
      v27 = (_BYTE *)((unint64_t)&v22[v18] & v20);
      if (!v11)
        goto LABEL_48;
      goto LABEL_42;
    }
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(v21, v22, v38);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 32))(((unint64_t)v21 + v35) & v36, (unint64_t)&v22[v35] & v36, v39);
  if (!v11)
  {
    *((_BYTE *)v21 + v10) = 0;
    v26 = (void *)(((unint64_t)v21 + v18) & v20);
    v27 = (_BYTE *)((unint64_t)&v22[v18] & v20);
LABEL_48:
    v28 = v33;
    if (v27[v10])
    {
      v30 = (v27[v10] - 1) << (8 * v10);
      if (v10 > 3)
        v30 = 0;
      if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v31 = v10;
        else
          v31 = 4;
        __asm { BR              X11 }
      }
      if (v30 != -1)
        goto LABEL_57;
    }
    goto LABEL_58;
  }
  v26 = (void *)(((unint64_t)v21 + v18) & v20);
  v27 = (_BYTE *)((unint64_t)&v22[v18] & v20);
LABEL_42:
  v28 = v33;
  if (v6 >= v8)
    v29 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v27, v6, v38);
  else
    v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v37 + 48))((unint64_t)&v27[v35] & v36, v8, v39);
  if (v29)
  {
LABEL_57:
    memcpy(v26, v27, __n);
    return v28;
  }
LABEL_58:
  (*(void (**)(void *, _BYTE *, uint64_t))(v5 + 32))(v26, v27, v38);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 32))(((unint64_t)v26 + v35) & v36, (unint64_t)&v27[v35] & v36, v39);
  if (!v11)
    *((_BYTE *)v26 + v10) = 0;
  return v28;
}

unsigned __int8 *assignWithTake for Cache3(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t (*v14)(unint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t (*v21)(unsigned __int8 *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t (*v34)(_BYTE *, uint64_t, uint64_t);
  int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t (*v49)(unint64_t, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t (*v53)(unsigned __int8 *, _QWORD, uint64_t);
  int v54;
  char v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  size_t __n;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  unint64_t v77;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v5 - 8);
  v76 = v6;
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(unsigned int *)(v8 + 84);
  v11 = ~(unint64_t)v9;
  v73 = v8;
  v74 = *(_QWORD *)(v6 + 64) + v9;
  v77 = (v74 & v11) + *(_QWORD *)(v8 + 64);
  v12 = v10 | v7;
  v72 = v5;
  v69 = v10 | v7;
  v70 = *(_DWORD *)(v6 + 84);
  v71 = *(_DWORD *)(v8 + 84);
  if (v10 | v7)
  {
    if (v7 < v10)
    {
      v13 = *(_QWORD *)(a3 + 16);
      v14 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
      v15 = v14((unint64_t)&a1[v74] & v11, v10, v5);
      v12 = v10 | v7;
      v16 = v10;
      v17 = ~(unint64_t)v9;
      v18 = v14((unint64_t)&a2[v74] & v11, v16, v5);
      if (!v15)
        goto LABEL_27;
      goto LABEL_32;
    }
    v21 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v22 = v21(a1, v7, v4);
    v23 = v4;
    v24 = v22;
    v13 = v23;
    v18 = ((uint64_t (*)(unsigned __int8 *, uint64_t))v21)(a2, v7);
    v17 = ~(unint64_t)v9;
    if (!v24)
    {
LABEL_27:
      v4 = v13;
      v7 = v7;
      if (v18)
      {
        v27 = a1;
        (*(void (**)(unsigned __int8 *, uint64_t))(v76 + 8))(a1, v13);
        (*(void (**)(unint64_t, uint64_t))(v73 + 8))((unint64_t)&a1[v74] & v17, v5);
        if (v12)
          v28 = v77;
        else
          v28 = v77 + 1;
LABEL_37:
        memcpy(v27, a2, v28);
        goto LABEL_38;
      }
LABEL_31:
      v27 = a1;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 40))(a1, a2, v4);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 40))((unint64_t)&a1[v74] & v17, (unint64_t)&a2[v74] & v17, v5);
LABEL_38:
      v29 = v71;
      goto LABEL_39;
    }
  }
  else
  {
    v17 = ~(unint64_t)v9;
    if (!a1[v77])
      goto LABEL_18;
    v19 = (a1[v77] - 1) << (8 * v77);
    if (v77 > 3)
      v19 = 0;
    if ((_DWORD)v77)
    {
      if (v77 <= 3)
        v20 = (v74 & v11) + *(_DWORD *)(v8 + 64);
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == -1)
    {
LABEL_18:
      if (!a2[v77])
        goto LABEL_31;
      v25 = (a2[v77] - 1) << (8 * v77);
      if (v77 > 3)
        v25 = 0;
      if ((_DWORD)v77)
      {
        if (v77 <= 3)
          v26 = (v74 & v11) + *(_DWORD *)(v8 + 64);
        else
          v26 = 4;
        __asm { BR              X11 }
      }
      v13 = *(_QWORD *)(a3 + 16);
      v18 = v25 + 1;
      goto LABEL_27;
    }
    if (!a2[v77])
      goto LABEL_57;
    v13 = *(_QWORD *)(a3 + 16);
    v18 = ((a2[v77] - 1) << (8 * v77)) + 1;
  }
LABEL_32:
  v4 = v13;
  v7 = v7;
  if (v18)
  {
    if (v12)
      v28 = v77;
    else
      v28 = v77 + 1;
    v27 = a1;
    goto LABEL_37;
  }
LABEL_57:
  v27 = a1;
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 32))(a1, a2, v4);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 32))((unint64_t)&a1[v74] & v17, (unint64_t)&a2[v74] & v17, v5);
  v29 = v71;
  if (!v12)
    a1[v77] = 0;
LABEL_39:
  if (v12)
    v30 = v77;
  else
    v30 = v77 + 1;
  v31 = *(unsigned __int8 *)(v76 + 80) | v9;
  __n = v30;
  v66 = v30 + v31;
  v67 = ~v31;
  v32 = (_BYTE *)((unint64_t)&v27[v30 + v31] & ~v31);
  v33 = (_BYTE *)((unint64_t)&a2[v30 + v31] & ~v31);
  if (!v12)
  {
    if (v32[v77])
    {
      v39 = (v32[v77] - 1) << (8 * v77);
      if (v77 > 3)
        v39 = 0;
      if ((_DWORD)v77)
      {
        if (v77 <= 3)
          v40 = v77;
        else
          v40 = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (v33[v77] && (v33[v77] - 1) << (8 * v77) != -1)
          goto LABEL_56;
        goto LABEL_77;
      }
    }
    if (!v33[v77])
      goto LABEL_73;
    v43 = (v33[v77] - 1) << (8 * v77);
    if (v77 > 3)
      v43 = 0;
    if ((_DWORD)v77)
    {
      if (v77 <= 3)
        v44 = v77;
      else
        v44 = 4;
      __asm { BR              X11 }
    }
    v41 = v43 + 1;
LABEL_71:
    v27 = a1;
    if (v41)
    {
      (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v32, v4);
      v42 = v17;
      (*(void (**)(unint64_t, uint64_t))(v73 + 8))((unint64_t)&v32[v74] & v17, v72);
      memcpy(v32, v33, __n);
      goto LABEL_74;
    }
LABEL_73:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 40))(v32, v33, v4);
    v42 = v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 40))((unint64_t)&v32[v74] & v17, (unint64_t)&v33[v74] & v17, v72);
LABEL_74:
    v45 = v71;
    v46 = (unsigned __int8 *)((unint64_t)&v32[v66] & v67);
    v47 = (unsigned __int8 *)((unint64_t)&v33[v66] & v67);
    if (!v12)
      goto LABEL_88;
LABEL_79:
    v64 = v42;
    v65 = v4;
    if (v70 >= v45)
    {
      v53 = *(uint64_t (**)(unsigned __int8 *, _QWORD, uint64_t))(v76 + 48);
      v54 = v53(v46, v70, v4);
      v51 = v53(v47, v70, v4);
      v27 = a1;
      v48 = v72;
      if (v54)
      {
LABEL_81:
        v12 = v69;
        if (!v51)
        {
LABEL_82:
          v42 = v64;
          v52 = v65;
          goto LABEL_109;
        }
LABEL_86:
        memcpy(v46, v47, __n);
        return v27;
      }
    }
    else
    {
      v48 = v72;
      v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v73 + 48);
      v50 = v49((unint64_t)&v46[v74] & v42, v45, v72);
      v51 = v49((unint64_t)&v47[v74] & v42, v45, v72);
      v27 = a1;
      if (v50)
        goto LABEL_81;
    }
    if (!v51)
      goto LABEL_112;
    goto LABEL_85;
  }
  if (v7 >= v29)
  {
    v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v76 + 48);
    v35 = v34(v32, v7, v4);
    v36 = v33;
    v37 = v7;
    v38 = v4;
  }
  else
  {
    v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v73 + 48);
    v35 = v34((_BYTE *)((unint64_t)&v32[v74] & v17), v29, v72);
    v12 = v69;
    v36 = (_BYTE *)((unint64_t)&v33[v74] & v17);
    v37 = v29;
    v38 = v72;
  }
  v41 = v34(v36, v37, v38);
  if (!v35)
    goto LABEL_71;
  if (v41)
  {
LABEL_56:
    v42 = v17;
    memcpy(v32, v33, __n);
    v27 = a1;
    goto LABEL_74;
  }
LABEL_77:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 32))(v32, v33, v4);
  v42 = v17;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 32))((unint64_t)&v32[v74] & v17, (unint64_t)&v33[v74] & v17, v72);
  if (v12)
  {
    v46 = (unsigned __int8 *)((unint64_t)&v32[v66] & v67);
    v47 = (unsigned __int8 *)((unint64_t)&v33[v66] & v67);
    v45 = v71;
    goto LABEL_79;
  }
  v32[v77] = 0;
  v46 = (unsigned __int8 *)((unint64_t)&v32[v66] & v67);
  v47 = (unsigned __int8 *)((unint64_t)&v33[v66] & v67);
  v27 = a1;
LABEL_88:
  v55 = 8 * v77;
  if (!v46[v77])
    goto LABEL_99;
  v56 = (v46[v77] - 1) << v55;
  if (v77 > 3)
    v56 = 0;
  if ((_DWORD)v77)
  {
    if (v77 <= 3)
      v57 = v77;
    else
      v57 = 4;
    __asm { BR              X12 }
  }
  if (v56 == -1)
  {
LABEL_99:
    v59 = v4;
    v48 = v72;
    if (!v47[v77])
    {
      v62 = v59;
LABEL_113:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 40))(v46, v47, v62);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 40))((unint64_t)&v46[v74] & v42, (unint64_t)&v47[v74] & v42, v48);
      return v27;
    }
    v60 = (v47[v77] - 1) << v55;
    if (v77 > 3)
      v60 = 0;
    v64 = v42;
    v65 = v59;
    if ((_DWORD)v77)
    {
      if (v77 <= 3)
        v61 = v77;
      else
        v61 = 4;
      __asm { BR              X11 }
    }
    if (v60 == -1)
    {
LABEL_112:
      v42 = v64;
      v62 = v65;
      goto LABEL_113;
    }
LABEL_85:
    (*(void (**)(unsigned __int8 *, uint64_t))(v76 + 8))(v46, v65);
    (*(void (**)(unint64_t, uint64_t))(v73 + 8))((unint64_t)&v46[v74] & v64, v48);
    goto LABEL_86;
  }
  v58 = v4;
  v48 = v72;
  if (v47[v77])
  {
    v64 = v42;
    v65 = v58;
    v12 = v69;
    if ((v47[v77] - 1) << v55 == -1)
      goto LABEL_82;
    goto LABEL_86;
  }
  v52 = v58;
LABEL_109:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v76 + 32))(v46, v47, v52);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 32))((unint64_t)&v46[v74] & v42, (unint64_t)&v47[v74] & v42, v48);
  if (!v12)
    v46[v77] = 0;
  return v27;
}

uint64_t getEnumTagSinglePayload for Cache3(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v6 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v6 + 64) + 1;
  }
  if (!a2)
    return 0;
  v11 = *(_DWORD *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = a2 - v9;
  if (a2 > v9)
  {
    v14 = *(unsigned __int8 *)(v4 + 80) | v11;
    v15 = ((v10
          + (v12 & ~(unint64_t)v11)
          + v14
          + ((v10 + (v12 & ~(unint64_t)v11) + v14) & ~v14)) & ~v14)
        + v10
        + (v12 & ~(unint64_t)v11);
    v16 = 8 * v15;
    if (v15 > 3)
      goto LABEL_10;
    v18 = ((v13 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (v17)
        goto LABEL_17;
    }
    else
    {
      if (v18 <= 0xFF)
      {
        if (v18 < 2)
          goto LABEL_26;
LABEL_10:
        v17 = *(unsigned __int8 *)(a1 + v15);
        if (!*(_BYTE *)(a1 + v15))
          goto LABEL_26;
LABEL_17:
        v19 = (v17 - 1) << v16;
        if (v15 > 3)
          v19 = 0;
        if ((_DWORD)v15)
        {
          if (v15 <= 3)
            v20 = v15;
          else
            v20 = 4;
          __asm { BR              X12 }
        }
        return v9 + v19 + 1;
      }
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (*(_WORD *)(a1 + v15))
        goto LABEL_17;
    }
  }
LABEL_26:
  if (v8 < 2)
    return 0;
  if (v5 >= v7)
    v21 = (*(uint64_t (**)(void))(v4 + 48))();
  else
    v21 = (*(uint64_t (**)(unint64_t))(v6 + 48))((v12 + a1) & ~(unint64_t)v11);
  if (v21 >= 2)
    return v21 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Cache3(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84))
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v8)
    v10 = ((*(_QWORD *)(v6 + 64) + *(_DWORD *)(v7 + 80)) & ~(unint64_t)*(_DWORD *)(v7 + 80))
        + *(_QWORD *)(v7 + 64);
  else
    v10 = ((*(_QWORD *)(v6 + 64) + *(_DWORD *)(v7 + 80)) & ~(unint64_t)*(_DWORD *)(v7 + 80))
        + *(_QWORD *)(v7 + 64)
        + 1;
  v11 = *(unsigned __int8 *)(v6 + 80) | *(_DWORD *)(v7 + 80);
  v12 = ((v10 + v11 + ((v10 + v11) & ~v11)) & ~v11) + v10;
  if (a3 > v9)
  {
    if (v12 > 3)
    {
      v5 = 1u;
      if (v9 >= a2)
LABEL_26:
        __asm { BR              X0 }
LABEL_19:
      v14 = ~v9 + a2;
      if (v12 < 4)
      {
        if ((_DWORD)v12)
        {
          v15 = v14 & ~(-1 << (8 * v12));
          bzero(a1, v12);
          if ((_DWORD)v12 == 3)
          {
            *a1 = v15;
            *((_BYTE *)a1 + 2) = BYTE2(v15);
          }
          else if ((_DWORD)v12 == 2)
          {
            *a1 = v15;
          }
          else
          {
            *(_BYTE *)a1 = v15;
          }
        }
      }
      else
      {
        bzero(a1, v12);
        *(_DWORD *)a1 = v14;
      }
      __asm { BR              X10 }
    }
    v13 = ((a3 - v9 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v13))
    {
      v5 = 4u;
      if (v9 >= a2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v13 >= 0x100)
      v5 = 2;
    else
      v5 = v13 > 1;
  }
  if (v9 >= a2)
    goto LABEL_26;
  goto LABEL_19;
}

void sub_234C350F4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234C350FC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234C35140()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_234C35148()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_234C35158()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for Cache3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Cache3);
}

uint64_t type metadata completion function for CollectionOfTwo()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char *v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v3 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CollectionOfTwo(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C352B8 + 4 * byte_23528DCD5[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CollectionOfTwo(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for CollectionOfTwo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CollectionOfTwo);
}

_QWORD *initializeBufferWithCopyOfBuffer for EquatableOptionalObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for EquatableOptionalObject()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for EquatableOptionalObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for EquatableOptionalObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for EquatableOptionalObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EquatableOptionalObject);
}

uint64_t storeEnumTagSinglePayload for Pair.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234C355C8 + 4 * byte_23528DCE8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234C355FC + 4 * byte_23528DCE3[v4]))();
}

uint64_t sub_234C355FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C35604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C3560CLL);
  return result;
}

uint64_t sub_234C35618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C35620);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234C35624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C3562C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Pair<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in Pair<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in Pair<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4, a2);
    MEMORY[0x23B7C9D54](v9, -1, -1);
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4);
    MEMORY[0x23B7C9D54](v9, -1, -1);
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v12[2];

  v4 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, a2);
    a2 = v10;
    MEMORY[0x23B7C9D54](v9, -1, -1);
  }
  return a2;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DynamicType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[2];
  _QWORD v29[5];
  _BYTE v30[48];
  int64_t v31;

  v24 = (unint64_t *)result;
  v25 = 0;
  v6 = 0;
  v26 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v31 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v19 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v31)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    v20 = *(_QWORD *)(v26 + 8 * v19);
    ++v6;
    if (!v20)
    {
      v6 = v19 + 1;
      if (v19 + 1 >= v31)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      v20 = *(_QWORD *)(v26 + 8 * v6);
      if (!v20)
      {
        v6 = v19 + 2;
        if (v19 + 2 >= v31)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
        v20 = *(_QWORD *)(v26 + 8 * v6);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v9 = (v20 - 1) & v20;
    v11 = __clz(__rbit64(v20)) + (v6 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a3 + 56) + 40 * v11, (uint64_t)v30);
    v28[0] = v13;
    v28[1] = v14;
    outlined init with copy of AnyTrackedValue((uint64_t)v30, (uint64_t)v29);
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    DynamicType = swift_getDynamicType();
    outlined init with copy of AnyTrackedValue(a4, (uint64_t)v27);
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    v16 = swift_getDynamicType();
    v17 = v27[4];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
    outlined destroy of TypesettingConfiguration((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    if (DynamicType == v18)
    {
      *(unint64_t *)((char *)v24 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      }
    }
  }
  v21 = v19 + 3;
  if (v21 >= v31)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
  v20 = *(_QWORD *)(v26 + 8 * v21);
  if (v20)
  {
    v6 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v6 >= v31)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    v20 = *(_QWORD *)(v26 + 8 * v6);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t DynamicType;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[5];
  _BYTE v32[48];
  int64_t v33;

  v25 = (unint64_t *)result;
  v26 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (uint64_t *)(a4 + 48);
  v33 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v5 << 6);
      goto LABEL_19;
    }
    v14 = __OFADD__(v5++, 1);
    if (v14)
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v5 >= v33)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
    v15 = *(_QWORD *)(v6 + 8 * v5);
    if (!v15)
      break;
LABEL_18:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_19:
    v17 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a3 + 56) + 40 * v13, (uint64_t)v32);
    v30[0] = v18;
    v30[1] = v19;
    outlined init with copy of AnyTrackedValue((uint64_t)v32, (uint64_t)v31);
    __swift_project_boxed_opaque_existential_1(v31, v31[3]);
    DynamicType = swift_getDynamicType();
    swift_beginAccess();
    v21 = *v10;
    if (*(_QWORD *)(*v10 + 16) && (v22 = specialized __RawDictionaryStorage.find<A>(_:)(DynamicType), (v23 & 1) != 0))
    {
      outlined init with copy of AnyTrackedValue(*(_QWORD *)(v21 + 56) + 40 * v22, (uint64_t)&v27);
    }
    else
    {
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
    }
    swift_endAccess();
    outlined destroy of TypesettingConfiguration((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
    v11 = *((_QWORD *)&v28 + 1);
    outlined destroy of TypesettingConfiguration((uint64_t)&v27, (uint64_t (*)(_QWORD))type metadata accessor for ForwardedEventDispatcher?);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    if (!v11)
    {
      *(unint64_t *)((char *)v25 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = __OFADD__(v26++, 1);
      if (v14)
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
      }
    }
  }
  v16 = v5 + 1;
  if (v5 + 1 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v5 + 2;
  if (v5 + 2 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v5 + 3;
  if (v5 + 3 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v5 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v33)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  _BYTE v21[40];
  uint64_t v22;
  _BYTE v23[40];
  uint64_t v24;
  _BYTE v25[48];
  uint64_t v26;

  v20 = (unint64_t *)result;
  v26 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v15 >= v11)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v11)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
      v16 = *(_QWORD *)(v7 + 8 * v6);
      if (!v16)
        break;
    }
LABEL_18:
    v10 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    outlined init with copy of AnyHashable(*(_QWORD *)(a3 + 48) + 40 * v13, (uint64_t)v25);
    v14 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13);
    outlined init with copy of AnyHashable((uint64_t)v25, (uint64_t)v23);
    v24 = v14;
    outlined init with copy of AnyHashable((uint64_t)v23, (uint64_t)v21);
    v22 = v14;
    swift_retain_n();
    outlined destroy of TypesettingConfiguration((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item));
    outlined destroy of AnyHashable((uint64_t)v21);
    swift_release();
    result = outlined destroy of AnyHashable((uint64_t)v25);
    if (v14 != a4)
    {
      *(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
      }
    }
  }
  v17 = v15 + 2;
  if (v17 >= v11)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v11)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
    v16 = *(_QWORD *)(v7 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  uint64_t v0;

  v0 = type metadata accessor for Slice();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v0);
  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v3 = v2;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v12, v8, a1, a2);
    swift_release();
    MEMORY[0x23B7C9D54](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v3 = v2;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v12, v8, a1, a2);
    swift_release();
    MEMORY[0x23B7C9D54](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

uint64_t specialized Dictionary.optimisticFilter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  Swift::UInt *v16;
  Swift::UInt v17;
  Swift::UInt v18;
  uint64_t DynamicType;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  _BYTE *v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  Swift::UInt *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t result;
  char v58;
  char v59;
  int64_t v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[5];
  __int128 v72;
  _BYTE v73[40];
  __int128 v74;
  _BYTE v75[32];
  uint64_t v76;
  Swift::UInt v77;
  Swift::UInt v78;
  __int128 v79[3];

  v3 = a1;
  if (*(_QWORD *)(a1 + 16) >= 0x41uLL)
  {
    v4 = swift_bridgeObjectRetain();
    v3 = specialized _NativeDictionary.filter(_:)(v4, a2);
    swift_bridgeObjectRelease();
    return v3;
  }
  v62 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v64 = a2 + 48;
  v60 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = 0;
  v9 = 0;
  v63 = 0;
  v58 = 1;
  v59 = 1;
  v66 = v3;
  if (!v7)
    goto LABEL_8;
LABEL_6:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = *(_QWORD *)(v3 + 56);
    v16 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v18 = v16[1];
    v77 = *v16;
    v17 = v77;
    v78 = v18;
    outlined init with copy of AnyTrackedValue(v15 + 40 * i, (uint64_t)v79);
    *(_QWORD *)&v74 = v17;
    *((_QWORD *)&v74 + 1) = v18;
    outlined init with take of ScrollStateRequest(v79, (uint64_t)v75);
    *(_QWORD *)&v72 = v17;
    *((_QWORD *)&v72 + 1) = v18;
    outlined init with copy of AnyTrackedValue((uint64_t)v75, (uint64_t)v73);
    v70[0] = v17;
    v70[1] = v18;
    outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v71);
    __swift_project_boxed_opaque_existential_1(v71, v71[3]);
    DynamicType = swift_getDynamicType();
    swift_beginAccess();
    v20 = *(_QWORD *)v64;
    if (*(_QWORD *)(*(_QWORD *)v64 + 16)
      && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(DynamicType), (v22 & 1) != 0))
    {
      outlined init with copy of AnyTrackedValue(*(_QWORD *)(v20 + 56) + 40 * v21, (uint64_t)&v67);
    }
    else
    {
      v69 = 0;
      v67 = 0u;
      v68 = 0u;
    }
    v3 = v66;
    swift_endAccess();
    outlined destroy of TypesettingConfiguration((uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
    v23 = *((_QWORD *)&v68 + 1);
    outlined destroy of TypesettingConfiguration((uint64_t)&v67, (uint64_t (*)(_QWORD))type metadata accessor for ForwardedEventDispatcher?);
    outlined destroy of TypesettingConfiguration((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    if (v23)
    {
      v59 = 0;
      ++v8;
      if (v7)
        goto LABEL_6;
    }
    else
    {
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_85;
      v58 = 0;
      v24 = 1 << v8;
      if (v8 >= 0x40)
        v24 = 0;
      v63 |= v24;
      ++v8;
      if (v7)
        goto LABEL_6;
    }
LABEL_8:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      swift_release_n();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_86:
      swift_release_n();
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v12 >= v60)
      goto LABEL_32;
    v13 = *(_QWORD *)(v62 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v60)
        goto LABEL_32;
      v13 = *(_QWORD *)(v62 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v60)
          goto LABEL_32;
        v13 = *(_QWORD *)(v62 + 8 * v9);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v7 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 < v60)
  {
    v13 = *(_QWORD *)(v62 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_80;
        if (v9 >= v60)
          goto LABEL_32;
        v13 = *(_QWORD *)(v62 + 8 * v9);
        ++v14;
        if (v13)
          goto LABEL_21;
      }
    }
    v9 = v14;
    goto LABEL_21;
  }
LABEL_32:
  swift_release();
  if ((v58 & 1) != 0)
  {
    v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    goto LABEL_36;
  }
  if ((v59 & 1) == 0)
  {
    v25 = 1 << *(_BYTE *)(v3 + 32);
    v26 = -1;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    v27 = v26 & *(_QWORD *)(v3 + 64);
    v28 = v75;
    v61 = (unint64_t)(v25 + 63) >> 6;
    swift_bridgeObjectRetain();
    v29 = 0;
    v65 = 0;
    v30 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (!v27)
    {
      v38 = v65 + 1;
      if (__OFADD__(v65, 1))
        goto LABEL_81;
      if (v38 < v61)
      {
        v39 = *(_QWORD *)(v62 + 8 * v38);
        if (v39)
          goto LABEL_49;
        v40 = v65 + 2;
        ++v65;
        if (v38 + 1 < v61)
        {
          v39 = *(_QWORD *)(v62 + 8 * v40);
          if (v39)
            goto LABEL_52;
          v65 = v38 + 1;
          if (v38 + 2 < v61)
          {
            v39 = *(_QWORD *)(v62 + 8 * (v38 + 2));
            if (v39)
            {
              v38 += 2;
              goto LABEL_49;
            }
            v40 = v38 + 3;
            v65 = v38 + 2;
            if (v38 + 3 < v61)
            {
              v39 = *(_QWORD *)(v62 + 8 * v40);
              if (!v39)
              {
                while (1)
                {
                  v38 = v40 + 1;
                  if (__OFADD__(v40, 1))
                    goto LABEL_84;
                  if (v38 >= v61)
                  {
                    v65 = v61 - 1;
                    goto LABEL_63;
                  }
                  v39 = *(_QWORD *)(v62 + 8 * v38);
                  ++v40;
                  if (v39)
                    goto LABEL_49;
                }
              }
LABEL_52:
              v38 = v40;
LABEL_49:
              v27 = (v39 - 1) & v39;
              v33 = __clz(__rbit64(v39)) + (v38 << 6);
              v65 = v38;
LABEL_45:
              v34 = *(_QWORD *)(v3 + 56);
              v35 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v33);
              v37 = *v35;
              v36 = v35[1];
              *(_QWORD *)&v74 = v37;
              *((_QWORD *)&v74 + 1) = v36;
              outlined init with copy of AnyTrackedValue(v34 + 40 * v33, (uint64_t)v28);
              goto LABEL_64;
            }
          }
        }
      }
LABEL_63:
      v27 = 0;
      v76 = 0;
      memset(v75, 0, sizeof(v75));
      v74 = 0u;
LABEL_64:
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v74, (uint64_t)&v77);
      v41 = v77;
      if (!v77)
      {
        swift_release();
        swift_release();
        return (uint64_t)v30;
      }
      v42 = v78;
      outlined init with take of ScrollStateRequest(v79, (uint64_t)&v74);
      if (v29 == 0x8000000000000000)
        goto LABEL_85;
      if (v29 < 0x40 && ((v63 >> v29) & 1) != 0)
      {
        v43 = v28;
        outlined init with copy of AnyTrackedValue((uint64_t)&v74, (uint64_t)&v72);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v70[0] = v30;
        v46 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
        v47 = v30[2];
        v48 = (v45 & 1) == 0;
        v49 = v47 + v48;
        if (__OFADD__(v47, v48))
          goto LABEL_82;
        v50 = v45;
        if (v30[3] >= v49)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
          v51 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
          if ((v50 & 1) != (v52 & 1))
            goto LABEL_86;
          v46 = v51;
        }
        v30 = (_QWORD *)v70[0];
        if ((v50 & 1) != 0)
        {
          v31 = *(_QWORD *)(v70[0] + 56) + 40 * v46;
          __swift_destroy_boxed_opaque_existential_1(v31);
          outlined init with take of ScrollStateRequest(&v72, v31);
        }
        else
        {
          *(_QWORD *)(v70[0] + 8 * (v46 >> 6) + 64) |= 1 << v46;
          v53 = (Swift::UInt *)(v30[6] + 16 * v46);
          *v53 = v41;
          v53[1] = v42;
          outlined init with take of ScrollStateRequest(&v72, v30[7] + 40 * v46);
          v54 = v30[2];
          v55 = __OFADD__(v54, 1);
          v56 = v54 + 1;
          if (v55)
            goto LABEL_83;
          v30[2] = v56;
        }
        swift_bridgeObjectRelease();
        v3 = v66;
        v28 = v43;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
      ++v29;
    }
    v32 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    v33 = v32 | (v65 << 6);
    goto LABEL_45;
  }
  swift_bridgeObjectRetain();
LABEL_36:
  swift_release();
  return v3;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *);
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t *v23;
  uint64_t v24;
  _QWORD v25[2];
  _BYTE v26[40];
  _BYTE v27[40];
  int64_t v28;

  v23 = (unint64_t *)result;
  v24 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    v18 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v28)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v5 + 8 * v18);
    ++v4;
    if (!v19)
    {
      v4 = v18 + 1;
      if (v18 + 1 >= v28)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
      v19 = *(_QWORD *)(v5 + 8 * v4);
      if (!v19)
      {
        v4 = v18 + 2;
        if (v18 + 2 >= v28)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
        v19 = *(_QWORD *)(v5 + 8 * v4);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v8 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v4 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a3 + 56) + 40 * v10, (uint64_t)v27);
    v25[0] = v12;
    v25[1] = v13;
    outlined init with copy of AnyTrackedValue((uint64_t)v27, (uint64_t)v26);
    type metadata accessor for EventFilter<TappableEvent>(0, v14, v15, v16);
    v17 = *(uint64_t (**)(_BYTE *))AGGraphGetValue();
    swift_retain();
    LOBYTE(v12) = v17(v26);
    swift_release();
    outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    if ((v12 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v28)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  v19 = *(_QWORD *)(v5 + 8 * v20);
  if (v19)
  {
    v4 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v4 >= v28)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v5 + 8 * v4);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  int64_t v33;
  _QWORD v34[2];
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[40];
  uint64_t v39;

  v30 = 0;
  v29 = (unint64_t *)result;
  v5 = 0;
  v32 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v33 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v10 = v9 | (v5 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a3 + 56) + 40 * v10, (uint64_t)v38);
    v34[0] = v15;
    v34[1] = v16;
    outlined init with copy of AnyTrackedValue((uint64_t)v38, (uint64_t)v35);
    v17 = v36;
    v18 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 24))(&v39, v17, v18);
    v19 = v39;
    if (v39)
    {
      v20 = *a4;
      swift_retain_n();
      if (v20 != v19)
      {
        v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88);
        v22 = swift_retain();
        v23 = v21(v22);
        swift_retain();
        swift_release_n();
        if (!v23)
          goto LABEL_4;
        swift_release();
        if (v20 != v23)
        {
          while (1)
          {
            v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88);
            v25 = swift_retain();
            v26 = v24(v25);
            swift_retain();
            swift_release_n();
            if (!v26)
              break;
            swift_release();
            v23 = v26;
            if (v20 == v26)
              goto LABEL_28;
          }
LABEL_4:
          swift_release_n();
          goto LABEL_5;
        }
      }
LABEL_28:
      swift_release_n();
      swift_release();
      outlined destroy of TypesettingConfiguration((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      *(unint64_t *)((char *)v29 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v30++, 1))
        goto LABEL_34;
    }
    else
    {
LABEL_5:
      outlined destroy of TypesettingConfiguration((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    }
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v11 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v29, a2, v30, a3);
  v12 = *(_QWORD *)(v32 + 8 * v11);
  ++v5;
  if (v12)
    goto LABEL_21;
  v5 = v11 + 1;
  if (v11 + 1 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v29, a2, v30, a3);
  v12 = *(_QWORD *)(v32 + 8 * v5);
  if (v12)
    goto LABEL_21;
  v5 = v11 + 2;
  if (v11 + 2 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v29, a2, v30, a3);
  v12 = *(_QWORD *)(v32 + 8 * v5);
  if (v12)
  {
LABEL_21:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v5 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 3;
  if (v13 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v29, a2, v30, a3);
  v12 = *(_QWORD *)(v32 + 8 * v13);
  if (v12)
  {
    v5 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v33)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v29, a2, v30, a3);
    v12 = *(_QWORD *)(v32 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  outlined retain of LayoutGestureBox.Child((uint64_t)a2);
  isStackAllocationSafe = outlined retain of LayoutGestureBox.Child((uint64_t)a2);
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    outlined retain of LayoutGestureBox.Child((uint64_t)a2);
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    if (v2)
      swift_willThrow();
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    outlined retain of LayoutGestureBox.Child((uint64_t)a2);
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v7, a1, a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    MEMORY[0x23B7C9D54](v11, -1, -1);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
  }
  return v10;
}

uint64_t specialized Dictionary.optimisticFilter(_:)(unint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt *v17;
  Swift::UInt v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 *v36;
  unint64_t v37;
  int64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  char isUniquelyReferenced_nonNull_native;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  _OWORD *v60;
  uint64_t v61;
  Swift::UInt *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  int64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  _BYTE v83[40];
  __int128 v84;
  _OWORD v85[2];
  uint64_t v86;
  Swift::UInt v87;
  Swift::UInt v88;
  __int128 v89[3];

  v3 = a1;
  if (*(_QWORD *)(a1 + 16) >= 0x41uLL)
  {
    v4 = swift_bridgeObjectRetain();
    v5 = specialized _NativeDictionary.filter(_:)(v4, a2);
    swift_bridgeObjectRelease();
    return v5;
  }
  v72 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  swift_bridgeObjectRetain();
  outlined retain of LayoutGestureBox.Child((uint64_t)a2);
  v9 = 0;
  v10 = 0;
  v71 = (unint64_t)(v6 + 63) >> 6;
  v73 = 0;
  v74 = v79;
  v68 = 1;
  v70 = 1;
  v69 = v3;
  if (v8)
    goto LABEL_9;
LABEL_10:
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_84;
  }
  if (v13 < v71)
  {
    v14 = *(_QWORD *)(v72 + 8 * v13);
    ++v10;
    if (v14)
      goto LABEL_22;
    v10 = v13 + 1;
    if (v13 + 1 < v71)
    {
      v14 = *(_QWORD *)(v72 + 8 * v10);
      if (v14)
        goto LABEL_22;
      v10 = v13 + 2;
      if (v13 + 2 < v71)
      {
        v14 = *(_QWORD *)(v72 + 8 * v10);
        if (!v14)
        {
          v15 = v13 + 3;
          if (v15 < v71)
          {
            v14 = *(_QWORD *)(v72 + 8 * v15);
            v10 = v15;
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  break;
                if (v10 >= v71)
                  goto LABEL_35;
                v14 = *(_QWORD *)(v72 + 8 * v10);
                ++v15;
                if (v14)
                  goto LABEL_22;
              }
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
              goto LABEL_88;
            }
            goto LABEL_22;
          }
          goto LABEL_35;
        }
LABEL_22:
        v8 = (v14 - 1) & v14;
        for (i = __clz(__rbit64(v14)) + (v10 << 6); ; i = v11 | (v10 << 6))
        {
          v16 = *(_QWORD *)(v3 + 56);
          v17 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * i);
          v19 = v17[1];
          v87 = *v17;
          v18 = v87;
          v88 = v19;
          outlined init with copy of AnyTrackedValue(v16 + 40 * i, (uint64_t)v89);
          *(_QWORD *)&v84 = v18;
          *((_QWORD *)&v84 + 1) = v19;
          outlined init with take of ScrollStateRequest(v89, (uint64_t)v85);
          *(_QWORD *)&v82 = v18;
          *((_QWORD *)&v82 + 1) = v19;
          outlined init with copy of AnyTrackedValue((uint64_t)v85, (uint64_t)v83);
          v78[0] = v18;
          v78[1] = v19;
          outlined init with copy of AnyTrackedValue((uint64_t)v83, (uint64_t)v79);
          v20 = v80;
          v21 = v81;
          __swift_project_boxed_opaque_existential_1(v79, v80);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 24))(&v77, v20, v21);
          v22 = v77;
          if (!v77)
            goto LABEL_8;
          v23 = *a2;
          swift_retain_n();
          if (v23 != v22)
          {
            v24 = a2;
            v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 88);
            v26 = swift_retain();
            v27 = v25(v26);
            swift_retain();
            swift_release_n();
            if (!v27)
              goto LABEL_7;
            swift_release();
            if (v23 != v27)
            {
              while (1)
              {
                v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 88);
                v29 = swift_retain();
                v30 = v28(v29);
                swift_retain();
                swift_release_n();
                if (!v30)
                  break;
                swift_release();
                v27 = v30;
                if (v23 == v30)
                  goto LABEL_29;
              }
LABEL_7:
              swift_release_n();
              a2 = v24;
              v3 = v69;
LABEL_8:
              outlined destroy of TypesettingConfiguration((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
              outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
              v70 = 0;
              ++v9;
              if (!v8)
                goto LABEL_10;
              goto LABEL_9;
            }
LABEL_29:
            a2 = v24;
            v3 = v69;
          }
          swift_release_n();
          swift_release();
          outlined destroy of TypesettingConfiguration((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
          outlined destroy of TypesettingConfiguration((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_89;
          v68 = 0;
          v31 = 1 << v9;
          if (v9 >= 0x40)
            v31 = 0;
          v73 |= v31;
          ++v9;
          if (!v8)
            goto LABEL_10;
LABEL_9:
          v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
    }
  }
LABEL_35:
  swift_release();
  if ((v68 & 1) != 0)
  {
    v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
LABEL_39:
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    return v3;
  }
  if ((v70 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_39;
  }
  v32 = 1 << *(_BYTE *)(v3 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v3 + 64);
  v35 = v85;
  v36 = v89;
  v74 = a2;
  v75 = (unint64_t)(v32 + 63) >> 6;
  swift_bridgeObjectRetain();
  v37 = 0;
  v38 = 0;
  v39 = (_QWORD *)MEMORY[0x24BEE4B00];
  a2 = (uint64_t *)0x8000000000000000;
  while (1)
  {
    if (v34)
    {
      v40 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v41 = v40 | (v38 << 6);
LABEL_47:
      v42 = *(_QWORD *)(v3 + 56);
      v43 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v41);
      v45 = *v43;
      v44 = v43[1];
      *(_QWORD *)&v84 = v45;
      *((_QWORD *)&v84 + 1) = v44;
      outlined init with copy of AnyTrackedValue(v42 + 40 * v41, (uint64_t)v35);
      goto LABEL_66;
    }
    v46 = v38 + 1;
    if (__OFADD__(v38, 1))
      goto LABEL_85;
    if (v46 < v75)
    {
      v47 = *(_QWORD *)(v72 + 8 * v46);
      if (v47)
        goto LABEL_51;
      v48 = v38 + 2;
      ++v38;
      if (v46 + 1 < v75)
      {
        v47 = *(_QWORD *)(v72 + 8 * v48);
        if (v47)
          goto LABEL_54;
        v38 = v46 + 1;
        if (v46 + 2 < v75)
        {
          v47 = *(_QWORD *)(v72 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2;
            goto LABEL_51;
          }
          v48 = v46 + 3;
          v38 = v46 + 2;
          if (v46 + 3 < v75)
            break;
        }
      }
    }
LABEL_65:
    v34 = 0;
    v86 = 0;
    memset(v85, 0, sizeof(v85));
    v84 = 0u;
LABEL_66:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v84, (uint64_t)&v87);
    v49 = v87;
    if (!v87)
    {
      swift_release();
      outlined release of LayoutGestureBox.Child((uint64_t)v74);
      return (uint64_t)v39;
    }
    v50 = v88;
    outlined init with take of ScrollStateRequest(v36, (uint64_t)&v84);
    if (v37 == 0x8000000000000000)
    {
      outlined release of LayoutGestureBox.Child((uint64_t)v74);
      v67 = (uint64_t)v74;
      goto LABEL_91;
    }
    if (v37 < 0x40 && ((v73 >> v37) & 1) != 0)
    {
      v76 = v38;
      a2 = (uint64_t *)v36;
      outlined init with copy of AnyTrackedValue((uint64_t)&v84, (uint64_t)&v82);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v78[0] = v39;
      v53 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
      v54 = v39[2];
      v55 = (v52 & 1) == 0;
      v56 = v54 + v55;
      if (__OFADD__(v54, v55))
        goto LABEL_86;
      v57 = v52;
      if (v39[3] >= v56)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, isUniquelyReferenced_nonNull_native);
        v58 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
        if ((v57 & 1) != (v59 & 1))
          goto LABEL_92;
        v53 = v58;
      }
      v60 = v35;
      v39 = (_QWORD *)v78[0];
      if ((v57 & 1) != 0)
      {
        v61 = *(_QWORD *)(v78[0] + 56) + 40 * v53;
        __swift_destroy_boxed_opaque_existential_1(v61);
        outlined init with take of ScrollStateRequest(&v82, v61);
      }
      else
      {
        *(_QWORD *)(v78[0] + 8 * (v53 >> 6) + 64) |= 1 << v53;
        v62 = (Swift::UInt *)(v39[6] + 16 * v53);
        *v62 = v49;
        v62[1] = v50;
        outlined init with take of ScrollStateRequest(&v82, v39[7] + 40 * v53);
        v63 = v39[2];
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_87;
        v39[2] = v65;
      }
      swift_bridgeObjectRelease();
      v3 = v69;
      v35 = v60;
      v36 = (__int128 *)a2;
      a2 = (uint64_t *)0x8000000000000000;
      v38 = v76;
    }
    else
    {
      v3 = v69;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
    ++v37;
  }
  v47 = *(_QWORD *)(v72 + 8 * v48);
  if (v47)
  {
LABEL_54:
    v46 = v48;
LABEL_51:
    v34 = (v47 - 1) & v47;
    v41 = __clz(__rbit64(v47)) + (v46 << 6);
    v38 = v46;
    goto LABEL_47;
  }
  while (1)
  {
    v46 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v46 >= v75)
    {
      v38 = v75 - 1;
      goto LABEL_65;
    }
    v47 = *(_QWORD *)(v72 + 8 * v46);
    ++v48;
    if (v47)
      goto LABEL_51;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  outlined release of LayoutGestureBox.Child((uint64_t)a2);
  v67 = (uint64_t)a2;
LABEL_91:
  outlined release of LayoutGestureBox.Child(v67);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_92:
  outlined release of LayoutGestureBox.Child((uint64_t)v74);
  outlined release of LayoutGestureBox.Child((uint64_t)v74);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined release of LayoutGestureBox.Child(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(void **)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 112);
  v9 = *(_OWORD *)(a1 + 160);
  v10 = *(_OWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  outlined copy of LayoutGestureBox.Child.DebugData?(v17, v16, v15, v14, v3, v4, v5, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v6, v7, (uint64_t (*)(void))outlined consume of LayoutGestureBox.Child.DebugData);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t outlined copy of LayoutGestureBox.Child.DebugData?(unint64_t result, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t (*a19)(void))
{
  if (HIDWORD(a4)
    || result < 0xFFFFFFFF00000000
    || a3 & 0xFFFFFC00 | a2 & 0xF000000000000007
    || a17 > 3
    || (a18 & 0xF000000000000007) != 0)
  {
    return a19();
  }
  return result;
}

uint64_t outlined consume of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  uint64_t result;

  if ((a18 & 0x8000000000000000) == 0)
  {
    outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

void type metadata accessor for (key: EventID, value: EventType)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: EventID, value: EventType)?)
  {
    type metadata accessor for (key: EventID, value: EventType)();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?);
  }
}

void type metadata accessor for EventFilter<TappableEvent>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EventFilter<TappableEvent>)
  {
    v4 = type metadata accessor for EventFilter(0, (uint64_t)&type metadata for TappableEvent, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>);
  }
}

void type metadata accessor for ForwardedEventDispatcher?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForwardedEventDispatcher?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for ForwardedEventDispatcher);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForwardedEventDispatcher?);
  }
}

uint64_t Group.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Group.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Group.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Group.init(_content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t Group<A>.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t static Group<A>._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  int v25;
  _QWORD v26[2];
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38[3];

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v25 = *((_DWORD *)a2 + 16);
  v24 = a2[9];
  v23 = *((_BYTE *)a2 + 80);
  v38[0] = *a1;
  v14 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for GroupContainer, a3, (uint64_t)&protocol witness table for GroupContainer);
  v17 = type metadata accessor for Group(255, a3, v15, v16);
  type metadata accessor for _GraphValue(0, v17, v18, v19);
  _GraphValue.unsafeBitCast<A>(to:)(&v27);
  v20 = v27;
  if (AGSubgraphShouldRecordTree())
    AGSubgraphBeginTreeElement();
  v38[0] = v20;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  v31 = v10;
  v32 = v11;
  v33 = v12;
  v34 = v13;
  v35 = v25;
  v36 = v24;
  v37 = v23;
  static _VariadicView.Tree<>._makeViewList(view:inputs:)(v38, (uint64_t)&v27, (uint64_t)&type metadata for GroupContainer, a3, (uint64_t)&protocol witness table for GroupContainer, a4);
  v26[0] = &protocol witness table for GroupContainer;
  v26[1] = a4;
  v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v14, v26);
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v20, v14, v21);
}

uint64_t type metadata accessor for Group(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Group);
}

uint64_t static Group<A>._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  uint64_t v8;

  v3 = *((_DWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 3);
  v6 = *a1;
  v7 = v3;
  v8 = v4;
  return (*(uint64_t (**)(__int128 *))(a3 + 40))(&v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <A> Group<A>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <A> Group<A>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return static Group<A>._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance GroupContainer(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  char v18;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = a2[5];
  v6 = *((_DWORD *)a2 + 16);
  v7 = a2[9];
  v8 = *((_BYTE *)a2 + 80);
  v10 = *a2;
  v11 = v3;
  v12 = v4;
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v5;
  v15 = *((_OWORD *)a2 + 3);
  v16 = v6;
  v17 = v7;
  v18 = v8;
  return a3(a1, &v10);
}

uint64_t static _ViewListOutputs.sectionListOutputs(_:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  int v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int Attribute;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t result;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  _QWORD v44[5];
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[40];
  __int128 v48[2];
  char v49;
  _BYTE v50[48];
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v3 = a3;
  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v35 = *(_DWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 16);
  v38 = *(_QWORD *)a2;
  v36 = v6;
  if (v7)
  {
    v40 = *(_DWORD *)(a2 + 36);
    v8 = a1 + 32;
    v37 = *MEMORY[0x24BE096C0];
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = 0;
    v39 = v6 & 3;
    v11 = (char *)MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of _ViewListOutputs(v8, (uint64_t)v50);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v50, (uint64_t)v48);
      if ((v49 & 1) != 0)
      {
        v12 = v48[0];
        if (*((_QWORD *)&v48[0] + 1))
        {
          LODWORD(v45) = v48[0];
          v46 = *((_QWORD *)&v48[0] + 1);
          protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
          type metadata accessor for ViewList();
          lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
          swift_retain();
          v4 = v38;
          v12 = Attribute.init<A>(body:value:flags:update:)();
          swift_release_n();
        }
      }
      else
      {
        outlined init with take of ScrollStateRequest(v48, (uint64_t)v47);
        outlined init with copy of AnyTrackedValue((uint64_t)v47, (uint64_t)v44);
        if ((v40 & 0x100) != 0)
        {
          swift_retain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          v15 = specialized find<A>(_:key:)(v4);
          if (v15)
          {
            v16 = (uint64_t *)(v15 + 72);
            v17 = (unsigned int *)(v15 + 76);
          }
          else
          {
            v17 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
            if (one-time initialization token for defaultValue != -1)
              swift_once();
            v16 = &static _DisplayList_StableIdentityScope.defaultValue;
          }
          v18 = *(unsigned int *)v16;
          v19 = *v17;
          swift_bridgeObjectRelease();
          swift_release();
          swift_release_n();
          v20 = v18 | (v19 << 32);
          Attribute = AGWeakAttributeGetAttribute();
          v14 = Attribute == v37;
          if (Attribute == v37)
            v13 = 0;
          else
            v13 = v20;
        }
        else
        {
          v13 = 0;
          v14 = 1;
        }
        v42 = MEMORY[0x24BEE4B08];
        v43 = 0;
        v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
        BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v44, v5, v39 == 1, v13, v14, &v42, &v41, (uint64_t)&v45);
        v44[3] = &type metadata for BaseViewList;
        v44[4] = &protocol witness table for BaseViewList;
        v44[0] = swift_allocObject();
        outlined init with copy of BaseViewList((uint64_t)&v45, v44[0] + 16);
        type metadata accessor for ViewList();
        type metadata accessor for External<ViewList>();
        lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
        v12 = Attribute.init<A>(body:value:flags:update:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        outlined destroy of BaseViewList((uint64_t)&v45);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v23 = *((_QWORD *)v11 + 2);
      v22 = *((_QWORD *)v11 + 3);
      if (v23 >= v22 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v23 + 1;
      *(_DWORD *)&v11[4 * v23 + 32] = v12;
      v5 = v51;
      if ((v10 & 1) != 0)
      {
        outlined destroy of _ViewListOutputs((uint64_t)v50);
        v9 = 0;
        v10 = 1;
      }
      else
      {
        v24 = v52;
        v25 = v53;
        outlined destroy of _ViewListOutputs((uint64_t)v50);
        if ((v25 & 1) != 0)
        {
          v9 = 0;
          v10 = 1;
        }
        else
        {
          v10 = 0;
          v9 += v24;
        }
      }
      v8 += 72;
      --v7;
    }
    while (v7);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = a3;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = 0;
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  swift_release();
  if ((v36 & 0x2000) != 0)
  {
    v26 = *((_QWORD *)v11 + 2);
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    v27 = swift_dynamicCastClass();
    if (!v27)
    {
      swift_bridgeObjectRelease();
      v27 = MEMORY[0x24BEE4AF8];
    }
    v28 = *(_QWORD *)(v27 + 16);
    swift_release();
    if (v28 == v26 - (v26 != 0))
    {
      v29 = swift_dynamicCastClass();
      if (!v29)
      {
        swift_bridgeObjectRelease();
        v29 = MEMORY[0x24BEE4AF8];
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v29 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v11, (uint64_t)(v11 + 32), v26 != 0, (2 * v26) | 1);
    }
    swift_bridgeObjectRelease();
    v45 = v29;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ViewList();
    lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init();
    v30 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
    if (*((_QWORD *)v11 + 2) < 2uLL)
    {
      __break(1u);
    }
    else
    {
      *((_DWORD *)v11 + 9) = v30;
      v31 = specialized _GraphInputs.intern<A>(_:id:)(0);
      if (*((_QWORD *)v11 + 2) >= 3uLL)
      {
        *((_DWORD *)v11 + 10) = v31;
        goto LABEL_40;
      }
    }
    __break(1u);
  }
LABEL_40:
  v45 = (uint64_t)v11;
  LOBYTE(v46) = v36 < 0;
  HIDWORD(v46) = v35;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ViewList();
  lazy protocol witness table accessor for type MakeSection and conformance MakeSection();
  v32 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  *(_DWORD *)v3 = v32;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = v9;
  *(_BYTE *)(v3 + 64) = v10;
  return result;
}

uint64_t static _ViewListOutputs.groupViewList<A, B>(parent:footer:inputs:body:)@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void (*a4)(_OWORD *__return_ptr, uint64_t, __int128 *)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int ShouldRecordTree;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v54;
  unint64_t v55;
  int v56;
  int v58;
  int v62;
  char v63;
  uint64_t v64;
  unint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  char v84;
  char v85;
  int v86;
  unsigned int v87;
  _OWORD v88[3];
  __int128 v89;
  char v90;
  _OWORD v91[4];
  char v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  char v104;
  _OWORD v105[3];
  __int128 v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  char v118;
  _OWORD v119[3];
  __int128 v120;
  char v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v68 = *a1;
  v9 = *(_QWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  v78 = *(_DWORD *)(a3 + 8);
  v79 = *(_QWORD *)(a3 + 24);
  v80 = *(_DWORD *)(a3 + 32);
  v83 = *(_DWORD *)(a3 + 36);
  v11 = *(_QWORD *)(a3 + 40);
  v71 = *(_QWORD *)(a3 + 48);
  v12 = *(_QWORD *)(a3 + 56);
  v13 = *(_DWORD *)(a3 + 64);
  v14 = *(_QWORD *)(a3 + 72);
  v15 = *(_BYTE *)(a3 + 80);
  if ((v12 & 0x1000) != 0)
    v16 = *(_QWORD *)(a3 + 56);
  else
    v16 = v12 & 0xFFFFFFFFFFFFFEF7;
  v76 = v16;
  if ((v12 & 4) != 0)
  {
    LODWORD(v108) = *(_DWORD *)(a3 + 64);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type SectionedTrait and conformance SectionedTrait();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = Attribute.init<A>(body:value:flags:update:)();
    if (v14)
    {
      *(_QWORD *)&v108 = v14;
      BYTE8(v108) = v15 & 1;
      v20 = v17;
      specialized Set._Variant.insert(_:)(&v93, (uint64_t)&type metadata for IsSectionedTraitKey);
      v17 = v20;
      v18 = v108;
      v19 = BYTE8(v108);
    }
    else
    {
      v18 = 0;
      v19 = v15;
    }
    v16 = v76;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v17 = v13;
    v18 = v14;
    v19 = v15;
  }
  *(_QWORD *)&v108 = v9;
  DWORD2(v108) = v78;
  v109 = v10;
  v110 = v79;
  v111 = v80;
  v112 = v83;
  v113 = v11;
  v114 = v71;
  v115 = v16;
  v116 = v17;
  v117 = v18;
  v118 = v19;
  v81 = v17;
  v64 = v14;
  v62 = v13;
  v84 = v19;
  if ((v12 & 8) != 0)
  {
    v23 = v16;
    if ((v16 & 0x10) == 0)
    {
      v23 = v16 | 0x10;
      v115 = v16 | 0x10;
    }
    v66 = v23;
    LODWORD(v93) = v17;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    v116 = v22;
    if (v18)
    {
      v93 = v18;
      LOBYTE(v94) = v19 & 1;
      specialized Set._Variant.insert(_:)((uint64_t *)v105, (uint64_t)&type metadata for IsSectionHeaderTraitKey);
      v21 = v93;
      v19 = v94;
      v117 = v93;
      v118 = v94;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v21 = v18;
    v22 = v81;
    v66 = v16;
  }
  v73 = v10;
  v74 = v9;
  v72 = v11;
  v77 = v12;
  v63 = v15;
  v75 = v18;
  if ((v12 & 0x20) != 0)
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v29 = *((_QWORD *)&static StyleContextInput.defaultValue + 1);
    v28 = static StyleContextInput.defaultValue;
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v108, v28, v29);
    swift_release();
    v26 = v108;
    v27 = v109;
    v54 = DWORD2(v108);
    v55 = v110;
    v56 = v111;
    v25 = v112;
    v11 = v113;
    v24 = v114;
    v66 = v115;
    v22 = v116;
    v21 = v117;
    v19 = v118;
  }
  else
  {
    v24 = v71;
    v25 = v83;
    v56 = v80;
    v54 = v78;
    v55 = v79;
    v26 = v9;
    v27 = v10;
  }
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v58 = ShouldRecordTree;
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  LODWORD(v91[0]) = v68;
  v93 = v26;
  v94 = v54;
  v95 = v27;
  v96 = v55;
  v97 = v56;
  v98 = v25;
  v99 = v11;
  v100 = v24;
  v101 = v66;
  v102 = v22;
  v103 = v21;
  v104 = v19;
  (*(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(v105, v91, &v93, a5, a7);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v68, a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v119[2] = v105[2];
  v120 = v106;
  v121 = v107;
  v119[0] = v105[0];
  v119[1] = v105[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v31 = v120;
  if ((v77 & 4) != 0)
  {
    LODWORD(v108) = v81;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait();
    v37 = Attribute.init<A>(body:value:flags:update:)();
    v33 = v73;
    v32 = v74;
    v34 = v72;
    v36 = v84;
    if (v75)
    {
      *(_QWORD *)&v108 = v75;
      BYTE8(v108) = v84 & 1;
      v38 = v37;
      specialized Set._Variant.insert(_:)(&v93, (uint64_t)&type metadata for DepthTraitKey);
      v37 = v38;
      v35 = v108;
      v36 = BYTE8(v108);
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    v33 = v73;
    v32 = v74;
    v34 = v72;
    v35 = v75;
    v36 = v84;
    v37 = v81;
  }
  v82 = v37;
  v85 = v36;
  *(_QWORD *)&v108 = v32;
  DWORD2(v108) = v78;
  v109 = v33;
  v110 = v79;
  v111 = v80;
  v112 = v83;
  v113 = v34;
  v114 = v31;
  v39 = v76;
  v115 = v76;
  v116 = v37;
  v117 = v35;
  v118 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v40 = swift_bridgeObjectRetain();
  a4(v105, v40, &v108);
  v41 = v85;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)&v108 = v32;
  DWORD2(v108) = v78;
  v109 = v33;
  v110 = v79;
  v111 = v80;
  v112 = v83;
  v113 = v34;
  v70 = v106;
  v114 = v106;
  v115 = v76;
  v116 = v82;
  v117 = v35;
  v118 = v85;
  if ((v77 & 8) != 0)
  {
    if ((v76 & 8) != 0)
    {
      v39 = v76 & 0xFFFFFFFFFFFFFFF7;
      v115 = v76 & 0xFFFFFFFFFFFFFFF7;
    }
    v76 = v39;
    LODWORD(v93) = v82;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type SectionFooterTrait and conformance SectionFooterTrait();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82 = Attribute.init<A>(body:value:flags:update:)();
    v116 = v82;
    if (v35)
    {
      v93 = v35;
      LOBYTE(v94) = v85 & 1;
      specialized Set._Variant.insert(_:)((uint64_t *)v88, (uint64_t)&type metadata for IsSectionFooterTraitKey);
      v42 = v93;
      v41 = v94;
      v117 = v93;
      v118 = v94;
    }
    else
    {
      v42 = 0;
      v41 = v85;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = v35;
  }
  v43 = v83;
  v44 = HIDWORD(v79);
  v45 = v80;
  v46 = v78;
  v47 = v79;
  if ((v77 & 0x40) != 0)
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v49 = *((_QWORD *)&static StyleContextInput.defaultValue + 1);
    v48 = static StyleContextInput.defaultValue;
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v108, v48, v49);
    swift_release();
    v32 = v108;
    v46 = DWORD2(v108);
    v33 = v109;
    v47 = v110;
    v44 = HIDWORD(v110);
    v45 = v111;
    v43 = v112;
    v34 = v113;
    v70 = v114;
    v76 = v115;
    v82 = v116;
    v42 = v117;
    v41 = v118;
  }
  v67 = v46;
  _GraphValue.init(_:)(a2, &v87);
  v50 = v87;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v58)
    AGSubgraphBeginTreeElement();
  v86 = v50;
  v93 = v32;
  v94 = v67;
  v95 = v33;
  v96 = __PAIR64__(v44, v47);
  v97 = v45;
  v98 = v43;
  v99 = v34;
  v100 = v70;
  v101 = v76;
  v102 = v82;
  v103 = v42;
  v104 = v41;
  (*(void (**)(_OWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a9 + 32))(v88, &v86, &v93, a6, a9);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v50, a6, a9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v91[2] = v88[2];
  v91[3] = v89;
  v92 = v90;
  v91[0] = v88[0];
  v91[1] = v88[1];
  v51 = v89;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewListOutputs>, (uint64_t)&type metadata for _ViewListOutputs, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_235283260;
  outlined init with copy of _ViewListOutputs((uint64_t)v119, v52 + 32);
  outlined init with copy of _ViewListOutputs((uint64_t)v105, v52 + 104);
  outlined init with copy of _ViewListOutputs((uint64_t)v91, v52 + 176);
  *(_QWORD *)&v108 = v74;
  DWORD2(v108) = v78;
  v109 = v73;
  v110 = v79;
  v111 = v80;
  v112 = v83;
  v113 = v72;
  if ((v77 & 0x100) != 0)
  {
    v114 = v71;
    v115 = v77;
    v116 = v62;
    v117 = v64;
    v118 = v63;
    static _ViewListOutputs.sectionListOutputs(_:inputs:)(v52, (uint64_t)&v108, a8);
  }
  else
  {
    v114 = v51;
    v115 = v77;
    v116 = v62;
    v117 = v64;
    v118 = v63;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    static _ViewListOutputs.concat(_:inputs:)(v52, &v108, a8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  swift_bridgeObjectRelease();
  outlined destroy of _ViewListOutputs((uint64_t)v91);
  outlined destroy of _ViewListOutputs((uint64_t)v105);
  outlined destroy of _ViewListOutputs((uint64_t)v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t DepthTrait.init(traits:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static _ViewListOutputs.groupViewListCount<A, B, C>(inputs:contentType:headerType:footerType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  v14 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = v15 & 0xFFFFFFFFFFFFFFF7;
  if ((v15 & 0x100) != 0)
    v18 = (v15 & 0xFFFFFFFFFFFFFFF7 ^ 0x100) & v15;
  if ((v15 & 0x1000) != 0)
    v19 = *(_QWORD *)(a1 + 8);
  else
    v19 = v18;
  v49 = *(_QWORD *)a1;
  v50 = v19;
  v51 = v16;
  v52 = v17;
  v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a8 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  v21 = v20(&v49, a5, a8);
  v22 = v21;
  if ((v23 & 1) != 0)
    goto LABEL_21;
  v44 = v21;
  v49 = v14;
  v50 = v19;
  v51 = v16;
  v24 = v19;
  v52 = v17;
  if ((v15 & 8) != 0)
  {
    v24 = v19;
    if ((v19 & 0x10) == 0)
    {
      v24 = v19 | 0x10;
      v50 = v19 | 0x10;
    }
  }
  v43 = a7;
  if ((v15 & 0x20) != 0)
  {
    v28 = one-time initialization token for defaultValue;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v28 != -1)
      swift_once();
    v30 = *((_QWORD *)&static StyleContextInput.defaultValue + 1);
    v29 = static StyleContextInput.defaultValue;
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(&v49, v29, v30);
    swift_release();
    v25 = v49;
    v24 = v50;
    v27 = v51;
    v26 = v52;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v25 = v14;
    v26 = v17;
    v27 = v16;
  }
  v45 = v25;
  v46 = v24;
  v47 = v27;
  v48 = v26;
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(a9 + 40))(&v45, a6);
  v32 = v31;
  swift_bridgeObjectRelease();
  swift_release();
  if ((v32 & 1) != 0)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    swift_release();
    return v22;
  }
  v33 = v44 + v22;
  if (__OFADD__(v44, v22))
  {
    __break(1u);
    goto LABEL_29;
  }
  v32 = a10;
  v49 = v14;
  v50 = v19;
  v51 = v16;
  v52 = v17;
  if ((v15 & 8 & v19) != 0)
  {
    v19 &= ~8uLL;
    v50 = v19;
  }
  v26 = v43;
  if ((v15 & 0x40) != 0)
  {
    v37 = one-time initialization token for defaultValue;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v37 == -1)
    {
LABEL_24:
      v39 = *((_QWORD *)&static StyleContextInput.defaultValue + 1);
      v38 = static StyleContextInput.defaultValue;
      swift_retain();
      specialized closure #1 in PropertyList.subscript.setter(&v49, v38, v39);
      swift_release();
      v34 = v49;
      v19 = v50;
      v16 = v51;
      v35 = v52;
      goto LABEL_25;
    }
LABEL_29:
    swift_once();
    goto LABEL_24;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v34 = v14;
  v35 = v17;
LABEL_25:
  v45 = v34;
  v46 = v19;
  v47 = v16;
  v48 = v35;
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 40))(&v45, v26, v32);
  v41 = v40;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
  if ((v41 & 1) != 0)
    return v22;
  v42 = __OFADD__(v33, v22);
  v22 += v33;
  if (!v42)
    return v22;
  __break(1u);
  return result;
}

uint64_t static _ViewListOutputs.nonEmptyParentViewList(inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35[7];

  v35[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 28);
  v6 = *(_DWORD *)(a1 + 36);
  v19 = *(_DWORD *)(a1 + 32);
  v20 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  LODWORD(v22) = *(_DWORD *)(a1 + 64);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type EmptyViewTrait and conformance EmptyViewTrait();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = Attribute.init<A>(body:value:flags:update:)();
  if (v8)
  {
    v22 = v8;
    specialized Set._Variant.insert(_:)(v35, (uint64_t)&type metadata for IsEmptyViewTraitKey);
    v9 &= 1u;
  }
  specialized _GraphInputs.intern<A>(_:id:)(0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>(0);
  v35[3] = v13;
  v35[4] = (uint64_t)&protocol witness table for UnaryElements<A>;
  v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(_QWORD *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v20;
  *(_QWORD *)(v14 + 40) = v3;
  *(_DWORD *)(v14 + 48) = v4;
  *(_DWORD *)(v14 + 52) = v5;
  *(_DWORD *)(v14 + 56) = v19;
  *(_DWORD *)(v14 + 60) = v6;
  *(_QWORD *)(v14 + 64) = v7;
  v22 = v2;
  v23 = v20;
  v24 = v3;
  v25 = v4;
  v26 = v5;
  v27 = v19;
  v28 = v6;
  v29 = v7;
  v30 = v18;
  v31 = v17;
  v32 = v16;
  v33 = v8;
  v34 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t SectionedTrait.value.getter@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _UNKNOWN **v8;
  ValueMetadata *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  if (*MEMORY[0x24BE096C0] == a1)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v3 = *(_QWORD **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionedTraitKey>, (uint64_t)&type metadata for IsSectionedTraitKey, (uint64_t)&protocol witness table for IsSectionedTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      v17 = v12;
      v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a2 = v3;
      return result;
    }
  }
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    v7 = v17;
    v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsSectionedTraitKey)
      break;
    ++v6;
    v5 += 5;
    if (v4 == v6)
      goto LABEL_9;
  }
  LOBYTE(v16) = 1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
  }
  if (v6 < v3[2])
  {
    v14 = v3[v5 + 7];
    v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x24BEE1328], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized ViewTraitCollection.subscript.setter(char a1)
{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      v8 = v18;
      v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for CanTransitionTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x24BEE1328], v15, v16);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>, (uint64_t)&type metadata for CanTransitionTraitKey, (uint64_t)&protocol witness table for CanTransitionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v18 = v12;
    v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      v8 = v18;
      v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsSectionedTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x24BEE1328], v15, v16);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionedTraitKey>, (uint64_t)&type metadata for IsSectionedTraitKey, (uint64_t)&protocol witness table for IsSectionedTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v18 = v12;
    v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      v8 = v18;
      v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsEmptyViewTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x24BEE1328], v15, v16);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsEmptyViewTraitKey>, (uint64_t)&type metadata for IsEmptyViewTraitKey, (uint64_t)&protocol witness table for IsEmptyViewTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v18 = v12;
    v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      v8 = v18;
      v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsSectionHeaderTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x24BEE1328], v15, v16);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionHeaderTraitKey>, (uint64_t)&type metadata for IsSectionHeaderTraitKey, (uint64_t)&protocol witness table for IsSectionHeaderTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v18 = v12;
    v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      v8 = v18;
      v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsSectionFooterTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x24BEE1328], v15, v16);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionFooterTraitKey>, (uint64_t)&type metadata for IsSectionFooterTraitKey, (uint64_t)&protocol witness table for IsSectionFooterTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v18 = v12;
    v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      v8 = v18;
      v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsAuxiliaryContentTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x24BEE1328], v15, v16);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsAuxiliaryContentTraitKey>, (uint64_t)&type metadata for IsAuxiliaryContentTraitKey, (uint64_t)&protocol witness table for IsAuxiliaryContentTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v18 = v12;
    v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

uint64_t specialized ViewTraitCollection.subscript.setter(uint64_t a1)
{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      v8 = v18;
      v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for DepthTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    *(_QWORD *)&v17 = a1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x24BEE1768], v15, v16);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DepthTraitKey>, (uint64_t)&type metadata for DepthTraitKey, (uint64_t)&protocol witness table for DepthTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v18 = v12;
    v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    *(_QWORD *)&v17 = a1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

uint64_t specialized ViewTraitCollection.subscript.setter(double a1)
{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v2 = v1;
  v4 = *v1;
  Kind = v4[1].Kind;
  if (Kind)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v18);
      v8 = v19;
      v9 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, v19);
      v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
      if (v4 == &type metadata for ZIndexTraitKey)
        break;
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        v4 = *v2;
        goto LABEL_7;
      }
    }
    *(double *)&v18 = a1;
    v14 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (ValueMetadata *)result;
      *v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      v15 = (uint64_t)&v14[2] + v6;
      v16 = *(uint64_t *)((char *)&v14[3].Description + v6);
      v17 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1(v15, v16);
      result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v17 + 24))(&v18, MEMORY[0x24BEE13C8], v16, v17);
      *v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    v11 = v4[1].Kind;
    Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1)
      v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), v11 + 1, 1, v4);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<ZIndexTraitKey>, (uint64_t)&type metadata for ZIndexTraitKey, (uint64_t)&protocol witness table for ZIndexTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v19 = v12;
    v20 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    *(double *)&v18 = a1;
    v4[1].Kind = v11 + 1;
    result = outlined init with take of ScrollStateRequest(&v18, (uint64_t)&v4[2] + 40 * v11);
    *v2 = v4;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SectionedTrait@<X0>(_QWORD *a1@<X8>)
{
  int *v1;

  return SectionedTrait.value.getter(*v1, a1);
}

uint64_t DepthTrait.value.getter@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _UNKNOWN **v10;
  ValueMetadata *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  if (*v1 == *MEMORY[0x24BE096C0])
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v3 = *(_QWORD **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, (uint64_t)v3);
  swift_bridgeObjectRelease();
  v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
LABEL_11:
    v13 = v3[2];
    v12 = v3[3];
    if (v13 >= v12 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v3);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DepthTraitKey>, (uint64_t)&type metadata for DepthTraitKey, (uint64_t)&protocol witness table for DepthTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    v19 = v14;
    v20 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    *(_QWORD *)&v18 = v5;
    v3[2] = v13 + 1;
    result = outlined init with take of ScrollStateRequest(&v18, (uint64_t)&v3[5 * v13 + 4]);
LABEL_18:
    *a1 = v3;
    return result;
  }
  v6 = v3[2];
  if (!v6)
  {
LABEL_10:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (v8 >= v3[2])
    {
      __break(1u);
      goto LABEL_20;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v7 + 4], (uint64_t)&v18);
    v9 = v19;
    v10 = v20;
    __swift_project_boxed_opaque_existential_1(&v18, v19);
    v11 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v10[1])(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
    if (v11 == &type metadata for DepthTraitKey)
      break;
    ++v8;
    v7 += 5;
    if (v6 == v8)
      goto LABEL_10;
  }
  *(_QWORD *)&v18 = v5;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
  }
  if (v8 < v3[2])
  {
    v16 = v3[v7 + 7];
    v17 = v3[v7 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v7 + 4], v16);
    result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v17 + 24))(&v18, MEMORY[0x24BEE1768], v16, v17);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t ViewTraitCollection.groupDepth.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t EmptyViewTrait.value.getter@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _UNKNOWN **v8;
  ValueMetadata *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  if (*MEMORY[0x24BE096C0] == a1)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v3 = *(_QWORD **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsEmptyViewTraitKey>, (uint64_t)&type metadata for IsEmptyViewTraitKey, (uint64_t)&protocol witness table for IsEmptyViewTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      v17 = v12;
      v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a2 = v3;
      return result;
    }
  }
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    v7 = v17;
    v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsEmptyViewTraitKey)
      break;
    ++v6;
    v5 += 5;
    if (v4 == v6)
      goto LABEL_9;
  }
  LOBYTE(v16) = 1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
  }
  if (v6 < v3[2])
  {
    v14 = v3[v5 + 7];
    v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x24BEE1328], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance EmptyViewTrait@<X0>(_QWORD *a1@<X8>)
{
  int *v1;

  return EmptyViewTrait.value.getter(*v1, a1);
}

uint64_t SectionHeaderTrait.value.getter@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _UNKNOWN **v8;
  ValueMetadata *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  if (*v1 == *MEMORY[0x24BE096C0])
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v3 = *(_QWORD **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionHeaderTraitKey>, (uint64_t)&type metadata for IsSectionHeaderTraitKey, (uint64_t)&protocol witness table for IsSectionHeaderTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      v17 = v12;
      v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a1 = v3;
      return result;
    }
  }
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    v7 = v17;
    v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsSectionHeaderTraitKey)
      break;
    ++v6;
    v5 += 5;
    if (v4 == v6)
      goto LABEL_9;
  }
  LOBYTE(v16) = 1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
  }
  if (v6 < v3[2])
  {
    v14 = v3[v5 + 7];
    v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x24BEE1328], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t SectionFooterTrait.value.getter@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _UNKNOWN **v8;
  ValueMetadata *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  if (*MEMORY[0x24BE096C0] == a1)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v3 = *(_QWORD **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionFooterTraitKey>, (uint64_t)&type metadata for IsSectionFooterTraitKey, (uint64_t)&protocol witness table for IsSectionFooterTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      v17 = v12;
      v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a2 = v3;
      return result;
    }
  }
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    v7 = v17;
    v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsSectionFooterTraitKey)
      break;
    ++v6;
    v5 += 5;
    if (v4 == v6)
      goto LABEL_9;
  }
  LOBYTE(v16) = 1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
  }
  if (v6 < v3[2])
  {
    v14 = v3[v5 + 7];
    v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    result = (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x24BEE1328], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SectionFooterTrait@<X0>(_QWORD *a1@<X8>)
{
  int *v1;

  return SectionFooterTrait.value.getter(*v1, a1);
}

uint64_t static DepthTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t (*ViewTraitCollection.groupDepth.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  a1[1] = (uint64_t)v1;
  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return ViewTraitCollection.groupDepth.modify;
}

uint64_t ViewTraitCollection.groupDepth.modify(uint64_t *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t static IsSectionedTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t ViewTraitCollection.isSectioned.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

uint64_t (*ViewTraitCollection.isSectioned.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = v1;
  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isSectioned.modify;
}

uint64_t ViewTraitCollection.isSectioned.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(_BYTE *)(a1 + 8));
}

uint64_t View.definesSection()(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 1;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for IsSectionedTraitKey, (uint64_t)&v3, a1, (uint64_t)&type metadata for IsSectionedTraitKey, a2, (uint64_t)&protocol witness table for IsSectionedTraitKey);
}

uint64_t static IsEmptyViewTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t ViewTraitCollection.isEmptyView.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

uint64_t (*ViewTraitCollection.isEmptyView.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = v1;
  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isEmptyView.modify;
}

uint64_t ViewTraitCollection.isEmptyView.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(_BYTE *)(a1 + 8));
}

uint64_t static IsSectionHeaderTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t ViewTraitCollection.isSectionHeader.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

uint64_t (*ViewTraitCollection.isSectionHeader.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = v1;
  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isSectionHeader.modify;
}

uint64_t ViewTraitCollection.isSectionHeader.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(_BYTE *)(a1 + 8));
}

uint64_t static IsSectionFooterTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t ViewTraitCollection.isSectionFooter.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

uint64_t ViewTraitCollection.isSectioned.getter(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  LOBYTE(a1) = a1(0, v3);
  swift_bridgeObjectRelease();
  return a1 & 1;
}

uint64_t key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD, uint64_t)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a1;
  swift_bridgeObjectRetain();
  LOBYTE(a2) = a2(0, v5);
  result = swift_bridgeObjectRelease();
  *a3 = a2 & 1;
  return result;
}

uint64_t (*ViewTraitCollection.isSectionFooter.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = v1;
  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isSectionFooter.modify;
}

uint64_t ViewTraitCollection.isSectionFooter.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(_BYTE *)(a1 + 8));
}

uint64_t MakeSection.value.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  int v7;
  int v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t Value;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  char v24;
  __int128 v25;
  _BYTE v26[28];
  uint64_t v27;

  result = AGGraphGetCurrentAttribute();
  v7 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    v9 = HIDWORD(a2);
    v10 = *(_QWORD *)(a1 + 16);
    v11 = MEMORY[0x24BEE4AF8];
    if (v10)
    {
      v21 = *MEMORY[0x24BE096C0];
      v22 = HIDWORD(a2);
      v23 = v8;
      v24 = a2;
      v27 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
      type metadata accessor for ViewList();
      v12 = 0;
      v11 = v27;
      do
      {
        v13 = *(_DWORD *)(a1 + 4 * v12 + 32);
        Value = AGGraphGetValue();
        outlined init with copy of AnyTrackedValue(Value, (uint64_t)&v25);
        *(_DWORD *)&v26[24] = v13;
        v27 = v11;
        v16 = *(_QWORD *)(v11 + 16);
        v15 = *(_QWORD *)(v11 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          v11 = v27;
        }
        ++v12;
        *(_QWORD *)(v11 + 16) = v16 + 1;
        v17 = (_OWORD *)(v11 + 48 * v16);
        v18 = v25;
        v19 = *(_OWORD *)v26;
        *(_OWORD *)((char *)v17 + 60) = *(_OWORD *)&v26[12];
        v17[2] = v18;
        v17[3] = v19;
      }
      while (v10 != v12);
      swift_bridgeObjectRelease();
      LOBYTE(a2) = v24;
      v8 = v23;
      LODWORD(v9) = v22;
      v7 = v21;
    }
    if (v7 == (_DWORD)v9)
    {
      v20 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v20 = *(_QWORD *)AGGraphGetValue();
      swift_bridgeObjectRetain();
    }
    a3[3] = (uint64_t)&type metadata for _ViewList_Section;
    a3[4] = (uint64_t)&protocol witness table for _ViewList_Section;
    result = swift_allocObject();
    *a3 = result;
    *(_DWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 24) = v11;
    *(_QWORD *)(result + 32) = v20;
    *(_BYTE *)(result + 40) = a2 & 1;
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance MakeSection@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MakeSection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return MakeSection.value.getter(*(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 12) << 32), a1);
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for DepthTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE1768], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v13;
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for TransitionTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v8 + 16))(&v13, &type metadata for AnyTransition, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v13;
  }
  else
  {
LABEL_6:
    swift_retain();
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr);
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return a1;
  v4 = a2 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
    v5 = v11;
    v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for _DisplayList_StableIdentityScope)
      break;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    v4 += 40;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  swift_bridgeObjectRelease();
  v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v8 = *(void (**)(uint64_t *__return_ptr))(v7 + 16);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for WeakAttribute<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095D0]);
  v8(&v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v13;
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsSectionedTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE1328], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsEmptyViewTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE1328], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsSectionHeaderTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE1328], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsSectionFooterTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE1328], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsAuxiliaryContentTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE1328], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for CanTransitionTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE1328], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

double specialized ViewTraitCollection.value<A>(for:defaultValue:)(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  double v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for ZIndexTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a2;
      }
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(double *__return_ptr, _QWORD, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x24BEE13C8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v13;
  }
  return a2;
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  int v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v9 = *(_QWORD *)(a5 + 16);
  if (v9)
  {
    v16 = a3;
    v17 = a4;
    v10 = a5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v10, (uint64_t)v18);
      v11 = v19;
      v12 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12) == &type metadata for ArchivedAnimationTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      v10 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        a4 = v17;
        a3 = v16;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v14 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    v15 = *(void (**)(void))(v14 + 16);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ArchivedAnimationTraitKey?, (uint64_t)&type metadata for ArchivedAnimationTraitKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v15();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
LABEL_6:
    *(_QWORD *)a6 = a1;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 16) = a3;
    *(_DWORD *)(a6 + 24) = a4;
    return outlined copy of SafeAreaInsets.OptionalValue?(a1);
  }
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr);
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v5 = a3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v5, (uint64_t)v11);
      v6 = v12;
      v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7) == &type metadata for DynamicViewContentOffsetTraitKey)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      v5 += 40;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    swift_bridgeObjectRelease();
    v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v9 = *(void (**)(uint64_t *__return_ptr))(v8 + 16);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v9(&v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    return v14;
  }
  return a1;
}

uint64_t outlined init with copy of _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _ViewListOutputs.Views(a2, a1);
  return a2;
}

unint64_t type metadata accessor for ViewList()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ViewList;
  if (!lazy cache variable for type metadata for ViewList)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeSection and conformance MakeSection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MakeSection and conformance MakeSection;
  if (!lazy protocol witness table cache variable for type MakeSection and conformance MakeSection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MakeSection, &unk_250611160);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeSection and conformance MakeSection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_Group.Init and conformance _ViewList_Group.Init;
  if (!lazy protocol witness table cache variable for type _ViewList_Group.Init and conformance _ViewList_Group.Init)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_Group.Init, &type metadata for _ViewList_Group.Init);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_Group.Init and conformance _ViewList_Group.Init);
  }
  return result;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(Swift::UInt a1, char a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _BYTE v15[40];
  _BYTE v16[24];
  ValueMetadata *v17;
  _UNKNOWN **v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = &type metadata for EmptyViewList;
  v18 = &protocol witness table for EmptyViewList;
  swift_beginAccess();
  v6 = *(_QWORD *)(a3 + 120);
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v8 & 1) != 0))
  {
    v9 = *(unsigned int *)(*(_QWORD *)(v6 + 56) + 4 * v7);
  }
  else
  {
    swift_beginAccess();
    v10 = *(id *)(a3 + 24);
    AGGraphClearUpdate();
    v11 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    outlined init with copy of AnyTrackedValue((uint64_t)v16, (uint64_t)v15);
    type metadata accessor for ViewList();
    type metadata accessor for External<ViewList>();
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(a3 + 120);
    *(_QWORD *)(a3 + 120) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a3 + 120) = v14;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v9;
}

uint64_t specialized _GraphInputs.intern<A>(_:id:)(char a1)
{
  id v2;
  void *v3;
  id v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UnaryViewAdaptor);
    v6 = specialized GraphHost.intern<A>(_:for:id:)(v5, a1);
    swift_release();
    return v6;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for _GeometryGroupEffect, a1);
    swift_release();
    return v5;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v2;
  void *v3;
  id v4;
  uint64_t Context;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v6 = Context;
    swift_retain();

    v7 = type metadata accessor for ViewList();
    v8 = specialized GraphHost.intern<A>(_:for:id:)(v7, a1, v6);
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _GraphInputs.intern<A>(_:id:)(char a1, char a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v4 = (id)AGSubgraphGetCurrent();
    if (!v4)
      goto LABEL_8;
    v5 = v4;
    v6 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v7 = specialized GraphHost.intern<A>(_:for:id:)(a1 & 1, MEMORY[0x24BEE1328], a2);
    swift_release();
    return v7;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers;
  if (!lazy protocol witness table cache variable for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewListOutputs.ApplyModifiers, &type metadata for _ViewListOutputs.ApplyModifiers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers);
  }
  return result;
}

uint64_t sub_234C3CF5C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with copy of BaseViewList(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BaseViewList(a2, a1);
  return a2;
}

void type metadata accessor for External<ViewList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<ViewList>)
  {
    type metadata accessor for ViewList();
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>);
  }
}

unint64_t lazy protocol witness table accessor for type External<ViewList> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<ViewList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ViewList> and conformance External<A>)
  {
    type metadata accessor for External<ViewList>();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ViewList> and conformance External<A>);
  }
  return result;
}

uint64_t outlined destroy of BaseViewList(uint64_t a1)
{
  destroy for BaseViewList(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SectionFooterTrait and conformance SectionFooterTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionFooterTrait and conformance SectionFooterTrait;
  if (!lazy protocol witness table cache variable for type SectionFooterTrait and conformance SectionFooterTrait)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SectionFooterTrait, &unk_25062A758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionFooterTrait and conformance SectionFooterTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait;
  if (!lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DepthTrait, &type metadata for DepthTrait);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait;
  if (!lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SectionHeaderTrait, &type metadata for SectionHeaderTrait);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionedTrait and conformance SectionedTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionedTrait and conformance SectionedTrait;
  if (!lazy protocol witness table cache variable for type SectionedTrait and conformance SectionedTrait)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SectionedTrait, &unk_25061BDB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionedTrait and conformance SectionedTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyViewTrait and conformance EmptyViewTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyViewTrait and conformance EmptyViewTrait;
  if (!lazy protocol witness table cache variable for type EmptyViewTrait and conformance EmptyViewTrait)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyViewTrait, &unk_25061A1A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyViewTrait and conformance EmptyViewTrait);
  }
  return result;
}

void type metadata accessor for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>)
  {
    type metadata accessor for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>(255);
    v4 = type metadata accessor for UnaryElements(a1, v2, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>);
  }
}

void type metadata accessor for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UnaryViewAdaptor);
    v4 = type metadata accessor for TypedUnaryViewGenerator(a1, v2, (uint64_t)&protocol witness table for _UnaryViewAdaptor<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>);
  }
}

uint64_t sub_234C3D2C8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t instantiation function for generic protocol witness table for <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234C3D344@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_234C3D390(uint64_t *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_234C3D3B4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_234C3D3D0(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_234C3D3F4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_234C3D410(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_234C3D434@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_234C3D450(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_234C3D474@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(_QWORD, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_234C3D490(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t getEnumTagSinglePayload for Group(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C3D564 + 4 * byte_23528E970[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Group(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for DepthTrait()
{
  return &type metadata for DepthTrait;
}

ValueMetadata *type metadata accessor for SectionHeaderTrait()
{
  return &type metadata for SectionHeaderTrait;
}

ValueMetadata *type metadata accessor for DepthTraitKey()
{
  return &type metadata for DepthTraitKey;
}

ValueMetadata *type metadata accessor for IsSectionedTraitKey()
{
  return &type metadata for IsSectionedTraitKey;
}

ValueMetadata *type metadata accessor for IsEmptyViewTraitKey()
{
  return &type metadata for IsEmptyViewTraitKey;
}

ValueMetadata *type metadata accessor for IsSectionHeaderTraitKey()
{
  return &type metadata for IsSectionHeaderTraitKey;
}

ValueMetadata *type metadata accessor for IsSectionFooterTraitKey()
{
  return &type metadata for IsSectionFooterTraitKey;
}

uint64_t sub_234C3D7D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionedTraitKey>, (uint64_t)&type metadata for IsSectionedTraitKey, (uint64_t)&protocol witness table for IsSectionedTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void *type metadata accessor for EmptyViewTrait()
{
  return &unk_25061A1A0;
}

void *type metadata accessor for SectionedTrait()
{
  return &unk_25061BDB0;
}

void *type metadata accessor for SectionFooterTrait()
{
  return &unk_25062A758;
}

uint64_t initializeBufferWithCopyOfBuffer for MakeSection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeSection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for MakeSection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

void *type metadata accessor for MakeSection()
{
  return &unk_250611160;
}

ValueMetadata *type metadata accessor for GroupContainer()
{
  return &type metadata for GroupContainer;
}

uint64_t sub_234C3D988()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v18;
  __int128 v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    swift_retain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
  }
  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_QWORD *)a1;
  v18 = *(_DWORD *)(a1 + 8);
  v20 = *(_DWORD *)(a1 + 36);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 24);
  v19 = *(_OWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_OWORD *)(a1 + 48);
  v26 = *(_OWORD *)(a1 + 32);
  v21 = v26;
  v27 = v10;
  v28 = *(_OWORD *)(a1 + 64);
  v29 = v4;
  v11 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v11;
  swift_beginAccess();
  v32 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  v12 = MEMORY[0x24BEE1328];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ChildEnvironment<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>(&lazy protocol witness table cache variable for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>, &lazy cache variable for type metadata for ChildEnvironment<Bool>, v12);
  v13 = Attribute.init<A>(body:value:flags:update:)();
  v14 = MEMORY[0x24BEE4AF8];
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = v14;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_WORD *)(v16 + 80) = 256;
  *(_QWORD *)(v16 + 88) = v15;
  swift_release();
  v30 = v5;
  v31 = v18;
  v33 = v16;
  v34 = v8;
  v35 = 32;
  v36 = v20;
  v37 = v6;
  v38 = v7;
  v39 = v19;
  v40 = v9;
  v41 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)((uint64_t)&v30, a2, a3);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  LODWORD(v26) = v21;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, v25);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    outlined release of _ViewInputs(a1);
  }
  return swift_release();
}

uint64_t View.privacySensitive(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for PrivacyRedactionViewModifier, a3);
}

double static PrivacyRedactionViewModifier._makeView(modifier:inputs:body:)@<D0>(__int128 *a1@<X1>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  uint64_t KeyPath;
  __int128 v11;
  unsigned int v12;
  unsigned int OffsetAttribute2;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double result;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[5];
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _OWORD v31[3];
  _QWORD v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  v8 = a1[3];
  v27 = a1[2];
  v28 = v8;
  v29 = a1[4];
  v30 = *((_DWORD *)a1 + 20);
  v9 = a1[1];
  v25 = *a1;
  v26 = v9;
  KeyPath = swift_getKeyPath();
  v11 = a1[1];
  v31[0] = *a1;
  v31[1] = v11;
  v31[2] = a1[2];
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v31);
  v12 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v31);
  swift_release();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v14 = *(_QWORD *)&v31[0];
  v32[0] = *(_QWORD *)&v31[0];
  outlined retain of _GraphInputs((uint64_t)v31);
  outlined retain of _ViewInputs((uint64_t)&v25);
  outlined retain of ViewTransform((uint64_t)v32);
  v15 = specialized find<A>(_:key:)(v14);
  if (v15)
  {
    v16 = *(unsigned __int8 *)(v15 + 72);
    outlined release of ViewTransform((uint64_t)v32);
    outlined release of _GraphInputs((uint64_t)v31);
    outlined release of _ViewInputs((uint64_t)&v25);
    if (v16 == 1)
    {
      *(_QWORD *)&v23[0] = __PAIR64__(v12, OffsetAttribute2);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>(0);
      lazy protocol witness table accessor for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild();
      Attribute.init<A>(body:value:flags:update:)();
      specialized static ModifiedContent<>._makeView(modifier:inputs:body:)((uint64_t)&v25, a2, (uint64_t)a4);
      return result;
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v32);
    outlined release of _GraphInputs((uint64_t)v31);
    outlined release of _ViewInputs((uint64_t)&v25);
  }
  outlined retain of _GraphInputs((uint64_t)v31);
  outlined retain of _ViewInputs((uint64_t)&v25);
  outlined retain of ViewTransform((uint64_t)v32);
  v18 = specialized find<A>(_:key:)(v14);
  if (v18)
  {
    v19 = (uint64_t *)(v18 + 72);
    v20 = (uint64_t *)(v18 + 80);
  }
  else
  {
    v19 = (uint64_t *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    v20 = (uint64_t *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
    {
      swift_once();
      v20 = (uint64_t *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1;
    }
  }
  v21 = *v20;
  v22 = *v19;
  outlined release of ViewTransform((uint64_t)v32);
  outlined release of _GraphInputs((uint64_t)v31);
  outlined release of _ViewInputs((uint64_t)&v25);
  v23[2] = v27;
  v23[3] = v28;
  v23[4] = v29;
  v24 = v30;
  v23[0] = v25;
  v23[1] = v26;
  return static PrivacyRedactionViewModifier.makeChild<A>(modifier:type:body:sensitive:inputs:reasons:)((uint64_t)a2, a3, OffsetAttribute2, (uint64_t)v23, v12, v22, a4, v21);
}

uint64_t _ViewInputs.privacyReductionAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

double static PrivacyRedactionViewModifier.makeChild<A>(modifier:type:body:sensitive:inputs:reasons:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, unsigned int a3@<W4>, uint64_t a4@<X5>, unsigned int a5@<W6>, uint64_t a6@<X7>, double *a7@<X8>, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int ShouldRecordTree;
  uint64_t v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v36;
  int v38;
  uint64_t v39;
  double v40;
  int v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)a4;
  v12 = *(_DWORD *)(a4 + 8);
  v13 = *(_QWORD *)(a4 + 16);
  v32 = *(_DWORD *)(a4 + 28);
  v33 = *(_DWORD *)(a4 + 24);
  v36 = *(_DWORD *)(a4 + 32);
  v14 = *(_QWORD *)(a4 + 40);
  v15 = *(_QWORD *)(a4 + 48);
  v30 = *(_DWORD *)(a4 + 56);
  v31 = *(_DWORD *)(a4 + 36);
  v28 = *(_DWORD *)(a4 + 64);
  v29 = *(_DWORD *)(a4 + 60);
  v26 = *(_DWORD *)(a4 + 72);
  v27 = *(_DWORD *)(a4 + 68);
  v24 = *(_DWORD *)(a4 + 80);
  v25 = *(_DWORD *)(a4 + 76);
  v16 = type metadata accessor for PrivacyRedactionViewModifier.Transform(0, a6, a8, a2);
  v58 = __PAIR64__(a5, a3);
  v18 = type metadata accessor for PrivacyRedactionViewModifier.Child(0, a6, a8, v17);
  v19 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Child<A>, v18);
  _GraphValue.init<A>(_:)((uint64_t)&v58, v16, v18, v19, &v41);
  v20 = v41;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v58 = v11;
  v60 = v13;
  v59 = v12;
  v61 = v33;
  v62 = v32;
  v65 = v14;
  v66 = v15;
  v63 = 0;
  v64 = v31;
  v67 = v30;
  v68 = v29;
  v69 = v28;
  v70 = v27;
  v71 = v26;
  v72 = v25;
  v73 = v24;
  v38 = v20;
  v42 = v11;
  v43 = v12;
  v44 = v13;
  v45 = v33;
  v46 = v32;
  v47 = 0;
  v48 = v31;
  v49 = v14;
  v50 = v15;
  v51 = v30;
  v52 = v29;
  v53 = v28;
  v54 = v27;
  v55 = v26;
  v56 = v25;
  v57 = v24;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>, v16);
  static ViewModifier._makeView(modifier:inputs:body:)(&v38, (uint64_t)&v42, a1, a2, v16, v22, &v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v63 = v36;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v39, (uint64_t)&v58);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a7 = v39;
  result = v40;
  a7[1] = v40;
  return result;
}

uint64_t *PrivacyRedactionViewModifier.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t *result;
  uint64_t v4;

  v2 = *(_BYTE *)AGGraphGetValue();
  result = (uint64_t *)AGGraphGetValue();
  v4 = *result;
  *(_BYTE *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance PrivacyRedactionViewModifier.Child<A>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 2;
  *a1 = xmmword_23528B9A0;
  return result;
}

uint64_t *protocol witness for Rule.value.getter in conformance PrivacyRedactionViewModifier.Child<A>@<X0>(uint64_t a1@<X8>)
{
  return PrivacyRedactionViewModifier.Child.value.getter(a1);
}

uint64_t PrivacyRedactionViewModifier.Transform.PrivacyEffect.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = (result >> 9) & 0x80 | (4 * (result & 1));
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 2;
  return result;
}

uint64_t PrivacyRedactionViewModifier.Transform.PrivacyEffect.scrapeableContent.getter@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;

  v2 = 0x8000000000000000;
  if ((result & 0x10100) == 0)
    v2 = 0xF000000000000007;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  int v2;
  int v3;

  if (v1[2])
    v2 = 0x10000;
  else
    v2 = 0;
  if (v1[1])
    v3 = 256;
  else
    v3 = 0;
  return PrivacyRedactionViewModifier.Transform.PrivacyEffect.effectValue(size:)(v3 | *v1 | v2, a1);
}

uint64_t protocol witness for static _RendererEffect.isScrapeable.getter in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect()
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
}

uint64_t protocol witness for _RendererEffect.scrapeableContent.getter in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect@<X0>(unint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  int v2;
  int v3;

  if (v1[2])
    v2 = 0x10000;
  else
    v2 = 0;
  if (v1[1])
    v3 = 256;
  else
    v3 = 0;
  return PrivacyRedactionViewModifier.Transform.PrivacyEffect.scrapeableContent.getter(v3 | *v1 | v2, a1);
}

uint64_t PrivacyRedactionViewModifier.Transform.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD v79[4];
  char v80;
  uint64_t v81;
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  uint64_t v90;
  _QWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;
  _BYTE v97[3];
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[3];

  v77 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v63 = *(_QWORD *)(a1 + 24);
  v4 = v63;
  v70 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v71 = AssociatedTypeWitness;
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v73 = (char *)&v61 - v7;
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>, a1, v6);
  v10 = type metadata accessor for _ViewModifier_Content(255, a1, v8, v9);
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v13 = type metadata accessor for ModifiedContent(255, v10, v11, v12);
  v62 = type metadata accessor for PrivacyRedactionViewModifier.Transform.PrivacyEffect(255, v3, v4, v14);
  v61 = type metadata accessor for ModifiedContent(255, v13, v62, v15);
  v69 = type metadata accessor for ModifiedContent(255, v61, (uint64_t)&type metadata for _OpacityEffect, v16);
  v18 = type metadata accessor for ModifiedContent(0, v69, AssociatedTypeWitness, v17);
  v74 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v78 = (char *)&v61 - v19;
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v22 = type metadata accessor for ModifiedContent(255, v13, v20, v21);
  type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(255, v23, v24, v25);
  v28 = type metadata accessor for ModifiedContent(255, v22, v26, v27);
  v29 = type metadata accessor for Optional();
  v107[0] = &protocol witness table for _ViewModifier_Content<A>;
  v107[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v30 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v13, v107);
  v106[0] = v30;
  v106[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v105[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v22, v106);
  v105[1] = &protocol witness table for _TraitWritingModifier<A>;
  v104 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v28, v105);
  v31 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v29, &v104);
  v72 = v29;
  v64 = v31;
  v33 = type metadata accessor for _OverlayModifier(255, v29, v31, v32);
  v76 = v18;
  v35 = type metadata accessor for ModifiedContent(0, v18, v33, v34);
  v68 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v66 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v67 = (char *)&v61 - v38;
  v39 = *v65;
  v40 = *((_QWORD *)v65 + 1);
  View.unredacted()(v10, (uint64_t)&protocol witness table for _ViewModifier_Content<A>);
  v92 = v98;
  v93 = v99;
  v97[0] = v39;
  v97[1] = v39 & (v40 >> 1);
  v97[2] = (v40 & 8) != 0;
  if ((v39 & (v40 >> 1)) != 0)
    v41 = 0.0;
  else
    v41 = 1.0;
  View.modifier<A>(_:)(v97, v13, v62, v30);
  swift_release();
  v92 = v85;
  v93 = v86;
  v94 = v87;
  v95 = v88;
  v96 = v89;
  v91[0] = v30;
  v91[1] = &protocol witness table for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect;
  v42 = v63;
  v43 = v61;
  v44 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v61, v91);
  View.opacity(_:)(v43, v44, v41);
  swift_release();
  v85 = v98;
  v86 = v99;
  v87 = v100;
  v88 = v101;
  v89 = v102;
  v90 = v103;
  v45 = v73;
  v46 = v70;
  (*(void (**)(_QWORD))(v42 + 24))(v39 & (v40 >> 1));
  v84[0] = v44;
  v84[1] = &protocol witness table for _OpacityEffect;
  v47 = v69;
  v48 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v69, v84);
  v49 = v47;
  v50 = v71;
  View.modifier<A>(_:)(v45, v49, v71, v48);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v45, v50);
  swift_release();
  v79[2] = v46;
  v79[3] = v42;
  v80 = v39;
  v81 = v40;
  if (one-time initialization token for center != -1)
    swift_once();
  v51 = static Alignment.center;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v83[0] = v48;
  v83[1] = AssociatedConformanceWitness;
  v53 = v76;
  v54 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v76, v83);
  v55 = v66;
  v56 = v78;
  View.overlay<A>(alignment:content:)(v51, *((uint64_t *)&v51 + 1), (void (*)(double))partial apply for closure #1 in PrivacyRedactionViewModifier.Transform.body(content:), (uint64_t)v79, v53, v72, v54);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v56, v53);
  v82[0] = v54;
  v82[1] = &protocol witness table for _OverlayModifier<A>;
  v57 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v35, v82);
  v58 = (uint64_t)v67;
  static ViewBuilder.buildExpression<A>(_:)(v55, v35, v57);
  v59 = *(void (**)(char *, uint64_t))(v68 + 8);
  v59(v55, v35);
  static ViewBuilder.buildBlock<A>(_:)(v58, v35, v77);
  return ((uint64_t (*)(uint64_t, uint64_t))v59)(v58, v35);
}

uint64_t closure #1 in PrivacyRedactionViewModifier.Transform.body(content:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t *KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  __int128 v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  _QWORD v81[2];
  _QWORD v82[2];
  uint64_t v83;
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  _QWORD v89[2];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v8 = type metadata accessor for PrivacyRedactionViewModifier.Transform(0, a3, a4, a4);
  v71 = a5;
  if ((a2 & 2) != 0 && (a1 & 1) != 0)
  {
    v9 = a1 & 1;
    KeyPath = (uint64_t *)swift_getKeyPath();
    *(_QWORD *)&v93 = 2;
    v11 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>, v8);
    v13 = type metadata accessor for _ViewModifier_Content(0, v8, v11, v12);
    View.environment<A>(_:_:)(KeyPath, (uint64_t)&v93, v13, (uint64_t)&protocol witness table for _ViewModifier_Content<A>);
    swift_release();
    v77 = v90;
    v14 = (uint64_t *)swift_getKeyPath();
    LOBYTE(v72) = v9;
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    v69 = v15;
    v17 = type metadata accessor for ModifiedContent(0, v13, v15, v16);
    v82[0] = &protocol witness table for _ViewModifier_Content<A>;
    v82[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    v18 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v17, v82);
    View.environment<A>(_:_:)(v14, (uint64_t)&v72, v17, v18);
    swift_release();
    swift_release();
    v77 = v93;
    v78 = v94;
    v79 = v95;
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    v20 = v19;
    v22 = type metadata accessor for ModifiedContent(0, v17, v19, v21);
    v81[0] = v18;
    v81[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    v23 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v22, v81);
    v24 = lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
    View.transition<A>(_:)(v24, v22, (uint64_t)&type metadata for OpacityTransition, v23, v24);
    swift_release();
    swift_release();
    v77 = v90;
    v78 = v91;
    v79 = BYTE8(v91);
    v80 = v92;
    type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(255, v25, v26, v27);
    v29 = v28;
    v31 = type metadata accessor for ModifiedContent(0, v22, v28, v30);
    v76[0] = v23;
    v76[1] = &protocol witness table for _TraitWritingModifier<A>;
    v32 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v31, v76);
    static ViewBuilder.buildExpression<A>(_:)(&v77, v31, v32);
    swift_release();
    swift_release();
    swift_release();
    v90 = v93;
    *(_QWORD *)&v91 = v94;
    BYTE8(v91) = v95;
    v92 = v96;
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v90, v31, (uint64_t)&v77);
    swift_release();
    swift_release();
    swift_release();
    v72 = v77;
    v73 = v78;
    v74 = v79;
    v75 = v80;
    static ViewBuilder.buildIf<A>(_:)((uint64_t)&v72, (uint64_t)&v90);
    swift_release();
    v33 = v69;
    swift_release();
    swift_release();
    v35 = *((_QWORD *)&v90 + 1);
    v34 = v90;
    v37 = *((_QWORD *)&v91 + 1);
    v36 = v91;
    v38 = v92;
  }
  else
  {
    v92 = 0;
    v90 = 0u;
    v91 = 0u;
    v39 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>, v8);
    v41 = type metadata accessor for _ViewModifier_Content(255, v8, v39, v40);
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    v43 = v42;
    v45 = type metadata accessor for ModifiedContent(255, v41, v42, v44);
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    v20 = v46;
    v48 = type metadata accessor for ModifiedContent(255, v45, v46, v47);
    type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(255, v49, v50, v51);
    v29 = v52;
    v54 = type metadata accessor for ModifiedContent(0, v48, v52, v53);
    v89[0] = &protocol witness table for _ViewModifier_Content<A>;
    v89[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    v88[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v45, v89);
    v88[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    v87[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v48, v88);
    v87[1] = &protocol witness table for _TraitWritingModifier<A>;
    MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v54, v87);
    v33 = v43;
    static ViewBuilder.buildIf<A>(_:)((uint64_t)&v90, (uint64_t)&v93);
    v35 = *((_QWORD *)&v93 + 1);
    v34 = v93;
    v36 = v94;
    v37 = v95;
    v38 = v96;
  }
  v70 = v34;
  *(_QWORD *)&v93 = v34;
  *((_QWORD *)&v93 + 1) = v35;
  v94 = v36;
  v95 = v37;
  v96 = v38;
  v55 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>, v8);
  v57 = type metadata accessor for _ViewModifier_Content(255, v8, v55, v56);
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v59 = type metadata accessor for ModifiedContent(255, v57, v33, v58);
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v61 = type metadata accessor for ModifiedContent(255, v59, v20, v60);
  type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(255, v62, v63, v64);
  v66 = type metadata accessor for ModifiedContent(255, v61, v29, v65);
  v67 = type metadata accessor for Optional();
  v86[0] = &protocol witness table for _ViewModifier_Content<A>;
  v86[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v85[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v59, v86);
  v85[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v84[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v61, v85);
  v84[1] = &protocol witness table for _TraitWritingModifier<A>;
  v83 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v66, v84);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v67, &v83);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v93, v67, v71);
  return outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PrivacyRedactionViewModifier.Transform<A>>, _EnvironmentKeyWritingModifier<RedactionReasons>>, _EnvironmentKeyWritingModifier<Bool>>, _TraitWritingModifier<TransitionTraitKey>>?<A>(v70);
}

uint64_t EnvironmentValues.sensitiveContent.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.sensitiveContent : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.sensitiveContent : EnvironmentValues(char *a1)
{
  return EnvironmentValues.sensitiveContent.setter(*a1);
}

uint64_t EnvironmentValues.sensitiveContent.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

char *PrivacyRedactionViewModifier.WidgetAuxiliaryChild.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  char *result;
  char v6;

  KeyPath = swift_getKeyPath();
  v3 = *(_QWORD *)AGGraphGetValue();
  if ((v3 & 2) != 0 && *(_BYTE *)AGGraphGetValue() == 1)
    v3 = 2;
  v4 = swift_getKeyPath();
  result = (char *)AGGraphGetValue();
  v6 = *result;
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v6;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

char *protocol witness for Rule.value.getter in conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild@<X0>(uint64_t a1@<X8>)
{
  return PrivacyRedactionViewModifier.WidgetAuxiliaryChild.value.getter(a1);
}

uint64_t _GraphInputs.privacyReductionAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.privacyReductionAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.privacyReductionAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.privacyReductionAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.privacyReductionAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.privacyReductionAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (__int128 *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *(_QWORD *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.privacyReductionAccessibilityProvider.modify;
}

void _GraphInputs.privacyReductionAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.privacyReductionAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.privacyReductionAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _ViewInputs.privacyReductionAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.privacyReductionAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (__int128 *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *(_QWORD *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.privacyReductionAccessibilityProvider.modify;
}

void (*EnvironmentValues.sensitiveContent.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.sensitiveContent.modify;
}

void EnvironmentValues.sensitiveContent.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t sub_234C3FA7C(char *a1)
{
  return EnvironmentValues.sensitiveContent.setter(*a1);
}

uint64_t dispatch thunk of static PrivacyReductionAccessibilityProvider.makeModifier(shouldRedact:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_234C3FAA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for PrivacyRedactionViewModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for PrivacyRedactionViewModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t storeEnumTagSinglePayload for PrivacyRedactionViewModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234C3FB48 + 4 * byte_23528EEF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234C3FB7C + 4 * byte_23528EEF0[v4]))();
}

uint64_t sub_234C3FB7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C3FB84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C3FB8CLL);
  return result;
}

uint64_t sub_234C3FB98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C3FBA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234C3FBA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C3FBAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrivacyRedactionViewModifier()
{
  return &type metadata for PrivacyRedactionViewModifier;
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  __int128 v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    AGSubgraphBeginTreeElement();
  }
  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_QWORD *)a1;
  v18 = *(_DWORD *)(a1 + 8);
  v20 = *(_DWORD *)(a1 + 36);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 24);
  v19 = *(_OWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_OWORD *)(a1 + 48);
  v38 = *(_OWORD *)(a1 + 32);
  v21 = v38;
  v39 = v10;
  v40 = *(_OWORD *)(a1 + 64);
  v41 = v4;
  v11 = *(_OWORD *)(a1 + 16);
  v37[0] = *(_OWORD *)a1;
  v37[1] = v11;
  LODWORD(v38) = 0;
  swift_beginAccess();
  v27 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ChildEnvironment<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>(&lazy protocol witness table cache variable for type ChildEnvironment<RedactionReasons> and conformance ChildEnvironment<A>, &lazy cache variable for type metadata for ChildEnvironment<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons);
  v12 = Attribute.init<A>(body:value:flags:update:)();
  v13 = MEMORY[0x24BEE4AF8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = v13;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_WORD *)(v15 + 80) = 256;
  *(_QWORD *)(v15 + 88) = v14;
  swift_release();
  v25 = v5;
  v26 = v18;
  v28 = v15;
  v29 = v8;
  v30 = 32;
  v31 = v20;
  v32 = v6;
  v33 = v7;
  v34 = v19;
  v35 = v9;
  v36 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = swift_bridgeObjectRetain();
  a2(v16, &v25);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  LODWORD(v38) = v21;
  if ((ShouldRecordTree & 1) == 0)
    return outlined release of _ViewInputs(a1);
  specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, v37);
  AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    v3 = v2;
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    v6 = type metadata accessor for ModifiedContent(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

unint64_t lazy protocol witness table accessor for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild;
  if (!lazy protocol witness table cache variable for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.WidgetAuxiliaryChild, &unk_25063F178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ChildEnvironment);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PrivacyRedactionViewModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrivacyRedactionViewModifier.Transform);
}

uint64_t type metadata accessor for PrivacyRedactionViewModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrivacyRedactionViewModifier.Child);
}

ValueMetadata *type metadata accessor for EmptyPrivacyReductionAccessibilityProvider()
{
  return &type metadata for EmptyPrivacyReductionAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SensitiveContentKey()
{
  return &type metadata for SensitiveContentKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.PrivacyReductionAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey;
}

uint64_t getEnumTagSinglePayload for PrivacyRedactionViewModifier.Transform(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PrivacyRedactionViewModifier.Transform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for PrivacyRedactionViewModifier.WidgetAuxiliaryChild()
{
  return &unk_25063F178;
}

_UNKNOWN **associated type witness table accessor for PrivacyReductionAccessibilityProvider.Modifier : ViewModifier in EmptyPrivacyReductionAccessibilityProvider()
{
  return &protocol witness table for EmptyModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PrivacyRedactionViewModifier.Transform<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in PrivacyRedactionViewModifier.Child<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t type metadata accessor for PrivacyRedactionViewModifier.Transform.PrivacyEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrivacyRedactionViewModifier.Transform.PrivacyEffect);
}

void type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>)
  {
    v4 = type metadata accessor for _TraitWritingModifier(0, (uint64_t)&type metadata for TransitionTraitKey, (uint64_t)&protocol witness table for TransitionTraitKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>);
  }
}

uint64_t partial apply for closure #1 in PrivacyRedactionViewModifier.Transform.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PrivacyRedactionViewModifier.Transform.body(content:)(*(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PrivacyRedactionViewModifier.Transform<A>>, _EnvironmentKeyWritingModifier<RedactionReasons>>, _EnvironmentKeyWritingModifier<Bool>>, _TraitWritingModifier<TransitionTraitKey>>?<A>(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition;
  if (!lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for OpacityTransition, &type metadata for OpacityTransition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition);
  }
  return result;
}

uint64_t sub_234C4028C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for PrivacyRedactionViewModifier.Transform(255, *a1, v5, a4);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>, v6);
  v9 = type metadata accessor for _ViewModifier_Content(255, v6, v7, v8);
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v12 = type metadata accessor for ModifiedContent(255, v9, v10, v11);
  v14 = type metadata accessor for PrivacyRedactionViewModifier.Transform.PrivacyEffect(255, v4, v5, v13);
  v16 = type metadata accessor for ModifiedContent(255, v12, v14, v15);
  v38 = type metadata accessor for ModifiedContent(255, v16, (uint64_t)&type metadata for _OpacityEffect, v17);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = type metadata accessor for ModifiedContent(255, v38, AssociatedTypeWitness, v19);
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v22 = type metadata accessor for ModifiedContent(255, v12, v20, v21);
  type metadata accessor for _TraitWritingModifier<TransitionTraitKey>(255, v23, v24, v25);
  v28 = type metadata accessor for ModifiedContent(255, v22, v26, v27);
  v29 = type metadata accessor for Optional();
  v46[0] = &protocol witness table for _ViewModifier_Content<A>;
  v46[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v30 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v12, v46);
  v45[0] = v30;
  v45[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v44[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v22, v45);
  v44[1] = &protocol witness table for _TraitWritingModifier<A>;
  v43 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v28, v44);
  v31 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v29, &v43);
  v33 = type metadata accessor for _OverlayModifier(255, v29, v31, v32);
  v35 = type metadata accessor for ModifiedContent(255, v37, v33, v34);
  v42[0] = v30;
  v42[1] = &protocol witness table for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect;
  v41[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v16, v42);
  v41[1] = &protocol witness table for _OpacityEffect;
  v40[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v38, v41);
  v40[1] = swift_getAssociatedConformanceWitness();
  v39[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v37, v40);
  v39[1] = &protocol witness table for _OverlayModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v35, v39);
}

uint64_t instantiation function for generic protocol witness table for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void _ContrastEffect.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_ContrastEffect.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ContrastEffect.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*_ContrastEffect.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _ContrastEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 9;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_234C40628()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

BOOL static _ContrastEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ContrastEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 9;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance _ContrastEffect(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ContrastEffect(_QWORD *a1))()
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

uint64_t View.contrast(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return View.modifier<A>(_:)(&v4, a1, &type metadata for _ContrastEffect, a2);
}

_UNKNOWN **associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ContrastEffect()
{
  return &protocol witness table for Double;
}

double sub_234C40760@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234C4076C(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _ContrastEffect()
{
  return &type metadata for _ContrastEffect;
}

uint64_t sub_234C40788(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _ContrastEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _ContrastEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t dispatch thunk of EventGraphHost.eventBindingManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventGraphHost.responderNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventGraphHost.focusedResponder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventGraphHost.nextGestureUpdateTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EventGraphHost.setInheritedPhase(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of EventGraphHost.sendEvents(_:rootNode:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of EventGraphHost.resetEvents()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of EventGraphHost.gestureCategory()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t URL.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[2];

  type metadata accessor for URL?(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((URL.relativeString.getter() || v10 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(1);
    if (v1)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  URL.baseURL.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of TypesettingConfiguration((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD **)(a1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v13 = (_QWORD *)result;
  }
  v15 = v13[2];
  v14 = v13[3];
  if (v15 >= v14 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
    v13 = (_QWORD *)result;
  }
  v13[2] = v15 + 1;
  v13[v15 + 4] = v12;
  *(_QWORD *)(a1 + 24) = v13;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v12 + 1;
    URL.encode(to:)(a1);
    if (!v1)
      ProtobufEncoder.endLengthDelimited()();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

uint64_t URL.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, _QWORD, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;

  v49 = a2;
  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v52 = (char *)&v49 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v49 - v12;
  v14 = type metadata accessor for URL();
  v51 = *(_QWORD *)(v14 - 8);
  v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56);
  v55 = v14;
  v53 = v15;
  ((void (*)(char *, uint64_t, uint64_t))v15)(v13, 1, 1);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  if (v16 < v17)
  {
    v50 = v13;
    do
    {
      v24 = *(_QWORD *)(a1 + 24);
      if (v24)
      {
        v25 = *(_QWORD *)(a1 + 32);
        if (v16 < v25)
          goto LABEL_15;
        if (v25 < v16)
          goto LABEL_51;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v26 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_52;
      v24 = v26;
      if (v26 < 8)
        goto LABEL_51;
LABEL_15:
      if (v24 >> 3 == 2)
      {
        if ((v24 & 7) != 2)
          goto LABEL_51;
        v24 = *(_QWORD *)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, (_QWORD *)v24);
        v37 = *(_QWORD *)(v24 + 16);
        v36 = *(_QWORD *)(v24 + 24);
        if (v37 >= v36 >> 1)
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, (_QWORD *)v24);
        *(_QWORD *)(v24 + 16) = v37 + 1;
        *(_QWORD *)(v24 + 8 * v37 + 32) = v17;
        *(_QWORD *)(a1 + 40) = v24;
        v38 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
          v13 = v50;
          goto LABEL_52;
        }
        v13 = v50;
        if (v38 < 0)
          goto LABEL_60;
        v39 = *(_QWORD *)(a1 + 8) + v38;
        if (v17 < v39)
          goto LABEL_51;
        *(_QWORD *)(a1 + 16) = v39;
        URL.init(from:)(a1);
        v24 = *(_QWORD *)(a1 + 40);
        if (!*(_QWORD *)(v24 + 16))
          goto LABEL_61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v40 = *(_QWORD *)(v24 + 16);
          if (!v40)
            goto LABEL_50;
        }
        else
        {
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v24);
          v40 = *(_QWORD *)(v24 + 16);
          if (!v40)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_52:
            outlined destroy of TypesettingConfiguration((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
            return swift_bridgeObjectRelease();
          }
        }
        v41 = v40 - 1;
        v42 = *(_QWORD *)(v24 + 8 * v41 + 32);
        *(_QWORD *)(v24 + 16) = v41;
        *(_QWORD *)(a1 + 40) = v24;
        *(_QWORD *)(a1 + 16) = v42;
        outlined destroy of TypesettingConfiguration((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        v53(v8, 0, 1, v55);
        outlined init with take of URL?((uint64_t)v8, (uint64_t)v13);
      }
      else if (v24 >> 3 == 1)
      {
        swift_bridgeObjectRelease();
        if ((v24 & 7) != 2)
          goto LABEL_53;
        v27 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_57;
        v24 = v27;
        if (v27 < 0)
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          __break(1u);
          v47 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v24);
          v48 = v47[2];
          if (!v48)
          {
            __break(1u);
            JUMPOUT(0x234C41094);
          }
          v45 = v48 - 1;
          v46 = v47[v45 + 4];
          v47[2] = v45;
          *(_QWORD *)(a1 + 40) = v47;
          *(_QWORD *)(a1 + 16) = v46;
          goto LABEL_52;
        }
        v28 = *(_QWORD *)(a1 + 8);
        if (v17 < v28 + v27)
        {
LABEL_53:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_57;
        }
        *(_QWORD *)(a1 + 8) = v28 + v27;
        if (v27)
        {
          v29 = v28 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v32 = v31;
          if (__OFADD__(v29, v24))
            goto LABEL_62;
          if ((uint64_t)(v29 + v24) < v29)
            goto LABEL_63;
          v33 = v30;
          v24 = Data._Representation.subscript.getter();
          v35 = v34;
          outlined consume of Data._Representation(v33, v32);
        }
        else
        {
          v35 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (!v43)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation(v24, v35);
LABEL_57:
          v21 = (uint64_t)v13;
          return outlined destroy of TypesettingConfiguration(v21, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        }
        outlined consume of Data._Representation(v24, v35);
      }
      else
      {
        switch(v24 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_52;
            break;
          case 1uLL:
            v23 = *(_QWORD *)(a1 + 8) + 8;
            if (v17 < v23)
              goto LABEL_51;
            goto LABEL_7;
          case 2uLL:
            v44 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_52;
            if (v44 < 0)
              goto LABEL_64;
            v23 = *(_QWORD *)(a1 + 8) + v44;
            if (v17 < v23)
              goto LABEL_51;
LABEL_7:
            *(_QWORD *)(a1 + 8) = v23;
            break;
          case 5uLL:
            v23 = *(_QWORD *)(a1 + 8) + 4;
            if (v17 < v23)
              goto LABEL_51;
            goto LABEL_7;
          default:
            goto LABEL_51;
        }
      }
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(_QWORD *)(a1 + 16);
    }
    while (v16 < v17);
  }
  *(_QWORD *)(a1 + 24) = 0;
  v18 = (uint64_t)v52;
  URL.init(string:relativeTo:)();
  swift_bridgeObjectRelease();
  v19 = v51;
  v20 = v55;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v18, 1, v55) == 1)
  {
    outlined destroy of TypesettingConfiguration(v18, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    v21 = (uint64_t)v13;
    return outlined destroy of TypesettingConfiguration(v21, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v49, v18, v20);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance URL(uint64_t a1)
{
  return URL.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance URL@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return URL.init(from:)(a1, a2);
}

void UUID.encode(to:)()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = UUID.uuid.getter();
  v9 = v0;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  ProtobufEncoder.encodeData(_:)(&v8, &v17);
}

unint64_t UUID.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  unint64_t v6;

  v3 = a1[1];
  v4 = a1[2];
  if (v3 >= v4)
  {
LABEL_2:
    a1[3] = 0;
    return UUID.init(uuid:)();
  }
  while (1)
  {
    result = a1[3];
    if (result)
    {
      v6 = a1[4];
      if (v3 < v6)
        goto LABEL_12;
      if (v6 < v3)
        break;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v1)
      return result;
    if (result <= 7)
      break;
LABEL_12:
    if ((result & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v1)
            return result;
          v3 = a1[1];
          goto LABEL_5;
        case 1uLL:
          v3 = a1[1] + 8;
          if (v4 >= v3)
            goto LABEL_4;
          goto LABEL_27;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v1)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_30;
          v3 = a1[1] + result;
          if (v4 < v3)
            goto LABEL_27;
LABEL_4:
          a1[1] = v3;
          break;
        case 5uLL:
          v3 = a1[1] + 4;
          if (v4 < v3)
            goto LABEL_27;
          goto LABEL_4;
        default:
          goto LABEL_27;
      }
      goto LABEL_5;
    }
    if ((result & 7) != 2)
      break;
    result = ProtobufDecoder.decodeVarint()();
    if (v1)
      return result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_30:
      __break(1u);
    }
    v3 = a1[1] + result;
    if (v4 < v3)
      break;
    a1[1] = v3;
    if (result != 16)
      break;
LABEL_5:
    v4 = a1[2];
    if (v3 >= v4)
      goto LABEL_2;
  }
LABEL_27:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance UUID()
{
  UUID.encode(to:)();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance UUID(_QWORD *a1)
{
  return UUID.init(from:)(a1);
}

void Data.encode(to:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CC_LONG h4;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  Swift::UInt v14;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a1;
  *(_QWORD *)&into.state.h4 = v6;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a1 + 24);
  v7 = ProtobufEncoder.archiveWriter.getter();
  if (!v7)
  {
    ProtobufEncoder.dataField(_:_:)(2, a2, a3);
    return;
  }
  v8 = v7;
  memset(&c, 0, sizeof(c));
  outlined copy of Data._Representation(a2, a3);
  CC_SHA1_Init(&c);
  into.state = c;
  Data.hash(into:)(&into);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
  outlined consume of Data._Representation(a2, a3);
  h4 = c.h4;
  v11 = *(_QWORD *)&c.h0;
  v10 = *(_QWORD *)&c.h2;
  swift_beginAccess();
  v12 = specialized Collection<>.firstIndex(of:)(v11, v10, h4, *(_QWORD *)(v8 + 32));
  if ((v13 & 1) != 0)
  {
    *(_QWORD *)&c.h0 = v11;
    *(_QWORD *)&c.h2 = v10;
    c.h4 = h4;
    LOBYTE(c.Nl) = 0;
    outlined copy of Data._Representation(a2, a3);
    v14 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&c, v8, a2, a3);
    outlined consume of Data._Representation(a2, a3);
    if (v3)
    {
LABEL_8:
      swift_release();
      return;
    }
  }
  else
  {
    v14 = v12;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v14);
    goto LABEL_8;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t Data.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v42 = type metadata accessor for CodingUserInfoKey();
  v45 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v5 < v6)
  {
    v44 = v4;
    v7 = 0;
    v8 = 0xF000000000000000;
    v41[1] = MEMORY[0x24BEE4AD8] + 8;
    v9 = (uint64_t)v4;
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (!v11)
        goto LABEL_12;
      v12 = *(_QWORD *)(a1 + 32);
      if (v5 >= v12)
        break;
LABEL_14:
      if (v11 >> 3 == 2)
      {
        if ((v11 & 7) != 2)
          goto LABEL_57;
        v24 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_62;
        v25 = v24;
        if (v24 < 0)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          JUMPOUT(0x234C41BF0);
        }
        v26 = *(_QWORD *)(a1 + 8);
        if (v6 < v26 + v24)
          goto LABEL_57;
        *(_QWORD *)(a1 + 8) = v26 + v24;
        if (v24)
        {
          v27 = v26 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v30 = v29;
          if (__OFADD__(v27, v25))
            goto LABEL_65;
          if (v27 + v25 < v27)
            goto LABEL_66;
          v31 = v28;
          v32 = Data._Representation.subscript.getter();
          v34 = v33;
          outlined consume of Data._Representation(v31, v30);
          outlined consume of Data?(v7, v8);
          v7 = v32;
          v8 = v34;
          goto LABEL_7;
        }
        outlined consume of Data?(v7, v8);
        v7 = 0;
        v5 = *(_QWORD *)(a1 + 8);
        v6 = *(_QWORD *)(a1 + 16);
        v8 = 0xC000000000000000;
        if (v5 >= v6)
        {
          v7 = 0;
          *(_QWORD *)(a1 + 24) = 0;
          return v7;
        }
      }
      else
      {
        if (v11 >> 3 != 1)
        {
          switch(v11 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_62;
              goto LABEL_7;
            case 1uLL:
              v10 = *(_QWORD *)(a1 + 8) + 8;
              if (v6 >= v10)
                goto LABEL_6;
              goto LABEL_57;
            case 2uLL:
              v39 = ProtobufDecoder.decodeVarint()();
              if (v1)
                goto LABEL_62;
              if (v39 < 0)
                goto LABEL_68;
              v10 = *(_QWORD *)(a1 + 8) + v39;
              if (v6 < v10)
                goto LABEL_57;
LABEL_6:
              *(_QWORD *)(a1 + 8) = v10;
              break;
            case 5uLL:
              v10 = *(_QWORD *)(a1 + 8) + 4;
              if (v6 < v10)
                goto LABEL_57;
              goto LABEL_6;
            default:
              goto LABEL_57;
          }
          goto LABEL_7;
        }
        v43 = v7;
        if ((v11 & 7) != 0)
        {
          if ((v11 & 7) != 2)
            goto LABEL_57;
          v13 = ProtobufDecoder.decodeVarint()();
          if (v1)
            goto LABEL_62;
          if (v13 < 0)
            goto LABEL_67;
          v14 = *(_QWORD *)(a1 + 8) + v13;
          if (v6 < v14)
          {
LABEL_57:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_62:
            outlined consume of Data?(v7, v8);
            return v7;
          }
          *(_QWORD *)(a1 + 24) = 8;
          *(_QWORD *)(a1 + 32) = v14;
        }
        v15 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_61;
        v16 = v15;
        if (v15 < 0)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_61:
          v7 = v43;
          goto LABEL_62;
        }
        v17 = *(_QWORD *)(a1 + 48);
        v18 = one-time initialization token for readerKey;
        v19 = *(id *)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 != -1)
          swift_once();
        v20 = v42;
        v21 = __swift_project_value_buffer(v42, (uint64_t)static ArchiveReader.readerKey);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v9, v21, v20);
        if (*(_QWORD *)(v17 + 16) && (v22 = specialized __RawDictionaryStorage.find<A>(_:)(v9), (v23 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v22, (uint64_t)&v46);
        }
        else
        {
          v46 = 0u;
          v47 = 0u;
        }
        (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v20);
        if (!*((_QWORD *)&v47 + 1))
        {
          outlined destroy of TypesettingConfiguration((uint64_t)&v46, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_48:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          outlined consume of Data?(v43, v8);
LABEL_49:
          v7 = 0;
          v8 = 0xF000000000000000;
          goto LABEL_7;
        }
        type metadata accessor for ArchiveReader();
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_48;
        v35 = v48;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if (v16 >= *(_QWORD *)(v35 + 40))
        {
          outlined consume of Data?(v43, v8);
          swift_release();
          goto LABEL_49;
        }
        ArchiveReader.subscript.getter(v16);
        v7 = v36;
        v38 = v37;
        outlined consume of Data?(v43, v8);
        swift_release();
        v8 = v38;
LABEL_7:
        v5 = *(_QWORD *)(a1 + 8);
        v6 = *(_QWORD *)(a1 + 16);
        if (v5 >= v6)
        {
          *(_QWORD *)(a1 + 24) = 0;
          if (v8 >> 60 == 15)
            return 0;
          return v7;
        }
      }
    }
    if (v12 < v5)
      goto LABEL_57;
    *(_QWORD *)(a1 + 24) = 0;
LABEL_12:
    v11 = ProtobufDecoder.decodeVarint()();
    if (v1)
      goto LABEL_62;
    if (v11 <= 7)
      goto LABEL_57;
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 24) = 0;
  return 0;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Data(uint64_t a1)
{
  uint64_t v1;

  Data.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Data@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = Data.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t Locale.encode(to:)()
{
  uint64_t v0;

  if ((Locale.identifier.getter() || v0 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t Locale.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v3);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 < v5)
  {
    v6 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (!v9)
        goto LABEL_12;
      v10 = *(_QWORD *)(a1 + 32);
      if (v4 >= v10)
        break;
LABEL_14:
      if ((v9 & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        swift_bridgeObjectRelease();
        if ((v9 & 7) != 2)
          goto LABEL_36;
        result = ProtobufDecoder.decodeVarint()();
        if (v1)
          return result;
        v12 = result;
        if (result < 0)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          JUMPOUT(0x234C42004);
        }
        v13 = *(_QWORD *)(a1 + 8);
        if (v5 < v13 + result)
        {
LABEL_36:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          return swift_willThrow();
        }
        *(_QWORD *)(a1 + 8) = v13 + result;
        if (result)
        {
          v14 = v13 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v17 = v16;
          if (__OFADD__(v14, v12))
            goto LABEL_43;
          if (v14 + v12 < v14)
            goto LABEL_44;
          v18 = v15;
          v19 = Data._Representation.subscript.getter();
          v21 = v20;
          outlined consume of Data._Representation(v18, v17);
        }
        else
        {
          v19 = 0;
          v21 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (!v22)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return outlined consume of Data._Representation(v19, v21);
        }
        v6 = v22;
        outlined consume of Data._Representation(v19, v21);
      }
      else
      {
        switch(v9 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1)
              return swift_bridgeObjectRelease();
            break;
          case 1uLL:
            v8 = *(_QWORD *)(a1 + 8) + 8;
            if (v5 >= v8)
              goto LABEL_6;
            goto LABEL_34;
          case 2uLL:
            v23 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return swift_bridgeObjectRelease();
            if (v23 < 0)
              goto LABEL_45;
            v8 = *(_QWORD *)(a1 + 8) + v23;
            if (v5 < v8)
              goto LABEL_34;
LABEL_6:
            *(_QWORD *)(a1 + 8) = v8;
            break;
          case 5uLL:
            v8 = *(_QWORD *)(a1 + 8) + 4;
            if (v5 < v8)
              goto LABEL_34;
            goto LABEL_6;
          default:
            goto LABEL_34;
        }
      }
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      if (v4 >= v5)
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (!v6)
          return static Locale.current.getter();
        return Locale.init(identifier:)();
      }
    }
    if (v10 < v4)
      goto LABEL_34;
    *(_QWORD *)(a1 + 24) = 0;
LABEL_12:
    v11 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return swift_bridgeObjectRelease();
    v9 = v11;
    if (v11 < 8)
    {
LABEL_34:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 24) = 0;
  return static Locale.current.getter();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Locale()
{
  uint64_t v0;

  if ((Locale.identifier.getter() || v0 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Locale(uint64_t a1)
{
  return Locale.init(from:)(a1);
}

uint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  result = 0;
  while (*(unsigned __int8 *)(a2 + 32 + result) != a1)
  {
    if (v2 == ++result)
      return 0;
  }
  return result;
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
    return 0;
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
    v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        v11 = Substring.index(after:)();
        if (v11 >> 14 == v14)
          return 0;
        v4 = v11;
        if (Substring.subscript.getter() == a1 && v12 == a2)
          goto LABEL_6;
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
          return v4;
      }
    }
  }
  return v4;
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = String.index(after:)();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(_QWORD *)(a2 + 40 + 8 * result++);
    if (v6 == a1)
      return result;
  }
  return 0;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *i;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v4 = *(_QWORD *)(a4 + 16);
  if (!v4)
    return 0;
  result = 0;
  for (i = (_DWORD *)(a4 + 48); ; i += 5)
  {
    v8 = *(i - 4) == (_DWORD)a1 && *(i - 3) == HIDWORD(a1);
    v9 = v8 && *(i - 2) == (_DWORD)a2;
    v10 = v9 && *(i - 1) == HIDWORD(a2);
    if (v10 && *i == a3)
      break;
    if (v4 == ++result)
      return 0;
  }
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v5 = *(_QWORD *)(a5 + 16);
  if (!v5)
    return 0;
  v7 = a3;
  v10 = 0;
  v11 = a5 + 32;
  v30 = a5 + 32;
  v31 = *(_QWORD *)(a5 + 16);
  while (1)
  {
    v12 = v11 + 32 * v10;
    v14 = *(_QWORD *)v12;
    v13 = *(_QWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    if ((v15 & 1) == 0)
      break;
    if ((v7 & 1) == 0)
      goto LABEL_4;
    v17 = a4;
    v18 = *(_BYTE *)(v12 + 16);
    v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96);
    outlined copy of Text.Storage(v14, v13, 1);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v14, v13, 1);
    outlined copy of Text.Storage(a1, a2, 1);
    v20 = v16;
    v21 = v13;
    v22 = v19(a1);
    v15 = v18;
    a4 = v17;
    v23 = v22;
    outlined consume of Text.Storage(a1, a2, 1);
    v33 = v21;
    v24 = v21;
    v16 = v20;
    outlined consume of Text.Storage(v14, v24, 1);
    if ((v23 & 1) != 0)
      goto LABEL_17;
LABEL_3:
    outlined consume of Text.Storage(v14, v33, v15);
    swift_bridgeObjectRelease();
    v11 = v30;
    v5 = v31;
    v7 = a3;
LABEL_4:
    if (++v10 == v5)
      return 0;
  }
  if ((v7 & 1) != 0)
    goto LABEL_4;
  v25 = v14 == a1 && v13 == a2;
  v33 = *(_QWORD *)(v12 + 8);
  if (!v25)
  {
    v26 = *(_QWORD *)(v12 + 8);
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v14, v26, 0);
    if ((v27 & 1) != 0)
      goto LABEL_17;
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(a1, a2, 0);
LABEL_17:
  v28 = *(_QWORD *)(v16 + 16);
  if (v28 != *(_QWORD *)(a4 + 16))
    goto LABEL_3;
  if (v28 && v16 != a4)
    __asm { BR              X9 }
  outlined consume of Text.Storage(v14, v33, v15);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for URL?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  int64_t v5;
  uint64_t v6;

  v4 = a4 >> 1;
  if (a4 >> 1 == a3)
    return 0;
  if ((uint64_t)(a4 >> 1) > a3)
  {
    if (*(_QWORD *)(a2 + 8 * a3) == result)
      return a3;
    v5 = a3 + 1;
    while (1)
    {
      if (v4 == v5)
        return 0;
      if (v5 >= v4)
        break;
      v6 = *(_QWORD *)(a2 + 8 * v5++);
      if (v6 == result)
        return v5 - 1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t Image.Orientation.rawValue.getter(char a1)
{
  return 0x507030104060200uLL >> (8 * a1);
}

void *static Image.Orientation.allCases.getter()
{
  return &outlined read-only object #0 of static Image.Orientation.allCases.getter;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Image.Orientation(_BYTE *a1, _BYTE *a2)
{
  return ((0x507030104060200uLL >> (8 * *a1)) & 7) == ((0x507030104060200uLL >> (8 * *a2)) & 7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Image.Orientation@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Image.Orientation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Image.Orientation(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0x507030104060200uLL >> (8 * *v1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Image.Orientation(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Image.Orientation.allCases.getter;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Image.Orientation()
{
  char *v0;
  char v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x507030104060200uLL >> (8 * v1));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Image.Orientation()
{
  _BYTE *v0;

  Hasher._combine(_:)(0x507030104060200uLL >> (8 * *v0));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Image.Orientation()
{
  char *v0;
  char v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x507030104060200uLL >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t CGSize.apply(_:)(unsigned __int8 a1, __n128 a2, __n128 a3)
{
  return ((uint64_t (*)(__n128, __n128, double))((char *)sub_234C42CB0 + 4 * byte_23528F414[a1]))(a2, a3, a3.n128_f64[0]);
}

double sub_234C42CB0(double a1, double a2)
{
  return a2;
}

uint64_t CGSize.unapply(_:)(unsigned __int8 a1, __n128 a2, __n128 a3)
{
  return ((uint64_t (*)(__n128, __n128, double))((char *)sub_234C42CE0 + 4 * byte_23528F41C[a1]))(a2, a3, a3.n128_f64[0]);
}

double sub_234C42CE0(double a1, double a2)
{
  return a2;
}

void CGRect.apply(_:in:)(char a1)
{
  __asm { BR              X10 }
}

CGFloat sub_234C42D4C(double a1, double a2, CGFloat a3)
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v8;
  CGRect v10;
  CGRect v11;

  v10.origin.x = a3;
  v10.origin.y = v3;
  v10.size.width = v5;
  v10.size.height = v4;
  v8 = a1 - (a3 + CGRectGetWidth(v10));
  v11.origin.x = v8;
  v11.origin.y = v3;
  v11.size.width = v5;
  v11.size.height = v4;
  CGRectGetHeight(v11);
  return v8;
}

void CGRect.unapply(_:in:)(char a1)
{
  __asm { BR              X11 }
}

double sub_234C42E7C()
{
  CGFloat v0;
  CGFloat v1;
  double v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v2;
  v5.origin.y = v1;
  v5.size.width = v3;
  v5.size.height = v0;
  CGRectGetHeight(v5);
  return v2;
}

double CGAffineTransform.init(orientation:in:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  specialized CGAffineTransform.init(orientation:in:)(a1);
  *a2 = v4;
  a2[1] = v5;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

CGFloat CGAffineTransform.init(orientation:in:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat tx;
  CGFloat ty;
  CGFloat result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGAffineTransform v20;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;

  specialized CGAffineTransform.init(orientation:in:)(a1);
  v16 = v24;
  v17 = v23;
  v7 = v25;
  v8 = v26;
  CGAffineTransformMakeTranslation(&t1, a3, a4);
  v18 = *(_OWORD *)&t1.c;
  v19 = *(_OWORD *)&t1.a;
  v9 = -a3;
  v10 = -a4;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, v9, v10);
  *(_OWORD *)&t2.a = v17;
  *(_OWORD *)&t2.c = v16;
  t2.tx = v7;
  t2.ty = v8;
  CGAffineTransformConcat(&v20, &t1, &t2);
  t1 = v20;
  *(_OWORD *)&t2.a = v19;
  *(_OWORD *)&t2.c = v18;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v20, &t1, &t2);
  result = v20.a;
  v14 = *(_OWORD *)&v20.c;
  v15 = *(_OWORD *)&v20.tx;
  *a2 = *(_OWORD *)&v20.a;
  a2[1] = v14;
  a2[2] = v15;
  return result;
}

CGFloat CGAffineTransform.apply(_:in:)(char a1)
{
  _OWORD *v1;
  __int128 v2;
  CGFloat result;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v9;

  if (a1)
  {
    specialized CGAffineTransform.init(orientation:in:)(a1);
    t1 = v9;
    v2 = v1[1];
    *(_OWORD *)&t2.a = *v1;
    *(_OWORD *)&t2.c = v2;
    *(_OWORD *)&t2.tx = v1[2];
    CGAffineTransformConcat(&v6, &t1, &t2);
    result = v6.a;
    v4 = *(_OWORD *)&v6.c;
    v5 = *(_OWORD *)&v6.tx;
    *v1 = *(_OWORD *)&v6.a;
    v1[1] = v4;
    v1[2] = v5;
  }
  return result;
}

CGFloat CGAffineTransform.apply(_:)(char a1)
{
  _OWORD *v1;
  __int128 v2;
  CGFloat result;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v9;

  if (a1)
  {
    specialized CGAffineTransform.init(orientation:in:)(a1);
    t1 = v9;
    v2 = v1[1];
    *(_OWORD *)&t2.a = *v1;
    *(_OWORD *)&t2.c = v2;
    *(_OWORD *)&t2.tx = v1[2];
    CGAffineTransformConcat(&v6, &t1, &t2);
    result = v6.a;
    v4 = *(_OWORD *)&v6.c;
    v5 = *(_OWORD *)&v6.tx;
    *v1 = *(_OWORD *)&v6.a;
    v1[1] = v4;
    v1[2] = v5;
  }
  return result;
}

uint64_t specialized Image.Orientation.init(exifValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 8)
    return 8;
  else
    return (0x407060503020100uLL >> (8 * (a1 - 1)));
}

void specialized CGAffineTransform.init(orientation:in:)(char a1)
{
  __asm { BR              X12 }
}

CGAffineTransform *sub_234C431CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, double a10, __int128 a11, __int128 a12, __int128 a13, CGAffineTransform *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _OWORD *v18;
  CGAffineTransform *result;
  __int128 v20;
  __int128 v21;
  CGAffineTransform v22;
  CGAffineTransform v23;

  v23.a = -1.0;
  v23.b = -0.0;
  v23.c = -0.0;
  v23.d = -1.0;
  v23.tx = a9 * 0.5;
  v23.ty = a10 * 0.5;
  result = CGAffineTransformTranslate(&v22, &v23, -(a9 * 0.5), -(a10 * 0.5));
  v20 = *(_OWORD *)&v22.c;
  v21 = *(_OWORD *)&v22.tx;
  *v18 = *(_OWORD *)&v22.a;
  v18[1] = v20;
  v18[2] = v21;
  return result;
}

uint64_t specialized Image.Orientation.init(rawValue:)(char a1)
{
  if ((a1 & 0xF8) != 0)
    return 8;
  else
    return (0x602070305010400uLL >> (8 * a1));
}

unint64_t lazy protocol witness table accessor for type [Image.Orientation] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Image.Orientation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Image.Orientation] and conformance [A])
  {
    type metadata accessor for [Image.Orientation]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Image.Orientation] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [Image.Orientation]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Image.Orientation])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Image.Orientation]);
  }
}

unint64_t lazy protocol witness table accessor for type Image.Orientation and conformance Image.Orientation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Orientation and conformance Image.Orientation;
  if (!lazy protocol witness table cache variable for type Image.Orientation and conformance Image.Orientation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Orientation, &type metadata for Image.Orientation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Orientation and conformance Image.Orientation);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Image.Orientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_234C43400 + 4 * byte_23528F441[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_234C43434 + 4 * byte_23528F43C[v4]))();
}

uint64_t sub_234C43434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C4343C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C43444);
  return result;
}

uint64_t sub_234C43450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C43458);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_234C4345C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C43464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Image.Orientation()
{
  return &type metadata for Image.Orientation;
}

Swift::Double __swiftcall UnitCurve.velocity(at:)(Swift::Double at)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;

  v3 = *v1;
  v4 = v1[3];
  v5 = at > 0.0;
  v6 = 0.0;
  if (v5)
    v6 = at;
  v7 = 1.0;
  if (v6 > 1.0)
    v6 = 1.0;
  if (*((_BYTE *)v1 + 32) != 1)
    return UnitCurve.CubicSolver.velocity(at:)(v6);
  v8 = v1[2] | v1[1];
  if (!(v8 | v3 | v4))
    return v7;
  v9 = v8 | v4;
  if (v3 == 1 && v9 == 0)
  {
    v15 = at / sqrt(1.0 - at * at);
  }
  else
  {
    if (v3 == 2 && v9 == 0)
    {
      v12 = at + -1.0;
      v17 = -((at + -2.0) * at);
    }
    else
    {
      v12 = at + at;
      if (at >= 0.5)
      {
        v12 = v12 + -2.0;
        v13 = (at * -4.0 + 8.0) * at;
        v14 = -3.0;
      }
      else
      {
        v13 = at * -4.0 * at;
        v14 = 1.0;
      }
      v17 = v13 + v14;
    }
    v15 = v12 / sqrt(v17);
  }
  return fabs(v15);
}

__n128 UnitCurve.function.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 UnitCurve.function.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*UnitCurve.function.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static UnitCurve.bezier(startControlPoint:endControlPoint:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = 0;
}

Swift::Double __swiftcall UnitCurve.value(at:)(Swift::Double at)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[3];
  if (at > 0.0)
    v5 = at;
  else
    v5 = 0.0;
  if (v5 > 1.0)
    v5 = 1.0;
  if (*((_BYTE *)v1 + 32) == 1)
  {
    v6 = *((_QWORD *)v1 + 2) | *(_QWORD *)&v3;
    if (v6 | *(_QWORD *)&v2 | *(_QWORD *)&v4)
    {
      v7 = v6 | *(_QWORD *)&v4;
      if (*(_QWORD *)&v2 == 1 && v7 == 0)
      {
        return 1.0 - sqrt(1.0 - at * at);
      }
      else if (*(_QWORD *)&v2 == 2 && v7 == 0)
      {
        return sqrt(1.0 - (at + -1.0) * (at + -1.0));
      }
      else
      {
        v10 = at * 4.0;
        if (at >= 0.5)
          v11 = sqrt((8.0 - v10) * at + -3.0) + 1.0;
        else
          v11 = 1.0 - sqrt(1.0 - v10 * at);
        return v11 * 0.5;
      }
    }
  }
  else
  {
    v12 = v3 * 3.0;
    v13 = (v4 - v3) * 3.0 - v3 * 3.0;
    v14 = 1.0 - v3 * 3.0 - v13;
    v15 = UnitCurve.CubicSolver.solveX(_:epsilon:)(v5, 0.000000953674316);
    return round(v15 * (v12 + v15 * (v13 + v14 * v15)) * 1048576.0) * 0.000000953674316;
  }
  return at;
}

Swift::Double __swiftcall UnitCurve.CubicSolver.value(at:)(Swift::Double at)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  v5 = UnitCurve.CubicSolver.solveX(_:epsilon:)(at, 0.000000953674316);
  return round(v5 * (v4 + v5 * (v3 + v2 * v5)) * 1048576.0) * 0.000000953674316;
}

Swift::Double __swiftcall UnitCurve.CubicSolver.velocity(at:)(Swift::Double at)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  Swift::Double result;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = UnitCurve.CubicSolver.solveX(_:epsilon:)(at, 0.000000953674316);
  v9 = v4 + v8 * (v3 + v3 + v2 * 3.0 * v8);
  v10 = v7 + v8 * (v6 + v6 + v5 * 3.0 * v8);
  result = 1.0;
  if (v9 != v10)
  {
    if (v9 == 0.0)
    {
      result = INFINITY;
      if (v10 < 0.0)
        return -INFINITY;
    }
    else
    {
      return round(v10 / v9 * 1048576.0) * 0.000000953674316;
    }
  }
  return result;
}

void UnitCurve.inverse.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  if (*((_BYTE *)v1 + 32) != 1)
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v2;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = 0;
    return;
  }
  v6 = v5 | v3;
  if (!(v6 | v2 | v4))
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
LABEL_16:
    *(_BYTE *)(a1 + 32) = 1;
    return;
  }
  v7 = v6 | v4;
  if (v2 == 1 && v7 == 0)
  {
    v10 = 2;
    goto LABEL_15;
  }
  if (v2 != 2 || v7 != 0)
  {
    v10 = 3;
LABEL_15:
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    goto LABEL_16;
  }
  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
}

void UnitCurve.Function.hash(into:)()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = *(double *)v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v3 = *(_QWORD *)(v0 + 16) | *(_QWORD *)(v0 + 8);
    if (v3 | *(_QWORD *)&v1 | v2)
    {
      v4 = v3 | v2;
      if (*(_QWORD *)&v1 == 1 && v4 == 0)
      {
        v7 = 1;
      }
      else if (*(_QWORD *)&v1 == 2 && v4 == 0)
      {
        v7 = 2;
      }
      else
      {
        v7 = 3;
      }
    }
    else
    {
      v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  else
  {
    v8 = *(double *)v0;
    v9 = *(double *)(v0 + 8);
    v10 = *(double *)(v0 + 16);
    v11 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v8, v9);
    UnitPoint.hash(into:)(v10, v11);
  }
}

Swift::Int UnitCurve.Function.hashValue.getter()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  int v5;
  uint64_t v6;
  Swift::UInt v8;

  v1 = *(double *)v0;
  v2 = *(double *)(v0 + 8);
  v4 = *(double *)(v0 + 16);
  v3 = *(double *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    if (*(_QWORD *)&v4 | *(_QWORD *)&v2 | *(_QWORD *)&v1 | *(_QWORD *)&v3)
    {
      v6 = *(_QWORD *)&v4 | *(_QWORD *)&v2 | *(_QWORD *)&v3;
      if (*(_QWORD *)&v1 == 1 && v6 == 0)
      {
        v8 = 1;
      }
      else if (*(_QWORD *)&v1 != 2 || v6)
      {
        v8 = 3;
      }
      else
      {
        v8 = 2;
      }
    }
    else
    {
      v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v1, v2);
    UnitPoint.hash(into:)(v4, v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnitCurve.Function()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = *(double *)v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v3 = *(_QWORD *)(v0 + 16) | *(_QWORD *)(v0 + 8);
    if (v3 | *(_QWORD *)&v1 | v2)
    {
      v4 = v3 | v2;
      if (*(_QWORD *)&v1 == 1 && v4 == 0)
      {
        v7 = 1;
      }
      else if (*(_QWORD *)&v1 == 2 && v4 == 0)
      {
        v7 = 2;
      }
      else
      {
        v7 = 3;
      }
    }
    else
    {
      v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  else
  {
    v8 = *(double *)v0;
    v9 = *(double *)(v0 + 8);
    v10 = *(double *)(v0 + 16);
    v11 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v8, v9);
    UnitPoint.hash(into:)(v10, v11);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitCurve.Function()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v6;
  double v7;
  double v8;
  double v9;
  double v10;

  Hasher.init(_seed:)();
  v1 = *(double *)v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v3 = *(_QWORD *)(v0 + 16) | *(_QWORD *)(v0 + 8);
    if (v3 | *(_QWORD *)&v1 | v2)
    {
      v4 = v3 | v2;
      if (*(_QWORD *)&v1 == 1 && v4 == 0)
      {
        v6 = 1;
      }
      else if (*(_QWORD *)&v1 != 2 || v4)
      {
        v6 = 3;
      }
      else
      {
        v6 = 2;
      }
    }
    else
    {
      v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
  else
  {
    v7 = *(double *)v0;
    v8 = *(double *)(v0 + 8);
    v9 = *(double *)(v0 + 16);
    v10 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v7, v8);
    UnitPoint.hash(into:)(v9, v10);
  }
  return Hasher._finalize()();
}

void UnitCurve.hash(into:)()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = *(double *)v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v3 = *(_QWORD *)(v0 + 16) | *(_QWORD *)(v0 + 8);
    if (v3 | *(_QWORD *)&v1 | v2)
    {
      v4 = v3 | v2;
      if (*(_QWORD *)&v1 == 1 && v4 == 0)
      {
        v7 = 1;
      }
      else if (*(_QWORD *)&v1 == 2 && v4 == 0)
      {
        v7 = 2;
      }
      else
      {
        v7 = 3;
      }
    }
    else
    {
      v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  else
  {
    v8 = *(double *)v0;
    v9 = *(double *)(v0 + 8);
    v10 = *(double *)(v0 + 16);
    v11 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v8, v9);
    UnitPoint.hash(into:)(v10, v11);
  }
}

uint64_t static UnitCurve.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  BOOL v9;
  uint64_t result;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;

  v3 = *(float64x2_t *)a1;
  v2 = *(float64x2_t *)(a1 + 16);
  v5 = *(float64x2_t *)a2;
  v4 = *(float64x2_t *)(a2 + 16);
  if (*(_BYTE *)(a1 + 32) != 1)
    return (*(_BYTE *)(a2 + 32) & 1) == 0
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v3, v5), (int32x4_t)vceqq_f64(v2, v4))), 0xFuLL))) & 1) != 0;
  v6 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v2.f64[0], 0), (int8x16_t)v3);
  if (!(v6.i64[1] | *(_QWORD *)&v3.f64[0] | *(_QWORD *)&v2.f64[1]))
    return *(_BYTE *)(a2 + 32)
        && !(vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4, 0), *(int8x16_t *)&v5).i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1]);
  v7 = v6.i64[1] | *(_QWORD *)&v2.f64[1];
  if (*(_QWORD *)&v3.f64[0] == 1 && !v7)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
    v8 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    v9 = v8.i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1] && *(_QWORD *)&v5.f64[0] == 1;
    return v9 && (v8.i64[1] | *(_QWORD *)&v4.f64[1]) == 0;
  }
  if (*(_QWORD *)&v3.f64[0] == 2 && !v7)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
    v12 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    if (!(v12.i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1]))
      return 0;
    v13 = v12.i64[1] | *(_QWORD *)&v4.f64[1];
    if (*(_QWORD *)&v5.f64[0] == 1 && !v13)
      return 0;
    return *(_QWORD *)&v5.f64[0] == 2 && !v13;
  }
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    return 0;
  v14 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
  if (!(v14.i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1]))
    return 0;
  result = 1;
  if ((unint64_t)(*(_QWORD *)&v5.f64[0] - 1) <= 1 && !(v14.i64[1] | *(_QWORD *)&v4.f64[1]))
    return 0;
  return result;
}

Swift::Int UnitCurve.hashValue.getter()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  int v5;
  uint64_t v6;
  Swift::UInt v8;

  v1 = *(double *)v0;
  v2 = *(double *)(v0 + 8);
  v4 = *(double *)(v0 + 16);
  v3 = *(double *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    if (*(_QWORD *)&v4 | *(_QWORD *)&v2 | *(_QWORD *)&v1 | *(_QWORD *)&v3)
    {
      v6 = *(_QWORD *)&v4 | *(_QWORD *)&v2 | *(_QWORD *)&v3;
      if (*(_QWORD *)&v1 == 1 && v6 == 0)
      {
        v8 = 1;
      }
      else if (*(_QWORD *)&v1 != 2 || v6)
      {
        v8 = 3;
      }
      else
      {
        v8 = 2;
      }
    }
    else
    {
      v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v1, v2);
    UnitPoint.hash(into:)(v4, v3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnitCurve(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  if (*(_BYTE *)(a1 + 32) != 1)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
      return 0;
    if (v2 == v6 && v3 == v7 && v5 == v9)
      return v4 == v8;
    return 0;
  }
  v10 = *(_QWORD *)&v5 | *(_QWORD *)&v3;
  if (!(v10 | *(_QWORD *)&v2 | *(_QWORD *)&v4))
  {
    if (*(_BYTE *)(a2 + 32))
      return (*(_QWORD *)&v9 | *(_QWORD *)&v7 | *(_QWORD *)&v6 | *(_QWORD *)&v8) == 0;
    return 0;
  }
  v11 = v10 | *(_QWORD *)&v4;
  if (*(_QWORD *)&v2 == 1 && v11 == 0)
  {
    if (*(_BYTE *)(a2 + 32))
    {
      v20 = *(_QWORD *)&v9 | *(_QWORD *)&v7;
      if (v20 | *(_QWORD *)&v6 | *(_QWORD *)&v8)
      {
        if (*(_QWORD *)&v6 == 1 && !(v20 | *(_QWORD *)&v8))
          return 1;
      }
    }
    return 0;
  }
  if (*(_QWORD *)&v2 != 2 || v11 != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v14 = *(_QWORD *)&v9 | *(_QWORD *)&v7;
      if (v14 | *(_QWORD *)&v6 | *(_QWORD *)&v8)
      {
        v15 = v14 | *(_QWORD *)&v8;
        if (*(_QWORD *)&v6 != 1 || v15)
          return *(_QWORD *)&v6 != 2 || v15 != 0;
      }
    }
    return 0;
  }
  if (!*(_BYTE *)(a2 + 32))
    return 0;
  v21 = *(_QWORD *)&v9 | *(_QWORD *)&v7;
  if (!(v21 | *(_QWORD *)&v6 | *(_QWORD *)&v8))
    return 0;
  v22 = v21 | *(_QWORD *)&v8;
  if (*(_QWORD *)&v6 == 1 && !v22)
    return 0;
  return *(_QWORD *)&v6 == 2 && v22 == 0;
}

double one-time initialization function for easeInEaseOut()
{
  double result;

  if (one-time initialization token for easeInOut != -1)
    swift_once();
  result = *(double *)&static UnitCurve.easeInOut;
  static UnitCurve.easeInEaseOut = static UnitCurve.easeInOut;
  unk_2561B2978 = unk_2561B29A0;
  byte_2561B2988 = byte_2561B29B0;
  return result;
}

double static UnitCurve.easeInEaseOut.getter@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;

  if (one-time initialization token for easeInEaseOut != -1)
    swift_once();
  v2 = byte_2561B2988;
  result = *(double *)&static UnitCurve.easeInEaseOut;
  v4 = unk_2561B2978;
  *(_OWORD *)a1 = static UnitCurve.easeInEaseOut;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

double one-time initialization function for easeInOut()
{
  double result;

  result = 0.42;
  static UnitCurve.easeInOut = xmmword_23528F540;
  unk_2561B29A0 = xmmword_23528F550;
  byte_2561B29B0 = 0;
  return result;
}

double static UnitCurve.easeInOut.getter@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;

  if (one-time initialization token for easeInOut != -1)
    swift_once();
  v2 = byte_2561B29B0;
  result = *(double *)&static UnitCurve.easeInOut;
  v4 = unk_2561B29A0;
  *(_OWORD *)a1 = static UnitCurve.easeInOut;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

double one-time initialization function for easeIn()
{
  double result;

  result = 0.42;
  __asm { FMOV            V1.2D, #1.0 }
  static UnitCurve.easeIn = xmmword_23528F540;
  unk_2561B29C8 = _Q1;
  byte_2561B29D8 = 0;
  return result;
}

double static UnitCurve.easeIn.getter@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;

  if (one-time initialization token for easeIn != -1)
    swift_once();
  v2 = byte_2561B29D8;
  result = *(double *)&static UnitCurve.easeIn;
  v4 = unk_2561B29C8;
  *(_OWORD *)a1 = static UnitCurve.easeIn;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

double one-time initialization function for easeOut()
{
  double result;

  static UnitCurve.easeOut = 0uLL;
  result = 0.58;
  xmmword_2561B29F0 = xmmword_23528F550;
  byte_2561B2A00 = 0;
  return result;
}

double static UnitCurve.easeOut.getter@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;

  if (one-time initialization token for easeOut != -1)
    swift_once();
  v2 = byte_2561B2A00;
  result = *(double *)&static UnitCurve.easeOut;
  v4 = xmmword_2561B29F0;
  *(_OWORD *)a1 = static UnitCurve.easeOut;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

void static UnitCurve.circularEaseIn.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
}

void static UnitCurve.circularEaseOut.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
}

void static UnitCurve.circularEaseInOut.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
}

double static UnitCurve.linear.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

double UnitCurve.CubicSolver.init(startControlPoint:endControlPoint:)@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double result;

  v5 = a2 * 3.0;
  v6 = (a4 - a2) * 3.0 - a2 * 3.0;
  v7 = a3 * 3.0;
  v8 = (a5 - a3) * 3.0 - a3 * 3.0;
  *a1 = 1.0 - v5 - v6;
  a1[1] = v6;
  result = 1.0 - v7 - v8;
  a1[2] = v5;
  a1[3] = result;
  a1[4] = v8;
  a1[5] = v7;
  return result;
}

double UnitCurve.CubicSolver.startControlPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16) / 3.0;
}

double UnitCurve.CubicSolver.endControlPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16) / 3.0 + (*(double *)(v0 + 8) + *(double *)(v0 + 16)) / 3.0;
}

double UnitCurve.CubicSolver.solveX(_:epsilon:)(double result, double a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v28;

  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = (v5 + (*v2 * result + v4) * result) * result;
  if (vabdd_f64(v6, result) >= a2)
  {
    v7 = v6 - result;
    v8 = v3 * 3.0;
    v9 = v4 + v4;
    v10 = v5 + (v3 * 3.0 * result + v4 + v4) * result;
    if (fabs(v10) < a2)
      goto LABEL_30;
    v11 = result - v7 / v10;
    v12 = v11 * (v5 + v11 * (v4 + v3 * v11));
    if (vabdd_f64(v12, result) >= a2)
    {
      v13 = v5 + v11 * (v9 + v8 * v11);
      if (fabs(v13) < a2)
        goto LABEL_30;
      v11 = v11 - (v12 - result) / v13;
      v14 = v11 * (v5 + v11 * (v4 + v3 * v11));
      if (vabdd_f64(v14, result) >= a2)
      {
        v15 = v5 + v11 * (v9 + v8 * v11);
        if (fabs(v15) < a2)
          goto LABEL_30;
        v11 = v11 - (v14 - result) / v15;
        v16 = v11 * (v5 + v11 * (v4 + v3 * v11));
        if (vabdd_f64(v16, result) >= a2)
        {
          v17 = v5 + v11 * (v9 + v8 * v11);
          if (fabs(v17) < a2)
            goto LABEL_30;
          v11 = v11 - (v16 - result) / v17;
          v18 = v11 * (v5 + v11 * (v4 + v3 * v11));
          if (vabdd_f64(v18, result) >= a2)
          {
            v19 = v5 + v11 * (v9 + v8 * v11);
            if (fabs(v19) < a2
              || (v11 = v11 - (v18 - result) / v19,
                  v20 = v11 * (v5 + v11 * (v4 + v3 * v11)),
                  vabdd_f64(v20, result) >= a2)
              && ((v21 = v5 + v11 * (v9 + v8 * v11), fabs(v21) < a2)
               || (v11 = v11 - (v20 - result) / v21,
                   v22 = v11 * (v5 + v11 * (v4 + v3 * v11)),
                   vabdd_f64(v22, result) >= a2)
               && ((v23 = v5 + v11 * (v9 + v8 * v11), fabs(v23) < a2)
                || (v11 = v11 - (v22 - result) / v23, vabdd_f64(v11 * (v5 + v11 * (v4 + v3 * v11)), result) >= a2))))
            {
LABEL_30:
              v11 = 0.0;
              if (result >= 0.0)
              {
                v11 = 1.0;
                if (result <= 1.0)
                {
                  v24 = 0.0;
                  v25 = 1.0;
                  v26 = -1023;
                  v11 = result;
                  do
                  {
                    if (v7 < 0.0)
                      v24 = v11;
                    else
                      v25 = v11;
                    v11 = v24 + (v25 - v24) * 0.5;
                    if (v24 >= v25 || v26 == 0)
                      break;
                    v28 = v11 * (v5 + v11 * (v4 + v3 * v11));
                    v7 = v28 - result;
                    ++v26;
                  }
                  while (vabdd_f64(v28, result) >= a2);
                }
              }
            }
          }
        }
      }
    }
    return v11;
  }
  return result;
}

void UnitCurve.CubicSolver.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *v0;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v2;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v3;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v5;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
}

Swift::Int UnitCurve.CubicSolver.hashValue.getter()
{
  Hasher.init(_seed:)();
  UnitCurve.CubicSolver.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitCurve.CubicSolver()
{
  Hasher.init(_seed:)();
  UnitCurve.CubicSolver.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitCurve.CubicSolver()
{
  Hasher.init(_seed:)();
  UnitCurve.CubicSolver.hash(into:)();
  return Hasher._finalize()();
}

double *UnitCurve.CubicSolver.encode(to:)(double *result)
{
  double *v1;
  double *v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  v2 = v1;
  v3 = result;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v5 / 3.0;
  if (v5 / 3.0 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    v9 = *((_QWORD *)v3 + 1);
    result = (double *)(v9 + 8);
    if (__OFADD__(v9, 8))
    {
      __break(1u);
    }
    else if (*((_QWORD *)v3 + 2) >= (uint64_t)result)
    {
      *((_QWORD *)v3 + 1) = result;
      *(double *)(*(_QWORD *)v3 + v9) = v8;
      goto LABEL_5;
    }
    result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = v8;
  }
LABEL_5:
  v10 = v7 / 3.0;
  if (v7 / 3.0 == 0.0)
    goto LABEL_9;
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  v11 = *((_QWORD *)v3 + 1);
  result = (double *)(v11 + 8);
  if (__OFADD__(v11, 8))
  {
    __break(1u);
  }
  else if (*((_QWORD *)v3 + 2) >= (uint64_t)result)
  {
    *((_QWORD *)v3 + 1) = result;
    *(double *)(*(_QWORD *)v3 + v11) = v10;
    goto LABEL_9;
  }
  result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *result = v10;
LABEL_9:
  v12 = v8 + (v4 + v5) / 3.0;
  if (v12 == 0.0)
    goto LABEL_13;
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  v13 = *((_QWORD *)v3 + 1);
  result = (double *)(v13 + 8);
  if (__OFADD__(v13, 8))
  {
    __break(1u);
  }
  else if (*((_QWORD *)v3 + 2) >= (uint64_t)result)
  {
    *((_QWORD *)v3 + 1) = result;
    *(double *)(*(_QWORD *)v3 + v13) = v12;
    goto LABEL_13;
  }
  result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *result = v12;
LABEL_13:
  v14 = v10 + (v6 + v7) / 3.0;
  if (v14 == 0.0)
    return result;
  ProtobufEncoder.encodeVarint(_:)(0x21uLL);
  v15 = *((_QWORD *)v3 + 1);
  result = (double *)(v15 + 8);
  if (__OFADD__(v15, 8))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (*((_QWORD *)v3 + 2) < (uint64_t)result)
  {
LABEL_25:
    result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = v14;
    return result;
  }
  *((_QWORD *)v3 + 1) = result;
  *(double *)(*(_QWORD *)v3 + v15) = v14;
  return result;
}

unint64_t UnitCurve.CubicSolver.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  double *v17;
  unint64_t v18;
  double *v19;
  unint64_t v20;
  double *v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  float *v28;
  float v29;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = 0.0;
  if (v5 < v6)
  {
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v13 = v3[4];
        if (v5 < v13)
          goto LABEL_15;
        if (v13 < v5)
          goto LABEL_71;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_71:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      switch(result >> 3)
      {
        case 1uLL:
          v14 = result & 7;
          switch(v14)
          {
            case 5uLL:
              v22 = (float *)v3[1];
              v5 = (unint64_t)(v22 + 1);
              if (v6 < (unint64_t)(v22 + 1))
                goto LABEL_71;
              v23 = *v22;
              v3[1] = v5;
              v10 = v23;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
                JUMPOUT(0x234C44FA8);
              }
              v15 = (double *)v3[1];
              if (v6 < (unint64_t)v15 + result)
                goto LABEL_71;
              v3[3] = 9;
              v3[4] = (char *)v15 + result;
              break;
            case 1uLL:
              v15 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1))
            goto LABEL_71;
          v10 = *v15;
          goto LABEL_7;
        case 2uLL:
          v16 = result & 7;
          switch(v16)
          {
            case 5uLL:
              v24 = (float *)v3[1];
              v5 = (unint64_t)(v24 + 1);
              if (v6 < (unint64_t)(v24 + 1))
                goto LABEL_71;
              v25 = *v24;
              v3[1] = v5;
              v9 = v25;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_74;
              v17 = (double *)v3[1];
              if (v6 < (unint64_t)v17 + result)
                goto LABEL_71;
              v3[3] = 17;
              v3[4] = (char *)v17 + result;
              break;
            case 1uLL:
              v17 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1))
            goto LABEL_71;
          v9 = *v17;
          goto LABEL_7;
        case 3uLL:
          v18 = result & 7;
          switch(v18)
          {
            case 5uLL:
              v26 = (float *)v3[1];
              v5 = (unint64_t)(v26 + 1);
              if (v6 < (unint64_t)(v26 + 1))
                goto LABEL_71;
              v27 = *v26;
              v3[1] = v5;
              v8 = v27;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_75;
              v19 = (double *)v3[1];
              if (v6 < (unint64_t)v19 + result)
                goto LABEL_71;
              v3[3] = 25;
              v3[4] = (char *)v19 + result;
              break;
            case 1uLL:
              v19 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          v5 = (unint64_t)(v19 + 1);
          if (v6 < (unint64_t)(v19 + 1))
            goto LABEL_71;
          v8 = *v19;
          goto LABEL_7;
        case 4uLL:
          v20 = result & 7;
          if (v20 == 5)
          {
            v28 = (float *)v3[1];
            v5 = (unint64_t)(v28 + 1);
            if (v6 < (unint64_t)(v28 + 1))
              goto LABEL_71;
            v29 = *v28;
            v3[1] = v5;
            v7 = v29;
          }
          else
          {
            if (v20 == 2)
            {
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_76;
              v21 = (double *)v3[1];
              if (v6 < (unint64_t)v21 + result)
                goto LABEL_71;
              v3[3] = 33;
              v3[4] = (char *)v21 + result;
            }
            else
            {
              if (v20 != 1)
                goto LABEL_71;
              v21 = (double *)v3[1];
            }
            v5 = (unint64_t)(v21 + 1);
            if (v6 < (unint64_t)(v21 + 1))
              goto LABEL_71;
            v7 = *v21;
LABEL_7:
            v3[1] = v5;
          }
LABEL_8:
          v6 = v3[2];
          if (v5 >= v6)
            goto LABEL_4;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_77;
              v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5)
                goto LABEL_7;
              goto LABEL_71;
            case 5uLL:
              v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_71;
          }
      }
    }
  }
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
LABEL_4:
  v3[3] = 0;
  v11 = (v8 - v10) * 3.0 - v10 * 3.0;
  v12 = (v7 - v9) * 3.0 - v9 * 3.0;
  *a2 = 1.0 - v10 * 3.0 - v11;
  a2[1] = v11;
  a2[2] = v10 * 3.0;
  a2[3] = 1.0 - v9 * 3.0 - v12;
  a2[4] = v12;
  a2[5] = v9 * 3.0;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance UnitCurve.CubicSolver(double *a1)
{
  return UnitCurve.CubicSolver.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance UnitCurve.CubicSolver@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return UnitCurve.CubicSolver.init(from:)(a1, a2);
}

uint64_t UnitCurve.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v12(v10, a1, a2, v8);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  BinaryFloatingPoint.init<A>(_:)();
  v20 = v22;
  v14 = (int *)type metadata accessor for BezierTimingFunction(0, a2, a3, v13);
  ((void (*)(char *, uint64_t, uint64_t))v12)(v10, a1 + v14[9], a2);
  BinaryFloatingPoint.init<A>(_:)();
  v19 = v21;
  ((void (*)(char *, uint64_t, uint64_t))v12)(v10, a1 + v14[10], a2);
  BinaryFloatingPoint.init<A>(_:)();
  v15 = v22;
  ((void (*)(char *, uint64_t, uint64_t))v12)(v10, a1 + v14[11], a2);
  BinaryFloatingPoint.init<A>(_:)();
  result = (*(uint64_t (**)(uint64_t, int *))(*((_QWORD *)v14 - 1) + 8))(a1, v14);
  v17 = v21;
  v18 = v19;
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v18;
  *(_QWORD *)(a4 + 16) = v15;
  *(_QWORD *)(a4 + 24) = v17;
  *(_BYTE *)(a4 + 32) = 0;
  return result;
}

double UnitCurveAnimation.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void UnitCurveAnimation.duration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*UnitCurveAnimation.duration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 UnitCurveAnimation.curve.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)(v1 + 8);
  v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 UnitCurveAnimation.curve.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v4;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*UnitCurveAnimation.curve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 UnitCurveAnimation.init(curve:duration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3;
  __n128 result;
  __int128 v5;

  v3 = *(_BYTE *)(a1 + 32);
  *(double *)a2 = a3;
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 40) = v3;
  return result;
}

void UnitCurveAnimation.animate<A>(value:time:context:)(float64x2_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  double *v5;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;

  if (a2 == MEMORY[0x24BEE13C8])
  {
    v15 = *v5 <= 0.0 || *v5 < a5;
    v16 = 0.0;
    if (!v15)
    {
      v18 = a5 / *v5;
      if (v18 > 1.0)
        v18 = 1.0;
      if (v18 <= 0.0)
        v18 = 0.0;
      v17 = a1->f64[0];
      v16 = v17 * UnitCurve.value(at:)(v18);
    }
    *(double *)a4 = v16;
    *(_BYTE *)(a4 + 8) = v15;
  }
  else
  {
    v11 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    v12 = *v5;
    if (v11 == a2)
    {
      v19 = v12 <= 0.0 || v12 < a5;
      v20 = 0uLL;
      v21 = 0uLL;
      if (!v19)
      {
        v22 = a5 / v12;
        if (v22 > 1.0)
          v22 = 1.0;
        if (v22 <= 0.0)
          v22 = 0.0;
        v24 = a1[1];
        v25 = *a1;
        v23 = UnitCurve.value(at:)(v22);
        v20 = vmulq_n_f64(v25, v23);
        v21 = vmulq_n_f64(v24, v23);
      }
      *(float64x2_t *)a4 = v20;
      *(float64x2_t *)(a4 + 16) = v21;
      *(_BYTE *)(a4 + 32) = v19;
    }
    else if (v12 < a5 || v12 <= 0.0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
    }
    else
    {
      v13 = a5 / v12;
      if (v13 > 1.0)
        v13 = 1.0;
      if (v13 <= 0.0)
        v13 = 0.0;
      v14 = UnitCurve.value(at:)(v13);
      VectorArithmetic.scaled(by:)(a2, a3, a4, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 0, 1, a2);
    }
  }
}

uint64_t UnitCurveAnimation.velocity<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  double v12;
  char v13;
  double v14;
  __int128 v15;
  double v16;
  _OWORD v18[2];
  char v19;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(double *)v4;
  if (*(double *)v4 < v9 || v12 <= 0.0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a4, 1, 1, a2);
  v13 = *(_BYTE *)(v4 + 40);
  v14 = v9 / v12;
  if (v14 > 1.0)
    v14 = 1.0;
  v15 = *(_OWORD *)(v4 + 24);
  if (v14 <= 0.0)
    v14 = 0.0;
  v18[0] = *(_OWORD *)(v4 + 8);
  v18[1] = v15;
  v19 = v13;
  v16 = UnitCurve.velocity(at:)(v14);
  VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v11, 1.0 / v12);
  VectorArithmetic.scaled(by:)(a2, a3, a4, v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a4, 0, 1, a2);
}

void UnitCurveAnimation.function.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  BOOL v11;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v6 = v4 | v3;
    v7 = v6 | v2 | v5;
    v8 = v6 | v5;
    if (v8)
      v9 = 0;
    else
      v9 = v2 == 2;
    if (v9)
      v10 = 2;
    else
      v10 = 3;
    v11 = v2 == 1 && v8 == 0;
    v5 = 0;
    if (v11)
      v10 = 1;
    v9 = v7 == 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    if (v9)
    {
      v5 = 0;
      v10 = 0;
    }
  }
  else
  {
    v10 = 4;
  }
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v10;
}

void UnitCurveAnimation.hash(into:)()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  int v5;
  Swift::UInt64 v6;
  uint64_t v7;
  Swift::UInt v9;

  v1 = *(double *)(v0 + 8);
  v2 = *(double *)(v0 + 16);
  v3 = *(double *)(v0 + 24);
  v4 = *(double *)(v0 + 32);
  v5 = *(unsigned __int8 *)(v0 + 40);
  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)v0;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if (v5 == 1)
  {
    if (*(_QWORD *)&v3 | *(_QWORD *)&v2 | *(_QWORD *)&v1 | *(_QWORD *)&v4)
    {
      v7 = *(_QWORD *)&v3 | *(_QWORD *)&v2 | *(_QWORD *)&v4;
      if (*(_QWORD *)&v1 == 1 && v7 == 0)
      {
        v9 = 1;
      }
      else if (*(_QWORD *)&v1 != 2 || v7)
      {
        v9 = 3;
      }
      else
      {
        v9 = 2;
      }
    }
    else
    {
      v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
  else
  {
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v1, v2);
    UnitPoint.hash(into:)(v3, v4);
  }
}

Swift::Int UnitCurveAnimation.hashValue.getter()
{
  Hasher.init(_seed:)();
  UnitCurveAnimation.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for InternalCustomAnimation.function.getter in conformance UnitCurveAnimation(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  BOOL v11;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v6 = v4 | v3;
    v7 = v6 | v2 | v5;
    v8 = v6 | v5;
    if (v8)
      v9 = 0;
    else
      v9 = v2 == 2;
    if (v9)
      v10 = 2;
    else
      v10 = 3;
    v11 = v2 == 1 && v8 == 0;
    v5 = 0;
    if (v11)
      v10 = 1;
    v9 = v7 == 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    if (v9)
    {
      v5 = 0;
      v10 = 0;
    }
  }
  else
  {
    v10 = 4;
  }
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v10;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitCurveAnimation()
{
  Hasher.init(_seed:)();
  UnitCurveAnimation.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitCurveAnimation()
{
  Hasher.init(_seed:)();
  UnitCurveAnimation.hash(into:)();
  return Hasher._finalize()();
}

BOOL specialized static UnitCurve.CubicSolver.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0])
  {
    return a1[2].f64[1] == a2[2].f64[1];
  }
  return result;
}

uint64_t specialized static UnitCurveAnimation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  BOOL v9;
  uint64_t result;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(float64x2_t *)(a1 + 24);
  v3 = *(float64x2_t *)(a1 + 8);
  v4 = *(float64x2_t *)(a2 + 24);
  v5 = *(float64x2_t *)(a2 + 8);
  if (*(_BYTE *)(a1 + 40) != 1)
    return (*(_BYTE *)(a2 + 40) & 1) == 0
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v3, v5), (int32x4_t)vceqq_f64(v2, v4))), 0xFuLL))) & 1) != 0;
  v6 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v2.f64[0], 0), (int8x16_t)v3);
  if (!(v6.i64[1] | *(_QWORD *)&v3.f64[0] | *(_QWORD *)&v2.f64[1]))
    return *(_BYTE *)(a2 + 40)
        && !(vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4, 0), *(int8x16_t *)&v5).i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1]);
  v7 = v6.i64[1] | *(_QWORD *)&v2.f64[1];
  if (*(_QWORD *)&v3.f64[0] == 1 && !v7)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
    v8 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    v9 = v8.i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1] && *(_QWORD *)&v5.f64[0] == 1;
    return v9 && (v8.i64[1] | *(_QWORD *)&v4.f64[1]) == 0;
  }
  if (*(_QWORD *)&v3.f64[0] == 2 && !v7)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
    v12 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    if (!(v12.i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1]))
      return 0;
    v13 = v12.i64[1] | *(_QWORD *)&v4.f64[1];
    if (*(_QWORD *)&v5.f64[0] == 1 && !v13)
      return 0;
    return *(_QWORD *)&v5.f64[0] == 2 && !v13;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) == 0)
    return 0;
  v14 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
  if (!(v14.i64[1] | *(_QWORD *)&v5.f64[0] | *(_QWORD *)&v4.f64[1]))
    return 0;
  result = 1;
  if ((unint64_t)(*(_QWORD *)&v5.f64[0] - 1) <= 1 && !(v14.i64[1] | *(_QWORD *)&v4.f64[1]))
    return 0;
  return result;
}

BOOL specialized static UnitCurve.Function.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  if (*(_BYTE *)(a1 + 32) != 1)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
      return 0;
    if (v2 == v6 && v3 == v7)
      return v4 == v8 && v5 == v9;
    return 0;
  }
  v10 = *(_QWORD *)&v5 | *(_QWORD *)&v3;
  if (!(v10 | *(_QWORD *)&v2 | *(_QWORD *)&v4))
  {
    if (*(_BYTE *)(a2 + 32))
      return (*(_QWORD *)&v9 | *(_QWORD *)&v7 | *(_QWORD *)&v6 | *(_QWORD *)&v8) == 0;
    return 0;
  }
  v11 = v10 | *(_QWORD *)&v4;
  if (*(_QWORD *)&v2 == 1 && v11 == 0)
  {
    if (*(_BYTE *)(a2 + 32))
    {
      v19 = *(_QWORD *)&v9 | *(_QWORD *)&v7;
      if (v19 | *(_QWORD *)&v6 | *(_QWORD *)&v8)
      {
        if (*(_QWORD *)&v6 == 1 && !(v19 | *(_QWORD *)&v8))
          return 1;
      }
    }
    return 0;
  }
  if (*(_QWORD *)&v2 != 2 || v11 != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v14 = *(_QWORD *)&v9 | *(_QWORD *)&v7;
      if (v14 | *(_QWORD *)&v6 | *(_QWORD *)&v8)
      {
        v15 = v14 | *(_QWORD *)&v8;
        if (*(_QWORD *)&v6 != 1 || v15)
          return *(_QWORD *)&v6 != 2 || v15 != 0;
      }
    }
    return 0;
  }
  if (!*(_BYTE *)(a2 + 32))
    return 0;
  v20 = *(_QWORD *)&v9 | *(_QWORD *)&v7;
  if (!(v20 | *(_QWORD *)&v6 | *(_QWORD *)&v8))
    return 0;
  v21 = v20 | *(_QWORD *)&v8;
  if (*(_QWORD *)&v6 == 1 && !v21)
    return 0;
  return *(_QWORD *)&v6 == 2 && v21 == 0;
}

unint64_t lazy protocol witness table accessor for type UnitCurve.Function and conformance UnitCurve.Function()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitCurve.Function and conformance UnitCurve.Function;
  if (!lazy protocol witness table cache variable for type UnitCurve.Function and conformance UnitCurve.Function)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitCurve.Function, &type metadata for UnitCurve.Function);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurve.Function and conformance UnitCurve.Function);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitCurve and conformance UnitCurve()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitCurve and conformance UnitCurve;
  if (!lazy protocol witness table cache variable for type UnitCurve and conformance UnitCurve)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitCurve, &type metadata for UnitCurve);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurve and conformance UnitCurve);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver;
  if (!lazy protocol witness table cache variable for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitCurve.CubicSolver, &type metadata for UnitCurve.CubicSolver);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for UnitCurveAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitCurveAnimation, &type metadata for UnitCurveAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitCurveAnimation, &type metadata for UnitCurveAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitCurveAnimation, &type metadata for UnitCurveAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitCurve()
{
  return &type metadata for UnitCurve;
}

uint64_t storeEnumTagSinglePayload for UnitCurve.Function(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for UnitCurve.Function(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for UnitCurve.Function(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    *(_BYTE *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitCurve.Function()
{
  return &type metadata for UnitCurve.Function;
}

ValueMetadata *type metadata accessor for UnitCurve.CubicSolver()
{
  return &type metadata for UnitCurve.CubicSolver;
}

ValueMetadata *type metadata accessor for UnitCurveAnimation()
{
  return &type metadata for UnitCurveAnimation;
}

uint64_t static MatchedGeometryProperties.position.getter()
{
  return 1;
}

uint64_t static MatchedGeometryProperties.size.getter()
{
  return 2;
}

uint64_t static MatchedGeometryProperties.frame.getter()
{
  return 3;
}

uint64_t static MatchedGeometryProperties.clipRect.getter()
{
  return 4;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MatchedGeometryProperties@<X0>(_DWORD *a1@<X8>)
{
  int v2;
  uint64_t result;

  v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t View.matchedGeometryEffect<A>(id:in:properties:anchor:isSource:)(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  _BYTE *v25;
  double *v26;
  _BYTE v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a7;
  v30 = a5;
  v29 = a4;
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = &v28[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for _MatchedGeometryEffect(0, v19, v20, v18);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = &v28[-v24];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v15 + 16))(v17, a1, a6, v23);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v25, v17, a6);
  *(_QWORD *)&v25[*(int *)(v21 + 36)] = a2;
  v26 = (double *)&v25[*(int *)(v21 + 40)];
  *(_DWORD *)v26 = a3;
  v26[1] = a8;
  v26[2] = a9;
  *((_BYTE *)v26 + 24) = v29;
  View.modifier<A>(_:)(v25, v30, v21, v31);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v22 + 8))(v25, v21);
}

uint64_t type metadata accessor for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MatchedGeometryEffect);
}

uint64_t _MatchedGeometryEffect.init(id:namespace:properties:anchor:isSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  result = type metadata accessor for _MatchedGeometryEffect(0, a5, a6, v17);
  *(_QWORD *)(a7 + *(int *)(result + 36)) = a2;
  v19 = a7 + *(int *)(result + 40);
  *(_DWORD *)v19 = a3;
  *(double *)(v19 + 8) = a8;
  *(double *)(v19 + 16) = a9;
  *(_BYTE *)(v19 + 24) = a4;
  return result;
}

void View.matchedGeometryEffect<A, B>(id:in:clipShape:properties:anchor:isSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v10);
  v13 = type metadata accessor for _MatchedGeometryEffect(0, v12, a10, v11);
  MEMORY[0x24BDAC7A8](v13);
  type metadata accessor for MatchedGeometryEffect2();
}

void sub_234C46208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = MEMORY[0x24BDAC7A8](a1);
  v21 = (char *)&a9 - v20;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v14 + 16))(v15, *(_QWORD *)(v16 - 208), v12, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v10, v15, v12);
  *(_QWORD *)(v10 + *(int *)(v9 + 36)) = *(_QWORD *)(v16 - 192);
  v22 = v10 + *(int *)(v9 + 40);
  *(_DWORD *)v22 = *(_DWORD *)(v16 - 184);
  *(_QWORD *)(v22 + 8) = v18;
  *(_QWORD *)(v22 + 16) = v17;
  *(_BYTE *)(v22 + 24) = *(_DWORD *)(v16 - 180);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 200) + 16))(v13, *(_QWORD *)(v16 - 176), v11);
  MatchedGeometryEffect2.init(base:clipShape:)(v10, v12, v11, *(_QWORD *)(v16 - 224), (uint64_t)v21);
}

uint64_t sub_234C462B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  View.modifier<A>(_:)(v0, *(_QWORD *)(v3 - 152), v2, *(_QWORD *)(v3 - 160));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void type metadata accessor for MatchedGeometryEffect2()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void MatchedGeometryEffect2.init(base:clipShape:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for _MatchedGeometryEffect(0, a2, a4, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
  type metadata accessor for MatchedGeometryEffect2();
}

uint64_t sub_234C46380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

Swift::Void __swiftcall _ViewInputs.makeRootMatchedGeometryScope()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v1 = *(_QWORD *)v0;
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = specialized find<A>(_:key:)(v1);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    if (v8)
      return;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
  }
  v9 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_DWORD *)(v0 + 80);
  type metadata accessor for MatchedGeometryScope();
  v14 = swift_allocObject();
  v15 = (id)AGSubgraphGetCurrent();
  if (v15)
  {
    v16 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v14 + 112) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v14 + 120) = v16;
    *(_QWORD *)(v14 + 16) = v15;
    *(_QWORD *)(v14 + 24) = v1;
    *(_DWORD *)(v14 + 32) = v2;
    *(_QWORD *)(v14 + 40) = v3;
    *(_QWORD *)(v14 + 48) = v4;
    *(_QWORD *)(v14 + 56) = v5;
    *(_QWORD *)(v14 + 64) = v6;
    *(_QWORD *)(v14 + 72) = v9;
    *(_QWORD *)(v14 + 80) = v10;
    *(_QWORD *)(v14 + 88) = v11;
    *(_QWORD *)(v14 + 96) = v12;
    *(_DWORD *)(v14 + 104) = v13;
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)v0, v14);
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t _MatchedGeometryEffect.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _MatchedGeometryEffect.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_MatchedGeometryEffect.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _MatchedGeometryEffect.namespace.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t _MatchedGeometryEffect.namespace.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_MatchedGeometryEffect.namespace.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _MatchedGeometryEffect.args.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 40) + 8);
}

uint64_t _MatchedGeometryEffect.args.setter(uint64_t result, char a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = v5 + *(int *)(a3 + 40);
  *(_DWORD *)v6 = result;
  *(double *)(v6 + 8) = a4;
  *(double *)(v6 + 16) = a5;
  *(_BYTE *)(v6 + 24) = a2;
  return result;
}

uint64_t (*_MatchedGeometryEffect.args.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _MatchedGeometryEffect.qualifiedID.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v8, v2, v5, v6);
  v12 = *(_QWORD *)(v2 + *(int *)(a1 + 36));
  return Pair.init(_:_:)((uint64_t)v8, (uint64_t)&v12, v5, (uint64_t)&type metadata for Namespace.ID, a2);
}

uint64_t static _MatchedGeometryEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unsigned int v28;

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 20);
  v16 = *MEMORY[0x24BE096C0];
  v28 = *a1;
  v20 = v12;
  v21 = v13;
  v22 = v14;
  v17 = *(_OWORD *)(a2 + 5);
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v17;
  v25 = *(_OWORD *)(a2 + 7);
  v26 = a2[9];
  v27 = v15;
  v18 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  return static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(&v28, (uint64_t)&v20, v16, a3, a4, a5, (uint64_t)&type metadata for Rectangle, a6, a7, v18);
}

uint64_t static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  __int128 v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  unsigned int v54;
  uint64_t KeyPath;
  int v56;
  __int128 v57;
  uint64_t v58;
  unsigned __int8 v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  __int16 v68;
  unint64_t v69;
  void (*v70)(uint64_t *__return_ptr, uint64_t, __int128 *);
  Swift::UInt32 v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  unsigned __int8 v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t result;
  void (*v115)(__int128 *, _QWORD);
  _BYTE v116[16];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  __int128 v121;
  __int128 v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  __int128 v136;
  unsigned int OffsetAttribute2;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t *__return_ptr, uint64_t, __int128 *);
  __int128 v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  unsigned __int8 v157;
  unsigned int v158;
  unsigned __int8 v159;
  unsigned int v160;
  unsigned __int8 v161;
  unsigned int v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _OWORD v167[2];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[36];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _QWORD v175[4];

  v142 = a5;
  v143 = (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))a4;
  v135 = a3;
  v146 = a9;
  v145 = a10;
  v175[1] = *MEMORY[0x24BDAC8D0];
  v14 = *a1;
  v15 = *(_OWORD *)(a2 + 48);
  v170 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v171 = v15;
  *(_OWORD *)&v171[16] = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v171[32] = *(_DWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 16);
  v168 = *(_OWORD *)a2;
  v169 = v16;
  v17 = v15;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4);
  v19 = v18;
  v20 = *(_QWORD *)(v17 + 16);
  if (v20)
  {
    v21 = (uint64_t *)(v17 + 32);
    v22 = v20 - 1;
    do
    {
      v23 = *v21;
      v21 += 2;
      v24 = v23 == v18;
    }
    while (v23 != v18 && v22-- != 0);
  }
  else
  {
    v24 = 0;
  }
  closure #1 in static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(1, a6, a7, a8);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v26 = *(_OWORD *)(a2 + 32);
  v173 = *(_OWORD *)(a2 + 16);
  v174 = v26;
  v172 = *(_OWORD *)a2;
  v27 = DWORD1(v26);
  if (!v24 && (BYTE4(v26) & 0x20) == 0)
    goto LABEL_12;
  v29 = v172;
  v175[0] = v172;
  outlined retain of _ViewInputs((uint64_t)&v168);
  outlined retain of _GraphInputs((uint64_t)&v172);
  outlined retain of ViewTransform((uint64_t)v175);
  v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    outlined release of ViewTransform((uint64_t)v175);
    outlined release of _GraphInputs((uint64_t)&v172);
    outlined release of _ViewInputs((uint64_t)&v168);
    v28 = 0;
    v133 = 0;
    v147 = 1;
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v30 + 72);
  swift_retain();
  outlined release of ViewTransform((uint64_t)v175);
  outlined release of _GraphInputs((uint64_t)&v172);
  v32 = outlined release of _ViewInputs((uint64_t)&v168);
  if (v31)
  {
    v151 = &v119;
    v33 = *MEMORY[0x24BE096C0];
    v152 = 1;
    *(_QWORD *)&v163 = __PAIR64__(OffsetAttribute2, v14);
    *((int32x2_t *)&v163 + 1) = vrev64_s32(*(int32x2_t *)((char *)&v173 + 8));
    LODWORD(v164) = *(_DWORD *)&v171[24];
    *(int32x2_t *)((char *)&v164 + 4) = vrev64_s32(*(int32x2_t *)&v171[12]);
    v165 = v31;
    LOBYTE(v166) = 1;
    *(_QWORD *)((char *)&v166 + 4) = v33;
    BYTE12(v166) = 0;
    MEMORY[0x24BDAC7A8](v32);
    v117 = type metadata accessor for MatchedSharedFrame(0, a6, a8, v34);
    v118 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedSharedFrame<A>, v117);
    type metadata accessor for Attribute<(ViewFrame?, AnyOptionalAttribute)>();
    v36 = v35;
    swift_retain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v163, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v116, v117, MEMORY[0x24BEE4078], v36, MEMORY[0x24BEE40A8], v37);
    v133 = 0;
    swift_release();
    v28 = v155;
    AGGraphSetFlags();
    swift_release();
    v147 = 0;
  }
  else
  {
LABEL_12:
    v147 = 1;
    v28 = 0;
    v133 = 0;
  }
LABEL_17:
  LODWORD(v141) = DWORD2(v168);
  v150 = v169;
  v151 = (uint64_t *)v168;
  v38 = *((_QWORD *)&v169 + 1);
  v39 = v170;
  v148 = *(_QWORD *)v171;
  v149 = *((_QWORD *)&v170 + 1);
  LODWORD(v140) = *(_DWORD *)&v171[8];
  v40 = *(_DWORD *)&v171[20];
  v41 = *(_DWORD *)&v171[24];
  v42 = *(_QWORD *)&v171[28];
  v134 = a7;
  v131 = *(_DWORD *)&v171[20];
  v132 = v28;
  LODWORD(v144) = v27;
  LODWORD(v139) = *(_DWORD *)&v171[12];
  if ((v27 & 0x20) == 0 || (_DWORD)v147)
  {
    LODWORD(v138) = *(_DWORD *)&v171[16];
    outlined retain of _ViewInputs((uint64_t)&v168);
    LODWORD(v136) = 0;
    v43 = 1;
    LODWORD(v44) = v40;
    v45 = v27;
    v46 = v141;
    goto LABEL_32;
  }
  v126 = DWORD1(v170);
  v47 = v174;
  v48 = *MEMORY[0x24BE096C0];
  *(_QWORD *)&v163 = __PAIR64__(OffsetAttribute2, v28);
  *((_QWORD *)&v163 + 1) = __PAIR64__(*(unsigned int *)&v171[16], *(unsigned int *)&v171[24]);
  *(_QWORD *)&v164 = __PAIR64__(v48, *(unsigned int *)&v171[12]);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs((uint64_t)&v168);
  lazy protocol witness table accessor for type MatchedFrame and conformance MatchedFrame();
  v49 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v138) = AGGraphCreateOffsetAttribute2();
  LODWORD(v136) = v49;
  v41 = AGGraphCreateOffsetAttribute2();
  v125 = v47 | 0x18;
  v50 = v173;
  swift_beginAccess();
  v129 = v169;
  v130 = v168;
  v123 = DWORD2(v169);
  v124 = DWORD2(v168);
  v51 = v170;
  v127 = *(_QWORD *)v171;
  v128 = *((_QWORD *)&v170 + 1);
  v52 = *(_QWORD *)&v171[8];
  *(_QWORD *)&v53 = *(_QWORD *)&v171[16];
  v122 = v53;
  *(_QWORD *)&v53 = *(_QWORD *)&v171[24];
  v121 = v53;
  v165 = v170;
  v166 = *(_OWORD *)v171;
  v167[0] = *(_OWORD *)&v171[16];
  v120 = *(_DWORD *)&v171[32];
  LODWORD(v167[1]) = *(_DWORD *)&v171[32];
  v163 = v168;
  v164 = v169;
  outlined retain of _ViewInputs((uint64_t)&v168);
  v54 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v56 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v50 + 81) & 1) == 0
    && (_DWORD)v122 == *(_DWORD *)(v50 + 32)
    && (_DWORD)v121 == *(_DWORD *)(v50 + 36)
    && v56 == *(_DWORD *)(v50 + 40)
    && v124 == *(_DWORD *)(v50 + 44)
    && v54 == *(_DWORD *)(v50 + 48)
    && v123 == *(_DWORD *)(v50 + 52))
  {
    v46 = v141;
    if ((*(_BYTE *)(v50 + 64) & 1) == 0)
    {
      LODWORD(v44) = *(_DWORD *)(v50 + 60);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  *(_QWORD *)&v163 = v130;
  DWORD2(v163) = v124;
  *(_QWORD *)&v164 = v129;
  *((_QWORD *)&v164 + 1) = __PAIR64__(v54, v123);
  *(_QWORD *)&v165 = v51;
  v124 = v56;
  *((_QWORD *)&v165 + 1) = v128;
  *(_QWORD *)&v166 = v127;
  *((_QWORD *)&v166 + 1) = v52;
  *(_QWORD *)&v167[0] = v122;
  *((_QWORD *)&v167[0] + 1) = v121;
  LODWORD(v167[1]) = v120;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v163, v124, (uint64_t)&v155);
  v57 = v156;
  v58 = v157;
  v59 = v161;
  v60 = v157 | ((unint64_t)v158 << 32);
  v61 = v159 | ((unint64_t)v160 << 32);
  *(_OWORD *)(v50 + 32) = v155;
  *(_OWORD *)(v50 + 48) = v57;
  *(_QWORD *)(v50 + 64) = v60;
  *(_QWORD *)(v50 + 72) = v61;
  *(_WORD *)(v50 + 80) = v59;
  v46 = v141;
  if (v58 == 1)
  {
LABEL_30:
    LODWORD(v44) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v50 + 60) = v44;
    *(_BYTE *)(v50 + 64) = 0;
    goto LABEL_31;
  }
  v44 = HIDWORD(*((_QWORD *)&v57 + 1));
LABEL_31:
  v62 = v126;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v43 = 0;
  v45 = v62 | 2;
  v39 = v125;
LABEL_32:
  *(_QWORD *)&v163 = v151;
  DWORD2(v163) = v46;
  *(_QWORD *)&v164 = v150;
  *((_QWORD *)&v164 + 1) = v38;
  *(_QWORD *)&v165 = __PAIR64__(v45, v39);
  *((_QWORD *)&v165 + 1) = v149;
  *(_QWORD *)&v166 = v148;
  *((_QWORD *)&v166 + 1) = __PAIR64__(v139, v140);
  *(_QWORD *)&v167[0] = __PAIR64__(v44, v138);
  DWORD2(v167[0]) = v41;
  *(_QWORD *)((char *)v167 + 12) = v42;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v63 = swift_bridgeObjectRetain();
  v143(&v153, v63, &v163);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v64 = swift_release();
  if ((v43 & 1) == 0)
  {
    MEMORY[0x24BDAC7A8](v64);
    MEMORY[0x24BDAC7A8](v65);
    v117 = (uint64_t)partial apply for closure #4 in static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:);
    v118 = v66;
    AGGraphMutateAttribute();
  }
  v67 = v146;
  v68 = v144;
  if (((v147 | !v24) & 1) != 0)
    goto LABEL_66;
  *(_QWORD *)&v163 = v153;
  DWORD2(v163) = v154;
  v69 = PreferencesOutputs.subscript.getter(v19);
  if ((v69 & 0x100000000) != 0)
    goto LABEL_66;
  v70 = (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v69;
  v71 = ++lastIdentity;
  if ((v68 & 0x100) == 0)
  {
LABEL_37:
    v72 = v173;
    swift_beginAccess();
    LODWORD(v147) = v71;
    if ((v68 & 0x20) == 0)
    {
      *(_QWORD *)&v144 = *(unsigned int *)&v171[16];
      v87 = *(_DWORD *)&v171[24];
      v88 = v135;
LABEL_62:
      swift_endAccess();
      v103 = v172;
      *(_QWORD *)&v155 = v172;
      outlined retain of _ViewInputs((uint64_t)&v168);
      outlined retain of _GraphInputs((uint64_t)&v172);
      outlined retain of ViewTransform((uint64_t)&v155);
      v104 = specialized find<A>(_:key:)(v103);
      v67 = v146;
      v105 = v134;
      if (v104)
        v106 = *(_BYTE *)(v104 + 72);
      else
        v106 = 0;
      v107 = *(_DWORD *)&v171[12];
      outlined release of ViewTransform((uint64_t)&v155);
      outlined release of _GraphInputs((uint64_t)&v172);
      v108 = outlined release of _ViewInputs((uint64_t)&v168);
      *(_QWORD *)&v163 = __PAIR64__(v132, v147);
      *((_QWORD *)&v163 + 1) = __PAIR64__(v70, OffsetAttribute2);
      *(_QWORD *)&v164 = __PAIR64__(v87, v144);
      *((_QWORD *)&v164 + 1) = __PAIR64__(v131, v107);
      LODWORD(v165) = v88;
      BYTE4(v165) = v106;
      MEMORY[0x24BDAC7A8](v108);
      v110 = type metadata accessor for MatchedDisplayList(0, v105, v145, v109);
      v117 = v110;
      v118 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedDisplayList<A>, v110);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v163, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v116, v110, MEMORY[0x24BEE4078], v111, MEMORY[0x24BEE40A8], v112);
      LOBYTE(v163) = 0;
      PreferencesOutputs.subscript.setter(v162, v19, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v113);
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      *v67 = v153;
      v67[1] = v154;
      return result;
    }
    v142 = v168;
    v143 = v70;
    v74 = DWORD2(v168);
    v75 = DWORD2(v169);
    v140 = *((_QWORD *)&v170 + 1);
    v76 = v170;
    v141 = v169;
    v77 = *(_QWORD *)&v171[8];
    v139 = *(_QWORD *)v171;
    *(_QWORD *)&v73 = *(_QWORD *)&v171[16];
    v144 = v73;
    *(_QWORD *)&v73 = *(_QWORD *)&v171[24];
    v138 = v73;
    v78 = *(_DWORD *)&v171[32];
    v165 = v170;
    v166 = *(_OWORD *)v171;
    v167[0] = *(_OWORD *)&v171[16];
    LODWORD(v167[1]) = *(_DWORD *)&v171[32];
    v163 = v168;
    v164 = v169;
    outlined retain of _ViewInputs((uint64_t)&v168);
    v79 = _ViewInputs.geometryTransaction()();
    v80 = swift_getKeyPath();
    v81 = specialized CachedEnvironment.attribute<A>(keyPath:)(v80);
    swift_release();
    if ((*(_BYTE *)(v72 + 81) & 1) == 0
      && (_DWORD)v144 == *(_DWORD *)(v72 + 32)
      && (_DWORD)v138 == *(_DWORD *)(v72 + 36)
      && v81 == *(_DWORD *)(v72 + 40)
      && v74 == *(_DWORD *)(v72 + 44)
      && v79 == *(_DWORD *)(v72 + 48)
      && v75 == *(_DWORD *)(v72 + 52))
    {
      if ((*(_BYTE *)(v72 + 64) & 1) == 0)
      {
        *(_QWORD *)&v144 = *(unsigned int *)(v72 + 60);
        goto LABEL_50;
      }
    }
    else
    {
      *(_QWORD *)&v163 = v142;
      DWORD2(v163) = v74;
      *(_QWORD *)&v164 = v141;
      *((_QWORD *)&v164 + 1) = __PAIR64__(v79, v75);
      *(_QWORD *)&v165 = v76;
      *((_QWORD *)&v165 + 1) = v140;
      *(_QWORD *)&v166 = v139;
      *((_QWORD *)&v166 + 1) = v77;
      *(_QWORD *)&v167[0] = v144;
      *((_QWORD *)&v167[0] + 1) = v138;
      LODWORD(v167[1]) = v78;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v163, v81, (uint64_t)&v155);
      v82 = v156;
      v83 = v157;
      v84 = v161;
      v85 = v157 | ((unint64_t)v158 << 32);
      v86 = v159 | ((unint64_t)v160 << 32);
      *(_OWORD *)(v72 + 32) = v155;
      *(_OWORD *)(v72 + 48) = v82;
      *(_QWORD *)(v72 + 64) = v85;
      *(_QWORD *)(v72 + 72) = v86;
      *(_WORD *)(v72 + 80) = v84;
      if (v83 != 1)
      {
        *(_QWORD *)&v144 = HIDWORD(*((_QWORD *)&v82 + 1));
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v89 = DWORD2(v168);
        v141 = v169;
        v142 = v168;
        v90 = DWORD2(v169);
        v91 = v170;
        v139 = *(_QWORD *)v171;
        v140 = *((_QWORD *)&v170 + 1);
        v92 = *(_QWORD *)&v171[8];
        *(_QWORD *)&v93 = *(_QWORD *)&v171[16];
        v138 = v93;
        *(_QWORD *)&v93 = *(_QWORD *)&v171[24];
        v136 = v93;
        v94 = *(_DWORD *)&v171[32];
        v165 = v170;
        v166 = *(_OWORD *)v171;
        v167[0] = *(_OWORD *)&v171[16];
        LODWORD(v167[1]) = *(_DWORD *)&v171[32];
        v163 = v168;
        v164 = v169;
        outlined retain of _ViewInputs((uint64_t)&v168);
        v95 = _ViewInputs.geometryTransaction()();
        v96 = swift_getKeyPath();
        v97 = specialized CachedEnvironment.attribute<A>(keyPath:)(v96);
        swift_release();
        if ((*(_BYTE *)(v72 + 81) & 1) == 0
          && (_DWORD)v138 == *(_DWORD *)(v72 + 32)
          && (_DWORD)v136 == *(_DWORD *)(v72 + 36)
          && v97 == *(_DWORD *)(v72 + 40)
          && v89 == *(_DWORD *)(v72 + 44)
          && v95 == *(_DWORD *)(v72 + 48)
          && v90 == *(_DWORD *)(v72 + 52))
        {
          v88 = v135;
          LODWORD(v70) = (_DWORD)v143;
          if ((*(_BYTE *)(v72 + 72) & 1) == 0)
          {
            v87 = *(_DWORD *)(v72 + 68);
            goto LABEL_61;
          }
        }
        else
        {
          *(_QWORD *)&v163 = v142;
          DWORD2(v163) = v89;
          *(_QWORD *)&v164 = v141;
          *((_QWORD *)&v164 + 1) = __PAIR64__(v95, v90);
          *(_QWORD *)&v165 = v91;
          *((_QWORD *)&v165 + 1) = v140;
          *(_QWORD *)&v166 = v139;
          *((_QWORD *)&v166 + 1) = v92;
          *(_QWORD *)&v167[0] = v138;
          *((_QWORD *)&v167[0] + 1) = v136;
          LODWORD(v167[1]) = v94;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v163, v97, (uint64_t)&v155);
          v87 = v158;
          v98 = v159;
          v99 = v161;
          v100 = v157 | ((unint64_t)v158 << 32);
          v101 = v159 | ((unint64_t)v160 << 32);
          v102 = v156;
          *(_OWORD *)(v72 + 32) = v155;
          *(_OWORD *)(v72 + 48) = v102;
          *(_QWORD *)(v72 + 64) = v100;
          *(_QWORD *)(v72 + 72) = v101;
          *(_WORD *)(v72 + 80) = v99;
          v88 = v135;
          LODWORD(v70) = (_DWORD)v143;
          if (v98 != 1)
            goto LABEL_61;
        }
        v87 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v72 + 68) = v87;
        *(_BYTE *)(v72 + 72) = 0;
LABEL_61:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_62;
      }
    }
    *(_QWORD *)&v144 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v72 + 60) = v144;
    *(_BYTE *)(v72 + 64) = 0;
    goto LABEL_50;
  }
  outlined retain of _ViewInputs((uint64_t)&v168);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v168);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    LODWORD(v155) = v71;
    v115 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v155);
    v115(&v163, 0);
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type MatchedGeometryProperties and conformance MatchedGeometryProperties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedGeometryProperties, &type metadata for MatchedGeometryProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedGeometryProperties, &type metadata for MatchedGeometryProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedGeometryProperties, &type metadata for MatchedGeometryProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedGeometryProperties, &type metadata for MatchedGeometryProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

uint64_t closure #1 in static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for _MatchedGeometryEffect(0, a2, a4, a4);
  v6 = a1 + *(int *)(v5 + 40);
  v12[2] = v5;
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  return v12[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _MatchedGeometryEffect<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static _MatchedGeometryEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

ValueMetadata *type metadata accessor for MatchedGeometryProperties()
{
  return &type metadata for MatchedGeometryProperties;
}

uint64_t type metadata completion function for _MatchedGeometryEffect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _MatchedGeometryEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 v13;
  _OWORD *v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (__int128 *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    v14 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(_OWORD *)((char *)v14 + 9) = *(__int128 *)((char *)v12 + 9);
    *v14 = v13;
  }
  else
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_OWORD *)((char *)v10 + 9);
  *v9 = *v10;
  *(_OWORD *)((char *)v9 + 9) = v11;
  return a1;
}

uint64_t assignWithCopy for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
  return a1;
}

uint64_t initializeWithTake for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_OWORD *)((char *)v10 + 9);
  *v9 = *v10;
  *(_OWORD *)((char *)v9 + 9) = v11;
  return a1;
}

uint64_t assignWithTake for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _MatchedGeometryEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 >= 0xFE)
      return (*(uint64_t (**)(void))(v4 + 48))();
    v14 = *(unsigned __int8 *)(((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 0x18);
    if (v14 >= 2)
      return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v8 = ((((v7 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 25;
  v9 = (a2 - v6 + 255) >> (8 * v8);
  if (v8 < 4)
    v10 = v9 + 1;
  else
    v10 = 2;
  if (v10 >= 0x10000)
    v11 = 4;
  else
    v11 = 2;
  if (v10 < 0x100)
    v11 = 1;
  if (v10 >= 2)
    v12 = v11;
  else
    v12 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234C47B38 + 4 * byte_23528F7D0[v12]))();
}

void storeEnumTagSinglePayload for _MatchedGeometryEffect(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_234C47CFC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234C47D84);
}

void sub_234C47D04(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234C47D0CLL);
  JUMPOUT(0x234C47D84);
}

void sub_234C47D58()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C47D84);
}

void sub_234C47D60()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C47D84);
}

uint64_t sub_234C47D68(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x234C47D74);
    *(_BYTE *)(((((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24) = a2 + 1;
LABEL_6:
    JUMPOUT(0x234C47D84);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void static MatchedGeometryEffect2._makeView(modifier:inputs:body:)()
{
  type metadata accessor for MatchedGeometryEffect2();
}

uint64_t sub_234C47E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  type metadata accessor for _GraphValue(0, a1, a3, a4);
  v30 = *(_OWORD *)(v5 + 40);
  v25 = *(_OWORD *)(v5 + 56);
  v15 = *(_QWORD *)(v5 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:), v6, (_DWORD *)(v14 - 116));
  *(_QWORD *)(v14 - 208) = v9;
  *(_DWORD *)(v14 - 200) = v10;
  *(_QWORD *)(v14 - 192) = v13;
  *(_DWORD *)(v14 - 184) = v8;
  *(_DWORD *)(v14 - 180) = v12;
  *(_DWORD *)(v14 - 176) = v4;
  *(_DWORD *)(v14 - 172) = v22;
  *(_QWORD *)(v14 - 168) = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8) + 48))(v14 - 116, v14 - 208, v6);
  *(_DWORD *)(v14 - 208) = v24;
  v17 = type metadata accessor for _MatchedGeometryEffect(0, v7, v23, v16);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:), v17, (_DWORD *)(v14 - 120));
  *(_QWORD *)(v14 - 208) = v21;
  *(_DWORD *)(v14 - 200) = v20;
  *(_QWORD *)(v14 - 192) = v13;
  *(_DWORD *)(v14 - 184) = v8;
  *(_DWORD *)(v14 - 180) = v12;
  *(_DWORD *)(v14 - 176) = v4;
  *(_DWORD *)(v14 - 172) = v22;
  v18 = v14 - 208;
  *(_OWORD *)(v18 + 40) = v30;
  *(_OWORD *)(v18 + 56) = v25;
  *(_QWORD *)(v14 - 136) = v15;
  *(_DWORD *)(v14 - 128) = v26;
  return static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)((unsigned int *)(v14 - 120), v14 - 208, *(unsigned int *)(v14 - 116), v28, v29, v7, v6, v23, v27, v11);
}

void closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)()
{
  type metadata accessor for MatchedGeometryEffect2();
}

uint64_t sub_234C47FA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 52);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v9;
}

void closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)()
{
  type metadata accessor for MatchedGeometryEffect2();
}

uint64_t sub_234C48044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v10[2] = a1;
  v11 = type metadata accessor for _MatchedGeometryEffect(0, v5, v4, a4);
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v10, v11, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  return v12;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MatchedGeometryEffect2<A, B>()
{
  static MatchedGeometryEffect2._makeView(modifier:inputs:body:)();
}

uint64_t MatchedGeometryScope.frame<A>(index:for:view:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  _OWORD *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t Value;
  char v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t Context;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  _DWORD v54[12];
  uint64_t v55;
  _BYTE v56[48];

  v8 = v7;
  v14 = a1;
  v15 = MEMORY[0x24BDAC7A8](a1);
  v17 = (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v18 + 16))(v17, v19, v20, v15);
  AnyHashable.init<A>(_:)();
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
LABEL_8:
    v52 = a5;
    a5 = (_OWORD *)(v8 + 120);
    swift_beginAccess();
    v29 = *(_QWORD *)(v8 + 120);
    if (*(_QWORD *)(v29 + 16))
    {
      v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v56);
      if ((v31 & 1) != 0)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
        swift_endAccess();
        v17 = 1;
        goto LABEL_24;
      }
    }
    v50 = a4;
    v51 = a6;
    swift_endAccess();
    v21 = v8 + 112;
    swift_beginAccess();
    v32 = *(_QWORD *)(v8 + 112);
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      HIDWORD(v49) = (_DWORD)a7;
      swift_bridgeObjectRetain();
      v22 = 0;
      a4 = 92;
      do
      {
        outlined init with copy of MatchedGeometryScope.Frame(v32 + a4 - 60, (uint64_t)v54);
        v34 = *(_QWORD *)(v55 + 16);
        outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
        if (!v34)
        {
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v17 = *(_QWORD *)v21;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v21 = v17;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            goto LABEL_48;
          goto LABEL_19;
        }
        ++v22;
        a4 += 64;
      }
      while (v33 != v22);
      swift_bridgeObjectRelease();
      v22 = *(_QWORD *)(*(_QWORD *)v21 + 16);
      LODWORD(a7) = HIDWORD(v49);
    }
    else
    {
      v22 = 0;
    }
    AGGraphClearUpdate();
    v35 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #3 in MatchedGeometryScope.frame<A>(index:for:view:)(v8, v22, (uint64_t)v56);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    v17 = 0;
    a6 = v51;
    goto LABEL_23;
  }
  v21 = *(_QWORD *)a2;
  v22 = v8 + 112;
  swift_beginAccess();
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_44;
  v23 = *(_QWORD *)(v8 + 112);
  if (v21 >= *(_QWORD *)(v23 + 16))
    goto LABEL_45;
  v52 = v14;
  v14 = a7;
  a7 = (_QWORD *)a4;
  a4 = v21 << 6;
  outlined init with copy of AnyHashable(v23 + (v21 << 6) + 40, (uint64_t)v54);
  v17 = MEMORY[0x23B7C6C4C](v54, v56);
  outlined destroy of AnyHashable((uint64_t)v54);
  if ((v17 & 1) == 0)
  {
    a4 = (uint64_t)a7;
    MatchedGeometryScope.releaseFrame(index:owner:)(v21, a7);
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
    LODWORD(a7) = (_DWORD)v14;
    v14 = v52;
    goto LABEL_8;
  }
  if (v21 < *(_QWORD *)(*(_QWORD *)v22 + 16))
  {
    outlined init with copy of MatchedGeometryScope.Frame(*(_QWORD *)v22 + a4 + 32, (uint64_t)v54);
    type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
    Value = AGGraphGetValue();
    v25 = *(_BYTE *)(Value + 48);
    v26 = *(unsigned int *)(Value + 52);
    v27 = *(_OWORD *)(Value + 16);
    v28 = v52;
    *v52 = *(_OWORD *)Value;
    v28[1] = v27;
    v28[2] = *(_OWORD *)(Value + 32);
    *((_BYTE *)v28 + 48) = v25;
LABEL_38:
    outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
    outlined destroy of AnyHashable((uint64_t)v56);
    return v26;
  }
  while (1)
  {
    __break(1u);
LABEL_48:
    v17 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v17);
    *(_QWORD *)v21 = v17;
LABEL_19:
    LODWORD(a7) = HIDWORD(v49);
    a6 = v51;
    if (v22 >= *(_QWORD *)(v17 + 16))
      break;
    outlined assign with copy of AnyHashable((uint64_t)v56, v17 + a4 - 52);
    if (v22 >= *(_QWORD *)(*(_QWORD *)v21 + 16))
      goto LABEL_50;
    *(_BYTE *)(*(_QWORD *)v21 + a4) = 0;
    v37 = *(_QWORD *)v21;
    swift_endAccess();
    if (v22 >= *(_QWORD *)(v37 + 16))
      goto LABEL_51;
    outlined init with copy of MatchedGeometryScope.Frame(v37 + a4 - 60, (uint64_t)v54);
    outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
    v17 = 1;
    AGGraphMutateAttribute();
LABEL_23:
    outlined init with copy of AnyHashable((uint64_t)v56, (uint64_t)v54);
    swift_beginAccess();
    v38 = swift_isUniquelyReferenced_nonNull_native();
    v53 = *(_QWORD *)a5;
    *(_QWORD *)a5 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, (uint64_t)v54, v38);
    *(_QWORD *)a5 = v53;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v54);
    swift_endAccess();
    a4 = v50;
LABEL_24:
    a5 = (_OWORD *)(v8 + 112);
    swift_beginAccess();
    v21 = *(_QWORD *)(v8 + 112);
    v39 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v8 + 112) = v21;
    if ((v39 & 1) != 0)
    {
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_40;
    }
    else
    {
      v21 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v21);
      *(_QWORD *)a5 = v21;
      if ((v22 & 0x8000000000000000) != 0)
      {
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    if (v22 >= *(_QWORD *)(v21 + 16))
      goto LABEL_41;
    v8 = v22 << 6;
    v21 += (v22 << 6) + 80;
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, a4, (uint64_t)v52, a6, (int)a7);
    if (v22 >= *(_QWORD *)(*(_QWORD *)a5 + 16))
      goto LABEL_42;
    ++*(_DWORD *)(*(_QWORD *)a5 + v8 + 88);
    v21 = *(_QWORD *)a5;
    swift_endAccess();
    if ((_DWORD)v17)
    {
      if (v22 >= *(_QWORD *)(v21 + 16))
        goto LABEL_46;
      outlined init with copy of MatchedGeometryScope.Frame(v21 + v8 + 32, (uint64_t)v54);
      outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
      v40 = AGCreateWeakAttribute();
      if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
      {
        v41 = (id)AGSubgraphGetCurrent();
        if (!v41)
          goto LABEL_53;
        v42 = v41;
        v43 = (id)AGSubgraphGetGraph();

      }
      else
      {
        v43 = (id)AGGraphGetAttributeGraph();
      }
      Context = AGGraphGetContext();
      if (!Context)
        goto LABEL_52;
      v17 = Context;
      swift_retain();

      a4 = swift_allocObject();
      *(_QWORD *)(a4 + 16) = v40;
      v21 = v17;
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #4 in MatchedGeometryScope.frame<A>(index:for:view:), a4);
      swift_release();
      swift_release();
    }
    *(_QWORD *)a2 = v22;
    *(_BYTE *)(a2 + 8) = 0;
    if (v22 < *(_QWORD *)(*(_QWORD *)a5 + 16))
    {
      outlined init with copy of MatchedGeometryScope.Frame(*(_QWORD *)a5 + v8 + 32, (uint64_t)v54);
      type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
      v45 = AGGraphGetValue();
      v46 = *(_BYTE *)(v45 + 48);
      v26 = *(unsigned int *)(v45 + 52);
      v47 = *(_OWORD *)(v45 + 16);
      *v14 = *(_OWORD *)v45;
      v14[1] = v47;
      v14[2] = *(_OWORD *)(v45 + 32);
      *((_BYTE *)v14 + 48) = v46;
      goto LABEL_38;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MatchedGeometryScope.releaseFrame(index:owner:)(int64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  _BYTE v17[40];

  v5 = v2;
  v8 = v2 + 14;
  result = swift_beginAccess();
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v10 = v2[14];
  if (*(_QWORD *)(v10 + 16) <= (unint64_t)a1)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
    *v8 = (uint64_t)a2;
    goto LABEL_9;
  }
  v4 = a1 << 6;
  v11 = *(_QWORD *)(v10 + (a1 << 6) + 80);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return result;
  v3 = 0;
  v13 = (int *)(v11 + 32);
  while (1)
  {
    v14 = *v13;
    v13 += 7;
    if (v14 == (_DWORD)a2)
      break;
    if (v12 == ++v3)
      return result;
  }
  swift_beginAccess();
  a2 = (_QWORD *)*v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v8 = (uint64_t)a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_22;
LABEL_9:
  if (a2[2] <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  specialized Array.remove(at:)(v3, (uint64_t)v17);
  v2 = (_QWORD *)*v8;
  swift_endAccess();
  if (v2[2] <= a1)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    *v8 = (uint64_t)v2;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(*(_QWORD *)((char *)v2 + v4 + 80) + 16))
  {
    outlined init with copy of AnyHashable((uint64_t)v2 + v4 + 40, (uint64_t)v17);
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v17);
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)v17);
    lazy protocol witness table accessor for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey();
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    v2 = (_QWORD *)v5[14];
    result = swift_isUniquelyReferenced_nonNull_native();
    v5[14] = v2;
    if ((result & 1) != 0)
    {
LABEL_16:
      if (v2[2] <= a1)
      {
        __break(1u);
        return result;
      }
      outlined assign with take of AnyHashable((uint64_t)v17, (uint64_t)v2 + v4 + 40);
      return swift_endAccess();
    }
LABEL_27:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = (_QWORD *)result;
    *v8 = result;
    goto LABEL_16;
  }
  swift_beginAccess();
  v2 = (_QWORD *)*v8;
  v16 = swift_isUniquelyReferenced_nonNull_native();
  *v8 = (uint64_t)v2;
  if ((v16 & 1) == 0)
    goto LABEL_25;
LABEL_13:
  if (v2[2] <= a1)
  {
    __break(1u);
    goto LABEL_27;
  }
  ++*(_DWORD *)((char *)v2 + v4 + 88);
  return swift_endAccess();
}

uint64_t closure #3 in MatchedGeometryScope.frame<A>(index:for:view:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  _BYTE v21[29];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  DWORD1(v19) = *(_DWORD *)(v6 + 16);
  *((_QWORD *)&v19 + 1) = a1;
  *(_QWORD *)&v20 = a2;
  v7 = MEMORY[0x24BEE4AF8];
  memset(v21, 0, 20);
  *((_QWORD *)&v20 + 1) = MEMORY[0x24BEE4AF8];
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  lazy protocol witness table accessor for type SharedFrame and conformance SharedFrame();
  swift_retain();
  v8 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_release();
  AGGraphSetFlags();
  outlined init with copy of AnyHashable(a3, (uint64_t)&v19 + 8);
  LODWORD(v19) = v8;
  *(_QWORD *)&v21[16] = v7;
  *(_DWORD *)&v21[24] = 0;
  v9 = (_QWORD *)(a1 + 112);
  v21[28] = 0;
  swift_beginAccess();
  v10 = *(_QWORD **)(a1 + 112);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 112) = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *v9 = v10;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    *v9 = v10;
  }
  v10[2] = v13 + 1;
  v14 = &v10[8 * v13];
  v15 = v19;
  v16 = v20;
  v17 = *(_OWORD *)v21;
  *(_OWORD *)((char *)v14 + 77) = *(_OWORD *)&v21[13];
  v14[3] = v16;
  v14[4] = v17;
  v14[2] = v15;
  return swift_endAccess();
}

uint64_t closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
    return AGGraphInvalidateValue();
  return result;
}

uint64_t MatchedGeometryScope.sourceViewIndex(frameIndex:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = result;
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 112);
  if (*(_QWORD *)(v3 + 16) <= v2)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v4 = *(_QWORD *)(v3 + (v2 << 6) + 80);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  v6 = 0;
  v7 = v4 + 44;
  while (1)
  {
    v7 += 28;
    if ((*(_BYTE *)AGGraphGetValue() & 1) == 0)
    {
      type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
      if ((*(_BYTE *)(AGGraphGetValue() + 24) & 1) != 0)
        break;
    }
    if (v5 == ++v6)
      return 0;
  }
  return v6;
}

uint64_t MatchedGeometryScope.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MatchedGeometryScope()
{
  return objc_opt_self();
}

uint64_t sub_234C48DA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _MatchedGeometryEffect(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _MatchedGeometryEffect<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void sub_234C48E04()
{
  type metadata accessor for MatchedGeometryEffect2();
}

uint64_t sub_234C48E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[10];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for MatchedGeometryEffect2<A, B>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

uint64_t destroy for MatchedGeometryScope.Frame(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

__n128 __swift_memcpy61_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

ValueMetadata *type metadata accessor for MatchedGeometryScope.Frame()
{
  return &type metadata for MatchedGeometryScope.Frame;
}

uint64_t type metadata completion function for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for _MatchedGeometryEffect(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4);
  if (v5 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MatchedGeometryEffect2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 25;
  v11 = v9 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & ~v9) + *(_QWORD *)(v8 + 64) > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = (_OWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (__int128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = *v19;
    *(_OWORD *)((char *)v18 + 9) = *(__int128 *)((char *)v19 + 9);
    *v18 = v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v15, ((unint64_t)a2 + v10) & v15, v5);
  }
  return v4;
}

uint64_t destroy for MatchedGeometryEffect2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + ((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *(_OWORD *)((char *)v11 + 9);
  *v10 = *v11;
  *(_OWORD *)((char *)v10 + 9) = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 25;
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((v15 + a1) & ~v14, (v15 + a2) & ~v14);
  return a1;
}

uint64_t assignWithCopy for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 25;
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((v14 + a1) & ~v13, (v14 + a2) & ~v13);
  return a1;
}

uint64_t initializeWithTake for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *(_OWORD *)((char *)v11 + 9);
  *v10 = *v11;
  *(_OWORD *)((char *)v10 + 9) = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 25;
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((v15 + a1) & ~v14, (v15 + a2) & ~v14);
  return a1;
}

uint64_t assignWithTake for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 25;
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((v14 + a1) & ~v13, (v14 + a2) & ~v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedGeometryEffect2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v22;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(_QWORD *)(v5 + 64);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v12 + 25;
  v14 = a2 - v10;
  if (a2 <= v10)
    goto LABEL_26;
  v15 = (v13 & ~v12) + *(_QWORD *)(v8 + 64);
  v16 = 8 * v15;
  if (v15 > 3)
    goto LABEL_10;
  v18 = ((v14 + ~(-1 << v16)) >> v16) + 1;
  if (HIWORD(v18))
  {
    v17 = *(_DWORD *)(a1 + v15);
    if (v17)
      goto LABEL_17;
  }
  else
  {
    if (v18 <= 0xFF)
    {
      if (v18 < 2)
        goto LABEL_26;
LABEL_10:
      v17 = *(unsigned __int8 *)(a1 + v15);
      if (!*(_BYTE *)(a1 + v15))
        goto LABEL_26;
LABEL_17:
      v19 = (v17 - 1) << v16;
      if (v15 > 3)
        v19 = 0;
      if (!(_DWORD)v15)
        return v10 + v19 + 1;
      if (v15 <= 3)
        v20 = (v13 & ~(_DWORD)v12) + *(_DWORD *)(v8 + 64);
      else
        v20 = 4;
      return ((uint64_t (*)(void))((char *)&loc_234C495F4 + 4 * byte_23528F7DF[v20 - 1]))();
    }
    v17 = *(unsigned __int16 *)(a1 + v15);
    if (*(_WORD *)(a1 + v15))
      goto LABEL_17;
  }
LABEL_26:
  if (v7 < v9)
    return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v8 + 48))((v13 + a1) & ~v12, *(unsigned int *)(v8 + 84), v4);
  if (v6 >= 0xFE)
    return (*(uint64_t (**)(void))(v5 + 48))();
  v22 = *(unsigned __int8 *)(((((a1 + v11 + 7) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 0x18);
  if (v22 < 2)
    return 0;
  return ((v22 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for MatchedGeometryEffect2(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= v6)
    v8 = v6;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 25
       + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void partial apply for closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)()
{
  closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)();
}

void partial apply for closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)()
{
  closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)();
}

void SharedFrame.removeListeners()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return;
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
    return;
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (v7)
  {
    v3 = v7;
    if (v7 >= 1)
    {
LABEL_4:
      for (i = 0; i != v3; ++i)
      {
        if ((v2 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x23B7C6D9C](i, v2);
        }
        else
        {
          v5 = *(_QWORD *)(v2 + 8 * i + 32);
          swift_retain();
        }
        (*(void (**)(void))(*(_QWORD *)v5 + 96))();
        swift_release();
      }
      goto LABEL_13;
    }
    __break(1u);
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
}

uint64_t SharedFrame.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  float64x2_t *v2;
  double v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  double *Value;
  char v20;
  uint64_t Attribute;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  char v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  float64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  float64_t v95;
  float64_t v96;
  float64x2_t v97;
  double v98;
  uint64_t v99;
  unsigned __int8 v100;
  void (*v101)(__int128 *, unint64_t, double);
  void *v102;
  float64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[4];
  __n128 v116;
  __n128 v117;
  unint64_t v118;
  unsigned int v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  __int128 v127;
  _QWORD v128[5];
  __int128 v129;
  __int128 v130;
  double v131;
  char v132;
  float64x2_t v133;
  _BYTE v134[24];
  uint64_t v135;
  float64x2_t v136;
  __int128 v137;
  __int128 v138;
  char v139;
  int v140;
  char v141;
  float64x2_t v142;
  _BYTE v143[24];
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for infinity != -1)
LABEL_88:
    swift_once();
  v3 = *(double *)&static Time.infinity;
  v5 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v6 = v5 + 112;
  swift_beginAccess();
  if (v4 < 0)
  {
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v126 = v5;
  v7 = *(_QWORD *)(v5 + 112);
  v8 = *(_QWORD *)(v7 + 16);
  if (v4 >= (unint64_t)v8)
    goto LABEL_90;
  v125 = v5 + 112;
  *(_QWORD *)&v127 = v0;
  v6 = v4 << 6;
  v9 = *(_QWORD *)(v7 + (v4 << 6) + 80);
  v1 = *(_QWORD *)(v9 + 16);
  if (!v1)
  {
LABEL_8:
    v14 = v127;
    SharedFrame.removeListeners()();
    swift_release();
    *(_QWORD *)(v127 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_DWORD *)(v14 + 48) = 0;
    v15 = *MEMORY[0x24BE096C0];
    v137 = 0u;
    v138 = 0u;
    v136 = 0u;
    v139 = 1;
    v140 = v15;
LABEL_9:
    type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
    return AGGraphSetOutputValue();
  }
  v10 = -v3;
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  v0 = v11;
  v12 = v9 + 36;
  v13 = v1;
  while (1)
  {
    v12 += 28;
    if (*(_BYTE *)(AGGraphGetValue() + 24) == 1)
      break;
    if (!--v13)
      goto LABEL_8;
  }
  v17 = v127;
  v18 = *(_QWORD *)(v127 + 32);
  v121 = (uint64_t *)(v127 + 32);
  v122 = v18;
  if (v18)
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v10 = *Value;
  }
  Attribute = AGWeakAttributeGetAttribute();
  v2 = (float64x2_t *)Attribute;
  v124 = *MEMORY[0x24BE096C0];
  v123 = v0;
  if ((_DWORD)Attribute == v124)
  {
    v25 = 0;
LABEL_20:
    v1 = v124;
    if (v4 >= v8)
      goto LABEL_32;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = v9 + 44;
  while (*(_DWORD *)(v23 - 12) != (_DWORD)Attribute)
  {
    v24 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_88;
    }
    v23 += 28;
    ++v22;
    if (v24 == v1)
    {
      v25 = Attribute;
      goto LABEL_20;
    }
  }
  if (v22 < v1)
  {
    v9 = *(unsigned int *)(v127 + 40);
    v1 = v124;
    if ((_DWORD)v9 != *(_DWORD *)AGGraphGetValue() >> 1)
    {
      SharedFrame.removeListeners()();
      swift_release();
      v122 = 0;
      v30 = v121;
      *v121 = 0;
      v30[1] = 0;
      *((_DWORD *)v30 + 4) = 0;
      v7 = *(_QWORD *)v125;
      v8 = *(_QWORD *)(*(_QWORD *)v125 + 16);
    }
    v25 = (int)v2;
    if (v4 >= v8)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_21:
    v9 = v1;
    if (*(_QWORD *)(*(_QWORD *)(v7 + v6 + 80) + 16) < 2uLL)
    {
      v29 = 0;
      goto LABEL_42;
    }
    v120 = v25;
    v1 = v4 << 6;
    v26 = v126;
    v27 = MatchedGeometryScope.sourceViewIndex(frameIndex:)(v4);
    v7 = *(_QWORD *)(v126 + 112);
    if ((v28 & 1) != 0)
    {
LABEL_33:
      v29 = 0;
      v6 = v1;
      goto LABEL_41;
    }
    if (v4 < *(_QWORD *)(v7 + 16))
    {
      v25 = v120;
      if ((*(_BYTE *)(v7 + v6 + 92) & 1) != 0)
      {
        v29 = 0;
        if (!v27)
        {
          while (1)
          {
LABEL_42:
            if (v4 >= *(_QWORD *)(v7 + 16))
              goto LABEL_91;
            v34 = *(_QWORD *)(v7 + v6 + 80);
            v35 = *(_QWORD *)(v34 + 16);
            if (!v35)
            {
              SharedFrame.removeListeners()();
              swift_release();
              v79 = v121;
              *v121 = 0;
              v79[1] = 0;
              *((_DWORD *)v79 + 4) = 0;
              v137 = 0u;
              v138 = 0u;
              v136 = 0u;
              v139 = 1;
              v140 = v9;
              goto LABEL_9;
            }
            v1 = v9;
            v7 = *(unsigned int *)(v34 + 32);
            LODWORD(v126) = *(_DWORD *)(v34 + 36);
            v36 = *(_DWORD *)(v34 + 44);
            v31 = (_QWORD *)*(unsigned int *)(v34 + 48);
            v37 = *(_DWORD *)(v34 + 56);
            LODWORD(v125) = *(_DWORD *)(v34 + 52);
            v39 = (_DWORD)v2 != (_DWORD)v9 && v25 == (_DWORD)v7;
            LODWORD(v122) = v36;
            if (v35 == 1 || v39)
            {
              v2 = &v133;
              if (!(_DWORD)v29)
                goto LABEL_63;
              goto LABEL_62;
            }
            v9 = v29;
            v120 = v37;
            AGGraphClearUpdate();
            v17 = *(_QWORD *)AGGraphGetValue();
            swift_retain();
            AGGraphSetUpdate();
            v40 = swift_retain();
            v41 = specialized closure #1 in PropertyList.subscript.getter(v40);
            v42 = swift_release();
            v2 = &v133;
            if ((v41 & 1) != 0)
            {
              v136.f64[0] = 0.0;
              MEMORY[0x24BDAC7A8](v42);
              v115[2] = &v136;
              specialized Transaction.forEach<A>(keyType:_:)((uint64_t)partial apply for closure #1 in Transaction.animationIgnoringTransitionPhase.getter, (uint64_t)v115, (_QWORD *)v17, v43);
              v44 = v136.f64[0];
              if (!*(_QWORD *)&v136.f64[0])
                goto LABEL_73;
            }
            else
            {
              v104 = swift_retain();
              v105 = specialized find<A>(_:key:)(v104);
              if (!v105)
              {
                swift_release_n();
                v17 = v127;
LABEL_76:
                if (!(_DWORD)v9)
                {
LABEL_63:
                  *(_QWORD *)(v17 + 44) = AGCreateWeakAttribute();
                  *(_DWORD *)(v17 + 40) = *(_DWORD *)AGGraphGetValue() >> 1;
                  v80 = AGGraphGetValue();
                  v81 = *(double *)v80;
                  v82 = *(_QWORD *)(v80 + 24);
                  v142 = 0uLL;
                  *(double *)v143 = v81;
                  v127 = *(_OWORD *)(v80 + 8);
                  *(_OWORD *)&v143[8] = v127;
                  v144 = v82;
                  v83 = AGGraphGetValue();
                  v84 = *(_QWORD *)v83;
                  v85 = *(double *)(v83 + 8);
                  v86 = *(double *)(v83 + 16);
                  v87 = *(double *)(v83 + 24);
                  v88 = *(double *)(v83 + 32);
                  v89 = AGGraphGetValue();
                  v90 = *(double *)v89;
                  v91 = *(double *)(v89 + 8);
                  v92 = v87 - (*(double *)v89 - v85);
                  v93 = AGGraphGetValue();
                  v94 = *(double *)(v93 + 16) * *(double *)&v127 + 0.0;
                  v142.f64[0] = v81 * *(double *)(v93 + 8) + 0.0;
                  v142.f64[1] = v94;
                  v133 = 0u;
                  memset(v134, 0, sizeof(v134));
                  LOBYTE(v135) = 2;
                  *(_QWORD *)&v129 = v84;
                  *((double *)&v129 + 1) = v90;
                  *(double *)&v130 = v91;
                  *((double *)&v130 + 1) = v92;
                  v131 = v88 - (v91 - v86);
                  outlined init with copy of CoordinateSpace((uint64_t)&v133, (uint64_t)&v136);
                  v141 = 2;
                  swift_retain_n();
                  specialized ViewTransform.convert(_:_:)((uint64_t)&v136, (uint64_t)&v129);
                  outlined destroy of ViewTransform.Conversion((uint64_t)&v136);
                  swift_release();
                  outlined destroy of CoordinateSpace((uint64_t)&v133);
                  v6 = *(_QWORD *)(v17 + 32);
                  if (!v6)
                  {
                    v96 = v142.f64[1];
                    v95 = v142.f64[0];
                    LODWORD(v1) = v7;
                    v97 = *(float64x2_t *)v143;
                    goto LABEL_70;
                  }
                  v136 = v142;
                  v137 = *(_OWORD *)v143;
                  swift_retain();
                  LOBYTE(v133.f64[0]) = 0;
                  if ((specialized AnimatorState.update(_:at:environment:)(&v136, v10) & 1) != 0)
                  {
                    swift_release();
                    *(_QWORD *)(v17 + 32) = 0;
                    SharedFrame.removeListeners()();
                    swift_release();
                    goto LABEL_69;
                  }
                  if (one-time initialization token for shared != -1)
                    goto LABEL_94;
                  goto LABEL_68;
                }
LABEL_62:
                AGGraphClearUpdate();
                closure #4 in SharedFrame.updateValue()((_QWORD *)v17);
                AGGraphSetUpdate();
                goto LABEL_63;
              }
              v44 = *(double *)(v105 + 72);
              swift_retain();
              swift_release();
              if (v44 == 0.0)
              {
LABEL_73:
                swift_release();
                v17 = v127;
                goto LABEL_76;
              }
            }
            v118 = *(_QWORD *)&v44;
            v4 = *(_QWORD *)(v127 + 8);
            v26 = *(_QWORD *)(v127 + 16);
            swift_beginAccess();
            if ((v26 & 0x8000000000000000) != 0)
              break;
            v45 = *(_QWORD *)(v4 + 112);
            if (v26 >= *(_QWORD *)(v45 + 16))
              goto LABEL_96;
            v119 = v9;
            if (*(_QWORD *)(*(_QWORD *)(v45 + (v26 << 6) + 80) + 16) >= 2uLL)
            {
              v46 = AGGraphGetValue();
              v47 = *(double *)v46;
              v48 = *(_QWORD *)(v46 + 24);
              v142 = 0uLL;
              *(double *)v143 = v47;
              v117 = *(__n128 *)(v46 + 8);
              *(__n128 *)&v143[8] = v117;
              v144 = v48;
              v49 = AGGraphGetValue();
              v50 = *(_QWORD *)v49;
              v51 = *(double *)(v49 + 8);
              v52 = *(double *)(v49 + 16);
              v53 = *(double *)(v49 + 24);
              v54 = *(double *)(v49 + 32);
              v2 = &v133;
              v55 = AGGraphGetValue();
              v56 = *(double *)v55;
              v57 = *(double *)(v55 + 8);
              v58 = v53 - (*(double *)v55 - v51);
              v59 = AGGraphGetValue();
              v60 = *(double *)(v59 + 16) * v117.n128_f64[0] + 0.0;
              v142.f64[0] = v47 * *(double *)(v59 + 8) + 0.0;
              v142.f64[1] = v60;
              v133 = 0u;
              memset(v134, 0, sizeof(v134));
              LOBYTE(v135) = 2;
              *(_QWORD *)&v129 = v50;
              *((double *)&v129 + 1) = v56;
              *(double *)&v130 = v57;
              *((double *)&v130 + 1) = v58;
              v131 = v54 - (v57 - v52);
              outlined init with copy of CoordinateSpace((uint64_t)&v133, (uint64_t)&v136);
              v141 = 2;
              swift_retain_n();
              specialized ViewTransform.convert(_:_:)((uint64_t)&v136, (uint64_t)&v129);
              outlined destroy of ViewTransform.Conversion((uint64_t)&v136);
              swift_release();
              outlined destroy of CoordinateSpace((uint64_t)&v133);
              v61 = AGGraphGetValue();
              v62 = *(double *)v61;
              v63 = *(_QWORD *)(v61 + 24);
              v133 = 0uLL;
              *(double *)v134 = v62;
              v117 = *(__n128 *)(v61 + 8);
              *(__n128 *)&v134[8] = v117;
              v135 = v63;
              v64 = AGGraphGetValue();
              v65 = *(_QWORD *)v64;
              v66 = *(double *)(v64 + 8);
              v67 = *(double *)(v64 + 16);
              v68 = *(double *)(v64 + 24);
              v69 = *(double *)(v64 + 32);
              v70 = AGGraphGetValue();
              v72 = *(double *)v70;
              v71 = *(double *)(v70 + 8);
              v73 = v68 - (*(double *)v70 - v66);
              v74 = AGGraphGetValue();
              v75 = *(double *)(v74 + 16) * v117.n128_f64[0] + 0.0;
              v133.f64[0] = v62 * *(double *)(v74 + 8) + 0.0;
              v133.f64[1] = v75;
              v131 = 0.0;
              v129 = 0u;
              v130 = 0u;
              v132 = 2;
              v128[0] = v65;
              *(double *)&v128[1] = v72;
              *(double *)&v128[2] = v71;
              *(double *)&v128[3] = v73;
              *(double *)&v128[4] = v69 - (v71 - v67);
              outlined init with copy of CoordinateSpace((uint64_t)&v129, (uint64_t)&v136);
              v141 = 2;
              swift_retain_n();
              specialized ViewTransform.convert(_:_:)((uint64_t)&v136, (uint64_t)v128);
              outlined destroy of ViewTransform.Conversion((uint64_t)&v136);
              swift_release();
              outlined destroy of CoordinateSpace((uint64_t)&v129);
              v76 = vsubq_f64(*(float64x2_t *)v134, *(float64x2_t *)v143);
              v77 = vsubq_f64(v133, v142);
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v77), (int32x4_t)vceqzq_f64(v76))))) & 1) != 0)
              {
                v116 = (__n128)v77;
                v117 = (__n128)v76;
                v78 = v127;
                v10 = *(double *)AGGraphGetValue();
                if (*(_QWORD *)(v78 + 32))
                {
                  swift_retain();
                  LOBYTE(v136.f64[0]) = 0;
                  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v118, v116.n128_f64[0], v116.n128_f64[1], v117.n128_f64[0], v117.n128_f64[1], v10);
                  swift_release();
                }
                else
                {
                  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
                  swift_allocObject();
                  swift_retain();
                  v107 = swift_retain();
                  v108 = specialized AnimatorState.init(animation:interval:at:in:)(v107, v17, v116, v116.n128_f64[1], v117, v117.n128_f64[1], v10);
                  *v121 = v108;
                }
                v109 = swift_retain();
                v110 = specialized find<A>(_:key:)(v109);
                v111 = v119;
                if (v110)
                {
                  v1 = *(_QWORD *)(v110 + 72);
                  swift_retain();
                  swift_release();
                  if (v1)
                  {
                    v112 = v127;
                    v113 = swift_retain();
                    MEMORY[0x23B7C61A8](v113);
                    if (*(_QWORD *)((*(_QWORD *)(v112 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)(v112 + 24) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                      goto LABEL_82;
                    goto LABEL_103;
                  }
                }
                else
                {
                  swift_release();
                }
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v1) = v124;
                v106 = v111;
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                LODWORD(v1) = v124;
                v106 = v119;
              }
LABEL_85:
              v17 = v127;
              if (!v106)
                goto LABEL_63;
              goto LABEL_62;
            }
LABEL_97:
            __break(1u);
LABEL_98:
            v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
            *(_QWORD *)v125 = v31;
LABEL_36:
            if (v4 >= v31[2])
            {
              __break(1u);
            }
            else
            {
              v7 = v6;
              v26 = (unint64_t)v31 + v6 + 80;
              specialized Array.remove(at:)(v118, (uint64_t)&v136);
              v6 = v125;
              if (v4 < *(_QWORD *)(*(_QWORD *)v125 + 16))
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, 0, *(uint64_t *)&v136.f64[0], *(uint64_t *)&v136.f64[1], v137, SDWORD2(v137));
                swift_endAccess();
                v7 = v126;
                swift_release();
                swift_beginAccess();
                v26 = *(_QWORD *)(v7 + 112);
                swift_retain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v7 + 112) = v26;
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                  goto LABEL_39;
                goto LABEL_101;
              }
            }
            __break(1u);
LABEL_101:
            v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v26);
            *(_QWORD *)v6 = v26;
LABEL_39:
            if (v4 >= *(_QWORD *)(v26 + 16))
            {
              __break(1u);
LABEL_103:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_82:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              v114 = specialized Array._endMutation()();
              (*(void (**)(uint64_t))(*(_QWORD *)v1 + 88))(v114);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v2 = &v133;
              LODWORD(v1) = v124;
              v106 = v119;
              goto LABEL_85;
            }
            v6 = v1;
            ++*(_DWORD *)(v26 + v1 + 88);
            swift_endAccess();
            swift_release();
            v7 = *(_QWORD *)(v7 + 112);
            v29 = v119;
LABEL_41:
            v25 = v120;
          }
          __break(1u);
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }
      }
      else
      {
        v29 = v27 + 1 < *(_QWORD *)(*(_QWORD *)(v7 + v6 + 80) + 16);
        if (!v27)
          goto LABEL_42;
      }
      v118 = v27;
      v119 = v29;
      swift_beginAccess();
      v31 = *(_QWORD **)(v126 + 112);
      swift_retain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v126 + 112) = v31;
      if ((v32 & 1) == 0)
        goto LABEL_98;
      goto LABEL_36;
    }
    goto LABEL_93;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  swift_once();
LABEL_68:
  swift_beginAccess();
  v98 = *(double *)(v6 + 72);
  *(_QWORD *)&v129 = *(_QWORD *)(v6 + 80);
  v99 = *(unsigned int *)(v6 + 120);
  v100 = *(_BYTE *)(v6 + 124);
  v101 = *(void (**)(__int128 *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                     + 0x58);
  v102 = static CoreGlue.shared;
  LOBYTE(v128[0]) = v100;
  v101(&v129, v99 | ((unint64_t)v100 << 32), v98);
  swift_release();

LABEL_69:
  v96 = v136.f64[1];
  v95 = v136.f64[0];
  v97 = v2[6];
  v142 = v136;
LABEL_70:
  v136.f64[0] = v95;
  v136.f64[1] = v96;
  v103 = v2[13];
  v2[6] = v97;
  v2[7] = v103;
  v139 = 0;
  v140 = v1;
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t closure #4 in SharedFrame.updateValue()(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  _BYTE v16[40];

  v3 = a1;
  v5 = a1[1];
  v4 = a1[2];
  result = swift_beginAccess();
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v5 + 112);
  if (v4 >= *(_QWORD *)(v7 + 16))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    *(_QWORD *)v1 = result;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_11;
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = v7 + (v4 << 6);
  v9 = *(_QWORD *)(v8 + 80);
  v2 = *(_QWORD *)(v9 + 16);
  v10 = v2 != 0;
  if (v2 == v10)
    return result;
  v11 = v8 + 32;
  for (i = v9 + 28 * (v2 != 0) + 44; ; i += 28)
  {
    if (v10 >= v2)
    {
      __break(1u);
      goto LABEL_15;
    }
    result = AGGraphGetValue();
    if ((*(_BYTE *)result & 1) == 0)
    {
      v1 = *(unsigned int *)(i - 8);
      type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
      result = AGGraphGetValue();
      if (*(_BYTE *)(result + 24) == 1)
        break;
    }
    if (v2 == ++v10)
      return result;
  }
  outlined init with copy of AnyHashable(v11 + 8, (uint64_t)v16);
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(98);
  v13._countAndFlagsBits = 0xD000000000000032;
  v13._object = (void *)0x80000002352E1560;
  String.append(_:)(v13);
  v14._countAndFlagsBits = AnyHashable.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x80000002352E15A0;
  v15._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v15);
  specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  v2 = v3[2];
  v1 = v3[1] + 112;
  swift_beginAccess();
  v3 = *(_QWORD **)v1;
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v1 = v3;
  if ((result & 1) == 0)
    goto LABEL_17;
  if ((v2 & 0x8000000000000000) != 0)
    goto LABEL_18;
LABEL_11:
  if (v2 >= v3[2])
  {
LABEL_19:
    __break(1u);
    return result;
  }
  BYTE4(v3[8 * v2 + 11]) = 1;
  swift_endAccess();
  swift_release();
  outlined destroy of AnyHashable((uint64_t)v16);
  return swift_bridgeObjectRelease();
}

double protocol witness for static StatefulRule.initialValue.getter in conformance SharedFrame@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance SharedFrame(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = *(_QWORD *)(result + 24);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return result;
  }
  else if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (result)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_5:
      if (v4 < 1)
      {
        __break(1u);
        return result;
      }
      for (i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x23B7C6D9C](i, v3);
        }
        else
        {
          v6 = *(_QWORD *)(v3 + 8 * i + 32);
          swift_retain();
        }
        (*(void (**)(void))(*(_QWORD *)v6 + 96))();
        swift_release();
      }
    }
  }
  result = swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t MatchedSharedFrame.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for _MatchedGeometryEffect(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t MatchedSharedFrame.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t CurrentAttribute;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  int v52;
  _QWORD v53[2];
  _OWORD v54[3];
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  int v60;
  int v61;
  char v62;
  uint64_t v63;

  v5 = v4;
  v63 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for Pair(0, v7, (uint64_t)&type metadata for Namespace.ID, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - v10;
  v12 = *(_QWORD *)(a1 + 24);
  v14 = type metadata accessor for _MatchedGeometryEffect(0, v7, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v40 - v16;
  v18 = (_QWORD *)*((unsigned int *)v5 + 13);
  if ((_DWORD)v18 == *MEMORY[0x24BE096C0])
  {
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if ((_DWORD)CurrentAttribute == (_DWORD)v18)
      __break(1u);
    *((_DWORD *)v5 + 13) = CurrentAttribute;
    v18 = (_QWORD *)CurrentAttribute;
  }
  v43 = v15;
  v44 = v12;
  v45 = v11;
  v46 = v9;
  v47 = v8;
  v20 = *((_DWORD *)v5 + 14);
  v21 = *((_QWORD *)v5 + 2);
  v22 = *((_DWORD *)v5 + 6);
  v23 = *((_QWORD *)v5 + 4);
  v24 = *((_BYTE *)v5 + 60);
  v42 = *v5;
  v26 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v20 != v26)
  {
    v27 = *((_BYTE *)v5 + 48);
    *((_DWORD *)v5 + 14) = v26;
    if ((v27 & 1) == 0)
    {
      MatchedGeometryScope.releaseFrame(index:owner:)(*((_QWORD *)v5 + 5), v18);
      *((_QWORD *)v5 + 5) = 0;
      *((_BYTE *)v5 + 48) = 1;
    }
    v20 = v26;
  }
  if ((v24 & 1) != 0)
  {
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    v59 = 1;
    v60 = (int)v18;
  }
  else
  {
    v41 = (uint64_t)v5 + 40;
    v28 = *((_QWORD *)v5 + 5);
    v29 = *((_BYTE *)v5 + 48);
    v56 = v42;
    *(_QWORD *)&v57 = v21;
    DWORD2(v57) = v22;
    *(_QWORD *)&v58 = v23;
    *((_QWORD *)&v58 + 1) = v28;
    v59 = v29;
    v60 = (int)v18;
    v61 = v20;
    v62 = v24;
    MatchedSharedFrame.modifier.getter(a1, v25, (uint64_t)v17);
    v30 = (uint64_t)v45;
    _MatchedGeometryEffect.qualifiedID.getter(v14, (uint64_t)v45);
    v31 = *(void (**)(char *, uint64_t))(v43 + 8);
    swift_retain();
    v31(v17, v14);
    v32 = *((unsigned int *)v5 + 13);
    v33 = (_OWORD *)*((_QWORD *)v5 + 1);
    v34 = *((_QWORD *)v5 + 2);
    v35 = (_QWORD *)*((unsigned int *)v5 + 6);
    v36 = *((unsigned int *)v5 + 1);
    v37 = lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID();
    v53[0] = v44;
    v53[1] = v37;
    v38 = v47;
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> Pair<A, B>, v47, v53);
    LODWORD(v33) = MatchedGeometryScope.frame<A>(index:for:view:)(v54, v41, v30, v32 | (v36 << 32), v33, v34, v35);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v38);
    v48 = v54[0];
    v49 = v54[1];
    v50 = v54[2];
    v51 = v55;
    v52 = (int)v33;
  }
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  return AGGraphSetOutputValue();
}

uint64_t MatchedSharedFrame.destroy()()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
  {
    result = MatchedGeometryScope.releaseFrame(index:owner:)(*(_QWORD *)(v0 + 40), (_QWORD *)*(unsigned int *)(v0 + 52));
    *(_QWORD *)(v0 + 40) = 0;
    *(_BYTE *)(v0 + 48) = 1;
  }
  return result;
}

uint64_t static MatchedSharedFrame.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AGGraphGetAttributeInfo();
  v6 = v5;
  v8 = type metadata accessor for MatchedSharedFrame(0, a2, a3, v7);
  if ((*(_BYTE *)(v6 + 48) & 1) == 0)
  {
    v8 = MatchedGeometryScope.releaseFrame(index:owner:)(*(_QWORD *)(v6 + 40), (_QWORD *)*(unsigned int *)(v6 + 52));
    *(_QWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 48) = 1;
  }
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  return AGGraphMutateAttribute();
}

uint64_t static MatchedSharedFrame.didReinsert(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for MatchedSharedFrame(0, a2, a3, a4);
  return AGGraphMutateAttribute();
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance MatchedSharedFrame<A>(uint64_t a1, uint64_t a2)
{
  return static MatchedSharedFrame.willRemove(attribute:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for static RemovableAttribute.didReinsert(attribute:) in conformance MatchedSharedFrame<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static MatchedSharedFrame.didReinsert(attribute:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance MatchedSharedFrame<A>()
{
  return MatchedSharedFrame.destroy()();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MatchedSharedFrame<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedSharedFrame<A>, a1);
  return static AsyncAttribute.flags.getter();
}

float64x2_t *MatchedFrame.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t Value;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *result;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  float64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double *v28;
  float64x2_t v29;
  float64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  float64x2_t *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64_t v45;
  float64x2_t v46;
  double v47;
  char v48;
  double v49;
  char v50;
  char v51;
  _QWORD v52[5];
  _BYTE v53[32];
  uint64_t v54;
  char v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  double v59;

  v3 = HIDWORD(a2);
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  Value = AGGraphGetValue();
  if (*(_DWORD *)(Value + 52) == a1 || (*(_BYTE *)(Value + 48) & 1) != 0)
  {
    v7 = (uint64_t *)AGGraphGetValue();
    v8 = *v7;
    v9 = v7[1];
    result = (float64x2_t *)AGGraphGetValue();
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
    v11 = result[1];
    *(float64x2_t *)(a3 + 16) = *result;
    *(float64x2_t *)(a3 + 32) = v11;
    return result;
  }
  v12 = *(double *)Value;
  v13 = *(double *)(Value + 8);
  v14 = *(double *)(Value + 16);
  v15 = *(double *)(Value + 24);
  v16 = *(double *)(Value + 32);
  v17 = *(double *)(Value + 40);
  v56.f64[0] = *(float64_t *)Value;
  v56.f64[1] = v13;
  v57.f64[0] = v14;
  v57.f64[1] = v15;
  v58 = v16;
  v59 = v17;
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  if ((*(_DWORD *)AGGraphGetValue() & 6) == 2)
  {
    v18 = v15;
    v45 = v14;
    if (*MEMORY[0x24BE096C0] != v3)
    {
      v19 = *(_QWORD *)AGGraphGetValue();
      v20 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v20 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
        {
          result = (float64x2_t *)_assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      v47 = v14;
      v48 = 0;
      v49 = v15;
      v50 = 0;
      v21 = (*(double (**)(double *))(*(_QWORD *)v19 + 120))(&v47);
      v23 = v22;
      v24 = v15 - v22;
      v25 = AGGraphGetValue();
      v27 = *(double *)(v25 + 8);
      v26 = *(double *)(v25 + 16);
      swift_release();
      v56.f64[0] = v12 + (v14 - v21) * v27;
      v56.f64[1] = v13 + v24 * v26;
      v57.f64[0] = v21;
      v57.f64[1] = v23;
      v58 = v14;
      v59 = v15;
      v17 = v15;
      v16 = v14;
      v18 = v23;
      v45 = v21;
    }
  }
  else
  {
    v28 = (double *)AGGraphGetValue();
    v18 = v28[1];
    v16 = v28[2];
    v17 = v28[3];
    v45 = *v28;
    v57.f64[0] = *v28;
    v57.f64[1] = v18;
    v58 = v16;
    v59 = v17;
  }
  if ((*(_BYTE *)AGGraphGetValue() & 1) != 0)
  {
    v31 = AGGraphGetValue();
    v32 = *(_QWORD *)v31;
    v33 = *(double *)(v31 + 8);
    v34 = *(double *)(v31 + 16);
    v35 = *(double *)(v31 + 24);
    v36 = *(double *)(v31 + 32);
    v37 = AGGraphGetValue();
    v38 = *(double *)v37;
    v39 = *(double *)(v37 + 8);
    v40 = v35 - (*(double *)v37 - v33);
    v54 = 0;
    memset(v53, 0, sizeof(v53));
    v55 = 2;
    v52[0] = v32;
    *(double *)&v52[1] = v38;
    *(double *)&v52[2] = v39;
    *(double *)&v52[3] = v40;
    *(double *)&v52[4] = v36 - (v39 - v34);
    outlined init with copy of CoordinateSpace((uint64_t)v53, (uint64_t)&v47);
    v51 = 3;
    swift_retain_n();
    specialized ViewTransform.convert(_:_:)((uint64_t)&v47, (uint64_t)v52);
    outlined destroy of ViewTransform.Conversion((uint64_t)&v47);
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)v53);
    v41 = AGGraphGetValue();
    v42 = (float64x2_t *)AGGraphGetValue();
    v44 = vsubq_f64(v56, vmulq_f64(*(float64x2_t *)(v41 + 8), v57));
    v46 = v57;
    v43 = *v42;
    result = (float64x2_t *)swift_release();
    v30 = v46.f64[0];
    v29 = vaddq_f64(v44, v43);
    v16 = v58;
    v17 = v59;
    v18 = v46.f64[1];
  }
  else
  {
    result = (float64x2_t *)AGGraphGetValue();
    v29 = *result;
    v30 = v45;
  }
  *(float64x2_t *)a3 = v29;
  *(float64_t *)(a3 + 16) = v30;
  *(float64_t *)(a3 + 24) = v18;
  *(double *)(a3 + 32) = v16;
  *(double *)(a3 + 40) = v17;
  return result;
}

uint64_t MatchedDisplayList.sharedFrame.getter(uint64_t a1)
{
  uint64_t Value;
  char v3;
  uint64_t v4;
  __int128 v5;

  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  Value = AGGraphGetValue();
  v3 = *(_BYTE *)(Value + 48);
  v4 = *(unsigned int *)(Value + 52);
  v5 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(Value + 32);
  *(_BYTE *)(a1 + 48) = v3;
  return v4;
}

uint64_t MatchedDisplayList.args.getter()
{
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t MatchedDisplayList.clipShape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v5 = *(_DWORD *)(v2 + 32);
  v6 = *(_QWORD *)(a1 + 16);
  if (v5 == *MEMORY[0x24BE096C0])
  {
    v7 = *(_QWORD *)(v6 - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

double protocol witness for static Rule.initialValue.getter in conformance MatchedFrame@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

float64x2_t *protocol witness for Rule.value.getter in conformance MatchedFrame@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return MatchedFrame.value.getter(*v1, v1[2], a1);
}

uint64_t MatchedDisplayList.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  CGSize v27;
  uint64_t Value;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  double v45;
  double v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  char v58;
  _BYTE *v59;
  double *v60;
  double v61;
  double v62;
  double *v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  unsigned __int8 v69;
  CGSize *v70;
  CGSize v71;
  __int128 v72;
  CGSize v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _BYTE v84[4];
  unsigned int v85;
  __int128 v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  unsigned int v91;
  unsigned int v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  CGRect v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  double v108;
  __int128 v109;
  CGSize v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned __int16 v115;
  unsigned __int8 v116;
  int v117;
  _QWORD v118[4];
  char v119;

  v99 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v89 = type metadata accessor for Optional();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v93 = &v84[-v5];
  v95 = v4;
  v94 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v90 = &v84[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_DWORD *)(v2 + 4);
  v10 = *(_DWORD *)(v2 + 8);
  v11 = *(_DWORD *)(v2 + 12);
  v13 = *(_DWORD *)(v2 + 16);
  v12 = *(_DWORD *)(v2 + 20);
  LODWORD(v7) = *(_DWORD *)(v2 + 24);
  v14 = *(_DWORD *)(v2 + 28);
  v15 = *(_DWORD *)(v2 + 32);
  v16 = *(unsigned __int8 *)(v2 + 36);
  LODWORD(v109) = *(_DWORD *)v2;
  v9 = v109;
  *(_QWORD *)((char *)&v109 + 4) = __PAIR64__(v10, v8);
  HIDWORD(v109) = v11;
  *(_QWORD *)&v110.width = __PAIR64__(v12, v13);
  v97 = v7;
  *(_QWORD *)&v110.height = __PAIR64__(v14, v7);
  v96 = v15;
  LODWORD(v111) = v15;
  BYTE4(v111) = v16;
  v98 = a1;
  v17 = MatchedDisplayList.args.getter();
  LODWORD(v102) = v9;
  LODWORD(v101) = v16;
  v100 = v12;
  if ((v17 & 4) != 0)
  {
    v104 = __PAIR64__(v8, v9);
    v87 = v10;
    v105 = __PAIR64__(v11, v10);
    v91 = v11;
    v92 = v13;
    v106 = __PAIR64__(v12, v13);
    v20 = v97;
    v107 = __PAIR64__(v14, v97);
    v21 = v96;
    LODWORD(v108) = v96;
    BYTE4(v108) = v16;
    v18 = 0;
    v22 = v14;
    if (MatchedDisplayList.sharedFrame.getter((uint64_t)&v109) == v8)
    {
      v19 = 19;
    }
    else
    {
      v23 = v20;
      v19 = 19;
      v24 = v91;
      v25 = v92;
      if ((v113 & 1) == 0)
      {
        v26 = v21;
        v86 = v109;
        v27 = v110;
        Value = AGGraphGetValue();
        v29 = *(_QWORD *)Value;
        v30 = *(double *)(Value + 8);
        v31 = *(double *)(Value + 16);
        v32 = *(double *)(Value + 24);
        v33 = *(double *)(Value + 32);
        swift_retain();
        v34 = AGGraphGetValue();
        v36 = *(double *)v34;
        v35 = *(double *)(v34 + 8);
        *(double *)&v37 = v32 - (*(double *)v34 - v30);
        v103.size = v27;
        v38 = v102;
        *(_QWORD *)&v109 = __PAIR64__(v8, v102);
        v85 = v8;
        v39 = v87;
        *((_QWORD *)&v109 + 1) = __PAIR64__(v24, v87);
        *(_QWORD *)&v110.width = __PAIR64__(v100, v25);
        v40 = v22;
        v41 = v24;
        v42 = v100;
        *(_QWORD *)&v110.height = __PAIR64__(v40, v23);
        LODWORD(v111) = v26;
        v43 = v101;
        BYTE4(v111) = v101;
        v44 = v98;
        MatchedDisplayList.args.getter();
        v103.origin.x = *(double *)&v86 - v27.width * v45;
        v103.origin.y = *((double *)&v86 + 1) - v27.height * v46;
        v111 = 0;
        v110 = (CGSize)0;
        v109 = 0u;
        LOBYTE(v112) = 2;
        *((_QWORD *)&v86 + 1) = v29;
        v104 = v29;
        v105 = *(_QWORD *)&v36;
        v106 = *(_QWORD *)&v35;
        v107 = v37;
        v108 = v33 - (v35 - v31);
        CGRect.convert(from:transform:)((uint64_t)&v109, (uint64_t *)&v104);
        outlined destroy of CoordinateSpace((uint64_t)&v109);
        *(_QWORD *)&v109 = __PAIR64__(v85, v38);
        *((_QWORD *)&v109 + 1) = __PAIR64__(v41, v39);
        *(_QWORD *)&v110.width = __PAIR64__(v42, v92);
        *(_QWORD *)&v110.height = __PAIR64__(v40, v97);
        LODWORD(v111) = v26;
        BYTE4(v111) = v43;
        v47 = v93;
        MatchedDisplayList.clipShape.getter(v44, (uint64_t)v93);
        v48 = v94;
        v49 = v95;
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v94 + 48))(v47, 1, v95) == 1)
        {
          (*(void (**)(_BYTE *, uint64_t))(v88 + 8))(v47, v89);
          x = v103.origin.x;
          y = v103.origin.y;
          width = v103.size.width;
          height = v103.size.height;
          if (CGRectIsNull(v103))
          {
            v54 = 0.0;
            v55 = 0.0;
            v56 = 0.0;
            v57 = 0.0;
            v58 = 6;
          }
          else
          {
            v58 = 0;
            v54 = x;
            v55 = y;
            v56 = width;
            v57 = height;
          }
        }
        else
        {
          v59 = v90;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 32))(v90, v47, v49);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))(*(_QWORD *)(v44 + 24) + 24))(v118, v49, v103.origin.x, v103.origin.y, v103.size.width, v103.size.height);
          v54 = *(double *)v118;
          v55 = *(double *)&v118[1];
          v56 = *(double *)&v118[2];
          v57 = *(double *)&v118[3];
          v58 = v119;
          (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v59, v49);
        }
        swift_release();
        v18 = swift_allocObject();
        *(CGFloat *)(v18 + 16) = v54;
        *(CGFloat *)(v18 + 24) = v55;
        *(CGFloat *)(v18 + 32) = v56;
        *(CGFloat *)(v18 + 40) = v57;
        *(_BYTE *)(v18 + 48) = v58;
        *(_WORD *)(v18 + 49) = 256;
        v19 = 6;
        *(_DWORD *)(v18 + 52) = 0;
      }
    }
  }
  else
  {
    v18 = 0;
    v19 = 19;
  }
  v60 = (double *)AGGraphGetValue();
  v61 = *v60;
  v62 = v60[1];
  v63 = (double *)AGGraphGetValue();
  v64 = v61 - *v63;
  v65 = v62 - v63[1];
  v66 = AGGraphGetValue();
  v67 = *(_QWORD *)v66;
  v68 = *(_WORD *)(v66 + 8);
  v69 = *(_BYTE *)(v66 + 10);
  swift_bridgeObjectRetain();
  v70 = (CGSize *)AGGraphGetValue();
  *(double *)&v109 = v64;
  *((double *)&v109 + 1) = v65;
  v71 = *v70;
  ++static DisplayList.Version.lastValue;
  v110 = v71;
  v111 = static DisplayList.Version.lastValue;
  v112 = v18;
  v113 = (v19 << 32) | 0x4000000000000000;
  v114 = v67;
  v116 = v69;
  v115 = v68;
  v117 = v102;
  LOBYTE(v104) = v101;
  outlined copy of DisplayList.Effect(v18, 0, v19);
  DisplayList.Item.canonicalize(options:)((char *)&v104);
  v72 = v109;
  v73 = v110;
  v74 = v111;
  v75 = v112;
  v77 = v113;
  v76 = v114;
  v78 = v115 | (v116 << 16);
  v79 = v117;
  v80 = v113 >> 62;
  if (v113 >> 62 != 3 || (v78 & 0xFFFFFF) != 0 || v113 != 0xC000000000000000 || v114 | v112)
  {
    v101 = v19;
    v102 = v18;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_23527E860;
    *(_OWORD *)(v81 + 32) = v72;
    *(CGSize *)(v81 + 48) = v73;
    *(_QWORD *)(v81 + 64) = v74;
    *(_QWORD *)(v81 + 72) = v75;
    *(_QWORD *)(v81 + 80) = v77;
    *(_QWORD *)(v81 + 88) = v76;
    *(_BYTE *)(v81 + 98) = BYTE2(v78);
    *(_WORD *)(v81 + 96) = v78;
    *(_DWORD *)(v81 + 100) = v79;
    __asm { BR              X10 }
  }
  outlined consume of DisplayList.Effect(v18, 0, v19);
  v82 = v99;
  *v99 = MEMORY[0x24BEE4AF8];
  *((_WORD *)v82 + 4) = 0;
  *((_BYTE *)v82 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v75, 0xC000000000000000);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MatchedDisplayList<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedDisplayList<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  uint64_t result;

  SharedFrame.removeListeners()();
  result = swift_release();
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

void type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>)
  {
    v4 = type metadata accessor for _AnyPreferenceKey(0, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>);
  }
}

uint64_t partial apply for closure #4 in static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 20) = *(_DWORD *)(*(_QWORD *)(v1 + 16) + 12);
  return result;
}

uint64_t type metadata accessor for MatchedDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MatchedDisplayList);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type MatchedFrame and conformance MatchedFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedFrame and conformance MatchedFrame;
  if (!lazy protocol witness table cache variable for type MatchedFrame and conformance MatchedFrame)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedFrame, &unk_250613CD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedFrame and conformance MatchedFrame);
  }
  return result;
}

uint64_t type metadata accessor for MatchedSharedFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MatchedSharedFrame);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for (ViewFrame?, AnyOptionalAttribute)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ViewFrame?, AnyOptionalAttribute))
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for ViewFrame?, (uint64_t)&type metadata for ViewFrame, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ViewFrame?, AnyOptionalAttribute));
  }
}

void type metadata accessor for Attribute<(ViewFrame?, AnyOptionalAttribute)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(ViewFrame?, AnyOptionalAttribute)>)
  {
    type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(ViewFrame?, AnyOptionalAttribute)>);
  }
}

void type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool));
  }
}

uint64_t initializeWithCopy for MatchedSharedFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MatchedSharedFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

uint64_t assignWithTake for MatchedSharedFrame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedGeometryScope.Frame(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 61))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedGeometryScope.Frame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 61) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 61) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

__n128 __swift_memcpy37_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 29) = *(_QWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for MatchedDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 37))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MatchedDisplayList(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 37) = v3;
  return result;
}

void *type metadata accessor for MatchedFrame()
{
  return &unk_250613CD0;
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MatchedGeometryScope.Frame.View(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MatchedGeometryScope.Frame.View(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 28) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MatchedGeometryScope.Frame.View()
{
  return &type metadata for MatchedGeometryScope.Frame.View;
}

unint64_t instantiation function for generic protocol witness table for MatchedFrame(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MatchedFrame and conformance MatchedFrame();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for MatchedDisplayList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedDisplayList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in MatchedSharedFrame<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for MatchedSharedFrame<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedSharedFrame<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in MatchedDisplayList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234C4CE54()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t outlined init with copy of MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MatchedGeometryScope.Frame(a2, a1);
  return a2;
}

uint64_t outlined destroy of MatchedGeometryScope.Frame(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_234C4CF28()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)()
{
  return closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)();
}

uint64_t outlined assign with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 24))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey;
  if (!lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedGeometryScope.EmptyKey, &unk_250630158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey;
  if (!lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MatchedGeometryScope.EmptyKey, &unk_250630158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey);
  }
  return result;
}

uint64_t outlined assign with take of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 40))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SharedFrame and conformance SharedFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharedFrame and conformance SharedFrame;
  if (!lazy protocol witness table cache variable for type SharedFrame and conformance SharedFrame)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SharedFrame, &unk_250611850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedFrame and conformance SharedFrame);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    v3 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
    v5 = type metadata accessor for AnimatorState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
  }
}

uint64_t partial apply for closure #1 in Transaction.animationIgnoringTransitionPhase.getter(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;

  return closure #1 in Transaction.animationIgnoringTransitionPhase.getter(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t partial apply for closure #1 in static MatchedSharedFrame.didReinsert(attribute:)(uint64_t result)
{
  *(_BYTE *)(result + 60) = 0;
  return result;
}

uint64_t partial apply for closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()(a1, *(uint64_t (**)(void))(v1 + 24));
}

uint64_t partial apply for closure #1 in static MatchedSharedFrame.willRemove(attribute:)(uint64_t result)
{
  *(_BYTE *)(result + 60) = 1;
  return result;
}

void *type metadata accessor for MatchedGeometryScope.EmptyKey()
{
  return &unk_250630158;
}

uint64_t destroy for SharedFrame()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SharedFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SharedFrame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for SharedFrame(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

void *type metadata accessor for SharedFrame()
{
  return &unk_250611850;
}

unint64_t instantiation function for generic protocol witness table for SharedFrame(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SharedFrame and conformance SharedFrame();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t Color.Resolved.init(platformColor:)(void *a1)
{
  unint64_t v1;

  v1 = specialized Color.Resolved.init(platformColor:)(a1);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t Color.Resolved.kitColor.getter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for cache != -1)
    swift_once();
  return specialized ObjectCache.subscript.getter(a1, a2, a3, a4);
}

uint64_t one-time initialization function for cache()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ObjectCache<Color.Resolved, NSObject>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))type metadata accessor for ObjectCache);
  v0 = (_QWORD *)swift_allocObject();
  type metadata accessor for ObjectCache<Color.Resolved, NSObject>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Item, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))type metadata accessor for ObjectCache.Item);
  v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v1 + 16) = 32;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_DWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 264) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_DWORD *)(v1 + 344) = 0;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_DWORD *)(v1 + 424) = 0;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_DWORD *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_DWORD *)(v1 + 504) = 0;
  *(_DWORD *)(v1 + 544) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_DWORD *)(v1 + 584) = 0;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_DWORD *)(v1 + 624) = 0;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 664) = 0;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_DWORD *)(v1 + 704) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_DWORD *)(v1 + 744) = 0;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_DWORD *)(v1 + 784) = 0;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 824) = 0;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_DWORD *)(v1 + 864) = 0;
  *(_OWORD *)(v1 + 832) = 0u;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_DWORD *)(v1 + 904) = 0;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_DWORD *)(v1 + 944) = 0;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_DWORD *)(v1 + 984) = 0;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_DWORD *)(v1 + 1024) = 0;
  *(_OWORD *)(v1 + 992) = 0u;
  *(_OWORD *)(v1 + 1008) = 0u;
  *(_DWORD *)(v1 + 1064) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1048) = 0u;
  *(_DWORD *)(v1 + 1104) = 0;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_DWORD *)(v1 + 1144) = 0;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_DWORD *)(v1 + 1184) = 0;
  *(_OWORD *)(v1 + 1168) = 0u;
  *(_OWORD *)(v1 + 1152) = 0u;
  *(_DWORD *)(v1 + 1224) = 0;
  *(_OWORD *)(v1 + 1192) = 0u;
  *(_OWORD *)(v1 + 1208) = 0u;
  *(_DWORD *)(v1 + 1264) = 0;
  *(_OWORD *)(v1 + 1248) = 0u;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_DWORD *)(v1 + 1304) = 0;
  *(_OWORD *)(v1 + 1272) = 0u;
  *(_OWORD *)(v1 + 1288) = 0u;
  type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  v0[3] = 0;
  v0[4] = result;
  v0[2] = closure #1 in variable initialization expression of static Color.Resolved.cache;
  static Color.Resolved.cache = (uint64_t)v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for MutableBox<[ObjectIdentifier : DynamicPropertyCache.Fields]>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4B00];
  static DynamicPropertyCache.cache = (_UNKNOWN *)result;
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache);
  v0 = (_QWORD *)swift_allocObject();
  type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Item, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Item);
  v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v1 + 16) = 32;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_DWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 264) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_DWORD *)(v1 + 344) = 0;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_DWORD *)(v1 + 424) = 0;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_DWORD *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_DWORD *)(v1 + 504) = 0;
  *(_DWORD *)(v1 + 544) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_DWORD *)(v1 + 584) = 0;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_DWORD *)(v1 + 624) = 0;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 664) = 0;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_DWORD *)(v1 + 704) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_DWORD *)(v1 + 744) = 0;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_DWORD *)(v1 + 784) = 0;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 824) = 0;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_DWORD *)(v1 + 864) = 0;
  *(_OWORD *)(v1 + 832) = 0u;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_DWORD *)(v1 + 904) = 0;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_DWORD *)(v1 + 944) = 0;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_DWORD *)(v1 + 984) = 0;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_DWORD *)(v1 + 1024) = 0;
  *(_OWORD *)(v1 + 992) = 0u;
  *(_OWORD *)(v1 + 1008) = 0u;
  *(_DWORD *)(v1 + 1064) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1048) = 0u;
  *(_DWORD *)(v1 + 1104) = 0;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_DWORD *)(v1 + 1144) = 0;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_DWORD *)(v1 + 1184) = 0;
  *(_OWORD *)(v1 + 1168) = 0u;
  *(_OWORD *)(v1 + 1152) = 0u;
  *(_DWORD *)(v1 + 1224) = 0;
  *(_OWORD *)(v1 + 1192) = 0u;
  *(_OWORD *)(v1 + 1208) = 0u;
  *(_DWORD *)(v1 + 1264) = 0;
  *(_OWORD *)(v1 + 1248) = 0u;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_DWORD *)(v1 + 1304) = 0;
  *(_OWORD *)(v1 + 1272) = 0u;
  *(_OWORD *)(v1 + 1288) = 0u;
  type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  v0[3] = 0;
  v0[4] = result;
  v0[2] = closure #1 in variable initialization expression of static Color.Resolved.cache;
  static Color.Resolved.cache = (uint64_t)v0;
  return result;
}

objc_class *closure #1 in variable initialization expression of static Color.Resolved.cache@<X0>(float *a1@<X0>, objc_class **a2@<X8>)
{
  objc_class *result;

  result = specialized static CoreColor.platformColor(resolvedColor:)(*a1, a1[1], a1[2], a1[3]);
  if (result)
    *a2 = result;
  else
    __break(1u);
  return result;
}

objc_class *static CoreColor.platformColor(red:green:blue:alpha:)(double a1, double a2, double a3, double a4)
{
  return CorePlatformColorForRGBA(0, a1, a2, a3, a4);
}

uint64_t EnvironmentValues.cuiNamedColorProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.cuiNamedColorProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    v6 = v5;
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    v6 = v8;
  }
  result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t EnvironmentValues.cuiNamedColorProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.cuiNamedColorProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.cuiNamedColorProvider.modify;
}

void EnvironmentValues.cuiNamedColorProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[5];
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    v6 = *(_QWORD *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

objc_class *specialized static CoreColor.platformColor(resolvedColor:)(float a1, float a2, float a3, float a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v8 = -a1;
  if (a1 > 0.0)
    v8 = a1;
  if (v8 <= 0.0031308)
  {
    v9 = v8 * 12.92;
  }
  else
  {
    v9 = 1.0;
    if (v8 != 1.0)
      v9 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
  }
  v10 = -a2;
  if (a2 > 0.0)
    v10 = a2;
  if (v10 <= 0.0031308)
  {
    v11 = v10 * 12.92;
  }
  else
  {
    v11 = 1.0;
    if (v10 != 1.0)
      v11 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
  }
  v12 = -a3;
  if (a3 > 0.0)
    v12 = a3;
  if (v12 <= 0.0031308)
  {
    v13 = v12 * 12.92;
  }
  else
  {
    v13 = 1.0;
    if (v12 != 1.0)
      v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
  }
  if (a2 <= 0.0)
    v14 = -v11;
  else
    v14 = v11;
  v15 = -v9;
  if (a1 > 0.0)
    v15 = v9;
  v16 = -v13;
  if (a3 > 0.0)
    v16 = v13;
  return CorePlatformColorForRGBA(0, v15, v14, v16, a4);
}

unint64_t specialized Color.Resolved.init(platformColor:)(void *a1)
{
  int Components;
  unint64_t result;
  float v3;
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11[2];

  v11[1] = *(double *)MEMORY[0x24BDAC8D0];
  v10 = 0.0;
  v11[0] = 0.0;
  v8 = 0;
  v9 = 0.0;
  Components = CoreColorPlatformColorGetComponents(0, a1, (uint64_t)v11, (uint64_t)&v10, (uint64_t)&v9, (uint64_t)&v8);
  result = 0;
  if (Components)
  {
    v3 = v11[0];
    v4 = v10;
    v5 = v9;
    v6 = specialized Color.Resolved.init(red:green:blue:opacity:)(v3, v4, v5);
    return LODWORD(v6) | ((unint64_t)v7 << 32);
  }
  return result;
}

uint64_t sub_234C4DC5C(uint64_t *a1)
{
  return EnvironmentValues.cuiNamedColorProvider.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static CoreUINamedColorProvider.effectiveCGColor(cuiColor:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

void type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>)
  {
    type metadata accessor for ObjectCache<Color.Resolved, NSObject>(255, (unint64_t *)&lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Data, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))type metadata accessor for ObjectCache.Data);
    v5 = type metadata accessor for AtomicBuffer(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>);
  }
}

void type metadata accessor for ObjectCache<Color.Resolved, NSObject>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for NSObject();
    v7 = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    v8 = a3(a1, &type metadata for Color.Resolved, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.CoreUINamedColorProviderKey()
{
  return &type metadata for EnvironmentValues.CoreUINamedColorProviderKey;
}

uint64_t GradientLayer.update(gradient:function:size:bounds:)(uint64_t a1, __int128 *a2)
{
  void *v2;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Class isa;
  Class v11;
  NSArray v12;
  id v13;
  void *v14;
  uint64_t v16;
  char v17;
  _BYTE v18[16];
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned __int8 *)(a1 + 8);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v6 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
LABEL_9:
    objc_msgSend(v2, sel_setPremultiplied_, 1);
LABEL_10:
  specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(a2);
  objc_msgSend(v2, sel_setType_, v23);
  objc_msgSend(v2, sel_setStartPoint_, v19, v20);
  objc_msgSend(v2, sel_setEndPoint_, v21, v22);
  v16 = v4;
  v17 = v5;
  specialized static GradientLayer.clippedValues(gradient:function:)(&v16, a2);
  v8 = v7;
  specialized _arrayForceCast<A, B>(_:)(v9);
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setColors_, isa);

  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setLocations_, v11);

  if (v8)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CAMediaTimingFunction);
    v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.isa = 0;
  }
  objc_msgSend(v2, sel_setInterpolations_, v12.super.isa);

  if (v5)
  {
    if (v5 == 1)
    {
      if (one-time initialization token for srgbExtendedLinear != -1)
        swift_once();
      v13 = (id)static Color.Resolved.srgbExtendedLinear;
    }
    else
    {
      v13 = (id)_CGColorSpaceGetPerceptual();
    }
  }
  else
  {
    if (one-time initialization token for srgbExtended != -1)
      swift_once();
    v13 = (id)static Color.Resolved.srgbExtended;
  }
  v14 = v13;
  objc_msgSend(v2, sel_setColorSpace_, v13);

  return outlined release of GradientLayer.GradientGeometry((uint64_t)v18);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GradientLayer.Function(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[2];
  _BYTE v6[40];

  outlined init with take of GradientLayer.Function(a1, (uint64_t)v5);
  outlined init with take of GradientLayer.Function(a2, (uint64_t)v6);
  specialized static GradientLayer.Function.== infix(_:_:)(v5);
  return v3 & 1;
}

void addMissingInterpolations #1 (to:) in static GradientLayer.clippedValues(gradient:function:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;

  v4 = (_QWORD *)(a2 + 16);
  swift_beginAccess();
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v7 = a1 - v10;
    if (a1 <= v10)
      return;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a1 - v6;
    if (a1 <= v6)
      return;
  }
  v8 = objc_msgSend((id)objc_opt_self(), sel_functionWithName_, *MEMORY[0x24BDE5D30]);
  swift_beginAccess();
  do
  {
    v9 = v8;
    MEMORY[0x23B7C61A8]();
    if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    --v7;
  }
  while (v7);
  swift_endAccess();

}

uint64_t type metadata accessor for GradientLayer()
{
  return objc_opt_self();
}

void specialized static GradientLayer.Function.== infix(_:_:)(__int128 *a1)
{
  _BYTE v1[40];

  outlined init with take of GradientLayer.Function(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

BOOL sub_234C4E3B0()
{
  __int128 *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v7[4];
  char v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = v9;
  v2 = v10;
  v4 = v11;
  v3 = v12;
  outlined init with take of GradientLayer.Function(v0, (uint64_t)v7);
  if (v8)
    return 0;
  if (v1 != v7[0] || v2 != v7[1])
    return 0;
  if (v3 == v7[3])
    return v4 == v7[2];
  return 0;
}

void specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(__int128 *a1)
{
  _BYTE v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  outlined init with take of GradientLayer.Function(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_234C4E524(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  double v37;
  double v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v53 = v38;
  if (v38 <= v33)
    v38 = v33;
  v39 = (id)*MEMORY[0x24BDE5C48];
  v59.origin.x = v37;
  v59.origin.y = v34;
  v59.size.width = v36;
  v59.size.height = v35;
  v54 = (v55 * CGRectGetWidth(v59) + v37) / v38;
  v60.origin.x = v37;
  v60.origin.y = v34;
  v60.size.width = v36;
  v60.size.height = v35;
  v40 = (v56 * CGRectGetHeight(v60) + v34) / v38;
  v61.origin.x = v37;
  v61.origin.y = v34;
  v61.size.width = v36;
  v61.size.height = v35;
  v41 = v33;
  v42 = (v57 * CGRectGetWidth(v61) + v37) / v38;
  v62.origin.x = v37;
  v62.origin.y = v34;
  v62.size.width = v36;
  v62.size.height = v35;
  v43 = (v58 * CGRectGetHeight(v62) + v34) / v38;
  v44 = v54 + v43 - v40;
  v45 = v40 - (v42 - v54);
  v46 = v38 / v53 * v54;
  v47 = v38 / v41 * v40;
  v48 = v38 / v53 * v42;
  v49 = v38 / v41 * v43;
  v50 = v38 / v53 * v44 - v46;
  v51 = v38 / v41 * v45 - v47;
  v52 = ((v49 - v47) * v51 + (v48 - v46) * v50) / (v51 * v51 + v50 * v50);
  *(double *)v32 = v53;
  *(double *)(v32 + 8) = v41;
  *(double *)(v32 + 16) = v46;
  *(double *)(v32 + 24) = v47;
  *(double *)(v32 + 32) = v48 - v50 * v52;
  *(double *)(v32 + 40) = v49 - v51 * v52;
  *(_QWORD *)(v32 + 48) = v39;
}

uint64_t specialized static GradientLayer.clippedValues(gradient:function:)(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  double v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  double v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  float v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  unsigned __int32 v41;
  float v42;
  float v43;
  float v44;
  __int32 v45;
  float v46;
  int8x16_t v47;
  int8x16_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  float v68;
  unsigned __int32 v69;
  float v70;
  __int32 v71;
  int8x16_t v72;
  int8x16_t v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  double v92;
  double v93;
  float v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  char v109;
  float32x4_t v110;
  float32x4_t v111[2];
  uint64_t v112;
  unint64_t v113;
  _BYTE v114[16];
  double v115;
  double v116;
  unsigned __int8 v117;

  v2 = *a1;
  v87 = *((unsigned __int8 *)a1 + 8);
  outlined init with take of GradientLayer.Function(a2, (uint64_t)v114);
  v3 = 1.0;
  v4 = 0.0;
  if (v117 - 1 <= 1 && v115 != 0.0)
  {
    if (v115 >= v116)
    {
      v3 = v116 / v115 + -1.0;
      v4 = 1.0;
    }
    else
    {
      v3 = (v116 - v115) / v116;
      v4 = v115 / v116;
    }
  }
  v92 = v4;
  v93 = v3;
  v5 = MEMORY[0x24BEE4AF8];
  v112 = MEMORY[0x24BEE4AF8];
  v113 = MEMORY[0x24BEE4AF8];
  v6 = swift_allocObject();
  v10 = v92;
  v9 = v93;
  v11 = v6;
  *(_QWORD *)(v6 + 16) = v5;
  v12 = (_QWORD *)(v6 + 16);
  if (v92 < 0.0)
    v13 = 0.0;
  else
    v13 = v92;
  if (v13 > 1.0)
    v13 = 1.0;
  v14 = v93 + v92;
  if (v93 + v92 < 0.0)
    v14 = 0.0;
  if (v14 > 1.0)
    v14 = 1.0;
  if (v14 >= v13)
    *(double *)v8.i64 = v13;
  else
    *(double *)v8.i64 = v14;
  if (v13 > v14)
    v15 = v13;
  else
    v15 = v14;
  v16 = *(_QWORD *)(v2 + 16);
  if (v16)
  {
    v85 = (_QWORD *)(v6 + 16);
    v86 = v6;
    v11 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v98 = v2 + 32;
    v23 = 1;
    v24 = 0.0;
    v89 = v15;
    v90 = *(double *)v8.i64;
    v88 = *(_QWORD *)(v2 + 16);
    v91 = v2;
    while (1)
    {
      if (v9 <= 0.0)
        v30 = v16 + v11 - 1;
      else
        v30 = v22;
      if ((v30 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      v31 = *(_QWORD *)(v2 + 16);
      if (v30 >= v31)
        goto LABEL_85;
      v32 = v24;
      v33 = v98 + 48 * v30;
      v25 = *(float *)v33;
      v26 = *(float *)(v33 + 4);
      v34 = *(float *)(v33 + 8);
      v35 = *(float *)(v33 + 12);
      v27 = *(_QWORD *)(v33 + 24);
      v28 = *(_QWORD *)(v33 + 32);
      v29 = *(_BYTE *)(v33 + 40);
      v24 = v10 + v9 * *(double *)(v33 + 16);
      if (v24 >= *(double *)v8.i64)
      {
        if (v15 >= v24)
          goto LABEL_49;
        if (v11)
        {
          v38 = v22 - 1;
          if (v9 <= 0.0)
            v38 = v16 + v11;
          if (v38 >= v31)
            goto LABEL_88;
          v39 = v98 + 48 * v38;
          *(double *)v7.i64 = v9 * *(double *)(v39 + 16);
          v40 = v10 + *(double *)v7.i64;
          if (v10 + *(double *)v7.i64 <= v15)
          {
            v41 = *(_DWORD *)(v39 + 8);
            v42 = *(float *)(v39 + 12);
            v7.i32[0] = *(_DWORD *)v39;
            v43 = *(float *)(v39 + 4);
            *(double *)v8.i64 = v15 - v40;
            v44 = (v15 - v40) / (v24 - v40);
            v95 = v44;
            v110.i8[0] = v87;
            v45 = LODWORD(v25);
            v46 = v26;
            v102 = v28;
            v105 = v27;
            v99 = v29;
            ResolvedGradient.ColorSpace.convertIn(_:)(v111[0].f32, v7, v43, v41, v42, v8);
            v108.i8[0] = v87;
            v47.i32[0] = v45;
            ResolvedGradient.ColorSpace.convertIn(_:)(v110.f32, v47, v46, LODWORD(v34), v35, v48);
            v109 = v87;
            v108 = vaddq_f32(vmulq_n_f32(v111[0], 1.0 - v95), vmulq_n_f32(v110, v95));
            *(float *)v7.i32 = ResolvedGradient.ColorSpace.convertOut(_:)(v108.f32);
            v2 = v91;
            v29 = v99;
            v28 = v102;
            v27 = v105;
            v16 = v88;
            v15 = v89;
            *(double *)v8.i64 = v90;
            v25 = *(float *)v7.i32;
            v26 = v49;
            v34 = v50;
            v35 = v51;
            v10 = v92;
            v9 = v93;
          }
        }
        v24 = v15;
        if ((v23 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        v36 = v22 + 1;
        if (v22 + 1 >= v16)
        {
          v24 = *(double *)v8.i64;
LABEL_49:
          if ((v23 & 1) != 0)
            goto LABEL_25;
          goto LABEL_50;
        }
        if (v9 <= 0.0)
          v36 = v16 + v11 - 2;
        if (v36 >= v31)
          goto LABEL_86;
        v37 = v98 + 48 * v36;
        *(double *)v7.i64 = v10 + v9 * *(double *)(v37 + 16);
        if (*(double *)v8.i64 <= *(double *)v7.i64)
        {
          v69 = *(_DWORD *)(v37 + 8);
          v68 = *(float *)(v37 + 12);
          v71 = *(_DWORD *)v37;
          v70 = *(float *)(v37 + 4);
          *(double *)v7.i64 = (*(double *)v8.i64 - v24) / (*(double *)v7.i64 - v24);
          *(float *)v7.i32 = *(double *)v7.i64;
          v97 = *(float *)v7.i32;
          v110.i8[0] = v87;
          *(float *)v7.i32 = v25;
          v104 = v28;
          v107 = v27;
          v101 = v29;
          ResolvedGradient.ColorSpace.convertIn(_:)(v111[0].f32, v7, v26, LODWORD(v34), v35, v8);
          v108.i8[0] = v87;
          v72.i32[0] = v71;
          ResolvedGradient.ColorSpace.convertIn(_:)(v110.f32, v72, v70, v69, v68, v73);
          v109 = v87;
          v108 = vaddq_f32(vmulq_n_f32(v111[0], 1.0 - v97), vmulq_n_f32(v110, v97));
          *(float *)v7.i32 = ResolvedGradient.ColorSpace.convertOut(_:)(v108.f32);
          v2 = v91;
          v29 = v101;
          v28 = v104;
          v27 = v107;
          v16 = v88;
          v15 = v89;
          *(double *)v8.i64 = v90;
          v25 = *(float *)v7.i32;
          v26 = v74;
          v34 = v75;
          v35 = v76;
          v10 = v92;
          v9 = v93;
          v24 = v90;
          if ((v23 & 1) != 0)
            goto LABEL_25;
        }
        else
        {
          v24 = *(double *)v8.i64;
          if ((v23 & 1) != 0)
            goto LABEL_25;
        }
      }
LABEL_50:
      v100 = v29;
      v103 = v28;
      v106 = v27;
      v94 = v26;
      v96 = v25;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v32);
      MEMORY[0x23B7C61A8]();
      if (*(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (one-time initialization token for cache != -1)
        swift_once();
      specialized ObjectCache.subscript.getter(*(float *)&v17, *((float *)&v17 + 1), *(float *)&v18, *((float *)&v18 + 1));
      MEMORY[0x23B7C61A8]();
      if (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((v21 & 1) != 0)
      {
        v2 = v91;
        v10 = v92;
        v9 = v93;
        v15 = v89;
        *(double *)v8.i64 = v90;
        v16 = v88;
        v26 = v94;
        v25 = v96;
        v28 = v103;
        v27 = v106;
        v29 = v100;
        if (v87 != 2)
          goto LABEL_25;
        v111[0].i8[0] = 2;
        v7.i32[0] = v17;
        *(float *)v8.i32 = v94;
        ResolvedGradient.ColorSpace.mix(_:_:by:)(v7, *((float *)&v17 + 1), *(float *)&v18, *((float *)&v18 + 1), v96, v8, v34, v35, 0.5);
        v53 = v52;
        v55 = v54;
        v57 = v56;
        v59 = v58;
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v32 + (v24 - v32) * 0.5);
        MEMORY[0x23B7C61A8]();
        if (*(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        specialized ObjectCache.subscript.getter(v53, v55, v57, v59);
        MEMORY[0x23B7C61A8]();
        if (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        if (v113 >> 62)
        {
          swift_bridgeObjectRetain();
          v77 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          v61 = v77 - 1;
          if (__OFSUB__(v77, 1))
            goto LABEL_87;
        }
        else
        {
          v60 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10);
          v61 = v60 - 1;
          if (__OFSUB__(v60, 1))
            goto LABEL_87;
        }
        addMissingInterpolations #1 (to:) in static GradientLayer.clippedValues(gradient:function:)(v61, v86);
        v62 = objc_allocWithZone(MEMORY[0x24BDE56F0]);
        LODWORD(v64) = HIDWORD(v19);
        LODWORD(v63) = v19;
        LODWORD(v66) = HIDWORD(v20);
        LODWORD(v65) = v20;
        objc_msgSend(v62, sel_initWithControlPoints__::, v63, v64, v65, v66);
        v67 = swift_beginAccess();
        MEMORY[0x23B7C61A8](v67);
        if (*(_QWORD *)((*(_QWORD *)(v86 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v86 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
      }
      v2 = v91;
      v10 = v92;
      v9 = v93;
      v15 = v89;
      *(double *)v8.i64 = v90;
      v16 = v88;
      v26 = v94;
      v25 = v96;
      v28 = v103;
      v27 = v106;
      v29 = v100;
LABEL_25:
      v23 = 0;
      v17 = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
      v18 = LODWORD(v34) | ((unint64_t)LODWORD(v35) << 32);
      --v11;
      ++v22;
      v19 = v27;
      v20 = v28;
      v21 = v29;
      if (!(v16 + v11))
      {
        v78 = v26;
        v79 = v25;
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v24);
        MEMORY[0x23B7C61A8]();
        if (*(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v12 = v85;
        if (one-time initialization token for cache != -1)
          swift_once();
        specialized ObjectCache.subscript.getter(v79, v78, v34, v35);
        MEMORY[0x23B7C61A8]();
        if (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v11 = v86;
        break;
      }
    }
  }
  swift_beginAccess();
  if (!(*v12 >> 62))
  {
    if (*(_QWORD *)((*v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_81;
LABEL_90:
    v82 = v112;
    goto LABEL_91;
  }
LABEL_89:
  swift_bridgeObjectRetain();
  v83 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v83)
    goto LABEL_90;
LABEL_81:
  if (v113 >> 62)
  {
    swift_bridgeObjectRetain();
    v84 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    result = v84 - 1;
    if (!__OFSUB__(v84, 1))
      goto LABEL_83;
  }
  else
  {
    v80 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = v80 - 1;
    if (!__OFSUB__(v80, 1))
    {
LABEL_83:
      addMissingInterpolations #1 (to:) in static GradientLayer.clippedValues(gradient:function:)(result, v11);
      v82 = v112;
      swift_bridgeObjectRetain();
LABEL_91:
      swift_release();
      return v82;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static GradientLayer.updateAsync(layer:oldSize:newSize:oldFunction:newFunction:oldGradient:newGradient:oldBounds:newBounds:)(Class *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v9;
  uint64_t v10;
  id v12;
  Swift::String v13;
  Swift::Bool v14;
  id v16;
  Swift::String v17;
  Swift::Bool v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  Class isa;
  Swift::String v33;
  Swift::Bool v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  Class v37;
  Swift::String v38;
  Swift::Bool v39;
  CALayer v40;
  Swift::Bool v41;
  Class v42;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[16];
  double v49;
  double v50;
  double v51;
  double v52;
  _BYTE v53[16];
  double v54;
  double v55;
  double v56;
  double v57;
  CALayer v58;
  CALayer v59;
  CALayer v60;
  CALayer v61;

  v5 = *(unsigned __int8 *)(a4 + 8);
  if (v5 != *(unsigned __int8 *)(a5 + 8))
    return 0;
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)a5;
  specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(a2);
  specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(a3);
  if (v54 != v49 || v55 != v50)
  {
    v12 = objc_msgSend((id)objc_opt_self(), sel_valueWithPoint_, v54, v55);
    v58.super.isa = *a1;
    v13._countAndFlagsBits = 0x696F507472617473;
    v13._object = (void *)0xEA0000000000746ELL;
    *(_QWORD *)&v58._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v12, v13, v58, v14);

  }
  if (v56 != v51 || v57 != v52)
  {
    v16 = objc_msgSend((id)objc_opt_self(), sel_valueWithPoint_, v56, v57);
    v59.super.isa = *a1;
    v17._countAndFlagsBits = 0x746E696F50646E65;
    v17._object = (void *)0xE800000000000000;
    *(_QWORD *)&v59._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v16, v17, v59, v18);

  }
  if ((specialized static Array<A>.== infix(_:_:)(v9, v10) & 1) != 0)
  {
    specialized static GradientLayer.Function.== infix(_:_:)(a3);
    if ((v19 & 1) != 0)
      goto LABEL_28;
  }
  v46 = v9;
  v47 = v5;
  v20 = specialized static GradientLayer.clippedValues(gradient:function:)(&v46, a2);
  v22 = v21;
  v24 = v23;
  v46 = v10;
  v47 = v5;
  v25 = specialized static GradientLayer.clippedValues(gradient:function:)(&v46, a3);
  v27 = v26;
  v29 = v28;
  if (!(v25 >> 62))
  {
    v30 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!(v20 >> 62))
      goto LABEL_16;
LABEL_32:
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v30 == v45)
    {
LABEL_17:
      v31 = specialized static Array<A>.== infix(_:_:)(v27, v22);
      swift_bridgeObjectRelease();
      if ((v31 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for CGColorRef(0);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v60.super.isa = *a1;
        v33._countAndFlagsBits = 0x73726F6C6F63;
        v33._object = (void *)0xE600000000000000;
        *(_QWORD *)&v60._attr.refcount = 0;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)isa, v33, v60, v34);
        swift_bridgeObjectRelease();

      }
      v35 = specialized static Array<A>.== infix(_:_:)(v25, v20);
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (v29)
          goto LABEL_22;
      }
      else
      {
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
        v37 = Array._bridgeToObjectiveC()().super.isa;
        v61.super.isa = *a1;
        v38._countAndFlagsBits = 0x6E6F697461636F6CLL;
        v38._object = (void *)0xE900000000000073;
        *(_QWORD *)&v61._attr.refcount = 0;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v37, v38, v61, v39);
        swift_bridgeObjectRelease();

        if (v29)
        {
LABEL_22:
          if (v24)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            v36 = specialized static Array<A>.== infix(_:_:)(v29, v24);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            if ((v36 & 1) != 0)
            {
              swift_bridgeObjectRelease();
LABEL_28:
              outlined release of GradientLayer.GradientGeometry((uint64_t)v53);
              outlined release of GradientLayer.GradientGeometry((uint64_t)v48);
              return 1;
            }
          }
          type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CAMediaTimingFunction);
          v42 = Array._bridgeToObjectiveC()().super.isa;
          goto LABEL_30;
        }
      }
      if (!v24)
        goto LABEL_28;
      swift_bridgeObjectRelease();
      v42 = (Class)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF8]), sel_init);
LABEL_30:
      v40.super.isa = *a1;
      v44._countAndFlagsBits = 0x6C6F707265746E69;
      v44._object = (void *)0xEE00736E6F697461;
      *(_QWORD *)&v40._attr.refcount = 0;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v42, v44, v40, v41);

      outlined release of GradientLayer.GradientGeometry((uint64_t)v53);
      outlined release of GradientLayer.GradientGeometry((uint64_t)v48);
      swift_bridgeObjectRelease();
      return 1;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 >> 62)
    goto LABEL_32;
LABEL_16:
  if (v30 == *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_17;
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of GradientLayer.GradientGeometry((uint64_t)v53);
  outlined release of GradientLayer.GradientGeometry((uint64_t)v48);
  return 0;
}

uint64_t outlined release of GradientLayer.GradientGeometry(uint64_t a1)
{

  return a1;
}

uint64_t outlined init with take of GradientLayer.Function(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_234C4F7D0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for GradientLayer.Function(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GradientLayer.Function(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for GradientLayer.Function(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for GradientLayer.Function(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GradientLayer.Function()
{
  return &type metadata for GradientLayer.Function;
}

uint64_t *initializeBufferWithCopyOfBuffer for AlignedTimelineSchedule.Entries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AlignedTimelineSchedule.Entries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for DateComponents();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

char *initializeWithCopy for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

char *assignWithCopy for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

char *assignWithTake for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlignedTimelineSchedule.Entries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C4FEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for DateComponents();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AlignedTimelineSchedule.Entries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C4FF38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for DateComponents();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AlignedTimelineSchedule.Entries()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AlignedTimelineSchedule.Entries;
  if (!type metadata singleton initialization cache for AlignedTimelineSchedule.Entries)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for AlignedTimelineSchedule.Entries()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t AlignedTimelineSchedule.Entries.init(startDate:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = type metadata accessor for Date();
  v7 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v60 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v11 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  v58 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v56 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Calendar.SearchDirection();
  v54 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v53 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Calendar.MatchingPolicy();
  v61 = *(_QWORD *)(v15 - 8);
  v62 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, v7);
  MEMORY[0x24BDAC7A8](v18);
  v65 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v59 = (char *)&v48 - v21;
  v22 = type metadata accessor for Calendar();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v8;
  v64 = v6;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v8 + 56);
  v27(a3, 1, 1, v6, v24);
  *(_QWORD *)(a3 + *(int *)(type metadata accessor for AlignedTimelineSchedule.Entries() + 20)) = a2;
  v28 = NSCalendarUnit.smallerUnits.getter(a2);
  DateComponents.init(zeroingUnits:)(v28);
  static Calendar.current.getter();
  v29 = a1;
  LOBYTE(v8) = Calendar.date(_:matchesComponents:)();
  v30 = *(void (**)(char *, uint64_t))(v23 + 8);
  v52 = v22;
  v30(v26, v22);
  if ((v8 & 1) != 0)
  {
    outlined destroy of Date?(a3, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v31 = v64;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(a3, a1, v64);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v27)(a3, 0, 1, v31);
  }
  else
  {
    v50 = a3;
    v51 = v27;
    static Calendar.current.getter();
    v33 = *MEMORY[0x24BDCF020];
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 104);
    v49 = v30;
    v35 = v17;
    v34(v17, v33, v62);
    v37 = v53;
    v36 = v54;
    v38 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, *MEMORY[0x24BDCF070], v55);
    v39 = v57;
    v40 = v58;
    v41 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v56, *MEMORY[0x24BDCF0B0], v57);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v62);
    v49(v26, v52);
    v42 = v63;
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 32);
    v44 = v60;
    v43(v60, v29, v64);
    v45 = v64;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v65, 1, v64) == 1)
    {
      v46 = (uint64_t)v59;
      v43(v59, (uint64_t)v44, v45);
      outlined destroy of Date?(v65, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v45);
      v46 = (uint64_t)v59;
      v43(v59, v65, v45);
    }
    v47 = v50;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v51)(v46, 0, 1, v45);
    return outlined assign with take of Date?(v46, v47);
  }
}

unint64_t NSCalendarUnit.smallerUnits.getter(uint64_t a1)
{
  unint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for order != -1)
    goto LABEL_26;
  while (1)
  {
    v3 = static NSCalendarUnit.order;
    v4 = *((_QWORD *)static NSCalendarUnit.order + 2);
    if (!v4)
      return MEMORY[0x24BEE4AF8];
    v5 = *((_QWORD *)static NSCalendarUnit.order + 4);
    if ((v5 & ~a1) == 0)
      break;
    if (v4 == 1)
      return MEMORY[0x24BEE4AF8];
    v12 = 5;
    v1 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v13 = v12 - 3;
      if (__OFADD__(v12 - 4, 1))
        break;
      v5 = *((_QWORD *)static NSCalendarUnit.order + v12);
      if ((v5 & ~a1) == 0)
        goto LABEL_4;
      ++v12;
      if (v13 == v4)
        return v1;
    }
    __break(1u);
LABEL_26:
    swift_once();
  }
LABEL_4:
  v6 = specialized Collection<>.firstIndex(of:)(v5, (uint64_t)static NSCalendarUnit.order);
  if ((v7 & 1) == 0)
  {
    v8 = v3[2];
    if (v8 < v6)
    {
      __break(1u);
    }
    else if ((v6 & 0x8000000000000000) == 0)
    {
      if (v8 == v6)
        v1 = v3[2];
      else
        v1 = v6 + 1;
      if (v8 >= v1)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        v9 = swift_dynamicCastClass();
        if (!v9)
        {
          swift_bridgeObjectRelease();
          v9 = MEMORY[0x24BEE4AF8];
        }
        v10 = *(_QWORD *)(v9 + 16);
        swift_release();
        if (v10 == v8 - v1)
        {
          v1 = swift_dynamicCastClass();
          swift_bridgeObjectRelease();
          if (v1)
            return v1;
          v1 = MEMORY[0x24BEE4AF8];
          goto LABEL_16;
        }
LABEL_30:
        swift_bridgeObjectRelease();
        v1 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v3, (uint64_t)(v3 + 4), v1, (2 * v8) | 1);
LABEL_16:
        swift_bridgeObjectRelease();
        return v1;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_29;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t DateComponents.init(zeroingUnits:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for TimeZone?, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - v3;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Calendar?, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - v6;
  v8 = type metadata accessor for Calendar();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  if ((specialized Sequence<>.contains(_:)(4, a1) & 1) != 0)
    DateComponents.year.setter();
  if ((specialized Sequence<>.contains(_:)(8, a1) & 1) != 0)
    DateComponents.month.setter();
  if ((specialized Sequence<>.contains(_:)(16, a1) & 1) != 0)
    DateComponents.day.setter();
  if ((specialized Sequence<>.contains(_:)(32, a1) & 1) != 0)
    DateComponents.hour.setter();
  if ((specialized Sequence<>.contains(_:)(64, a1) & 1) != 0)
    DateComponents.minute.setter();
  if ((specialized Sequence<>.contains(_:)(128, a1) & 1) != 0)
    DateComponents.second.setter();
  v10 = specialized Sequence<>.contains(_:)(0x8000, a1);
  result = swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    return DateComponents.nanosecond.setter();
  return result;
}

uint64_t AlignedTimelineSchedule.Entries.next()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v38;
  char *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  _QWORD v42[2];
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v2 = v1;
  v58 = a1;
  v3 = type metadata accessor for Calendar.SearchDirection();
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v52 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v51 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Calendar.MatchingPolicy();
  v8 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar();
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v14);
  v55 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v42 - v17;
  v19 = type metadata accessor for Date();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v48 = (char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v42 - v23;
  v57 = v2;
  outlined init with copy of Date?(v2, (uint64_t)v18);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v25((uint64_t)v18, 1, v19) == 1)
  {
    outlined destroy of Date?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v58, 1, 1, v19);
  }
  else
  {
    v45 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v46 = v20;
    v45(v24, v18, v19);
    static Calendar.current.getter();
    v42[1] = v57 + *(int *)(type metadata accessor for AlignedTimelineSchedule.Entries() + 24);
    v27 = *MEMORY[0x24BDCF020];
    v44 = v8;
    v28 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v10, v27, v56);
    v29 = v51;
    v30 = v52;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v51, *MEMORY[0x24BDCF0B0], v6);
    v31 = *MEMORY[0x24BDCF068];
    v42[0] = v6;
    v33 = v53;
    v32 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 104))(v5, v31, v54);
    v43 = v25;
    v34 = (uint64_t)v55;
    v47 = v24;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v32);
    (*(void (**)(char *, _QWORD))(v30 + 8))(v29, v42[0]);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v56);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v50);
    if (v43(v34, 1, v19) == 1)
    {
      v35 = MEMORY[0x24BDCE900];
      outlined destroy of Date?((uint64_t)v55, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v36 = v57;
      outlined destroy of Date?(v57, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
      v37(v36, 1, 1, v19);
      v38 = v58;
      v45(v58, v47, v19);
    }
    else
    {
      v39 = v48;
      v40 = (void (*)(uint64_t, char *, uint64_t))v45;
      v45(v48, v55, v19);
      v41 = v57;
      outlined destroy of Date?(v57, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v40(v41, v39, v19);
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
      v37(v41, 0, 1, v19);
      v38 = v58;
      v40((uint64_t)v58, v47, v19);
    }
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v37)(v38, 0, 1, v19);
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AlignedTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of LocalizedStringKey.FormatArgument(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for AlignedTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AlignedTimelineSchedule.Entries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, (uint64_t (*)(_QWORD))type metadata accessor for AlignedTimelineSchedule.Entries);
  return v1;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AlignedTimelineSchedule.Entries()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries, (uint64_t (*)(uint64_t))type metadata accessor for AlignedTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for AlignedTimelineSchedule.Entries);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance AlignedTimelineSchedule@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = type metadata accessor for Date();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))(v8, a1, v6);
  return AlignedTimelineSchedule.Entries.init(startDate:alignment:)((uint64_t)v8, v9, a2);
}

void one-time initialization function for order()
{
  static NSCalendarUnit.order = &outlined read-only object #0 of one-time initialization function for order;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  if (!a2)
  {
    v8 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
LABEL_17:
    v8 = a3;
    goto LABEL_18;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = v3[3];
    if (v7)
    {
      v9 = 0;
      while (1)
      {
        if (v4)
        {
          if (v9 >> 6 >= *(_QWORD *)(v6 + 16))
            goto LABEL_20;
          v10 = *(_QWORD *)(v6 + 32 + 8 * (v9 >> 6)) & (1 << v9);
        }
        else
        {
          v11 = 1 << v9;
          if (v9 >= 0x40)
            v11 = 0;
          v10 = v11 & v5;
        }
        if ((v7 & ~(v7 >> 63)) == v9)
          break;
        *(_BYTE *)(a2 + v9) = v10 != 0;
        if (a3 - 1 == v9)
          goto LABEL_17;
        if (v7 == ++v9)
        {
          v8 = v7;
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_18:
    *(_BYTE *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = v6;
    *(_QWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 32) = v8;
    return v8;
  }
LABEL_21:
  __break(1u);
  return result;
}

{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  char v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = result;
  v5 = *v3;
  v6 = *((_QWORD *)v3 + 2);
  v7 = *(__int128 *)((char *)v3 + 24);
  v8 = *(__int128 *)((char *)v3 + 40);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_16:
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v6;
    *(_OWORD *)(v4 + 24) = v7;
    *(_OWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v11;
    return v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v10 = *(_QWORD *)v3;
    v11 = *(_QWORD *)(v5 + 16);
    if (v11)
    {
      v23 = v8;
      v24 = v7;
      v25 = v5;
      v13 = *(void **)(v5 + 32);
      v14 = *(_QWORD *)(v5 + 40);
      v15 = *(_BYTE *)(v5 + 48);
      v16 = *(_DWORD *)(v5 + 72);
      v17 = *(_OWORD *)(v5 + 56);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      *(_BYTE *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 24) = v17;
      *(_DWORD *)(a2 + 40) = v16;
      if (v9 == 1)
      {
        v18 = 1;
LABEL_13:
        outlined copy of Text.Layout.Line.Line(v13, v14, v15);
        v11 = v18;
      }
      else
      {
        v19 = 0;
        v18 = 1;
        while (v11 != v18)
        {
          v20 = a2 + v19;
          outlined copy of Text.Layout.Line.Line(v13, v14, v15 & 1);
          v13 = *(void **)(v10 + v19 + 80);
          v14 = *(_QWORD *)(v10 + v19 + 88);
          v15 = *(_BYTE *)(v10 + v19 + 96);
          ++v18;
          v21 = *(_DWORD *)(v10 + v19 + 120);
          v22 = *(_OWORD *)(v10 + v19 + 104);
          *(_QWORD *)(v20 + 48) = v13;
          *(_QWORD *)(v20 + 56) = v14;
          *(_BYTE *)(v20 + 64) = v15;
          *(_OWORD *)(v20 + 72) = v22;
          *(_DWORD *)(v20 + 88) = v21;
          v19 += 48;
          if (v9 == v18)
            goto LABEL_13;
        }
        outlined copy of Text.Layout.Line.Line(v13, v14, v15 & 1);
        v9 = v18;
      }
      v7 = v24;
      v5 = v25;
      v8 = v23;
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  int v18;
  __int128 v19;

  v4 = result;
  v5 = *v3;
  v6 = *((_BYTE *)v3 + 8);
  v7 = v3[2];
  if (!a2)
  {
    v8 = 0;
    goto LABEL_11;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_11:
    *(_QWORD *)v4 = v5;
    *(_BYTE *)(v4 + 8) = v6;
    *(_QWORD *)(v4 + 16) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(v5 + 16);
    if (v9)
    {
      v11 = 0;
      v12 = 0;
      v13 = a3 - 1;
      while (1)
      {
        v14 = a2 + v12;
        v15 = *(void **)(v5 + v12 + 32);
        v16 = *(_QWORD *)(v5 + v12 + 40);
        v17 = *(_BYTE *)(v5 + v12 + 48);
        v18 = *(_DWORD *)(v5 + v12 + 72);
        v19 = *(_OWORD *)(v5 + v12 + 56);
        *(_QWORD *)v14 = v15;
        *(_QWORD *)(v14 + 8) = v16;
        *(_BYTE *)(v14 + 16) = v17;
        *(_OWORD *)(v14 + 24) = v19;
        *(_DWORD *)(v14 + 40) = v18;
        if (v13 == v11)
          break;
        outlined copy of Text.Layout.Line.Line(v15, v16, v17);
        ++v11;
        v12 += 48;
        if (v9 == v11)
          goto LABEL_8;
      }
      outlined copy of Text.Layout.Line.Line(v15, v16, v17);
    }
    else
    {
LABEL_8:
      v8 = v9;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = (_QWORD *)result;
  v5 = *v3;
  if (!a2)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_12;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_12:
    *v4 = v5;
    v4[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      v9 = 0;
      v10 = 1;
      while (v10 - 1 < v7)
      {
        v11 = a2 + v9;
        v12 = *(_QWORD *)(v5 + v9 + 48);
        v13 = *(_QWORD *)(v5 + v9 + 72);
        v14 = *(_QWORD *)(v5 + v9 + 80);
        v15 = *(_OWORD *)(v5 + v9 + 56);
        *(_OWORD *)v11 = *(_OWORD *)(v5 + v9 + 32);
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = v15;
        *(_QWORD *)(v11 + 40) = v13;
        *(_QWORD *)(v11 + 48) = v14;
        if (v6 == v10)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        v16 = v10 + 1;
        v7 = *(_QWORD *)(v5 + 16);
        v9 += 56;
        if (v10++ == v7)
        {
          v6 = v16 - 1;
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *v3;
  v6 = *((_DWORD *)v3 + 2);
  v5 = *((_DWORD *)v3 + 3);
  if (!a2)
  {
    LODWORD(v10) = 0;
    v7 = 0;
    a3 = 0;
LABEL_16:
    *(_QWORD *)result = v4;
    *(_DWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 12) = v5;
    *(_DWORD *)(result + 16) = v10;
    *(_DWORD *)(result + 20) = v7;
    return a3;
  }
  if (!a3)
  {
    LODWORD(v10) = 0;
    v7 = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = a3 - 1;
    do
    {
      if (v5 == (_DWORD)v8 && !v7)
      {
        LODWORD(v10) = v5;
        a3 = v8;
        goto LABEL_16;
      }
      if (!v4)
        goto LABEL_19;
      v10 = v8 + 1;
      v11 = v4 + v7;
      if (v5 - 1 == (_DWORD)v8)
      {
        v7 = 0;
        *(_QWORD *)(a2 + 8 * v8) = v11;
        if (v9 == v8)
        {
          LODWORD(v10) = v5;
          goto LABEL_16;
        }
      }
      else
      {
        v7 += *(_DWORD *)(v11 + 8);
        *(_QWORD *)(a2 + 8 * v8) = v11;
        if (v9 == v8)
          goto LABEL_16;
      }
      ++v8;
    }
    while (a3 != v10);
    __break(1u);
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE v37[96];
  __int128 v38;
  uint64_t v39;

  v4 = result;
  v5 = *v3;
  v6 = (__int128 *)v3[1];
  v8 = v3[2];
  v7 = v3[3];
  v9 = *((unsigned __int8 *)v3 + 32);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    v12 = v9;
    goto LABEL_13;
  }
  if (a3 < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v7 >> 1;
  v11 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v12 = v9 + v11;
  if (!__OFADD__(v9, v11))
  {
    if (v12 <= v9)
      v13 = v9;
    else
      v13 = v9 + v11;
    if (v12 == v9)
    {
      a3 = (v7 >> 1) - v8;
LABEL_13:
      *(_QWORD *)v4 = v5;
      *(_QWORD *)(v4 + 8) = v6;
      *(_QWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 24) = v7;
      *(_BYTE *)(v4 + 32) = v9;
      *(_QWORD *)(v4 + 40) = v12;
      return a3;
    }
    v14 = a2;
    v33 = a3;
    v35 = v5;
    v36 = v7;
    v15 = 0;
    v16 = v13 - v9;
    v17 = a3 - 1;
    v34 = v6;
    while (v8 <= 0 && v15 < v10)
    {
      v18 = *v6;
      v19 = v6[1];
      v20 = v6[3];
      *(_OWORD *)&v37[32] = v6[2];
      *(_OWORD *)&v37[48] = v20;
      *(_OWORD *)v37 = v18;
      *(_OWORD *)&v37[16] = v19;
      v21 = v6[4];
      v22 = v6[5];
      v23 = v6[6];
      v39 = *((_QWORD *)v6 + 14);
      *(_OWORD *)&v37[80] = v22;
      v38 = v23;
      *(_OWORD *)&v37[64] = v21;
      if (v16 == v15)
        goto LABEL_23;
      v24 = v39;
      v25 = BYTE8(v38);
      v26 = v38;
      v27 = *(_DWORD *)&v37[92];
      v28 = v37[88];
      v29 = *(_OWORD *)&v37[24];
      v30 = *(_OWORD *)&v37[40];
      v31 = *(_OWORD *)&v37[56];
      v32 = *(_OWORD *)&v37[72];
      *(_OWORD *)v14 = *(_OWORD *)&v37[8];
      *(_OWORD *)(v14 + 16) = v29;
      *(_OWORD *)(v14 + 32) = v30;
      *(_OWORD *)(v14 + 48) = v31;
      *(_OWORD *)(v14 + 64) = v32;
      *(_BYTE *)(v14 + 80) = v28;
      *(_DWORD *)(v14 + 84) = v27;
      *(_QWORD *)(v14 + 88) = v26;
      *(_BYTE *)(v14 + 96) = v25;
      *(_QWORD *)(v14 + 104) = v24;
      if (v17 == v15)
      {
        outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v37);
        v12 = v9 + v15 + 1;
        a3 = v33;
        v6 = v34;
        v5 = v35;
        v7 = v36;
        goto LABEL_13;
      }
      result = outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v37);
      ++v15;
      v6 = (__int128 *)((char *)v6 + 120);
      v14 += 112;
      if (v11 == v15)
      {
        a3 = v11;
        v5 = v35;
        v7 = v36;
        v6 = v34;
        v12 = v9 + v11;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v26[112];
  __int128 v27;

  v7 = result;
  if (!a2)
  {
LABEL_11:
    v9 = 0;
LABEL_15:
    *(_QWORD *)v7 = a4;
    *(double *)(v7 + 8) = a5;
    *(_QWORD *)(v7 + 16) = v9;
    return v9;
  }
  if (!a3)
  {
LABEL_13:
    v9 = a3;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = a2;
      v11 = (_OWORD *)(a4 + 32);
      v12 = 1;
      while (1)
      {
        v13 = v11[7];
        *(_OWORD *)&v26[96] = v11[6];
        v27 = v13;
        v14 = v11[1];
        *(_OWORD *)v26 = *v11;
        *(_OWORD *)&v26[16] = v14;
        v15 = v11[3];
        *(_OWORD *)&v26[32] = v11[2];
        *(_OWORD *)&v26[48] = v15;
        v16 = v11[5];
        *(_OWORD *)&v26[64] = v11[4];
        *(_OWORD *)&v26[80] = v16;
        *(_QWORD *)&v16 = v27;
        v17 = *(double *)&v26[104] + a5;
        v18 = *((_QWORD *)&v27 + 1);
        v19 = *(_OWORD *)&v26[8];
        v20 = *(_OWORD *)&v26[24];
        v21 = *(_OWORD *)&v26[40];
        v22 = *(_OWORD *)&v26[56];
        v23 = *(_OWORD *)&v26[72];
        v24 = *(_OWORD *)&v26[88];
        *(_QWORD *)v10 = *(_QWORD *)v26;
        *(_OWORD *)(v10 + 8) = v19;
        *(_OWORD *)(v10 + 24) = v20;
        *(_OWORD *)(v10 + 40) = v21;
        *(_OWORD *)(v10 + 56) = v22;
        *(_OWORD *)(v10 + 72) = v23;
        *(_OWORD *)(v10 + 88) = v24;
        *(double *)(v10 + 104) = v17;
        *(_QWORD *)(v10 + 112) = v16;
        *(_QWORD *)(v10 + 120) = v18;
        if (a3 == v12)
        {
          outlined retain of Text.Effect.DisplayInfo((uint64_t)v26);
          goto LABEL_13;
        }
        if (v9 == v12)
          break;
        outlined retain of Text.Effect.DisplayInfo((uint64_t)v26);
        v11 += 8;
        v10 += 128;
        if (v12++ >= *(_QWORD *)(a4 + 16))
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      outlined retain of Text.Effect.DisplayInfo((uint64_t)v26);
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_11:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      v8 = a2;
      v9 = 0;
      v10 = a3 - 1;
      while (v9 < *(_QWORD *)(a4 + 16))
      {
        v11 = *(_QWORD *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8);
        v12 = *(_QWORD *)(v11 + 72);
        result = outlined init with copy of TypesettingLanguage(a4+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ v12 * v9, v8, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if (v10 == v9)
          goto LABEL_11;
        v8 += v12;
        if (v7 == ++v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_11:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      v8 = a2;
      v9 = 0;
      v10 = a4 + 32;
      v11 = a3 - 1;
      while (v9 < *(_QWORD *)(a4 + 16))
      {
        result = outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v10, v8);
        if (v11 == v9)
          goto LABEL_11;
        v8 += 96;
        ++v9;
        v10 += 96;
        if (v7 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v22;

  if (!a2)
    goto LABEL_7;
  v6 = a3;
  if (!a3)
    goto LABEL_8;
  if (a3 < 0)
    goto LABEL_30;
  v7 = *(_QWORD *)(a5 + 16);
  v8 = a4 + v7;
  if (__OFADD__(a4, v7))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (__OFSUB__(v8, a4))
  {
LABEL_32:
    __break(1u);
    return result;
  }
  if (v8 != a4)
  {
    v9 = a2;
    v22 = result;
    v10 = 0;
    if (a4 <= v8)
      v11 = a4 + v7;
    else
      v11 = a4;
    v12 = a5 + 48;
    v13 = a4 - v11;
    v14 = a3 - 1;
    v20 = *(_QWORD *)(a5 + 16);
    while (v10 < *(_QWORD *)(a5 + 16))
    {
      if (!(v13 + v10))
        goto LABEL_28;
      result = *(_QWORD **)v12;
      v15 = *(_QWORD *)(v12 + 8);
      v16 = *(_QWORD *)(v12 + 16);
      v17 = a4 + v10 + 1;
      v18 = *(_OWORD *)(v12 + 24);
      *(_OWORD *)v9 = *(_OWORD *)(v12 - 16);
      *(_QWORD *)(v9 + 16) = result;
      *(_QWORD *)(v9 + 24) = v15;
      *(_QWORD *)(v9 + 32) = v16;
      *(_OWORD *)(v9 + 40) = v18;
      if (v14 == v10)
        goto LABEL_24;
      if (__OFSUB__(v8, v17))
        goto LABEL_29;
      if (v20 - 1 == v10)
      {
        v6 = v20;
        goto LABEL_26;
      }
      v19 = __OFSUB__(v17, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_bridgeObjectRetain();
      v12 += 56;
      ++v10;
      v9 += 56;
      if (v19)
      {
        __break(1u);
LABEL_24:
        v8 = v17;
        v6 = a3;
LABEL_26:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = v22;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_7:
  v6 = 0;
LABEL_8:
  v8 = a4;
LABEL_9:
  *result = a4;
  result[1] = a5;
  result[2] = v8;
  return (_QWORD *)v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt64 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[3];
  uint64_t v45;

  v41 = a1;
  v42 = a3;
  v5 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v40 - v13);
  outlined init with copy of TypesettingLanguage((uint64_t)v3, (uint64_t)v11, type metadata accessor for Text.Effect.BaseContent);
  v15 = *v3;
  v16 = v3[1];
  v17 = v3[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if ((v18 & 1) != 0)
    {
      swift_endAccess();
      outlined destroy of TypesettingConfiguration((uint64_t)v3, type metadata accessor for Text.Effect.BaseContent);
      *(_QWORD *)&v11[*(int *)(v9 + 36)] = 0;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
      if (!a2)
      {
LABEL_19:
        v19 = 0;
        goto LABEL_21;
      }
      v19 = v42;
      if (!v42)
      {
LABEL_21:
        outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v14, v41, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
        return v19;
      }
      if ((v42 & 0x8000000000000000) == 0)
      {
        v20 = *(int *)(v9 + 36);
        v21 = *(uint64_t *)((char *)v14 + v20);
        v22 = *v14;
        v23 = v14[1];
        v24 = v14[2];
        swift_beginAccess();
        v25 = *(_QWORD *)(v22 + 48);
        if (*(_QWORD *)(v25 + 16))
        {
          v19 = 0;
          v43 = v42 - 1;
          do
          {
            v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
            if ((v27 & 1) == 0)
              break;
            v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v26);
            swift_endAccess();
            v29 = *(_QWORD *)(v28 + 16);
            if (__OFSUB__(v29, v21))
            {
              __break(1u);
LABEL_23:
              __break(1u);
              goto LABEL_24;
            }
            if (v29 == v21)
              goto LABEL_21;
            swift_retain();
            swift_retain();
            Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v22, v23, v24, v21, (uint64_t)v44);
            outlined init with copy of TypesettingLanguage((uint64_t)v14, (uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
            v30 = *v7;
            v31 = v7[1];
            v32 = v7[2];
            v33 = *v7 + 48;
            swift_beginAccess();
            if (!*(_QWORD *)(*(_QWORD *)(v30 + 48) + 16))
              goto LABEL_25;
            specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
            if ((v34 & 1) == 0)
              goto LABEL_25;
            swift_endAccess();
            swift_beginAccess();
            v35 = *(_QWORD *)v33;
            if (!*(_QWORD *)(*(_QWORD *)v33 + 16))
              goto LABEL_26;
            v36 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
            if ((v37 & 1) == 0)
              goto LABEL_26;
            v38 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 16 * v36);
            swift_endAccess();
            if (v21 >= *(_QWORD *)(v38 + 16))
              goto LABEL_23;
            *(uint64_t *)((char *)v14 + v20) = v21 + 1;
            outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
            *(_OWORD *)a2 = v44[0];
            *(_OWORD *)(a2 + 16) = v44[1];
            *(_OWORD *)(a2 + 32) = v44[2];
            *(_QWORD *)(a2 + 48) = v45;
            if (v43 == v19)
            {
              v19 = v42;
              goto LABEL_21;
            }
            a2 += 56;
            v21 = *(uint64_t *)((char *)v14 + v20);
            v22 = *v14;
            v23 = v14[1];
            v24 = v14[2];
            swift_beginAccess();
            v25 = *(_QWORD *)(v22 + 48);
            ++v19;
          }
          while (*(_QWORD *)(v25 + 16));
        }
        swift_endAccess();
        __break(1u);
        goto LABEL_19;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      swift_endAccess();
      __break(1u);
LABEL_26:
      swift_endAccess();
      __break(1u);
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t result;
  id v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v5 = *(void **)v3;
  v27 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v26 = *(_DWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(_QWORD *)(v3 + 48);
  v10 = *(_QWORD *)(v3 + 56);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
LABEL_18:
    v19 = v9;
    goto LABEL_19;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = v10 - v9;
    if (v10 <= v9)
      v12 = v9;
    else
      v12 = v10;
    if (v11)
    {
      v13 = a2;
      v14 = 0;
      v24 = a3;
      v25 = v12 - v9;
      v15 = v9 ^ 0x7FFFFFFFFFFFFFFFLL;
      v16 = a3 - 1;
      while (v15 != v14)
      {
        v17 = v9 + v14;
        if (v9 + v14 < v9 || v10 < v17 + 1)
          goto LABEL_25;
        if (v25 == v14)
          goto LABEL_22;
        if (v15 == v14)
          goto LABEL_23;
        *(_QWORD *)v13 = v5;
        *(_QWORD *)(v13 + 8) = v27;
        *(_QWORD *)(v13 + 16) = v6;
        *(_QWORD *)(v13 + 24) = v7;
        *(_DWORD *)(v13 + 32) = v26;
        *(_QWORD *)(v13 + 40) = v8;
        *(_QWORD *)(v13 + 48) = v17;
        *(_QWORD *)(v13 + 56) = v17 + 1;
        if (v16 == v14)
        {
          v21 = v5;
          swift_retain();
          v19 = v9 + v14 + 1;
          a3 = v24;
          goto LABEL_19;
        }
        v18 = v5;
        swift_retain();
        ++v14;
        v13 += 64;
        if (v11 == v14)
          goto LABEL_16;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_16:
    v19 = v10;
    a3 = v10 - v9;
LABEL_19:
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v27;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = v26;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v19;
    return a3;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v22._countAndFlagsBits = 3943982;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  _print_unlocked<A, B>(_:_:)();
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  v53 = v7;
  v50 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v57 = (uint64_t *)((char *)&v46 - v10);
  MEMORY[0x24BDAC7A8](v11);
  v51 = (uint64_t)&v46 - v12;
  v13 = *v3;
  result = specialized Dictionary.startIndex.getter(*v3);
  v17 = result;
  v18 = v16 & 1;
  if (!a2)
  {
    result = 0;
LABEL_33:
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v15;
    *(_BYTE *)(a1 + 24) = v18;
    return result;
  }
  if (!a3)
  {
    result = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_40;
  v47 = a1;
  if ((v16 & 1) == 0)
  {
    result = 0;
    v19 = v13 + 64;
    v46 = v13 + 88;
    v20 = 1;
    v48 = a3;
    v49 = v13;
    while (1)
    {
      v21 = *(unsigned int *)(v13 + 36);
      if ((_DWORD)v21 != (_DWORD)v15)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        break;
      }
      v22 = v20;
      v23 = 1 << *(_BYTE *)(v13 + 32);
      if (v17 == v23)
      {
        v18 = 0;
LABEL_32:
        a1 = v47;
        goto LABEL_33;
      }
      if ((v17 & 0x8000000000000000) != 0 || (uint64_t)v17 >= v23)
        goto LABEL_35;
      v24 = v17 >> 6;
      if ((*(_QWORD *)(v19 + 8 * (v17 >> 6)) & (1 << v17)) == 0)
        goto LABEL_36;
      v54 = v22;
      v55 = a2;
      v56 = v21;
      v25 = v19;
      v26 = v52;
      v27 = v53;
      v28 = (uint64_t)&v52[*(int *)(v53 + 48)];
      v29 = *(_QWORD *)(v13 + 56);
      v30 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v17);
      v31 = *v30;
      v32 = v30[1];
      v33 = type metadata accessor for AccessibilityCustomAttributes.Value();
      outlined init with copy of TypesettingLanguage(v29 + *(_QWORD *)(*(_QWORD *)(v33 - 8) + 72) * v17, v28, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      *v26 = v31;
      v26[1] = v32;
      v34 = v57;
      *v57 = v31;
      v34[1] = v32;
      v13 = v49;
      outlined init with copy of TypesettingLanguage(v28, (uint64_t)v34 + *(int *)(v27 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_bridgeObjectRetain_n();
      result = outlined destroy of TypesettingConfiguration((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
      v35 = 1 << *(_BYTE *)(v13 + 32);
      if ((uint64_t)v17 >= v35)
        goto LABEL_37;
      v36 = *(_QWORD *)(v25 + 8 * v24);
      if ((v36 & (1 << v17)) == 0)
        goto LABEL_38;
      v37 = v56;
      if (*(_DWORD *)(v13 + 36) != (_DWORD)v56)
        goto LABEL_39;
      v19 = v25;
      v38 = v36 & (-2 << (v17 & 0x3F));
      if (v38)
      {
        v17 = __clz(__rbit64(v38)) | v17 & 0xFFFFFFFFFFFFFFC0;
        v39 = v48;
        v41 = v54;
        v40 = v55;
        goto LABEL_20;
      }
      v42 = v24 + 1;
      v43 = (unint64_t)(v35 + 63) >> 6;
      v39 = v48;
      v41 = v54;
      if (v24 + 1 >= v43)
      {
        v17 = 1 << *(_BYTE *)(v13 + 32);
        v40 = v55;
      }
      else
      {
        v44 = *(_QWORD *)(v19 + 8 * v42);
        v40 = v55;
        if (v44)
          goto LABEL_18;
        v42 = v24 + 2;
        if (v24 + 2 < v43)
        {
          v44 = *(_QWORD *)(v19 + 8 * v42);
          if (v44)
          {
LABEL_18:
            v17 = __clz(__rbit64(v44)) + (v42 << 6);
            goto LABEL_20;
          }
          while (v43 - 3 != v24)
          {
            v44 = *(_QWORD *)(v46 + 8 * v24++);
            if (v44)
            {
              v42 = v24 + 2;
              goto LABEL_18;
            }
          }
        }
        v17 = 1 << *(_BYTE *)(v13 + 32);
      }
LABEL_20:
      v45 = v51;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v57, v51, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
      outlined init with take of LocalizedStringKey.FormatArgument(v45, v40, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
      if (v41 == v39)
      {
        v18 = 0;
        v15 = v37;
        result = v39;
        goto LABEL_32;
      }
      a2 = v40 + *(_QWORD *)(v50 + 72);
      v20 = v41 + 1;
      result = v41;
      v15 = v37;
    }
  }
  __break(1u);
  return result;
}

{
  int *v3;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *v3;
  v6 = v3[1];
  result = *((_QWORD *)v3 + 1);
  v8 = *((_QWORD *)v3 + 2);
  if (!a2)
  {
    v10 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_13:
    v10 = a3;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v10 = v8;
    if (v8)
    {
      v11 = a2;
      v12 = 0;
      v13 = a3 - 1;
      while (v12 != 0x80000000)
      {
        if ((v8 & ~(v8 >> 63)) == v12)
          goto LABEL_16;
        *(_DWORD *)v11 = v12;
        *(_DWORD *)(v11 + 4) = v6;
        *(_QWORD *)(v11 + 8) = result;
        if (v13 == v12)
        {
          result = swift_bridgeObjectRetain();
          goto LABEL_13;
        }
        result = swift_bridgeObjectRetain();
        ++v12;
        v11 += 16;
        if (v8 == v12)
        {
          v10 = v8;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    *(_DWORD *)a1 = v5;
    *(_DWORD *)(a1 + 4) = v6;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v10;
    return v10;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _OWORD *a2, uint64_t a3)
{
  __int128 *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v21;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;

  v4 = *v3;
  v5 = *((_QWORD *)v3 + 2);
  v6 = *(__int128 *)((char *)v3 + 24);
  v7 = *((_QWORD *)v3 + 5);
  v8 = *((_QWORD *)v3 + 6);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_43;
  }
  if (!a3)
  {
LABEL_43:
    *(_OWORD *)result = v4;
    *(_QWORD *)(result + 16) = v5;
    *(_OWORD *)(result + 24) = v6;
    *(_QWORD *)(result + 40) = v7;
    *(_QWORD *)(result + 48) = v8;
    *(_QWORD *)(result + 56) = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = v8 + 32;
      v11 = v9 - 1;
      v12 = a3 - 1;
      if (v9 - 1 >= (unint64_t)(a3 - 1))
        v13 = a3 - 1;
      else
        v13 = v9 - 1;
      v14 = v13 + 1;
      if (v14 < 0x17)
        goto LABEL_39;
      v15 = v11 >= v12 ? a3 - 1 : v9 - 1;
      v16 = &a2[2 * v15] >= a2 && (char *)&a2[2 * v15] + 8 >= (char *)a2 + 8;
      v17 = v16 && &a2[2 * v15 + 1] >= a2 + 1;
      v18 = v17 && (char *)&a2[2 * v15 + 1] + 8 >= (char *)a2 + 24;
      v19 = v15 >> 59;
      if (!v18 || v19 != 0)
        goto LABEL_39;
      if (v11 >= v12)
        v11 = a3 - 1;
      v21 = 2 * v11;
      if (v21 * 16 + v8 + 64 <= (unint64_t)a2 || v10 >= (unint64_t)&a2[v21 + 2])
      {
        v23 = a2;
        v24 = v14 & 1;
        if ((v14 & 1) == 0)
          v24 = 2;
        v25 = v14 - v24;
        v26 = v25 + 1;
        a2 += 2 * v25;
        v27 = v25;
        v28 = (__int128 *)(v8 + 32);
        do
        {
          v30 = *v28;
          v29 = v28[1];
          v31 = v28[3];
          v23[2] = v28[2];
          v23[3] = v31;
          *v23 = v30;
          v23[1] = v29;
          v23 += 4;
          v28 += 4;
          v27 -= 2;
        }
        while (v27);
      }
      else
      {
LABEL_39:
        v25 = 0;
        v26 = 1;
      }
      while (1)
      {
        v32 = (_OWORD *)(v10 + 32 * v25);
        v33 = v32[1];
        *a2 = *v32;
        a2[1] = v33;
        if (a3 == v26)
          break;
        v25 = v26++;
        a2 += 2;
        if (v9 + 1 == v26)
          goto LABEL_42;
      }
    }
    else
    {
LABEL_42:
      a3 = v9;
    }
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CTLine *v11;
  const __CFArray *RunCount;
  id v13;
  id v14;
  const __CTLine *v15;
  uint64_t v16;
  const __CFArray *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  int v21;

  v5 = *(void **)v3;
  v4 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v21 = *(_DWORD *)(v3 + 40);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_23:
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_DWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = a3;
    return;
  }
  if (((unint64_t)a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    v19 = a1;
    v20 = a3;
    v10 = 0;
    while (1)
    {
      if ((v6 & 1) != 0)
      {
        v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
        if (!v11)
        {
          if (!v10)
            goto LABEL_21;
          goto LABEL_12;
        }
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        swift_release();
        v11 = (const __CTLine *)v5;
      }
      RunCount = _CTLineGetRunCount(v11);

      if (v10 == RunCount)
      {
LABEL_21:
        a3 = v10;
LABEL_22:
        a1 = v19;
        goto LABEL_23;
      }
      if ((v6 & 1) == 0)
      {
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        swift_release();
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);

        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        swift_release();
        v15 = (const __CTLine *)v5;
        v14 = v5;
        v16 = v4;
LABEL_16:
        v17 = _CTLineGetRunCount(v15);

        v18 = v16;
        goto LABEL_17;
      }
LABEL_12:
      v13 = (id)_NSTextLineFragmentGetCTLine(v5);
      if (!v13)
        goto LABEL_26;
      v14 = v13;
      outlined copy of Text.Layout.Line.Line(v5, v4, v6);
      v15 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      v16 = 0;
      v17 = 0;
      v18 = 0;
      if (v15)
        goto LABEL_16;
LABEL_17:
      outlined consume of Text.Layout.Line.Line(v5, v4, v6);
      if ((uint64_t)v10 >= (uint64_t)v17)
      {
        __break(1u);
        break;
      }
      *(_QWORD *)v9 = v14;
      *(_QWORD *)(v9 + 8) = v10;
      *(_QWORD *)(v9 + 16) = v7;
      *(_QWORD *)(v9 + 24) = v8;
      *(_DWORD *)(v9 + 32) = v21;
      *(_QWORD *)(v9 + 40) = v18;
      v9 += 48;
      v10 = (const __CFArray *)((char *)v10 + 1);
      a3 = v20;
      if (v20 == v10)
        goto LABEL_22;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  CFIndex GlyphCount;
  uint64_t v13;
  const __CTLine *v14;
  const __CTLine *v15;
  void *v16;
  CFIndex v17;
  uint64_t v18;
  void *v19;
  CFIndex v20;
  int v22;
  const __CTLine *v23;

  v5 = *(_QWORD *)(v3 + 8);
  v23 = *(const __CTLine **)v3;
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v22 = *(_DWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  if (!a2)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v9 = a3;
  if (!a3)
  {
LABEL_12:
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = v22;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v10 = a2;
    v11 = (id)_CTLineGetRunAtIndex(v23, v5);
    GlyphCount = CTRunGetGlyphCount((CTRunRef)v11);

    if (GlyphCount)
    {
      v13 = 1;
      while (1)
      {
        v14 = v23;
        swift_retain_n();
        v15 = v14;
        v16 = (id)_CTLineGetRunAtIndex(v15, v5);
        v17 = CTRunGetGlyphCount((CTRunRef)v16);
        swift_release();

        if (v13 - 1 >= v17)
          break;
        *(_QWORD *)v10 = v15;
        *(_QWORD *)(v10 + 8) = v5;
        *(_QWORD *)(v10 + 16) = v6;
        *(_QWORD *)(v10 + 24) = v7;
        *(_DWORD *)(v10 + 32) = v22;
        *(_QWORD *)(v10 + 40) = v8;
        *(_QWORD *)(v10 + 48) = v13 - 1;
        *(_QWORD *)(v10 + 56) = v13;
        if (v9 == v13)
          goto LABEL_12;
        v18 = v13 + 1;
        v19 = (id)_CTLineGetRunAtIndex(v15, v5);
        v20 = CTRunGetGlyphCount((CTRunRef)v19);

        v10 += 64;
        if (v13++ == v20)
        {
          v9 = v18 - 1;
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
}

_BYTE *specialized Sequence._copySequenceContents(initializing:)(_BYTE *result, _BYTE *a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    LOBYTE(v4) = 0;
    a3 = 0;
LABEL_18:
    *result = v4;
    return (_BYTE *)a3;
  }
  if (!a3)
  {
    LOBYTE(v4) = 0;
    goto LABEL_18;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
    while (1)
    {
      v6 = 0;
      v7 = v5;
      while (v4 != *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter
                    + v6
                    + 32))
      {
        if (++v6 == 12)
        {
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
      }
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_19;
      if (v8 >= 12)
        v8 = 11;
      if ((unint64_t)v8 >= 0xC)
        break;
      v4 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v8 + 32);
      *a2 = v3;
      if (v5 == a3)
        goto LABEL_18;
      ++v5;
      ++a2;
      v3 = v4;
      if ((_DWORD)v4 == 11)
      {
        LOBYTE(v4) = 11;
        a3 = v7;
        goto LABEL_18;
      }
    }
LABEL_20:
    __break(1u);
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, char *a2, unint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[11];
  _BYTE v22[28];

  v4 = (_QWORD *)result;
  v5 = *v3;
  if (!a2)
  {
LABEL_10:
    v10 = 0;
LABEL_13:
    *v4 = v5;
    v4[1] = v10;
    return v10;
  }
  if (!a3)
  {
LABEL_12:
    v10 = a3;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = a2;
    result = swift_beginAccess();
    v8 = *(_QWORD *)(v5 + 160);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = 0;
      v11 = (_OWORD *)(v8 + 32);
      while (v10 < v9)
      {
        v21[0] = *v11;
        v12 = v11[1];
        v13 = v11[2];
        v14 = v11[4];
        v21[3] = v11[3];
        v21[4] = v14;
        v21[1] = v12;
        v21[2] = v13;
        v15 = v11[5];
        v16 = v11[6];
        v17 = v11[8];
        v21[7] = v11[7];
        v21[8] = v17;
        v21[5] = v15;
        v21[6] = v16;
        v18 = v11[9];
        v19 = v11[10];
        v20 = v11[11];
        *(_OWORD *)&v22[12] = *(_OWORD *)((char *)v11 + 188);
        v21[10] = v19;
        *(_OWORD *)v22 = v20;
        v21[9] = v18;
        memmove(v7, v11, 0xCCuLL);
        if (a3 - 1 == v10)
        {
          outlined retain of LayoutGestureBox.Child((uint64_t)v21);
          goto LABEL_12;
        }
        v7 += 208;
        result = outlined retain of LayoutGestureBox.Child((uint64_t)v21);
        v9 = *(_QWORD *)(v8 + 16);
        ++v10;
        v11 += 13;
        if (v10 == v9)
          goto LABEL_13;
      }
      __break(1u);
      goto LABEL_15;
    }
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 *v3;
  _OWORD *v4;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v6 = v3[1];
  v35 = *v3;
  v36 = v6;
  v37 = v3[2];
  v38 = *((unint64_t *)v3 + 6);
  if (!a2)
  {
    v8 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_9:
    v8 = a3;
    goto LABEL_11;
  }
  if (a3 < 0)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    v4 = a2;
    if (one-time initialization token for _lock == -1)
      goto LABEL_5;
  }
  swift_once();
LABEL_5:
  v8 = 0;
  while (1)
  {
    v9 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    v10 = *((_QWORD *)&v36 + 1);
    v11 = v37;
    __swift_project_boxed_opaque_existential_1(&v35, *((uint64_t *)&v36 + 1));
    v12 = ViewList.count.getter(v10, v11);
    static Update.end()();
    _MovableLockUnlock(v9);
    if (v8 == v12)
      break;
    _VariadicView_Children.subscript.getter(v8, (uint64_t)v24);
    _MovableLockLock(v9);
    specialized static Update.begin()();
    v13 = *((_QWORD *)&v36 + 1);
    v14 = v37;
    __swift_project_boxed_opaque_existential_1(&v35, *((uint64_t *)&v36 + 1));
    v15 = ViewList.count.getter(v13, v14);
    static Update.end()();
    _MovableLockUnlock(v9);
    if (v8 >= v15)
    {
      __break(1u);
      goto LABEL_13;
    }
    *((_QWORD *)&v38 + 1) = ++v8;
    v16 = v26;
    v31 = v25;
    v32 = v26;
    v17 = v27;
    v18 = v28;
    v33 = v27;
    v34 = v28;
    v19 = v24[0];
    v20 = v24[1];
    v4[2] = v25;
    v4[3] = v16;
    v4[4] = v17;
    v4[5] = v18;
    *v4 = v19;
    v4[1] = v20;
    v4 += 6;
    v29 = v19;
    v30 = v20;
    if (a3 == v8)
      goto LABEL_9;
  }
LABEL_11:
  v21 = v36;
  *a1 = v35;
  a1[1] = v21;
  v22 = v38;
  a1[2] = v37;
  a1[3] = v22;
  return v8;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;

  if (!a2)
  {
    LODWORD(v10) = 0;
    v6 = 0;
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
    LODWORD(v10) = 0;
    v6 = 0;
    goto LABEL_18;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (HIDWORD(a5))
    {
      v5 = 0;
      v6 = 0;
      v7 = HIDWORD(a5) - 1;
      while (a4)
      {
        v8 = a4 + v6;
        if (v7 == (_DWORD)v5)
          v6 = 0;
        else
          v6 += *(_DWORD *)(v8 + 8);
        *(_QWORD *)(a2 + 8 * v5) = v8;
        if (a3 - 1 == v5)
        {
          LODWORD(v10) = a3;
          goto LABEL_18;
        }
        v9 = v5++;
        if (v7 == v9 && !v6)
        {
          v10 = HIDWORD(a5);
          a3 = v5;
          goto LABEL_18;
        }
      }
      goto LABEL_20;
    }
    v6 = 0;
    a3 = 0;
    LODWORD(v10) = 0;
LABEL_18:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_DWORD *)(result + 16) = v10;
    *(_DWORD *)(result + 20) = v6;
    return a3;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  int32x4_t v22;
  const float *v23;
  uint64_t v24;
  const float *v25;
  float *v26;
  float *v27;
  float32x4x2_t v28;
  float32x4x3_t v29;

  v4 = *(_DWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *(_DWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = v5 + 32;
      v8 = v6 - 1;
      v9 = a3 - 1;
      if (v6 - 1 >= (unint64_t)(a3 - 1))
        v10 = a3 - 1;
      else
        v10 = v6 - 1;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) < 0x1D)
        goto LABEL_9;
      v12 = 0;
      if (v8 >= v9)
        v15 = a3 - 1;
      else
        v15 = v6 - 1;
      v16 = !is_mul_ok(v15, 0xCuLL);
      v17 = 12 * v15;
      v18 = a2 + 4 + 12 * v15;
      v13 = 1;
      if (v18 < a2 + 4 || v16 || a2 + 8 + v17 < a2 + 8 || v16 || a2 + v17 < a2 || v16)
        goto LABEL_10;
      v19 = v8 >= v9 ? a3 - 1 : v6 - 1;
      if (v5 + 8 * v19 + 40 > a2 && v7 < a2 + 12 * v19 + 12)
      {
LABEL_9:
        v12 = 0;
        v13 = 1;
        goto LABEL_10;
      }
      v20 = (float *)a2;
      v21 = v11 & 7;
      if ((v11 & 7) == 0)
        v21 = 8;
      v12 = v11 - v21;
      v13 = v12 + 1;
      a2 += 12 * v12;
      v22 = vdupq_n_s32(v4);
      v23 = (const float *)(v5 + 64);
      v24 = v12;
      do
      {
        v25 = v23 - 8;
        v28 = vld2q_f32(v25);
        *(float32x4x2_t *)v29.val[1].f32 = vld2q_f32(v23);
        v26 = v20 + 24;
        vst3q_f32(v20, *(float32x4x3_t *)v22.i8);
        v27 = v20 + 12;
        v29.val[0] = (float32x4_t)v22;
        vst3q_f32(v27, v29);
        v23 += 16;
        v20 = v26;
        v24 -= 8;
      }
      while (v24);
LABEL_10:
      while (1)
      {
        v14 = *(_QWORD *)(v7 + 8 * v12);
        *(_DWORD *)a2 = v4;
        *(_QWORD *)(a2 + 4) = v14;
        if (a3 == v13)
          break;
        v12 = v13++;
        a2 += 12;
        if (v6 + 1 == v13)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      a3 = v6;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v4 = (_QWORD *)result;
  if (!a2)
  {
    v5 = 0;
    goto LABEL_10;
  }
  v5 = a3;
  if (!a3)
  {
LABEL_10:
    *v4 = v3;
    v4[1] = v5;
    return v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = a2;
    v7 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 88);
    v8 = 0;
    if (v7())
    {
      while (1)
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 96))(v12, v8);
        v9 = swift_retain();
        v10 = ((uint64_t (*)(uint64_t))v7)(v9);
        result = swift_release();
        if (v8 >= v10)
          break;
        v11 = v12[1];
        *v6 = v12[0];
        v6[1] = v11;
        if (v5 - 1 == v8)
          goto LABEL_10;
        ++v8;
        v6 += 2;
        if (v8 == ((uint64_t (*)(uint64_t))v7)(result))
          goto LABEL_8;
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_8:
    v5 = v8;
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;

  v4 = *v3;
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    *result = v4;
    result[1] = a3;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(v4 + 16))
    {
      v5 = 0;
      while (1)
      {
        *(_OWORD *)(a2 + 16 * v5) = *(_OWORD *)(v4 + 32 + 16 * v5);
        if (a3 - 1 == v5)
          goto LABEL_12;
        v6 = *(_QWORD *)(v4 + 16);
        v7 = v5 + 1 >= v6;
        if (v5 + 1 == v6)
        {
          a3 = v5 + 1;
          goto LABEL_12;
        }
        ++v5;
        if (v7)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  int *v3;
  int v4;
  uint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  v4 = *v3;
  v5 = *((_QWORD *)v3 + 1);
  v6 = *((_BYTE *)v3 + 16);
  v7 = *((_BYTE *)v3 + 17);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    *(_DWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    *(_BYTE *)(result + 16) = v6;
    goto LABEL_19;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (v8)
    {
      v9 = 0;
      v10 = v5 + 32;
      v11 = (int *)(v5 + 36);
      v12 = (int *)(v5 + 32);
      while (1)
      {
        if ((v6 & 1) != 0)
        {
          if (v9 >= v8)
            goto LABEL_21;
          v13 = (int *)(v10 + 12 * v9 + 4);
          v14 = v12[2];
          v15 = v12;
        }
        else
        {
          if (v9 >= v8)
            goto LABEL_22;
          v15 = (int *)(v10 + 8 * v9);
          v14 = v9;
          v13 = v11;
        }
        if (v9 >= v8)
          break;
        v16 = *v13;
        v17 = *v15;
        *(_DWORD *)a2 = v4;
        *(_DWORD *)(a2 + 4) = v17;
        *(_DWORD *)(a2 + 8) = v16;
        *(_DWORD *)(a2 + 12) = v14;
        *(_BYTE *)(a2 + 16) = v7;
        if (a3 - 1 == v9)
          goto LABEL_16;
        ++v9;
        v8 = *(_QWORD *)(v5 + 16);
        v12 += 3;
        v11 += 2;
        a2 += 20;
        if (v9 == v8)
          goto LABEL_18;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v9 = 0;
LABEL_18:
    *(_DWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    *(_BYTE *)(result + 16) = v6;
    a3 = v9;
LABEL_19:
    *(_BYTE *)(result + 17) = v7;
    *(_QWORD *)(result + 24) = a3;
    return a3;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, _QWORD);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE __dst[14];
  unsigned __int8 v43;
  uint64_t v44;

  v4 = v3;
  v44 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for Data.Deallocator();
  v41 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t (**)())((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a2)
    goto LABEL_35;
  if (!a3)
  {
    v14 = 0;
    goto LABEL_40;
  }
  if (a3 < 0)
LABEL_47:
    __break(1u);
  if (!v4[5])
  {
LABEL_35:
    a3 = 0;
    v14 = 0;
    goto LABEL_40;
  }
  v36 = a1;
  a1 = (_QWORD *)v4[2];
  if (!a1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v11 = 0;
  v12 = (_QWORD *)v4[4];
  v13 = v12 + 1;
  v40 = *MEMORY[0x24BDCDBA8];
  v14 = 1;
  v38 = a3;
  v39 = v8;
  while (1)
  {
    v15 = *v12;
    if ((*v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v16 = *v13;
    swift_retain();
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_42;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v4;
    *v10 = partial apply for closure #1 in ArchiveReader.subscript.getter;
    v10[1] = (uint64_t (*)())v17;
    (*(void (**)(uint64_t (**)(), _QWORD, uint64_t))(v41 + 104))(v10, v40, v8);
    Data.Deallocator._deallocator.getter();
    if (v16)
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      if (v16 < 0xF)
      {
        v22 = (char *)__DataStorage._bytes.getter();
        if (v22)
        {
          v23 = __DataStorage._offset.getter();
          if (__OFSUB__(0, v23))
            goto LABEL_46;
          v22 -= v23;
        }
        v24 = __DataStorage._length.getter();
        if (v24 >= (uint64_t)v16)
          v25 = v16;
        else
          v25 = v24;
        v26 = &v22[v25];
        if (v22)
        {
          v27 = v26 - v22;
        }
        else
        {
          v26 = 0;
          v27 = 0;
        }
        if ((v27 & 0x8000000000000000) != 0)
          goto LABEL_44;
        if (v27 > 0xFF)
          goto LABEL_45;
        v37 = v18;
        v28 = 0;
        v29 = v27;
        memset(__dst, 0, sizeof(__dst));
        v43 = v27;
        v30 = 0;
        if (v22 && v26 != v22)
        {
          memcpy(__dst, v22, v26 - v22);
          v30 = __dst[12];
          v28 = __dst[13];
          v29 = v43;
        }
        v19 = *(_QWORD *)__dst;
        v31 = *(unsigned int *)&__dst[8];
        v32 = v29;
        swift_release();
        swift_release();
        v20 = v31 | (v30 << 32) | (v28 << 40) | (v32 << 48);
      }
      else if (v16 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = v16;
        swift_release();
        v20 = v18 | 0x8000000000000000;
      }
      else
      {
        swift_release();
        v19 = v16 << 32;
        v20 = v18 | 0x4000000000000000;
      }
    }
    else
    {
      v21 = (void (*)(char *, _QWORD))Data.Deallocator._deallocator.getter();
      v21((char *)a1 + v15, 0);
      swift_release();
      swift_release();
      v19 = 0;
      v20 = 0xC000000000000000;
    }
    v8 = v39;
    (*(void (**)(uint64_t (**)(), uint64_t))(v41 + 8))(v10, v39);
    v33 = v4[5];
    if (v14 - 1 >= v33)
      goto LABEL_43;
    *a2 = v19;
    a2[1] = v20;
    a3 = v38;
    if (v38 == v14)
    {
      v14 = v38;
      goto LABEL_39;
    }
    if (v14 == v33)
      break;
    ++v11;
    ++v14;
    v12 = (_QWORD *)(v4[4] + 16 * v11);
    v13 = v12 + 1;
    a1 = (_QWORD *)v4[2];
    a2 += 2;
    if (!a1)
      goto LABEL_34;
  }
  a3 = v33;
LABEL_39:
  a1 = v36;
LABEL_40:
  *a1 = v4;
  a1[1] = a3;
  return v14;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(a4 + 48) + 16 * v12;
    v14 = *(_QWORD *)v13;
    LOBYTE(v13) = *(_BYTE *)(v13 + 8);
    *(_QWORD *)a2 = v14;
    *(_BYTE *)(a2 + 8) = v13;
    a2 += 16;
    if (v9 == a3)
      goto LABEL_35;
  }
  v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    v7 = 0;
    v8 = v15;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    v15 = v8;
LABEL_19:
    v18 = __clz(__rbit64(v16));
    v7 = (v16 - 1) & v16;
    v12 = v18 + (v15 << 6);
    v8 = v15;
    goto LABEL_8;
  }
  v17 = v15 + 2;
  if (v15 + 2 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v15 = v17;
    goto LABEL_19;
  }
  v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    v7 = 0;
    v8 = v15 + 2;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
    goto LABEL_15;
  v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
    goto LABEL_18;
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
  {
LABEL_24:
    result[1] = 0;
    result[2] = 0;
    *result = a4;
    return 0;
  }
  if (!a3)
  {
    v7 = 0;
    v6 = 0;
LABEL_28:
    *result = a4;
    result[1] = v6;
    result[2] = v7;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
    goto LABEL_36;
  v4 = *(_QWORD *)(a4 + 16);
  if (!v4)
  {
    v7 = 0;
    v6 = 0;
    a3 = 0;
    goto LABEL_28;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    v8 = a4 + 32 + 24 * v6;
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(unsigned __int8 *)(v8 + 16);
    if (v11)
      break;
    v14 = v9 + v7;
    if (__OFADD__(v9, v7))
      goto LABEL_33;
    v13 = __OFADD__(v7++, 1);
    if (v13)
      goto LABEL_34;
    v13 = __OFSUB__(v10, v9);
    v15 = v10 - v9;
    if (v13)
      goto LABEL_35;
LABEL_17:
    if (v7 >= v15)
    {
      v7 = 0;
      ++v6;
    }
LABEL_20:
    *(_QWORD *)(a2 + 8 * v5) = v14;
    if (a3 - 1 == v5)
      goto LABEL_28;
    if ((uint64_t)v6 >= v4)
    {
      a3 = v5 + 1;
      goto LABEL_28;
    }
    ++v5;
    if (v6 >= *(_QWORD *)(a4 + 16))
    {
      __break(1u);
      goto LABEL_24;
    }
  }
  if (v11 != 1)
  {
    ++v6;
    v14 = v9;
    goto LABEL_20;
  }
  v12 = v10 - 1;
  if (!__OFSUB__(v10, 1))
  {
    v13 = __OFSUB__(v12, v7);
    v14 = v12 - v7;
    if (v13)
      goto LABEL_30;
    v13 = __OFADD__(v7++, 1);
    if (v13)
      goto LABEL_31;
    v13 = __OFSUB__(v10, v9);
    v15 = v10 - v9;
    if (v13)
      goto LABEL_32;
    goto LABEL_17;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;

  if (!a2)
  {
LABEL_27:
    a3 = 0;
    result[1] = 0;
    result[2] = 0;
    *result = a4;
LABEL_32:
    result[3] = a6;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v9 = 0;
    v8 = 0;
LABEL_31:
    *result = a4;
    result[1] = v8;
    result[2] = v9;
    goto LABEL_32;
  }
  if (a3 < 0)
    goto LABEL_41;
  v6 = *(_QWORD *)(a4 + 16);
  if (!v6)
  {
    v9 = 0;
    v8 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = a4 + 32 + 24 * v8;
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(unsigned __int8 *)(v10 + 16);
    if (!v13)
    {
      v16 = v11 + v9;
      if (__OFADD__(v11, v9))
        goto LABEL_38;
      v15 = __OFADD__(v9++, 1);
      if (v15)
        goto LABEL_39;
      v15 = __OFSUB__(v12, v11);
      v17 = v12 - v11;
      if (v15)
        goto LABEL_40;
      goto LABEL_17;
    }
    if (v13 == 1)
      break;
    v18 = 1;
    v15 = __OFADD__(a6, v11);
    v19 = a6 + v11;
    if (v15)
      goto LABEL_33;
LABEL_23:
    *(_QWORD *)(a2 + 8 * v7) = v19;
    v8 += v18;
    if (a3 - 1 == v7)
      goto LABEL_31;
    if (v8 >= v6)
    {
      a3 = v7 + 1;
      goto LABEL_31;
    }
    ++v7;
    if (v8 >= *(_QWORD *)(a4 + 16))
    {
      __break(1u);
      goto LABEL_27;
    }
  }
  v14 = v12 - 1;
  if (__OFSUB__(v12, 1))
    goto LABEL_34;
  v15 = __OFSUB__(v14, v9);
  v16 = v14 - v9;
  if (v15)
    goto LABEL_35;
  v15 = __OFADD__(v9++, 1);
  if (v15)
    goto LABEL_36;
  v15 = __OFSUB__(v12, v11);
  v17 = v12 - v11;
  if (v15)
    goto LABEL_37;
LABEL_17:
  v18 = v9 >= v17;
  if (v9 >= v17)
    v9 = 0;
  v19 = a6 + v16;
  if (!__OFADD__(a6, v16))
    goto LABEL_23;
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  id result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v48 = a3;
  v49 = a1;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v59 = v5;
  v57 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v56 = (uint64_t *)((char *)&v48 - v6);
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v48 - v8;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v53 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v48 - v10;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v58 = (char *)&v48 - v17;
  v52 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0);
  MEMORY[0x24BDAC7A8](v52);
  v19 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void **)v3;
  v20 = *(_QWORD *)(v3 + 8);
  v22 = *(_BYTE *)(v3 + 16);
  v23 = *(_QWORD *)(v3 + 24);
  v24 = *(_QWORD *)(v3 + 32);
  v50 = *(_DWORD *)(v3 + 40);
  v51 = v3;
  v25 = v3 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v27 = v58;
  v26(v58, v25, v12);
  *(_QWORD *)v19 = v21;
  *(_QWORD *)(v19 + 8) = v20;
  *(_BYTE *)(v19 + 16) = v22;
  *(_QWORD *)(v19 + 24) = v23;
  *(_QWORD *)(v19 + 32) = v24;
  *(_DWORD *)(v19 + 40) = v50;
  v26(v15, (uint64_t)v27, v12);
  outlined copy of Text.Layout.Line.Line(v21, v20, v22);
  v28 = v56;
  RangeSet.ranges.getter();
  v29 = v53;
  v30 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30(v15, v12);
  v31 = v57;
  v32 = (uint64_t)v55;
  v33 = v59;
  (*(void (**)(char *, uint64_t *, uint64_t))(v57 + 32))(v55, v28, v59);
  v34 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(&v54[*(int *)(v29 + 48)], v32, v33);
  *v34 = 0;
  v34[1] = 0;
  v30(v58, v12);
  outlined destroy of Date?(v32, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t)type metadata accessor for RangeSet<>.IndexSequence, (uint64_t (*)(_QWORD))type metadata accessor for RangeSet<Int><>.IndexSequence);
  v35 = (uint64_t *)(v19 + *(int *)(v52 + 20));
  outlined init with take of Date?((uint64_t)v34, (uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t)type metadata accessor for RangeSet<>.IndexSequence.Iterator, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RangeSet<Int><>.IndexSequence);
  result = (id)outlined destroy of TypesettingConfiguration(v51, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  if (!a2)
  {
LABEL_20:
    v37 = 0;
    goto LABEL_23;
  }
  v37 = v48;
  if (!v48)
  {
LABEL_23:
    outlined init with take of LocalizedStringKey.FormatArgument(v19, v49, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
    return (id)v37;
  }
  if ((v48 & 0x8000000000000000) == 0)
  {
    v38 = *v35;
    if (v38 < RangeSet.Ranges.count.getter())
    {
      v55 = (char *)v19;
      v56 = v35;
      v39 = v35[1];
      v40 = *(void **)v19;
      v41 = *(_QWORD *)(v19 + 8);
      LODWORD(v58) = *(unsigned __int8 *)(v19 + 16);
      v42 = *(_QWORD *)(v19 + 24);
      v43 = *(_QWORD *)(v19 + 32);
      LODWORD(v57) = *(_DWORD *)(v19 + 40);
      result = (id)RangeSet.Ranges.subscript.getter();
      v44 = v60 + v39;
      if (!__OFADD__(v60, v39))
      {
        v19 = 1;
        while (!__OFADD__(v39++, 1))
        {
          result = (id)RangeSet.Ranges.subscript.getter();
          if (__OFSUB__(v61, v60))
            goto LABEL_25;
          if (v39 >= v61 - v60)
          {
            v39 = 0;
            *v56 = ++v38;
          }
          if ((v58 & 1) != 0)
          {
            outlined copy of Text.Layout.Line.Line(v40, v41, 1);
            result = (id)_NSTextLineFragmentGetCTLine(v40);
            if (!result)
              goto LABEL_27;
            v46 = result;
            outlined consume of Text.Layout.Line.Line(v40, v41, 1);
            v47 = 0;
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(v40, v41, 0);
            outlined copy of Text.Layout.Line.Line(v40, v41, 0);

            swift_release();
            v47 = v41;
            v46 = v40;
          }
          *(_QWORD *)a2 = v46;
          *(_QWORD *)(a2 + 8) = v44;
          *(_QWORD *)(a2 + 16) = v42;
          *(_QWORD *)(a2 + 24) = v43;
          *(_DWORD *)(a2 + 32) = v57;
          *(_QWORD *)(a2 + 40) = v47;
          if (v37 == v19)
            goto LABEL_22;
          if (v38 >= RangeSet.Ranges.count.getter())
          {
            v37 = v19;
LABEL_22:
            v19 = (uint64_t)v55;
            v56[1] = v39;
            goto LABEL_23;
          }
          ++v19;
          result = (id)RangeSet.Ranges.subscript.getter();
          a2 += 48;
          v44 = v60 + v39;
          if (__OFADD__(v60, v39))
            goto LABEL_19;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_19:
      __break(1u);
    }
    goto LABEL_20;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = v3;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - v14;
  v16 = type metadata accessor for Date();
  v48 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v46 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v45 = (char *)&v40 - v19;
  v20 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(v4, (uint64_t)v22, v23);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v22, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v40 = a3;
    v41 = a1;
    v25 = (uint64_t)&v22[*(int *)(v20 + 24)];
    outlined init with copy of Date?(v25, (uint64_t)v12);
    v26 = v48;
    v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
    if (v27((uint64_t)v12, 1, v16) == 1)
    {
      a3 = 0;
LABEL_11:
      outlined destroy of Date?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v15, 1, 1, v16);
      a1 = v41;
LABEL_13:
      outlined destroy of Date?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    }
    else
    {
      a3 = 0;
      v28 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
      v43 = v40 - 1;
      v44 = v28;
      v42 = v12;
      while (1)
      {
        v49 = a3;
        v29 = a2;
        v30 = (uint64_t)v46;
        v31 = v44;
        v44(v46, (uint64_t)v12, v16);
        v32 = v25;
        v33 = v25;
        v34 = (uint64_t)v15;
        v35 = v47;
        outlined init with copy of Date?(v33, v47);
        TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(v30);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v30, v16);
        v36 = v35;
        v15 = (char *)v34;
        outlined init with take of Date?(v36, v34, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Date?);
        if (v27(v34, 1, v16) == 1)
        {
          a1 = v41;
          a3 = v49;
          goto LABEL_13;
        }
        v37 = v45;
        v31(v45, v34, v16);
        v31(v29, (uint64_t)v37, v16);
        v38 = v49;
        if (v43 == v49)
          break;
        v26 = v48;
        a2 = &v29[*(_QWORD *)(v48 + 72)];
        v25 = v32;
        v39 = v32;
        v12 = v42;
        outlined init with copy of Date?(v39, (uint64_t)v42);
        v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
        a3 = v38 + 1;
        if (v27((uint64_t)v12, 1, v16) == 1)
          goto LABEL_11;
      }
      a3 = v40;
      a1 = v41;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t (*v34)(_QWORD);
  uint64_t result;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  uint64_t (*v50)(void);
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  int v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;

  v4 = v3;
  v8 = type metadata accessor for Calendar.SearchDirection();
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v81 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v79 = *(_QWORD *)(v10 - 8);
  v80 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v78 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Calendar.MatchingPolicy();
  v89 = *(_QWORD *)(v12 - 8);
  v90 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v77 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Calendar();
  v75 = *(_QWORD *)(v14 - 8);
  v76 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v59 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v59 - v23;
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v61 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v88 = (char *)&v59 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v72 = (char *)&v59 - v31;
  v73 = type metadata accessor for AlignedTimelineSchedule.Entries();
  MEMORY[0x24BDAC7A8](v73);
  v33 = (char *)&v59 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(v4, (uint64_t)v33, v34);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v33, a1, (uint64_t (*)(_QWORD))type metadata accessor for AlignedTimelineSchedule.Entries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v60 = a1;
    outlined init with copy of Date?((uint64_t)v33, (uint64_t)v21);
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v36(v21, 1, v25) == 1)
    {
      v37 = 0;
LABEL_14:
      outlined destroy of Date?((uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
    }
    else
    {
      v87 = v36;
      v37 = 0;
      v67 = *MEMORY[0x24BDCF020];
      v66 = *MEMORY[0x24BDCF0B0];
      v65 = *MEMORY[0x24BDCF068];
      v38 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v59 = a3;
      v62 = a3 - 1;
      v70 = v21;
      v71 = v24;
      v69 = v25;
      v68 = v26;
      v64 = v38;
      v63 = v33;
      while (1)
      {
        v85 = v37;
        v86 = a2;
        v38(v88, v21, v25);
        v39 = v74;
        static Calendar.current.getter();
        v84 = &v33[*(int *)(v73 + 24)];
        v40 = v77;
        (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v77, v67, v90);
        v42 = v78;
        v41 = v79;
        v43 = v80;
        (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, v66, v80);
        v45 = v81;
        v44 = v82;
        v46 = v18;
        v47 = v83;
        (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, v65, v83);
        Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
        v48 = v47;
        v18 = v46;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v48);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
        v25 = v69;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v40, v90);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v39, v76);
        v49 = v87;
        if (v87(v18, 1, v25) == 1)
        {
          v50 = MEMORY[0x24BDCE900];
          outlined destroy of Date?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
          v33 = v63;
          outlined destroy of Date?((uint64_t)v63, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
          v26 = v68;
          v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56);
          v51(v33, 1, 1, v25);
          v24 = v71;
          v52 = v64;
          v64(v71, v88, v25);
        }
        else
        {
          v53 = v61;
          v54 = v64;
          v64(v61, v18, v25);
          v33 = v63;
          outlined destroy of Date?((uint64_t)v63, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
          v54(v33, v53, v25);
          v26 = v68;
          v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56);
          v51(v33, 0, 1, v25);
          v24 = v71;
          v52 = v54;
          v54(v71, v88, v25);
        }
        v51(v24, 0, 1, v25);
        v55 = v49(v24, 1, v25);
        v37 = v85;
        v56 = v86;
        v21 = v70;
        if (v55 == 1)
          break;
        v57 = v52;
        v58 = v72;
        v57(v72, v24, v25);
        v57(v56, v58, v25);
        if (v62 == v37)
        {
          a1 = v60;
          a3 = v59;
          goto LABEL_16;
        }
        v38 = v57;
        a2 = &v56[*(_QWORD *)(v26 + 72)];
        outlined init with copy of Date?((uint64_t)v33, (uint64_t)v21);
        v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
        ++v37;
        if (v87(v21, 1, v25) == 1)
          goto LABEL_14;
      }
    }
    a1 = v60;
    outlined destroy of Date?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    a3 = v37;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t (*v29)(_QWORD);
  uint64_t result;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = v3;
  v8 = type metadata accessor for Calendar.SearchDirection();
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v67 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v64 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Calendar.MatchingPolicy();
  v75 = *(_QWORD *)(v12 - 8);
  v76 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v63 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Calendar();
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v16);
  v74 = (uint64_t)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v47 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v47 - v22;
  v24 = type metadata accessor for Date();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v58 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v59);
  v28 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(v4, (uint64_t)v28, v29);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v28, a1, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v49 = a1;
    outlined init with copy of Date?((uint64_t)v28, (uint64_t)v20);
    v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    if (v31(v20, 1, v24) == 1)
    {
      v32 = 0;
LABEL_11:
      outlined destroy of Date?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
      a1 = v49;
LABEL_13:
      outlined destroy of Date?((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      a3 = v32;
    }
    else
    {
      v32 = 0;
      v54 = *MEMORY[0x24BDCF020];
      v53 = *MEMORY[0x24BDCF0B0];
      v52 = *MEMORY[0x24BDCF068];
      v33 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
      v48 = a3;
      v51 = a3 - 1;
      v57 = v28;
      v50 = v20;
      v56 = v24;
      v55 = v25;
      v34 = v63;
      while (1)
      {
        v73 = v31;
        v70 = a2;
        v71 = v32;
        v33(v23, v20, v24);
        v35 = v60;
        static Calendar.current.getter();
        v72 = &v28[*(int *)(v59 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v34, v54, v76);
        v37 = v64;
        v36 = v65;
        v38 = v66;
        (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, v53, v66);
        v40 = v67;
        v39 = v68;
        v41 = v69;
        (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v67, v52, v69);
        Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
        v42 = *(void (**)(char *, uint64_t))(v36 + 8);
        v43 = v38;
        v24 = v56;
        v28 = v57;
        v42(v37, v43);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v34, v76);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v62);
        v25 = v55;
        outlined assign with take of Date?(v74, (uint64_t)v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
        if (v73(v23, 1, v24) == 1)
        {
          a1 = v49;
          v32 = v71;
          goto LABEL_13;
        }
        v44 = v58;
        v33(v58, v23, v24);
        v45 = v70;
        v33(v70, v44, v24);
        v46 = v71;
        if (v51 == v71)
          break;
        a2 = &v45[*(_QWORD *)(v25 + 72)];
        v20 = v50;
        outlined init with copy of Date?((uint64_t)v28, (uint64_t)v50);
        v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
        v32 = v46 + 1;
        if (v31(v20, 1, v24) == 1)
          goto LABEL_11;
      }
      a1 = v49;
      a3 = v48;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  uint64_t result;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v7);
  v53 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v45 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v58 = (uint64_t)&v45 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v45 - v15;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v49 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v56 = (char *)&v45 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v54 = (char *)&v45 - v23;
  v55 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x24BDAC7A8](v55);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(v3, (uint64_t)v25, v26);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3)
    goto LABEL_18;
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  v47 = a1;
  v28 = v58;
  outlined init with copy of Date?((uint64_t)v25, v58);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v30 = v29(v28, 1, v17);
  v57 = v18;
  if (v30 != 1)
  {
    v31 = a3;
    a3 = 0;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    v46 = v31;
    v50 = v11;
    v51 = v31 - 1;
    v52 = v16;
    v48 = v25;
    while (1)
    {
      v33 = v56;
      v32(v56, v58, v17);
      outlined init with copy of Date?((uint64_t)&v25[*(int *)(v55 + 20)], (uint64_t)v11);
      if (v29((uint64_t)v11, 1, v17) == 1)
        break;
      v36 = v49;
      v32(v49, (uint64_t)v11, v17);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      v37 = dispatch thunk of static Comparable.< infix(_:_:)();
      v34 = v57;
      v38 = v36;
      v25 = v48;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v17);
      v35 = v33;
      if ((v37 & 1) != 0)
        goto LABEL_11;
      outlined destroy of Date?((uint64_t)v25, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
      v40(v25, 1, 1, v17);
LABEL_13:
      v16 = v52;
      v32(v52, (uint64_t)v35, v17);
      v40(v16, 0, 1, v17);
      if (v29((uint64_t)v16, 1, v17) == 1)
        goto LABEL_17;
      v41 = v54;
      v32(v54, (uint64_t)v16, v17);
      v32(a2, (uint64_t)v41, v17);
      if (v51 == a3)
      {
        a3 = v46;
        a1 = v47;
        goto LABEL_18;
      }
      v42 = v57;
      v43 = v58;
      a2 += *(_QWORD *)(v57 + 72);
      outlined init with copy of Date?((uint64_t)v25, v58);
      v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
      v44 = v29(v43, 1, v17);
      ++a3;
      v11 = v50;
      if (v44 == 1)
        goto LABEL_16;
    }
    outlined destroy of Date?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v34 = v57;
    v35 = v33;
LABEL_11:
    v39 = (uint64_t)v53;
    Date.addingTimeInterval(_:)();
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
    v40((char *)v39, 0, 1, v17);
    outlined assign with take of Date?(v39, (uint64_t)v25);
    goto LABEL_13;
  }
  a3 = 0;
LABEL_16:
  outlined destroy of Date?(v58, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v16, 1, 1, v17);
LABEL_17:
  a1 = v47;
  outlined destroy of Date?((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
LABEL_18:
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v25, a1, type metadata accessor for EverySecondEntries);
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::UInt64 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v49;
  Swift::UInt64 v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  Swift::UInt64 v57;
  uint64_t v58;

  v7 = (int *)type metadata accessor for FragmentRangeSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v52 - v11;
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)&v52 - v11, type metadata accessor for Text.Effect.BaseContent);
  v13 = type metadata accessor for FragmentRangeSequence(0);
  v14 = *(int *)(v13 + 24);
  v15 = (uint64_t *)(v3 + *(int *)(v13 + 20));
  v17 = *v15;
  v16 = v15[1];
  v18 = &v12[v7[5]];
  *(_QWORD *)v18 = v17;
  *((_QWORD *)v18 + 1) = v16;
  v19 = *(_OWORD *)(v3 + v14);
  v55 = &v12[v7[6]];
  v56 = v12;
  *(_OWORD *)v55 = v19;
  v20 = &v12[v7[7]];
  *(_QWORD *)v20 = v17;
  *((_QWORD *)v20 + 1) = v16;
  outlined destroy of TypesettingConfiguration(v3, type metadata accessor for FragmentRangeSequence);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_40;
  }
  if (!a3)
  {
LABEL_40:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v56, a1, type metadata accessor for FragmentRangeSequence.Iterator);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v53 = a1;
    v54 = a3;
    v21 = 0;
    v22 = v55;
    while (1)
    {
      v23 = *(_QWORD *)v20;
      v24 = *(_QWORD *)v22;
      if (*(_QWORD *)v20 >= *(_QWORD *)v22)
      {
        if (__OFSUB__(v24, v23))
          goto LABEL_48;
        if (v24 != v23 || *((_QWORD *)v20 + 1) >= *((_QWORD *)v22 + 1))
        {
          a3 = v21;
LABEL_39:
          a1 = v53;
          goto LABEL_40;
        }
      }
      v58 = v21;
      v25 = v20;
      outlined init with copy of TypesettingLanguage((uint64_t)v56, (uint64_t)v9, type metadata accessor for FragmentRangeSequence.Iterator);
      v27 = *v9;
      v26 = v9[1];
      v28 = v9[2];
      swift_beginAccess();
      v29 = *(_QWORD *)(v27 + 48);
      if (!*(_QWORD *)(v29 + 16))
        goto LABEL_53;
      v30 = (uint64_t)v9;
      swift_retain_n();
      swift_retain();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v28);
      if ((v32 & 1) == 0)
      {
        swift_release();
        goto LABEL_55;
      }
      v33 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 16 * v31);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_42;
      v57 = v26;
      v34 = *(_QWORD *)(v33 + 16);
      if (v23 >= v34)
        goto LABEL_43;
      v35 = v33 + 32;
      v36 = *(_QWORD *)(v33 + 32 + 8 * v23);
      v37 = 0;
      if (v23)
        break;
LABEL_17:
      swift_retain();
      swift_bridgeObjectRelease();
      v9 = (uint64_t *)v30;
      outlined destroy of TypesettingConfiguration(v30, type metadata accessor for Text.Effect.BaseContent);
      v41 = *(_QWORD *)v25;
      v22 = v55;
      if (__OFSUB__(*(_QWORD *)v55, *(_QWORD *)v25))
        goto LABEL_44;
      v20 = v25;
      if (*(_QWORD *)v55 == *(_QWORD *)v25)
      {
        v42 = *((_QWORD *)v25 + 1);
        v43 = *((_QWORD *)v55 + 1);
        if (v43 < v42)
          goto LABEL_49;
        v44 = *(_QWORD *)(*(_QWORD *)(v36 + 96) + 16);
        v40 = __OFADD__(v37, v44);
        v45 = v37 + v44;
        v46 = v40;
      }
      else
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v36 + 96) + 16);
        v45 = v37 + v47;
        v46 = __OFADD__(v37, v47);
        if (__OFADD__(v37, v47))
          goto LABEL_50;
        v42 = *((_QWORD *)v25 + 1);
        if (v45 < v37 || v45 < v42)
          goto LABEL_51;
        v43 = v45;
      }
      if (v46)
        goto LABEL_45;
      if (v45 < v37)
        goto LABEL_46;
      *((_QWORD *)v25 + 1) = v45;
      v40 = __OFADD__(v41, 1);
      v49 = v41 + 1;
      if (v40)
        goto LABEL_47;
      v21 = v58 + 1;
      *(_QWORD *)v25 = v49;
      v50 = v57;
      *a2 = v27;
      a2[1] = v50;
      a2[2] = v28;
      a2[3] = v36;
      a2[4] = v23;
      a2[5] = v34;
      a2[6] = v37;
      a2[7] = v42;
      a2[8] = v43;
      a2 += 9;
      a3 = v54;
      if (v21 == v54)
        goto LABEL_39;
    }
    v38 = v23;
    while (1)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v35 + 96) + 16);
      v40 = __OFADD__(v37, v39);
      v37 += v39;
      if (v40)
        break;
      v35 += 8;
      if (!--v38)
        goto LABEL_17;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  __break(1u);
LABEL_53:
  swift_retain();
  swift_retain();
LABEL_55:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (void (*)(uint64_t))MEMORY[0x24BDCE6C8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  v11 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v41 = *(_QWORD *)(v11 - 8);
  v12.n128_f64[0] = MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return;
  }
  if (!a3)
  {
    v20 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    v30(a2, v22, v11);
    if (v21 == v39)
    {
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v23 + 56))(v10, 1, 1, v11, v12);
          v19 = 0;
LABEL_38:
          outlined destroy of Date?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t)MEMORY[0x24BDCE6C8], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v12);
    v15 = *v13;
    v14 = v13[1];
    *a2 = v15;
    a2[1] = v14;
    a2 += 2;
    if (v9 == a3)
      goto LABEL_35;
  }
  v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v16 >= v10)
    goto LABEL_30;
  v17 = *(_QWORD *)(v4 + 8 * v16);
  if (v17)
    goto LABEL_19;
  v8 += 2;
  if (v16 + 1 >= v10)
  {
    v7 = 0;
    v8 = v16;
    goto LABEL_34;
  }
  v17 = *(_QWORD *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    v16 = v8;
LABEL_19:
    v19 = __clz(__rbit64(v17));
    v7 = (v17 - 1) & v17;
    v12 = v19 + (v16 << 6);
    v8 = v16;
    goto LABEL_8;
  }
  v18 = v16 + 2;
  if (v16 + 2 >= v10)
    goto LABEL_30;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v16 = v18;
    goto LABEL_19;
  }
  v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    v7 = 0;
    v8 = v16 + 2;
    goto LABEL_34;
  }
  v17 = *(_QWORD *)(v4 + 8 * v8);
  if (v17)
    goto LABEL_15;
  v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
    goto LABEL_18;
  while (1)
  {
    v16 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v16 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *specialized Sequence._copySequenceContents(initializing:)(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  _QWORD *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5))
      v7 = ~a4 + a5;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 > 4)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 = v8 - v11 + 1;
      v13 = v5 + v12;
      v10 = &a2[v12];
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_235260F20);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 1;
      v10 = a2;
    }
    v17 = v10 + 1;
    v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5)
        goto LABEL_30;
      ++v9;
      v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_14;
  }
  if (!a3)
    goto LABEL_12;
  if (a3 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v5 = a5;
  if (!a5)
  {
LABEL_14:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)v5;
  }
  if (a5 >= 1)
  {
    *a2 = *a4;
    v6 = a3 - 1;
    if (a3 != 1)
    {
      v7 = 0;
      v8 = a4 + 15;
      while (v6 != v7)
      {
        if (a5 - 1 == v7)
        {
          v5 = a5;
          goto LABEL_14;
        }
        if (v7 == 0x111111111111111)
          goto LABEL_17;
        v9 = *v8;
        v8 += 15;
        a2[++v7] = v9;
        if (v6 == v7)
          goto LABEL_12;
      }
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_12:
    v5 = a3;
    goto LABEL_14;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Date?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;

  v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_234C55F9C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArchiveReader.subscript.getter()
{
  return closure #1 in ArchiveReader.subscript.getter();
}

uint64_t outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_BYTE *)(a1 + 104);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined copy of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for AlignedTimelineSchedule()
{
  return &type metadata for AlignedTimelineSchedule;
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in AlignedTimelineSchedule()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries, (uint64_t (*)(uint64_t))type metadata accessor for AlignedTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for AlignedTimelineSchedule.Entries);
}

uint64_t outlined retain of Text.Effect.DisplayInfo(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t View.environment<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a4;
  v26 = a3;
  v6 = (_QWORD *)MEMORY[0x24BEE2B70];
  v7 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + *a1 + 8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v25 - v9;
  v13 = type metadata accessor for _EnvironmentKeyWritingModifier(0, v7, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v25 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a2, v7, v15);
  v18 = *a1;
  *(_QWORD *)v17 = a1;
  v19 = *(_QWORD *)(*v6 + v18 + 8);
  v22 = type metadata accessor for _EnvironmentKeyWritingModifier(0, v19, v20, v21);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(&v17[*(int *)(v22 + 28)], v10, v19);
  View.modifier<A>(_:)(v17, v26, v13, v27);
  v23 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  return v23(v17, v13);
}

uint64_t type metadata accessor for _EnvironmentKeyWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EnvironmentKeyWritingModifier);
}

uint64_t _EnvironmentKeyWritingModifier.init(keyPath:value:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v7 = *a1;
  *a5 = a1;
  v8 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + v7 + 8);
  v9 = (char *)a5 + *(int *)(type metadata accessor for _EnvironmentKeyWritingModifier(0, v8, a3, a4) + 28);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v9, a2, v8);
}

uint64_t _EnvironmentKeyWritingModifier.keyPath.getter()
{
  return swift_retain();
}

uint64_t _EnvironmentKeyWritingModifier.keyPath.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_EnvironmentKeyWritingModifier.keyPath.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _EnvironmentKeyWritingModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t _EnvironmentKeyWritingModifier.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 28), a1);
}

uint64_t (*_EnvironmentKeyWritingModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _EnvironmentKeyWritingModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  int v26;
  _DWORD v27[4];
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _EnvironmentKeyWritingModifier(255, a3, a3, a4);
  v7 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v27 - v8;
  v12 = type metadata accessor for ChildEnvironment(0, a3, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (_DWORD *)((char *)v27 - v14);
  LODWORD(a1) = *a1;
  v16 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  LODWORD(v16) = *(_DWORD *)(v16 + 16);
  v19 = type metadata accessor for _EnvironmentKeyWritingModifier(0, a3, v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
  ChildEnvironment.init(modifier:env:oldModifier:)((int)a1, v16, (uint64_t)v9, a3, v15);
  v29 = v12;
  v30 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>, v12);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v28, v12, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v21);
  (*(void (**)(_DWORD *, uint64_t))(v13 + 8))(v15, v12);
  LODWORD(a1) = v27[3];
  v22 = MEMORY[0x24BEE4AF8];
  v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = (_DWORD)a1;
  *(_QWORD *)(v24 + 24) = v22;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_WORD *)(v24 + 80) = 256;
  *(_QWORD *)(v24 + 88) = v23;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v24;
  v26 = *(_DWORD *)(a2 + 32);
  if ((v26 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v26 | 0x20;
  return result;
}

uint64_t ChildEnvironment.init(modifier:env:oldModifier:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a5 = a1;
  a5[1] = a2;
  v7 = (char *)a5 + *(int *)(type metadata accessor for ChildEnvironment(0, a4, a3, a4) + 32);
  type metadata accessor for _EnvironmentKeyWritingModifier(255, a4, v8, v9);
  v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, a3, v10);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _EnvironmentKeyWritingModifier<A>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _EnvironmentKeyWritingModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t ChildEnvironment.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Value;
  char v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v69 = a1;
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
  MEMORY[0x24BDAC7A8](a1);
  v64 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v3;
  v6 = type metadata accessor for _EnvironmentKeyWritingModifier(255, v3, v4, v5);
  v68 = type metadata accessor for Optional();
  v72 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v59 = (char *)&v57 - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v65 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v60 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v62 = (char *)&v57 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v58 = (void (*)(char *, uint64_t, uint64_t))((char *)&v57 - v13);
  MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v57 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v57 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v57 - v20;
  v23 = *(int *)(v22 + 48);
  Value = AGGraphGetValue();
  v26 = v25;
  v61 = *(_QWORD *)(v6 - 8);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v27(v21, Value, v6);
  v28 = v26 & 1;
  v21[v23] = v26 & 1;
  v70 = v1;
  v29 = (uint64_t *)AGGraphGetValue();
  v31 = v30;
  v32 = v29[1];
  v74 = *v29;
  v75 = v32;
  v76 = v30 & 1;
  v33 = *(int *)(TupleTypeMetadata2 + 48);
  v66 = v21;
  v34 = v21;
  v35 = v28;
  v27(v18, (uint64_t)v34, v6);
  v18[v33] = v28;
  if ((v31 & 1) != 0)
  {
    v40 = *(void (**)(char *, uint64_t))(v65 + 8);
    swift_retain();
    swift_retain();
    v40(v18, TupleTypeMetadata2);
    v38 = TupleTypeMetadata2;
  }
  else
  {
    v36 = *(int *)(TupleTypeMetadata2 + 48);
    v37 = v71;
    v27(v71, (uint64_t)v18, v6);
    v37[v36] = v35;
    v38 = TupleTypeMetadata2;
    if (v35)
    {
      v41 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v59, v70 + *(int *)(v69 + 32), v68);
      v42 = *(int *)(TupleTypeMetadata2 + 48);
      v43 = v58;
      v57 = v27;
      v44 = ((uint64_t (*)(_QWORD, char *, uint64_t))v27)(v58, v71, v6);
      *((_BYTE *)v43 + v42) = 1;
      MEMORY[0x24BDAC7A8](v44);
      *(&v57 - 2) = (void (*)(char *, uint64_t, uint64_t))v67;
      *(&v57 - 1) = v43;
      swift_retain();
      swift_retain();
      v45 = v59;
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue(), (uint64_t)(&v57 - 4), MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v46, (uint64_t)v73);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v45, v41);
      v39 = *(void (**)(char *, uint64_t))(v65 + 8);
      v39(v71, v38);
      v39(v18, v38);
      v39((char *)v43, v38);
      if (LOBYTE(v73[0]) == 2)
      {
        v27 = v57;
        goto LABEL_10;
      }
      v27 = v57;
      if ((v73[0] & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      v39 = *(void (**)(char *, uint64_t))(v65 + 8);
      swift_retain();
      swift_retain();
      v39(v71, TupleTypeMetadata2);
      v39(v18, TupleTypeMetadata2);
    }
    if (AGGraphGetOutputValue())
    {
      swift_release();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v39)(v66, v38);
    }
  }
LABEL_10:
  v48 = *(int *)(v38 + 48);
  v49 = v62;
  v50 = v66;
  v27(v62, (uint64_t)v66, v6);
  v49[v48] = v35;
  v51 = v61;
  v52 = *(void (**)(char *, uint64_t))(v61 + 8);
  swift_retain();
  v52(v49, v6);
  v53 = *(int *)(v38 + 48);
  v54 = v60;
  v27(v60, (uint64_t)v50, v6);
  v54[v53] = v35;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v64, &v54[*(int *)(v6 + 28)], v67);
  v52(v54, v6);
  swift_setAtWritableKeyPath();
  swift_release();
  v73[0] = v74;
  v73[1] = v75;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  v55 = (char *)(v70 + *(int *)(v69 + 32));
  (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v68);
  v56 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  v56(v49, v50, v6);
  v56(v55, v49, v6);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v55, 0, 1, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *Value;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unsigned __int8 *, _QWORD);
  void (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42[16];
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 v46[32];
  __int128 v47;
  char v48;
  uint64_t v49;

  v2 = v1;
  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v37 = type metadata accessor for Optional();
  v40 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v35 = (char *)&v35 - v5;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - v10;
  Value = (_QWORD *)AGGraphGetValue();
  v14 = v13;
  v15 = Value[1];
  *(_QWORD *)&v47 = *Value;
  *((_QWORD *)&v47 + 1) = v15;
  v48 = v13 & 1;
  v18 = ChildEnvironment.modifier.getter(a1, v13, v16, v17);
  swift_retain();
  swift_retain();
  swift_release();
  swift_retain();
  v19 = (void (*)(unsigned __int8 *, _QWORD))swift_readAtKeyPath();
  v38 = v6;
  v20 = *(void (**)(char *))(v6 + 16);
  v21 = v37;
  v20(v11);
  v19(v46, 0);
  v39 = v18;
  swift_release();
  v43 = v4;
  v44 = v2;
  v45 = v11;
  v24 = type metadata accessor for _EnvironmentKeyTransformModifier(0, v4, v22, v23);
  Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in ChildEnvironment.updateValue(), (uint64_t)v42, v24, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4AE0]);
  if ((v14 & 1) != 0)
    goto LABEL_8;
  v25 = v40;
  v26 = v35;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 16))(v35, v2 + *(int *)(a1 + 32), v21);
  MEMORY[0x24BDAC7A8](v27);
  *(&v35 - 2) = (char *)v4;
  *(&v35 - 1) = v11;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in implicit closure #1 in ChildEnvironment.updateValue(), (uint64_t)(&v35 - 4), MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v28, (uint64_t)v46);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v21);
  if (v46[0] == 2
    || (v46[0] & 1) != 0
    || (*(_QWORD *)v46 = *(_QWORD *)(v2 + *(int *)(a1 + 36)),
        type metadata accessor for WritableKeyPath(),
        type metadata accessor for Optional(),
        swift_retain(),
        _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in implicit closure #3 in ChildEnvironment.updateValue(), v39, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v29, (uint64_t)&v41), swift_release(), v41 == 2)|| (v41 & 1) != 0|| !AGGraphGetOutputValue())
  {
LABEL_8:
    ((void (*)(char *, char *, uint64_t))v20)(v36, v11, v4);
    v31 = v39;
    swift_setAtWritableKeyPath();
    *(_OWORD *)v46 = v47;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    v32 = v2 + *(int *)(a1 + 32);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v32, v21);
    ((void (*)(uint64_t, char *, uint64_t))v20)(v32, v11, v4);
    v30 = v38;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v32, 0, 1, v4);
    v33 = *(int *)(a1 + 36);
    swift_release();
    *(_QWORD *)(v2 + v33) = v31;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v30 = v38;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v11, v4);
}

uint64_t closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t result;
  char v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, double);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v53 = a4;
  v5 = a1;
  v54 = (uint64_t)a1;
  v59 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 - 8);
  v55 = a3;
  v52 = v6;
  MEMORY[0x24BDAC7A8](a1);
  v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (char *)&v45 - v9;
  v13 = type metadata accessor for _EnvironmentKeyWritingModifier(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v56 = (char *)&v45 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v51 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (uint64_t *)((char *)&v45 - v21);
  v58 = *v5;
  v24 = *(int *)(v23 + 48);
  v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
  v49 = a2;
  v25((char *)&v45 - v21, a2, v13, v20);
  *((_BYTE *)v22 + v24) = *(_BYTE *)(a2 + v24);
  v26 = *v22;
  v27 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  swift_retain();
  v50 = v27;
  v27((char *)v22, v13);
  v57 = v26;
  type metadata accessor for WritableKeyPath();
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v25)(v56, v54, v13);
  v54 = TupleTypeMetadata2;
  v28 = *(int *)(TupleTypeMetadata2 + 48);
  v29 = v49;
  v46 = v25;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v18, v49, v13);
  v30 = *(_BYTE *)(v29 + v24);
  v31 = v18;
  v18[v28] = v30;
  if ((v5 & 1) != 0)
  {
    v32 = v55;
    v33 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    v34 = (uint64_t)v47;
    v33(v47, &v56[*(int *)(v13 + 28)], v55);
    v35 = *(int *)(v54 + 48);
    ((void (*)(_QWORD *, char *, uint64_t))v46)(v22, v18, v13);
    *((_BYTE *)v22 + v35) = v30;
    v36 = v48;
    v33(v48, (char *)v22 + *(int *)(v13 + 28), v32);
    v37 = (char *)v22;
    v38 = v50;
    v39 = v50(v37, v13);
    MEMORY[0x24BDAC7A8](v39);
    *(&v45 - 4) = v32;
    *(&v45 - 3) = (uint64_t)v36;
    *((_DWORD *)&v45 - 4) = 2;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v34, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)(&v45 - 6), v32, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v40);
    v41 = v58;
    v42 = *(void (**)(char *, uint64_t))(v52 + 8);
    v42(v36, v32);
    v42((char *)v34, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v54);
    result = v38(v56, v13);
    v44 = v41 ^ 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v54);
    result = v50(v56, v13);
    v44 = 1;
  }
  *v53 = v44 & 1;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ChildEnvironment<A>()
{
  return specialized ChildEnvironment.description.getter();
}

{
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  return 0xD000000000000027;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ChildEnvironment<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>, a1);
  return static AsyncAttribute.flags.getter();
}

{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChildEnvironment);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChildEnvironment);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata completion function for _EnvironmentKeyWritingModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _EnvironmentKeyWritingModifier(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C57090 + 4 * byte_235290110[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _EnvironmentKeyWritingModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_234C572F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _EnvironmentKeyWritingModifier(255, a1[1], a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t type metadata completion function for ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for _EnvironmentKeyWritingModifier(255, *(_QWORD *)(a1 + 16), a3, a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ChildEnvironment(_DWORD *a1, int *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 8;
  v10 = ((v7 + 8) & ~v7) + *(_QWORD *)(v5 + 64);
  v11 = v6 & 0x100000;
  if (v7 <= 7 && v11 == 0 && (v8 & (v7 + 8)) + v10 <= 0x18)
  {
    v15 = *(unsigned int *)(v5 + 84);
    v17 = *a2;
    v16 = (unint64_t)a2 + 7;
    v18 = ~v7;
    *a1 = v17;
    v19 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v19 = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFCLL);
    v20 = (_QWORD *)(v8 & ((unint64_t)v19 + 11));
    v21 = (uint64_t *)(v8 & ((v16 & 0xFFFFFFFFFFFFFCLL) + 11));
    if ((v15 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v21 + v9) & v18, v15, v4))
      {
LABEL_14:
        memcpy(v20, v21, v10);
        return v3;
      }
    }
    else
    {
      v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      if ((_DWORD)v22 != -1)
        goto LABEL_14;
    }
    *v20 = *v21;
    v23 = ((unint64_t)v20 + v9) & v18;
    v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v24(v23, ((unint64_t)v21 + v9) & v18, v4);
    return v3;
  }
  v14 = *(_QWORD *)a2;
  *v3 = *(_QWORD *)a2;
  v3 = (_QWORD *)(v14 + (v8 & (v7 + 16)));
  swift_retain();
  return v3;
}

uint64_t destroy for ChildEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + (v4 | 7) + 4) & ~(v4 | 7));
  v6 = ~v4;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v5 + v4 + 8) & v6);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v5 + v4 + 8) & v6, v2);
  }
  v7 = *v5;
  if ((unint64_t)*v5 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  result = (v7 + 1);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return swift_release();
}

_DWORD *initializeWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, uint64_t);

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 4;
  v10 = (_QWORD *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  v12 = ~v8;
  v13 = v8 + 8;
  v14 = *(_QWORD *)(v7 + 64);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((_DWORD)v15 != -1)
      goto LABEL_5;
LABEL_7:
    *v10 = *v11;
    v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v16(((unint64_t)v10 + v13) & v12, ((unint64_t)v11 + v13) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v13) & v12))
    goto LABEL_7;
LABEL_5:
  memcpy(v10, v11, (v13 & ~v8) + v14);
  return a1;
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  *(_QWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for ChildEnvironment(_DWORD *a1, int *a2, uint64_t a3)
{
  _DWORD *v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  int v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);

  v3 = a1;
  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 4;
  v11 = (_QWORD *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = ~v9;
  v15 = v9 + 8;
  v16 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    v19 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v21 = v20(((unint64_t)v11 + v15) & v14, v13, v7);
    v18 = v20(((unint64_t)v12 + v15) & v14, v13, v7);
    v16 = v19;
    v3 = a1;
    if (!v21)
    {
LABEL_5:
      if (!v18)
      {
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return v3;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v17) = -1;
    v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v18)
  {
    *v11 = *v12;
    v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v22(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return v3;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return v3;
}

_DWORD *initializeWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 4;
  v10 = (_QWORD *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  v12 = ~v8;
  v13 = v8 + 8;
  v14 = *(_QWORD *)(v7 + 64);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    if ((_DWORD)v15 != -1)
      goto LABEL_5;
LABEL_7:
    *v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v10 + v13) & v12, ((unint64_t)v11 + v13) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v13) & v12))
    goto LABEL_7;
LABEL_5:
  memcpy(v10, v11, (v13 & ~v8) + v14);
  return a1;
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  *(_QWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for ChildEnvironment(_DWORD *a1, int *a2, uint64_t a3)
{
  _DWORD *v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  int v21;

  v3 = a1;
  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 4;
  v11 = (_QWORD *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = ~v9;
  v15 = v9 + 8;
  v16 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    v19 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64);
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v21 = v20(((unint64_t)v11 + v15) & v14, v13, v7);
    v18 = v20(((unint64_t)v12 + v15) & v14, v13, v7);
    v16 = v19;
    v3 = a1;
    if (!v21)
    {
LABEL_5:
      if (!v18)
      {
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return v3;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v17) = -1;
    v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v18)
  {
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return v3;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return v3;
}

uint64_t getEnumTagSinglePayload for ChildEnvironment(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  v9 = v7 + 8;
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v10 = (v9 & ~v7) + *(_QWORD *)(v4 + 64) + (v9 & ~v8);
  v11 = 8 * v10;
  if (v10 > 3)
    goto LABEL_7;
  v14 = (((1 << v11) + a2 - v6) >> v11) + 1;
  if (HIWORD(v14))
  {
    v12 = *(_DWORD *)(a1 + v10);
    if (v12)
      goto LABEL_15;
LABEL_24:
    v17 = (unint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
    if ((v5 & 0x80000000) != 0)
    {
      v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9) & ~v7);
    }
    else
    {
      v18 = *v17;
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      v19 = v18 + 1;
    }
    if (v19 >= 2)
      return v19 - 1;
    else
      return 0;
  }
  if (v14 > 0xFF)
  {
    v12 = *(unsigned __int16 *)(a1 + v10);
    if (*(_WORD *)(a1 + v10))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v14 < 2)
    goto LABEL_24;
LABEL_7:
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_24;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 <= 3)
      v16 = (v9 & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64) + (v9 & ~(_DWORD)v8);
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  return (v15 + v6);
}

{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2)
  {
    if (((((v10 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  v15 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v17 = *(_QWORD *)((v10 + v15) & 0xFFFFFFFFFFFFF8);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    if ((v17 + 1) >= 2)
      return v17;
    else
      return 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v15);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for ChildEnvironment(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v5 + 64);
  v10 = v9 + ((v8 + 8) & ~(v8 | 7));
  if (v6 - 1 >= a3)
  {
    v11 = 0;
  }
  else
  {
    v11 = 1u;
    if (v10 <= 3)
    {
      v12 = (((v11 << (8 * v10)) + a3 - v6) >> (8 * v10)) + 1;
      if (HIWORD(v12))
      {
        v11 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v12 >= 0x100)
          v11 = 2;
        else
          v11 = v12 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X17 }
      }
LABEL_14:
      v13 = a2 - v6;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          v14 = v13 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *a1 = v14;
            *((_BYTE *)a1 + 2) = BYTE2(v14);
          }
          else if ((_DWORD)v10 == 2)
          {
            *a1 = v14;
          }
          else
          {
            *(_BYTE *)a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, v9 + ((v8 + 8) & ~(v8 | 7)));
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_234C57EE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234C57F4CLL);
}

void sub_234C57EEC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C57F4CLL);
}

void sub_234C57EF4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C57F4CLL);
}

void sub_234C57F20()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x234C57F4CLL);
}

void sub_234C57F30()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x234C57F4CLL);
}

void sub_234C57F38()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x234C57F4CLL);
}

uint64_t instantiation function for generic protocol witness table for ChildEnvironment<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ChildEnvironment<A>()
{
  JUMPOUT(0x23B7C9C04);
}

{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return closure #1 in compareValues<A>(_:_:options:)(a1, *(_QWORD *)(v8 + 24), *(_DWORD *)(v8 + 32), *(_QWORD *)(v8 + 16), a2, a6, a7, a8);
}

unint64_t specialized ChildEnvironment.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t _ViewInputs.makeIndirectOutputs()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  void (*v8)(uint64_t *__return_ptr);
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v3 = *(_DWORD *)(v1 + 36);
  v4 = *(_DWORD *)(v1 + 56);
  v12 = *(_QWORD *)(v1 + 48);
  v13 = v4;
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v10);
  v5 = v10;
  v6 = v11;
  if ((v3 & 2) != 0)
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v8 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                      + 0x80);
    v9 = static CoreGlue.shared;
    v8(&v12);

    result = AGGraphCreateIndirectAttribute2();
    v6 |= 0x80u;
  }
  else
  {
    result = *MEMORY[0x24BE096C0];
  }
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t _ViewOutputs.setIndirectDependency(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 3);
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
    if (v2 == *MEMORY[0x24BE096C0])
      return result;
    return AGGraphSetIndirectDependency();
  }
  v4 = *MEMORY[0x24BE096C0];
  swift_bridgeObjectRetain();
  v5 = 48;
  do
  {
    AGGraphSetIndirectDependency();
    v5 += 24;
    --v3;
  }
  while (v3);
  result = swift_bridgeObjectRelease();
  if (v2 != v4)
    return AGGraphSetIndirectDependency();
  return result;
}

uint64_t _ViewOutputs.attachIndirectOutputs(to:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = *((_DWORD *)a1 + 3);
  v5 = *((_DWORD *)v1 + 2);
  v6 = *((_DWORD *)v1 + 3);
  v11 = *v1;
  v12 = v5;
  v9 = v2;
  v10 = v3;
  result = PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v9);
  if (v6 != *MEMORY[0x24BE096C0] && v4 != *MEMORY[0x24BE096C0])
    return AGGraphSetIndirectAttribute();
  return result;
}

Swift::Void __swiftcall _ViewOutputs.detachIndirectOutputs()()
{
  _DWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;

  v1 = *(_QWORD *)v0;
  v2 = v0[3];
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = (_DWORD *)(v1 + 48);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v6 = *v4;
      v4 += 6;
      v7 = v6;
      (*(void (**)(int *, ValueMetadata *, _UNKNOWN **))(v5 + 16))(&v7, &type metadata for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs(), &protocol witness table for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs());
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  if (v2 != *MEMORY[0x24BE096C0])
    AGGraphSetIndirectAttribute();
}

uint64_t one-time initialization function for handled(uint64_t a1)
{
  return one-time initialization function for handled(a1, static OpenURLAction.Result.handled, 1);
}

uint64_t static OpenURLAction.Result.handled.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenURLAction.Result.handled.getter(&one-time initialization token for handled, (uint64_t)static OpenURLAction.Result.handled, a1);
}

uint64_t type metadata accessor for OpenURLAction.Result(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for OpenURLAction.Result);
}

uint64_t one-time initialization function for discarded(uint64_t a1)
{
  return one-time initialization function for handled(a1, static OpenURLAction.Result.discarded, 2);
}

uint64_t one-time initialization function for handled(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for OpenURLAction.Result(0);
  __swift_allocate_value_buffer(v5, a2);
  v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  type metadata accessor for (url: URL?)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, a3, 2, v7);
}

uint64_t static OpenURLAction.Result.discarded.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenURLAction.Result.handled.getter(&one-time initialization token for discarded, (uint64_t)static OpenURLAction.Result.discarded, a1);
}

uint64_t one-time initialization function for systemAction()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for OpenURLAction.Result(0);
  __swift_allocate_value_buffer(v0, static OpenURLAction.Result.systemAction);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenURLAction.Result.systemAction);
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  type metadata accessor for (url: URL?)();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 0, 2, v3);
}

uint64_t static OpenURLAction.Result.systemAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenURLAction.Result.handled.getter(&one-time initialization token for systemAction, (uint64_t)static OpenURLAction.Result.systemAction, a1);
}

uint64_t static OpenURLAction.Result.handled.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for OpenURLAction.Result(0);
  v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of TypesettingLanguage(v6, a3, type metadata accessor for OpenURLAction.Result);
}

uint64_t static OpenURLAction.Result.systemAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  type metadata accessor for (url: URL?)();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 0, 2, v6);
}

void type metadata accessor for (url: URL?)()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (url: URL?))
  {
    type metadata accessor for URL?(0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (url: URL?));
  }
}

uint64_t OpenURLAction.init(handler:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 1;
  return result;
}

__n128 OpenURLAction.init(handler:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_WORD *)(a2 + 32) = v2;
  return result;
}

uint64_t OpenURLAction.init(isDefault:handler:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 33) = result;
  return result;
}

uint64_t OpenURLAction.init(_handler:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  return result;
}

uint64_t specialized OpenURLAction._open(_:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t (*)(_QWORD, _QWORD), _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a1;
  v3 = type metadata accessor for URL();
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v46 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v42 - v6;
  type metadata accessor for URL?(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v42 - v12;
  v14 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OpenURLAction.Result(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(uint64_t))a2;
  v21 = *(_QWORD *)(a2 + 8);
  v23 = *(void (**)(char *, uint64_t (*)(_QWORD, _QWORD), _QWORD))(a2 + 16);
  v22 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    v43 = v10;
    v44 = v7;
    v45 = v13;
    v24 = v47;
    v25 = v48;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
    v26 = v49;
    v20(v49);
    outlined init with copy of TypesettingLanguage((uint64_t)v19, (uint64_t)v16, type metadata accessor for OpenURLAction.Result.ActionResult);
    type metadata accessor for (url: URL?)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v16, 2, v27))
    {
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
    }
    else
    {
      v30 = (uint64_t)v45;
      outlined init with take of URL?((uint64_t)v16, (uint64_t)v45);
      if (v23)
      {
        v31 = v30;
        v32 = (uint64_t)v43;
        outlined init with copy of TypesettingLanguage(v31, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        v33 = v24;
        v34 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
        v35 = v46;
        v36 = v25;
        v37 = v32;
        v34(v46, v26, v36);
        v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v36);
        v39 = v44;
        if (v38 == 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v44, v35, v36);
          swift_retain();
          outlined destroy of TypesettingConfiguration(v32, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        }
        else
        {
          v41 = *(void (**)(char *, uint64_t))(v33 + 8);
          swift_retain();
          v41(v35, v36);
          (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v39, v37, v36);
        }
        v23(v39, _ViewInputs.base.modify, 0);
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v36);
        v40 = (uint64_t)v45;
      }
      else
      {
        specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
        swift_release();
        v40 = v30;
      }
      outlined destroy of TypesettingConfiguration(v40, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    }
    return outlined destroy of TypesettingConfiguration((uint64_t)v19, type metadata accessor for OpenURLAction.Result);
  }
  else
  {
    swift_retain();
    v28 = v49;
    if ((URL.isFileURL.getter() & 1) == 0)
      ((void (*)(uint64_t, uint64_t (*)(_QWORD, _QWORD), _QWORD))v20)(v28, _ViewInputs.base.modify, 0);
    return outlined consume of OpenURLAction.Handler((uint64_t)v20, v21, (uint64_t)v23, v22, 0);
  }
}

uint64_t OpenURLAction._open(_:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void (*v23)(char *, uint64_t (*)(), uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  v51 = a2;
  v52 = a3;
  v53 = a1;
  v4 = type metadata accessor for URL();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v44 - v7;
  type metadata accessor for URL?(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v44 - v13;
  v15 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OpenURLAction.Result(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(uint64_t))v3;
  v21 = *(_QWORD *)(v3 + 8);
  v23 = *(void (**)(char *, uint64_t (*)(), uint64_t))(v3 + 16);
  v24 = *(_QWORD *)(v3 + 24);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
  {
    v45 = v11;
    v46 = v8;
    v47 = v14;
    v26 = v49;
    v25 = v50;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
    v22(v53);
    outlined init with copy of TypesettingLanguage((uint64_t)v20, (uint64_t)v17, type metadata accessor for OpenURLAction.Result.ActionResult);
    type metadata accessor for (url: URL?)();
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v17, 2, v27);
    if ((_DWORD)v28)
    {
      if ((_DWORD)v28 != 1)
        v28 = 0;
      v51(v28);
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
    }
    else
    {
      v32 = v53;
      v33 = (uint64_t)v17;
      v34 = (uint64_t)v47;
      outlined init with take of URL?(v33, (uint64_t)v47);
      if (v23)
      {
        v44 = v20;
        v35 = (uint64_t)v45;
        outlined init with copy of TypesettingLanguage(v34, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        v36 = v26;
        v37 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
        v38 = v48;
        v39 = v25;
        v37(v48, v32, v25);
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1, v25);
        v41 = v46;
        if (v40 == 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v46, v38, v39);
          swift_retain();
          outlined destroy of TypesettingConfiguration(v35, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        }
        else
        {
          v42 = *(void (**)(char *, uint64_t))(v36 + 8);
          swift_retain();
          v42(v38, v39);
          (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v41, v35, v39);
        }
        v43 = swift_allocObject();
        *(_QWORD *)(v43 + 16) = v51;
        *(_QWORD *)(v43 + 24) = v52;
        swift_retain();
        v23(v41, partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> (), v43);
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v39);
        outlined destroy of TypesettingConfiguration(v34, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        v29 = (uint64_t)v44;
        return outlined destroy of TypesettingConfiguration(v29, type metadata accessor for OpenURLAction.Result);
      }
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
      swift_release();
      outlined destroy of TypesettingConfiguration(v34, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    }
    v29 = (uint64_t)v20;
    return outlined destroy of TypesettingConfiguration(v29, type metadata accessor for OpenURLAction.Result);
  }
  swift_retain();
  v31 = v53;
  if ((URL.isFileURL.getter() & 1) != 0)
    v51(0);
  else
    ((void (*)(uint64_t, void (*)(uint64_t), uint64_t))v22)(v31, v51, v52);
  return outlined consume of OpenURLAction.Handler((uint64_t)v22, v21, (uint64_t)v23, v24, 0);
}

uint64_t OpenURLAction.callAsFunction(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;
  char v8;

  v2 = *(_BYTE *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 33);
  v4 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v4;
  v7 = v2;
  v8 = v3;
  return specialized OpenURLAction._open(_:completion:)(a1, (uint64_t)v6);
}

uint64_t OpenURLAction.callAsFunction(_:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return OpenURLAction._open(_:completion:)(a1, a2, a3);
}

void static OpenURLAction.invalidAction.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = closure #1 in static OpenURLAction.invalidAction.getter;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
}

uint64_t closure #1 in static OpenURLAction.invalidAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for discarded != -1)
    swift_once();
  v2 = type metadata accessor for OpenURLAction.Result(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenURLAction.Result.discarded);
  return outlined init with copy of TypesettingLanguage(v3, a1, type metadata accessor for OpenURLAction.Result);
}

double static OpenURLActionKey.defaultValue.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 255;
  return result;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance OpenURLActionKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 255;
  return result;
}

uint64_t EnvironmentValues.hasSystemOpenURLAction.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.hasSystemOpenURLAction : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.hasSystemOpenURLAction.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.hasSystemOpenURLAction.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.hasSystemOpenURLAction.modify;
}

void EnvironmentValues.hasSystemOpenURLAction.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

void EnvironmentValues.openURL.getter(uint64_t a1@<X8>)
{
  EnvironmentValues._openURL.getter(a1);
}

uint64_t EnvironmentValues.openURL.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  __int16 v12;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 33))
    v7 = 256;
  else
    v7 = 0;
  v11[0] = *(_QWORD *)a1;
  v11[1] = v3;
  v11[2] = v4;
  v11[3] = v5;
  v12 = v7 | v6;
  v8 = *v1;
  swift_retain_n();
  outlined copy of OpenURLAction.Handler(v2, v3, v4, v5, v6);
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v11);
  swift_release();
  outlined consume of OpenURLAction.Handler(v2, v3, v4, v5, v6);
  if (v1[1])
  {
    v9 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v9);
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of OpenURLAction.Handler(v2, v3, v4, v5, v6);
}

void EnvironmentValues._openURL.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;
  void (*v10)(__int128 *__return_ptr, uint64_t *);
  void *v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  void (*v19)(__int128 *__return_ptr, uint64_t *);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;

  v4 = *v1;
  v3 = v1[1];
  if (v3)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)&v28);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v28);
  }
  swift_release_n();
  v6 = v30;
  if ((_BYTE)v30 == 0xFF)
  {
LABEL_9:
    if (v3)
    {
      swift_retain_n();
      swift_retain_n();
      v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
      swift_release_n();
      swift_release_n();
      if ((v9 & 1) != 0)
      {
LABEL_11:
        if (one-time initialization token for shared != -1)
          swift_once();
        swift_beginAccess();
        v26 = v4;
        v27 = v3;
        v10 = *(void (**)(__int128 *__return_ptr, uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0xD8);
        v11 = static CoreGlue.shared;
        v10(&v28, &v26);

        v13 = v28;
        v12 = v29;
        v14 = v30;
        v15 = HIBYTE(v30);
        goto LABEL_16;
      }
    }
    else
    {
      v16 = swift_retain_n();
      v17 = specialized closure #1 in PropertyList.subscript.getter(v16);
      swift_release_n();
      if ((v17 & 1) != 0)
        goto LABEL_11;
    }
    v15 = 0;
    v12 = 0uLL;
    *((_QWORD *)&v13 + 1) = 0;
    *(_QWORD *)&v13 = closure #1 in static OpenURLAction.invalidAction.getter;
    v14 = 1;
LABEL_16:
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v12;
    *(_BYTE *)(a1 + 32) = v14;
    *(_BYTE *)(a1 + 33) = v15;
    return;
  }
  v7 = v28;
  v8 = v29;
  if ((v30 & 0x100) != 0)
  {
    outlined consume of OpenURLAction?(v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30);
    goto LABEL_9;
  }
  if ((v30 & 1) == 0)
  {
    *(_OWORD *)a1 = v28;
    *(_OWORD *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 32) = 0;
    return;
  }
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
  if (v3)
  {
    swift_retain_n();
    swift_retain_n();
    v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
    swift_release_n();
    if ((v18 & 1) != 0)
    {
LABEL_19:
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v26 = v4;
      v27 = v3;
      v19 = *(void (**)(__int128 *__return_ptr, uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                     + 0xD8);
      v20 = static CoreGlue.shared;
      v19(&v28, &v26);

      v22 = *((_QWORD *)&v28 + 1);
      v21 = v28;
      if ((v30 & 1) != 0)
      {
        v23 = v29;
        swift_retain();
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v23);
        swift_release();
        outlined consume of OpenURLAction?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v6);
        outlined consume of OpenURLAction.Handler(v21, v22, v23, *((uint64_t *)&v23 + 1), 1);
        v22 = *((_QWORD *)&v23 + 1);
        v21 = v23;
      }
      else
      {
        outlined consume of OpenURLAction?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v6);
      }
      goto LABEL_26;
    }
  }
  else
  {
    v24 = swift_retain_n();
    v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release_n();
    if ((v25 & 1) != 0)
      goto LABEL_19;
  }
  outlined consume of OpenURLAction?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v6);
  v21 = 0;
  v22 = 0;
LABEL_26:
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v22;
  *(_WORD *)(a1 + 32) = 1;
}

uint64_t EnvironmentValues._openURL.setter(uint64_t a1)
{
  return EnvironmentValues._openURL.setter(a1, (void (*)(uint64_t *, _QWORD *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.openURL.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  EnvironmentValues._openURL.getter((uint64_t)(v3 + 10));
  return EnvironmentValues.openURL.modify;
}

void EnvironmentValues.openURL.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 80);
  v5 = *(_QWORD *)(*a1 + 88);
  v4 = *(_QWORD *)(*a1 + 96);
  v6 = *(_QWORD *)(*a1 + 104);
  v7 = *(unsigned __int8 *)(*a1 + 112);
  if (*(_BYTE *)(*a1 + 113))
    v8 = 256;
  else
    v8 = 0;
  v9 = v8 | v7;
  v10 = *(uint64_t **)(v2 + 136);
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)v2 = v3;
    *(_QWORD *)(v2 + 8) = v5;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v6;
    *(_WORD *)(v2 + 32) = v9;
    v11 = *v10;
    outlined copy of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    specialized closure #1 in PropertyList.subscript.setter(v10, v2);
    swift_release();
    outlined consume of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    if (v10[1])
    {
      v12 = **(_QWORD **)(v2 + 136);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    v13 = *(_QWORD *)(v2 + 80);
    v14 = *(_QWORD *)(v2 + 88);
    v15 = *(_QWORD *)(v2 + 96);
    v16 = *(_QWORD *)(v2 + 104);
    v17 = *(_BYTE *)(v2 + 112);
  }
  else
  {
    *(_QWORD *)(v2 + 40) = v3;
    *(_QWORD *)(v2 + 48) = v5;
    *(_QWORD *)(v2 + 56) = v4;
    *(_QWORD *)(v2 + 64) = v6;
    *(_WORD *)(v2 + 72) = v9;
    v18 = *v10;
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    specialized closure #1 in PropertyList.subscript.setter(v10, v2 + 40);
    swift_release();
    outlined consume of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    if (v10[1])
    {
      v19 = **(_QWORD **)(v2 + 136);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v18, v19);
      swift_release();
      swift_release();
    }
    swift_release();
    v13 = v3;
    v14 = v5;
    v15 = v4;
    v16 = v6;
    v17 = v7;
  }
  outlined consume of OpenURLAction.Handler(v13, v14, v15, v16, v17);
  free((void *)v2);
}

void (*EnvironmentValues._openURL.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  EnvironmentValues._openURL.getter((uint64_t)(v3 + 10));
  return EnvironmentValues._openURL.modify;
}

void EnvironmentValues._openURL.modify(char **a1, char a2)
{
  EnvironmentValues._openURL.modify(a1, a2, (void (*)(uint64_t *, char *, char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

double EnvironmentValues._openSensitiveURL.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  double result;
  void (*v7)(void);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  _OWORD v13[2];
  __int16 v14;

  v3 = *v1;
  if (!v1[1])
  {
    v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v13);
    swift_release_n();
    v4 = v14;
    if ((_BYTE)v14 == 0xFF)
    {
      v10 = swift_retain_n();
      v11 = specialized closure #1 in PropertyList.subscript.getter(v10);
      swift_release_n();
      if ((v11 & 1) != 0)
        goto LABEL_4;
LABEL_9:
      *(_QWORD *)a1 = closure #1 in static OpenURLAction.invalidAction.getter;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_WORD *)(a1 + 32) = 1;
      return result;
    }
LABEL_10:
    result = *(double *)v13;
    v12 = v13[1];
    *(_OWORD *)a1 = v13[0];
    *(_OWORD *)(a1 + 16) = v12;
    *(_BYTE *)(a1 + 32) = v4 & 1;
    *(_BYTE *)(a1 + 33) = HIBYTE(v4) & 1;
    return result;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)v13);
  swift_release_n();
  swift_release_n();
  v4 = v14;
  if ((_BYTE)v14 != 0xFF)
    goto LABEL_10;
  swift_retain_n();
  swift_retain_n();
  v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
  swift_release_n();
  swift_release_n();
  if ((v5 & 1) == 0)
    goto LABEL_9;
LABEL_4:
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7 = *(void (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xE0);
  v8 = static CoreGlue.shared;
  v7();

  return result;
}

uint64_t EnvironmentValues._openSensitiveURL.setter(uint64_t a1)
{
  return EnvironmentValues._openURL.setter(a1, (void (*)(uint64_t *, _QWORD *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues._openURL.setter(uint64_t a1, void (*a2)(uint64_t *, _QWORD *, _BYTE *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  _QWORD v16[4];
  __int16 v17;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 33))
    v11 = 256;
  else
    v11 = 0;
  v16[0] = *(_QWORD *)a1;
  v16[1] = v7;
  v16[2] = v8;
  v16[3] = v9;
  v17 = v11 | v10;
  v12 = *v3;
  swift_retain_n();
  outlined copy of OpenURLAction.Handler(v6, v7, v8, v9, v10);
  a2(v3, v16, v15);
  swift_release();
  outlined consume of OpenURLAction.Handler(v6, v7, v8, v9, v10);
  if (v3[1])
  {
    v13 = *v3;
    swift_retain();
    swift_retain();
    a3(v12, v13);
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of OpenURLAction.Handler(v6, v7, v8, v9, v10);
}

void (*EnvironmentValues._openSensitiveURL.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  EnvironmentValues._openSensitiveURL.getter((uint64_t)(v3 + 10));
  return EnvironmentValues._openSensitiveURL.modify;
}

void EnvironmentValues._openSensitiveURL.modify(char **a1, char a2)
{
  EnvironmentValues._openURL.modify(a1, a2, (void (*)(uint64_t *, char *, char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues._openURL.modify(char **a1, char a2, void (*a3)(uint64_t *, char *, char *), void (*a4)(uint64_t, uint64_t))
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 10);
  v7 = *((_QWORD *)*a1 + 11);
  v6 = *((_QWORD *)*a1 + 12);
  v8 = *((_QWORD *)*a1 + 13);
  v9 = (*a1)[112];
  if ((*a1)[113])
    v10 = 256;
  else
    v10 = 0;
  v11 = v10 | v9;
  v12 = (uint64_t *)*((_QWORD *)v4 + 17);
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)v4 = v5;
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v6;
    *((_QWORD *)v4 + 3) = v8;
    *((_WORD *)v4 + 16) = v11;
    v13 = *v12;
    outlined copy of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    a3(v12, v4, v4 + 120);
    swift_release();
    outlined consume of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    if (v12[1])
    {
      v15 = **((_QWORD **)v4 + 17);
      swift_retain();
      swift_retain();
      a4(v13, v15);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    v16 = *((_QWORD *)v4 + 10);
    v17 = *((_QWORD *)v4 + 11);
    v18 = *((_QWORD *)v4 + 12);
    v19 = *((_QWORD *)v4 + 13);
    v20 = v4[112];
  }
  else
  {
    *((_QWORD *)v4 + 5) = v5;
    *((_QWORD *)v4 + 6) = v7;
    *((_QWORD *)v4 + 7) = v6;
    *((_QWORD *)v4 + 8) = v8;
    *((_WORD *)v4 + 36) = v11;
    v21 = *v12;
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    a3(v12, v4 + 40, v4 + 128);
    swift_release();
    outlined consume of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    if (v12[1])
    {
      v23 = **((_QWORD **)v4 + 17);
      swift_retain();
      swift_retain();
      a4(v21, v23);
      swift_release();
      swift_release();
    }
    swift_release();
    v16 = v5;
    v17 = v7;
    v18 = v6;
    v19 = v8;
    v20 = v9;
  }
  outlined consume of OpenURLAction.Handler(v16, v17, v18, v19, v20);
  free(v4);
}

uint64_t outlined consume of OpenURLAction?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1)
    return outlined consume of OpenURLAction.Handler(result, a2, a3, a4, a5 & 1);
  return result;
}

uint64_t sub_234C5A0D0(char *a1)
{
  return EnvironmentValues.hasSystemOpenURLAction.setter(*a1);
}

uint64_t initializeWithCopy for OpenURLAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for OpenURLAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of OpenURLAction.Handler(v9, v10, v11, v12, v13);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OpenURLAction(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of OpenURLAction.Handler(v5, v6, v7, v8, v9);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenURLAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenURLAction()
{
  return &type metadata for OpenURLAction;
}

uint64_t destroy for OpenURLAction(uint64_t a1)
{
  return outlined consume of OpenURLAction.Handler(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for OpenURLAction.Handler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for OpenURLAction.Handler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of OpenURLAction.Handler(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for OpenURLAction.Handler(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of OpenURLAction.Handler(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction.Handler(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenURLAction.Handler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for OpenURLAction.Handler(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for OpenURLAction.Handler()
{
  return &type metadata for OpenURLAction.Handler;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLAction.Result(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(type metadata accessor for OpenURLAction.Result.ActionResult(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for (url: URL?)();
    v7 = v6;
    v8 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      v10 = type metadata accessor for URL();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        type metadata accessor for URL?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t type metadata accessor for OpenURLAction.Result.ActionResult(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for OpenURLAction.Result.ActionResult);
}

void *initializeWithCopy for OpenURLAction.Result(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for (url: URL?)();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    v7 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithCopy for OpenURLAction.Result(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;

  type metadata accessor for (url: URL?)();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v4);
  v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      v14 = type metadata accessor for URL();
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      v17 = v16(a1, 1, v14);
      v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 16))(a1, a2, v14);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 24))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      type metadata accessor for URL?(0);
      goto LABEL_8;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for (url: URL?));
LABEL_7:
    v13 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
LABEL_8:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  if (v9)
    goto LABEL_7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v11 + 16))(a1, a2, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

void *initializeWithTake for OpenURLAction.Result(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for (url: URL?)();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    v7 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithTake for OpenURLAction.Result(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;

  type metadata accessor for (url: URL?)();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v4);
  v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      v14 = type metadata accessor for URL();
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      v17 = v16(a1, 1, v14);
      v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 32))(a1, a2, v14);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 40))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      type metadata accessor for URL?(0);
      goto LABEL_8;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for (url: URL?));
LABEL_7:
    v13 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
LABEL_8:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  if (v9)
    goto LABEL_7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v11 + 32))(a1, a2, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction.Result()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C5ABF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OpenURLAction.Result()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C5AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for OpenURLAction.Result()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OpenURLAction.Result.ActionResult(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenURLActionKey()
{
  return &type metadata for OpenURLActionKey;
}

ValueMetadata *type metadata accessor for OpenSensitiveURLActionKey()
{
  return &type metadata for OpenSensitiveURLActionKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLAction.Result.ActionResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    type metadata accessor for (url: URL?)();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        type metadata accessor for URL?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
  }
  return a1;
}

uint64_t destroy for OpenURLAction.Result(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for (url: URL?)();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for URL();
    v5 = *(_QWORD *)(v4 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for OpenURLAction.Result.ActionResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for (url: URL?)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(a1, a2, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

void *assignWithCopy for OpenURLAction.Result.ActionResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v22;

  type metadata accessor for (url: URL?)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 2, v6);
  v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      v16 = type metadata accessor for URL();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
      v19 = v18(a1, 1, v16);
      v20 = v18(a2, 1, v16);
      if (v19)
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 16))(a1, a2, v16);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
          return a1;
        }
      }
      else
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 24))(a1, a2, v16);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v17 + 8))(a1, v16);
      }
      type metadata accessor for URL?(0);
      v15 = *(_QWORD *)(v22 - 8);
      goto LABEL_8;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for (url: URL?));
LABEL_7:
    v15 = *(_QWORD *)(a3 - 8);
LABEL_8:
    memcpy(a1, a2, *(_QWORD *)(v15 + 64));
    return a1;
  }
  if (v11)
    goto LABEL_7;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v13 + 16))(a1, a2, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

void *initializeWithTake for OpenURLAction.Result.ActionResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for (url: URL?)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(a1, a2, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

void *assignWithTake for OpenURLAction.Result.ActionResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v22;

  type metadata accessor for (url: URL?)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 2, v6);
  v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      v16 = type metadata accessor for URL();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
      v19 = v18(a1, 1, v16);
      v20 = v18(a2, 1, v16);
      if (v19)
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 32))(a1, a2, v16);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
          return a1;
        }
      }
      else
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 40))(a1, a2, v16);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v17 + 8))(a1, v16);
      }
      type metadata accessor for URL?(0);
      v15 = *(_QWORD *)(v22 - 8);
      goto LABEL_8;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for (url: URL?));
LABEL_7:
    v15 = *(_QWORD *)(a3 - 8);
LABEL_8:
    memcpy(a1, a2, *(_QWORD *)(v15 + 64));
    return a1;
  }
  if (v11)
    goto LABEL_7;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v13 + 32))(a1, a2, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction.Result.ActionResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C5B480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  type metadata accessor for (url: URL?)();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OpenURLAction.Result.ActionResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C5B4D8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  type metadata accessor for (url: URL?)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for OpenURLAction.Result.ActionResult(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (url: URL?)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for OpenURLAction.Result.ActionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (url: URL?)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

void type metadata completion function for OpenURLAction.Result.ActionResult()
{
  unint64_t v0;

  type metadata accessor for URL?(319);
  if (v0 <= 0x3F)
    swift_initEnumMetadataSinglePayload();
}

uint64_t sub_234C5B5F8()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for HasSystemOpenURLActionKey()
{
  return &type metadata for HasSystemOpenURLActionKey;
}

uint64_t (*default argument 1 of Gesture.delayed(by:filter:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys;
}

void Gesture.delayed(by:filter:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(double *)v17 = a6;
  v17[1] = a1;
  v17[2] = a2;
  v15 = type metadata accessor for DelayedGesture(0, AssociatedTypeWitness, v13, v14);
  v16 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedGesture<A>, v15);
  Gesture.modifier<A>(_:)((uint64_t)v17, a3, v15, a4, v16, a5);
}

uint64_t sub_234C5B728()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for DelayedGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelayedGesture);
}

double DelayedGesture.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DelayedGesture.duration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DelayedGesture.duration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for DelayedGesture.filter : <A>DelayedGesture<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(a3 + a2 - 8);
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v7;
  v8[4] = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Bool);
  a4[1] = v8;
  return swift_retain();
}

uint64_t key path setter for DelayedGesture.filter : <A>DelayedGesture<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  v6 = a1[1];
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v7;
  v8[4] = v6;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool);
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t DelayedGesture.filter.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t DelayedGesture.filter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*DelayedGesture.filter.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static DelayedGesture._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int32x2_t v12;
  __int128 v13;
  int32x2_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int32x2_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[28];
  int32x2_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v37 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 96);
  v11 = *(_DWORD *)(a2 + 120);
  v29 = v8;
  v30 = *(int32x2_t *)(a2 + 8);
  v12 = v30;
  v31 = v9;
  v13 = *(_OWORD *)(a2 + 40);
  v32 = *(_OWORD *)(a2 + 24);
  v33 = v13;
  v34 = *(_OWORD *)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 72);
  v36 = v10;
  v38 = *(int32x2_t *)(a2 + 112);
  v14 = v38;
  v39 = v11;
  a3(&v24, &v29);
  v15 = v24;
  swift_bridgeObjectRelease();
  v29 = __PAIR64__(v15, v7);
  v30 = vzip1_s32(v12, v14);
  LOBYTE(v31) = (v11 & 0x10) != 0;
  *(_QWORD *)&v32 = 0;
  BYTE8(v32) = 1;
  HIDWORD(v32) = 0;
  v26 = type metadata accessor for GesturePhase(0, a4, v16, v17);
  v20 = type metadata accessor for DelayedPhase(0, a4, v18, v19);
  v27 = v20;
  v28 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPhase<A>, v20);
  v21 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v25, v20, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
  return _GestureOutputs.init(phase:)(v24, a5);
}

uint64_t DelayedPhase.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for DelayedGesture(0, *(_QWORD *)(a1 + 16), a2, a3);
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v8 = Value[1];
  v7 = Value[2];
  *a4 = v6;
  a4[1] = v8;
  a4[2] = v7;
  return swift_retain();
}

uint64_t DelayedPhase.childPhase.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t Value;

  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 16), a2, a3);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a4, Value, v5);
}

uint64_t DelayedPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance DelayedGesture<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static DelayedGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

void DelayedPhase.resetPhase()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
}

uint64_t DelayedPhase.updateValue()(uint64_t a1)
{
  unsigned int *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  double v31;
  char v32;
  unsigned int v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  int EnumCaseMultiPayload;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_BYTE *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;
  double v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t (*v61)(_BYTE *, uint64_t, uint64_t);
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  double v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  char v78;
  double v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  double v98;
  char v99;
  double v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  _BYTE v109[4];
  unsigned int v110;
  uint64_t (*v111)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  _QWORD v122[2];
  __int128 v123;
  char v124;
  double v125;
  char v126;
  unsigned int v127;
  _QWORD v128[5];

  v2 = (__int128 *)v1;
  v128[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = &v109[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for GesturePhase(0, v4, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v109[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v118 = &v109[-v15];
  MEMORY[0x24BDAC7A8](v16);
  v121 = &v109[-v17];
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = &v109[-v20];
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPhase<A>, a1, v19);
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    v117 = v11;
    v112 = v7;
    v114 = v5;
    v115 = v4;
    v113 = v21;
    v119 = v13;
    v120 = v10;
    v25 = *v1;
    v26 = v1[1];
    v27 = v1[2];
    v28 = v1[3];
    v29 = a1;
    v30 = *((_BYTE *)v1 + 16);
    v31 = *((double *)v1 + 3);
    v32 = *((_BYTE *)v1 + 32);
    v33 = v1[9];
    LODWORD(v123) = *v1;
    *(_QWORD *)((char *)&v123 + 4) = __PAIR64__(v27, v26);
    HIDWORD(v123) = v28;
    v124 = v30;
    v125 = v31;
    v126 = v32;
    v127 = v33;
    v116 = v29;
    DelayedPhase.modifier.getter(v29, v23, v24, v128);
    v34 = *(double *)v128;
    swift_release();
    if (v34 <= 0.0 || (swift_beginAccess(), (static CoreTesting.isRunning & 1) != 0))
    {
      *(_QWORD *)&v123 = __PAIR64__(v26, v25);
      *((_QWORD *)&v123 + 1) = __PAIR64__(v28, v27);
      v124 = v30;
      v125 = v31;
      v126 = v32;
      v127 = v33;
      v37 = (uint64_t)v119;
      v38 = v116;
      v39 = DelayedPhase.childPhase.getter(v116, v35, v36, (uint64_t)v119);
      v40 = MEMORY[0x24BDAC7A8](v39);
      *(_QWORD *)&v109[-16] = v38;
      *(_QWORD *)&v109[-8] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPhase<A>, v38, v40);
      v41 = v120;
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v37, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v109[-32], v120, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v42);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 8))(v37, v41);
    }
    *(_QWORD *)&v123 = __PAIR64__(v26, v25);
    *((_QWORD *)&v123 + 1) = __PAIR64__(v28, v27);
    v124 = v30;
    v125 = v31;
    v126 = v32;
    v127 = v33;
    v43 = v121;
    v44 = v116;
    DelayedPhase.childPhase.getter(v116, v35, v36, (uint64_t)v121);
    v45 = v120;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v62 = v117;
      v53 = (uint64_t)v119;
      v111 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v117 + 16);
      v111(v119, (uint64_t)v43, v45);
      v50 = v115;
      v51 = v114;
    }
    else
    {
      v49 = (uint64_t)v113;
      v50 = v115;
      v51 = v114;
      if (EnumCaseMultiPayload)
      {
LABEL_9:
        v55 = *((_BYTE *)v2 + 16);
        v56 = *((double *)v2 + 3);
        v57 = *((_BYTE *)v2 + 32);
        v58 = *((_DWORD *)v2 + 9);
        v123 = *v2;
        v124 = v55;
        v125 = v56;
        v126 = v57;
        v127 = v58;
        DelayedPhase.childPhase.getter(v44, v47, v48, v49);
        v59 = v117;
        v60 = *(_BYTE **)(v117 + 8);
        ((void (*)(_BYTE *, uint64_t))v60)(v43, v45);
        v61 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v59 + 16);
        goto LABEL_25;
      }
      v52 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v117 + 16);
      v53 = (uint64_t)v118;
      v52(v118, (uint64_t)v43, v45);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v53, 1, v50) == 1)
      {
        v54 = type metadata accessor for Optional();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
        goto LABEL_9;
      }
      v111 = v52;
      v62 = v117;
    }
    v63 = v112;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v51 + 32))(v112, v53, v50);
    v121 = *(_BYTE **)(v62 + 8);
    ((void (*)(_BYTE *, uint64_t))v121)(v43, v45);
    v64 = *((_DWORD *)v2 + 1);
    v66 = *((_DWORD *)v2 + 2);
    v65 = *((_DWORD *)v2 + 3);
    v67 = *((_BYTE *)v2 + 16);
    v68 = *((double *)v2 + 3);
    v69 = *((_BYTE *)v2 + 32);
    v70 = *((_DWORD *)v2 + 9);
    LODWORD(v117) = *(_DWORD *)v2;
    *(_QWORD *)&v123 = __PAIR64__(v64, v117);
    *((_QWORD *)&v123 + 1) = __PAIR64__(v65, v66);
    v110 = v65;
    v124 = v67;
    v125 = v68;
    v126 = v69;
    LODWORD(v118) = v70;
    v127 = v70;
    DelayedPhase.modifier.getter(v44, v71, v72, v122);
    v73 = v44;
    v74 = ((uint64_t (*)(_BYTE *))v122[1])(v63);
    swift_release();
    if ((v74 & 1) != 0)
    {
      v77 = *(double *)AGGraphGetValue();
      if ((v69 & 1) != 0)
      {
        v44 = v116;
        v60 = v121;
        v61 = v111;
      }
      else
      {
        *(_QWORD *)&v123 = __PAIR64__(v64, v117);
        *((_QWORD *)&v123 + 1) = __PAIR64__(v110, v66);
        v124 = v67;
        v125 = v68;
        v126 = 0;
        v127 = v118;
        v44 = v116;
        DelayedPhase.modifier.getter(v116, v75, v76, v122);
        v84 = *(double *)v122;
        swift_release();
        v85 = v84 > v77 - v68;
        v77 = v68;
        v60 = v121;
        v61 = v111;
        if (!v85)
        {
          (*(void (**)(_BYTE *, uint64_t))(v114 + 8))(v112, v115);
          v99 = *((_BYTE *)v2 + 16);
          v100 = *((double *)v2 + 3);
          v101 = *((_BYTE *)v2 + 32);
          v102 = *((_DWORD *)v2 + 9);
          v123 = *v2;
          v124 = v99;
          v125 = v100;
          v126 = v101;
          v127 = v102;
          v49 = (uint64_t)v113;
          DelayedPhase.childPhase.getter(v44, v103, v104, (uint64_t)v113);
          v45 = v120;
          goto LABEL_25;
        }
      }
      *((double *)v2 + 3) = v77;
      *((_BYTE *)v2 + 32) = 0;
      v86 = v114;
      v49 = (uint64_t)v113;
      v87 = v115;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v114 + 56))(v113, 1, 1, v115);
      v45 = v120;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v112, v87);
      LODWORD(v87) = *((unsigned __int8 *)v2 + 16);
      v88 = *((double *)v2 + 3);
      v89 = *((_BYTE *)v2 + 32);
      v90 = *((_DWORD *)v2 + 9);
      v123 = *v2;
      v124 = v87;
      v125 = v88;
      v126 = v89;
      v127 = v90;
      DelayedPhase.modifier.getter(v44, v91, v92, v122);
      v93 = *(double *)v122;
      swift_release();
      v94 = v77 + v93;
      if ((_DWORD)v87 == 1)
      {
        v95 = specialized static GestureGraph.current.getter();
        v96 = *(double *)(v95 + 264);
        if (v94 < v96)
          v96 = v94;
        *(double *)(v95 + 264) = v96;
        swift_release();
      }
      else
      {
        v97 = specialized static ViewGraph.current.getter();
        swift_beginAccess();
        v98 = *(double *)(v97 + 400);
        if (v94 < v98)
          v98 = v94;
        *(double *)(v97 + 400) = v98;
        swift_release();
      }
      goto LABEL_25;
    }
    (*(void (**)(_BYTE *, uint64_t))(v114 + 8))(v63, v115);
    v78 = *((_BYTE *)v2 + 16);
    v79 = *((double *)v2 + 3);
    v80 = *((_BYTE *)v2 + 32);
    v81 = *((_DWORD *)v2 + 9);
    v123 = *v2;
    v124 = v78;
    v125 = v79;
    v126 = v80;
    v127 = v81;
    v49 = (uint64_t)v113;
    DelayedPhase.childPhase.getter(v73, v82, v83, (uint64_t)v113);
    v45 = v120;
    v60 = v121;
    v44 = v73;
    v61 = v111;
LABEL_25:
    v105 = (uint64_t)v119;
    v106 = v61(v119, v49, v45);
    v107 = MEMORY[0x24BDAC7A8](v106);
    *(_QWORD *)&v109[-16] = v44;
    *(_QWORD *)&v109[-8] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPhase<A>, v44, v107);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v105, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)&v109[-32], v45, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v108);
    ((void (*)(uint64_t, uint64_t))v60)(v105, v45);
    return ((uint64_t (*)(uint64_t, uint64_t))v60)(v49, v45);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance DelayedPhase<A>()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance DelayedPhase<A>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance DelayedPhase<A>())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance DelayedPhase<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

uint64_t type metadata accessor for DelayedPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelayedPhase);
}

uint64_t sub_234C5C3AC()
{
  return 8;
}

_QWORD *sub_234C5C3B8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DelayedGesture(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DelayedGesture(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DelayedGesture(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DelayedGesture(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DelayedGesture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DelayedPhase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DelayedPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for DelayedPhase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPhase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in DelayedPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234C5C5D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 24))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Bool)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 24))();
  *a1 = result & 1;
  return result;
}

uint64_t closure #1 in StatefulRule.value.setterpartial apply()
{
  return partial apply for closure #1 in StatefulRule.value.setter();
}

SwiftUI::Spring __swiftcall Spring.init(mass:stiffness:damping:allowOverDamping:)(Swift::Double mass, Swift::Double stiffness, Swift::Double damping, Swift::Bool allowOverDamping)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  SwiftUI::Spring result;

  v5 = stiffness / mass;
  v6 = sqrt(stiffness / mass);
  v7 = damping / (mass + mass);
  if (allowOverDamping || (v8 = 0.0, v6 >= v7))
  {
    v8 = sqrt(vabdd_f64(v5, v7 * v7));
    if (v6 < v7)
      v8 = -v8;
  }
  else
  {
    v7 = v6;
  }
  *v4 = v8;
  v4[1] = v7;
  v4[2] = mass;
  result._mass = v8;
  result.decayConstant = v7;
  result.angularFrequency = mass;
  return result;
}

void specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(double a1, double a2, double a3, double a4, double a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t i;
  double v13;
  long double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  if (a5 != 0.0)
  {
    v8 = a1 * a5;
    if (a4 <= 0.0)
    {
      v22 = v8 - a2;
      v20 = -a4 - a5;
      v21 = -a5;
      v18 = a5 - a4;
      v19 = a4 - a5;
      v17 = a4 + a4;
      v9 = -1.0;
      v10 = 0.0;
      v11 = INFINITY;
      for (i = 1024; i; --i)
      {
        if (a4 >= 0.0)
        {
          v15 = a1 - (v22 * v10 + a1) * exp(v10 * v21);
        }
        else
        {
          v13 = exp(v20 * v10);
          v14 = exp(v19 * v10);
          v15 = ((v18 * v13 + v20 * v14) / v17 + 1.0) * a1 - (v13 - v14) / v17 * a2;
        }
        v16 = sqrt((a1 - v15) * (a1 - v15));
        if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
          break;
        if (v11 >= a3)
        {
          if (v16 < v11)
          {
            v11 = v16;
            v9 = v10;
          }
        }
        else if (v16 >= a3)
        {
          v11 = INFINITY;
        }
        else if (v10 - v9 > 1.0)
        {
          return;
        }
        v10 = v10 + 0.1;
      }
    }
    else
    {
      fmax(-log(a3 / (sqrt(a1 * a1) + sqrt((v8 - a2) * (v8 - a2)))) / a5, 0.0);
    }
  }
}

void specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(double *a1, float64x2_t *a2, double a3, double a4, double a5)
{
  double v5;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  if (a5 != 0.0)
  {
    v5 = a5;
    v8 = a1[7];
    v9 = a1[8];
    v11 = a1[5];
    v10 = a1[6];
    v12 = a1[3];
    v13 = a1[4];
    v15 = a1[1];
    v14 = a1[2];
    if (a4 <= 0.0)
    {
      v34 = -1.0;
      v21 = INFINITY;
      v22 = 1024;
      v23 = 0.0;
      v32 = v5;
      v33 = *a1;
      v31 = a4;
      do
      {
        v35 = v23;
        v36 = v21;
        v27 = v5;
        v28 = v11;
        specialized Spring.value<A>(target:initialVelocity:time:)((uint64_t)a1, a2, (uint64_t)&v37, v23, a4, v27);
        v29 = sqrt((v33 - v37) * (v33 - v37)+ (v15 - v38) * (v15 - v38)+ (v14 - v39) * (v14 - v39)+ (v12 - v40) * (v12 - v40)+ (v13 - v41) * (v13 - v41)+ (v28 - v42) * (v28 - v42)+ (v10 - v43) * (v10 - v43)+ (v8 - v44) * (v8 - v44)+ (v9 - v45) * (v9 - v45));
        if ((~*(_QWORD *)&v29 & 0x7FF0000000000000) == 0)
          break;
        v11 = v28;
        v21 = v36;
        if (v36 >= a3)
        {
          v24 = v29 < v36;
          if (v29 < v36)
            v21 = v29;
          v25 = v34;
          v26 = v35;
          if (v24)
            v25 = v35;
          v34 = v25;
          v5 = v32;
          a4 = v31;
        }
        else
        {
          v5 = v32;
          a4 = v31;
          v26 = v35;
          if (v29 >= a3)
          {
            v21 = INFINITY;
          }
          else if (v35 - v34 > 1.0)
          {
            return;
          }
        }
        v23 = v26 + 0.1;
        --v22;
      }
      while (v22);
    }
    else
    {
      v17 = v14 * a5 - a2[1].f64[0];
      v18 = v12 * v5 - a2[1].f64[1];
      v19 = v13 * v5 - a2[2].f64[0];
      v20 = v11 * v5 - a2[2].f64[1];
      v16 = *a1;
      fmax(-log(a3/ (sqrt(v9 * v9 + v8 * v8 + v10 * v10 + v11 * v11 + v13 * v13 + v12 * v12 + v14 * v14 + v15 * v15 + v16 * v16)+ sqrt((v16 * v5 - a2->f64[0]) * (v16 * v5 - a2->f64[0])+ (v15 * v5 - a2->f64[1]) * (v15 * v5 - a2->f64[1])+ v17 * v17+ v18 * v18+ v19 * v19+ v20 * v20+ (v10 * v5 - a2[3].f64[0]) * (v10 * v5 - a2[3].f64[0])+ (v8 * v5 - a2[3].f64[1]) * (v8 * v5 - a2[3].f64[1])+ (v9 * v5 - a2[4].f64[0]) * (v9 * v5 - a2[4].f64[0]))))/ v5, 0.0);
    }
  }
}

double Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  double v21;
  double v22;
  BOOL v23;
  void (*v24)(char *, uint64_t);
  double (*v25)(uint64_t, uint64_t);
  double v26;
  double v27;
  long double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  double v34;
  uint64_t v36;
  double (*v37)(uint64_t, uint64_t);
  double v38[3];
  double v39;
  __int128 v40;

  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v36 - v18;
  v20 = *(_OWORD *)(v5 + 8);
  if (*(double *)&v20 == 0.0)
    return INFINITY;
  v22 = *(double *)v5;
  v23 = *(double *)v5 <= 0.0;
  *(_OWORD *)v38 = *(_OWORD *)(v5 + 8);
  if (v23)
  {
    v37 = *(double (**)(uint64_t, uint64_t))(a4 + 24);
    v21 = -1.0;
    v29 = 0.0;
    v30 = INFINITY;
    v31 = 1024;
    while (1)
    {
      v39 = v22;
      v40 = v20;
      v32 = a2;
      Spring.value<A>(target:initialVelocity:time:)(a1, v29, a2, a3, a4);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v33 = *(void (**)(char *, uint64_t))(v11 + 8);
      v33(v19, a3);
      v34 = sqrt(v37(a3, a4));
      if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
        break;
      if (v30 >= a5)
      {
        v33(v13, a3);
        if (v34 < v30)
        {
          v30 = v34;
          v21 = v29;
        }
      }
      else
      {
        v33(v13, a3);
        if (v34 >= a5)
        {
          v30 = INFINITY;
        }
        else if (v29 - v21 > 1.0)
        {
          return v21;
        }
      }
      v29 = v29 + 0.1;
      --v31;
      v20 = *(_OWORD *)v38;
      a2 = v32;
      if (!v31)
        return 0.0;
    }
    v33(v13, a3);
    return 0.0;
  }
  else
  {
    VectorArithmetic.scaled(by:)(a3, a4, (uint64_t)v16, *(double *)&v20);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24(v16, a3);
    v25 = *(double (**)(uint64_t, uint64_t))(a4 + 24);
    v26 = sqrt(v25(a3, a4));
    v27 = v25(a3, a4);
    v28 = log(a5 / (v26 + sqrt(v27)));
    v21 = fmax(-v28 / v38[0], 0.0);
    v24(v19, a3);
  }
  return v21;
}

void specialized Spring.value<A>(target:initialVelocity:time:)(double a1, double a2, double a3, double a4, double a5)
{
  if (a4 >= 0.0)
  {
    if (a4 > 0.0)
      __sincos_stret(a3 * a4);
    exp(-(a5 * a3));
  }
  else
  {
    exp((-a4 - a5) * a3);
    exp((a4 - a5) * a3);
  }
}

void specialized Spring.value<A>(target:initialVelocity:time:)(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  double v10;
  double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  char v48;

  if (a5 >= 0.0)
  {
    if (a5 <= 0.0)
    {
      v38 = *(double *)(a1 + 64);
      v39 = v38 + (v38 * a6 - a2[4].f64[0]) * a4;
      v40 = exp(-(a6 * a4));
      v41 = *(float64x2_t *)(a1 + 16);
      v42 = *(float64x2_t *)(a1 + 32);
      v43 = *(float64x2_t *)(a1 + 48);
      v44 = vmulq_n_f64(vaddq_f64(v41, vmulq_n_f64(vsubq_f64(vmulq_n_f64(v41, a6), a2[1]), a4)), v40);
      v45 = vmulq_n_f64(vaddq_f64(v42, vmulq_n_f64(vsubq_f64(vmulq_n_f64(v42, a6), a2[2]), a4)), v40);
      v46 = vmulq_n_f64(vaddq_f64(v43, vmulq_n_f64(vsubq_f64(vmulq_n_f64(v43, a6), a2[3]), a4)), v40);
      v47 = v40 * v39;
      v22 = vsubq_f64(*(float64x2_t *)a1, vmulq_n_f64(vaddq_f64(*(float64x2_t *)a1, vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), a4)), v40));
      v23 = vsubq_f64(v41, v44);
      v24 = vsubq_f64(v42, v45);
      v25 = vsubq_f64(v43, v46);
      v26 = v38 - v47;
    }
    else
    {
      v27 = *(double *)(a1 + 64);
      v28 = v27 * a6 - a2[4].f64[0];
      v29 = __sincos_stret(a4 * a5);
      v30 = exp(-(a6 * a4));
      v31 = *(float64x2_t *)(a1 + 16);
      v32 = *(float64x2_t *)(a1 + 32);
      v33 = *(float64x2_t *)(a1 + 48);
      v34 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v31, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(v31, a6), a2[1]), v29.__sinval / a5)), v30);
      v35 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v32, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(v32, a6), a2[2]), v29.__sinval / a5)), v30);
      v36 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v33, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(v33, a6), a2[3]), v29.__sinval / a5)), v30);
      v37 = v30 * (v29.__cosval * v27 + v29.__sinval / a5 * v28);
      v22 = vsubq_f64(*(float64x2_t *)a1, vmulq_n_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), v29.__sinval / a5)), v30));
      v23 = vsubq_f64(v31, v34);
      v24 = vsubq_f64(v32, v35);
      v25 = vsubq_f64(v33, v36);
      v26 = v27 - v37;
    }
  }
  else
  {
    v10 = -a5 - a6;
    v11 = exp(v10 * a4);
    v12 = exp((a5 - a6) * a4);
    v13 = ((a6 - a5) * v11 + v10 * v12) / (a5 + a5) + 1.0;
    v14 = v13 * *(double *)(a1 + 64);
    v15 = (v11 - v12) / (a5 + a5);
    v16 = vmulq_n_f64(a2[1], v15);
    v17 = vmulq_n_f64(*(float64x2_t *)(a1 + 32), v13);
    v18 = vmulq_n_f64(*(float64x2_t *)(a1 + 48), v13);
    v19 = vmulq_n_f64(a2[2], v15);
    v20 = vmulq_n_f64(a2[3], v15);
    v21 = v15 * a2[4].f64[0];
    v22 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, v13), vmulq_n_f64(*a2, v15));
    v23 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), v13), v16);
    v24 = vsubq_f64(v17, v19);
    v25 = vsubq_f64(v18, v20);
    v26 = v14 - v21;
  }
  v48 = *(_BYTE *)(a1 + 72);
  *(float64x2_t *)a3 = v22;
  *(float64x2_t *)(a3 + 16) = v23;
  *(float64x2_t *)(a3 + 32) = v24;
  *(float64x2_t *)(a3 + 48) = v25;
  *(double *)(a3 + 64) = v26;
  *(_BYTE *)(a3 + 72) = v48;
}

uint64_t Spring.value<A>(target:initialVelocity:time:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  void (*v32)(char *, uint64_t);
  __double2 v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v39 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v39 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v39 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v39 - v24;
  v27 = *v5;
  v26 = v5[1];
  v28 = *v5 <= 0.0;
  if (*v5 >= 0.0)
  {
    v42 = v22;
    if (v28)
    {
      v35 = v23;
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, v26);
      v36 = *(_QWORD *)(a5 + 8);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v32 = *(void (**)(char *, uint64_t))(v9 + 8);
      v32(v20, a4);
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v17, a2);
      MEMORY[0x23B7C7090](v35, v17, a4, v36);
      v32(v17, a4);
      v37 = exp(-(v26 * a2));
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v17, v37);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v32(v17, a4);
      v32(v20, a4);
    }
    else
    {
      v41 = v23;
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, v26);
      v40 = *(_QWORD *)(a5 + 8);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v32 = *(void (**)(char *, uint64_t))(v9 + 8);
      v32(v20, a4);
      v33 = __sincos_stret(v27 * a2);
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v14, v33.__cosval);
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v11, v33.__sinval / v27);
      MEMORY[0x23B7C7090](v14, v11, a4, v40);
      v32(v11, a4);
      v32(v14, a4);
      v34 = exp(-(v26 * a2));
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, v34);
      v32(v17, a4);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v32(v20, a4);
    }
  }
  else
  {
    v29 = -v27 - v26;
    v30 = exp(v29 * a2);
    v31 = exp((v27 - v26) * a2);
    VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v25, ((v26 - v27) * v30 + v29 * v31) / (v27 + v27) + 1.0);
    VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, (v30 - v31) / (v27 + v27));
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v32(v20, a4);
  }
  return ((uint64_t (*)(char *, uint64_t))v32)(v25, a4);
}

double Spring.angularFrequency.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Spring.angularFrequency.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Spring.angularFrequency.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Spring.decayConstant.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void Spring.decayConstant.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*Spring.decayConstant.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Spring._mass.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*Spring._mass.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Spring.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = v0[1];
  v2 = v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *v0;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

BOOL static Spring.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

Swift::Int Spring.hashValue.getter()
{
  Hasher.init(_seed:)();
  Spring.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Spring()
{
  Hasher.init(_seed:)();
  Spring.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Spring()
{
  Hasher.init(_seed:)();
  Spring.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Spring(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

SwiftUI::Spring __swiftcall Spring.init(duration:bounce:)(Swift::Double duration, Swift::Double bounce)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  SwiftUI::Spring result;

  v3 = -6.28318531;
  if (bounce > -1.0)
  {
    v4 = 1.0;
    if (bounce >= 0.0)
    {
      if (bounce == 0.0 || (v4 = 0.0, bounce > 1.0))
      {
LABEL_9:
        v3 = 6.28318531;
        goto LABEL_10;
      }
      v4 = 1.0 - bounce;
    }
    else
    {
      v4 = 1.0 / (bounce + 1.0);
    }
    if (v4 > 1.0)
      goto LABEL_10;
    goto LABEL_9;
  }
  v4 = INFINITY;
LABEL_10:
  v5 = v3 * sqrt(vabdd_f64(1.0, v4 * v4)) / duration;
  v6 = v4 * 6.28318531;
  v7 = v4 * 6.28318531 / duration;
  *(double *)v2 = v5;
  *(double *)(v2 + 8) = v7;
  *(_QWORD *)(v2 + 16) = 0x3FF0000000000000;
  result._mass = v6;
  result.decayConstant = v5;
  result.angularFrequency = v7;
  return result;
}

SwiftUI::Spring __swiftcall Spring.init(response:dampingRatio:)(Swift::Double response, Swift::Double dampingRatio)
{
  uint64_t v2;
  float64x2_t v3;
  const double *v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  SwiftUI::Spring result;

  *(_QWORD *)&v3.f64[0] = qword_2352904C0[dampingRatio > 1.0];
  v3.f64[1] = dampingRatio;
  v4 = (const double *)&qword_2352808A0;
  v5 = vld1q_dup_f64(v4);
  v5.f64[0] = sqrt(vabdd_f64(1.0, dampingRatio * dampingRatio));
  v6 = vmulq_f64(v3, v5);
  v7 = vdivq_f64(v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&response, 0));
  *(float64x2_t *)v2 = v7;
  *(_QWORD *)(v2 + 16) = 0x3FF0000000000000;
  result._mass = v5.f64[0];
  result.decayConstant = v6.f64[0];
  result.angularFrequency = v7.f64[0];
  return result;
}

double Spring.bounce.getter()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = v0[1];
  v2 = v1 * 0.5;
  v3 = v1 * v1;
  v4 = *v0 * *v0;
  if (*v0 >= 0.0)
    return v2 * (-6.28318531 / sqrt(v4 + v3)) / 3.14159265 + 1.0;
  else
    return 1.0 / (v2 * (6.28318531 / sqrt(v3 - v4)) / 3.14159265) + -1.0;
}

double Spring.dampingRatio.getter()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = v0[1];
  v2 = v1 * 0.5;
  v3 = v1 * v1;
  v4 = -*v0;
  if (*v0 >= 0.0)
    v4 = *v0;
  return v2 * (6.28318531 / sqrt(v3 + *v0 * v4)) / 3.14159265;
}

double Spring.duration.getter()
{
  double *v0;
  double v1;

  v1 = -*v0;
  if (*v0 >= 0.0)
    v1 = *v0;
  return 6.28318531 / sqrt(v0[1] * v0[1] + *v0 * v1);
}

double Spring.mass.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double Spring.stiffness.getter()
{
  double *v0;

  return v0[2] * (*v0 * *v0 + v0[1] * v0[1]);
}

double Spring.damping.getter()
{
  uint64_t v0;

  return (*(double *)(v0 + 8) + *(double *)(v0 + 8)) * *(double *)(v0 + 16);
}

SwiftUI::Spring __swiftcall Spring.init(settlingDuration:dampingRatio:epsilon:)(Swift::Double settlingDuration, Swift::Double dampingRatio, Swift::Double epsilon)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double (*v15)(double);
  double (*v16)(double);
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  SwiftUI::Spring result;

  v5 = v3;
  v6 = fmax(dampingRatio, 2.22044605e-16);
  if (v6 <= 1.0)
    v7 = v6;
  else
    v7 = 1.0;
  v8 = fmax(settlingDuration, 0.01);
  if (v8 <= 10.0)
    v9 = v8;
  else
    v9 = 10.0;
  if (v7 >= 1.0)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = 0;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = partial apply for closure #5 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(_QWORD *)(v13 + 24) = v17;
    *(Swift::Double *)(v13 + 32) = epsilon;
    *(double *)(v13 + 40) = v9;
    v14 = swift_allocObject();
    *(double *)(v14 + 16) = v9 * v9;
    *(_QWORD *)(v14 + 24) = 0;
    *(double *)(v14 + 32) = v9;
    v15 = (double (*)(double))partial apply for closure #6 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    v16 = (double (*)(double))partial apply for closure #7 in Spring.init(settlingDuration:dampingRatio:epsilon:);
  }
  else
  {
    v10 = sqrt(1.0 - v7 * v7);
    v11 = swift_allocObject();
    *(double *)(v11 + 16) = v10;
    v12 = swift_allocObject();
    *(double *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = partial apply for closure #1 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(_QWORD *)(v12 + 40) = v11;
    v13 = swift_allocObject();
    *(Swift::Double *)(v13 + 16) = epsilon;
    *(double *)(v13 + 24) = v9 * v7;
    *(_QWORD *)(v13 + 32) = partial apply for closure #2 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(_QWORD *)(v13 + 40) = v12;
    v14 = swift_allocObject();
    *(double *)(v14 + 16) = v9 * v7;
    *(_QWORD *)(v14 + 24) = partial apply for closure #2 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(_QWORD *)(v14 + 32) = v12;
    *(_QWORD *)(v14 + 40) = 0;
    *(double *)(v14 + 48) = v9 * v7 * 0.0;
    *(double *)(v14 + 56) = v9 * (v7 * v7);
    *(double *)(v14 + 64) = v10;
    swift_retain();
    v15 = partial apply for closure #3 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    v16 = (double (*)(double))partial apply for closure #4 in Spring.init(settlingDuration:dampingRatio:epsilon:);
  }
  v25 = 0;
  v26 = 0;
  v24 = 0.0;
  if ((specialized closure #8 in Spring.init(settlingDuration:dampingRatio:epsilon:)(12, &v24, v15, 5.0, v9, epsilon, v13, v16, v14, &v25, &v26) & 1) == 0)specialized closure #8 in Spring.init(settlingDuration:dampingRatio:epsilon:)(20, &v24, v15, 1.0, v9, epsilon, v13,
      v16,
      v14,
      &v25,
      &v26);
  swift_beginAccess();
  v18 = v24 * v24;
  v19 = sqrt(v24 * v24);
  v20 = v7 * (v19 + v19) * 0.5;
  swift_release();
  swift_release();
  v21 = sqrt(vabdd_f64(v18, v20 * v20));
  if (v19 >= v20)
    v22 = v20;
  else
    v22 = v19;
  v23 = 0.0;
  if (v19 < v20)
    v21 = 0.0;
  *(double *)v5 = v21;
  *(double *)(v5 + 8) = v22;
  *(_QWORD *)(v5 + 16) = 0x3FF0000000000000;
  result._mass = v23;
  result.decayConstant = v22;
  result.angularFrequency = v21;
  return result;
}

uint64_t sub_234C5DC68()
{
  return swift_deallocObject();
}

double partial apply for closure #5 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  uint64_t v1;

  return a1 - *(double *)(v1 + 16);
}

uint64_t sub_234C5DC84()
{
  swift_release();
  return swift_deallocObject();
}

long double partial apply for closure #6 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;

  v3 = *(double *)(v1 + 32);
  v4 = *(double *)(v1 + 40);
  v5 = (*(double (**)(void))(v1 + 16))();
  if (v5 < 0.0)
    v3 = -v3;
  return exp(-(v4 * a1)) * (v4 * v5 + 1.0) - v3;
}

uint64_t sub_234C5DD0C()
{
  return swift_deallocObject();
}

long double partial apply for closure #7 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  double *v1;
  double v2;

  v2 = v1[2] * (v1[3] - a1);
  return v2 / exp(v1[4] * a1);
}

uint64_t specialized closure #8 in Spring.init(settlingDuration:dampingRatio:epsilon:)(uint64_t a1, double *a2, double (*a3)(double), double a4, double a5, double a6, uint64_t a7, double (*a8)(double), uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  double v18;
  uint64_t result;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v25;
  double v26;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v33;

  v18 = 1.0 / a5 * a4;
  result = swift_beginAccess();
  *a2 = v18;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (!a1)
    return 1;
  swift_beginAccess();
  v20 = swift_beginAccess();
  v21 = ((double (*)(uint64_t, double))a3)(v20, v18);
  v22 = v21 / a8(*a2);
  v23 = v18 - v22;
  *a2 = v18 - v22;
  if ((~COERCE__INT64(v18 - v22) & 0x7FF0000000000000) == 0
    && (COERCE_UNSIGNED_INT64(v18 - v22) & 0xFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_25;
  }
  if (a1 == 1)
    return 1;
  v25 = a3(v18 - v22);
  v26 = v23 - v25 / a8(*a2);
  *a2 = v26;
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v26 & 0xFFFFFFFFFFFFFLL) != 0)
    goto LABEL_25;
  v28 = a1 - 2;
  if (!v28)
    return 1;
  v29 = v23 - v26;
  while (1)
  {
    v30 = a3(v26);
    v31 = v26 - v30 / a8(*a2);
    *a2 = v31;
    if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v31 & 0xFFFFFFFFFFFFFLL) != 0)
      break;
    if (vabdd_f64(v31, v26) <= a6)
    {
      if (a6 * 100000.0 >= v29)
        return 1;
      result = swift_beginAccess();
      v33 = *a11 + 1;
      if (!__OFADD__(*a11, 1))
      {
        a10 = a11;
        goto LABEL_26;
      }
      goto LABEL_32;
    }
    v29 = v26 - v31;
    result = 1;
    v26 = v31;
    if (!--v28)
      return result;
  }
LABEL_25:
  result = swift_beginAccess();
  v33 = *a10 + 1;
  if (!__OFADD__(*a10, 1))
  {
LABEL_26:
    result = 0;
    *a10 = v33;
    return result;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_234C5DFA0()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  uint64_t v1;

  return *(double *)(v1 + 16) * a1;
}

uint64_t sub_234C5DFBC()
{
  swift_release();
  return swift_deallocObject();
}

double partial apply for closure #2 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  uint64_t v1;
  double v2;

  v2 = *(double *)(v1 + 16) * a1 - *(double *)(v1 + 24);
  return v2 / (*(double (**)(void))(v1 + 32))();
}

double partial apply for closure #3 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  uint64_t v1;
  double v3;
  double (*v4)(double);
  double v5;

  v3 = *(double *)(v1 + 16);
  v4 = *(double (**)(double))(v1 + 32);
  v5 = exp(-(*(double *)(v1 + 24) * a1));
  return v3 - fabs(v5 * v4(a1));
}

uint64_t sub_234C5E06C()
{
  swift_release();
  return swift_deallocObject();
}

long double partial apply for closure #4 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  uint64_t v1;
  double v3;
  double (*v4)(double);
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = *(double *)(v1 + 16);
  v4 = *(double (**)(double))(v1 + 24);
  v5 = *(double *)(v1 + 40);
  v6 = *(double *)(v1 + 48);
  v7 = *(double *)(v1 + 56);
  v8 = *(double *)(v1 + 64);
  v9 = a1 * a1;
  v10 = exp(-(v3 * a1));
  if (v10 * v4(a1) <= 0.0)
    v11 = v5 + v6 * a1 - v9 * v7;
  else
    v11 = -(v5 + v6 * a1 - v9 * v7);
  return v11 / (exp(v3 * a1) * (v9 * v8));
}

void Spring.settlingDuration.getter()
{
  double *v0;

  specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, *v0, v0[1]);
}

uint64_t Spring.velocity<A>(target:initialVelocity:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  double *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  double v20;
  BOOL v21;
  double v22;
  long double v23;
  long double v24;
  void (*v25)(char *, uint64_t);
  double v26;
  uint64_t v27;
  __double2 v28;
  double v29;
  double v30;
  _QWORD v32[2];

  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v32 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v32 - v17;
  v20 = *v5;
  v19 = v5[1];
  v21 = *v5 <= 0.0;
  if (*v5 >= 0.0)
  {
    v32[1] = a4;
    if (v21)
    {
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v19);
      v27 = *(_QWORD *)(a3 + 8);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v25 = *(void (**)(char *, uint64_t))(v10 + 8);
      v25(v15, a2);
      v30 = exp(-(v19 * a5));
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v19 * v30);
      v29 = (v19 * a5 + -1.0) * v30;
    }
    else
    {
      v26 = exp(-(v19 * a5));
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v19);
      v27 = *(_QWORD *)(a3 + 8);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v25 = *(void (**)(char *, uint64_t))(v10 + 8);
      v25(v15, a2);
      v28 = __sincos_stret(v20 * a5);
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v26 * (v20 * v28.__sinval + v19 * v28.__cosval));
      v29 = v26 * (v19 * v28.__sinval - v20 * v28.__cosval) / v20;
    }
    VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v12, v29);
    MEMORY[0x23B7C7090](v15, v12, a2, v27);
    v25(v12, a2);
    v25(v15, a2);
  }
  else
  {
    v22 = -v20 - v19;
    v23 = v22 * exp(v22 * a5);
    v24 = (v20 - v19) * exp((v20 - v19) * a5);
    VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v18, ((v19 - v20) * v23 + v22 * v24) / (v20 + v20) + 1.0);
    VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, (v23 - v24) / (v20 + v20));
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v15, a2);
  }
  return ((uint64_t (*)(char *, uint64_t))v25)(v18, a2);
}

uint64_t Spring.update<A>(value:velocity:target:deltaTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  _QWORD v27[2];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27[1] = a3;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v27 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v27 - v18;
  v28 = (char *)v27 - v18;
  v21 = v6[1];
  v22 = v6[2];
  v29 = *v6;
  v20 = v29;
  v30 = v21;
  v31 = v22;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v23 = (uint64_t)v19;
  v24 = a5;
  Spring.velocity<A>(target:initialVelocity:time:)((uint64_t)v16, a4, a5, v23, a6);
  v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v16, a4);
  v29 = v20;
  v30 = v21;
  v31 = v22;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  Spring.value<A>(target:initialVelocity:time:)((uint64_t)v13, a6, a2, a4, v24);
  v25((char *)a2, a4);
  v25(v13, a4);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v25(v16, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v28, a4);
}

uint64_t Spring.force<A>(target:position:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];

  v24[1] = a4;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v24 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v24 - v14;
  v16 = *v4;
  v17 = v4[1];
  v18 = v4[2];
  VectorArithmetic.scaled(by:)(v19, v20, (uint64_t)v24 - v14, v17 * -2.0 * v18);
  v21 = *(_QWORD *)(a3 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v12, v18 * (v16 * v16 + v17 * v17));
  v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v9, a2);
  MEMORY[0x23B7C7090](v15, v12, a2, v21);
  v22(v12, a2);
  return ((uint64_t (*)(char *, uint64_t))v22)(v15, a2);
}

double Spring.settlingDuration<A>(fromValue:toValue:initialVelocity:epsilon:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v23)(char *, uint64_t);
  double v24;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v26[0] = a1;
  v26[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v26 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v26 - v18;
  v20 = *((_QWORD *)v6 + 2);
  v27 = *v6;
  v28 = v20;
  v21 = *(void (**)(uint64_t, uint64_t))(a6 + 24);
  v21(a5, a6);
  v21(a5, a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v13, AssociatedTypeWitness);
  v23(v16, AssociatedTypeWitness);
  v21(a5, a6);
  v24 = Spring.settlingDuration<A>(target:initialVelocity:epsilon:)((uint64_t)v19, (uint64_t)v16, AssociatedTypeWitness, AssociatedConformanceWitness, a2);
  v23(v16, AssociatedTypeWitness);
  v23(v19, AssociatedTypeWitness);
  return v24;
}

uint64_t Spring.value<A>(fromValue:toValue:initialVelocity:time:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  __int128 *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v41 = a5;
  v42 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v35 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v36 = (char *)&v35 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v39 = (char *)&v35 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v37 = (char *)&v35 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v38 = (char *)&v35 - v25;
  v35 = *v6;
  v26 = *((_QWORD *)v6 + 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1, a3);
  v27 = *(void (**)(uint64_t, uint64_t))(a4 + 24);
  v27(a3, a4);
  v43 = v35;
  v44 = v26;
  v27(a3, a4);
  v27(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)&v35 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v29 = (uint64_t)v36;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v30 = *(void (**)(char *, uint64_t))(v40 + 8);
  v30(v14, AssociatedTypeWitness);
  v30(v17, AssociatedTypeWitness);
  v27(a3, a4);
  v31 = v39;
  Spring.value<A>(target:initialVelocity:time:)(v29, a6, (uint64_t)v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  v30(v17, AssociatedTypeWitness);
  v30((char *)v29, AssociatedTypeWitness);
  v32 = v37;
  v33 = v38;
  MEMORY[0x23B7C7090](v37, v31, AssociatedTypeWitness, v35);
  v30(v31, AssociatedTypeWitness);
  v30(v32, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 32))(v33, a3, a4);
}

uint64_t Spring.velocity<A>(fromValue:toValue:initialVelocity:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  __int128 *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v34 = a6;
  v35 = a3;
  v32 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v31 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v31 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v33 = (uint64_t)&v31 - v24;
  v31 = *v7;
  v25 = *((_QWORD *)v7 + 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a6, a2, a4);
  v36 = v31;
  v37 = v25;
  v26 = *(void (**)(uint64_t, uint64_t))(a5 + 24);
  v26(a4, a5);
  v26(a4, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v16, AssociatedTypeWitness);
  v28(v19, AssociatedTypeWitness);
  v26(a4, a5);
  v29 = v33;
  Spring.velocity<A>(target:initialVelocity:time:)((uint64_t)v22, AssociatedTypeWitness, AssociatedConformanceWitness, v33, a7);
  v28(v19, AssociatedTypeWitness);
  v28(v22, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 32))(v29, a4, a5);
}

uint64_t Spring.force<A>(fromValue:toValue:position:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v34 = a3;
  v35 = a4;
  v30 = a1;
  v33 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v29 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v29 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v32 = (uint64_t)&v29 - v22;
  v29 = *v7;
  v23 = *((_QWORD *)v7 + 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a7, a2, a5);
  v36 = v29;
  v37 = v23;
  v24 = *(void (**)(uint64_t, uint64_t))(a6 + 24);
  v24(a5, a6);
  v24(a5, a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26(v14, AssociatedTypeWitness);
  v26(v17, AssociatedTypeWitness);
  v24(a5, a6);
  v24(a5, a6);
  v27 = v32;
  Spring.force<A>(target:position:velocity:)((uint64_t)v20, AssociatedTypeWitness, AssociatedConformanceWitness, v32);
  v26(v14, AssociatedTypeWitness);
  v26(v17, AssociatedTypeWitness);
  v26(v20, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 32))(v27, a5, a6);
}

double *static Animation.spring(_:blendDuration:)(uint64_t a1, double a2)
{
  double v3;
  double v4;
  float64x2_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *result;
  float64x2_t v12;

  v3 = *(double *)a1;
  v12 = *(float64x2_t *)(a1 + 8);
  v4 = Spring.bounce.getter();
  if (v4 <= -1.0)
  {
    v6 = INFINITY;
    v5 = v12;
  }
  else
  {
    v5 = v12;
    if (v4 >= 0.0)
    {
      v7 = 1.0 - v4;
      if (v4 > 1.0)
        v7 = 0.0;
      if (v4 == 0.0)
        v6 = 1.0;
      else
        v6 = v7;
    }
    else
    {
      v6 = 1.0 / (v4 + 1.0);
    }
  }
  *(_QWORD *)&v8 = *(_OWORD *)&vmulq_f64(v5, v5);
  v9 = -v3;
  if (v3 >= 0.0)
    v9 = v3;
  v10 = 6.28318531 / sqrt(v8 + v3 * v9);
  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(0);
  result = (double *)swift_allocObject();
  result[2] = v10;
  result[3] = v6;
  result[4] = a2;
  return result;
}

uint64_t static Animation.interpolatingSpring(_:initialVelocity:)(double *a1, double a2)
{
  double v3;
  double v4;
  double v5;

  v3 = -*a1;
  if (*a1 >= 0.0)
    v3 = *a1;
  v4 = 6.28318531 / sqrt(a1[1] * a1[1] + *a1 * v3);
  v5 = Spring.bounce.getter();
  return specialized static Animation.interpolatingSpring(duration:bounce:initialVelocity:)(v4, v5, a2);
}

void type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>)
  {
    v2 = lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation();
    v4 = type metadata accessor for InternalAnimationBox(a1, (uint64_t)&type metadata for FluidSpringAnimation, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>);
  }
}

unint64_t lazy protocol witness table accessor for type Spring and conformance Spring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Spring and conformance Spring;
  if (!lazy protocol witness table cache variable for type Spring and conformance Spring)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Spring, &type metadata for Spring);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spring and conformance Spring);
  }
  return result;
}

ValueMetadata *type metadata accessor for Spring()
{
  return &type metadata for Spring;
}

uint64_t ProtobufFormat.Field.tag.getter()
{
  _QWORD *v0;

  return *v0 >> 3;
}

uint64_t ProtobufFormat.Field.tag<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(_QWORD))(a3 + 24))(*v3 >> 3);
}

uint64_t CodableByProtobuf.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v21 = a3;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    v19 = a4;
    v20 = v10;
    v18 = v8;
    __swift_project_boxed_opaque_existential_1(v25, v25[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v12 = (uint64_t)v22;
    v13 = v23;
    outlined copy of Data._Representation((uint64_t)v22, v23);
    ProtobufDecoder.init(_:)(v12, v13);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v14 = dispatch thunk of Hashable.hashValue.getter();
    swift_bridgeObjectRelease();
    v24 = v14;
    v15 = v20;
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(v21 + 24) + 8))(&v22, a2);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v19, v15, a2);
    v16 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CodableByProtobuf.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for closure #1 in CodableByProtobuf.encode(to:));
  if (!v1)
  {
    v5 = result;
    v6 = v4;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t ProtobufEnum<>.protobufValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  unint64_t v28;
  char *v29;
  unint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v4 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v35 - v6;
  v8 = swift_checkMetadataState();
  MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)&v35 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v35 - v16;
  v19 = v18;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x23B7C7558](&unk_235260F38, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    MEMORY[0x23B7C742C](v7, v8, v4);
    v21 = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v8);
    if ((v21 & 1) == 0)
      goto LABEL_16;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    goto LABEL_15;
  v38 = v19;
  v36 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v36(v39, v17, v8);
  v40 = -1;
  v22 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v23 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v22 & 1) == 0)
  {
    if (v23 >= 65)
    {
LABEL_10:
      lazy protocol witness table accessor for type UInt and conformance UInt();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v25 = v39;
      v31 = dispatch thunk of static Comparable.< infix(_:_:)();
      v19 = v38;
      v27 = *(void (**)(char *, uint64_t))(v38 + 8);
      v27(v14, v8);
      if ((v31 & 1) != 0)
        goto LABEL_16;
      goto LABEL_14;
    }
    v32 = v39;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v19 = v38;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v8);
LABEL_15:
    v33 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v8);
    return v33;
  }
  if (v23 > 64)
    goto LABEL_10;
  v24 = swift_getAssociatedConformanceWitness();
  MEMORY[0x23B7C7558](&unk_235260F38, 256, AssociatedTypeWitness, v24);
  MEMORY[0x23B7C742C](v7, v8, v4);
  v25 = v39;
  v26 = dispatch thunk of static Comparable.> infix(_:_:)();
  v27 = *(void (**)(char *, uint64_t))(v38 + 8);
  v27(v14, v8);
  v28 = v40;
  v29 = v37;
  v36(v37, v25, v8);
  if ((v26 & 1) == 0)
  {
    v27(v29, v8);
    v19 = v38;
    goto LABEL_14;
  }
  v30 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v29, v8);
  v19 = v38;
  if (v28 >= v30)
  {
LABEL_14:
    v27(v25, v8);
    goto LABEL_15;
  }
LABEL_16:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized ProtobufEnum<>.init(protobufValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v3;

  if (result >= 3u || result >= 0x100)
    v3 = 3;
  else
    v3 = result;
  *a2 = v3;
  return result;
}

uint64_t ProtobufEnum<>.init(protobufValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v7 = type metadata accessor for Optional();
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)&v26 - v8;
  v29 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v26 - v19;
  v32 = a1;
  lazy protocol witness table accessor for type UInt and conformance UInt();
  dispatch thunk of Numeric.init<A>(exactly:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v21 = *(_QWORD *)(a2 - 8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v13, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v20, AssociatedTypeWitness);
    v22 = v30;
    dispatch thunk of RawRepresentable.init(rawValue:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
    v21 = *(_QWORD *)(a2 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v22, 1, a2))
    {
      v24 = v31;
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v31, v22, a2);
      v23 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v24, v23, 1, a2);
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v28);
  }
  v23 = 1;
  v24 = v31;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v24, v23, 1, a2);
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance Image.Orientation()
{
  char *v0;

  return qword_235290700[*v0];
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Image.Orientation@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  if (a1 <= 0xFF)
    result = specialized Image.Orientation.init(rawValue:)(a1);
  else
    result = 8;
  *a2 = result;
  return result;
}

uint64_t ProtobufFormat.WireType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static ProtobufFormat.WireType.varint.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static ProtobufFormat.WireType.fixed64.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ProtobufFormat.WireType.lengthDelimited.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ProtobufFormat.WireType.fixed32.getter(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

uint64_t ProtobufFormat.Field.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ProtobufFormat.Field.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ProtobufFormat.Field.rawValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ProtobufFormat::Field __swiftcall ProtobufFormat.Field.init(rawValue:)(SwiftUI::ProtobufFormat::Field rawValue)
{
  SwiftUI::ProtobufFormat::Field *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

SwiftUI::ProtobufFormat::Field __swiftcall ProtobufFormat.Field.init(_:wireType:)(SwiftUI::ProtobufFormat::Field _, SwiftUI::ProtobufFormat::WireType wireType)
{
  Swift::UInt *v2;

  *v2 = *(_QWORD *)wireType.rawValue | (8 * _.rawValue);
  return _;
}

void ProtobufFormat.Field.wireType.getter(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1 & 7;
}

BOOL ProtobufFormat.Field._isEmpty.getter()
{
  _QWORD *v0;

  return *v0 == 0;
}

BOOL static ProtobufFormat.Field.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v8 = dispatch thunk of Hashable.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 + 32) + 8))(a1, a4);
}

uint64_t partial apply for closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CodableByProtobuf.encode(to:)(a1, *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t ProtobufCodable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ProtobufCodable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ProtobufCodable.wrappedValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ProtobufCodable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t ProtobufCodable.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for closure #1 in ProtobufCodable.encode(to:));
  if (!v1)
  {
    v5 = result;
    v6 = v4;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t closure #1 in ProtobufCodable.encode(to:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v9 = dispatch thunk of Hashable.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 8))(a1, a4, a6);
}

uint64_t ProtobufCodable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  _QWORD *v37;

  v31 = a3;
  v30 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v7;
  v10 = type metadata accessor for ProtobufCodable(0, v8, v7, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v14 = v37;
  dispatch thunk of Decoder.singleValueContainer()();
  if (v14)
  {
    v24 = (uint64_t)a1;
  }
  else
  {
    v28 = v10;
    v29 = v6;
    v37 = a1;
    v26 = v13;
    v27 = v11;
    __swift_project_boxed_opaque_existential_1(v36, v36[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v15 = (uint64_t)v33;
    v16 = v34;
    outlined copy of Data._Representation((uint64_t)v33, v34);
    ProtobufDecoder.init(_:)(v15, v16);
    v17 = v37;
    __swift_project_boxed_opaque_existential_1(v37, v37[3]);
    v18 = dispatch thunk of Hashable.hashValue.getter();
    swift_bridgeObjectRelease();
    v35 = v18;
    v19 = v29;
    v20 = a2;
    (*(void (**)(void **, uint64_t))(v32 + 8))(&v33, a2);
    outlined consume of Data._Representation(v15, v16);
    v22 = v26;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v19, v20);
    v23 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v31, v22, v28);
    v24 = (uint64_t)v17;
  }
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProtobufCodable<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ProtobufCodable.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProtobufCodable<A>(_QWORD *a1)
{
  return ProtobufCodable.encode(to:)(a1);
}

uint64_t static ProtobufCodable<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ProtobufCodable<A>()
{
  return static ProtobufCodable<>.== infix(_:_:)();
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance RBSymbolScaleLevel()
{
  unsigned int *v0;
  uint64_t result;

  result = *v0;
  if ((result & 0x80000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance GraphicsContext.BlendMode@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if (result >> 31)
    v2 = 0;
  else
    v2 = result;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = result >> 31 != 0;
  return result;
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance RBTransitionMethod()
{
  unsigned int *v0;

  return *v0;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance RBTransitionEvents@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if (HIDWORD(result))
    v2 = 0;
  else
    v2 = result;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = HIDWORD(result) != 0;
  return result;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance DisplayGamut@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result < 0)
  {
LABEL_5:
    *a2 = 2;
    return result;
  }
  if (result)
  {
    if (result == 1)
    {
      *a2 = 1;
      return result;
    }
    goto LABEL_5;
  }
  *a2 = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE1EC0], MEMORY[0x24BEE1E88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

uint64_t partial apply for closure #1 in ProtobufCodable.encode(to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ProtobufCodable.encode(to:)(a1, *(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t type metadata accessor for ProtobufCodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ProtobufCodable);
}

uint64_t dispatch thunk of ProtobufEncodableMessage.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ProtobufDecodableMessage.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ProtobufEnum.protobufValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ProtobufEnum.init(protobufValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ProtobufTag.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ProtobufTag.init(rawValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for ProtobufFormat()
{
  return &type metadata for ProtobufFormat;
}

ValueMetadata *type metadata accessor for ProtobufFormat.WireType()
{
  return &type metadata for ProtobufFormat.WireType;
}

ValueMetadata *type metadata accessor for ProtobufFormat.Field()
{
  return &type metadata for ProtobufFormat.Field;
}

uint64_t type metadata completion function for ProtobufCodable()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ProtobufCodable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C605B4 + 4 * byte_235290550[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ProtobufCodable(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t View.overlay<A>(alignment:content:)(uint64_t a1, uint64_t a2, void (*a3)(double), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a7;
  v25 = a2;
  v26 = a5;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _OverlayModifier(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v25 - v19;
  a3(v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a6);
  v21 = &v20[*(int *)(v16 + 36)];
  v23 = v25;
  v22 = v26;
  *(_QWORD *)v21 = a1;
  *((_QWORD *)v21 + 1) = v23;
  View.modifier<A>(_:)(v20, v22, v16, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t type metadata accessor for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _OverlayModifier);
}

uint64_t makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X3>, char a5@<W5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t KeyPath;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t result;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v61;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_DWORD *)(a3 + 24);
  v11 = *(_DWORD *)(a3 + 28);
  v13 = *(_DWORD *)(a3 + 32);
  v12 = *(_DWORD *)(a3 + 36);
  v15 = *(_QWORD *)(a3 + 40);
  v14 = *(_QWORD *)(a3 + 48);
  v16 = *(_DWORD *)(a3 + 56);
  v17 = *(_DWORD *)(a3 + 60);
  v19 = *(_DWORD *)(a3 + 64);
  v18 = *(_DWORD *)(a3 + 68);
  v21 = *(_DWORD *)(a3 + 72);
  v20 = *(_DWORD *)(a3 + 76);
  v22 = *(_DWORD *)(a3 + 80);
  v101 = *(_QWORD *)a3;
  v7 = v101;
  v77 = v8;
  v102 = v8;
  v103 = v9;
  v74 = v11;
  v75 = v10;
  v104 = v10;
  v105 = v11;
  v106 = v13;
  v107 = v12;
  v108 = v15;
  v109 = v14;
  v110 = v16;
  v111 = v17;
  v68 = v21;
  v69 = v19;
  v112 = v19;
  v113 = v18;
  v72 = v20;
  v73 = v18;
  v114 = v21;
  v115 = v20;
  v71 = v22;
  v116 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = v13;
  v59 = v12;
  v57 = __PAIR64__(v17, v16);
  if ((v12 & 0x100) != 0)
  {
    specialized _GraphInputs.pushScope<A>(id:)(0);
    v23 = v101;
    v38 = v102;
    v37 = v103;
    v36 = v104;
    v29 = v105;
    v35 = v106;
    v34 = v107;
    v33 = v108;
    v32 = v109;
    v31 = v110;
    v30 = v111;
    v27 = v112;
    v28 = v113;
    v26 = v114;
    v25 = v115;
    v24 = v116;
  }
  else
  {
    v23 = v101;
    v24 = v71;
    v25 = v72;
    v26 = v68;
    v27 = v69;
    v28 = v73;
    v29 = v74;
    v30 = v17;
    v31 = v16;
    v32 = v14;
    v33 = v15;
    v34 = v12;
    v35 = v13;
    v36 = v75;
    v37 = v9;
    v38 = v77;
  }
  v91 = v23;
  v92 = v38;
  v94 = v37;
  *(_QWORD *)&v95 = __PAIR64__(v29, v36);
  *((_QWORD *)&v95 + 1) = __PAIR64__(v34, v35);
  v96 = v33;
  v97 = v32;
  *(_QWORD *)&v98 = __PAIR64__(v30, v31);
  *((_QWORD *)&v98 + 1) = __PAIR64__(v28, v27);
  v99 = __PAIR64__(v25, v26);
  v100 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v39 = swift_bridgeObjectRetain();
  a4(&v81, v39, &v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v67 = v81;
  v40 = v83;
  v61 = v82;
  KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v43 = *MEMORY[0x24BE096C0];
  v44 = a2;
  if ((a2 & 0x100000000) != 0)
    v44 = *MEMORY[0x24BE096C0];
  v91 = __PAIR64__(v42, v44);
  v92 = v69;
  v93 = v68;
  v70 = v40;
  v94 = __PAIR64__(v43, v40);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  v91 = v7;
  v92 = v77;
  v94 = v9;
  *(_QWORD *)&v95 = __PAIR64__(v74, v75);
  HIDWORD(v95) = v59;
  v96 = v15;
  v97 = v14;
  *(_QWORD *)&v98 = v57;
  HIDWORD(v98) = v73;
  HIDWORD(v99) = v72;
  v100 = v71;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v76 = v14;
  swift_bridgeObjectRetain();
  DWORD2(v98) = AGGraphCreateOffsetAttribute2();
  LODWORD(v99) = AGGraphCreateOffsetAttribute2();
  DWORD2(v95) = v58 | 0x18;
  if ((v59 & 0x100) != 0)
    specialized _GraphInputs.pushScope<A>(id:)((_QWORD *)1);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v45 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v45)
      goto LABEL_16;
    goto LABEL_15;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
LABEL_15:
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v91, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
    swift_release();
  }
LABEL_16:
  v81 = v91;
  v82 = v92;
  v84 = v94;
  v85 = v95;
  v86 = v96;
  v87 = v97;
  v88 = v98;
  v89 = v99;
  v90 = v100;
  v46 = closure #1 in makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)((uint64_t *)&v81, a1, a6, (uint64_t)&v79);
  v47 = v79;
  v78 = v80;
  MEMORY[0x24BDAC7A8](v46);
  MEMORY[0x24BDAC7A8](v48);
  AGGraphMutateAttribute();
  v49 = v78;
  if ((a5 & 1) != 0)
  {
    v50 = v47;
    v51 = v78;
    v47 = v67;
    v49 = v61;
  }
  else
  {
    v50 = v67;
    v51 = v61;
  }
  *((_QWORD *)&v85 + 1) = MEMORY[0x24BEE4AF8];
  LODWORD(v86) = 0;
  v81 = v50;
  v82 = v51;
  v84 = v47;
  LODWORD(v85) = v49;
  v52 = *(_QWORD *)(v14 + 16);
  if (v52)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = v76 + 40;
    do
    {
      (*(void (**)(unint64_t *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v53 + 16))(&v81, &type metadata for PairwisePreferenceCombinerVisitor, &protocol witness table for PairwisePreferenceCombinerVisitor);
      v53 += 16;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v54 = *((_QWORD *)&v85 + 1);
  v55 = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a7 = v54;
  *(_DWORD *)(a7 + 8) = v55;
  *(_DWORD *)(a7 + 12) = v70;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.init(alignment:layoutDirection:primaryPosition:primarySize:primaryLayoutComputer:secondaryLayoutComputer:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t closure #1 in makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void (*v14)(int *, uint64_t *);
  int v16;
  int v17;
  int ShouldRecordTree;
  int v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v23 = a1[2];
  v24 = *a1;
  v5 = *((_DWORD *)a1 + 6);
  v6 = *((_DWORD *)a1 + 7);
  v7 = *((_DWORD *)a1 + 9);
  v19 = *((_DWORD *)a1 + 8);
  v8 = a1[6];
  v20 = a1[5];
  v9 = *((_DWORD *)a1 + 14);
  v10 = *((_DWORD *)a1 + 15);
  v11 = *((_DWORD *)a1 + 16);
  v12 = *((_DWORD *)a1 + 17);
  v13 = *((_DWORD *)a1 + 19);
  v16 = *((_DWORD *)a1 + 20);
  v17 = *((_DWORD *)a1 + 18);
  _GraphValue.init(_:)(a2, &v27);
  v25 = v27;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v44 = v24;
  v45 = v4;
  v46 = v23;
  v47 = v5;
  v48 = v6;
  v50 = v7;
  v51 = v20;
  v52 = v8;
  v53 = v9;
  v54 = v10;
  v55 = v11;
  v56 = v12;
  v57 = v17;
  v58 = v13;
  v59 = v16;
  v26 = v25;
  v28 = v24;
  v29 = v4;
  v30 = v23;
  v31 = v5;
  v32 = v6;
  v33 = 0;
  v34 = v7;
  v35 = v20;
  v36 = v8;
  v37 = v9;
  v38 = v10;
  v39 = v11;
  v40 = v12;
  v41 = v17;
  v42 = v13;
  v43 = v16;
  v14 = *(void (**)(int *, uint64_t *))(a3 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(&v26, &v28);
  v49 = v19;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a4, (uint64_t)&v44);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t SecondaryLayerGeometryQuery.$secondaryLayoutComputer.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  v2 = *MEMORY[0x24BE096C0];
  if ((result & 0x100000000) == 0)
    v2 = result;
  *(_DWORD *)(v1 + 20) = v2;
  return result;
}

uint64_t _OverlayModifier.overlay.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _OverlayModifier.overlay.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_OverlayModifier.overlay.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayModifier.alignment.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t _OverlayModifier.alignment.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t (*_OverlayModifier.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayModifier.init(overlay:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  result = type metadata accessor for _OverlayModifier(0, a4, a5, v11);
  v13 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t static _OverlayModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int128 v22;
  __int128 v23;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36[3];

  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v13 = *((_DWORD *)a2 + 20);
  LODWORD(v26) = *a1;
  v14 = type metadata accessor for _OverlayModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue(0, v14, v15, v16);
  v17 = a2[3];
  v18 = a2[4];
  v22 = *(_OWORD *)(a2 + 7);
  v23 = *(_OWORD *)(a2 + 5);
  v19 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:), a5, v36);
  v20 = v36[0];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:), (uint64_t)&type metadata for Alignment, &v35);
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v17;
  v30 = v18;
  v31 = v23;
  v32 = v22;
  v33 = v19;
  v34 = v13;
  return makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(v20, v35, (uint64_t)&v26, a3, 0, a6, a7);
}

uint64_t closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _OverlayModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for _OverlayModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v10, (uint64_t)&type metadata for Alignment, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  return v10[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _OverlayModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

BOOL static _OverlayModifier<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  v10 = *(int *)(type metadata accessor for _OverlayModifier(0, a3, a5, v9) + 36);
  v12 = *(_QWORD *)(a1 + v10);
  v11 = *(_QWORD *)(a1 + v10 + 8);
  v13 = (uint64_t *)(a2 + v10);
  v15 = *v13;
  v14 = v13[1];
  return v12 == v15 && v11 == v14;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> _OverlayModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _OverlayModifier<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), *(_QWORD *)(a3 + 24));
}

uint64_t (*_OverlayStyleModifier.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayStyleModifier.ignoresSafeAreaEdges.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _OverlayStyleModifier.ignoresSafeAreaEdges.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_OverlayStyleModifier.ignoresSafeAreaEdges.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayStyleModifier.init(style:ignoresSafeAreaEdges:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for _OverlayStyleModifier(0, a3, a4, v9);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t static _OverlayStyleModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  unsigned int v36[3];

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 20);
  LODWORD(v27) = *a1;
  type metadata accessor for _BackgroundStyleModifier(0, a5, a6, a4);
  v17 = type metadata accessor for _OverlayStyleModifier(255, a5, a6, v16);
  type metadata accessor for _GraphValue(0, v17, v18, v19);
  v20 = a2[3];
  v21 = a2[4];
  v24 = *(_OWORD *)(a2 + 7);
  v25 = *(_OWORD *)(a2 + 5);
  v22 = a2[9];
  _GraphValue.unsafeBitCast<A>(to:)(v36);
  v27 = v12;
  v28 = v13;
  v29 = v14;
  v30 = v20;
  v31 = v21;
  v32 = v25;
  v33 = v24;
  v34 = v22;
  v35 = v15;
  return static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(v36, (uint64_t)&v27, 0, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayStyleModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static _OverlayStyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t (*_OverlayShapeModifier.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayShapeModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t _OverlayShapeModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*_OverlayShapeModifier.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayShapeModifier.fillStyle.getter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v4;

  v2 = (unsigned __int8 *)(v1 + *(int *)(a1 + 56));
  v3 = *v2;
  if (v2[1])
    v4 = 256;
  else
    v4 = 0;
  return v4 | v3;
}

uint64_t _OverlayShapeModifier.fillStyle.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = (_BYTE *)(v2 + *(int *)(a2 + 56));
  *v3 = result & 1;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*_OverlayShapeModifier.fillStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _OverlayShapeModifier.init(style:shape:fillStyle:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for _OverlayShapeModifier();
}

uint64_t sub_234C618C8(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE *v7;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v4 + *(int *)(a1 + 52), v3, v1);
  v7 = (_BYTE *)(v4 + *(int *)(a1 + 56));
  *v7 = v2 & 1;
  v7[1] = HIBYTE(v2) & 1;
  return result;
}

void static _OverlayShapeModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for _BackgroundShapeModifier();
}

void sub_234C6198C()
{
  type metadata accessor for _OverlayShapeModifier();
}

#error "234C61A4C: call analysis failed (funcsize=41)"

uint64_t sub_234C61A50()
{
  return swift_release();
}

uint64_t (*default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  return partial apply for closure #1 in default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayShapeModifier<A, B>()
{
  static _OverlayShapeModifier._makeView(modifier:inputs:body:)();
}

uint64_t View.overlay<A>(_:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v24 = a4;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _OverlayModifier(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v23 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a5);
  v21 = &v20[*(int *)(v16 + 36)];
  *(_QWORD *)v21 = a2;
  *((_QWORD *)v21 + 1) = a3;
  View.modifier<A>(_:)(v20, v24, v16, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

void View.border<A>(_:width:)()
{
  type metadata accessor for _StrokedShape<Rectangle._Inset>(255);
  lazy protocol witness table accessor for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>();
  type metadata accessor for _ShapeView();
}

void sub_234C61C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&a9 - v13;
  v15 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)(v11, 1, (uint64_t)&type metadata for Rectangle, v10, v15, v9, (uint64_t)v14, v12);
}

uint64_t sub_234C61CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for center != -1)
    swift_once();
  View.overlay<A>(_:alignment:)(v3, static Alignment.center, *((uint64_t *)&static Alignment.center + 1), v1, v2, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
}

uint64_t View.overlay<A>(_:ignoresSafeAreaEdges:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _OverlayStyleModifier(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v16);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v11, a4);
  v18[*(int *)(v14 + 36)] = a2;
  View.modifier<A>(_:)(v18, a3, v14, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

void View.overlay<A, B>(_:in:fillStyle:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for _OverlayShapeModifier();
}

void sub_234C61F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;

  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&a9 - v17;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v11, *(_QWORD *)(v15 - 168), v13, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v10, *(_QWORD *)(v15 - 160), v12);
  _OverlayShapeModifier.init(style:shape:fillStyle:)(v11, v13, (uint64_t)v18);
}

uint64_t sub_234C61F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  View.modifier<A>(_:)(v2, *(_QWORD *)(v3 - 136), v1, *(_QWORD *)(v3 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t SecondaryLayerGeometryQuery.alignment.getter()
{
  _DWORD *v0;

  if (*v0 == *MEMORY[0x24BE096C0])
    return 0;
  else
    return *(_QWORD *)AGGraphGetValue();
}

unint64_t SecondaryLayerGeometryQuery.$alignment.getter()
{
  _DWORD *v0;
  uint64_t v1;

  LODWORD(v1) = *v0;
  if (*v0 == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = v1;
  return v1 | ((unint64_t)(*v0 == *MEMORY[0x24BE096C0]) << 32);
}

uint64_t SecondaryLayerGeometryQuery.$alignment.setter(uint64_t result)
{
  _DWORD *v1;
  int v2;

  v2 = *MEMORY[0x24BE096C0];
  if ((result & 0x100000000) == 0)
    v2 = result;
  *v1 = v2;
  return result;
}

uint64_t (*SecondaryLayerGeometryQuery.$alignment.modify(uint64_t a1))(uint64_t result)
{
  int *v1;
  int v2;
  int v3;
  BOOL v4;

  *(_QWORD *)a1 = v1;
  v2 = *v1;
  v3 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x24BE096C0];
  v4 = v2 == v3;
  if (v4)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v2;
  return SecondaryLayerGeometryQuery.$alignment.modify;
}

uint64_t SecondaryLayerGeometryQuery.$alignment.modify(uint64_t result)
{
  _DWORD *v1;

  v1 = (_DWORD *)(result + 8);
  if (*(_BYTE *)(result + 12))
    v1 = (_DWORD *)(result + 16);
  **(_DWORD **)result = *v1;
  return result;
}

_BYTE *SecondaryLayerGeometryQuery.layoutDirection.getter@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.layoutDirection.setter()
{
  return AGGraphSetValue();
}

uint64_t (*SecondaryLayerGeometryQuery.layoutDirection.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_DWORD *)a1 = *(_DWORD *)(v1 + 4);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)AGGraphGetValue();
  return SecondaryLayerGeometryQuery.layoutDirection.modify;
}

uint64_t SecondaryLayerGeometryQuery.layoutDirection.modify(uint64_t a1)
{
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a1 + 4);
  return AGGraphSetValue();
}

uint64_t SecondaryLayerGeometryQuery.$layoutDirection.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t SecondaryLayerGeometryQuery.$layoutDirection.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

_DWORD *(*SecondaryLayerGeometryQuery.$layoutDirection.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return SecondaryLayerGeometryQuery.$layoutDirection.modify;
}

_DWORD *SecondaryLayerGeometryQuery.$layoutDirection.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 4) = result[2];
  return result;
}

__n128 SecondaryLayerGeometryQuery.primaryPosition.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *Value;
  __n128 result;

  Value = (__n128 *)AGGraphGetValue();
  result = *Value;
  *a1 = *Value;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.primaryPosition.setter()
{
  return AGGraphSetValue();
}

void (*SecondaryLayerGeometryQuery.primaryPosition.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _DWORD *v3;

  v3 = malloc(0x24uLL);
  *a1 = v3;
  v3[8] = *(_DWORD *)(v1 + 8);
  *(_OWORD *)v3 = *(_OWORD *)AGGraphGetValue();
  return SecondaryLayerGeometryQuery.primaryPosition.modify;
}

void SecondaryLayerGeometryQuery.primaryPosition.modify(_OWORD **a1)
{
  _OWORD *v1;

  v1 = *a1;
  (*a1)[1] = **a1;
  AGGraphSetValue();
  free(v1);
}

uint64_t SecondaryLayerGeometryQuery.$primaryPosition.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t SecondaryLayerGeometryQuery.$primaryPosition.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

_DWORD *(*SecondaryLayerGeometryQuery.$primaryPosition.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return _ViewInputs.time.modify;
}

__n128 SecondaryLayerGeometryQuery.primarySize.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value;
  __n128 result;
  __int128 v4;

  Value = AGGraphGetValue();
  result = *(__n128 *)Value;
  v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.primarySize.setter()
{
  return AGGraphSetValue();
}

void (*SecondaryLayerGeometryQuery.primarySize.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v3;
  _OWORD *Value;
  __int128 v5;

  v3 = malloc(0x44uLL);
  *a1 = v3;
  v3[16] = *(_DWORD *)(v1 + 12);
  Value = (_OWORD *)AGGraphGetValue();
  v5 = Value[1];
  *(_OWORD *)v3 = *Value;
  *((_OWORD *)v3 + 1) = v5;
  return SecondaryLayerGeometryQuery.primarySize.modify;
}

void SecondaryLayerGeometryQuery.primarySize.modify(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;

  v1 = *(_OWORD **)a1;
  v2 = *(_OWORD *)(*(_QWORD *)a1 + 16);
  v1[2] = *v1;
  v1[3] = v2;
  AGGraphSetValue();
  free(v1);
}

uint64_t SecondaryLayerGeometryQuery.$primarySize.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t SecondaryLayerGeometryQuery.$primarySize.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

_DWORD *(*SecondaryLayerGeometryQuery.$primarySize.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 12);
  return SecondaryLayerGeometryQuery.$primarySize.modify;
}

_DWORD *SecondaryLayerGeometryQuery.$primarySize.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 12) = result[2];
  return result;
}

uint64_t SecondaryLayerGeometryQuery.primaryLayoutComputer.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *Value;
  uint64_t v5;

  result = *(unsigned int *)(v1 + 16);
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    Value = (_QWORD *)AGGraphGetValue();
    v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_retain();
  }
  return result;
}

unint64_t SecondaryLayerGeometryQuery.$primaryLayoutComputer.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  LODWORD(v1) = *(_DWORD *)(v0 + 16);
  v2 = (_DWORD)v1 == *MEMORY[0x24BE096C0];
  if ((_DWORD)v1 == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = v1;
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t SecondaryLayerGeometryQuery.$primaryLayoutComputer.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  v2 = *MEMORY[0x24BE096C0];
  if ((result & 0x100000000) == 0)
    v2 = result;
  *(_DWORD *)(v1 + 16) = v2;
  return result;
}

_BYTE *(*SecondaryLayerGeometryQuery.$primaryLayoutComputer.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;

  *(_QWORD *)a1 = v1;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x24BE096C0];
  v4 = v2 == v3;
  if (v4)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v2;
  return SecondaryLayerGeometryQuery.$primaryLayoutComputer.modify;
}

_BYTE *SecondaryLayerGeometryQuery.$primaryLayoutComputer.modify(_BYTE *result)
{
  _DWORD *v1;

  v1 = result + 8;
  if (result[12])
    v1 = result + 16;
  *(_DWORD *)(*(_QWORD *)result + 16) = *v1;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.secondaryLayoutComputer.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *Value;
  uint64_t v5;

  result = *(unsigned int *)(v1 + 20);
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    Value = (_QWORD *)AGGraphGetValue();
    v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_retain();
  }
  return result;
}

unint64_t SecondaryLayerGeometryQuery.$secondaryLayoutComputer.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  LODWORD(v1) = *(_DWORD *)(v0 + 20);
  v2 = (_DWORD)v1 == *MEMORY[0x24BE096C0];
  if ((_DWORD)v1 == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = v1;
  return v1 | ((unint64_t)v2 << 32);
}

_BYTE *(*SecondaryLayerGeometryQuery.$secondaryLayoutComputer.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;

  *(_QWORD *)a1 = v1;
  v2 = *(_DWORD *)(v1 + 20);
  v3 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x24BE096C0];
  v4 = v2 == v3;
  if (v4)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v2;
  return SecondaryLayerGeometryQuery.$secondaryLayoutComputer.modify;
}

_BYTE *SecondaryLayerGeometryQuery.$secondaryLayoutComputer.modify(_BYTE *result)
{
  _DWORD *v1;

  v1 = result + 8;
  if (result[12])
    v1 = result + 16;
  *(_DWORD *)(*(_QWORD *)result + 20) = *v1;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.value.getter@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  int v3;
  int v4;
  int v5;
  __int128 *Value;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t result;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double v58;

  v3 = *v1;
  v4 = v1[5];
  v5 = *MEMORY[0x24BE096C0];
  if (v1[4] == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    Value = &static LayoutComputer.defaultValue;
  }
  else
  {
    Value = (__int128 *)AGGraphGetValue();
  }
  v7 = *(_QWORD *)Value;
  v8 = *((_QWORD *)Value + 1);
  v9 = (double *)AGGraphGetValue();
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  v12 = *((_QWORD *)v9 + 2);
  v13 = v9[3];
  if (v3 == v5)
  {
    v14 = one-time initialization token for center;
    swift_retain();
    if (v14 != -1)
      swift_once();
    v15 = *((_QWORD *)&static Alignment.center + 1);
    v16 = static Alignment.center;
  }
  else
  {
    v17 = (unint64_t *)AGGraphGetValue();
    v16 = *v17;
    v15 = v17[1];
    swift_retain();
  }
  v18 = (double *)AGGraphGetValue();
  v19 = *v18;
  v52 = v18[1];
  swift_retain();
  ViewDimensions.subscript.getter(v16);
  v21 = v20;
  v53 = v7;
  v54 = v8;
  v55 = v10;
  v56 = v11;
  v57 = v12;
  v58 = v13;
  ViewDimensions.subscript.getter(v15);
  v51 = v22;
  swift_release();
  if (v4 == v5)
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v23 = &static LayoutComputer.defaultValue;
  }
  else
  {
    v23 = (__int128 *)AGGraphGetValue();
  }
  v25 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  v26 = (double *)AGGraphGetValue();
  v27 = *(_QWORD *)v26;
  v28 = v26[1];
  v29 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain_n();
  if (v29 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_22;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_22:
    v48 = v13;
    v49 = v12;
    v50 = v11;
    v30 = v10;
    v31 = v19 + v21;
    v53 = v27;
    LOBYTE(v54) = 0;
    v55 = v28;
    LOBYTE(v56) = 0;
    v32 = (*(double (**)(uint64_t *))(*(_QWORD *)v25 + 120))(&v53);
    v34 = v33;
    v53 = v25;
    v54 = v24;
    v55 = v32;
    v56 = v33;
    v57 = v27;
    v58 = v28;
    swift_retain();
    ViewDimensions.subscript.getter(v16);
    v36 = v35;
    v53 = v25;
    v54 = v24;
    v55 = v32;
    v56 = v34;
    v57 = v27;
    v58 = v28;
    ViewDimensions.subscript.getter(v15);
    v38 = v37;
    swift_release();
    v39 = v31 - v36;
    if (*(_BYTE *)AGGraphGetValue() == 1)
    {
      v40 = *(double *)AGGraphGetValue();
      v41 = one-time initialization token for center;
      swift_retain();
      if (v41 != -1)
        swift_once();
      v42 = static HorizontalAlignment.center;
      v53 = v7;
      v54 = v8;
      v55 = v30;
      v56 = v50;
      v57 = v49;
      v58 = v48;
      ViewDimensions.subscript.getter(static HorizontalAlignment.center);
      v44 = v40 + v43;
      v53 = v25;
      v54 = v24;
      v55 = v32;
      v56 = v34;
      v57 = v27;
      v58 = v28;
      ViewDimensions.subscript.getter(v42);
      v46 = v45;
      swift_release_n();
      result = swift_release();
      v39 = v44 - v46 + v44 - v46 - v39;
    }
    else
    {
      swift_release();
      result = swift_release();
    }
    *(double *)a1 = v39;
    *(double *)(a1 + 8) = v52 + v51 - v38;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v24;
    *(double *)(a1 + 32) = v32;
    *(_QWORD *)(a1 + 40) = v34;
    *(_QWORD *)(a1 + 48) = v27;
    *(double *)(a1 + 56) = v28;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery;
  if (!lazy protocol witness table cache variable for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SecondaryLayerGeometryQuery, &type metadata for SecondaryLayerGeometryQuery);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery);
  }
  return result;
}

uint64_t partial apply for closure #2 in makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 20) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t partial apply for closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _OverlayStyleModifier);
}

void type metadata accessor for _OverlayShapeModifier()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _StrokedShape<Rectangle._Inset>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _StrokedShape<Rectangle._Inset>)
  {
    v2 = lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
    v4 = type metadata accessor for _StrokedShape(a1, (uint64_t)&type metadata for Rectangle._Inset, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _StrokedShape<Rectangle._Inset>);
  }
}

unint64_t lazy protocol witness table accessor for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>;
  if (!lazy protocol witness table cache variable for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>)
  {
    type metadata accessor for _StrokedShape<Rectangle._Inset>(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _StrokedShape<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SecondaryLayerGeometryQuery(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

int *sub_234C62DA8@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *result;
  v3 = *result == *MEMORY[0x24BE096C0];
  if (*result == *MEMORY[0x24BE096C0])
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_234C62DD0(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;

  if (*(_BYTE *)(result + 4))
    v2 = (_DWORD *)MEMORY[0x24BE096C0];
  else
    v2 = (_DWORD *)result;
  *a2 = *v2;
  return result;
}

_BYTE *sub_234C62DF0@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_234C62E28()
{
  return AGGraphSetValue();
}

uint64_t sub_234C62E88@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 4);
  return result;
}

_DWORD *sub_234C62E94(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *result;
  return result;
}

__n128 sub_234C62EA0@<Q0>(__n128 *a1@<X8>)
{
  __n128 *Value;
  __n128 result;

  Value = (__n128 *)AGGraphGetValue();
  result = *Value;
  *a1 = *Value;
  return result;
}

uint64_t sub_234C62ED8()
{
  return AGGraphSetValue();
}

uint64_t sub_234C62F3C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *sub_234C62F48(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *result;
  return result;
}

__n128 sub_234C62F54@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value;
  __n128 result;
  __int128 v4;

  Value = AGGraphGetValue();
  result = *(__n128 *)Value;
  v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t sub_234C62F8C()
{
  return AGGraphSetValue();
}

uint64_t sub_234C62FF0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 12);
  return result;
}

_DWORD *sub_234C62FFC(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *result;
  return result;
}

uint64_t sub_234C63008@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *(_DWORD *)(result + 16);
  v3 = v2 == *MEMORY[0x24BE096C0];
  if (v2 == *MEMORY[0x24BE096C0])
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_234C63030(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  if (*(_BYTE *)(result + 4))
    v2 = (_DWORD *)MEMORY[0x24BE096C0];
  else
    v2 = (_DWORD *)result;
  *(_DWORD *)(a2 + 16) = *v2;
  return result;
}

uint64_t sub_234C63050@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *(_DWORD *)(result + 20);
  v3 = v2 == *MEMORY[0x24BE096C0];
  if (v2 == *MEMORY[0x24BE096C0])
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_234C63078(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  if (*(_BYTE *)(result + 4))
    v2 = (_DWORD *)MEMORY[0x24BE096C0];
  else
    v2 = (_DWORD *)result;
  *(_DWORD *)(a2 + 20) = *v2;
  return result;
}

uint64_t type metadata completion function for _OverlayModifier()
{
  return type metadata completion function for _OverlayModifier();
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _OverlayModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _OverlayModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234C63344 + 4 * byte_235290740[v8]))();
}

void storeEnumTagSinglePayload for _OverlayModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234C63484()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234C6348C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234C63494);
}

void sub_234C634B0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234C634B8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234C634C0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234C634C8);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for _OverlayStyleModifier()
{
  return type metadata completion function for _OverlayModifier();
}

_QWORD *initializeBufferWithCopyOfBuffer for _OverlayStyleModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _OverlayStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64) + 1;
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C637C0 + 4 * byte_23529074F[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _OverlayStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 1;
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 1);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for _OverlayShapeModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _OverlayShapeModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v10 + (v9 & (unint64_t)~v8) + 2 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    *(_WORD *)((((unint64_t)v4 + v9) & v15) + v10) = *(_WORD *)(v16 + v10);
  }
  return v4;
}

uint64_t initializeWithCopy for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_WORD *)(v11 + *(_QWORD *)(v8 + 64)) = *(_WORD *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithCopy for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = (_BYTE *)(v11 + v13);
  v15 = (_BYTE *)(v12 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  return a1;
}

uint64_t initializeWithTake for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_WORD *)(v11 + *(_QWORD *)(v8 + 64)) = *(_WORD *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithTake for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = (_BYTE *)(v11 + v13);
  v15 = (_BYTE *)(v12 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _OverlayShapeModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE)
    v8 = 254;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v13 = v11 + (v10 & ~v9) + 2;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_9;
  v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    v15 = *(_DWORD *)(a1 + v13);
    if (v15)
      goto LABEL_16;
  }
  else
  {
    if (v16 <= 0xFF)
    {
      if (v16 < 2)
        goto LABEL_25;
LABEL_9:
      v15 = *(unsigned __int8 *)(a1 + v13);
      if (!*(_BYTE *)(a1 + v13))
        goto LABEL_25;
LABEL_16:
      v17 = (v15 - 1) << v14;
      if (v13 > 3)
        v17 = 0;
      if ((_DWORD)v11 + (v10 & ~(_DWORD)v9) == -2)
        return v8 + v17 + 1;
      if (v13 <= 3)
        v18 = v11 + (v10 & ~(_DWORD)v9) + 2;
      else
        v18 = 4;
      return ((uint64_t (*)(void))((char *)&loc_234C63E48 + 4 * byte_23529075D[v18 - 1]))();
    }
    v15 = *(unsigned __int16 *)(a1 + v13);
    if (*(_WORD *)(a1 + v13))
      goto LABEL_16;
  }
LABEL_25:
  if (v5 == v8)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v20 = (v10 + a1) & ~v9;
  if (v7 == v8)
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(v20);
  v21 = *(unsigned __int8 *)(v20 + v11);
  if (v21 < 2)
    return 0;
  return ((v21 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _OverlayShapeModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = *(_QWORD *)(v6 + 64)
     + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 2;
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80)) != -2)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

ValueMetadata *type metadata accessor for SecondaryLayerGeometryQuery()
{
  return &type metadata for SecondaryLayerGeometryQuery;
}

uint64_t sub_234C64128(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _OverlayModifier, (uint64_t)&protocol witness table for _OverlayModifier<A>);
}

void sub_234C6413C()
{
  type metadata accessor for _StrokedShape<Rectangle._Inset>(255);
  lazy protocol witness table accessor for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>();
  type metadata accessor for _ShapeView();
}

uint64_t sub_234C64180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[14];

  v6 = type metadata accessor for _OverlayModifier(255, a1, (uint64_t)&protocol witness table for _ShapeView<A, B>, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _OverlayModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t sub_234C641DC(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _OverlayStyleModifier, (uint64_t)&protocol witness table for _OverlayStyleModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = a2(255, a1[1], a1[3]);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = a3;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void sub_234C64258()
{
  type metadata accessor for _OverlayShapeModifier();
}

uint64_t sub_234C64288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[10];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for _OverlayShapeModifier<A, B>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

uint64_t sub_234C642C8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

double Font.ResolvedTraits.pointSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Font.ResolvedTraits.pointSize.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Font.ResolvedTraits.pointSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.ResolvedTraits.init(pointSize:weight:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

void Font.ResolvedTraits.init(_:)(const __CTFontDescriptor *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  if (CTFontDescriptorCopyAttribute(a1, (CFStringRef)*MEMORY[0x24BDC4DA8]) && swift_dynamicCast())
    v4 = v7;
  CTFontDescriptorGetWeight();
  v6 = v5;

  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
}

uint64_t Font.ResolvedTraits.init(textStyle:weight:dynamicTypeSize:)@<X0>(double a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  double v8;

  specialized Font.TextStyle.ctTextStyle.getter();
  specialized DynamicTypeSize.ctTextSize.getter();
  result = CTFontDescriptorGetTextStyleSize();
  v8 = 0.0;
  if ((a2 & 1) == 0)
    v8 = a1;
  *(_QWORD *)a3 = v7;
  *(double *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t Font.ResolvedTraits.init(textStyle:weight:sizeCategory:)@<X0>(double a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  double v8;

  specialized Font.TextStyle.ctTextStyle.getter();
  specialized DynamicTypeSize.ctTextSize.getter();
  result = CTFontDescriptorGetTextStyleSize();
  v8 = 0.0;
  if ((a2 & 1) == 0)
    v8 = a1;
  *(_QWORD *)a3 = v7;
  *(double *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

void Font.ResolvedTraits.init(textStyle:weight:dynamicTypeSize:)(void **a1@<X0>, double a2@<X1>, char a3@<W2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  __int128 v12;

  v8 = *a1;
  BYTE8(v12) = 0;
  *(_QWORD *)&v12 = *a4;
  specialized DynamicTypeSize.ctTextSize.getter();
  CTFontDescriptorGetTextStyleSize();
  v10 = v9;

  v11 = *(double *)((char *)&v12 + 1);
  if ((a3 & 1) == 0)
    v11 = a2;
  *(_QWORD *)a5 = v10;
  *(double *)(a5 + 8) = v11;
  *(_QWORD *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 24) = 1;
}

uint64_t Font.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for FontBox(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 120) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 136), a1);
  return v5;
}

uint64_t FontBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 120) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 136), a1);
  return v2;
}

uint64_t Font.resolveTraits(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  char v21;
  __int16 v22;
  __int128 v23;
  char v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v5 = *a1;
  v6 = a1[1];
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5, (uint64_t)&v22);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v18 = *a1;
    *(_QWORD *)&v19 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v18, v7, v8, v9, (uint64_t)&v22);
    swift_release();
  }
  LOWORD(v18) = v22;
  v19 = v23;
  v20 = v24;
  v21 = v25;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*(_QWORD *)a2 + 88))(&v26, &v18);
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v5);
    swift_release_n();
  }
  else
  {
    v11 = swift_retain_n();
    v10 = specialized closure #1 in PropertyList.subscript.getter(v11);
    swift_bridgeObjectRetain();
  }
  result = swift_release_n();
  if (!(v10 >> 62))
  {
    v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_9;
LABEL_16:
    result = swift_bridgeObjectRelease();
    v16 = v27;
    v17 = v28;
    *(_OWORD *)a3 = v26;
    *(_QWORD *)(a3 + 16) = v16;
    *(_BYTE *)(a3 + 24) = v17;
    return result;
  }
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_16;
LABEL_9:
  if (v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        v15 = MEMORY[0x23B7C6D9C](i, v10);
      }
      else
      {
        v15 = *(_QWORD *)(v10 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(__int128 *))(*(_QWORD *)v15 + 88))(&v26);
      swift_release();
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.fontResolutionContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3, a1);
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    v8[0] = *v1;
    v8[1] = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(v8, v5, v6, v7, a1);
    return swift_release();
  }
}

uint64_t Font.resolveTraits(in:)(__int16 *a1, uint64_t a2)
{
  char v2;
  char v3;
  __int16 v5;
  __int128 v6;
  char v7;
  char v8;

  v2 = *((_BYTE *)a1 + 24);
  v3 = *((_BYTE *)a1 + 25);
  v5 = *a1;
  v6 = *(_OWORD *)(a1 + 4);
  v7 = v2;
  v8 = v3;
  return (*(uint64_t (**)(__int16 *))(*(_QWORD *)a2 + 88))(&v5);
}

uint64_t Font.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 104))();
}

uint64_t static Font.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a2) & 1;
}

Swift::Int Font.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 104))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 104))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Font()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 104))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 96))(*a2) & 1;
}

void specialized FontProvider.resolveTraits(in:)(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  const __CTFontDescriptor *v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  __int16 v16;

  LOBYTE(v14) = a7;
  LOWORD(v15[0]) = a1;
  v15[1] = a2;
  v15[2] = a3;
  v16 = a4 & 0x1FF;
  v9 = (const __CTFontDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD *, uint64_t, uint64_t))(a3 + 32))(a5, a6, &v14, v15, a2, a3);
  v10 = CTFontDescriptorCopyAttribute(v9, (CFStringRef)*MEMORY[0x24BDC4DA8]);
  v11 = 0;
  if (v10)
  {
    v15[0] = v10;
    if (swift_dynamicCast())
      v11 = v14;
  }
  CTFontDescriptorGetWeight();
  v13 = v12;

  *(_QWORD *)a8 = v11;
  *(_QWORD *)(a8 + 8) = v13;
  *(_QWORD *)(a8 + 16) = 0;
  *(_BYTE *)(a8 + 24) = 1;
}

void FontProvider.resolveTraits(in:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  const __CTFontDescriptor *v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  __int128 v13;
  char v14;
  char v15;

  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 25);
  LOWORD(v12) = *(_WORD *)a1;
  v13 = *(_OWORD *)(a1 + 8);
  v14 = v4;
  v15 = v5;
  v6 = (const __CTFontDescriptor *)(*(uint64_t (**)(CFTypeRef *))(a2 + 16))(&v12);
  v7 = CTFontDescriptorCopyAttribute(v6, (CFStringRef)*MEMORY[0x24BDC4DA8]);
  v8 = 0;
  if (v7)
  {
    v12 = v7;
    if (swift_dynamicCast())
      v8 = v11;
  }
  CTFontDescriptorGetWeight();
  v10 = v9;

  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
}

void AnyFontBox.resolve(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyFontBox.resolveTraits(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyFontBox.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyFontBox.hash(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyFontBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyFontBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t FontBox.resolve(in:)(__int16 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  __int16 v7;
  __int128 v8;
  char v9;
  char v10;

  v2 = *v1;
  v3 = *((_BYTE *)a1 + 24);
  v4 = *((_BYTE *)a1 + 25);
  v5 = *(_QWORD *)(*v1 + 128);
  v7 = *a1;
  v8 = *(_OWORD *)(a1 + 4);
  v9 = v3;
  v10 = v4;
  return (*(uint64_t (**)(__int16 *, _QWORD))(v5 + 16))(&v7, *(_QWORD *)(v2 + 120));
}

uint64_t FontBox.resolveTraits(in:)(__int16 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  __int16 v7;
  __int128 v8;
  char v9;
  char v10;

  v2 = *v1;
  v3 = *((_BYTE *)a1 + 24);
  v4 = *((_BYTE *)a1 + 25);
  v5 = *(_QWORD *)(*v1 + 128);
  v7 = *a1;
  v8 = *(_OWORD *)(a1 + 4);
  v9 = v3;
  v10 = v4;
  return (*(uint64_t (**)(__int16 *, _QWORD))(v5 + 24))(&v7, *(_QWORD *)(v2 + 120));
}

uint64_t FontBox.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t FontBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t FontBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 120) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
}

uint64_t FontBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 120) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_deallocClassInstance();
}

void Font.Resolved.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  Swift::UInt v4;
  int v5;
  Swift::UInt v6;
  Swift::UInt8 v7;
  void (*v8)(uint64_t);
  Swift::UInt v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  Swift::UInt v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 17);
  v14 = *(_OWORD *)(v1 + 24);
  v6 = *(unsigned __int8 *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 41);
  v8 = *(void (**)(uint64_t))(**(_QWORD **)v1 + 104);
  swift_retain();
  v8(a1);
  swift_release();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v13);
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10)
      goto LABEL_10;
  }
  else
  {
    v9 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v9);
    v10 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v10)
      goto LABEL_10;
  }
  if (v10 < 1)
    __break(1u);
  for (i = 0; i != v10; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      v12 = MEMORY[0x23B7C6D9C](i, v3);
    }
    else
    {
      v12 = *(_QWORD *)(v3 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 104))(a1);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 & 1);
  }
  v15 = v14;
  Hasher._combine(_:)((Swift::UInt)&v15);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int Font.Resolved.hashValue.getter()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;
  Swift::UInt8 v6;
  void (*v7)(_BYTE *);
  Swift::UInt v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  Swift::UInt v12;
  __int128 v14;
  __int128 v15;
  _BYTE v16[72];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *v0;
  v1 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  v4 = *((unsigned __int8 *)v0 + 17);
  v14 = *(_OWORD *)(v0 + 3);
  v5 = *((unsigned __int8 *)v0 + 40);
  v6 = *((_BYTE *)v0 + 41);
  Hasher.init(_seed:)();
  v7 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 104);
  swift_retain();
  v7(v16);
  swift_release();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v12);
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    v8 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v8);
    v9 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
      goto LABEL_10;
  }
  if (v9 < 1)
    __break(1u);
  for (i = 0; i != v9; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v11 = MEMORY[0x23B7C6D9C](i, v1);
    }
    else
    {
      v11 = *(_QWORD *)(v1 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)v11 + 104))(v16);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4 & 1);
  }
  v15 = v14;
  Hasher._combine(_:)((Swift::UInt)&v15);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.Resolved()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;
  Swift::UInt8 v6;
  void (*v7)(_BYTE *);
  Swift::UInt v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  Swift::UInt v12;
  __int128 v14;
  __int128 v15;
  _BYTE v16[72];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *v0;
  v1 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  v4 = *((unsigned __int8 *)v0 + 17);
  v14 = *(_OWORD *)(v0 + 3);
  v5 = *((unsigned __int8 *)v0 + 40);
  v6 = *((_BYTE *)v0 + 41);
  Hasher.init(_seed:)();
  v7 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 104);
  swift_retain();
  v7(v16);
  swift_release();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v12);
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    v8 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v8);
    v9 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
      goto LABEL_10;
  }
  if (v9 < 1)
    __break(1u);
  for (i = 0; i != v9; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v11 = MEMORY[0x23B7C6D9C](i, v1);
    }
    else
    {
      v11 = *(_QWORD *)(v1 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)v11 + 104))(v16);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4 & 1);
  }
  v15 = v14;
  Hasher._combine(_:)((Swift::UInt)&v15);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void Font.Context.sizeCategory.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Font.Context.sizeCategory.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Font.Context.sizeCategory.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.Context.legibilityWeight.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *Font.Context.legibilityWeight.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Font.Context.legibilityWeight.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.Context.watchDisplayVariant.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

_BYTE *Font.Context.watchDisplayVariant.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = *result;
  return result;
}

uint64_t (*Font.Context.watchDisplayVariant.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.Context.hash(into:)()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = v0[1];
  v4 = *(_OWORD *)(v0 + 8);
  v2 = v0[24];
  v3 = v0[25];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  v5 = v4;
  Hasher._combine(_:)((Swift::UInt)&v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int Font.Context.hashValue.getter()
{
  Hasher.init(_seed:)();
  Font.Context.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.Context()
{
  Hasher.init(_seed:)();
  Font.Context.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.Context()
{
  Hasher.init(_seed:)();
  Font.Context.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Font.platformFont(in:)(__int16 *a1, uint64_t a2)
{
  __int16 v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int16 v9;
  __int128 v10;
  char v11;
  char v12;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 24);
  v4 = *((_BYTE *)a1 + 25);
  v8[0] = a2;
  v8[1] = MEMORY[0x24BEE4AF8];
  v9 = v2;
  v10 = *(_OWORD *)(a1 + 4);
  v11 = v3;
  v12 = v4;
  v5 = one-time initialization token for fontCache;
  swift_retain();
  if (v5 != -1)
    swift_once();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = specialized ObjectCache.subscript.getter((uint64_t)v8);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v6;
}

uint64_t Font.platformFont(in:modifiers:)(__int16 *a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  __int16 v10;
  __int128 v11;
  char v12;
  char v13;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_BYTE *)a1 + 25);
  v9[0] = a3;
  v9[1] = a2;
  v10 = v3;
  v11 = *(_OWORD *)(a1 + 4);
  v12 = v4;
  v13 = v5;
  v6 = one-time initialization token for fontCache;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = specialized ObjectCache.subscript.getter((uint64_t)v9);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v7;
}

uint64_t one-time initialization function for fontCache()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(0, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache);
  v0 = (_QWORD *)swift_allocObject();
  type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(0, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Item, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Item);
  v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v1 + 16) = 32;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_DWORD *)(v1 + 168) = 0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_DWORD *)(v1 + 240) = 0;
  *(_DWORD *)(v1 + 312) = 0;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_DWORD *)(v1 + 456) = 0;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_DWORD *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 600) = 0;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_DWORD *)(v1 + 672) = 0;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_DWORD *)(v1 + 744) = 0;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_OWORD *)(v1 + 680) = 0u;
  *(_OWORD *)(v1 + 696) = 0u;
  *(_DWORD *)(v1 + 816) = 0;
  *(_OWORD *)(v1 + 784) = 0u;
  *(_OWORD *)(v1 + 800) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 888) = 0;
  *(_OWORD *)(v1 + 856) = 0u;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 840) = 0u;
  *(_DWORD *)(v1 + 960) = 0;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_OWORD *)(v1 + 944) = 0u;
  *(_OWORD *)(v1 + 896) = 0u;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_DWORD *)(v1 + 1032) = 0;
  *(_OWORD *)(v1 + 1000) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_OWORD *)(v1 + 984) = 0u;
  *(_DWORD *)(v1 + 1104) = 0;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_OWORD *)(v1 + 1056) = 0u;
  *(_OWORD *)(v1 + 1040) = 0u;
  *(_DWORD *)(v1 + 1176) = 0;
  *(_OWORD *)(v1 + 1144) = 0u;
  *(_OWORD *)(v1 + 1160) = 0u;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_DWORD *)(v1 + 1248) = 0;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_OWORD *)(v1 + 1216) = 0u;
  *(_OWORD *)(v1 + 1200) = 0u;
  *(_OWORD *)(v1 + 1184) = 0u;
  *(_DWORD *)(v1 + 1320) = 0;
  *(_OWORD *)(v1 + 1288) = 0u;
  *(_OWORD *)(v1 + 1304) = 0u;
  *(_OWORD *)(v1 + 1256) = 0u;
  *(_OWORD *)(v1 + 1272) = 0u;
  *(_DWORD *)(v1 + 1392) = 0;
  *(_OWORD *)(v1 + 1376) = 0u;
  *(_OWORD *)(v1 + 1360) = 0u;
  *(_OWORD *)(v1 + 1344) = 0u;
  *(_OWORD *)(v1 + 1328) = 0u;
  *(_DWORD *)(v1 + 1464) = 0;
  *(_OWORD *)(v1 + 1432) = 0u;
  *(_OWORD *)(v1 + 1448) = 0u;
  *(_OWORD *)(v1 + 1400) = 0u;
  *(_OWORD *)(v1 + 1416) = 0u;
  *(_DWORD *)(v1 + 1536) = 0;
  *(_OWORD *)(v1 + 1520) = 0u;
  *(_OWORD *)(v1 + 1504) = 0u;
  *(_OWORD *)(v1 + 1488) = 0u;
  *(_OWORD *)(v1 + 1472) = 0u;
  *(_DWORD *)(v1 + 1608) = 0;
  *(_OWORD *)(v1 + 1576) = 0u;
  *(_OWORD *)(v1 + 1592) = 0u;
  *(_OWORD *)(v1 + 1544) = 0u;
  *(_OWORD *)(v1 + 1560) = 0u;
  *(_DWORD *)(v1 + 1680) = 0;
  *(_OWORD *)(v1 + 1664) = 0u;
  *(_OWORD *)(v1 + 1648) = 0u;
  *(_OWORD *)(v1 + 1632) = 0u;
  *(_OWORD *)(v1 + 1616) = 0u;
  *(_DWORD *)(v1 + 1752) = 0;
  *(_OWORD *)(v1 + 1720) = 0u;
  *(_OWORD *)(v1 + 1736) = 0u;
  *(_OWORD *)(v1 + 1688) = 0u;
  *(_OWORD *)(v1 + 1704) = 0u;
  *(_DWORD *)(v1 + 1824) = 0;
  *(_OWORD *)(v1 + 1808) = 0u;
  *(_OWORD *)(v1 + 1792) = 0u;
  *(_OWORD *)(v1 + 1776) = 0u;
  *(_OWORD *)(v1 + 1760) = 0u;
  *(_DWORD *)(v1 + 1896) = 0;
  *(_OWORD *)(v1 + 1864) = 0u;
  *(_OWORD *)(v1 + 1880) = 0u;
  *(_OWORD *)(v1 + 1832) = 0u;
  *(_OWORD *)(v1 + 1848) = 0u;
  *(_DWORD *)(v1 + 1968) = 0;
  *(_OWORD *)(v1 + 1952) = 0u;
  *(_OWORD *)(v1 + 1936) = 0u;
  *(_OWORD *)(v1 + 1920) = 0u;
  *(_OWORD *)(v1 + 1904) = 0u;
  *(_DWORD *)(v1 + 2040) = 0;
  *(_OWORD *)(v1 + 2008) = 0u;
  *(_OWORD *)(v1 + 2024) = 0u;
  *(_OWORD *)(v1 + 1976) = 0u;
  *(_OWORD *)(v1 + 1992) = 0u;
  *(_DWORD *)(v1 + 2112) = 0;
  *(_OWORD *)(v1 + 2096) = 0u;
  *(_OWORD *)(v1 + 2080) = 0u;
  *(_OWORD *)(v1 + 2064) = 0u;
  *(_OWORD *)(v1 + 2048) = 0u;
  *(_DWORD *)(v1 + 2184) = 0;
  *(_OWORD *)(v1 + 2152) = 0u;
  *(_OWORD *)(v1 + 2168) = 0u;
  *(_OWORD *)(v1 + 2120) = 0u;
  *(_OWORD *)(v1 + 2136) = 0u;
  *(_DWORD *)(v1 + 2256) = 0;
  *(_OWORD *)(v1 + 2240) = 0u;
  *(_OWORD *)(v1 + 2224) = 0u;
  *(_OWORD *)(v1 + 2208) = 0u;
  *(_OWORD *)(v1 + 2192) = 0u;
  *(_DWORD *)(v1 + 2328) = 0;
  *(_OWORD *)(v1 + 2296) = 0u;
  *(_OWORD *)(v1 + 2312) = 0u;
  *(_OWORD *)(v1 + 2264) = 0u;
  *(_OWORD *)(v1 + 2280) = 0u;
  type metadata accessor for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  v0[3] = 0;
  v0[4] = result;
  v0[2] = closure #1 in variable initialization expression of static Font.fontCache;
  static Font.fontCache = (uint64_t)v0;
  return result;
}

void closure #1 in variable initialization expression of static Font.fontCache(uint64_t *a1@<X0>, CTFontRef *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  const __CTFontDescriptor *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CTFontRef v14;
  CTFontRef *v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  CTFontDescriptorRef descriptor;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((_BYTE *)a1 + 17);
  v6 = a1[3];
  v7 = a1[4];
  v8 = *((_BYTE *)a1 + 40);
  v9 = *((_BYTE *)a1 + 41);
  v16 = *((_BYTE *)a1 + 16);
  v17 = v16;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v10 = (const __CTFontDescriptor *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 80))(&v17);
  descriptor = v10;
  if (!(v4 >> 62))
  {
    v11 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    v14 = CTFontCreateWithFontDescriptor(v10, 0.0, 0);

    *a2 = v14;
    return;
  }
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11)
    goto LABEL_11;
LABEL_3:
  if (v11 >= 1)
  {
    v15 = a2;
    v12 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x23B7C6D9C](v12, v4);
      }
      else
      {
        v13 = *(_QWORD *)(v4 + 8 * v12 + 32);
        swift_retain();
      }
      ++v12;
      v17 = v16;
      v18 = v5;
      v19 = v6;
      v20 = v7;
      v21 = v8;
      v22 = v9;
      (*(void (**)(CTFontDescriptorRef *, char *))(*(_QWORD *)v13 + 80))(&descriptor, &v17);
      swift_release();
    }
    while (v11 != v12);
    swift_bridgeObjectRelease();
    v10 = descriptor;
    a2 = v15;
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t Font.platformFont(in:modifiers:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v12;
  __int128 v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int128 v19;
  char v20;
  char v21;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5, (uint64_t)&v12);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v16 = *a1;
    v17 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v16, v6, v7, v8, (uint64_t)&v12);
    swift_release();
  }
  v16 = a3;
  v17 = a2;
  v18 = v12;
  v19 = v13;
  v20 = v14;
  v21 = v15;
  v9 = one-time initialization token for fontCache;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v9 != -1)
    swift_once();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = specialized ObjectCache.subscript.getter((uint64_t)&v16);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v10;
}

uint64_t Font.platformFont(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  char v17;
  char v18;
  __int128 v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3, (uint64_t)&v17);
    swift_release_n();
    swift_release_n();
    v4 = v17;
    v5 = v18;
    v16 = v19;
    v6 = v20;
    v7 = v21;
    swift_retain_n();
    swift_retain_n();
    v8 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v22 = *a1;
    v23 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v22, v9, v10, v11, (uint64_t)&v17);
    swift_release();
    v4 = v17;
    v5 = v18;
    v16 = v19;
    v6 = v20;
    v7 = v21;
    v12 = swift_retain_n();
    v8 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v22 = a2;
  v23 = v8;
  v24 = v4;
  v25 = v5;
  v26 = v16;
  v27 = v6;
  v28 = v7;
  v13 = one-time initialization token for fontCache;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 != -1)
    swift_once();
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = specialized ObjectCache.subscript.getter((uint64_t)&v22);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v14;
}

void Font.RatioKey.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_234C661B0()
{
  Swift::UInt v0;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

void sub_234C66230()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable.hash(into:) in conformance Font.RatioKey()
{
  __asm { BR              X9 }
}

void sub_234C66270()
{
  Swift::UInt v0;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v0);
}

void sub_234C662D4()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Font.RatioKey()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_234C66318()
{
  Swift::UInt v0;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

void sub_234C66398()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void one-time initialization function for ratioCache()
{
  void *v0;

  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static Font.ratioCache = v0;
}

uint64_t Font.Context.debugDescription.getter()
{
  uint64_t v0;
  int v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;

  v1 = *(unsigned __int8 *)(v0 + 25);
  _StringGuts.grow(_:)(140);
  v2._countAndFlagsBits = 0xD000000000000020;
  v2._object = (void *)0x80000002352E16A0;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0xD000000000000017;
  v3._object = (void *)0x80000002352E16D0;
  String.append(_:)(v3);
  type metadata accessor for LegibilityWeight?();
  v4._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000015;
  v5._object = (void *)0x80000002352E16F0;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x80000002352E1710;
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 45;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._object = (void *)0x80000002352E1730;
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v8);
  if (v1)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (v1)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 10506;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t static EnvironmentValues.FontContextKey.value(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  char v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v6 = *a1;
  v7 = a1[1];
  v28 = *a1;
  v29 = v7;
  EnvironmentValues.sizeCategory.getter(a2, a3, a4, &v30);
  v8 = v30;
  if (v7)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    swift_release_n();
    v9 = v30;
    swift_retain_n();
    swift_retain_n();
    v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v6);
    v12 = v11;
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v13 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v6);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    result = swift_release_n();
    v15 = v30;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v16);
    v9 = 2;
    v17 = swift_retain_n();
    v18 = specialized find1<A>(_:key:filter:)(v17, v28);
    if (v18)
      v9 = *(_BYTE *)(v18 + 72);
    swift_release_n();
    v19 = swift_retain_n();
    v10 = specialized closure #1 in PropertyList.subscript.getter(v19);
    v12 = v20;
    swift_release_n();
    v28 = v6;
    v29 = 0;
    swift_retain();
    v13 = specialized static ShouldRedactContentKey.value(in:)(&v28, v21, v22, v23);
    swift_release();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v24);
    v25 = v28;
    v26 = swift_retain_n();
    v27 = specialized find1<A>(_:key:filter:)(v26, v25);
    if (v27)
      v15 = *(_BYTE *)(v27 + 72);
    else
      v15 = 1;
    result = swift_release_n();
  }
  *(_BYTE *)a5 = v8;
  *(_BYTE *)(a5 + 1) = v9;
  *(_QWORD *)(a5 + 8) = v10;
  *(_QWORD *)(a5 + 16) = v12;
  *(_BYTE *)(a5 + 24) = v15;
  *(_BYTE *)(a5 + 25) = v13 & 1;
  return result;
}

double CTFontRef.pointSize.getter()
{
  const __CTFont *v0;

  return CTFontGetSize(v0);
}

double CTFontRef.capHeight.getter()
{
  const __CTFont *v0;

  return CTFontGetCapHeight(v0);
}

double CTFontRef.ascender.getter()
{
  const __CTFont *v0;

  return CTFontGetAscent(v0);
}

CGFloat CTFontRef.descender.getter()
{
  const __CTFont *v0;

  return -CTFontGetDescent(v0);
}

double CTFontRef.leading.getter()
{
  const __CTFont *v0;

  return CTFontGetLeading(v0);
}

double CTFontRef.bodyLeading.getter()
{
  const __CTFont *v0;
  double Ascent;
  double v2;

  Ascent = CTFontGetAscent(v0);
  v2 = Ascent + CTFontGetDescent(v0);
  return v2 + CTFontGetLeading(v0);
}

uint64_t CTFontRef.isSystemUIFont.getter()
{
  return CTFontIsSystemUIFont();
}

uint64_t CTFontRef.weight.getter()
{
  return CTFontGetWeight();
}

uint64_t CTFontRef.symbolicTraits.getter()
{
  const __CTFont *v0;

  return CTFontGetSymbolicTraits(v0);
}

uint64_t CTFontRef.stylisticClass.getter()
{
  const __CTFont *v0;

  return CTFontGetSymbolicTraits(v0) & 0xF0000000;
}

CTFontRef CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)(uint64_t a1, char a2, char a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  CGFloat v13;
  double v14;
  CTFontDescriptorRef v15;
  const __CTFontDescriptor *CopyWithAttributes;
  const __CTFontDescriptor *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  const __CFDictionary *v34;
  CTFontRef v35;
  __int128 v36;
  CGFloat v37;

  v8 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4 == 1.0)
    return (CTFontRef)(id)v36;
  if ((a2 & 1) != 0)
  {
    v14 = CTFontGetSize((CTFontRef)v36) * a4;
  }
  else
  {
    v13 = CTFontGetSize((CTFontRef)v36) * a4;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE38D0], v8);
    v37 = v13;
    specialized FloatingPoint.round(_:toMultipleOf:)(v11, *(double *)&a1);
    v14 = v37;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v15 = CTFontCopyFontDescriptor((CTFontRef)v36);
  CopyWithAttributes = v15;
  if ((a3 & 1) != 0 && v14 > 0.0)
  {
    v17 = v15;
    CTFontGetWeight();
    v19 = (a4 + 1.0) * 0.5 * ((v18 + 1.0) * CTFontGetSize((CTFontRef)v36) / v14) + -1.0;
    v20 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSDictionary);
    type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (void (*)(uint64_t))type metadata accessor for (Any, Any));
    v21 = swift_allocObject();
    v36 = xmmword_23527E860;
    *(_OWORD *)(v21 + 16) = xmmword_23527E860;
    v22 = (void *)*MEMORY[0x24BDC4DE0];
    type metadata accessor for CFStringRef(0);
    v24 = v23;
    *(_QWORD *)(v21 + 56) = v23;
    *(_QWORD *)(v21 + 32) = v22;
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = v36;
    v26 = (void *)*MEMORY[0x24BDC4E80];
    *(_QWORD *)(v25 + 56) = v24;
    *(_QWORD *)(v25 + 32) = v26;
    v27 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
    v28 = v22;
    v29 = v26;
    v30 = objc_msgSend(v27, sel_initWithDouble_, v19);
    *(_QWORD *)(v25 + 88) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)(v25 + 64) = v30;
    v31 = (void *)NSDictionary.init(dictionaryLiteral:)();
    v32 = NSDictionary.init(dictionary:)();

    *(_QWORD *)(v21 + 88) = v20;
    *(_QWORD *)(v21 + 64) = v32;
    v33 = (void *)NSDictionary.init(dictionaryLiteral:)();
    v34 = (const __CFDictionary *)NSDictionary.init(dictionary:)();

    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v17, v34);
  }
  v35 = CTFontCreateWithFontDescriptor(CopyWithAttributes, v14, 0);

  return v35;
}

BOOL CTFontRef.mayRequireLanguageAwareOutsets.getter()
{
  const __CTFont *v0;
  CTFontSymbolicTraits SymbolicTraits;
  CTFontSymbolicTraits v2;
  double v3;

  SymbolicTraits = CTFontGetSymbolicTraits(v0);
  if ((SymbolicTraits & 1) != 0)
    return 1;
  v2 = SymbolicTraits;
  CTFontGetWeight();
  if (*MEMORY[0x24BDC4E68] < v3)
    return 1;
  return (v2 & 0xF0000000) == 0xA0000000 || (v2 & 0xF0000000) == -1879048192;
}

uint64_t CTFontLegibilityWeight.init(_:)(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 2)
    return -1;
  else
    return v1 & 1;
}

void static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)(uint64_t a1, void *a2, uint64_t a3, char a4, char *a5, unsigned __int8 *a6)
{
  specialized static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)(a1, a2, a3, a4 & 1, a5, a6);
}

uint64_t static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(void *a1, uint64_t a2, char a3, unsigned __int8 *a4, double a5)
{
  return specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(a1, a2, a3 & 1, a4, a5);
}

CTFontDescriptorRef __swiftcall Font.resolve(in:)(SwiftUI::DynamicTypeSize in)
{
  uint64_t v1;
  _BYTE v3[8];
  ValueMetadata *v4;
  _UNKNOWN **v5;
  __int16 v6;

  v3[0] = *(_BYTE *)in;
  v3[1] = 2;
  v4 = &type metadata for DefaultFontDefinition;
  v5 = &protocol witness table for DefaultFontDefinition;
  v6 = 2;
  return (CTFontDescriptorRef)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 80))(v3);
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _UNKNOWN **v27;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v24 = a1;
    v25 = 0;
    swift_retain();
    v15 = specialized static ShouldRedactContentKey.value(in:)(&v24, v12, v13, v14);
    swift_release();
    LOBYTE(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactContentKey>, (uint64_t)&type metadata for ShouldRedactContentKey, (uint64_t)&protocol witness table for ShouldRedactContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    v10 = v26;
    v11 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v23, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    v24 = a1;
    v25 = 0;
    swift_retain();
    v19 = specialized static ShouldRedactContentKey.value(in:)(&v24, v16, v17, v18);
    swift_release();
    LOBYTE(v23[0]) = v19 & 1;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>(0);
    v26 = v20;
    v27 = &protocol witness table for DerivedValue<A>;
    LOBYTE(v24) = v19 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  v21 = LOBYTE(v23[0]);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v21;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  __int128 v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>, (uint64_t)&type metadata for ShouldRedactSymbolImagesKey, (uint64_t)&protocol witness table for ShouldRedactSymbolImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
      v6 = v5;
      v7 = *(_QWORD *)(v3 + 40);
      if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v29);
        outlined init with take of ScrollStateRequest(v29, (uint64_t)&v30);
        v10 = v32;
        v11 = v33;
        __swift_project_boxed_opaque_existential_1(&v30, v32);
        ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v29, MEMORY[0x24BEE1328], v10, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
      }
      else
      {
        v30 = a1;
        v31 = 0;
        swift_retain_n();
        v22 = specialized static ShouldRedactContentKey.value(in:)(&v30, v19, v20, v21);
        swift_release();
        if ((v22 & 1) != 0)
        {
          v23 = swift_retain_n();
          v24 = specialized closure #1 in PropertyList.subscript.getter(v23);
          swift_release_n();
          v25 = v24 ^ 1;
        }
        else
        {
          swift_release();
          v25 = 0;
        }
        v26 = v25 & 1;
        LOBYTE(v29[0]) = v25 & 1;
        type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>(0);
        v32 = v27;
        v33 = &protocol witness table for DerivedValue<A>;
        LOBYTE(v30) = v26;
        specialized Dictionary.subscript.setter((uint64_t)&v30, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v3 + 56) = 1;
  v30 = a1;
  v31 = 0;
  swift_retain_n();
  v15 = specialized static ShouldRedactContentKey.value(in:)(&v30, v12, v13, v14);
  swift_release();
  if ((v15 & 1) != 0)
  {
    v16 = swift_retain_n();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16);
    swift_release_n();
    v18 = v17 ^ 1;
  }
  else
  {
    swift_release();
    v18 = 0;
  }
  LOBYTE(v29[0]) = v18 & 1;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v29[0]);
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17[2];
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v18 = a1;
    v19 = 0;
    swift_retain();
    v12 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(&v18);
    swift_release();
    *(_QWORD *)&v17[0] = v12;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey, (uint64_t)&type metadata for EnvironmentValues.EffectiveFontKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v17);
    outlined init with take of ScrollStateRequest(v17, (uint64_t)&v18);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(&v18, v20);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v17, &type metadata for Font, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  else
  {
    v18 = a1;
    v19 = 0;
    swift_retain();
    v13 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(&v18);
    swift_release();
    *(_QWORD *)&v17[0] = v13;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>(0);
    v20 = v14;
    v21 = &protocol witness table for DerivedValue<A>;
    v18 = v13;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v18, v6);
  }
LABEL_9:
  v15 = *(_QWORD *)&v17[0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v15;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v24);
    swift_release_n();
    v13 = v25;
    v14 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v23[0] = a1;
    v15 = ((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v14[1])(v23, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release();
    *(_QWORD *)&v23[0] = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey, (uint64_t)&type metadata for EnvironmentValues.FallbackFontKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v10 = v25;
    v11 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v23, &type metadata for Font, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v16 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v24);
    swift_release_n();
    v17 = v25;
    v18 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v23[0] = a1;
    v19 = ((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v18[1])(v23, v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release();
    *(_QWORD *)&v23[0] = v19;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for DerivedValue<A>;
    v24[0] = v19;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  v21 = *(_QWORD *)&v23[0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v21;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16[2];
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v17 = a1;
    v18 = 0;
    swift_retain();
    v12 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(&v17);
    swift_release();
    *(_QWORD *)&v16[0] = v12;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey, (uint64_t)&type metadata for EnvironmentValues.EffectiveSymbolFontKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v16);
    outlined init with take of ScrollStateRequest(v16, (uint64_t)&v17);
    v10 = v19;
    v11 = v20;
    __swift_project_boxed_opaque_existential_1(&v17, v19);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v16, &type metadata for Font, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  }
  else
  {
    v17 = a1;
    v18 = 0;
    swift_retain();
    v13 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(&v17);
    swift_release();
    *(_QWORD *)&v16[0] = v13;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>(0);
    v19 = v14;
    v20 = &protocol witness table for DerivedValue<A>;
    v17 = v13;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v17, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v16[0];
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v21 = a1;
    v22 = 0;
    swift_retain();
    static CUIDesignLibraryCacheKey.Props.value(in:)(&v21, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>, (uint64_t (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props, (uint64_t)&type metadata for CUIDesignLibraryCacheKey.Props);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 40);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)&v21);
    v12 = v23;
    v13 = v24;
    __swift_project_boxed_opaque_existential_1(&v21, v23);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for CUIDesignLibraryCacheKey.Props, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  }
  else
  {
    v21 = a1;
    v22 = 0;
    swift_retain();
    static CUIDesignLibraryCacheKey.Props.value(in:)(&v21, a2);
    swift_release();
    v14 = *(_BYTE *)a2;
    v15 = *(_BYTE *)(a2 + 1);
    v16 = *(_BYTE *)(a2 + 2);
    v17 = *(_QWORD *)(a2 + 8);
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>(0);
    v23 = v18;
    v24 = &protocol witness table for DerivedValue<A>;
    LOBYTE(v21) = v14;
    BYTE1(v21) = v15;
    BYTE2(v21) = v16;
    v22 = v17;
    specialized Dictionary.subscript.setter((uint64_t)&v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v27 = a1;
    v28 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v27, v14, v15, v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey, (uint64_t)&unk_250625290);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 40);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v26);
    outlined init with take of ScrollStateRequest(v26, (uint64_t)&v27);
    v12 = v29;
    v13 = v30;
    __swift_project_boxed_opaque_existential_1(&v27, v29);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Font.Context, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
  }
  else
  {
    v27 = a1;
    v28 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v27, v17, v18, v19, a2);
    swift_release();
    v20 = *(_WORD *)a2;
    v21 = *(_BYTE *)(a2 + 24);
    v22 = *(_BYTE *)(a2 + 25);
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>(0);
    v29 = v23;
    v30 = &protocol witness table for DerivedValue<A>;
    v24 = swift_allocObject();
    v27 = v24;
    *(_WORD *)(v24 + 16) = v20;
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(v24 + 40) = v21;
    *(_BYTE *)(v24 + 41) = v22;
    specialized Dictionary.subscript.setter((uint64_t)&v27, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v23[5];
  _OWORD v24[6];
  _OWORD v25[2];
  __int128 v26[2];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v24[0] = a1;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)v24, (uint64_t)a2);
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key, (uint64_t)&type metadata for TextLayoutProperties.Key);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 40);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v26);
    outlined init with take of ScrollStateRequest(v26, (uint64_t)v27);
    v12 = v28;
    v13 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(ValueMetadata *, uint64_t, uint64_t))(v13 + 8))(&type metadata for TextLayoutProperties, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    v24[0] = a1;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)v24, (uint64_t)a2);
    v14 = a2[5];
    v24[4] = a2[4];
    v24[5] = v14;
    v25[0] = a2[6];
    *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)((char *)a2 + 105);
    v15 = a2[1];
    v24[0] = *a2;
    v24[1] = v15;
    v16 = a2[3];
    v24[2] = a2[2];
    v24[3] = v16;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>(0);
    v23[3] = v17;
    v23[4] = &protocol witness table for DerivedValue<A>;
    v18 = (_OWORD *)swift_allocObject();
    v23[0] = v18;
    v19 = a2[5];
    v18[5] = a2[4];
    v18[6] = v19;
    v18[7] = a2[6];
    *(_OWORD *)((char *)v18 + 121) = *(_OWORD *)((char *)a2 + 105);
    v20 = a2[1];
    v18[1] = *a2;
    v18[2] = v20;
    v21 = a2[3];
    v18[3] = a2[2];
    v18[4] = v21;
    outlined retain of TextLayoutProperties((uint64_t)v24);
    specialized Dictionary.subscript.setter((uint64_t)v23, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

void protocol witness for FontProvider.resolveTraits(in:) in conformance Font.NamedProvider(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(a1 + 25))
    v3 = 256;
  else
    v3 = 0;
  specialized FontProvider.resolveTraits(in:)(*(_WORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v3 | *(unsigned __int8 *)(a1 + 24), *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 24), a2);
}

uint64_t specialized static Font.Context.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v10;

  if (*a1 == *a2)
  {
    v2 = a1[1];
    v3 = *((_QWORD *)a1 + 1);
    v4 = a1[24];
    v5 = a2[1];
    v6 = *((_QWORD *)a2 + 1);
    v7 = a2[24];
    if (v2 == 2)
    {
      if (v5 != 2)
        return 0;
      if (v3 != v6 || v4 != v7)
        return 0;
    }
    else
    {
      v10 = (v5 ^ v2) & 1;
      if (v5 == 2 || v10 != 0 || v3 != v6 || v4 != v7)
        return 0;
    }
    return a1[25] ^ a2[25] ^ 1u;
  }
  return 0;
}

void specialized static Font.RatioKey.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X4 }
}

uint64_t sub_234C67C7C()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))((char *)sub_234C67E70 + 4 * byte_235290A48[v0]))(0, 0, 0, 1);
}

BOOL sub_234C67E70@<W0>(int a1@<W8>)
{
  int v1;
  int v2;

  return v2 && a1 == v1;
}

void sub_234C67EBC()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x234C67EACLL);
  JUMPOUT(0x234C67E84);
}

void sub_234C67EC4()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x234C67EACLL);
  JUMPOUT(0x234C67E84);
}

void sub_234C67ECC()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x234C67EACLL);
  JUMPOUT(0x234C67E84);
}

void sub_234C67ED4()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x234C67EACLL);
  JUMPOUT(0x234C67E84);
}

void sub_234C67EDC()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t specialized static Font.Resolved.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  char v4;
  char v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  char v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16[8];
  __int128 v17;
  char v18;
  char v19;
  unsigned __int8 v20[8];
  __int128 v21;
  char v22;
  char v23;

  v15 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 17);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 41);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 17);
  v13 = *(_OWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 41);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 96))(*(_QWORD *)a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(v15, v6) & 1) != 0)
  {
    v20[0] = v2;
    v20[1] = v3;
    v21 = v14;
    v22 = v4;
    v23 = v5;
    v16[0] = v7;
    v16[1] = v8;
    v17 = v13;
    v18 = v9;
    v19 = v10;
    v11 = specialized static Font.Context.== infix(_:_:)(v20, v16);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

double specialized static Font.scaleFactor(textStyle:in:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  __int16 v2;
  __int16 v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  double v7;
  void *v8;
  uint64_t v9;
  id v10;
  void (*v11)(_QWORD *__return_ptr);
  void *v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  void *v16;
  _QWORD v17[3];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *a2;
  if (one-time initialization token for ratioCache != -1)
    swift_once();
  swift_beginAccess();
  v4 = static Font.ratioCache;
  if (*((_QWORD *)static Font.ratioCache + 2) && (specialized __RawDictionaryStorage.find<A>(_:)(v2), (v6 & 1) != 0))
  {
    v7 = *(double *)(v4[7] + 8 * v5);
  }
  else
  {
    swift_endAccess();
    specialized Font.TextStyle.ctTextStyle.getter();
    specialized DynamicTypeSize.ctTextSize.getter();
    CTFontDescriptorGetTextStyleSize();
    v18 = v2;
    v8 = (void *)specialized Font.TextStyle.ctTextStyle.getter();
    v9 = one-time initialization token for shared;
    v10 = v8;
    if (v9 != -1)
      swift_once();
    swift_beginAccess();
    v11 = *(void (**)(_QWORD *__return_ptr))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared)
                                                      + 0x78);
    v12 = static CoreGlue2.shared;
    v11(v17);

    v13 = (id)specialized DynamicTypeSize.ctTextSize.getter();
    CTFontDescriptorGetTextStyleSize();

    v7 = 0.0 / 0.0;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = static Font.ratioCache;
    static Font.ratioCache = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2 | (v3 << 8), isUniquelyReferenced_nonNull_native, 0.0 / 0.0);
    static Font.ratioCache = v16;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return v7;
}

uint64_t specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(void *a1, uint64_t a2, char a3, unsigned __int8 *a4, double a5)
{
  int v9;
  uint64_t inited;
  void *v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  void **v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  uint64_t v35;

  v9 = *a4;
  type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (void (*)(uint64_t))type metadata accessor for (CFStringRef, Any));
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  v11 = (void *)*MEMORY[0x24BDC4DE0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4DE0];
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_2352828C0;
  v13 = MEMORY[0x24BEE50B0];
  v14 = (void *)*MEMORY[0x24BDC4E80];
  *(_QWORD *)(result + 64) = MEMORY[0x24BEE50B0];
  v15 = *MEMORY[0x24BDC4E78];
  if ((a3 & 1) == 0)
    v15 = a2;
  *(_QWORD *)(result + 32) = v14;
  *(_QWORD *)(result + 40) = v15;
  v16 = (void *)*MEMORY[0x24BDC4E28];
  if (*MEMORY[0x24BDC4E28])
  {
    v17 = result;
    *(_QWORD *)(result + 72) = v16;
    type metadata accessor for CFStringRef(0);
    *(_QWORD *)(v17 + 104) = v18;
    *(_QWORD *)(v17 + 80) = a1;
    v19 = v11;
    v20 = v14;
    v21 = a1;
    v22 = v16;
    v23 = specialized Dictionary.init(dictionaryLiteral:)(v17);
    type metadata accessor for [CFStringRef : Any]();
    v24 = (void **)MEMORY[0x24BDC4DA8];
    *(_QWORD *)(inited + 40) = v23;
    v25 = *v24;
    *(_QWORD *)(inited + 64) = v26;
    *(_QWORD *)(inited + 72) = v25;
    *(_QWORD *)(inited + 104) = v13;
    *(double *)(inited + 80) = a5;
    v27 = v25;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    if (v9 != 2)
    {
      v28 = (void *)*MEMORY[0x24BDC4D58];
      v35 = MEMORY[0x24BEE1768];
      *(_QWORD *)&v34 = v9 & 1;
      outlined init with take of Any(&v34, v33);
      v29 = v28;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v29, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
    }
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v32 = CTFontDescriptorCreateWithAttributesAndOptions();

    return v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)(uint64_t a1, void *a2, uint64_t a3, char a4, char *a5, unsigned __int8 *a6)
{
  char v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  id v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  void *v18;
  id v19;
  char v20;
  void *v21;
  uint64_t v22;
  id v23;
  char v24;
  void *v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  Class isa;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;

  v8 = *a5;
  v9 = *a6;
  v10 = MEMORY[0x24BEE4B00];
  if (!a2)
  {
    v17 = MEMORY[0x24BEE4B00];
    if ((a4 & 1) != 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v11 = (void *)*MEMORY[0x24BDC4E28];
  if (!*MEMORY[0x24BDC4E28])
  {
    __break(1u);
    return;
  }
  type metadata accessor for CFStringRef(0);
  v33 = v13;
  *(_QWORD *)&v32 = a2;
  outlined init with take of Any(&v32, v31);
  v14 = a2;
  v15 = v11;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v15, isUniquelyReferenced_nonNull_native);
  v17 = v10;

  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0)
  {
LABEL_4:
    v18 = (void *)*MEMORY[0x24BDC4E80];
    v33 = MEMORY[0x24BEE50B0];
    *(_QWORD *)&v32 = a3;
    outlined init with take of Any(&v32, v31);
    v19 = v18;
    v20 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v19, v20);

    swift_bridgeObjectRelease();
  }
LABEL_5:
  if (*(_QWORD *)(v17 + 16))
  {
    v21 = (void *)*MEMORY[0x24BDC4DE0];
    type metadata accessor for [CFStringRef : Any]();
    v33 = v22;
    *(_QWORD *)&v32 = v17;
    outlined init with take of Any(&v32, v31);
    v23 = v21;
    v24 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v23, v24);

  }
  swift_bridgeObjectRelease();
  if (v9 != 2)
  {
    v25 = (void *)*MEMORY[0x24BDC4D58];
    v33 = MEMORY[0x24BEE1768];
    *(_QWORD *)&v32 = v9 & 1;
    outlined init with take of Any(&v32, v31);
    v26 = v25;
    v27 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v26, v27);

    swift_bridgeObjectRelease();
  }
  LOBYTE(v32) = v8;
  v28 = (void *)specialized DynamicTypeSize.ctTextSize.getter();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  v29 = v28;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CTFontDescriptorCreateWithTextStyleAndAttributes();

}

void type metadata accessor for LegibilityWeight?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LegibilityWeight?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LegibilityWeight?);
  }
}

void type metadata accessor for (Any, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Any, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any, Any));
  }
}

unint64_t lazy protocol witness table accessor for type Font and conformance Font()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Context and conformance Font.Context()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Context and conformance Font.Context;
  if (!lazy protocol witness table cache variable for type Font.Context and conformance Font.Context)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.Context, &type metadata for Font.Context);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Context and conformance Font.Context);
  }
  return result;
}

ValueMetadata *type metadata accessor for Font()
{
  return &type metadata for Font;
}

ValueMetadata *type metadata accessor for Font.ResolvedTraits()
{
  return &type metadata for Font.ResolvedTraits;
}

uint64_t type metadata accessor for AnyFontBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyFontBox()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for FontBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for FontBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FontBox);
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Font.Context(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.Context()
{
  return &type metadata for Font.Context;
}

unint64_t lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CUIDesignLibraryCacheKey.Props, &type metadata for CUIDesignLibraryCacheKey.Props);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CUIDesignLibraryCacheKey.Props, &type metadata for CUIDesignLibraryCacheKey.Props);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>, (uint64_t (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props, (uint64_t)&type metadata for CUIDesignLibraryCacheKey.Props);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>, (uint64_t (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Props and conformance CUIDesignLibraryCacheKey.Props, (uint64_t)&type metadata for CUIDesignLibraryCacheKey.Props);
    v6 = type metadata accessor for DerivedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentValues.EffectiveSymbolFontKey, &type metadata for EnvironmentValues.EffectiveSymbolFontKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey, (uint64_t)&type metadata for EnvironmentValues.EffectiveSymbolFontKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey, (uint64_t)&type metadata for EnvironmentValues.EffectiveSymbolFontKey);
    v6 = type metadata accessor for DerivedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>);
  }
}

uint64_t lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DerivedEnvironmentPropertyKey<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ShouldRedactContent;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>, (uint64_t)&type metadata for ShouldRedactSymbolImagesKey, (uint64_t)&protocol witness table for ShouldRedactSymbolImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
    v3 = v2;
    ShouldRedactContent = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>, (uint64_t)&type metadata for ShouldRedactSymbolImagesKey, (uint64_t)&protocol witness table for ShouldRedactSymbolImagesKey);
    v6 = type metadata accessor for DerivedValue(a1, v3, ShouldRedactContent, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>);
  }
}

uint64_t lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DerivedEnvironmentPropertyKey<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentValues.EffectiveFontKey, &type metadata for EnvironmentValues.EffectiveFontKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey, (uint64_t)&type metadata for EnvironmentValues.EffectiveFontKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveFontKey and conformance EnvironmentValues.EffectiveFontKey, (uint64_t)&type metadata for EnvironmentValues.EffectiveFontKey);
    v6 = type metadata accessor for DerivedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveFontKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentValues.FallbackFontKey, &type metadata for EnvironmentValues.FallbackFontKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey, (uint64_t)&type metadata for EnvironmentValues.FallbackFontKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey, (uint64_t)&type metadata for EnvironmentValues.FallbackFontKey);
    v6 = type metadata accessor for DerivedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextLayoutProperties.Key, &type metadata for TextLayoutProperties.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key, (uint64_t)&type metadata for TextLayoutProperties.Key);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<TextLayoutProperties.Key> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextLayoutProperties.Key and conformance TextLayoutProperties.Key, (uint64_t)&type metadata for TextLayoutProperties.Key);
    v6 = type metadata accessor for DerivedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<TextLayoutProperties.Key>>);
  }
}

uint64_t sub_234C68F4C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined retain of TextLayoutProperties(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for (CFStringRef, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CFStringRef, Any))
  {
    type metadata accessor for CFStringRef(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, Any));
  }
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ShouldRedactContent;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactContentKey>, (uint64_t)&type metadata for ShouldRedactContentKey, (uint64_t)&protocol witness table for ShouldRedactContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
    v3 = v2;
    ShouldRedactContent = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactContentKey>, (uint64_t)&type metadata for ShouldRedactContentKey, (uint64_t)&protocol witness table for ShouldRedactContentKey);
    v6 = type metadata accessor for DerivedValue(a1, v3, ShouldRedactContent, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>);
  }
}

void type metadata accessor for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(255, (unint64_t *)&lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Data, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Data);
    v5 = type metadata accessor for AtomicBuffer(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>);
  }
}

void type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for CTFontRef(255);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved();
    v9 = a3(a1, &type metadata for Font.Resolved, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for DerivedEnvironmentPropertyKey(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentValues.FontContextKey, &unk_250625290);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey, (uint64_t)&unk_250625290);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FontContextKey and conformance EnvironmentValues.FontContextKey, (uint64_t)&unk_250625290);
    v6 = type metadata accessor for DerivedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FontContextKey>>);
  }
}

uint64_t sub_234C69330()
{
  return swift_deallocObject();
}

void *type metadata accessor for EnvironmentValues.FontContextKey()
{
  return &unk_250625290;
}

uint64_t destroy for Font.Resolved()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Font.Resolved(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Font.Resolved(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t assignWithTake for Font.Resolved(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for Font.Resolved(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 42))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.Resolved(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 42) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.Resolved()
{
  return &type metadata for Font.Resolved;
}

uint64_t getEnumTagSinglePayload for Font.RatioKey(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 65291 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65291 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65291;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65291;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65291;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.RatioKey(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65291 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65291 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_234C69620 + 4 * byte_235290A5B[v4]))();
  *a1 = a2 - 245;
  return ((uint64_t (*)(void))((char *)sub_234C69654 + 4 * byte_235290A56[v4]))();
}

uint64_t sub_234C69654(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234C6965C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234C69664);
  return result;
}

uint64_t sub_234C69670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234C69678);
  *(_BYTE *)(result + 1) = a2 + 11;
  return result;
}

uint64_t sub_234C6967C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234C69684(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Font.RatioKey()
{
  return &type metadata for Font.RatioKey;
}

uint64_t AnyHashable2.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t result;

  type metadata accessor for _AnyHashableBox(0, a2, a3, a4);
  v7 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 128) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 144), a1);
  *a5 = v7;
  return result;
}

uint64_t type metadata accessor for _AnyHashableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyHashableBox);
}

uint64_t AnyHashable2.as<A>(type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t AnyHashable2.anyValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t AnyHashable2.anyHashable.getter()
{
  uint64_t v0;
  _QWORD *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v7[4];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 96))(v7);
  v1 = __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  v2 = MEMORY[0x24BDAC7A8](v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  AnyHashable.init<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t AnyHashable2.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t static AnyHashable2.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return 1;
  else
    return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))() & 1;
}

uint64_t AnyHashable2.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

Swift::Int AnyHashable2.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyHashable2()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyHashable2()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyHashable2()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 112))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyHashable2()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyHashable2(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return 1;
  else
    return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))() & 1;
}

uint64_t AnyHashable2._toCustomAnyHashable()()
{
  uint64_t v0;
  _QWORD *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v7[4];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 96))(v7);
  v1 = __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  v2 = MEMORY[0x24BDAC7A8](v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  swift_retain();
  AnyHashable.init<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2;
  if (!lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyHashable2, &type metadata for AnyHashable2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2);
  }
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AnyHashable2()
{
  uint64_t v0;
  _QWORD *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v7[4];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 96))(v7);
  v1 = __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  v2 = MEMORY[0x24BDAC7A8](v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  swift_retain();
  AnyHashable.init<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for AnyHashable2()
{
  return &type metadata for AnyHashable2;
}

uint64_t AnyHashableBox.as<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t AnyHashableBox.description.getter()
{
  return 0;
}

void AnyHashableBox.anyValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyHashableBox()
{
  return objc_opt_self();
}

uint64_t _AnyHashableBox.as<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 128);
  v7 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3 + *(_QWORD *)(v9 + 144), v6, v7);
  v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v11 ^ 1u, 1, a2);
}

uint64_t _AnyHashableBox.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1 + *(_QWORD *)(v5 + 144), v2, v3);
  return String.init<A>(describing:)();
}

uint64_t _AnyHashableBox.anyValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  v5 = *(_QWORD *)(*v1 + 128);
  a1[3] = v5;
  a1[4] = *(_QWORD *)(v3 + 136);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
}

uint64_t _AnyHashableBox.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t _AnyHashableBox.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t _GraphInputs.layoutAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _GraphInputs.layoutAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  v6 = v5;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t key path setter for _GraphInputs.layoutAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.layoutAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.layoutAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.layoutAccessibilityProvider.modify;
}

void _GraphInputs.layoutAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[5];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.LayoutAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t _ViewInputs.layoutAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _ViewInputs.layoutAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t _ViewInputs.layoutAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.layoutAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.layoutAccessibilityProvider.modify;
}

uint64_t dispatch thunk of static LayoutAccessibilityProvider.makeAccessibility(inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for EmptyLayoutAccessibilityProvider()
{
  return &type metadata for EmptyLayoutAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.LayoutAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.LayoutAccessibilityProviderKey;
}

uint64_t _ProposedSize.init(width:height:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = a2 & 1;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4 & 1;
  return result;
}

void _ProposedSize.inset(by:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  double v6;
  char v7;
  char v8;
  double v9;
  double v10;
  double v11;

  v6 = *(double *)v5;
  v7 = *(_BYTE *)(v5 + 8);
  v8 = *(_BYTE *)(v5 + 24);
  if ((v7 & 1) == 0)
  {
    v9 = v6 - (a3 + a5);
    if (v9 < 0.0)
      v6 = 0.0;
    else
      v6 = v9;
  }
  v10 = *(double *)(v5 + 16);
  if ((*(_BYTE *)(v5 + 24) & 1) == 0)
  {
    v11 = v10 - (a2 + a4);
    v10 = 0.0;
    if (v11 >= 0.0)
      v10 = v11;
  }
  *(double *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  *(double *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v8;
}

void _ProposedSize.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

CGSize __swiftcall _ProposedSize.fixingUnspecifiedDimensions()()
{
  uint64_t v0;
  double v1;
  double v2;
  CGSize result;

  v1 = *(double *)v0;
  v2 = *(double *)(v0 + 16);
  if (*(_BYTE *)(v0 + 8))
    v1 = 10.0;
  if (*(_BYTE *)(v0 + 24))
    v2 = 10.0;
  result.height = v2;
  result.width = v1;
  return result;
}

void _ProposedSize.init(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t _ProposedSize.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _ProposedSize.width.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*_ProposedSize.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ProposedSize.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _ProposedSize.height.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*_ProposedSize.height.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

CGSize __swiftcall _ProposedSize.fixingUnspecifiedDimensions(at:)(CGSize at)
{
  uint64_t v1;

  if (!*(_BYTE *)(v1 + 8))
    at.width = *(CGFloat *)v1;
  if (!*(_BYTE *)(v1 + 24))
    at.height = *(CGFloat *)(v1 + 16);
  return at;
}

void _ProposedSize.scaled(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  double v3;
  char v4;
  double v5;
  int v6;
  double v7;
  double v8;

  v3 = *(double *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  v5 = *(double *)(v2 + 16);
  v6 = *(unsigned __int8 *)(v2 + 24);
  if (!v4)
    v3 = *(double *)v2 * a2;
  v7 = v5 * a2;
  *(double *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  if (v6)
    v8 = v5;
  else
    v8 = v7;
  *(double *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v6;
}

void one-time initialization function for zero()
{
  static _ProposedSize.zero = 0;
  byte_2561B2CA0 = 0;
  qword_2561B2CA8 = 0;
  byte_2561B2CB0 = 0;
}

{
  static ProposedViewSize.zero = 0;
  byte_2561B6188 = 0;
  qword_2561B6190 = 0;
  byte_2561B6198 = 0;
}

{
  static UnitPoint.zero = 0;
  unk_2561AAD30 = 0;
}

uint64_t static _ProposedSize.zero.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  if (one-time initialization token for zero != -1)
    result = swift_once();
  v2 = byte_2561B2CA0;
  v3 = qword_2561B2CA8;
  v4 = byte_2561B2CB0;
  *(_QWORD *)a1 = static _ProposedSize.zero;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return result;
}

void one-time initialization function for infinity()
{
  static _ProposedSize.infinity = 0x7FF0000000000000;
  byte_2561B2CC0 = 0;
  qword_2561B2CC8 = 0x7FF0000000000000;
  byte_2561B2CD0 = 0;
}

{
  static ProposedViewSize.infinity = 0x7FF0000000000000;
  byte_2561A79A8 = 0;
  qword_2561A79B0 = 0x7FF0000000000000;
  byte_2561A79B8 = 0;
}

{
  static Time.infinity = 0x7FF0000000000000;
}

uint64_t static _ProposedSize.infinity.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  if (one-time initialization token for infinity != -1)
    result = swift_once();
  v2 = byte_2561B2CC0;
  v3 = qword_2561B2CC8;
  v4 = byte_2561B2CD0;
  *(_QWORD *)a1 = static _ProposedSize.infinity;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return result;
}

void static _ProposedSize.unspecified.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

void _ProposedSize.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  if (*(_BYTE *)(v0 + 8) != 1)
  {
    v4 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = v4;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
    if (!v2)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (v2)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

Swift::Int _ProposedSize.hashValue.getter()
{
  Hasher.init(_seed:)();
  _ProposedSize.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ProposedSize()
{
  Hasher.init(_seed:)();
  _ProposedSize.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ProposedSize()
{
  Hasher.init(_seed:)();
  _ProposedSize.hash(into:)();
  return Hasher._finalize()();
}

uint64_t CGSize.init(_:)(_BYTE *a1)
{
  if ((a1[8] & 1) != 0)
    return 0;
  if ((a1[24] & 1) != 0)
    return 0;
  return *(_QWORD *)a1;
}

uint64_t _ProposedSize.subscript.getter(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + 16;
  if ((a1 & 1) == 0)
    v2 = v1;
  return *(_QWORD *)v2;
}

uint64_t _ProposedSize.subscript.setter(uint64_t result, char a2, char a3)
{
  _QWORD *v3;
  _BYTE *v4;

  if ((a3 & 1) != 0)
  {
    v3[2] = result;
    v4 = v3 + 3;
  }
  else
  {
    *v3 = result;
    v4 = v3 + 1;
  }
  *v4 = a2 & 1;
  return result;
}

uint64_t (*_ProposedSize.subscript.modify(uint64_t a1, char a2))(uint64_t result)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 9) = a2;
  v3 = (char *)(v2 + 8);
  v4 = (uint64_t *)(v2 + 16);
  if ((a2 & 1) == 0)
    v4 = (uint64_t *)v2;
  v5 = *v4;
  if ((a2 & 1) != 0)
    v3 = (char *)(v2 + 24);
  v6 = *v3;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return _ProposedSize.subscript.modify;
}

uint64_t _ProposedSize.subscript.modify(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  v3 = *(_BYTE *)(result + 9) & 1;
  v4 = 16 * v3;
  v5 = (_DWORD)v3 == 0;
  v6 = 24;
  if (v5)
    v6 = 8;
  *(_QWORD *)(v1 + v4) = *(_QWORD *)result;
  *(_BYTE *)(v1 + v6) = v2;
  return result;
}

uint64_t _ProposedSize.init(_:in:by:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  if ((a3 & 1) != 0)
    v6 = a4;
  else
    v6 = result;
  if ((a3 & 1) != 0)
    v7 = a5;
  else
    v7 = a2;
  if ((a3 & 1) != 0)
    v8 = result;
  else
    v8 = a4;
  if ((a3 & 1) != 0)
    v9 = a2;
  else
    v9 = a5;
  *(_QWORD *)a6 = v6;
  *(_BYTE *)(a6 + 8) = v7 & 1;
  *(_QWORD *)(a6 + 16) = v8;
  *(_BYTE *)(a6 + 24) = v9 & 1;
  return result;
}

BOOL specialized static _ProposedSize.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v3 = 1;
    return (v3 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 24) & 1) != 0;
}

uint64_t sub_234C6ABF4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  v3 = (char *)(result + 8);
  v4 = (uint64_t *)(result + 16);
  if (!*a2)
    v4 = (uint64_t *)result;
  v5 = *v4;
  if (*a2)
    v3 = (char *)(result + 24);
  v6 = *v3;
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t *sub_234C6AC24(uint64_t *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  char v4;

  v3 = *result;
  v4 = *((_BYTE *)result + 8);
  if ((*a3 & 1) != 0)
  {
    *(_QWORD *)(a2 + 16) = v3;
    *(_BYTE *)(a2 + 24) = v4;
  }
  else
  {
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = v4;
  }
  return result;
}

uint64_t sub_234C6AC4C()
{
  return 0;
}

ValueMetadata *type metadata accessor for _ProposedSize()
{
  return &type metadata for _ProposedSize;
}

uint64_t assignWithCopy for Text.Effect.StopCollector(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return assignWithCopy for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>));
}

void type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Set<Text.Effect.ClusterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex, (uint64_t)&type metadata for Text.Effect.ClusterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE16D8]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>));
  }
}

uint64_t assignWithTake for Text.Effect.StopCollector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>));
}

ValueMetadata *type metadata accessor for Text.Effect.StopCollector()
{
  return &type metadata for Text.Effect.StopCollector;
}

ValueMetadata *type metadata accessor for Text.Effect.StopCollector.Segment()
{
  return &type metadata for Text.Effect.StopCollector.Segment;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.StopKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234C6AD90 + 4 * byte_235290F35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234C6ADC4 + 4 * asc_235290F30[v4]))();
}

uint64_t sub_234C6ADC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C6ADCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C6ADD4);
  return result;
}

uint64_t sub_234C6ADE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C6ADE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234C6ADEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C6ADF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.StopKey()
{
  return &type metadata for Text.Effect.StopKey;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.StopKey and conformance Text.Effect.StopKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopKey and conformance Text.Effect.StopKey;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopKey and conformance Text.Effect.StopKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopKey, &type metadata for Text.Effect.StopKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopKey and conformance Text.Effect.StopKey);
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.StopCollector.Segment>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopCollector.Segment, &type metadata for Text.Effect.StopCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopCollector.Segment, &type metadata for Text.Effect.StopCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopCollector.Segment, &type metadata for Text.Effect.StopCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopCollector.Segment, &type metadata for Text.Effect.StopCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.StopCollector.Segment@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.StopCollector.Segment(a1, a2, a3, specialized RandomAccessCollection.index(_:offsetBy:limitedBy:), a4);
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment(void (**a1)(void **a1), unint64_t *a2))(void **a1)
{
  uint64_t v2;
  void (*result)(void **);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  result = (void (*)(void **))malloc(0x60uLL);
  *a1 = result;
  v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v7 = *(_QWORD *)v2 + 96 * v6;
    v8 = *(_QWORD *)(v7 + 96);
    v9 = *(_BYTE *)(v7 + 104);
    v10 = *(_OWORD *)(v7 + 48);
    v11 = *(_OWORD *)(v7 + 64);
    v12 = *(_OWORD *)(v7 + 80);
    v13 = *(_OWORD *)(v7 + 112);
    *(_OWORD *)result = *(_OWORD *)(v7 + 32);
    *((_OWORD *)result + 1) = v10;
    *((_OWORD *)result + 2) = v11;
    *((_OWORD *)result + 3) = v12;
    *((_QWORD *)result + 8) = v8;
    *((_BYTE *)result + 72) = v9;
    *((_OWORD *)result + 5) = v13;
    return protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment(void **a1)
{
  free(*a1);
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.StopCollector.Segment()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.StopCollector.Segment(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopCollector.Segment> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.StopCollector.Segment>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.StopCollector.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall Text.Effect.StopCollector.flushSegment()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  _QWORD *v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;

  v1 = v0;
  v2 = v0[1];
  if (!v2)
  {
LABEL_41:
    *v1 = 0;
    v1[1] = 0;
    v1[2] = 0;
    return;
  }
  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v3, v2);
  v5 = specialized Text.Effect.StopSegment.init(segment:)(v2);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v44 = v3;
    v45 = v2;
LABEL_40:
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v44, v45);
    goto LABEL_41;
  }
  v7 = v5;
  v8 = v6;
  v9 = (_QWORD *)v1[3];
  v10 = v9[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_46:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 + 1, 1, v9);
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
  v9[2] = v12 + 1;
  v13 = &v9[2 * v12];
  v13[4] = v7;
  v13[5] = v8;
  swift_bridgeObjectRelease();
  v14 = 0;
  v1[3] = (uint64_t)v9;
  v46 = v4 + 56;
  v15 = 1 << *(_BYTE *)(v4 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v4 + 56);
  v47 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_44;
      if (v20 >= v47)
      {
LABEL_38:
        swift_release();
        v44 = *v1;
        v45 = v1[1];
        goto LABEL_40;
      }
      v21 = *(_QWORD *)(v46 + 8 * v20);
      ++v14;
      if (!v21)
      {
        v14 = v20 + 1;
        if (v20 + 1 >= v47)
          goto LABEL_38;
        v21 = *(_QWORD *)(v46 + 8 * v14);
        if (!v21)
        {
          v14 = v20 + 2;
          if (v20 + 2 >= v47)
            goto LABEL_38;
          v21 = *(_QWORD *)(v46 + 8 * v14);
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v47)
              goto LABEL_38;
            v21 = *(_QWORD *)(v46 + 8 * v22);
            if (!v21)
            {
              while (1)
              {
                v14 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v14 >= v47)
                  goto LABEL_38;
                v21 = *(_QWORD *)(v46 + 8 * v14);
                ++v22;
                if (v21)
                  goto LABEL_26;
              }
            }
            v14 = v22;
          }
        }
      }
LABEL_26:
      v17 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v14 << 6);
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = (_QWORD *)v1[4];
    v1[4] = 0x8000000000000000;
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26, v27, v28);
    v30 = v24[2];
    v31 = (v29 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v9 = v29;
    if (v24[3] < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v39 = v24;
      if ((v29 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v39 = v24;
      if ((v9 & 1) != 0)
      {
LABEL_9:
        *(_QWORD *)(v39[7] + 8 * v7) = v10;
        goto LABEL_10;
      }
    }
LABEL_34:
    v39[(v7 >> 6) + 8] |= 1 << v7;
    v40 = 8 * v7;
    *(_QWORD *)(v39[6] + v40) = v8;
    *(_QWORD *)(v39[7] + v40) = v10;
    v41 = v39[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_43;
    v39[2] = v43;
LABEL_10:
    v1[4] = (uint64_t)v39;
    swift_bridgeObjectRelease();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, isUniquelyReferenced_nonNull_native);
  v37 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34, v35, v36);
  if ((v9 & 1) == (v38 & 1))
  {
    v7 = v37;
    v39 = v24;
    if ((v9 & 1) != 0)
      goto LABEL_9;
    goto LABEL_34;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

_OWORD *protocol witness for Collection.subscript.read in conformance Text.Effect.StopMarkerCollector.Segment(_OWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    *result = *(_OWORD *)(*(_QWORD *)v2 + 16 * v3 + 32);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.StopCollector.Segment@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  char v8;

  result = a4(*a1, a2, *a3, *v5);
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v8 & 1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.StopMarkerCollector.Segment()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.StopMarkerCollector.Segment(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

Swift::Void __swiftcall Text.Effect.StopMarkerCollector.flushSegment()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = v0[1];
  if (!v2)
    goto LABEL_30;
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = v1[2];
  swift_bridgeObjectRetain();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v3, v2);
  v5 = specialized Text.Effect.StopMarkerCollection.Segment.init(_:)(v2);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v3;
    v36 = v2;
    goto LABEL_29;
  }
  v6 = v5;
  v7 = (_QWORD *)v1[3];
  v8 = v7[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_36;
  while (1)
  {
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7[2] = v10 + 1;
    v7[v10 + 4] = v6;
    swift_bridgeObjectRelease();
    v1[3] = (uint64_t)v7;
    v39 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
    if (!v39)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      v35 = *v1;
      v36 = v1[1];
LABEL_29:
      outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v35, v36);
LABEL_30:
      *v1 = 0;
      v1[1] = 0;
      v1[2] = 0;
      return;
    }
    v11 = 0;
    v37 = isUniquelyReferenced_nonNull_native;
    v38 = isUniquelyReferenced_nonNull_native + 32;
    while (1)
    {
      if (v11 >= *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16))
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v12 = (_QWORD *)(v38 + 16 * v11);
      v6 = (_QWORD *)*v12;
      v13 = (_QWORD *)v12[1];
      if ((_QWORD *)*v12 != v13)
        break;
LABEL_8:
      ++v11;
      isUniquelyReferenced_nonNull_native = v37;
      if (v11 == v39)
        goto LABEL_27;
    }
    if ((uint64_t)v13 >= (uint64_t)v6)
      break;
LABEL_35:
    __break(1u);
LABEL_36:
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 + 1, 1, v7);
  }
  while (1)
  {
    if ((uint64_t)v6 >= (uint64_t)v13)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = (_QWORD *)v1[4];
    v1[4] = 0x8000000000000000;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16, v17, v18);
    v21 = v14[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      goto LABEL_32;
    v7 = v19;
    if (v14[3] < v23)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v30 = v14;
      if ((v19 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v30 = v14;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        *(_QWORD *)(v30[7] + 8 * v20) = v8;
        goto LABEL_14;
      }
    }
LABEL_23:
    v30[(v20 >> 6) + 8] |= 1 << v20;
    v31 = 8 * v20;
    *(_QWORD *)(v30[6] + v31) = v6;
    *(_QWORD *)(v30[7] + v31) = v8;
    v32 = v30[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_33;
    v30[2] = v34;
LABEL_14:
    v6 = (_QWORD *)((char *)v6 + 1);
    v1[4] = (uint64_t)v30;
    swift_bridgeObjectRelease();
    if (v13 == v6)
      goto LABEL_8;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25, v26, v27);
  if ((v7 & 1) == (v29 & 1))
  {
    v20 = v28;
    v30 = v14;
    if ((v7 & 1) != 0)
      goto LABEL_13;
    goto LABEL_23;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  __int128 *v20;
  Swift::Int v21;
  Swift::Int v22;
  __int128 *v23;
  __int128 v24;
  Swift::Int v25;
  uint64_t v26;
  double v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = -1;
      v84 = 1;
      v85 = *a1;
      do
      {
        v86 = *(double *)(v82 + 16 * v84);
        v87 = v83;
        v88 = v85;
        do
        {
          if (v86 >= *(double *)v88)
            break;
          if (!v82)
            goto LABEL_141;
          v89 = *(_QWORD *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)v88 = v86;
          *(_QWORD *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v99 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v91 = v12;
      v102 = v9;
      if (v13 >= 2)
      {
        v92 = *v99;
        do
        {
          v93 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v92)
            goto LABEL_145;
          v94 = v91;
          v95 = *(_QWORD *)&v91[16 * v93 + 32];
          v96 = *(_QWORD *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(_QWORD *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          if (v93 >= *((_QWORD *)v94 + 2))
            goto LABEL_134;
          v97 = &v94[16 * v93 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v94 + 2);
          if (v13 > v98)
            goto LABEL_135;
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          v91 = v94;
          *((_QWORD *)v94 + 2) = v98 - 1;
          v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v100 = *a1 - 16;
  v101 = *a1 + 32;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v103 = v6;
  v104 = v3;
  v105 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10);
      v16 = *(double *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = (__int128 *)(v100 + 16 * v10);
          v21 = v10;
          v22 = v14;
          v23 = (__int128 *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11)
                goto LABEL_144;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v25 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v14)
      break;
    if (v10 != v25)
    {
      v26 = v100 + 16 * v10;
      do
      {
        v27 = *(double *)(v11 + 16 * v10);
        v28 = v14;
        v29 = v26;
        do
        {
          if (v27 >= *(double *)v29)
            break;
          if (!v11)
            goto LABEL_142;
          v30 = *(_QWORD *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)v29 = v27;
          *(_QWORD *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      v10 = v25;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v32 = *((_QWORD *)v12 + 2);
    v31 = *((_QWORD *)v12 + 3);
    v13 = v32 + 1;
    v11 = v105;
    if (v32 >= v31 >> 1)
    {
      v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      v11 = v105;
      v12 = v81;
    }
    *((_QWORD *)v12 + 2) = v13;
    v33 = v12 + 32;
    v34 = &v12[16 * v32 + 32];
    *(_QWORD *)v34 = v14;
    *((_QWORD *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        v35 = v13 - 1;
        if (v13 >= 4)
        {
          v40 = &v33[16 * v13];
          v41 = *((_QWORD *)v40 - 8);
          v42 = *((_QWORD *)v40 - 7);
          v46 = __OFSUB__(v42, v41);
          v43 = v42 - v41;
          if (v46)
            goto LABEL_120;
          v45 = *((_QWORD *)v40 - 6);
          v44 = *((_QWORD *)v40 - 5);
          v46 = __OFSUB__(v44, v45);
          v38 = v44 - v45;
          v39 = v46;
          if (v46)
            goto LABEL_121;
          v47 = v13 - 2;
          v48 = &v33[16 * v13 - 32];
          v50 = *(_QWORD *)v48;
          v49 = *((_QWORD *)v48 + 1);
          v46 = __OFSUB__(v49, v50);
          v51 = v49 - v50;
          if (v46)
            goto LABEL_123;
          v46 = __OFADD__(v38, v51);
          v52 = v38 + v51;
          if (v46)
            goto LABEL_126;
          if (v52 >= v43)
          {
            v70 = &v33[16 * v35];
            v72 = *(_QWORD *)v70;
            v71 = *((_QWORD *)v70 + 1);
            v46 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v46)
              goto LABEL_130;
            v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v64 = *((_QWORD *)v12 + 4);
            v65 = *((_QWORD *)v12 + 5);
            v46 = __OFSUB__(v65, v64);
            v57 = v65 - v64;
            v58 = v46;
            goto LABEL_77;
          }
          v37 = *((_QWORD *)v12 + 4);
          v36 = *((_QWORD *)v12 + 5);
          v46 = __OFSUB__(v36, v37);
          v38 = v36 - v37;
          v39 = v46;
        }
        if ((v39 & 1) != 0)
          goto LABEL_122;
        v47 = v13 - 2;
        v53 = &v33[16 * v13 - 32];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        v56 = __OFSUB__(v54, v55);
        v57 = v54 - v55;
        v58 = v56;
        if (v56)
          goto LABEL_125;
        v59 = &v33[16 * v35];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v46 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v46)
          goto LABEL_128;
        if (__OFADD__(v57, v62))
          goto LABEL_129;
        if (v57 + v62 >= v38)
        {
          v63 = v38 < v62;
LABEL_83:
          if (v63)
            v35 = v47;
          goto LABEL_85;
        }
LABEL_77:
        if ((v58 & 1) != 0)
          goto LABEL_124;
        v66 = &v33[16 * v35];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v46 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v46)
          goto LABEL_127;
        if (v69 < v57)
          goto LABEL_15;
LABEL_85:
        v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v75 = v12;
        v76 = &v33[16 * v74];
        v77 = *(_QWORD *)v76;
        v78 = &v33[16 * v35];
        v79 = *((_QWORD *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(_QWORD *)v76), (double *)(v11 + 16 * *(_QWORD *)v78), v11 + 16 * v79, __dst);
        if (v1)
          goto LABEL_93;
        if (v79 < v77)
          goto LABEL_117;
        if (v35 > *((_QWORD *)v75 + 2))
          goto LABEL_118;
        *(_QWORD *)v76 = v77;
        *(_QWORD *)&v33[16 * v74 + 8] = v79;
        v80 = *((_QWORD *)v75 + 2);
        if (v35 >= v80)
          goto LABEL_119;
        v12 = v75;
        v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((_QWORD *)v75 + 2) = v80 - 1;
        v11 = v105;
        if (v80 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  Swift::Int v30;
  __int128 *v31;
  uint64_t v32;
  Swift::Int v33;
  __int128 *v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v87 = 0;
      v88 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v90 = *(_QWORD *)(v88 + 24 * i + 16);
        v91 = v87;
        do
        {
          v92 = v88 + v91;
          if (v90 >= *(_QWORD *)(v88 + v91 + 16))
            break;
          if (!v88)
            goto LABEL_140;
          v93 = *(_OWORD *)(v92 + 24);
          *(_OWORD *)(v92 + 24) = *(_OWORD *)v92;
          *(_QWORD *)(v92 + 40) = *(_QWORD *)(v92 + 16);
          *(_OWORD *)v92 = v93;
          *(_QWORD *)(v92 + 16) = v90;
          v91 -= 24;
        }
        while (v91 != -24);
        v87 += 24;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v94 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v13 - 2;
          if (v13 < 2)
            goto LABEL_131;
          if (!v95)
            goto LABEL_144;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 24 * v98), (char *)(v95 + 24 * *(_QWORD *)&v94[16 * v13 + 16]), v95 + 24 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_133;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v13 > v101)
            goto LABEL_134;
          memmove(&v97[16 * v13 + 16], &v97[16 * v13 + 32], 16 * (v101 - v13));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v13 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for (ScrapeableContent, Int)();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v103 = *a1 + 64;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 24 * v10 + 16);
      v16 = *(_QWORD *)(v11 + 24 * v14 + 16);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (uint64_t *)(v103 + 24 * v14);
        v18 = v15;
        while (1)
        {
          v20 = *v17;
          v17 += 3;
          v19 = v20;
          if (v15 < v16 == v20 >= v18)
            break;
          ++v10;
          v18 = v19;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_137;
        if (v14 < v10)
        {
          v21 = 24 * v10;
          v22 = 24 * v14;
          v23 = v10;
          v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11)
                goto LABEL_143;
              v25 = v11 + v22;
              v26 = v11 + v21;
              v27 = *(_QWORD *)(v11 + v22 + 16);
              v28 = *(_OWORD *)(v11 + v22);
              v29 = *(_QWORD *)(v11 + v21 - 8);
              *(_OWORD *)v25 = *(_OWORD *)(v11 + v21 - 24);
              *(_QWORD *)(v25 + 16) = v29;
              *(_OWORD *)(v26 - 24) = v28;
              *(_QWORD *)(v26 - 8) = v27;
            }
            ++v24;
            v21 -= 24;
            v22 += 24;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_135;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v30 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_138;
    if (v30 >= v3)
      v30 = v3;
    if (v30 < v14)
      break;
    if (v10 != v30)
    {
      v31 = (__int128 *)(v11 + 24 * v10);
      do
      {
        v32 = *(_QWORD *)(v11 + 24 * v10 + 16);
        v33 = v14;
        v34 = v31;
        do
        {
          if (v32 >= *((_QWORD *)v34 - 1))
            break;
          if (!v11)
            goto LABEL_141;
          v35 = *v34;
          *v34 = *(__int128 *)((char *)v34 - 24);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v34 - 1);
          *((_QWORD *)v34 - 1) = v32;
          *(__int128 *)((char *)v34 - 24) = v35;
          v34 = (__int128 *)((char *)v34 - 24);
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 = (__int128 *)((char *)v31 + 24);
      }
      while (v10 != v30);
      v10 = v30;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v37 = *((_QWORD *)v12 + 2);
    v36 = *((_QWORD *)v12 + 3);
    v13 = v37 + 1;
    v11 = v107;
    if (v37 >= v36 >> 1)
    {
      v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v12);
      v11 = v107;
      v12 = v86;
    }
    *((_QWORD *)v12 + 2) = v13;
    v38 = v12 + 32;
    v39 = &v12[16 * v37 + 32];
    *(_QWORD *)v39 = v14;
    *((_QWORD *)v39 + 1) = v10;
    if (v37)
    {
      while (1)
      {
        v40 = v13 - 1;
        if (v13 >= 4)
        {
          v45 = &v38[16 * v13];
          v46 = *((_QWORD *)v45 - 8);
          v47 = *((_QWORD *)v45 - 7);
          v51 = __OFSUB__(v47, v46);
          v48 = v47 - v46;
          if (v51)
            goto LABEL_119;
          v50 = *((_QWORD *)v45 - 6);
          v49 = *((_QWORD *)v45 - 5);
          v51 = __OFSUB__(v49, v50);
          v43 = v49 - v50;
          v44 = v51;
          if (v51)
            goto LABEL_120;
          v52 = v13 - 2;
          v53 = &v38[16 * v13 - 32];
          v55 = *(_QWORD *)v53;
          v54 = *((_QWORD *)v53 + 1);
          v51 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          if (v51)
            goto LABEL_122;
          v51 = __OFADD__(v43, v56);
          v57 = v43 + v56;
          if (v51)
            goto LABEL_125;
          if (v57 >= v48)
          {
            v75 = &v38[16 * v40];
            v77 = *(_QWORD *)v75;
            v76 = *((_QWORD *)v75 + 1);
            v51 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v51)
              goto LABEL_129;
            v68 = v43 < v78;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v69 = *((_QWORD *)v12 + 4);
            v70 = *((_QWORD *)v12 + 5);
            v51 = __OFSUB__(v70, v69);
            v62 = v70 - v69;
            v63 = v51;
            goto LABEL_77;
          }
          v42 = *((_QWORD *)v12 + 4);
          v41 = *((_QWORD *)v12 + 5);
          v51 = __OFSUB__(v41, v42);
          v43 = v41 - v42;
          v44 = v51;
        }
        if ((v44 & 1) != 0)
          goto LABEL_121;
        v52 = v13 - 2;
        v58 = &v38[16 * v13 - 32];
        v60 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        v61 = __OFSUB__(v59, v60);
        v62 = v59 - v60;
        v63 = v61;
        if (v61)
          goto LABEL_124;
        v64 = &v38[16 * v40];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v51 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v51)
          goto LABEL_127;
        if (__OFADD__(v62, v67))
          goto LABEL_128;
        if (v62 + v67 >= v43)
        {
          v68 = v43 < v67;
LABEL_83:
          if (v68)
            v40 = v52;
          goto LABEL_85;
        }
LABEL_77:
        if ((v63 & 1) != 0)
          goto LABEL_123;
        v71 = &v38[16 * v40];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v51 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v51)
          goto LABEL_126;
        if (v74 < v62)
          goto LABEL_15;
LABEL_85:
        v79 = v40 - 1;
        if (v40 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11)
          goto LABEL_142;
        v80 = v12;
        v81 = &v38[16 * v79];
        v82 = *(_QWORD *)v81;
        v83 = &v38[16 * v40];
        v84 = *((_QWORD *)v83 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 24 * *(_QWORD *)v81), (char *)(v11 + 24 * *(_QWORD *)v83), v11 + 24 * v84, __dst);
        if (v1)
          goto LABEL_93;
        if (v84 < v82)
          goto LABEL_116;
        if (v40 > *((_QWORD *)v80 + 2))
          goto LABEL_117;
        *(_QWORD *)v81 = v82;
        *(_QWORD *)&v38[16 * v79 + 8] = v84;
        v85 = *((_QWORD *)v80 + 2);
        if (v40 >= v85)
          goto LABEL_118;
        v12 = v80;
        v13 = v85 - 1;
        memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
        *((_QWORD *)v80 + 2) = v85 - 1;
        v11 = v107;
        if (v85 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  char v26;
  Swift::Int v27;
  uint64_t *v28;
  uint64_t *v29;
  Swift::Int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(char *)(v89 + 8);
          if (v90 >= *(char *)(v89 - 8))
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(_BYTE *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(char *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(char *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (char *)(v102 + 16 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 16))
        {
          v18 += 16;
          if (v3 == ++v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_BYTE *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_BYTE *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (uint64_t *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = *((char *)v29 + 8);
          if (v31 >= *((char *)v29 - 8))
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v32;
          *((_BYTE *)v29 - 8) = v31;
          ++v30;
          v29 -= 2;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(_QWORD *)v78), (char *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[2 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (double *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 2;
          v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) >= v20)
          {
            v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 2;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 2;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 2;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t result;
  char *v21;
  double *v22;
  double *v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 96;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 96;
  v23 = __dst;
  v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -95)
    {
      if (a4 != __src || &__src[12 * v11] <= a4)
        memmove(a4, __src, 96 * v11);
      v16 = &v4[12 * v11];
      v21 = (char *)v16;
      v23 = v6;
      if (v7 < v6 && v10 >= 96)
      {
        v17 = (double *)(a3 - 96);
        do
        {
          v18 = v17 + 12;
          if (*(v16 - 2) >= *(v6 - 2))
          {
            v21 = (char *)(v16 - 12);
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 12, 0x60uLL);
            v19 = v6;
            v16 -= 12;
            if (v6 <= v7)
              break;
          }
          else
          {
            v19 = v6 - 12;
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 12, 0x60uLL);
            v23 = v6 - 12;
            if (v19 <= v7)
              break;
          }
          v17 -= 12;
          v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -95)
  {
    if (a4 != __dst || &__dst[12 * v9] <= a4)
      memmove(a4, __dst, 96 * v9);
    v12 = &v4[12 * v9];
    v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 96)
    {
      v13 = v4;
      while (1)
      {
        if (v6[10] >= v13[10])
        {
          v4 = v13 + 12;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 12;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 12;
          }
        }
        else
        {
          v14 = v6 + 12;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        memmove(v7, v15, 0x60uLL);
LABEL_18:
        v7 += 12;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v22 = v4;
        v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double specialized init(base:glyphRanges:) in Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  double TypographicBounds;
  double v13;
  double v14;
  double v15;
  double v16;
  double MinX;
  double MaxX;
  void *v19;
  CFIndex v20;
  uint64_t v21;
  double v22;
  double v23;
  CFIndex v24;
  const __CTLine *v25;
  const __CTRun *v26;
  BOOL v27;
  CFIndex v28;
  const __CTRun *v29;
  CGFloat v30;
  CGFloat v31;
  CGPoint originsBuffer;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint buffer;
  uint64_t v39;
  CFRange v40;
  CFRange v41;
  CFRange v42;
  CGRect v43;
  CGRect v44;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
LABEL_15:
    __break(1u);
  swift_bridgeObjectRetain();
  v6 = a3 + 48;
  v7 = INFINITY;
  v8 = -INFINITY;
  do
  {
    v19 = *(void **)(v6 - 16);
    v20 = *(_QWORD *)(v6 + 32);
    v21 = *(_QWORD *)(v6 + 40);
    if (v20 == v21)
    {
      swift_retain();
      v9 = v19;
      v10 = 0.0;
      v11 = 0.0;
      TypographicBounds = 0.0;
      v13 = 0.0;
      v14 = 0.0;
      goto LABEL_4;
    }
    v22 = *(double *)v6;
    v23 = *(double *)(v6 + 8);
    v24 = *(_QWORD *)(v6 - 8);
    swift_retain_n();
    v25 = v19;
    v26 = (id)_CTLineGetRunAtIndex(v25, v24);
    v27 = __OFSUB__(v21, v20);
    v28 = v21 - v20;
    if (v27)
    {
      __break(1u);
      goto LABEL_15;
    }
    v29 = v26;
    buffer.x = 0.0;
    buffer.y = 0.0;
    descent = 0.0;
    ascent = 0.0;
    originsBuffer.y = 0.0;
    leading = 0.0;
    originsBuffer.x = 0.0;
    v40.location = v20;
    v40.length = 1;
    CTRunGetPositions(v26, v40, &buffer);
    v41.location = v20;
    v41.length = 1;
    CTRunGetBaseAdvancesAndOrigins(v29, v41, 0, &originsBuffer);
    v30 = buffer.x - originsBuffer.x;
    v31 = buffer.y - originsBuffer.y;
    v42.location = v20;
    v42.length = v28;
    TypographicBounds = CTRunGetTypographicBounds(v29, v42, &ascent, &descent, &leading);
    swift_release();

    v14 = fabs(descent);
    v13 = ascent;
    v10 = v22 + v30;
    v11 = v23 - v31;
LABEL_4:
    v6 += 64;
    v15 = v11 - v13;
    v16 = v13 + v14;
    v43.origin.x = v10;
    v43.origin.y = v15;
    v43.size.width = TypographicBounds;
    v43.size.height = v16;
    MinX = CGRectGetMinX(v43);
    if (MinX < v7)
      v7 = MinX;
    v44.origin.x = v10;
    v44.origin.y = v15;
    v44.size.width = TypographicBounds;
    v44.size.height = v16;
    MaxX = CGRectGetMaxX(v44);
    swift_release();

    if (v8 <= MaxX)
      v8 = MaxX;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (v7 > v8)
    goto LABEL_15;
  Text.Layout.Cluster.stopKey.getter(a1, a2, a3);
  return v7;
}

_QWORD *specialized Text.Effect.StopMarkerCollection.Segment.init(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  _QWORD *v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 < 2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v2 = swift_bridgeObjectRetain();
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v21 = v3;
    specialized MutableCollection<>.sort(by:)(&v21, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_bridgeObjectRelease();
    v4 = v21;
    v5 = *(_QWORD *)(v21 + 16);
    if (v5)
    {
      swift_retain();
      v6 = 0;
      v7 = (double *)(v4 + 56);
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v10 = *(v7 - 3);
        v9 = *(v7 - 2);
        if (!v6)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          v12 = v8[2];
          v11 = v8[3];
          if (v12 >= v11 >> 1)
            v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v8);
          v8[2] = v12 + 1;
          *(double *)&v8[v12 + 4] = v10;
        }
        v13 = v6 + 1;
        if (v6 + 1 < v1)
        {
          v14 = *(v7 - 1);
          v15 = *v7;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          v17 = v8[2];
          v16 = v8[3];
          if (v17 >= v16 >> 1)
            v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v8);
          v8[2] = v17 + 1;
          *(double *)&v8[v17 + 4] = ((v10 + v9) * 0.5 + (v14 + v15) * 0.5) * 0.5;
        }
        if (v1 - 1 == v6)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          v19 = v8[2];
          v18 = v8[3];
          if (v19 >= v18 >> 1)
            v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v8);
          v8[2] = v19 + 1;
          *(double *)&v8[v19 + 4] = v9;
        }
        v7 += 2;
        v6 = v13;
      }
      while (v5 != v13);
      swift_release();
    }
    else
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_release();
  }
  return v8;
}

uint64_t specialized static Text.Effect.stopMarkers(_:)(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t result;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 96);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v5 = (uint64_t *)(v1 + 48);
    do
    {
      v6 = *(v5 - 2);
      v7 = *(v5 - 1);
      v8 = *v5;
      outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
      v9 = swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextV6LayoutVAFE7ClusterV_SnySiGs5NeverOTg503_s7d3UI4f57VAAE6EffectO12BaseFragmentV11glyphRanges3forSaySnySiGGAC6g5VAAE7H22V_tFAjM8RunSliceVXEfU_AhFE0M0O0oP0VTf1cn_nTf4xg_n(v9, a1);
      outlined release of Text.Effect.BaseFragment(a1);
      v10 = specialized init(base:glyphRanges:) in Cluster #1 in static Text.Effect.stopMarkers(_:)(v6, v7, v8);
      v12 = v11;
      v13 = v10;
      v15 = v14;
      v17 = v16;
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v3 + 16);
      v18 = *(_QWORD *)(v3 + 24);
      if (v19 >= v18 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      *(_QWORD *)(v3 + 16) = v19 + 1;
      v20 = v3 + 32 * v19;
      *(_QWORD *)(v20 + 32) = v12;
      *(double *)(v20 + 40) = v13;
      *(_QWORD *)(v20 + 48) = v15;
      *(_BYTE *)(v20 + 56) = v17;
      v5 += 3;
      --v2;
    }
    while (v2);
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v113 = 0;
  v114 = 0;
  v115 = v21;
  v116 = (_QWORD *)MEMORY[0x24BEE4B00];
  v107 = *(_QWORD *)(v3 + 16);
  if (!v107)
  {
LABEL_87:
    swift_bridgeObjectRelease();
    Text.Effect.StopMarkerCollector.flushSegment()();
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v113, v114);
    return (uint64_t)v115;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  while (1)
  {
    if (v26 >= *(_QWORD *)(v3 + 16))
      goto LABEL_97;
    v29 = v3 + 32 + 32 * v26;
    v30 = *(unsigned __int8 *)(v29 + 24);
    v112 = v23;
    if (v30 != 2)
      break;
    if (v22)
    {
      outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
      v31 = swift_bridgeObjectRetain();
      v32 = specialized Text.Effect.StopMarkerCollection.Segment.init(_:)(v31);
      if (v32)
      {
        v33 = v32;
        v34 = v115;
        v35 = v115[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35 + 1, 1, v115);
        v37 = v34[2];
        v36 = v34[3];
        if (v37 >= v36 >> 1)
          v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
        v34[2] = v37 + 1;
        v34[v37 + 4] = v33;
        swift_bridgeObjectRelease();
        v115 = v34;
        v110 = *(_QWORD *)(v23 + 16);
        if (v110)
        {
          v104 = v26;
          v38 = 0;
          v108 = v23 + 32;
          v39 = v116;
          while (1)
          {
            if (v38 >= *(_QWORD *)(v23 + 16))
              goto LABEL_94;
            v41 = (uint64_t *)(v108 + 16 * v38);
            v42 = *v41;
            v43 = v41[1];
            if (*v41 != v43)
              break;
            v40 = v39;
LABEL_25:
            ++v38;
            v39 = v40;
            v23 = v112;
            if (v38 == v110)
            {
              v116 = v40;
              swift_bridgeObjectRelease();
              v26 = v104;
              goto LABEL_76;
            }
          }
          v40 = v39;
          if (v43 < v42)
            goto LABEL_96;
          while (1)
          {
            if (v42 >= v43)
            {
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v50 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46, v47, v48);
            v51 = v39[2];
            v52 = (v49 & 1) == 0;
            v53 = v51 + v52;
            if (__OFADD__(v51, v52))
              goto LABEL_89;
            v54 = v49;
            if (v39[3] >= v53)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                if ((v49 & 1) != 0)
                  goto LABEL_30;
              }
              else
              {
                specialized _NativeDictionary.copy()();
                if ((v54 & 1) != 0)
                  goto LABEL_30;
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, isUniquelyReferenced_nonNull_native);
              v59 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v56, v57, v58);
              if ((v54 & 1) != (v60 & 1))
                goto LABEL_99;
              v50 = v59;
              if ((v54 & 1) != 0)
              {
LABEL_30:
                *(_QWORD *)(v39[7] + 8 * v50) = v35;
                goto LABEL_31;
              }
            }
            v39[(v50 >> 6) + 8] |= 1 << v50;
            v61 = 8 * v50;
            *(_QWORD *)(v39[6] + v61) = v42;
            *(_QWORD *)(v39[7] + v61) = v35;
            v62 = v39[2];
            v63 = __OFADD__(v62, 1);
            v64 = v62 + 1;
            if (v63)
              goto LABEL_92;
            v39[2] = v64;
LABEL_31:
            ++v42;
            swift_bridgeObjectRelease();
            if (v43 == v42)
              goto LABEL_25;
          }
        }
        swift_bridgeObjectRelease();
LABEL_76:
        v27 = v113;
        v28 = v114;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v24;
        v28 = (uint64_t)v22;
      }
      outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v27, v28);
    }
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v113 = 0;
    v114 = 0;
LABEL_13:
    if (++v26 == v107)
      goto LABEL_87;
  }
  v106 = *(_OWORD *)(v29 + 8);
  v65 = v30 & 1;
  if (!v22)
  {
    swift_bridgeObjectRetain_n();
LABEL_81:
    v23 = MEMORY[0x24BEE4AF8];
    v24 = v65;
    v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_82;
  }
  swift_bridgeObjectRetain_n();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (((((_DWORD)v65 == 0) ^ v25) & 1) != 0)
  {
LABEL_82:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v98 = v22;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    v100 = v98[2];
    v99 = v98[3];
    if (v100 >= v99 >> 1)
      v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v99 > 1), v100 + 1, 1, v98);
    v98[2] = v100 + 1;
    *(_OWORD *)&v98[2 * v100 + 4] = v106;
    v101 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v101);
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
    swift_bridgeObjectRelease_n();
    v113 = v24 & 1;
    v114 = (uint64_t)v98;
    v25 = v24 != 0;
    v22 = v98;
    v24 = v113;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
  v66 = specialized Text.Effect.StopMarkerCollection.Segment.init(_:)((uint64_t)v22);
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
    goto LABEL_81;
  }
  v67 = v66;
  v103 = v65;
  v68 = v115;
  v69 = v115[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69 + 1, 1, v115);
  v71 = v68[2];
  v70 = v68[3];
  if (v71 >= v70 >> 1)
    v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v70 > 1), v71 + 1, 1, v68);
  v68[2] = v71 + 1;
  v68[v71 + 4] = v67;
  swift_bridgeObjectRelease();
  v115 = v68;
  v111 = *(_QWORD *)(v23 + 16);
  if (!v111)
  {
    swift_bridgeObjectRelease();
LABEL_80:
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v113, v114);
    v65 = v103;
    goto LABEL_81;
  }
  v105 = v26;
  v72 = 0;
  v109 = v23 + 32;
  v73 = v116;
  while (1)
  {
    if (v72 >= *(_QWORD *)(v23 + 16))
      goto LABEL_95;
    v75 = (uint64_t *)(v109 + 16 * v72);
    v76 = *v75;
    v77 = v75[1];
    if (*v75 != v77)
      break;
    v74 = v73;
LABEL_54:
    ++v72;
    v73 = v74;
    v23 = v112;
    if (v72 == v111)
    {
      v116 = v74;
      swift_bridgeObjectRelease();
      v26 = v105;
      goto LABEL_80;
    }
  }
  v74 = v73;
  if (v77 < v76)
    goto LABEL_98;
  while (2)
  {
    if (v76 >= v77)
      goto LABEL_90;
    v78 = swift_isUniquelyReferenced_nonNull_native();
    v84 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80, v81, v82);
    v85 = v73[2];
    v86 = (v83 & 1) == 0;
    v87 = v85 + v86;
    if (!__OFADD__(v85, v86))
    {
      v88 = v83;
      if (v73[3] >= v87)
      {
        if ((v78 & 1) != 0)
        {
          if ((v83 & 1) == 0)
            goto LABEL_69;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v88 & 1) == 0)
            goto LABEL_69;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, v78);
        v93 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v90, v91, v92);
        if ((v88 & 1) != (v94 & 1))
          goto LABEL_99;
        v84 = v93;
        if ((v88 & 1) == 0)
        {
LABEL_69:
          v73[(v84 >> 6) + 8] |= 1 << v84;
          v95 = 8 * v84;
          *(_QWORD *)(v73[6] + v95) = v76;
          *(_QWORD *)(v73[7] + v95) = v69;
          v96 = v73[2];
          v63 = __OFADD__(v96, 1);
          v97 = v96 + 1;
          if (v63)
            goto LABEL_93;
          v73[2] = v97;
          goto LABEL_60;
        }
      }
      *(_QWORD *)(v73[7] + 8 * v84) = v69;
LABEL_60:
      ++v76;
      swift_bridgeObjectRelease();
      if (v77 == v76)
        goto LABEL_54;
      continue;
    }
    break;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.StopSegment.init(segment:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float64x2_t *v9;
  double v10;
  char v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  float64x2_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  double v34;
  float64x2_t *v35;
  double v36;
  double v37;
  char v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  double v50;
  double v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t *v60;
  float64x2_t v61;
  unint64_t v62;
  float64x2_t *v63;
  unint64_t v64;
  _QWORD *v65;
  double v66;
  double v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  int64_t v77;
  double v78;
  char v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  float64x2_t *v89;
  float64x2_t *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t result;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  _QWORD *v135;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 < 2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v2 = swift_bridgeObjectRetain();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  v135 = v3;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v135, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  v4 = (uint64_t)v135;
  v5 = v135[2];
  if (v5)
  {
    swift_retain();
    v6 = 0;
    v7 = 0;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v133 = *(float64x2_t *)(v4 + v6 + 32);
      v129 = *(float64x2_t *)(v4 + v6 + 64);
      v131 = *(float64x2_t *)(v4 + v6 + 48);
      v127 = *(float64x2_t *)(v4 + v6 + 80);
      v10 = *(double *)(v4 + v6 + 96);
      v11 = *(_BYTE *)(v4 + v6 + 104);
      v13 = *(double *)(v4 + v6 + 112);
      v12 = *(double *)(v4 + v6 + 120);
      if (!v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v15 = v8[2];
        v14 = v8[3];
        if (v15 >= v14 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
        v8[2] = v15 + 1;
        v16 = (float64x2_t *)&v8[11 * v15];
        v16[2] = v133;
        v16[3] = v131;
        v16[4] = v129;
        v16[5] = v127;
        v16[6].f64[0] = v10;
        LOBYTE(v16[6].f64[1]) = v11;
        v16[7].f64[0] = v13;
      }
      v17 = v7 + 1;
      if (v7 + 1 < v1)
      {
        v18 = (float64x2_t *)(v4 + v6);
        v19 = (v13 + v12) * 0.5;
        v20 = (*(double *)(v4 + v6 + 208) + *(double *)(v4 + v6 + 216)) * 0.5;
        if (v20 - v19 <= 0.0)
          goto LABEL_66;
        v21 = v18[12].f64[0];
        v102 = v18[8];
        v104 = v18[9];
        v110 = v18[10];
        v116 = v18[11];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v23 = v8[2];
        v22 = v8[3];
        if (v23 >= v22 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
        v24 = (v19 + v20) * 0.5;
        v25 = (v24 - v19) / (v20 - v19);
        v8[2] = v23 + 1;
        v26 = (float64x2_t *)&v8[11 * v23];
        v26[2] = vaddq_f64(v133, vmulq_n_f64(vsubq_f64(v102, v133), v25));
        v26[3] = vaddq_f64(v131, vmulq_n_f64(vsubq_f64(v104, v131), v25));
        v26[4] = vaddq_f64(v129, vmulq_n_f64(vsubq_f64(v110, v129), v25));
        v26[5] = vaddq_f64(v127, vmulq_n_f64(vsubq_f64(v116, v127), v25));
        v26[6].f64[0] = v10 + v25 * (v21 - v10);
        LOBYTE(v26[6].f64[1]) = v11;
        v26[7].f64[0] = v24;
      }
      if (v1 - 1 == v7)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v28 = v8[2];
        v27 = v8[3];
        if (v28 >= v27 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v8);
        v8[2] = v28 + 1;
        v9 = (float64x2_t *)&v8[11 * v28];
        v9[2] = v133;
        v9[3] = v131;
        v9[4] = v129;
        v9[5] = v127;
        v9[6].f64[0] = v10;
        LOBYTE(v9[6].f64[1]) = v11;
        v9[7].f64[0] = v12;
      }
      v6 += 96;
      ++v7;
    }
    while (v5 != v17);
    swift_release();
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_release();
  v29 = v8[2];
  if (!v29)
    return (uint64_t)v8;
  swift_bridgeObjectRetain();
  v30 = v8 + 10;
  v31 = -v29;
  v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v33 = -1;
  v98 = (float64x2_t)vdupq_n_s64(0x3FD554C985F06F69uLL);
  v97 = (float64x2_t)vdupq_n_s64(0x3FE5559B3D07C84BuLL);
  while (1)
  {
    v128 = *((float64x2_t *)v30 - 3);
    v130 = *((float64x2_t *)v30 - 2);
    v132 = *((float64x2_t *)v30 - 1);
    v134 = *(float64x2_t *)v30;
    v37 = *((double *)v30 + 2);
    v38 = *((_BYTE *)v30 + 24);
    v39 = v33 + 2;
    v40 = *((double *)v30 + 4);
    if (v33 == -1)
    {
      if (v39 >= v8[2])
        goto LABEL_64;
      v66 = *((double *)v30 + 13);
      v67 = *((double *)v30 + 15);
      v107 = *(float64x2_t *)(v30 + 5);
      v113 = *(float64x2_t *)(v30 + 7);
      v119 = *(float64x2_t *)(v30 + 9);
      v124 = *(float64x2_t *)(v30 + 11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
      v69 = v32[2];
      v68 = v32[3];
      v70 = v68 >> 1;
      v71 = v69 + 1;
      v72 = v134;
      v74 = v130;
      v73 = v132;
      v75 = v128;
      if (v68 >> 1 <= v69)
      {
        v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v32);
        v75 = v128;
        v74 = v130;
        v73 = v132;
        v72 = v134;
        v32 = v92;
        v68 = v92[3];
        v70 = v68 >> 1;
      }
      v32[2] = v71;
      v76 = (float64x2_t *)&v32[11 * v69];
      v76[2] = v75;
      v76[3] = v74;
      v76[4] = v73;
      v76[5] = v72;
      v76[6].f64[0] = v37;
      LOBYTE(v76[6].f64[1]) = v38;
      v76[7].f64[0] = v40;
      v77 = v69 + 2;
      if (v70 < v77)
      {
        v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v77, 1, v32);
        v75 = v128;
        v74 = v130;
        v73 = v132;
        v72 = v134;
        v32 = v93;
      }
      v32[2] = v77;
      v35 = (float64x2_t *)&v32[11 * v71];
      v35[2] = vaddq_f64(v75, vmulq_f64(vsubq_f64(v107, v75), v98));
      v35[3] = vaddq_f64(v74, vmulq_f64(vsubq_f64(v113, v74), v98));
      v35[4] = vaddq_f64(v73, vmulq_f64(vsubq_f64(v119, v73), v98));
      v35[5] = vaddq_f64(v72, vmulq_f64(vsubq_f64(v124, v72), v98));
      v35[6].f64[0] = v37 + (v66 - v37) * 0.3333;
      v36 = v40 + (v67 - v40) * 0.3333;
LABEL_30:
      LOBYTE(v35[6].f64[1]) = v38;
      v35[7].f64[0] = v36;
      goto LABEL_31;
    }
    v41 = v8[2];
    if (v31 + v33 != -2)
      break;
    if (v33 >= v41)
      goto LABEL_65;
    v78 = *((double *)v30 - 9);
    v79 = *((_BYTE *)v30 - 64);
    v80 = *((double *)v30 - 7);
    v120 = *(float64x2_t *)(v30 - 15);
    v125 = *(float64x2_t *)(v30 - 17);
    v108 = *(float64x2_t *)(v30 - 11);
    v114 = *(float64x2_t *)(v30 - 13);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    v81 = v134;
    v83 = v130;
    v82 = v132;
    v84 = v128;
    v86 = v32[2];
    v85 = v32[3];
    v87 = v85 >> 1;
    v88 = v86 + 1;
    if (v85 >> 1 <= v86)
    {
      v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v85 > 1), v86 + 1, 1, v32);
      v84 = v128;
      v83 = v130;
      v82 = v132;
      v81 = v134;
      v32 = v94;
      v85 = v94[3];
      v87 = v85 >> 1;
    }
    v32[2] = v88;
    v89 = (float64x2_t *)&v32[11 * v86];
    v89[2] = vaddq_f64(v125, vmulq_f64(vsubq_f64(v84, v125), v97));
    v89[3] = vaddq_f64(v120, vmulq_f64(vsubq_f64(v83, v120), v97));
    v89[4] = vaddq_f64(v114, vmulq_f64(vsubq_f64(v82, v114), v97));
    v89[5] = vaddq_f64(v108, vmulq_f64(vsubq_f64(v81, v108), v97));
    v89[6].f64[0] = v78 + (v37 - v78) * 0.6667;
    LOBYTE(v89[6].f64[1]) = v79;
    v89[7].f64[0] = v80 + (v40 - v80) * 0.6667;
    if (v87 < (uint64_t)(v86 + 2))
    {
      v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v85 > 1), v86 + 2, 1, v32);
      v84 = v128;
      v83 = v130;
      v82 = v132;
      v81 = v134;
      v32 = v95;
    }
    v32[2] = v86 + 2;
    v90 = (float64x2_t *)&v32[11 * v88];
    v90[2] = v84;
    v90[3] = v83;
    v90[4] = v82;
    v90[5] = v81;
    v90[6].f64[0] = v37;
    LOBYTE(v90[6].f64[1]) = v38;
    v90[7].f64[0] = v40;
LABEL_31:
    v30 += 11;
    ++v33;
    if (v31 + v33 == -1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  if (v33 < v41)
  {
    if (v39 >= v41)
      goto LABEL_63;
    v42 = *((double *)v30 - 7);
    v43 = *((double *)v30 - 9);
    v44 = *((double *)v30 + 13);
    v45 = *((double *)v30 + 15);
    v99 = *(float64x2_t *)(v30 + 5);
    v100 = *(float64x2_t *)(v30 - 17);
    v101 = *(float64x2_t *)(v30 + 7);
    v103 = *(float64x2_t *)(v30 - 15);
    v105 = *(float64x2_t *)(v30 + 9);
    v111 = *(float64x2_t *)(v30 - 13);
    v117 = *(float64x2_t *)(v30 + 11);
    v122 = *(float64x2_t *)(v30 - 11);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    v47 = v32[2];
    v46 = v32[3];
    v48 = v46 >> 1;
    v49 = v47 + 1;
    if (v46 >> 1 <= v47)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v32);
      v46 = v32[3];
      v48 = v46 >> 1;
    }
    v50 = 1.0 / (v45 - v42);
    v51 = (v44 - v43) * v50;
    v52 = (v40 - v42) * 0.3333;
    v53 = vmulq_n_f64(vsubq_f64(v99, v100), v50);
    v55 = v128;
    v54 = v130;
    v56 = vmulq_n_f64(vsubq_f64(v101, v103), v50);
    v57 = vmulq_n_f64(vsubq_f64(v105, v111), v50);
    v58 = v132;
    v59 = vmulq_n_f64(vsubq_f64(v117, v122), v50);
    v32[2] = v49;
    v60 = (float64x2_t *)&v32[11 * v47];
    v60[2] = vsubq_f64(v128, vmulq_n_f64(v53, v52));
    v60[3] = vsubq_f64(v130, vmulq_n_f64(v56, v52));
    v61 = v134;
    v60[4] = vsubq_f64(v132, vmulq_n_f64(v57, v52));
    v60[5] = vsubq_f64(v134, vmulq_n_f64(v59, v52));
    v60[6].f64[0] = v37 - v52 * v51;
    LOBYTE(v60[6].f64[1]) = v38;
    v60[7].f64[0] = v40 - v52;
    v62 = v47 + 2;
    if (v48 < (uint64_t)(v47 + 2))
    {
      v121 = v56;
      v126 = v53;
      v109 = v59;
      v115 = v57;
      v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 2, 1, v32);
      v59 = v109;
      v57 = v115;
      v56 = v121;
      v53 = v126;
      v55 = v128;
      v54 = v130;
      v58 = v132;
      v61 = v134;
      v32 = v91;
    }
    v32[2] = v62;
    v63 = (float64x2_t *)&v32[11 * v49];
    v63[2] = v55;
    v63[3] = v54;
    v63[4] = v58;
    v63[5] = v61;
    v63[6].f64[0] = v37;
    LOBYTE(v63[6].f64[1]) = v38;
    v63[7].f64[0] = v40;
    v64 = v32[3];
    if ((uint64_t)(v47 + 3) > (uint64_t)(v64 >> 1))
    {
      v118 = v56;
      v123 = v53;
      v106 = v59;
      v112 = v57;
      v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v64 > 1), v47 + 3, 1, v32);
      v59 = v106;
      v57 = v112;
      v56 = v118;
      v53 = v123;
      v55 = v128;
      v54 = v130;
      v58 = v132;
      v61 = v134;
      v32 = v65;
    }
    v34 = (v45 - v40) * 0.3333;
    v32[2] = v47 + 3;
    v35 = (float64x2_t *)&v32[11 * v62];
    v35[2] = vaddq_f64(v55, vmulq_n_f64(v53, v34));
    v35[3] = vaddq_f64(v54, vmulq_n_f64(v56, v34));
    v35[4] = vaddq_f64(v58, vmulq_n_f64(v57, v34));
    v35[5] = vaddq_f64(v61, vmulq_n_f64(v59, v34));
    v35[6].f64[0] = v37 + v34 * v51;
    v36 = v40 + v34;
    goto LABEL_30;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void specialized Text.Effect.StopSegment.cubicWeightsAndStates(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, long double a4@<D0>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  long double v21;
  char v22;
  long double v23;
  long double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = 3 * a1;
  if ((unsigned __int128)(a1 * (__int128)3) >> 64 != (3 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 >= v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = v5 + 1;
  if (v5 + 1 >= v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = v5 + 2;
  if (v5 + 2 >= v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = v5 + 3;
  if (v5 + 3 < v6)
  {
    v11 = a2 + 32 + 264 * a1;
    v48 = *(_QWORD *)(v11 + 8);
    v49 = *(_QWORD *)v11;
    v46 = *(_QWORD *)(v11 + 24);
    v47 = *(_QWORD *)(v11 + 16);
    v44 = *(_QWORD *)(v11 + 40);
    v45 = *(_QWORD *)(v11 + 32);
    v42 = *(_QWORD *)(v11 + 56);
    v43 = *(_QWORD *)(v11 + 48);
    v41 = *(_QWORD *)(v11 + 64);
    v12 = *(_BYTE *)(v11 + 72);
    v13 = a2 + 32 + 88 * v7;
    v39 = *(_QWORD *)(v13 + 8);
    v40 = *(_QWORD *)v13;
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(_QWORD *)(v13 + 32);
    v37 = *(_QWORD *)(v13 + 40);
    v38 = *(_QWORD *)(v13 + 16);
    v35 = *(_QWORD *)(v13 + 56);
    v36 = *(_QWORD *)(v13 + 48);
    v16 = *(_BYTE *)(v13 + 72);
    v17 = a2 + 32 + 88 * v8;
    v18 = *(_BYTE *)(v17 + 72);
    v33 = *(_QWORD *)(v17 + 64);
    v34 = *(_QWORD *)(v13 + 64);
    v31 = *(_OWORD *)(v17 + 32);
    v32 = *(_OWORD *)(v17 + 48);
    v25 = *(_OWORD *)v17;
    v26 = *(_OWORD *)(v17 + 16);
    v19 = a2 + 32 + 88 * v9;
    v29 = *(_OWORD *)(v19 + 16);
    v30 = *(_OWORD *)v19;
    v27 = *(_OWORD *)(v19 + 48);
    v28 = *(_OWORD *)(v19 + 32);
    v20 = *(_QWORD *)(v19 + 64);
    v21 = 1.0 - a4;
    v22 = *(_BYTE *)(v19 + 72);
    v23 = pow(1.0 - a4, 3.0);
    v24 = pow(a4, 3.0);
    *(long double *)a3 = v23;
    *(long double *)(a3 + 8) = v21 * v21 * 3.0 * a4;
    *(long double *)(a3 + 16) = a4 * a4 * (v21 * 3.0);
    *(long double *)(a3 + 24) = v24;
    *(_QWORD *)(a3 + 32) = v49;
    *(_QWORD *)(a3 + 40) = v48;
    *(_QWORD *)(a3 + 48) = v47;
    *(_QWORD *)(a3 + 56) = v46;
    *(_QWORD *)(a3 + 64) = v45;
    *(_QWORD *)(a3 + 72) = v44;
    *(_QWORD *)(a3 + 80) = v43;
    *(_QWORD *)(a3 + 88) = v42;
    *(_QWORD *)(a3 + 96) = v41;
    *(_BYTE *)(a3 + 104) = v12;
    *(_QWORD *)(a3 + 112) = v40;
    *(_QWORD *)(a3 + 120) = v39;
    *(_QWORD *)(a3 + 128) = v38;
    *(_QWORD *)(a3 + 136) = v14;
    *(_QWORD *)(a3 + 144) = v15;
    *(_QWORD *)(a3 + 152) = v37;
    *(_QWORD *)(a3 + 160) = v36;
    *(_QWORD *)(a3 + 168) = v35;
    *(_QWORD *)(a3 + 176) = v34;
    *(_BYTE *)(a3 + 184) = v16;
    *(_OWORD *)(a3 + 192) = v25;
    *(_OWORD *)(a3 + 208) = v26;
    *(_OWORD *)(a3 + 224) = v31;
    *(_OWORD *)(a3 + 240) = v32;
    *(_QWORD *)(a3 + 256) = v33;
    *(_BYTE *)(a3 + 264) = v18;
    *(_OWORD *)(a3 + 272) = v30;
    *(_OWORD *)(a3 + 288) = v29;
    *(_OWORD *)(a3 + 304) = v28;
    *(_OWORD *)(a3 + 320) = v27;
    *(_QWORD *)(a3 + 336) = v20;
    *(_BYTE *)(a3 + 344) = v22;
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t getEnumTagSinglePayload for Text.Effect.Stop(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Stop(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Stop()
{
  return &type metadata for Text.Effect.Stop;
}

ValueMetadata *type metadata accessor for Text.Effect.StopSegment()
{
  return &type metadata for Text.Effect.StopSegment;
}

ValueMetadata *type metadata accessor for Text.Effect.StopCollector.Segment.Element()
{
  return &type metadata for Text.Effect.StopCollector.Segment.Element;
}

uint64_t outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t initializeWithCopy for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Cluster #1 in static Text.Effect.stopMarkers(_:)()
{
  return &type metadata for Cluster #1 in static Text.Effect.stopMarkers(_:);
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollection.Segment()
{
  return &type metadata for Text.Effect.StopMarkerCollection.Segment;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollector.Segment.Element()
{
  return &type metadata for Text.Effect.StopMarkerCollector.Segment.Element;
}

ValueMetadata *type metadata accessor for Text.Effect.StopIndex()
{
  return &type metadata for Text.Effect.StopIndex;
}

uint64_t destroy for Text.Effect.StopCollector(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.StopCollector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.StopMarkerCollector(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return assignWithCopy for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]));
}

uint64_t assignWithCopy for Text.Effect.StopCollector(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of TypesettingConfiguration(a1, a4);
      v7 = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v8;
  }
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>])()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]))
  {
    type metadata accessor for [Range<Int>]();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]));
  }
}

void type metadata accessor for [Range<Int>]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Range<Int>])
  {
    type metadata accessor for Range<Int>();
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Range<Int>]);
  }
}

uint64_t assignWithTake for Text.Effect.StopMarkerCollector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]));
}

uint64_t assignWithTake for Text.Effect.StopCollector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    outlined destroy of TypesettingConfiguration(a1, a4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_6;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.StopCollector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.StopCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollector()
{
  return &type metadata for Text.Effect.StopMarkerCollector;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollector.Segment()
{
  return &type metadata for Text.Effect.StopMarkerCollector.Segment;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollection()
{
  return &type metadata for Text.Effect.StopMarkerCollection;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.StopMarkerCollector.Segment>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopMarkerCollector.Segment, &type metadata for Text.Effect.StopMarkerCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopMarkerCollector.Segment, &type metadata for Text.Effect.StopMarkerCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopMarkerCollector.Segment, &type metadata for Text.Effect.StopMarkerCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.StopMarkerCollector.Segment, &type metadata for Text.Effect.StopMarkerCollector.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.StopMarkerCollector.Segment>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.StopMarkerCollector.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t (*Spacer.minLength.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Spacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static PrimitiveSpacer._makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _OWORD v26[3];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v17 = MEMORY[0x24BEE4AF8];
  v5 = *MEMORY[0x24BE096C0];
  v18 = 0;
  v19 = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v26[1] = *(_OWORD *)(a2 + 16);
  v26[2] = v6;
  v26[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    LODWORD(v20) = a1;
    BYTE4(v20) = 1;
    DWORD2(v20) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer);
    v5 = Attribute.init<A>(body:value:flags:update:)();
    v7 = 128;
    v18 = 128;
    v19 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)&v26[0];
  v27[0] = *(_QWORD *)&v26[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  outlined retain of ViewTransform((uint64_t)v27);
  v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(_QWORD *)(v9 + 80);
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    result = outlined release of _ViewInputs(a2);
    if (v10)
    {
      v13 = *(_OWORD *)(a2 + 48);
      v22 = *(_OWORD *)(a2 + 32);
      v23 = v13;
      v24 = *(_OWORD *)(a2 + 64);
      v25 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v20 = *(_OWORD *)a2;
      v21 = v14;
      result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v11 + 8))(&v20, v10, v11);
      if ((result & 1) != 0)
      {
        v15 = *(_OWORD *)(a2 + 48);
        v22 = *(_OWORD *)(a2 + 32);
        v23 = v15;
        v24 = *(_OWORD *)(a2 + 64);
        v25 = *(_DWORD *)(a2 + 80);
        v16 = *(_OWORD *)(a2 + 16);
        v20 = *(_OWORD *)a2;
        v21 = v16;
        result = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v20, &v17, v10, v11);
        v7 = v18;
        v5 = v19;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    result = outlined release of _ViewInputs(a2);
  }
  *(_QWORD *)a3 = v17;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _OWORD v26[3];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v17 = MEMORY[0x24BEE4AF8];
  v5 = *MEMORY[0x24BE096C0];
  v18 = 0;
  v19 = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v26[1] = *(_OWORD *)(a2 + 16);
  v26[2] = v6;
  v26[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    LODWORD(v20) = a1;
    BYTE4(v20) = 0;
    DWORD2(v20) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<_HSpacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer);
    v5 = Attribute.init<A>(body:value:flags:update:)();
    v7 = 128;
    v18 = 128;
    v19 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)&v26[0];
  v27[0] = *(_QWORD *)&v26[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  outlined retain of ViewTransform((uint64_t)v27);
  v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(_QWORD *)(v9 + 80);
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    result = outlined release of _ViewInputs(a2);
    if (v10)
    {
      v13 = *(_OWORD *)(a2 + 48);
      v22 = *(_OWORD *)(a2 + 32);
      v23 = v13;
      v24 = *(_OWORD *)(a2 + 64);
      v25 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v20 = *(_OWORD *)a2;
      v21 = v14;
      result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v11 + 8))(&v20, v10, v11);
      if ((result & 1) != 0)
      {
        v15 = *(_OWORD *)(a2 + 48);
        v22 = *(_OWORD *)(a2 + 32);
        v23 = v15;
        v24 = *(_OWORD *)(a2 + 64);
        v25 = *(_DWORD *)(a2 + 80);
        v16 = *(_OWORD *)(a2 + 16);
        v20 = *(_OWORD *)a2;
        v21 = v16;
        result = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v20, &v17, v10, v11);
        v7 = v18;
        v5 = v19;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    result = outlined release of _ViewInputs(a2);
  }
  *(_QWORD *)a3 = v17;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _OWORD v31[3];
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x24BDAC8D0];
  v22 = MEMORY[0x24BEE4AF8];
  v5 = *MEMORY[0x24BE096C0];
  v23 = 0;
  v24 = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v31[1] = *(_OWORD *)(a2 + 16);
  v31[2] = v6;
  v31[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    if ((BYTE4(v6) & 4) != 0)
    {
      v12 = (BYTE4(v6) & 8) == 0;
    }
    else
    {
      v9 = *(_QWORD *)&v31[0];
      v33[0] = *(_QWORD *)&v31[0];
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)v31);
      outlined retain of ViewTransform((uint64_t)v33);
      v10 = specialized find<A>(_:key:)(v9);
      if (v10)
      {
        v11 = (int *)(v10 + 72);
      }
      else
      {
        if (one-time initialization token for defaultValue != -1)
          swift_once();
        v11 = &static DynamicStackOrientation.defaultValue;
      }
      v5 = *v11;
      outlined release of ViewTransform((uint64_t)v33);
      outlined release of _GraphInputs((uint64_t)v31);
      outlined release of _ViewInputs(a2);
      v12 = 2;
    }
    LODWORD(v25) = a1;
    BYTE4(v25) = v12;
    DWORD2(v25) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<Spacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer);
    v5 = Attribute.init<A>(body:value:flags:update:)();
    v7 = 128;
    v23 = 128;
    v24 = v5;
  }
  else
  {
    v7 = 0;
  }
  v13 = *(_QWORD *)&v31[0];
  v32 = *(_QWORD *)&v31[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v31);
  outlined retain of ViewTransform((uint64_t)&v32);
  v14 = specialized find<A>(_:key:)(v13);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 72);
    v16 = *(_QWORD *)(v14 + 80);
    outlined release of ViewTransform((uint64_t)&v32);
    outlined release of _GraphInputs((uint64_t)v31);
    result = outlined release of _ViewInputs(a2);
    if (v15)
    {
      v18 = *(_OWORD *)(a2 + 48);
      v27 = *(_OWORD *)(a2 + 32);
      v28 = v18;
      v29 = *(_OWORD *)(a2 + 64);
      v30 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v25 = *(_OWORD *)a2;
      v26 = v19;
      result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v16 + 8))(&v25, v15, v16);
      if ((result & 1) != 0)
      {
        v20 = *(_OWORD *)(a2 + 48);
        v27 = *(_OWORD *)(a2 + 32);
        v28 = v20;
        v29 = *(_OWORD *)(a2 + 64);
        v30 = *(_DWORD *)(a2 + 80);
        v21 = *(_OWORD *)(a2 + 16);
        v25 = *(_OWORD *)a2;
        v26 = v21;
        result = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v25, &v22, v15, v16);
        v7 = v23;
        v5 = v24;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)&v32);
    outlined release of _GraphInputs((uint64_t)v31);
    result = outlined release of _ViewInputs(a2);
  }
  *(_QWORD *)a3 = v22;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

{
  int v5;
  __int128 v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _OWORD v31[3];
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x24BDAC8D0];
  v22 = MEMORY[0x24BEE4AF8];
  v5 = *MEMORY[0x24BE096C0];
  v23 = 0;
  v24 = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v31[1] = *(_OWORD *)(a2 + 16);
  v31[2] = v6;
  v31[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    if ((BYTE4(v6) & 4) != 0)
    {
      v12 = (BYTE4(v6) & 8) == 0;
    }
    else
    {
      v9 = *(_QWORD *)&v31[0];
      v32 = *(_QWORD *)&v31[0];
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)v31);
      outlined retain of ViewTransform((uint64_t)&v32);
      v10 = specialized find<A>(_:key:)(v9);
      if (v10)
      {
        v11 = (int *)(v10 + 72);
      }
      else
      {
        if (one-time initialization token for defaultValue != -1)
          swift_once();
        v11 = &static DynamicStackOrientation.defaultValue;
      }
      v5 = *v11;
      outlined release of ViewTransform((uint64_t)&v32);
      outlined release of _GraphInputs((uint64_t)v31);
      outlined release of _ViewInputs(a2);
      v12 = 2;
    }
    LODWORD(v25) = a1;
    BYTE4(v25) = v12;
    DWORD2(v25) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<_TextBaselineRelativeSpacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer);
    v5 = Attribute.init<A>(body:value:flags:update:)();
    v7 = 128;
    v23 = 128;
    v24 = v5;
  }
  else
  {
    v7 = 0;
  }
  v13 = *(_QWORD *)&v31[0];
  v33[0] = *(_QWORD *)&v31[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v31);
  outlined retain of ViewTransform((uint64_t)v33);
  v14 = specialized find<A>(_:key:)(v13);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 72);
    v16 = *(_QWORD *)(v14 + 80);
    outlined release of ViewTransform((uint64_t)v33);
    outlined release of _GraphInputs((uint64_t)v31);
    result = outlined release of _ViewInputs(a2);
    if (v15)
    {
      v18 = *(_OWORD *)(a2 + 48);
      v27 = *(_OWORD *)(a2 + 32);
      v28 = v18;
      v29 = *(_OWORD *)(a2 + 64);
      v30 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v25 = *(_OWORD *)a2;
      v26 = v19;
      result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v16 + 8))(&v25, v15, v16);
      if ((result & 1) != 0)
      {
        v20 = *(_OWORD *)(a2 + 48);
        v27 = *(_OWORD *)(a2 + 32);
        v28 = v20;
        v29 = *(_OWORD *)(a2 + 64);
        v30 = *(_DWORD *)(a2 + 80);
        v21 = *(_OWORD *)(a2 + 16);
        v25 = *(_OWORD *)a2;
        v26 = v21;
        result = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v25, &v22, v15, v16);
        v7 = v23;
        v5 = v24;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v33);
    outlined release of _GraphInputs((uint64_t)v31);
    result = outlined release of _ViewInputs(a2);
  }
  *(_QWORD *)a3 = v22;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

uint64_t _TextBaselineRelativeSpacer.minLength.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*_TextBaselineRelativeSpacer.minLength.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for PrimitiveSpacer.minLength.getter in conformance _TextBaselineRelativeSpacer()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _TextBaselineRelativeSpacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t (*_HSpacer.minWidth.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _HSpacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t (*_VSpacer.minHeight.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _VSpacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t _ViewInputs.requestedSpacerRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t SpacerLayoutComputer.dynamicOrientation.getter(uint64_t a1, int a2)
{
  if (*MEMORY[0x24BE096C0] == a2)
    return 3;
  type metadata accessor for Axis?();
  return *(unsigned __int8 *)AGGraphGetValue();
}

uint64_t SpacerLayoutComputer.Engine.spacing()@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  char v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t result;
  uint64_t inited;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 40))();
  v6 = *(unsigned __int8 *)(v2 + *(int *)(a1 + 36));
  if ((v5 & 1) != 0)
  {
    if (v6 != 2)
    {
      type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
      if ((v6 & 1) != 0)
      {
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_23528B7A0;
        if (one-time initialization token for textBaseline != -1)
          swift_once();
        v14 = static Spacing.Category.textBaseline;
        *(_QWORD *)(inited + 32) = static Spacing.Category.textBaseline;
        *(_BYTE *)(inited + 40) = 0;
        *(_OWORD *)(inited + 48) = 0u;
        *(_OWORD *)(inited + 64) = 0u;
        *(_BYTE *)(inited + 80) = 0;
        *(_QWORD *)(inited + 88) = v14;
        *(_BYTE *)(inited + 96) = 2;
        *(_QWORD *)(inited + 144) = 0;
        *(_BYTE *)(inited + 152) = 0;
        *(_QWORD *)(inited + 200) = 0;
        *(_OWORD *)(inited + 104) = 0u;
        *(_OWORD *)(inited + 120) = 0u;
        *(_BYTE *)(inited + 136) = 0;
        *(_OWORD *)(inited + 160) = 0u;
        *(_OWORD *)(inited + 176) = 0u;
        *(_BYTE *)(inited + 192) = 0;
        *(_BYTE *)(inited + 208) = 2;
        *(_BYTE *)(inited + 248) = 0;
        *(_OWORD *)(inited + 232) = 0u;
        *(_OWORD *)(inited + 216) = 0u;
      }
      else
      {
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_23528B7A0;
        v12 = inited + 48;
        if (one-time initialization token for leftTextBaseline != -1)
        {
          swift_once();
          v12 = inited + 48;
        }
        *(_QWORD *)(inited + 32) = static Spacing.Category.leftTextBaseline;
        *(_BYTE *)(inited + 40) = 1;
        v13 = 0uLL;
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_BYTE *)(v12 + 32) = 0;
        if (one-time initialization token for rightTextBaseline != -1)
        {
          swift_once();
          v13 = 0uLL;
        }
        *(_QWORD *)(inited + 88) = static Spacing.Category.rightTextBaseline;
        *(_BYTE *)(inited + 96) = 3;
        *(_QWORD *)(inited + 144) = 0;
        *(_OWORD *)(inited + 104) = v13;
        *(_OWORD *)(inited + 120) = v13;
        *(_BYTE *)(inited + 136) = 0;
        *(_BYTE *)(inited + 152) = 1;
        *(_QWORD *)(inited + 200) = 0;
        *(_OWORD *)(inited + 160) = v13;
        *(_OWORD *)(inited + 176) = v13;
        *(_BYTE *)(inited + 192) = 0;
        *(_BYTE *)(inited + 208) = 3;
        *(_OWORD *)(inited + 216) = v13;
        *(_OWORD *)(inited + 232) = v13;
        *(_BYTE *)(inited + 248) = 0;
      }
      v7 = inited;
      goto LABEL_22;
    }
  }
  else if (v6 != 2)
  {
    type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
    v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v7 + 32) = 0;
    if ((v6 & 1) != 0)
    {
      *(_BYTE *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 88) = 0;
      v8 = 0uLL;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_BYTE *)(v7 + 80) = 0;
      v9 = 2;
    }
    else
    {
      *(_BYTE *)(v7 + 40) = 1;
      *(_QWORD *)(v7 + 88) = 0;
      v8 = 0uLL;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_BYTE *)(v7 + 80) = 0;
      v9 = 3;
    }
    *(_BYTE *)(v7 + 96) = v9;
    *(_OWORD *)(v7 + 104) = v8;
    *(_OWORD *)(v7 + 120) = v8;
    *(_BYTE *)(v7 + 136) = 0;
LABEL_22:
    v15 = specialized Dictionary.init(dictionaryLiteral:)(v7);
    result = swift_setDeallocating();
    *a2 = v15;
    return result;
  }
  if (one-time initialization token for zero != -1)
    swift_once();
  *a2 = static Spacing.zero;
  return swift_bridgeObjectRetain();
}

uint64_t SpacerLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD, double))(*(_QWORD *)(v8 + 24) + 24))(*(_QWORD *)(a2 + 16), v5);
  v10 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, a2);
  if ((v10 & 1) != 0 && one-time initialization token for defaultSpacingValue != -1)
    swift_once();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a2);
}

double protocol witness for LayoutEngine.layoutPriority() in conformance SpacerLayoutComputer<A>.Engine()
{
  return -INFINITY;
}

uint64_t SpacerLayoutComputer.updateValue()(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  char v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SpacerLayoutComputer.Engine(0, v3, *(_QWORD *)(v7 + 24), v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  v13 = *((unsigned __int8 *)v1 + 4);
  if (v13 == 2)
  {
    v14 = SpacerLayoutComputer.dynamicOrientation.getter(*v1 | 0x200000000, v1[2]);
    if (v14 == 3)
      LOBYTE(v13) = 2;
    else
      LOBYTE(v13) = v14;
  }
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v6, v3);
  v12[*(int *)(v9 + 36)] = v13;
  v16 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpacerLayoutComputer<A>, a1);
  StatefulRule<>.update<A>(to:)((uint64_t)v12, a1, v9, v16, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SpacerLayoutComputer<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpacerLayoutComputer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t key path getter for _ViewInputs.requestedSpacerRepresentation : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.requestedSpacerRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.requestedSpacerRepresentation : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _ViewInputs.requestedSpacerRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t _GraphInputs.requestedSpacerRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.requestedSpacerRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.requestedSpacerRepresentation.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedSpacerRepresentation.modify;
}

void _ViewInputs.requestedSpacerRepresentation.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

uint64_t key path getter for _GraphInputs.requestedSpacerRepresentation : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.requestedSpacerRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.requestedSpacerRepresentation.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedSpacerRepresentation.modify;
}

ValueMetadata *type metadata accessor for Spacer()
{
  return &type metadata for Spacer;
}

uint64_t storeEnumTagSinglePayload for _TextBaselineRelativeSpacer(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _TextBaselineRelativeSpacer()
{
  return &type metadata for _TextBaselineRelativeSpacer;
}

ValueMetadata *type metadata accessor for _HSpacer()
{
  return &type metadata for _HSpacer;
}

ValueMetadata *type metadata accessor for _VSpacer()
{
  return &type metadata for _VSpacer;
}

uint64_t dispatch thunk of static PlatformSpacerRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t type metadata accessor for SpacerLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpacerLayoutComputer);
}

uint64_t lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpacerLayoutComputer<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for SpacerLayoutComputer<_VSpacer>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for SpacerLayoutComputer(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t type metadata completion function for SpacerLayoutComputer.Engine()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SpacerLayoutComputer.Engine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      v16 = v15 >= 2;
      v17 = v15 - 2;
      if (!v16)
        v17 = -1;
      if (v17 + 1 >= 2)
        return v17;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C709A0 + 4 * byte_235291430[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SpacerLayoutComputer.Engine(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for SpacerLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpacerLayoutComputer.Engine);
}

uint64_t getEnumTagSinglePayload for SpacerLayoutComputer(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 4) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 4) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpacerLayoutComputer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _GraphInputs.SpacerRepresentationKey()
{
  return &type metadata for _GraphInputs.SpacerRepresentationKey;
}

uint64_t instantiation function for generic protocol witness table for SpacerLayoutComputer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpacerLayoutComputer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in SpacerLayoutComputer<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for Axis?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Axis?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Axis?);
  }
}

uint64_t type metadata accessor for SpacerLayoutComputer.Platform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpacerLayoutComputer.Platform);
}

uint64_t static UnifiedHitTestingFeature.isEnabled.getter()
{
  unsigned int v0;
  char v1;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v0)
      goto LABEL_7;
LABEL_9:
    v1 = 1;
    return v1 & 1;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v1 = specialized static GestureContainerFeature.isEnabled.getter();
  return v1 & 1;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance UnifiedHitTestingFeature()
{
  unsigned int v0;
  char v1;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v0)
      goto LABEL_7;
LABEL_9:
    v1 = 1;
    return v1 & 1;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v1 = specialized static GestureContainerFeature.isEnabled.getter();
  return v1 & 1;
}

uint64_t static ImprovedButtonGestureFeature.isEnabled.getter()
{
  return specialized static ImprovedButtonGestureFeature.isEnabled.getter() & 1;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance ImprovedButtonGestureFeature()
{
  return specialized static ImprovedButtonGestureFeature.isEnabled.getter() & 1;
}

uint64_t static EndedGestureWaitsForActiveFeature.isEnabled.getter()
{
  return specialized static ImprovedButtonGestureFeature.isEnabled.getter() & 1;
}

uint64_t static GestureContainerFeature._isFeatureEnabled()()
{
  char v0;
  unsigned int v1;
  _BYTE v3[24];
  ValueMetadata *v4;
  unint64_t v5;

  v4 = &type metadata for GestureContainerFeature;
  v5 = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
  v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  if ((v0 & 1) == 0)
    return 0;
  if (one-time initialization token for v6 != -1)
    swift_once();
  v1 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    return dyld_program_sdk_at_least();
  else
    return static Semantics.forced >= v1;
}

uint64_t static GestureContainerFeature.isEnabledOverride.getter()
{
  swift_beginAccess();
  return static GestureContainerFeature.isEnabledOverride;
}

uint64_t static GestureContainerFeature.isEnabledOverride.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static GestureContainerFeature.isEnabledOverride = a1;
  return result;
}

uint64_t (*static GestureContainerFeature.isEnabledOverride.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

const char *GestureContainerFeature.domain.getter()
{
  return "SwiftUI";
}

const char *GestureContainerFeature.feature.getter()
{
  return "gestureContainer";
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance GestureContainerFeature()
{
  return "SwiftUI";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance GestureContainerFeature()
{
  return "gestureContainer";
}

uint64_t static GestureRecognizerBasedEvents.isEnabledForTesting.getter()
{
  swift_beginAccess();
  return static GestureRecognizerBasedEvents.isEnabledForTesting;
}

uint64_t static GestureRecognizerBasedEvents.isEnabledForTesting.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static GestureRecognizerBasedEvents.isEnabledForTesting = a1;
  return result;
}

uint64_t (*static GestureRecognizerBasedEvents.isEnabledForTesting.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static GestureRecognizerBasedEvents.isEnabled.getter()
{
  return 1;
}

uint64_t specialized static GestureContainerFeature.isEnabled.getter()
{
  char *v1;
  char v2;
  unsigned int v3;
  _QWORD v4[5];

  swift_beginAccess();
  if (static CoreTesting.isRunning == 1)
  {
    swift_beginAccess();
    return static GestureContainerFeature.isEnabledOverride & 1;
  }
  else
  {
    v1 = getenv("SWIFTUI_GESTURE_CONTAINER");
    if (v1)
    {
      return atoi(v1) != 0;
    }
    else
    {
      v4[3] = &type metadata for GestureContainerFeature;
      v4[4] = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
      v2 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      if ((v2 & 1) != 0)
      {
        if (one-time initialization token for v6 != -1)
          swift_once();
        v3 = static Semantics.v6;
        if (one-time initialization token for forced != -1)
          swift_once();
        swift_beginAccess();
        if ((byte_25426FAB4 & 1) != 0)
          return dyld_program_sdk_at_least();
        else
          return static Semantics.forced >= v3;
      }
      else
      {
        return 0;
      }
    }
  }
}

uint64_t specialized static ImprovedButtonGestureFeature.isEnabled.getter()
{
  char *v1;
  char v2;
  unsigned int v3;
  _QWORD v4[5];

  swift_beginAccess();
  if ((static CoreTesting.isRunning & 1) != 0)
    return 1;
  v1 = getenv("SWIFTUI_GESTURE_CONTAINER");
  if (v1)
    return atoi(v1) != 0;
  v4[3] = &type metadata for GestureContainerFeature;
  v4[4] = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
  v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  if ((v2 & 1) == 0)
    return 0;
  if (one-time initialization token for v6 != -1)
    swift_once();
  v3 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    return dyld_program_sdk_at_least();
  else
    return static Semantics.forced >= v3;
}

unint64_t lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureContainerFeature and conformance GestureContainerFeature;
  if (!lazy protocol witness table cache variable for type GestureContainerFeature and conformance GestureContainerFeature)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureContainerFeature, &type metadata for GestureContainerFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureContainerFeature and conformance GestureContainerFeature);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in UnifiedHitTestingFeature()
{
  return &protocol witness table for UnifiedHitTestingFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in ImprovedButtonGestureFeature()
{
  return &protocol witness table for ImprovedButtonGestureFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in EndedGestureWaitsForActiveFeature()
{
  return &protocol witness table for EndedGestureWaitsForActiveFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in GestureContainerFeature()
{
  return &protocol witness table for GestureContainerFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in GestureRecognizerBasedEvents()
{
  return &protocol witness table for GestureRecognizerBasedEvents;
}

ValueMetadata *type metadata accessor for UnifiedHitTestingFeature()
{
  return &type metadata for UnifiedHitTestingFeature;
}

ValueMetadata *type metadata accessor for ImprovedButtonGestureFeature()
{
  return &type metadata for ImprovedButtonGestureFeature;
}

ValueMetadata *type metadata accessor for EndedGestureWaitsForActiveFeature()
{
  return &type metadata for EndedGestureWaitsForActiveFeature;
}

ValueMetadata *type metadata accessor for GestureContainerFeature()
{
  return &type metadata for GestureContainerFeature;
}

ValueMetadata *type metadata accessor for GestureRecognizerBasedEvents()
{
  return &type metadata for GestureRecognizerBasedEvents;
}

uint64_t static KeyframesBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t static KeyframesBuilder.buildArray<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = _ViewInputs.base.modify(a1, a2);
  return swift_bridgeObjectRetain();
}

void static KeyframesBuilder.buildEither<A, B>(first:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  KeyframeTrackContentBuilder.Conditional.init(first:)((uint64_t)v7, a2, a3);
}

void static KeyframesBuilder.buildEither<A, B>(second:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  KeyframeTrackContentBuilder.Conditional.init(second:)((uint64_t)v7, a2, a3);
}

void static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  MergedKeyframeTrackContent.init(first:second:)((uint64_t)v15, a3, a5);
}

void static KeyframesBuilder.buildFinalResult<A>(_:)(uint64_t *a1@<X8>)
{
  KeyframeTrack.init<>(content:)(a1);
}

uint64_t closure #1 in static KeyframesBuilder.buildFinalResult<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v10, v11, (uint64_t)v9);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)(v9, a2, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a3);
}

uint64_t partial apply for closure #1 in static KeyframesBuilder.buildFinalResult<A>(_:)()
{
  uint64_t *v0;

  return closure #1 in static KeyframesBuilder.buildFinalResult<A>(_:)(v0[5], v0[2], v0[3], v0[4]);
}

void static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[6];

  v23[0] = a7;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v23 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v18 + 16))(v22, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, a5);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a8, v22, a4);
  v23[1] = a3;
  v23[2] = a4;
  v23[3] = a5;
  v23[4] = a6;
  v23[5] = v23[0];
  type metadata accessor for CombinedKeyframes();
}

uint64_t sub_234C71A4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 60), v3, v1);
}

uint64_t type metadata accessor for KeyframesBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframesBuilder);
}

void sub_234C71A94(uint64_t *a1)
{
  type metadata accessor for ArrayKeyframeTrackContent(255, *a1, a1[1], a1[2]);
  JUMPOUT(0x23B7C9C04);
}

void sub_234C71AC0(uint64_t a1)
{
  get_witness_table_5ValueQyd__Rsz7SwiftUI20KeyframeTrackContentRd__AcDRd_0_AAQyd_0_ABRSr_0_lAC06MergeddeF0Vyxqd__qd_0_GAcDHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for MergedKeyframeTrackContent);
}

void sub_234C71AD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for EmptyKeyframeTrackContent(255, *a1, a1[1], a4);
  JUMPOUT(0x23B7C9C04);
}

void sub_234C71AFC(uint64_t a1)
{
  get_witness_table_5ValueQyd__Rsz7SwiftUI20KeyframeTrackContentRd__AcDRd_0_AAQyd_0_ABRSr_0_lAC06MergeddeF0Vyxqd__qd_0_GAcDHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for CombinedKeyframes);
}

void get_witness_table_5ValueQyd__Rsz7SwiftUI20KeyframeTrackContentRd__AcDRd_0_AAQyd_0_ABRSr_0_lAC06MergeddeF0Vyxqd__qd_0_GAcDHPyHCTm(uint64_t a1, void (*a2)(uint64_t, _OWORD *))
{
  uint64_t v2;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  v5 = v2;
  a2(255, v4);
  JUMPOUT(0x234C71B44);
}

void type metadata accessor for CombinedKeyframes()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void sub_234C71B6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for EmptyKeyframes(255, *a1, a3, a4);
  JUMPOUT(0x23B7C9C04);
}

uint64_t type metadata accessor for EmptyKeyframes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyKeyframes);
}

uint64_t type metadata completion function for CombinedKeyframes()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CombinedKeyframes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t destroy for CombinedKeyframes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
}

uint64_t initializeWithCopy for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for CombinedKeyframes(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234C71FE0 + 4 * byte_235291AB0[v17 - 1]))();
}

void storeEnumTagSinglePayload for CombinedKeyframes(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t instantiation function for generic protocol witness table for CombinedKeyframes<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedKeyframes<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for EmptyKeyframes<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyKeyframes<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for Keyframes._resolve(into:initialValue:initialVelocity:) in conformance EmptyKeyframes<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewInputs.base.modify(a1, *(_QWORD *)(a4 + 16));
}

uint64_t CombinedKeyframes._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a4[5] + 40))(a1, a2, a3, a4[3]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a4[6] + 40))(a1, a2, a3, a4[4]);
}

uint64_t static AnyTransition.move(edge:)(char a1)
{
  uint64_t result;

  type metadata accessor for TransitionBox<MoveTransition>(0);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  return result;
}

SwiftUI::MoveTransition __swiftcall MoveTransition.init(edge:)(SwiftUI::MoveTransition edge)
{
  SwiftUI::MoveTransition *v1;

  v1->edge = edge.edge;
  return edge;
}

void type metadata accessor for TransitionBox<MoveTransition>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TransitionBox<MoveTransition>)
  {
    v2 = lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition();
    v4 = type metadata accessor for TransitionBox(a1, (uint64_t)&type metadata for MoveTransition, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<MoveTransition>);
  }
}

unint64_t lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition;
  if (!lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MoveTransition, &type metadata for MoveTransition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition);
  }
  return result;
}

CGSize __swiftcall Edge.offsetForCanvasSize(_:)(CGSize a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  double v3;
  double v4;
  CGSize result;

  ((void (*)(double, __n128, double))((char *)sub_234C72438 + 4 * byte_235291BA8[v1]))(0.0, (__n128)__PAIR128__(v2, *(unint64_t *)&a1.height), a1.width);
  result.height = v4;
  result.width = v3;
  return result;
}

double sub_234C72440(double a1, double a2, double a3)
{
  return a3;
}

double sub_234C7244C(double a1, double a2, double a3)
{
  return -a3;
}

uint64_t MoveTransition.edge.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t MoveTransition.edge.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*MoveTransition.edge.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double MoveTransition.MoveLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  double result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  if (a2 != 4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      AGGraphGetInputValue();
    __asm { BR              X10 }
  }
  PlacementContext.proposedSize.getter((uint64_t)&v10);
  v5 = v10;
  v6 = v11;
  v7 = v12;
  v8 = v13;
  if (one-time initialization token for topLeading != -1)
    swift_once();
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = v8;
  result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance MoveTransition.MoveLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char *v2;

  return MoveTransition.MoveLayout.placement(of:in:)(a1, *v2, a2);
}

void MoveTransition.body(content:phase:)(char a1@<W1>, char *a2@<X8>)
{
  char *v2;
  char v3;

  if (a1 == 1)
    v3 = 4;
  else
    v3 = *v2;
  *a2 = v3;
}

uint64_t MoveTransition._makeContentTransition(transition:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  if (*(_BYTE *)a1 != 3)
  {
    v4 = *v1;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_23527E860;
    __asm { BR              X9 }
  }
  result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

void protocol witness for Transition.body(content:phase:) in conformance MoveTransition(char a1@<W1>, char *a2@<X8>)
{
  char *v2;
  char v3;

  if (a1 == 1)
    v3 = 4;
  else
    v3 = *v2;
  *a2 = v3;
}

uint64_t associated type witness table accessor for Transition.Body : View in MoveTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for MoveTransition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234C72788 + 4 * byte_235291BB9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234C727BC + 4 * byte_235291BB4[v4]))();
}

uint64_t sub_234C727BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C727C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C727CCLL);
  return result;
}

uint64_t sub_234C727D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C727E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234C727E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C727EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MoveTransition()
{
  return &type metadata for MoveTransition;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>(255);
    v2[0] = &protocol witness table for PlaceholderContentView<A>;
    v2[1] = &protocol witness table for MoveTransition.MoveLayout;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for PlaceholderContentView<MoveTransition>, (uint64_t)&type metadata for MoveTransition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for PlaceholderContentView);
    v4 = type metadata accessor for ModifiedContent(a1, v2, (uint64_t)&type metadata for MoveTransition.MoveLayout, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>);
  }
}

uint64_t getEnumTagSinglePayload for MoveTransition.MoveLayout(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  if (*a1 <= 4u)
    v6 = 4;
  else
    v6 = *a1;
  v7 = v6 - 5;
  if (*a1 < 4u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MoveTransition.MoveLayout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234C729CC + 4 * byte_235291BC3[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234C72A00 + 4 * byte_235291BBE[v4]))();
}

uint64_t sub_234C72A00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C72A08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C72A10);
  return result;
}

uint64_t sub_234C72A1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C72A24);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234C72A28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C72A30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MoveTransition.MoveLayout()
{
  return &type metadata for MoveTransition.MoveLayout;
}

unint64_t instantiation function for generic protocol witness table for MoveTransition.MoveLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t HitTestableEventType<>.hitTestLocation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
}

uint64_t HitTestableEventType<>.hitTestRadius.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a1, a3);
}

uint64_t HitTestableEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13[2];
  uint64_t v14;
  _BYTE v15[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v9);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for HitTestableEventType);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(v13, (uint64_t)v15);
    outlined init with copy of AnyTrackedValue((uint64_t)v15, (uint64_t)v13);
    HitTestableEvent.init(_:)(v13, (uint64_t)v9);
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    v5 = v9[0];
    v6 = v10;
    v7 = v11;
    v8 = v12;
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = outlined destroy of HitTestableEventType?((uint64_t)v13);
    v7 = 0uLL;
    v5 = 0;
    v8 = 0;
    v6 = xmmword_235260F20;
  }
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  return result;
}

uint64_t outlined destroy of HitTestableEventType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for HitTestableEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for HitTestableEventType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HitTestableEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for HitTestableEventType);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HitTestableEventType?);
  }
}

void HitTestableEvent.phase.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *HitTestableEvent.phase.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*HitTestableEvent.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double HitTestableEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double HitTestableEvent.timestamp.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*HitTestableEvent.timestamp.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t HitTestableEvent.binding.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t HitTestableEvent.binding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*HitTestableEvent.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double HitTestableEvent.hitTestLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void HitTestableEvent.hitTestLocation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*HitTestableEvent.hitTestLocation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double HitTestableEvent.hitTestRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void HitTestableEvent.hitTestRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*HitTestableEvent.hitTestRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t HitTestableEvent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (**v8)(_QWORD *__return_ptr, _QWORD, _QWORD);
  char v9;
  uint64_t v10;
  uint64_t v11;
  double (*v12)(uint64_t, uint64_t);
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v18;

  v8 = *(void (***)(_QWORD *__return_ptr, _QWORD, _QWORD))(a3 + 8);
  v8[1](&v18, a2, v8);
  v9 = v18;
  v8[2](&v18, a2, v8);
  v10 = v18;
  v8[3](&v18, a2, v8);
  v11 = v18;
  v12 = *(double (**)(uint64_t, uint64_t))(a3 + 16);
  swift_retain();
  v13 = v12(a2, a3);
  v15 = v14;
  v16 = (*(double (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *(_BYTE *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(double *)(a4 + 24) = v13;
  *(_QWORD *)(a4 + 32) = v15;
  *(double *)(a4 + 40) = v16;
  return swift_release();
}

uint64_t HitTestableEvent.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double (*v15)(uint64_t, uint64_t);
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v23;

  v5 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(&v23, v5);
  v6 = v23;
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v7 + 8) + 16))(&v23, v8);
  v9 = v23;
  v11 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v10 + 8) + 24))(&v23, v11);
  v12 = v23;
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v15 = *(double (**)(uint64_t, uint64_t))(v14 + 16);
  swift_retain();
  v16 = v15(v13, v14);
  v18 = v17;
  v19 = a1[3];
  v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
  *(_BYTE *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(double *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v18;
  *(double *)(a2 + 40) = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

double protocol witness for HitTestableEventType.hitTestLocation.getter in conformance HitTestableEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double protocol witness for HitTestableEventType.hitTestRadius.getter in conformance HitTestableEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double protocol witness for HitTestableEventType.hitTestLocation.getter in conformance PanEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

BOOL specialized static HitTestableEvent.== infix(_:_:)(double *a1, double *a2)
{
  _BOOL8 result;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;

  result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1])
    return result;
  v4 = *((_QWORD *)a1 + 2);
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = *((_QWORD *)a2 + 2);
  v10 = a2[3];
  v9 = a2[4];
  if (!v4)
  {
    if (!v8)
    {
      if (v6 == v10 && v5 == v9)
        return v7 == a2[5];
      return 0;
    }
LABEL_14:
    swift_release();
    return 0;
  }
  if (!v8)
  {
    swift_retain();
    goto LABEL_14;
  }
  result = 0;
  if (v4 == v8 && v6 == v10 && v5 == v9)
    return v7 == a2[5];
  return result;
}

uint64_t dispatch thunk of HitTestableEventType.hitTestLocation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of HitTestableEventType.hitTestRadius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t initializeWithCopy for HitTestableEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HitTestableEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for HitTestableEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for HitTestableEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HitTestableEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HitTestableEvent()
{
  return &type metadata for HitTestableEvent;
}

uint64_t one-time initialization function for moduleLookupCache()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ThreadSpecific<[UnsafeRawPointer : String]>(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  pthread_key_create((pthread_key_t *)(v0 + 16), (void (__cdecl *)(void *))@objc closure #1 in ThreadSpecific.init(_:));
  result = swift_endAccess();
  static Tracing.moduleLookupCache = (_UNKNOWN *)v0;
  return result;
}

uint64_t traceBody<A>(_:body:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  void (*v23)(char *, unint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  _QWORD v36[3];
  uint64_t (*v37)(void);
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[24];

  v6 = type metadata accessor for OSSignpostID();
  v40 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v36 - v10;
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    return a1();
  v36[1] = a3;
  v36[2] = a2;
  v37 = a1;
  static OSSignpostID.exclusive.getter();
  LODWORD(v38) = static os_signpost_type_t.begin.getter();
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  v13 = AGTypeID.description.getter();
  v15 = v14;
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
  v17 = (unint64_t)v11;
  v18 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(inited + 32) = v13;
  v19 = inited + 32;
  *(_QWORD *)(inited + 64) = v18;
  *(_QWORD *)(inited + 40) = v15;
  v20 = specialized static Tracing.libraryName(defining:)();
  *(_QWORD *)(inited + 96) = v16;
  *(_QWORD *)(inited + 104) = v18;
  *(_QWORD *)(inited + 72) = v20;
  *(_QWORD *)(inited + 80) = v21;
  v39 = inited;
  if (one-time initialization token for _signpostLog != -1)
LABEL_25:
    swift_once();
  v22 = v38 | 0x14110014;
  v23 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
  v36[0] = v17;
  v23(v8, v17, v6);
  type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
  v17 = 0;
  v38 = xmmword_235283260;
  while (1)
  {
    v24 = swift_initStackObject();
    v25 = v24;
    *(_OWORD *)(v24 + 16) = v38;
    v26 = (_OWORD *)(v24 + 32);
    v27 = *(_QWORD *)(v39 + 16);
    if (v17 == v27)
    {
      *(_QWORD *)(v24 + 64) = 0;
      v28 = 0uLL;
      *v26 = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
    }
    else
    {
      if (v17 >= v27)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      outlined init with copy of AnyTrackedValue(v19 + 40 * v17++, (uint64_t)v26);
      v28 = 0uLL;
    }
    v29 = (_OWORD *)(v25 + 72);
    if (v17 == v27)
    {
      v30 = v25 + 112;
      *(_QWORD *)(v25 + 104) = 0;
      *v29 = v28;
      *(_OWORD *)(v25 + 88) = v28;
LABEL_13:
      *(_QWORD *)(v25 + 112) = 0;
      *(_OWORD *)(v25 + 120) = v28;
      v17 = v27;
      *(_OWORD *)(v25 + 136) = v28;
      goto LABEL_16;
    }
    if (v17 >= v27)
      goto LABEL_23;
    outlined init with copy of AnyTrackedValue(v19 + 40 * v17, (uint64_t)v29);
    v30 = v25 + 112;
    if (v17 + 1 == v27)
    {
      v28 = 0uLL;
      goto LABEL_13;
    }
    if (v17 + 1 >= v27)
      goto LABEL_24;
    outlined init with copy of AnyTrackedValue(v19 + 40 * (v17 + 1), v25 + 112);
    v17 += 2;
LABEL_16:
    specialized withKDebugValues(_:_:closure:)(v22, v25, v22, (uint64_t)v8);
    outlined init with copy of CVarArg?(v30, (uint64_t)v41);
    swift_bridgeObjectRelease();
    if (!v41[3])
      break;
    outlined destroy of ScrollStateRequest?((uint64_t)v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
    if (one-time initialization token for continuation != -1)
      swift_once();
    v31 = __swift_project_value_buffer(v6, (uint64_t)static OSSignpostID.continuation);
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 24))(v8, v31, v6);
  }
  swift_bridgeObjectRelease();
  outlined destroy of ScrollStateRequest?((uint64_t)v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
  v33 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
  v34 = v33(v8, v6);
  ((void (*)(uint64_t))v37)(v34);
  static os_signpost_type_t.end.getter();
  v35 = (char *)v36[0];
  OSSignpostID.rawValue.getter();
  kdebug_trace();
  return v33(v35, v6);
}

uint64_t traceRuleBody<A>(_:body:)@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unsigned int v23;
  void (*v24)(char *, unint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  _QWORD v35[3];
  void (*v36)(void);
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[24];

  v6 = type metadata accessor for OSSignpostID();
  v39 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v35 - v10;
  v12 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    LODWORD(v37) = v12;
    v35[1] = a3;
    v35[2] = a2;
    v36 = a1;
    static OSSignpostID.exclusive.getter();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v14 = AGTypeID.description.getter();
    v16 = v15;
    v17 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v18 = (unint64_t)v11;
    v19 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v14;
    v20 = inited + 32;
    *(_QWORD *)(inited + 64) = v19;
    *(_QWORD *)(inited + 40) = v16;
    v21 = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v17;
    *(_QWORD *)(inited + 104) = v19;
    *(_QWORD *)(inited + 72) = v21;
    *(_QWORD *)(inited + 80) = v22;
    v38 = inited;
    if (one-time initialization token for _signpostLog != -1)
LABEL_25:
      swift_once();
    v23 = v37 | 0x14110014;
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
    v35[0] = v18;
    v24(v8, v18, v6);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v25 = 0;
    v37 = xmmword_235283260;
    while (1)
    {
      v26 = swift_initStackObject();
      v27 = v26;
      *(_OWORD *)(v26 + 16) = v37;
      v28 = (_OWORD *)(v26 + 32);
      v18 = *(_QWORD *)(v38 + 16);
      if (v25 == v18)
      {
        *(_QWORD *)(v26 + 64) = 0;
        v29 = 0uLL;
        *v28 = 0u;
        *(_OWORD *)(v26 + 48) = 0u;
      }
      else
      {
        if (v25 >= v18)
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        outlined init with copy of AnyTrackedValue(v20 + 40 * v25++, (uint64_t)v28);
        v29 = 0uLL;
      }
      v30 = (_OWORD *)(v27 + 72);
      if (v25 == v18)
        break;
      if (v25 >= v18)
        goto LABEL_23;
      outlined init with copy of AnyTrackedValue(v20 + 40 * v25, (uint64_t)v30);
      v31 = v27 + 112;
      if (v25 + 1 == v18)
      {
        v29 = 0uLL;
        goto LABEL_13;
      }
      if (v25 + 1 >= v18)
        goto LABEL_24;
      outlined init with copy of AnyTrackedValue(v20 + 40 * (v25 + 1), v27 + 112);
      v25 += 2;
LABEL_16:
      specialized withKDebugValues(_:_:closure:)(v23, v27, v23, (uint64_t)v8);
      outlined init with copy of CVarArg?(v31, (uint64_t)v40);
      swift_bridgeObjectRelease();
      if (!v40[3])
      {
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v39 + 8);
        v33((char *)v35[0], v6);
        outlined destroy of ScrollStateRequest?((uint64_t)v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
        v33(v8, v6);
        a1 = v36;
        goto LABEL_21;
      }
      outlined destroy of ScrollStateRequest?((uint64_t)v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
      if (one-time initialization token for continuation != -1)
        swift_once();
      v32 = __swift_project_value_buffer(v6, (uint64_t)static OSSignpostID.continuation);
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 24))(v8, v32, v6);
    }
    v31 = v27 + 112;
    *(_QWORD *)(v27 + 104) = 0;
    *v30 = v29;
    *(_OWORD *)(v27 + 88) = v29;
LABEL_13:
    *(_QWORD *)(v27 + 112) = 0;
    *(_OWORD *)(v27 + 120) = v29;
    v25 = v18;
    *(_OWORD *)(v27 + 136) = v29;
    goto LABEL_16;
  }
LABEL_21:
  a1();
  return $defer #1 <A>() in traceRuleBody<A>(_:body:)();
}

uint64_t $defer #1 <A>() in traceRuleBody<A>(_:body:)()
{
  uint64_t v0;
  char v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int CurrentAttribute;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t Counter;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;

  v4 = type metadata accessor for OSSignpostID();
  v30 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - v8;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  v11 = CurrentAttribute;
  v1 = static os_signpost_type_t.end.getter();
  static os_signpost_type_t.event.getter();
  result = kdebug_is_enabled();
  if (!(_DWORD)result)
    return result;
  static OSSignpostID.exclusive.getter();
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  v29 = xmmword_235283260;
  *(_OWORD *)(inited + 16) = xmmword_235283260;
  *(_DWORD *)(inited + 32) = v11;
  v0 = inited + 32;
  v13 = MEMORY[0x24BEE4558];
  *(_QWORD *)(inited + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(inited + 64) = v13;
  v14 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 104) = v14;
  *(_QWORD *)(inited + 72) = 1;
  v15 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  *(_QWORD *)(inited + 112) = Counter;
  v3 = inited + 112;
  v17 = MEMORY[0x24BEE1ED8];
  *(_QWORD *)(inited + 136) = MEMORY[0x24BEE1E88];
  *(_QWORD *)(inited + 144) = v17;
  if (one-time initialization token for _signpostLog != -1)
    goto LABEL_16;
LABEL_4:
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v6, v9, v4);
  type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
  v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = v29;
  if (!*(_QWORD *)(inited + 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  v19 = v18;
  outlined init with copy of AnyTrackedValue(v0, v18 + 32);
  if (*(_QWORD *)(inited + 16) < 2uLL)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of AnyTrackedValue(inited + 72, v19 + 72);
  if (*(_QWORD *)(inited + 16) < 3uLL)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once();
LABEL_9:
    v21 = MEMORY[0x24BEE45D0];
    while (1)
    {
      v22 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 24))(v6, v22, v4);
      v23 = swift_initStackObject();
      *(_OWORD *)(v23 + 16) = v29;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_QWORD *)(v23 + 64) = 0;
      *(_QWORD *)(v23 + 72) = 0;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_OWORD *)(v23 + 96) = 0u;
      *(_OWORD *)(v23 + 128) = 0u;
      *(_QWORD *)(v23 + 144) = 0;
      *(_OWORD *)(v23 + 112) = 0u;
      v24 = v23 + 112;
      specialized withKDebugValues(_:_:closure:)(v1, v23, v1, (uint64_t)v6);
      outlined init with copy of CVarArg?(v24, (uint64_t)v31);
      swift_bridgeObjectRelease();
      v25 = v32;
      outlined destroy of ScrollStateRequest?((uint64_t)v31, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v21);
      if (!v25)
        break;
      if (one-time initialization token for continuation != -1)
        swift_once();
    }
    goto LABEL_13;
  }
  v27 = inited;
  v28 = v9;
  v1 |= 0x14u;
  outlined init with copy of AnyTrackedValue(v3, v19 + 112);
  specialized withKDebugValues(_:_:closure:)(v1, v19, v1, (uint64_t)v6);
  outlined init with copy of CVarArg?(v19 + 112, (uint64_t)v31);
  swift_bridgeObjectRelease();
  v20 = v32;
  outlined destroy of ScrollStateRequest?((uint64_t)v31, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
  if (v20)
  {
    if (one-time initialization token for continuation == -1)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v28, v4);
  return ((uint64_t (*)(char *, uint64_t))v26)(v6, v4);
}

Swift::UInt __swiftcall AGGraphRef.graphIdentity()()
{
  return AGGraphGetCounter();
}

uint64_t ViewGraph.graphIdentity.getter()
{
  uint64_t v0;
  uint64_t result;

  swift_beginAccess();
  result = *(_QWORD *)(v0 + 16);
  if (result)
    return AGGraphGetCounter();
  __break(1u);
  return result;
}

uint64_t DynamicProperty.linkValueDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, double);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14[2];
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v8((char *)v14 - v9, v1, a1, v6);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for DescriptiveDynamicProperty);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v14, (uint64_t)v16);
    v10 = v17;
    v11 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    v12 = DescriptiveDynamicProperty.linkValueDescription.getter(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of ScrollStateRequest?((uint64_t)v14, &lazy cache variable for type metadata for DescriptiveDynamicProperty?, &lazy cache variable for type metadata for DescriptiveDynamicProperty, (uint64_t)&protocol descriptor for DescriptiveDynamicProperty);
    ((void (*)(char *, uint64_t, uint64_t))v8)(v4, v1, a1);
    return String.init<A>(describing:)();
  }
  return v12;
}

uint64_t DescriptiveDynamicProperty.linkValueDescription.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD *__return_ptr);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  uint64_t v10;
  _QWORD v11[4];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v4 = *(void (**)(_QWORD *__return_ptr))(a2 + 8);
  v4(v11);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for DescriptiveDynamicProperty);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v9, (uint64_t)v12);
    v5 = v13;
    v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    v7 = DescriptiveDynamicProperty.linkValueDescription.getter(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    outlined destroy of ScrollStateRequest?((uint64_t)v9, &lazy cache variable for type metadata for DescriptiveDynamicProperty?, &lazy cache variable for type metadata for DescriptiveDynamicProperty, (uint64_t)&protocol descriptor for DescriptiveDynamicProperty);
    ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v4)(v12, a1, a2);
    return String.init<A>(describing:)();
  }
  return v7;
}

uint64_t State._linkValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for Binding(0, v6, a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - v9;
  State.projectedValue.getter(a1, (char *)&v12 - v9);
  a4[3] = v6;
  __swift_allocate_boxed_opaque_existential_1(a4);
  Binding.wrappedValue.getter(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Environment._linkValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Environment._linkValue.getter(a1, (uint64_t (*)(uint64_t))Environment.wrappedValue.getter, a2);
}

uint64_t Binding._linkValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Environment._linkValue.getter(a1, Binding.wrappedValue.getter, a2);
}

uint64_t Environment._linkValue.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = *(_QWORD *)(a1 + 16);
  __swift_allocate_boxed_opaque_existential_1(a3);
  return a2(a1);
}

const char *specialized static Tracing.libraryName(defining:)()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _OWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  const char *result;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  pthread_key_t v17;
  _OWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  Dl_info v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v0 = 0x206E776F6E6B6E55;
  v1 = MEMORY[0x23B7C80F8]();
  if (!v1)
    return (const char *)v0;
  v2 = (const void *)v1;
  if (one-time initialization token for moduleLookupCache != -1)
    swift_once();
  v3 = static Tracing.moduleLookupCache;
  swift_beginAccess();
  v4 = pthread_getspecific(*((_QWORD *)v3 + 2));
  if (!v4)
  {
    v4 = (_OWORD *)swift_slowAlloc();
    pthread_setspecific(*((_QWORD *)v3 + 2), v4);
    type metadata accessor for [UnsafeRawPointer : String]();
    v25.dli_saddr = v5;
    v25.dli_fname = (const char *)*((_QWORD *)v3 + 3);
    outlined init with take of Any(&v25, v4);
    swift_bridgeObjectRetain();
  }
  outlined init with copy of Any((uint64_t)v4, (uint64_t)&v25);
  type metadata accessor for [UnsafeRawPointer : String]();
  v7 = v6;
  swift_dynamicCast();
  if (*(_QWORD *)(v23 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
    if ((v9 & 1) != 0)
    {
      v0 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 16 * v8);
      swift_bridgeObjectRetain();
LABEL_16:
      swift_bridgeObjectRelease();
      return (const char *)v0;
    }
  }
  swift_bridgeObjectRelease();
  memset(&v25, 0, sizeof(v25));
  if (!dladdr(v2, &v25))
    return (const char *)v0;
  result = v25.dli_fname;
  if (v25.dli_fname)
  {
    v11 = String.init(cString:)();
    v12 = (void *)MEMORY[0x23B7C5DAC](v11);
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v12, sel_lastPathComponent);

    v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16 = static Tracing.moduleLookupCache;
    swift_beginAccess();
    v17 = v16[2];
    swift_bridgeObjectRetain();
    v18 = pthread_getspecific(v17);
    if (!v18)
    {
      v18 = (_OWORD *)swift_slowAlloc();
      pthread_setspecific(v16[2], v18);
      v24 = v7;
      *(_QWORD *)&v23 = v16[3];
      outlined init with take of Any(&v23, v18);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of Any((uint64_t)v18, (uint64_t)&v23);
    swift_dynamicCast();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v23 = v22;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v15, (uint64_t)v2, isUniquelyReferenced_nonNull_native);
    v20 = v23;
    swift_bridgeObjectRelease();
    v21 = pthread_getspecific(v16[2]);
    if (!v21)
    {
      v21 = (_QWORD *)swift_slowAlloc();
      pthread_setspecific(v16[2], v21);
      v24 = v7;
      *(_QWORD *)&v23 = v16[3];
      outlined init with take of Any(&v23, v21);
      swift_bridgeObjectRetain();
    }
    *v21 = v20;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Tracing()
{
  return &type metadata for Tracing;
}

uint64_t dispatch thunk of DescriptiveDynamicProperty._linkValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double CGSize.subscript.getter(char a1, double a2, double a3)
{
  double result;

  if ((a1 & 1) != 0)
    return a3;
  return result;
}

BOOL CGSize.isNegative.getter(double a1, double a2)
{
  return a2 < 0.0 || a1 < 0.0;
}

double CGSize.flushingNegatives.getter(double result)
{
  if (result <= 0.0)
    return 0.0;
  return result;
}

uint64_t CGSize.subscript.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

Swift::Bool __swiftcall CGSize.contains(point:)(CGPoint point)
{
  double v1;
  double v2;
  Swift::Bool v3;

  v3 = point.x >= 0.0;
  if (point.y < 0.0)
    v3 = 0;
  if (point.x >= v1)
    v3 = 0;
  return point.y < v2 && v3;
}

double CGSize.scaledBy(x:y:)(double a1, double a2, double a3)
{
  double result;

  result = a1 * a3;
  if (a3 == 0.0)
    return 0.0;
  return result;
}

double CGSize.scaled(by:)(double a1, double a2)
{
  double v2;

  v2 = a1 * a2;
  if (a2 == 0.0)
    return 0.0;
  return v2;
}

CGSize __swiftcall CGSize.scaled(by:)(CGSize by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGSize result;

  v3 = by.width * v1;
  if (v1 == 0.0)
    v3 = 0.0;
  v4 = by.height * v2;
  if (v2 == 0.0)
    v4 = 0.0;
  result.height = v4;
  result.width = v3;
  return result;
}

double CGSize.increasedBy(dWidth:dHeight:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

BOOL CGSize.isFinite.getter(double a1, double a2)
{
  return (~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0 && (~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0;
}

uint64_t CGSize.isNaN.getter(double a1, double a2)
{
  _BOOL4 v2;

  v2 = (~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

BOOL CGSize.hasZero.getter(double a1, double a2)
{
  return a2 == 0.0 || a1 == 0.0;
}

BOOL CGSize.isNonEmpty.getter(double a1, double a2)
{
  return a2 > 0.0 && a1 > 0.0;
}

double CGSize.flushingNaNs.getter(double result)
{
  double v1;

  if ((*(_QWORD *)&result & 0xFFFFFFFFFFFFFLL) != 0)
    v1 = 0.0;
  else
    v1 = result;
  if ((~*(_QWORD *)&result & 0x7FF0000000000000) == 0)
    return v1;
  return result;
}

BOOL CGSize.approximates(_:epsilon:)(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v5;

  v5 = vabdd_f64(a4, a1) < a3;
  return vabdd_f64(a5, a2) < a3 && v5;
}

double (*CGSize.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = a2;
  v3 = v2 + 1;
  if ((a2 & 1) == 0)
    v3 = v2;
  *(_QWORD *)a1 = *v3;
  return CGPoint.subscript.modify;
}

double CGSize.init(_:in:by:)(char a1, double a2, double a3)
{
  if ((a1 & 1) != 0)
    return a3;
  return a2;
}

Swift::Bool __swiftcall CGSize.containsAny(of:)(Swift::OpaquePointer of)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  Swift::Bool v8;
  Swift::Bool result;

  v3 = *((_QWORD *)of._rawValue + 2);
  if (!v3)
    return 0;
  v4 = v3 - 1;
  v5 = (double *)((char *)of._rawValue + 40);
  do
  {
    v6 = v4;
    v7 = *(v5 - 1);
    v8 = v7 >= 0.0;
    if (*v5 < 0.0)
      v8 = 0;
    if (v7 >= v1)
      v8 = 0;
    result = *v5 < v2 && v8;
    if (result)
      break;
    v4 = v6 - 1;
    v5 += 2;
  }
  while (v6);
  return result;
}

int64x2_t one-time initialization function for invalidValue()
{
  int64x2_t result;

  result = vdupq_n_s64(0xFFF0000000000000);
  static CGSize.invalidValue = (__int128)result;
  return result;
}

double static CGSize.invalidValue.getter()
{
  if (one-time initialization token for invalidValue != -1)
    swift_once();
  return *(double *)&static CGSize.invalidValue;
}

double HashableSize.width.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void HashableSize.width.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*HashableSize.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double HashableSize.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void HashableSize.height.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*HashableSize.height.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void HashableSize.init(_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double HashableSize.value.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void HashableSize.value.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

__n128 (*HashableSize.value.modify(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

BOOL static HashableSize.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void HashableSize.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

Swift::Int HashableSize.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HashableSize(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HashableSize()
{
  Hasher.init(_seed:)();
  HashableSize.hash(into:)();
  return Hasher._finalize()();
}

uint64_t (*CGSize.animatableData.modify(uint64_t a1))()
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return CGPoint.animatableData.modify;
}

double *CGSize.encode(to:)(double *result, double a2, double a3)
{
  double *v4;
  double v5;
  double v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;

  v4 = result;
  if (a2 != 0.0)
  {
    v5 = a2;
    v6 = fabs(a2);
    if (v6 >= 65536.0)
      v7 = 9;
    else
      v7 = 13;
    ProtobufEncoder.encodeVarint(_:)(v7);
    if (v6 >= 65536.0)
    {
      v9 = *((_QWORD *)v4 + 1);
      result = (double *)(v9 + 8);
      if (__OFADD__(v9, 8))
      {
        __break(1u);
      }
      else if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
      {
        *((_QWORD *)v4 + 1) = result;
        *(double *)(*(_QWORD *)v4 + v9) = v5;
        goto LABEL_12;
      }
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = v5;
    }
    else
    {
      v8 = *((_QWORD *)v4 + 1);
      result = (double *)(v8 + 4);
      if (__OFADD__(v8, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v5 = v5;
        if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
        {
          *((_QWORD *)v4 + 1) = result;
          *(_DWORD *)(*(_QWORD *)v4 + v8) = LODWORD(v5);
          goto LABEL_12;
        }
      }
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)result = LODWORD(v5);
    }
  }
LABEL_12:
  if (a3 != 0.0)
  {
    v10 = fabs(a3);
    if (v10 >= 65536.0)
      v11 = 17;
    else
      v11 = 21;
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      v12 = *((_QWORD *)v4 + 1);
      result = (double *)(v12 + 4);
      if (!__OFADD__(v12, 4))
      {
        *(float *)&a3 = a3;
        if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
        {
          *((_QWORD *)v4 + 1) = result;
          *(_DWORD *)(*(_QWORD *)v4 + v12) = LODWORD(a3);
          return result;
        }
        goto LABEL_30;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)result = LODWORD(a3);
      return result;
    }
    v13 = *((_QWORD *)v4 + 1);
    result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8))
      goto LABEL_29;
    if (*((_QWORD *)v4 + 2) < (uint64_t)result)
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = a3;
    }
    else
    {
      *((_QWORD *)v4 + 1) = result;
      *(double *)(*(_QWORD *)v4 + v13) = a3;
    }
  }
  return result;
}

double CGSize.init(from:)(_QWORD *a1)
{
  return specialized CGPoint.init(from:)(a1);
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CGSize(double *a1)
{
  double *v1;

  return CGSize.encode(to:)(a1, *v1, v1[1]);
}

unint64_t lazy protocol witness table accessor for type HashableSize and conformance HashableSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HashableSize and conformance HashableSize;
  if (!lazy protocol witness table cache variable for type HashableSize and conformance HashableSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HashableSize, &type metadata for HashableSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HashableSize and conformance HashableSize);
  }
  return result;
}

double sub_234C74CD8@<D0>(double *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = a1 + 1;
  if (!*a2)
    v3 = a1;
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

_QWORD *sub_234C74CF4(_QWORD *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = 8;
  if (!*a3)
    v3 = 0;
  *(_QWORD *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_234C74D10()
{
  return 0;
}

__n128 sub_234C74D20@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_234C74D2C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for HashableSize()
{
  return &type metadata for HashableSize;
}

void ResolvedColorProvider.colorDescription.getter(float a1, float a2, float a3, float a4)
{
  if (a1 == 0.0 && a2 == 0.0 && a3 == 0.0)
  {
    if (a4 != 0.0 && a4 != 1.0)
LABEL_19:
      Color.Resolved.description.getter(a1, a2, a3, a4);
  }
  else if (a1 != 1.0 || a2 != 1.0 || a3 != 1.0 || a4 != 1.0)
  {
    goto LABEL_19;
  }
}

Swift::Int ResolvedColorProvider.hashValue.getter(float a1, float a2, float a3, float a4)
{
  Swift::UInt32 v8;
  Swift::UInt32 v9;
  Swift::UInt32 v10;
  Swift::UInt32 v11;

  Hasher.init(_seed:)();
  if ((LODWORD(a1) & 0x7FFFFFFF) != 0)
    v8 = LODWORD(a1);
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0)
    v9 = LODWORD(a2);
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((LODWORD(a3) & 0x7FFFFFFF) != 0)
    v10 = LODWORD(a3);
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((LODWORD(a4) & 0x7FFFFFFF) != 0)
    v11 = LODWORD(a4);
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

float protocol witness for ColorProvider.resolve(in:) in conformance ResolvedColorProvider()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t protocol witness for ColorProvider.staticColor.getter in conformance ResolvedColorProvider()
{
  float *v0;
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  if (one-time initialization token for cache != -1)
    swift_once();
  return specialized ObjectCache.subscript.getter(v1, v2, v3, v4);
}

void protocol witness for ColorProvider.colorDescription.getter in conformance ResolvedColorProvider()
{
  float *v0;

  ResolvedColorProvider.colorDescription.getter(*v0, v0[1], v0[2], v0[3]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvedColorProvider()
{
  float *v0;

  return ResolvedColorProvider.hashValue.getter(*v0, v0[1], v0[2], v0[3]);
}

void protocol witness for Hashable.hash(into:) in conformance ResolvedColorProvider()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  Swift::UInt32 v7;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  if ((*v0 & 0x7FFFFFFF) != 0)
    v4 = *v0;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFF) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFF) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFF) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvedColorProvider()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  Swift::UInt32 v7;
  Swift::UInt32 v8;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFF) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFF) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v4 & 0x7FFFFFFF) != 0)
    v8 = v4;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedColorProvider(float32x4_t *a1, float32x4_t *a2)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1;
}

BOOL static Color.RGBColorSpace.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Color.RGBColorSpace.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Color.RGBColorSpace.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CGColorSpaceRef one-time initialization function for p3ColorSpace()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF228]);
  if (result)
    static Color.DisplayP3.p3ColorSpace = (uint64_t)result;
  else
    __break(1u);
  return result;
}

CGColorRef Color.DisplayP3.staticColor.getter(CGFloat a1, CGFloat a2, CGFloat a3, float a4)
{
  CGColorRef result;
  CGFloat v9[4];

  if (one-time initialization token for p3ColorSpace != -1)
    swift_once();
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  result = CGColorCreate((CGColorSpaceRef)static Color.DisplayP3.p3ColorSpace, v9);
  if (!result)
    __break(1u);
  return result;
}

Swift::Int Color.DisplayP3.hashValue.getter(double a1, double a2, double a3, float a4)
{
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt32 v11;

  Hasher.init(_seed:)();
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)&a1;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)&a2;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = *(_QWORD *)&a3;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((LODWORD(a4) & 0x7FFFFFFF) != 0)
    v11 = LODWORD(a4);
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

float protocol witness for ColorProvider.resolve(in:) in conformance Color.DisplayP3()
{
  double *v0;
  float v1;
  float v2;
  float v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  return specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v1, v2, v3);
}

CGColorRef protocol witness for ColorProvider.staticColor.getter in conformance Color.DisplayP3()
{
  uint64_t v0;

  return Color.DisplayP3.staticColor.getter(*(CGFloat *)v0, *(CGFloat *)(v0 + 8), *(CGFloat *)(v0 + 16), *(float *)(v0 + 24));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.DisplayP3()
{
  uint64_t v0;

  return Color.DisplayP3.hashValue.getter(*(double *)v0, *(double *)(v0 + 8), *(double *)(v0 + 16), *(float *)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance Color.DisplayP3()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt32 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt32 v7;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_DWORD *)(v0 + 24);
  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)v0;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFF) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.DisplayP3()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt32 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt32 v8;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_DWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v4 & 0x7FFFFFFF) != 0)
    v8 = v4;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Color.DisplayP3(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24);
}

float *Color.init(_:white:opacity:)(_BYTE *a1, double a2, double a3)
{
  char *v4;
  float v5;
  float v6;
  float v7;
  float *result;
  float v9;
  float v10;
  char v11;
  char v12;

  if (*a1)
  {
    if (*a1 == 1)
    {
      v11 = 1;
      v4 = &v11;
    }
    else
    {
      v12 = 2;
      v4 = &v12;
    }
    return (float *)specialized Color.init(_:red:green:blue:opacity:)(v4, a2, a2, a2, a3);
  }
  else
  {
    v5 = a2;
    if (v5 <= 0.0)
      v6 = -v5;
    else
      v6 = a2;
    if (v6 <= 0.04045)
    {
      v7 = v6 * 0.077399;
    }
    else
    {
      v7 = 1.0;
      if (v6 != 1.0)
        v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
    }
    if (v5 <= 0.0)
      v9 = -v7;
    else
      v9 = v7;
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider, (uint64_t)&type metadata for ResolvedColorProvider);
    result = (float *)swift_allocObject();
    result[4] = v9;
    result[5] = v9;
    result[6] = v9;
    v10 = a3;
    result[7] = v10;
  }
  return result;
}

uint64_t Color.init(hue:saturation:brightness:opacity:)(Swift::Double a1, Swift::Double a2, Swift::Double a3, double a4)
{
  char v6;
  Swift::tuple_red_Double_green_Double_blue_Double v7;

  v7 = HSBToRGB(_:_:_:)(a1, a2, a3);
  v6 = 0;
  return specialized Color.init(_:red:green:blue:opacity:)(&v6, v7.red, v7.green, v7.blue, a4);
}

Swift::tuple_red_Double_green_Double_blue_Double __swiftcall HSBToRGB(_:_:_:)(Swift::Double a1, Swift::Double a2, Swift::Double a3)
{
  double v3;
  BOOL v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  Swift::tuple_red_Double_green_Double_blue_Double result;

  v3 = a1 * 6.0;
  v4 = a1 == 1.0;
  v5 = 0.0;
  if (!v4)
    v5 = v3;
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x234C755E4);
  }
  v6 = (uint64_t)v5;
  v7 = v5 - (double)(uint64_t)v5;
  v8 = (1.0 - a2) * a3;
  v9 = (1.0 - v7 * a2) * a3;
  v10 = (1.0 - (1.0 - v7) * a2) * a3;
  v11 = a3;
  v12 = v10;
  switch(v6)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v11 = v9;
      v12 = a3;
      a3 = v8;
      break;
    case 2:
      v11 = v8;
      v12 = a3;
      a3 = v10;
      break;
    case 3:
      v11 = v8;
      v12 = v9;
      break;
    case 4:
      v11 = v10;
      v12 = v8;
      break;
    default:
      v11 = a3;
      v12 = v8;
      v8 = v9;
LABEL_9:
      a3 = v8;
      break;
  }
  result.blue = a3;
  result.green = v12;
  result.red = v11;
  return result;
}

uint64_t specialized Color.init(_:red:green:blue:opacity:)(_BYTE *a1, double a2, double a3, double a4, double a5)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t result;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  if (*a1)
  {
    if (*a1 != 1)
    {
      type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.DisplayP3>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.DisplayP3 and conformance Color.DisplayP3, (uint64_t)&type metadata for Color.DisplayP3);
      result = swift_allocObject();
      *(double *)(result + 16) = a2;
      *(double *)(result + 24) = a3;
      *(double *)(result + 32) = a4;
      v15 = a5;
      *(float *)(result + 40) = v15;
      return result;
    }
    v9 = a2;
    v10 = a3;
    v11 = a4;
  }
  else
  {
    v12 = a2;
    if (v12 <= 0.0)
      v13 = -v12;
    else
      v13 = a2;
    if (v13 <= 0.04045)
    {
      v14 = v13 * 0.077399;
    }
    else
    {
      v14 = 1.0;
      if (v13 != 1.0)
        v14 = powf((float)(v13 * 0.94787) + 0.052133, 2.4);
    }
    if (v12 <= 0.0)
      v9 = -v14;
    else
      v9 = v14;
    v17 = a3;
    if (v17 <= 0.0)
      v18 = -v17;
    else
      v18 = v17;
    if (v18 <= 0.04045)
    {
      v19 = v18 * 0.077399;
    }
    else
    {
      v19 = 1.0;
      if (v18 != 1.0)
        v19 = powf((float)(v18 * 0.94787) + 0.052133, 2.4);
    }
    if (v17 <= 0.0)
      v10 = -v19;
    else
      v10 = v19;
    v20 = a4;
    if (v20 <= 0.0)
      v21 = -v20;
    else
      v21 = v20;
    if (v21 <= 0.04045)
    {
      v22 = v21 * 0.077399;
    }
    else
    {
      v22 = 1.0;
      if (v21 != 1.0)
        v22 = powf((float)(v21 * 0.94787) + 0.052133, 2.4);
    }
    if (v20 <= 0.0)
      v11 = -v22;
    else
      v11 = v22;
  }
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider, (uint64_t)&type metadata for ResolvedColorProvider);
  result = swift_allocObject();
  *(float *)(result + 16) = v9;
  *(float *)(result + 20) = v10;
  *(float *)(result + 24) = v11;
  v23 = a5;
  *(float *)(result + 28) = v23;
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.RGBColorSpace and conformance Color.RGBColorSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.RGBColorSpace and conformance Color.RGBColorSpace;
  if (!lazy protocol witness table cache variable for type Color.RGBColorSpace and conformance Color.RGBColorSpace)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.RGBColorSpace, &type metadata for Color.RGBColorSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.RGBColorSpace and conformance Color.RGBColorSpace);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Color.RGBColorSpace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234C758D4 + 4 * byte_235291E45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234C75908 + 4 * asc_235291E40[v4]))();
}

uint64_t sub_234C75908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C75910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C75918);
  return result;
}

uint64_t sub_234C75924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C7592CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234C75930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C75938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Color.RGBColorSpace()
{
  return &type metadata for Color.RGBColorSpace;
}

ValueMetadata *type metadata accessor for ResolvedColorProvider()
{
  return &type metadata for ResolvedColorProvider;
}

unint64_t instantiation function for generic protocol witness table for ResolvedColorProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.DisplayP3 and conformance Color.DisplayP3()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3;
  if (!lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DisplayP3, &type metadata for Color.DisplayP3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3;
  if (!lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DisplayP3, &type metadata for Color.DisplayP3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3;
  if (!lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.DisplayP3, &type metadata for Color.DisplayP3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3);
  }
  return result;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Color.DisplayP3()
{
  return &type metadata for Color.DisplayP3;
}

unint64_t instantiation function for generic protocol witness table for Color.DisplayP3(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.DisplayP3 and conformance Color.DisplayP3();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t AccessibilityAnnouncementPriority.platformRawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001ELL;
  if (*v0 != 1)
    v1 = 0xD00000000000001BLL;
  if (*v0)
    return v1;
  else
    return 0xD00000000000001ALL;
}

BOOL static AccessibilityAnnouncementPriority.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AccessibilityAnnouncementPriority.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AccessibilityAnnouncementPriority.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AccessibilitySpeechAttributes.alwaysIncludesPunctuation.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AccessibilitySpeechAttributes.alwaysIncludesPunctuation.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.alwaysIncludesPunctuation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.spellsOutCharacters.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AccessibilitySpeechAttributes.spellsOutCharacters.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.spellsOutCharacters.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.adjustedPitch.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AccessibilitySpeechAttributes.adjustedPitch.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.adjustedPitch.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void AccessibilitySpeechAttributes.announcementsPriority.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *AccessibilitySpeechAttributes.announcementsPriority.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.announcementsPriority.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.phoneticRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilitySpeechAttributes.phoneticRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.phoneticRepresentation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.init(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[8];
  _BYTE v24[8];
  _BYTE v25[16];

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release();
    swift_release();
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    v8 = v7;
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v22);
    swift_release_n();
    result = swift_release_n();
    v10 = v22;
  }
  else
  {
    v11 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v11, (uint64_t)v25);
    v10 = 3;
    swift_release_n();
    v12 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v24);
    swift_release_n();
    v13 = swift_retain_n();
    v6 = specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v23);
    v8 = v14;
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>(0, v15, v16, v17);
    BloomFilter.init(hashValue:)(v18);
    v19 = swift_retain_n();
    v20 = specialized find1<A>(_:key:filter:)(v19, v21);
    if (v20)
      v10 = *(_BYTE *)(v20 + 72);
    result = swift_release_n();
  }
  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_BYTE *)(a2 + 17) = v10;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

void __swiftcall AccessibilitySpeechAttributes.init(alwaysIncludesPunctuation:spellsOutCharacters:adjustedPitch:announcementsPriority:phoneticRepresentation:)(SwiftUI::AccessibilitySpeechAttributes *__return_ptr retstr, Swift::Bool_optional alwaysIncludesPunctuation, Swift::Bool_optional spellsOutCharacters, Swift::Double_optional adjustedPitch, SwiftUI::AccessibilityAnnouncementPriority_optional announcementsPriority, Swift::String_optional phoneticRepresentation)
{
  void *v6;
  SwiftUI::AccessibilityAnnouncementPriority v7;

  v7 = *(_BYTE *)phoneticRepresentation.value._countAndFlagsBits;
  retstr->alwaysIncludesPunctuation = alwaysIncludesPunctuation;
  retstr->spellsOutCharacters = spellsOutCharacters;
  retstr->adjustedPitch.value = *(Swift::Double *)&adjustedPitch.is_nil;
  retstr->adjustedPitch.is_nil = announcementsPriority.value & 1;
  retstr->announcementsPriority.value = v7;
  retstr->phoneticRepresentation.value._countAndFlagsBits = (uint64_t)phoneticRepresentation.value._object;
  retstr->phoneticRepresentation.value._object = v6;
}

uint64_t AccessibilitySpeechAttributes.applyTo(environment:)(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_BYTE *)(v1 + 1);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 17);
  v7 = *a1;
  v8 = *(_BYTE *)v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v8);
  swift_release();
  v9 = a1[1];
  if (v9)
  {
    v10 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v10);
    swift_release();
    swift_release();
  }
  swift_release();
  v11 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v3);
  swift_release();
  if (v9)
  {
    v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  v13 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v4, v5);
  swift_release();
  if (v9)
  {
    v14 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v13, v14);
    swift_release();
    swift_release();
  }
  swift_release();
  v15 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v6);
  swift_release();
  if (v9)
  {
    v16 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v15, v16);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void __swiftcall AccessibilitySpeechAttributes.combined(with:)(SwiftUI::AccessibilitySpeechAttributes *__return_ptr retstr, SwiftUI::AccessibilitySpeechAttributes *with)
{
  unsigned __int8 *v2;
  Swift::Bool value;
  Swift::Double v5;
  SwiftUI::AccessibilityAnnouncementPriority v6;
  int v7;
  int v8;
  double v9;
  int v10;
  int v11;
  uint64_t countAndFlagsBits;
  void *v13;
  SwiftUI::AccessibilityAnnouncementPriority v14;
  Swift::Double v15;
  Swift::Bool v16;
  Swift::Bool v17;
  Swift::Bool v18;
  Swift::Bool is_nil;

  value = with->spellsOutCharacters.value;
  v5 = with->adjustedPitch.value;
  v18 = with->alwaysIncludesPunctuation.value;
  is_nil = with->adjustedPitch.is_nil;
  v6 = with->announcementsPriority.value;
  v7 = *v2;
  v8 = v2[1];
  v9 = *((double *)v2 + 1);
  v10 = v2[16];
  v11 = v2[17];
  if (*((_QWORD *)v2 + 4))
    countAndFlagsBits = *((_QWORD *)v2 + 3);
  else
    countAndFlagsBits = with->phoneticRepresentation.value._countAndFlagsBits;
  v13 = (void *)swift_bridgeObjectRetain();
  if (v11 == 3)
    v14 = v6;
  else
    v14 = (char)v11;
  if (v10)
    v15 = v5;
  else
    v15 = v9;
  if (v8 == 2)
    v16 = value;
  else
    v16 = v8;
  v17 = v18;
  if (v7 != 2)
    v17 = v7;
  retstr->alwaysIncludesPunctuation.value = v17;
  retstr->spellsOutCharacters.value = v16;
  retstr->adjustedPitch.value = v15;
  retstr->adjustedPitch.is_nil = v10 & is_nil;
  retstr->announcementsPriority.value = v14;
  retstr->phoneticRepresentation.value._countAndFlagsBits = countAndFlagsBits;
  retstr->phoneticRepresentation.value._object = v13;
}

uint64_t Text.Style.resolveAccessibilitySpeechAttributes(into:environment:includeDefaultAttributes:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v26;
  uint64_t v28[2];
  uint64_t v29[2];
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[8];
  _BYTE v35[8];
  _BYTE v36[16];

  v26 = a3;
  v5 = *a2;
  v6 = a2[1];
  v8 = v4[27];
  v7 = v4[28];
  v9 = v4[29];
  v10 = v4[31];
  if (v10 == 1 || BYTE1(v9) == 3)
  {
    if (v6)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, (char *)v28);
      swift_release_n();
      swift_release_n();
      LOBYTE(v15) = v28[0];
      if (v10 == 1)
        goto LABEL_14;
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>(0, (uint64_t)a2, a3, a4);
      BloomFilter.init(hashValue:)(v12);
      v13 = swift_retain_n();
      v14 = specialized find1<A>(_:key:filter:)(v13, v29[0]);
      if (v14)
        LOBYTE(v15) = *(_BYTE *)(v14 + 72);
      else
        LOBYTE(v15) = 3;
      swift_release_n();
      if (v10 == 1)
        goto LABEL_14;
    }
  }
  else
  {
    v15 = v9 >> 8;
  }
  if (v8 != 2)
  {
    v16 = v8;
    goto LABEL_19;
  }
LABEL_14:
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    v16 = specialized PropertyList.Tracker.value<A>(_:for:)(v5);
    swift_release_n();
  }
  else
  {
    v17 = swift_retain_n();
    v16 = specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v36);
  }
  swift_release_n();
  if (v10 == 1)
  {
LABEL_20:
    if (v6)
    {
      swift_retain_n();
      swift_retain_n();
      LOBYTE(v18) = specialized PropertyList.Tracker.value<A>(_:for:)(v5);
    }
    else
    {
      v19 = swift_retain_n();
      LOBYTE(v18) = specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v35);
    }
    swift_release_n();
    swift_release_n();
    if (v10 == 1)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_19:
  if (BYTE1(v8) == 2)
    goto LABEL_20;
  v18 = v8 >> 8;
LABEL_25:
  if ((v9 & 1) == 0)
  {
    v20 = 0;
    goto LABEL_31;
  }
LABEL_27:
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    v7 = specialized PropertyList.Tracker.value<A>(_:for:)(v5);
    v22 = v21;
    swift_release_n();
  }
  else
  {
    v23 = swift_retain_n();
    v7 = specialized closure #1 in PropertyList.subscript.getter(v23, (uint64_t)v34);
    v22 = v24;
  }
  swift_release_n();
  v20 = v22 & 1;
LABEL_31:
  LOBYTE(v29[0]) = v16;
  BYTE1(v29[0]) = v18;
  v29[1] = v7;
  v30 = v20;
  v31 = v15;
  v32 = 0;
  v33 = 0;
  v28[0] = v5;
  v28[1] = v6;
  return specialized static AccessibilityCore.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(a1, (char *)v29, v28, v26 & 1);
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>);
  }
}

uint64_t specialized static AccessibilitySpeechAttributes.== infix(_:_:)(double *a1, double *a2)
{
  int v4;
  int v5;
  double v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  char v21;

  v4 = *(unsigned __int8 *)a1;
  v5 = *((unsigned __int8 *)a1 + 1);
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  v8 = *((unsigned __int8 *)a1 + 17);
  v9 = *((_QWORD *)a1 + 3);
  v10 = *((_QWORD *)a1 + 4);
  v11 = *(unsigned __int8 *)a2;
  v12 = *((unsigned __int8 *)a2 + 1);
  v13 = a2[1];
  v14 = *((unsigned __int8 *)a2 + 16);
  v15 = *((unsigned __int8 *)a2 + 17);
  v16 = *((_QWORD *)a2 + 3);
  v17 = *((_QWORD *)a2 + 4);
  if (v4 == 2)
  {
    if (v11 != 2)
      return 0;
  }
  else
  {
    v18 = 0;
    v19 = (v4 & 1) == 0;
    if (v11 == 2 || ((v19 ^ v11) & 1) == 0)
      return v18;
  }
  if (v5 == 2)
  {
    if (v12 != 2)
      return 0;
  }
  else
  {
    v18 = 0;
    v20 = (v5 & 1) == 0;
    if (v12 == 2 || ((v20 ^ v12) & 1) == 0)
      return v18;
  }
  if ((v7 & 1) != 0)
  {
    if (!v14)
      return 0;
  }
  else
  {
    if (v6 == v13)
      v21 = v14;
    else
      v21 = 1;
    if ((v21 & 1) != 0)
      return 0;
  }
  if (v8 == 3)
  {
    if (v15 != 3)
      return 0;
  }
  else
  {
    v18 = 0;
    if (v15 == 3 || v8 != v15)
      return v18;
  }
  if (v10)
  {
    if (!v17 || (v9 != v16 || v10 != v17) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority;
  if (!lazy protocol witness table cache variable for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityAnnouncementPriority, &type metadata for AccessibilityAnnouncementPriority);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessibilityAnnouncementPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234C766D8 + 4 * byte_235292015[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234C7670C + 4 * byte_235292010[v4]))();
}

uint64_t sub_234C7670C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C76714(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C7671CLL);
  return result;
}

uint64_t sub_234C76728(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C76730);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234C76734(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C7673C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAnnouncementPriority()
{
  return &type metadata for AccessibilityAnnouncementPriority;
}

uint64_t destroy for AccessibilitySpeechAttributes()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilitySpeechAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilitySpeechAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilitySpeechAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilitySpeechAttributes()
{
  return &type metadata for AccessibilitySpeechAttributes;
}

uint64_t static HVStack.resizeChildrenWithTrailingOverflow.getter()
{
  return 0;
}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _VStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _VStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout);
}

uint64_t static HVStack._makeView(root:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 20);
  v20 = *a1;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v10 = *(_OWORD *)(a2 + 5);
  v15 = *(_OWORD *)(a2 + 3);
  v16 = v10;
  v17 = *(_OWORD *)(a2 + 7);
  v18 = a2[9];
  v19 = v9;
  return (*(uint64_t (**)(int *, uint64_t *))(*(_QWORD *)(a6 + 8) + 88))(&v20, &v12);
}

void protocol witness for static Layout.layoutProperties.getter in conformance _VStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t static HVStack.layoutProperties.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1 + 56))();
  *(_BYTE *)a2 = result & 1;
  *(_WORD *)(a2 + 1) = 256;
  return result;
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _VStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t result;
  __int128 v5;
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = *v2;
  v6 = *((_BYTE *)v2 + 16);
  v7 = *a1;
  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_BYTE *)a1 + 16);
  v10 = *((_BYTE *)a1 + 17);
  v11 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  StackLayout.makeChildren()();
  result = 0;
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 17) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0xFFF0000000000000;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0xFFF0000000000000;
  *(_BYTE *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = 0uLL;
  *(_DWORD *)(a2 + 80) = v7;
  *(_QWORD *)(a2 + 88) = v8;
  *(_BYTE *)(a2 + 96) = v9;
  *(_BYTE *)(a2 + 97) = v10;
  *(_BYTE *)(a2 + 98) = 0;
  *(_QWORD *)(a2 + 104) = v11;
  return result;
}

uint64_t HVStack.makeCache(subviews:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  __int128 v38;
  char v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  char v49;
  char v50;
  unsigned __int8 v51;
  uint64_t v52;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v33 - v10;
  v12 = *a1;
  v34 = *((_QWORD *)a1 + 1);
  v36 = *((unsigned __int8 *)a1 + 16);
  v37 = v12;
  v35 = *((unsigned __int8 *)a1 + 17);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 56);
  swift_bridgeObjectRetain();
  LOBYTE(v13) = v13(a2, a3) & 1;
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  LOBYTE(AssociatedTypeWitness) = v17;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  *(_QWORD *)&v38 = v15;
  *((_QWORD *)&v38 + 1) = v16;
  v39 = AssociatedTypeWitness & 1;
  v40 = (char)v13;
  v41 = 0;
  v42 = 0xFFF0000000000000;
  v43 = 0;
  v44 = 0xFFF0000000000000;
  v45 = 0;
  v46 = 0uLL;
  v47 = v37;
  v48 = v34;
  v49 = v36;
  v50 = v35;
  v51 = v18 & 1;
  v52 = MEMORY[0x24BEE4AF8];
  StackLayout.makeChildren()();
  v19 = v39;
  v20 = v40;
  v21 = v41;
  v22 = v42;
  v23 = v43;
  v24 = v44;
  v25 = v45;
  v26 = v47;
  v27 = v48;
  v28 = v49;
  v29 = v50;
  result = v51;
  v31 = v52;
  v32 = v46;
  *(_OWORD *)a4 = v38;
  *(_BYTE *)(a4 + 16) = v19;
  *(_BYTE *)(a4 + 17) = v20;
  *(_QWORD *)(a4 + 24) = v21;
  *(_QWORD *)(a4 + 32) = v22;
  *(_BYTE *)(a4 + 40) = v23;
  *(_QWORD *)(a4 + 48) = v24;
  *(_BYTE *)(a4 + 56) = v25;
  *(_OWORD *)(a4 + 64) = v32;
  *(_DWORD *)(a4 + 80) = v26;
  *(_QWORD *)(a4 + 88) = v27;
  *(_BYTE *)(a4 + 96) = v28;
  *(_BYTE *)(a4 + 97) = v29;
  *(_BYTE *)(a4 + 98) = result;
  *(_QWORD *)(a4 + 104) = v31;
  return result;
}

_QWORD *protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(a1, a2, a3, a4, 1);
}

_QWORD *HVStack.updateCache(_:subviews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_BYTE *)(a2 + 16);
  v14 = *(_BYTE *)(a2 + 17);
  v22 = *(_DWORD *)a2;
  v23 = v12;
  v24 = v13;
  v25 = v14;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a4 + 56))(a3, a4, v9) & 1;
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  return StackLayout.update(children:majorAxis:minorAxisAlignment:uniformSpacing:)(&v22, v15, v17, v18, v19 & 1);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _VStackLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Layout.spacing(subviews:cache:) in conformance _VStackLayout(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))specialized HVStack.spacing(subviews:cache:));
}

unint64_t HVStack.spacing(subviews:cache:)@<X0>(double a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unint64_t result;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD **)(*(_QWORD *)&a1 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  result = StackLayout.UnmanagedImplementation.spacing()(a1, &v7);
  v6 = *(_BYTE *)(*(_QWORD *)&a1 + 97);
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)(*(_QWORD *)&a1 + 104) = v4;
  return result;
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _VStackLayout(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _VStackLayout(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, _QWORD, uint64_t))specialized HVStack.sizeThatFits(proposal:subviews:cache:));
}

double HVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, __n128 *a6)
{
  _QWORD *v11;
  uint64_t v12;
  double result;
  __n128 v14;

  v11 = (_QWORD *)a6[6].n128_u64[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  v12 = v11[2];
  v14.n128_u8[0] = a2 & 1;
  closure #1 in StackLayout.sizeThatFits(_:)(a6, (uint64_t)(v11 + 4), v12, *(double *)&a1, a2 & 1, *(double *)&a3, a4 & 1, &v14);
  result = v14.n128_f64[0];
  a6[6].n128_u64[1] = (unint64_t)v11;
  return result;
}

void HVStack.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6, double a7, double a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v19;

  v19 = *(_QWORD **)(a10 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  StackLayout.UnmanagedImplementation.commitPlacements(in:proposedSize:)(a1, a2 & 1, a3, a4 & 1, a10, (uint64_t)(v19 + 4), v19[2], a5, a6, a7, a8);
  *(_QWORD *)(a10 + 104) = v19;
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _VStackLayout(unint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  return HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  return HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  return HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  return StackLayout.explicitAlignment(_:in:proposal:)(a1, a2, a3 & 1, a4, a5 & 1, a6, a7, a8, a9);
}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _HStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _VStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout);
}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _VStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  void (*v18)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33;

  v10 = *a1;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v22 = *(_OWORD *)(a2 + 5);
  v23 = *(_OWORD *)(a2 + 3);
  v21 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1)
    swift_once();
  v16 = swift_beginAccess();
  v17 = static CoreGlue.shared;
  v33 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v23;
  v29 = v22;
  v30 = v21;
  v31 = v14;
  v32 = v15;
  v18 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                                    + 0xB0);
  v19 = a7(v16);
  v20 = v17;
  v18(&v33, &v25, a3, a4, a5, v19);

}

void protocol witness for static Layout.layoutProperties.getter in conformance _HStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _HStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t result;
  __int128 v5;
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = *v2;
  v6 = *((_BYTE *)v2 + 16);
  v7 = *a1;
  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_BYTE *)a1 + 16);
  v10 = *((_BYTE *)a1 + 17);
  v11 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  StackLayout.makeChildren()();
  result = 0;
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 17) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0xFFF0000000000000;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0xFFF0000000000000;
  *(_BYTE *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = 0uLL;
  *(_DWORD *)(a2 + 80) = v7;
  *(_QWORD *)(a2 + 88) = v8;
  *(_BYTE *)(a2 + 96) = v9;
  *(_BYTE *)(a2 + 97) = v10;
  *(_BYTE *)(a2 + 98) = 0;
  *(_QWORD *)(a2 + 104) = v11;
  return result;
}

_QWORD *protocol witness for Layout.updateCache(_:subviews:) in conformance _HStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(a1, a2, a3, a4, 0);
}

_QWORD *protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 17);
  v10 = *(_QWORD *)v5;
  v11 = *(_QWORD *)(v5 + 8);
  v12 = *(_BYTE *)(v5 + 16);
  v14 = *(_DWORD *)a2;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  return StackLayout.update(children:majorAxis:minorAxisAlignment:uniformSpacing:)(&v14, a5, v10, v11, v12);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _VStackLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  int v6;

  if (*((_BYTE *)a1 + 17))
    v6 = 256;
  else
    v6 = 0;
  return a5(*a1, *((_QWORD *)a1 + 1), v6 | *((unsigned __int8 *)a1 + 16), a2, *(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 16));
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _VStackLayout(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, _QWORD, uint64_t))
{
  return a9(a1, a2 & 1, a3);
}

void protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _VStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6, double a7, double a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v19;

  v19 = *(_QWORD **)(a10 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  StackLayout.UnmanagedImplementation.commitPlacements(in:proposedSize:)(a1, a2 & 1, a3, a4 & 1, a10, (uint64_t)(v19 + 4), v19[2], a5, a6, a7, a8);
  *(_QWORD *)(a10 + 104) = v19;
}

uint64_t dispatch thunk of HVStack.spacing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of HVStack.alignment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static HVStack.majorAxis.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))() & 1;
}

uint64_t dispatch thunk of static HVStack.resizeChildrenWithTrailingOverflow.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t destroy for _StackLayoutCache()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _StackLayoutCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v4;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _StackLayoutCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v6) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _StackLayoutCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v4) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _StackLayoutCache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _StackLayoutCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _StackLayoutCache()
{
  return &type metadata for _StackLayoutCache;
}

unint64_t lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout;
  if (!lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _HStackLayout, &type metadata for _HStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout;
  if (!lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _HStackLayout, &type metadata for _HStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout);
  }
  return result;
}

void _BlurEffect.radius.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_BlurEffect.radius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BlurEffect.isOpaque.getter(char a1)
{
  return a1 & 1;
}

uint64_t _BlurEffect.isOpaque.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*_BlurEffect.isOpaque.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BlurEffect.init(radius:opaque:)(char a1)
{
  return a1 & 1;
}

void _BlurEffect.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*_BlurEffect.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

uint64_t _BlurEffect.descriptionAttributes.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2352828C0;
  *(_QWORD *)(v2 + 32) = 0x737569646172;
  *(_QWORD *)(v2 + 40) = 0xE600000000000000;
  *(_QWORD *)(v2 + 48) = Double.description.getter();
  *(_QWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v2 + 64) = 0x65757161704F7369;
  *(_QWORD *)(v2 + 72) = 0xE800000000000000;
  if ((a1 & 1) != 0)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0xE000000000000000;
  return v2;
}

double _BlurEffect.effectValue(size:)@<D0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D2>)
{
  uint64_t v6;
  double result;

  v6 = swift_allocObject();
  *(double *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a1 & 1;
  result = 0.0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_QWORD *)(v6 + 125) = 0;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 9;
  return result;
}

uint64_t sub_234C779D0()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

uint64_t static _BlurEffect.== infix(_:_:)(int a1, int a2, double a3, double a4)
{
  return (a3 == a4) & (a1 ^ a2 ^ 1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _BlurEffect(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _BlurEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 8);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_QWORD *)(v5 + 125) = 0;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t View.blur(radius:opaque:)(char a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  char v6;

  v5 = a4;
  v6 = a1;
  return View.modifier<A>(_:)(&v5, a2, &type metadata for _BlurEffect, a3);
}

unint64_t instantiation function for generic protocol witness table for _BlurEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect;
  if (!lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _BlurEffect, &type metadata for _BlurEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect);
  }
  return result;
}

double sub_234C77B78@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234C77B84(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t getEnumTagSinglePayload for _BlurEffect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _BlurEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BlurEffect()
{
  return &type metadata for _BlurEffect;
}

uint64_t sub_234C77C38(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _BlurEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _BlurEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

SwiftUI::AccessibilityTextContentType::RawValue_optional __swiftcall AccessibilityTextContentType.RawValue.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;

  v2 = 8;
  if (rawValue < 8)
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::AccessibilityTextContentType::RawValue_optional)rawValue;
}

uint64_t AccessibilityTextContentType.RawValue.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::AccessibilityTextContentType::RawValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTextContentType.RawValue(Swift::UInt *a1)
{
  return AccessibilityTextContentType.RawValue.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityTextContentType.RawValue()
{
  lazy protocol witness table accessor for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityTextContentType.RawValue()
{
  lazy protocol witness table accessor for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue();
  return RawRepresentable<>.encode(to:)();
}

void AccessibilityTextContentType.rawValue.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *AccessibilityTextContentType.rawValue.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*AccessibilityTextContentType.rawValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityTextContentType __swiftcall AccessibilityTextContentType.init(_:)(SwiftUI::AccessibilityTextContentType result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result.rawValue;
  return result;
}

void static AccessibilityTextContentType.plain.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AccessibilityTextContentType.console.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityTextContentType.fileSystem.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityTextContentType.messaging.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static AccessibilityTextContentType.narrative.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityTextContentType.sourceCode.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static AccessibilityTextContentType.spreadsheet.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static AccessibilityTextContentType.wordProcessing.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

_BYTE *static AccessibilityTextContentType.unwrap(codingProxy:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

SwiftUI::AccessibilityTextContentType_optional __swiftcall AccessibilityTextContentType.init(protobufValue:)(Swift::UInt protobufValue)
{
  char *v1;
  char v2;

  v2 = 8;
  if (protobufValue < 8)
    v2 = protobufValue;
  *v1 = v2;
  return (SwiftUI::AccessibilityTextContentType_optional)protobufValue;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTextContentType.RawValue, &type metadata for AccessibilityTextContentType.RawValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTextContentType.RawValue, &type metadata for AccessibilityTextContentType.RawValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTextContentType.RawValue, &type metadata for AccessibilityTextContentType.RawValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTextContentType.RawValue, &type metadata for AccessibilityTextContentType.RawValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTextContentType()
{
  return &type metadata for AccessibilityTextContentType;
}

uint64_t storeEnumTagSinglePayload for AccessibilityTextContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_234C77F48 + 4 * byte_235292225[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_234C77F7C + 4 * asc_235292220[v4]))();
}

uint64_t sub_234C77F7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C77F84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C77F8CLL);
  return result;
}

uint64_t sub_234C77F98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C77FA0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_234C77FA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C77FAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTextContentType.RawValue()
{
  return &type metadata for AccessibilityTextContentType.RawValue;
}

uint64_t static GeometryEffect._affectsLayout.getter()
{
  return 1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t static GeometryEffect._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = a2[5];
  v10 = *((_DWORD *)a2 + 16);
  v11 = a2[9];
  v12 = *((_BYTE *)a2 + 80);
  v23 = *a1;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = *(_OWORD *)(a2 + 3);
  v18 = v9;
  v19 = *((_OWORD *)a2 + 3);
  v20 = v10;
  v21 = v11;
  v22 = v12;
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v23, (uint64_t)&v14, a3, a4, a5, *(_QWORD *)(a6 + 16));
}

uint64_t static GeometryEffect._viewListCount(inputs:body:)(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:));
}

uint64_t static GeometryEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 5);
  v16 = *(_OWORD *)(a2 + 3);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 7);
  v19 = a2[9];
  v20 = v10;
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)(&v21, (uint64_t)&v13, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _RotationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)@<X0>(double *a1@<X1>, unsigned __int8 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t result;
  double v21;
  Swift::String v22;
  char v23;
  double v24;
  double v25[9];
  double v26[9];
  double v27[18];
  double v28[4];
  __int128 v29;
  double v30;
  __int128 v31;

  v9 = *a2;
  v10 = v25;
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v25, a3, a4);
  if (v9 == 1)
  {
    v28[0] = -1.0;
    memset(&v28[1], 0, 24);
    v29 = xmmword_235281560;
    v30 = a6;
    v31 = xmmword_23528A280;
    ProjectionTransform.concatenating(_:)(v25, v26);
    v10 = v27;
    ProjectionTransform.concatenating(_:)(v28, v27);
    v11 = v27[1];
    v12 = v27[2];
    v13 = v27[3];
    v14 = v27[4];
    v16 = v27[5];
    v15 = v27[6];
    v17 = v27[7];
    v18 = v27[8];
  }
  else
  {
    v11 = v25[1];
    v12 = v25[2];
    v13 = v25[3];
    v14 = v25[4];
    v16 = v25[5];
    v15 = v25[6];
    v17 = v25[7];
    v18 = v25[8];
  }
  v19 = *v10;
  v27[9] = *v10;
  v27[10] = v11;
  v27[11] = v12;
  v27[12] = v13;
  v27[13] = v14;
  v27[14] = v16;
  v27[15] = v15;
  v27[16] = v17;
  v24 = v17;
  v27[17] = v18;
  if (ProjectionTransform.isInvertible.getter())
  {
    if (v12 != 0.0 || v16 != 0.0 || v18 != 1.0)
    {
      result = swift_allocObject();
      *(double *)(result + 16) = v19;
      *(double *)(result + 24) = v11;
      *(double *)(result + 32) = v12;
      *(double *)(result + 40) = v13;
      *(double *)(result + 48) = v14;
      *(double *)(result + 56) = v16;
      *(double *)(result + 64) = v15;
      *(double *)(result + 72) = v24;
      *(double *)(result + 80) = v18;
      v23 = 8;
      *(_BYTE *)(result + 88) = 1;
      goto LABEL_17;
    }
    if (v19 != 1.0 || v11 != 0.0 || v13 != 0.0 || v14 != 1.0)
    {
      result = swift_allocObject();
      *(double *)(result + 16) = v19;
      *(double *)(result + 24) = v11;
      *(double *)(result + 32) = v13;
      *(double *)(result + 40) = v14;
      *(double *)(result + 48) = v15;
      *(double *)(result + 56) = v24;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 64) = 0;
      v23 = 8;
      *(_BYTE *)(result + 88) = 0;
      goto LABEL_17;
    }
    result = 0;
    v21 = v24 + a1[1];
    *a1 = v15 + *a1;
    a1[1] = v21;
  }
  else
  {
    _StringGuts.grow(_:)(28);
    v22._object = (void *)0x80000002352E1010;
    v22._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v22);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    result = 0;
  }
  v23 = 19;
LABEL_17:
  *(_QWORD *)a5 = result;
  *(_DWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 12) = v23;
  return result;
}

__n128 ProjectionTransform.flipRTL(width:)(double a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  double v6[9];
  _OWORD v7[4];
  uint64_t v8;
  double v9[4];
  __int128 v10;
  double v11;
  __int128 v12;
  _OWORD v13[4];
  uint64_t v14;

  v10 = xmmword_235281560;
  v11 = a1;
  v12 = xmmword_23528A280;
  v2 = *v1;
  v13[1] = v1[1];
  v3 = v1[3];
  v13[2] = v1[2];
  v9[0] = -1.0;
  memset(&v9[1], 0, 24);
  v13[3] = v3;
  v14 = *((_QWORD *)v1 + 8);
  v13[0] = v2;
  ProjectionTransform.concatenating(_:)((double *)v13, v6);
  ProjectionTransform.concatenating(_:)(v9, (double *)v7);
  v4 = v7[3];
  v1[2] = v7[2];
  v1[3] = v4;
  *((_QWORD *)v1 + 8) = v8;
  result = (__n128)v7[1];
  *v1 = v7[0];
  v1[1] = (__int128)result;
  return result;
}

uint64_t protocol witness for static GeometryEffectProvider.resolve(effect:origin:size:layoutDirection:) in conformance DefaultGeometryEffectProvider<A>@<X0>(double *a1@<X1>, unsigned __int8 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4, a5);
}

uint64_t static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[5];
  int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v12 = *a1;
  v13 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 32);
  v25 = v13;
  v26 = *(_OWORD *)(a2 + 64);
  v27 = *(_DWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)a2;
  v23 = v14;
  LODWORD(v19[0]) = v12;
  type metadata accessor for _GraphValue(0, a5, (uint64_t)a3, a4);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _GraphValue<_RotationEffect>, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _GraphValue);
  if (swift_dynamicCast())
    return specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)(v21, (uint64_t)&v22, a3, a7);
  LODWORD(v19[0]) = v12;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _GraphValue<_Rotation3DEffect>, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _GraphValue);
  if (swift_dynamicCast())
    return specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)(v21, (uint64_t)&v22, a3, a7);
  v17 = type metadata accessor for DefaultGeometryEffectProvider(0, a5, a6, v16);
  v21 = v12;
  v19[2] = v24;
  v19[3] = v25;
  v19[4] = v26;
  v20 = v27;
  v19[0] = v22;
  v19[1] = v23;
  v18 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultGeometryEffectProvider<A>, v17);
  return static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)((int *)&v21, v19, (uint64_t (*)(void))a3, a4, v17, v18, a7);
}

uint64_t specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int OffsetAttribute2;
  unsigned __int8 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  Swift::UInt32 v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned __int8 v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  void (*v111)(__int128 *, _QWORD);
  __int16 v112;
  int v113;
  int v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  Swift::UInt32 v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  unsigned __int8 v152;
  unsigned int v153;
  unsigned __int8 v154;
  unsigned int v155;
  unsigned __int8 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE v161[20];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v163 = *(_OWORD *)(a2 + 16);
  v164 = v5;
  v162 = *(_OWORD *)a2;
  if ((BYTE4(v5) & 0x20) == 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    v159 = *(_OWORD *)(a2 + 32);
    v160 = v6;
    *(_OWORD *)v161 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v161[16] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v157 = *(_OWORD *)a2;
    v158 = v7;
    return a3(a1, &v157);
  }
  v9 = a1;
  v112 = WORD2(v5);
  if ((BYTE4(v5) & 1) != 0)
  {
    v143 = a1;
  }
  else
  {
    swift_beginAccess();
    *(_QWORD *)&v157 = __PAIR64__(*(_DWORD *)(v163 + 16), v9);
    *((_QWORD *)&v157 + 1) = __PAIR64__(DWORD2(v162), DWORD2(v163));
    LODWORD(v158) = HIDWORD(v163);
    v159 = 0uLL;
    *((_QWORD *)&v158 + 1) = 0;
    LOBYTE(v160) = 1;
    *((_QWORD *)&v160 + 1) = 0;
    *(_DWORD *)v161 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>();
    v10 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    v143 = v10;
    AGGraphSetFlags();
  }
  KeyPath = swift_getKeyPath();
  v12 = v163;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v162);
  v138 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v162);
  swift_release();
  v131 = *(_DWORD *)(a2 + 8);
  v141 = *(_QWORD *)(a2 + 16);
  v142 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 24);
  v128 = *(_DWORD *)(a2 + 36);
  v139 = *(_QWORD *)(a2 + 48);
  v140 = *(_QWORD *)(a2 + 40);
  v122 = *(_DWORD *)(a2 + 32);
  v125 = *(_DWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 76);
  swift_beginAccess();
  v144 = *(_QWORD *)a2;
  v15 = *(_DWORD *)(a2 + 8);
  v120 = *(_QWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  v116 = *(_QWORD *)(a2 + 72);
  v118 = *(_QWORD *)(a2 + 64);
  v113 = *(_DWORD *)(a2 + 80);
  v21 = *(_OWORD *)(a2 + 48);
  v159 = *(_OWORD *)(a2 + 32);
  v160 = v21;
  *(_OWORD *)v161 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v161[16] = *(_DWORD *)(a2 + 80);
  v22 = *(_OWORD *)(a2 + 16);
  v157 = *(_OWORD *)a2;
  v158 = v22;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v23 = _ViewInputs.geometryTransaction()();
  v24 = swift_getKeyPath();
  v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(v24);
  swift_release();
  if ((*(_BYTE *)(v12 + 81) & 1) != 0
    || (_DWORD)v118 != *(_DWORD *)(v12 + 32)
    || (_DWORD)v116 != *(_DWORD *)(v12 + 36)
    || v25 != *(_DWORD *)(v12 + 40)
    || v15 != *(_DWORD *)(v12 + 44)
    || v23 != *(_DWORD *)(v12 + 48)
    || v16 != *(_DWORD *)(v12 + 52))
  {
    *(_QWORD *)&v157 = v144;
    DWORD2(v157) = v15;
    *(_QWORD *)&v158 = v120;
    *((_QWORD *)&v158 + 1) = __PAIR64__(v23, v16);
    *(_QWORD *)&v159 = v17;
    *((_QWORD *)&v159 + 1) = v19;
    *(_QWORD *)&v160 = v18;
    *((_QWORD *)&v160 + 1) = v20;
    *(_QWORD *)v161 = v118;
    *(_QWORD *)&v161[8] = v116;
    *(_DWORD *)&v161[16] = v113;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v25, (uint64_t)&v150);
    OffsetAttribute2 = v155;
    v27 = v156;
    v28 = v152 | ((unint64_t)v153 << 32);
    v29 = v154 | ((unint64_t)v155 << 32);
    v30 = v151;
    *(_OWORD *)(v12 + 32) = v150;
    *(_OWORD *)(v12 + 48) = v30;
    *(_QWORD *)(v12 + 64) = v28;
    *(_QWORD *)(v12 + 72) = v29;
    *(_WORD *)(v12 + 80) = v27;
    if ((v27 & 1) == 0)
      goto LABEL_17;
LABEL_16:
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 76) = OffsetAttribute2;
    *(_BYTE *)(v12 + 80) = 0;
    goto LABEL_17;
  }
  if ((*(_BYTE *)(v12 + 80) & 1) != 0)
    goto LABEL_16;
  OffsetAttribute2 = *(_DWORD *)(v12 + 76);
LABEL_17:
  v121 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v145 = *(_QWORD *)a2;
  v31 = *(_DWORD *)(a2 + 8);
  v32 = *(_QWORD *)(a2 + 16);
  v33 = *(_DWORD *)(a2 + 24);
  v34 = *(_QWORD *)(a2 + 32);
  v36 = *(_QWORD *)(a2 + 40);
  v35 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 56);
  v117 = *(_QWORD *)(a2 + 72);
  v119 = *(_QWORD *)(a2 + 64);
  v114 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 48);
  v159 = *(_OWORD *)(a2 + 32);
  v160 = v38;
  *(_OWORD *)v161 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v161[16] = *(_DWORD *)(a2 + 80);
  v39 = *(_OWORD *)(a2 + 16);
  v157 = *(_OWORD *)a2;
  v158 = v39;
  outlined retain of _ViewInputs(a2);
  v40 = _ViewInputs.geometryTransaction()();
  v41 = swift_getKeyPath();
  v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
  swift_release();
  if ((*(_BYTE *)(v12 + 81) & 1) == 0
    && (_DWORD)v119 == *(_DWORD *)(v12 + 32)
    && (_DWORD)v117 == *(_DWORD *)(v12 + 36)
    && v42 == *(_DWORD *)(v12 + 40)
    && v31 == *(_DWORD *)(v12 + 44)
    && v40 == *(_DWORD *)(v12 + 48)
    && v33 == *(_DWORD *)(v12 + 52))
  {
    v43 = v143;
    v44 = v141;
    if ((*(_BYTE *)(v12 + 64) & 1) == 0)
    {
      LODWORD(v45) = *(_DWORD *)(v12 + 60);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  *(_QWORD *)&v157 = v145;
  DWORD2(v157) = v31;
  *(_QWORD *)&v158 = v32;
  *((_QWORD *)&v158 + 1) = __PAIR64__(v40, v33);
  *(_QWORD *)&v159 = v34;
  *((_QWORD *)&v159 + 1) = v36;
  *(_QWORD *)&v160 = v35;
  *((_QWORD *)&v160 + 1) = v37;
  *(_QWORD *)v161 = v119;
  *(_QWORD *)&v161[8] = v117;
  *(_DWORD *)&v161[16] = v114;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v42, (uint64_t)&v150);
  v46 = v151;
  v47 = v152;
  v48 = v156;
  v49 = v152 | ((unint64_t)v153 << 32);
  v50 = v154 | ((unint64_t)v155 << 32);
  *(_OWORD *)(v12 + 32) = v150;
  *(_OWORD *)(v12 + 48) = v46;
  *(_QWORD *)(v12 + 64) = v49;
  *(_QWORD *)(v12 + 72) = v50;
  *(_WORD *)(v12 + 80) = v48;
  v43 = v143;
  v44 = v141;
  if ((v47 & 1) != 0)
  {
LABEL_27:
    LODWORD(v45) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v45;
    *(_BYTE *)(v12 + 64) = 0;
    goto LABEL_29;
  }
  v45 = HIDWORD(*((_QWORD *)&v46 + 1));
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v51 = *(_DWORD *)(a2 + 60);
  *(_QWORD *)&v157 = __PAIR64__(v121, v43);
  *((_QWORD *)&v157 + 1) = __PAIR64__(v51, v45);
  LODWORD(v158) = v138;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for GeometryEffectTransform<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
  lazy protocol witness table accessor for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>();
  v52 = Attribute.init<A>(body:value:flags:update:)();
  v53 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  v54 = *(_DWORD *)(a2 + 64);
  v55 = *(_DWORD *)(a2 + 72);
  v56 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v162);
  v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v162);
  swift_release();
  *(_QWORD *)&v157 = __PAIR64__(v55, v54);
  DWORD2(v157) = v57;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  v58 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v157 = v142;
  DWORD2(v157) = v131;
  *(_QWORD *)&v158 = v44;
  *((_QWORD *)&v158 + 1) = v13;
  LODWORD(v159) = v122 | 0x1C;
  DWORD1(v159) = v128;
  *((_QWORD *)&v159 + 1) = v140;
  *(_QWORD *)&v160 = v139;
  *((_QWORD *)&v160 + 1) = __PAIR64__(v52, v125);
  *(_DWORD *)v161 = v53;
  *(_DWORD *)&v161[4] = v53;
  *(_DWORD *)&v161[8] = v58;
  *(_QWORD *)&v161[12] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v59 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))a3)(&v148, v59, &v157);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v60 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, v61, v62, v63);
  v65 = *(_QWORD *)(v60 + 16);
  if (!v65)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *a4 = v148;
    a4[1] = v149;
    return result;
  }
  v66 = v64;
  v67 = (_QWORD *)(v60 + 32);
  while (*v67 != v64)
  {
    v67 += 2;
    if (!--v65)
      goto LABEL_66;
  }
  v68 = ++lastIdentity;
  v69 = (_DWORD *)MEMORY[0x24BE096C0];
  if ((v112 & 0x100) == 0)
  {
LABEL_35:
    v137 = v68;
    swift_beginAccess();
    v70 = *(_QWORD *)a2;
    v71 = *(_DWORD *)(a2 + 8);
    v146 = *(_QWORD *)(a2 + 16);
    v72 = *(_DWORD *)(a2 + 24);
    v73 = *(_QWORD *)(a2 + 32);
    v132 = *(_QWORD *)(a2 + 40);
    v129 = *(_QWORD *)(a2 + 48);
    v74 = *(_QWORD *)(a2 + 56);
    v134 = *(_QWORD *)(a2 + 64);
    v126 = *(_QWORD *)(a2 + 72);
    v123 = *(_DWORD *)(a2 + 80);
    v75 = *(_OWORD *)(a2 + 48);
    v159 = *(_OWORD *)(a2 + 32);
    v160 = v75;
    *(_OWORD *)v161 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v161[16] = *(_DWORD *)(a2 + 80);
    v76 = *(_OWORD *)(a2 + 16);
    v157 = *(_OWORD *)a2;
    v158 = v76;
    outlined retain of _ViewInputs(a2);
    v77 = _ViewInputs.geometryTransaction()();
    v78 = swift_getKeyPath();
    v79 = specialized CachedEnvironment.attribute<A>(keyPath:)(v78);
    swift_release();
    if ((*(_BYTE *)(v12 + 81) & 1) == 0
      && (_DWORD)v134 == *(_DWORD *)(v12 + 32)
      && (_DWORD)v126 == *(_DWORD *)(v12 + 36)
      && v79 == *(_DWORD *)(v12 + 40)
      && v71 == *(_DWORD *)(v12 + 44)
      && v77 == *(_DWORD *)(v12 + 48)
      && v72 == *(_DWORD *)(v12 + 52))
    {
      if ((*(_BYTE *)(v12 + 64) & 1) != 0)
        goto LABEL_45;
      LODWORD(v85) = *(_DWORD *)(v12 + 60);
    }
    else
    {
      *(_QWORD *)&v157 = v70;
      DWORD2(v157) = v71;
      *(_QWORD *)&v158 = v146;
      *((_QWORD *)&v158 + 1) = __PAIR64__(v77, v72);
      *(_QWORD *)&v159 = v73;
      *((_QWORD *)&v159 + 1) = v132;
      *(_QWORD *)&v160 = v129;
      *((_QWORD *)&v160 + 1) = v74;
      *(_QWORD *)v161 = v134;
      *(_QWORD *)&v161[8] = v126;
      *(_DWORD *)&v161[16] = v123;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v79, (uint64_t)&v150);
      v80 = v151;
      v81 = v152;
      v82 = v156;
      v83 = v152 | ((unint64_t)v153 << 32);
      v84 = v154 | ((unint64_t)v155 << 32);
      *(_OWORD *)(v12 + 32) = v150;
      *(_OWORD *)(v12 + 48) = v80;
      *(_QWORD *)(v12 + 64) = v83;
      *(_QWORD *)(v12 + 72) = v84;
      *(_WORD *)(v12 + 80) = v82;
      if ((v81 & 1) != 0)
      {
LABEL_45:
        v135 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 60) = v135;
        *(_BYTE *)(v12 + 64) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v133 = *(_QWORD *)a2;
        v86 = *(_DWORD *)(a2 + 8);
        v147 = *(_QWORD *)(a2 + 16);
        v87 = *(_DWORD *)(a2 + 24);
        v88 = *(_QWORD *)(a2 + 32);
        v89 = *(_QWORD *)(a2 + 40);
        v90 = *(_QWORD *)(a2 + 48);
        v91 = *(_QWORD *)(a2 + 56);
        v127 = *(_QWORD *)(a2 + 72);
        v130 = *(_QWORD *)(a2 + 64);
        v124 = *(_DWORD *)(a2 + 80);
        v92 = *(_OWORD *)(a2 + 48);
        v159 = *(_OWORD *)(a2 + 32);
        v160 = v92;
        *(_OWORD *)v161 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v161[16] = *(_DWORD *)(a2 + 80);
        v93 = *(_OWORD *)(a2 + 16);
        v157 = *(_OWORD *)a2;
        v158 = v93;
        outlined retain of _ViewInputs(a2);
        v94 = _ViewInputs.geometryTransaction()();
        v95 = swift_getKeyPath();
        v96 = specialized CachedEnvironment.attribute<A>(keyPath:)(v95);
        swift_release();
        if ((*(_BYTE *)(v12 + 81) & 1) == 0
          && (_DWORD)v130 == *(_DWORD *)(v12 + 32)
          && (_DWORD)v127 == *(_DWORD *)(v12 + 36)
          && v96 == *(_DWORD *)(v12 + 40)
          && v86 == *(_DWORD *)(v12 + 44)
          && v94 == *(_DWORD *)(v12 + 48)
          && v87 == *(_DWORD *)(v12 + 52))
        {
          v102 = v143;
          if ((*(_BYTE *)(v12 + 80) & 1) == 0)
          {
            v97 = *(_DWORD *)(v12 + 76);
            goto LABEL_59;
          }
        }
        else
        {
          *(_QWORD *)&v157 = v133;
          DWORD2(v157) = v86;
          *(_QWORD *)&v158 = v147;
          *((_QWORD *)&v158 + 1) = __PAIR64__(v94, v87);
          *(_QWORD *)&v159 = v88;
          *((_QWORD *)&v159 + 1) = v89;
          *(_QWORD *)&v160 = v90;
          *((_QWORD *)&v160 + 1) = v91;
          *(_QWORD *)v161 = v130;
          *(_QWORD *)&v161[8] = v127;
          *(_DWORD *)&v161[16] = v124;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v96, (uint64_t)&v150);
          v97 = v155;
          v98 = v156;
          v99 = v152 | ((unint64_t)v153 << 32);
          v100 = v154 | ((unint64_t)v155 << 32);
          v101 = v151;
          *(_OWORD *)(v12 + 32) = v150;
          *(_OWORD *)(v12 + 48) = v101;
          *(_QWORD *)(v12 + 64) = v99;
          *(_QWORD *)(v12 + 72) = v100;
          *(_WORD *)(v12 + 80) = v98;
          v102 = v143;
          if ((v98 & 1) == 0)
            goto LABEL_59;
        }
        v97 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 76) = v97;
        *(_BYTE *)(v12 + 80) = 0;
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(_QWORD *)&v157 = v148;
        DWORD2(v157) = v149;
        v103 = PreferencesOutputs.subscript.getter(v66);
        if ((v103 & 0x100000000) != 0)
          v104 = *MEMORY[0x24BE096C0];
        else
          v104 = v103;
        v105 = v162;
        *(_QWORD *)&v150 = v162;
        outlined retain of _GraphInputs((uint64_t)&v162);
        outlined retain of _ViewInputs(a2);
        outlined retain of ViewTransform((uint64_t)&v150);
        v106 = specialized find<A>(_:key:)(v105);
        if (v106)
          v107 = *(_BYTE *)(v106 + 72);
        else
          v107 = 0;
        v108 = *(_DWORD *)(a2 + 68);
        outlined release of ViewTransform((uint64_t)&v150);
        outlined release of _GraphInputs((uint64_t)&v162);
        outlined release of _ViewInputs(a2);
        *(_QWORD *)&v157 = __PAIR64__(v102, v137);
        *((_QWORD *)&v157 + 1) = __PAIR64__(v97, v135);
        *(_QWORD *)&v158 = __PAIR64__(v108, v138);
        DWORD2(v158) = v104;
        BYTE12(v158) = v107;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for GeometryEffectDisplayList<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
        lazy protocol witness table accessor for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>();
        v109 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v157) = 0;
        PreferencesOutputs.subscript.setter(v109, v66, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v110);
        goto LABEL_66;
      }
      v85 = HIDWORD(*((_QWORD *)&v80 + 1));
    }
    v135 = v85;
    goto LABEL_48;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v69)
  {
    LODWORD(v150) = v68;
    v111 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v150);
    v111(&v157, 0);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int OffsetAttribute2;
  unsigned __int8 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  Swift::UInt32 v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned __int8 v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  void (*v111)(__int128 *, _QWORD);
  __int16 v112;
  int v113;
  int v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  Swift::UInt32 v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  unsigned __int8 v152;
  unsigned int v153;
  unsigned __int8 v154;
  unsigned int v155;
  unsigned __int8 v156;
  __int128 v157;
  _BYTE v158[72];
  char v159;
  uint64_t v160;
  int v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v163 = *(_OWORD *)(a2 + 16);
  v164 = v5;
  v162 = *(_OWORD *)a2;
  if ((BYTE4(v5) & 0x20) == 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v158[32] = v6;
    *(_OWORD *)&v158[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v158[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v157 = *(_OWORD *)a2;
    *(_OWORD *)v158 = v7;
    return a3(a1, &v157);
  }
  v9 = a1;
  v112 = WORD2(v5);
  if ((BYTE4(v5) & 1) != 0)
  {
    v143 = a1;
  }
  else
  {
    swift_beginAccess();
    *(_QWORD *)&v157 = __PAIR64__(*(_DWORD *)(v163 + 16), v9);
    *((_QWORD *)&v157 + 1) = __PAIR64__(DWORD2(v162), DWORD2(v163));
    *(_DWORD *)v158 = HIDWORD(v163);
    memset(&v158[8], 0, 64);
    v159 = 1;
    v160 = 0;
    v161 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>();
    v10 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    v143 = v10;
    AGGraphSetFlags();
  }
  KeyPath = swift_getKeyPath();
  v12 = v163;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v162);
  v138 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v162);
  swift_release();
  v131 = *(_DWORD *)(a2 + 8);
  v141 = *(_QWORD *)(a2 + 16);
  v142 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 24);
  v128 = *(_DWORD *)(a2 + 36);
  v139 = *(_QWORD *)(a2 + 48);
  v140 = *(_QWORD *)(a2 + 40);
  v122 = *(_DWORD *)(a2 + 32);
  v125 = *(_DWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 76);
  swift_beginAccess();
  v144 = *(_QWORD *)a2;
  v15 = *(_DWORD *)(a2 + 8);
  v120 = *(_QWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  v116 = *(_QWORD *)(a2 + 72);
  v118 = *(_QWORD *)(a2 + 64);
  v113 = *(_DWORD *)(a2 + 80);
  v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v158[32] = v21;
  *(_OWORD *)&v158[48] = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v158[64] = *(_DWORD *)(a2 + 80);
  v22 = *(_OWORD *)(a2 + 16);
  v157 = *(_OWORD *)a2;
  *(_OWORD *)v158 = v22;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v23 = _ViewInputs.geometryTransaction()();
  v24 = swift_getKeyPath();
  v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(v24);
  swift_release();
  if ((*(_BYTE *)(v12 + 81) & 1) != 0
    || (_DWORD)v118 != *(_DWORD *)(v12 + 32)
    || (_DWORD)v116 != *(_DWORD *)(v12 + 36)
    || v25 != *(_DWORD *)(v12 + 40)
    || v15 != *(_DWORD *)(v12 + 44)
    || v23 != *(_DWORD *)(v12 + 48)
    || v16 != *(_DWORD *)(v12 + 52))
  {
    *(_QWORD *)&v157 = v144;
    DWORD2(v157) = v15;
    *(_QWORD *)v158 = v120;
    *(_DWORD *)&v158[8] = v16;
    *(_DWORD *)&v158[12] = v23;
    *(_QWORD *)&v158[16] = v17;
    *(_QWORD *)&v158[24] = v19;
    *(_QWORD *)&v158[32] = v18;
    *(_QWORD *)&v158[40] = v20;
    *(_QWORD *)&v158[48] = v118;
    *(_QWORD *)&v158[56] = v116;
    *(_DWORD *)&v158[64] = v113;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v25, (uint64_t)&v150);
    OffsetAttribute2 = v155;
    v27 = v156;
    v28 = v152 | ((unint64_t)v153 << 32);
    v29 = v154 | ((unint64_t)v155 << 32);
    v30 = v151;
    *(_OWORD *)(v12 + 32) = v150;
    *(_OWORD *)(v12 + 48) = v30;
    *(_QWORD *)(v12 + 64) = v28;
    *(_QWORD *)(v12 + 72) = v29;
    *(_WORD *)(v12 + 80) = v27;
    if ((v27 & 1) == 0)
      goto LABEL_17;
LABEL_16:
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 76) = OffsetAttribute2;
    *(_BYTE *)(v12 + 80) = 0;
    goto LABEL_17;
  }
  if ((*(_BYTE *)(v12 + 80) & 1) != 0)
    goto LABEL_16;
  OffsetAttribute2 = *(_DWORD *)(v12 + 76);
LABEL_17:
  v121 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v145 = *(_QWORD *)a2;
  v31 = *(_DWORD *)(a2 + 8);
  v32 = *(_QWORD *)(a2 + 16);
  v33 = *(_DWORD *)(a2 + 24);
  v34 = *(_QWORD *)(a2 + 32);
  v36 = *(_QWORD *)(a2 + 40);
  v35 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 56);
  v117 = *(_QWORD *)(a2 + 72);
  v119 = *(_QWORD *)(a2 + 64);
  v114 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v158[32] = v38;
  *(_OWORD *)&v158[48] = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v158[64] = *(_DWORD *)(a2 + 80);
  v39 = *(_OWORD *)(a2 + 16);
  v157 = *(_OWORD *)a2;
  *(_OWORD *)v158 = v39;
  outlined retain of _ViewInputs(a2);
  v40 = _ViewInputs.geometryTransaction()();
  v41 = swift_getKeyPath();
  v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
  swift_release();
  if ((*(_BYTE *)(v12 + 81) & 1) == 0
    && (_DWORD)v119 == *(_DWORD *)(v12 + 32)
    && (_DWORD)v117 == *(_DWORD *)(v12 + 36)
    && v42 == *(_DWORD *)(v12 + 40)
    && v31 == *(_DWORD *)(v12 + 44)
    && v40 == *(_DWORD *)(v12 + 48)
    && v33 == *(_DWORD *)(v12 + 52))
  {
    v43 = v143;
    v44 = v141;
    if ((*(_BYTE *)(v12 + 64) & 1) == 0)
    {
      LODWORD(v45) = *(_DWORD *)(v12 + 60);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  *(_QWORD *)&v157 = v145;
  DWORD2(v157) = v31;
  *(_QWORD *)v158 = v32;
  *(_DWORD *)&v158[8] = v33;
  *(_DWORD *)&v158[12] = v40;
  *(_QWORD *)&v158[16] = v34;
  *(_QWORD *)&v158[24] = v36;
  *(_QWORD *)&v158[32] = v35;
  *(_QWORD *)&v158[40] = v37;
  *(_QWORD *)&v158[48] = v119;
  *(_QWORD *)&v158[56] = v117;
  *(_DWORD *)&v158[64] = v114;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v42, (uint64_t)&v150);
  v46 = v151;
  v47 = v152;
  v48 = v156;
  v49 = v152 | ((unint64_t)v153 << 32);
  v50 = v154 | ((unint64_t)v155 << 32);
  *(_OWORD *)(v12 + 32) = v150;
  *(_OWORD *)(v12 + 48) = v46;
  *(_QWORD *)(v12 + 64) = v49;
  *(_QWORD *)(v12 + 72) = v50;
  *(_WORD *)(v12 + 80) = v48;
  v43 = v143;
  v44 = v141;
  if ((v47 & 1) != 0)
  {
LABEL_27:
    LODWORD(v45) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v45;
    *(_BYTE *)(v12 + 64) = 0;
    goto LABEL_29;
  }
  v45 = HIDWORD(*((_QWORD *)&v46 + 1));
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v51 = *(_DWORD *)(a2 + 60);
  *(_QWORD *)&v157 = __PAIR64__(v121, v43);
  *((_QWORD *)&v157 + 1) = __PAIR64__(v51, v45);
  *(_DWORD *)v158 = v138;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
  lazy protocol witness table accessor for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>();
  v52 = Attribute.init<A>(body:value:flags:update:)();
  v53 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  v54 = *(_DWORD *)(a2 + 64);
  v55 = *(_DWORD *)(a2 + 72);
  v56 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v162);
  v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v162);
  swift_release();
  *(_QWORD *)&v157 = __PAIR64__(v55, v54);
  DWORD2(v157) = v57;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  v58 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v157 = v142;
  DWORD2(v157) = v131;
  *(_QWORD *)v158 = v44;
  *(_QWORD *)&v158[8] = v13;
  *(_DWORD *)&v158[16] = v122 | 0x1C;
  *(_DWORD *)&v158[20] = v128;
  *(_QWORD *)&v158[24] = v140;
  *(_QWORD *)&v158[32] = v139;
  *(_DWORD *)&v158[40] = v125;
  *(_DWORD *)&v158[44] = v52;
  *(_DWORD *)&v158[48] = v53;
  *(_DWORD *)&v158[52] = v53;
  *(_DWORD *)&v158[56] = v58;
  *(_QWORD *)&v158[60] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v59 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))a3)(&v148, v59, &v157);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v60 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, v61, v62, v63);
  v65 = *(_QWORD *)(v60 + 16);
  if (!v65)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *a4 = v148;
    a4[1] = v149;
    return result;
  }
  v66 = v64;
  v67 = (_QWORD *)(v60 + 32);
  while (*v67 != v64)
  {
    v67 += 2;
    if (!--v65)
      goto LABEL_66;
  }
  v68 = ++lastIdentity;
  v69 = (_DWORD *)MEMORY[0x24BE096C0];
  if ((v112 & 0x100) == 0)
  {
LABEL_35:
    v137 = v68;
    swift_beginAccess();
    v70 = *(_QWORD *)a2;
    v71 = *(_DWORD *)(a2 + 8);
    v146 = *(_QWORD *)(a2 + 16);
    v72 = *(_DWORD *)(a2 + 24);
    v73 = *(_QWORD *)(a2 + 32);
    v132 = *(_QWORD *)(a2 + 40);
    v129 = *(_QWORD *)(a2 + 48);
    v74 = *(_QWORD *)(a2 + 56);
    v134 = *(_QWORD *)(a2 + 64);
    v126 = *(_QWORD *)(a2 + 72);
    v123 = *(_DWORD *)(a2 + 80);
    v75 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v158[32] = v75;
    *(_OWORD *)&v158[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v158[64] = *(_DWORD *)(a2 + 80);
    v76 = *(_OWORD *)(a2 + 16);
    v157 = *(_OWORD *)a2;
    *(_OWORD *)v158 = v76;
    outlined retain of _ViewInputs(a2);
    v77 = _ViewInputs.geometryTransaction()();
    v78 = swift_getKeyPath();
    v79 = specialized CachedEnvironment.attribute<A>(keyPath:)(v78);
    swift_release();
    if ((*(_BYTE *)(v12 + 81) & 1) == 0
      && (_DWORD)v134 == *(_DWORD *)(v12 + 32)
      && (_DWORD)v126 == *(_DWORD *)(v12 + 36)
      && v79 == *(_DWORD *)(v12 + 40)
      && v71 == *(_DWORD *)(v12 + 44)
      && v77 == *(_DWORD *)(v12 + 48)
      && v72 == *(_DWORD *)(v12 + 52))
    {
      if ((*(_BYTE *)(v12 + 64) & 1) != 0)
        goto LABEL_45;
      LODWORD(v85) = *(_DWORD *)(v12 + 60);
    }
    else
    {
      *(_QWORD *)&v157 = v70;
      DWORD2(v157) = v71;
      *(_QWORD *)v158 = v146;
      *(_DWORD *)&v158[8] = v72;
      *(_DWORD *)&v158[12] = v77;
      *(_QWORD *)&v158[16] = v73;
      *(_QWORD *)&v158[24] = v132;
      *(_QWORD *)&v158[32] = v129;
      *(_QWORD *)&v158[40] = v74;
      *(_QWORD *)&v158[48] = v134;
      *(_QWORD *)&v158[56] = v126;
      *(_DWORD *)&v158[64] = v123;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v79, (uint64_t)&v150);
      v80 = v151;
      v81 = v152;
      v82 = v156;
      v83 = v152 | ((unint64_t)v153 << 32);
      v84 = v154 | ((unint64_t)v155 << 32);
      *(_OWORD *)(v12 + 32) = v150;
      *(_OWORD *)(v12 + 48) = v80;
      *(_QWORD *)(v12 + 64) = v83;
      *(_QWORD *)(v12 + 72) = v84;
      *(_WORD *)(v12 + 80) = v82;
      if ((v81 & 1) != 0)
      {
LABEL_45:
        v135 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 60) = v135;
        *(_BYTE *)(v12 + 64) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v133 = *(_QWORD *)a2;
        v86 = *(_DWORD *)(a2 + 8);
        v147 = *(_QWORD *)(a2 + 16);
        v87 = *(_DWORD *)(a2 + 24);
        v88 = *(_QWORD *)(a2 + 32);
        v89 = *(_QWORD *)(a2 + 40);
        v90 = *(_QWORD *)(a2 + 48);
        v91 = *(_QWORD *)(a2 + 56);
        v127 = *(_QWORD *)(a2 + 72);
        v130 = *(_QWORD *)(a2 + 64);
        v124 = *(_DWORD *)(a2 + 80);
        v92 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v158[32] = v92;
        *(_OWORD *)&v158[48] = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v158[64] = *(_DWORD *)(a2 + 80);
        v93 = *(_OWORD *)(a2 + 16);
        v157 = *(_OWORD *)a2;
        *(_OWORD *)v158 = v93;
        outlined retain of _ViewInputs(a2);
        v94 = _ViewInputs.geometryTransaction()();
        v95 = swift_getKeyPath();
        v96 = specialized CachedEnvironment.attribute<A>(keyPath:)(v95);
        swift_release();
        if ((*(_BYTE *)(v12 + 81) & 1) == 0
          && (_DWORD)v130 == *(_DWORD *)(v12 + 32)
          && (_DWORD)v127 == *(_DWORD *)(v12 + 36)
          && v96 == *(_DWORD *)(v12 + 40)
          && v86 == *(_DWORD *)(v12 + 44)
          && v94 == *(_DWORD *)(v12 + 48)
          && v87 == *(_DWORD *)(v12 + 52))
        {
          v102 = v143;
          if ((*(_BYTE *)(v12 + 80) & 1) == 0)
          {
            v97 = *(_DWORD *)(v12 + 76);
            goto LABEL_59;
          }
        }
        else
        {
          *(_QWORD *)&v157 = v133;
          DWORD2(v157) = v86;
          *(_QWORD *)v158 = v147;
          *(_DWORD *)&v158[8] = v87;
          *(_DWORD *)&v158[12] = v94;
          *(_QWORD *)&v158[16] = v88;
          *(_QWORD *)&v158[24] = v89;
          *(_QWORD *)&v158[32] = v90;
          *(_QWORD *)&v158[40] = v91;
          *(_QWORD *)&v158[48] = v130;
          *(_QWORD *)&v158[56] = v127;
          *(_DWORD *)&v158[64] = v124;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v96, (uint64_t)&v150);
          v97 = v155;
          v98 = v156;
          v99 = v152 | ((unint64_t)v153 << 32);
          v100 = v154 | ((unint64_t)v155 << 32);
          v101 = v151;
          *(_OWORD *)(v12 + 32) = v150;
          *(_OWORD *)(v12 + 48) = v101;
          *(_QWORD *)(v12 + 64) = v99;
          *(_QWORD *)(v12 + 72) = v100;
          *(_WORD *)(v12 + 80) = v98;
          v102 = v143;
          if ((v98 & 1) == 0)
            goto LABEL_59;
        }
        v97 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 76) = v97;
        *(_BYTE *)(v12 + 80) = 0;
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(_QWORD *)&v157 = v148;
        DWORD2(v157) = v149;
        v103 = PreferencesOutputs.subscript.getter(v66);
        if ((v103 & 0x100000000) != 0)
          v104 = *MEMORY[0x24BE096C0];
        else
          v104 = v103;
        v105 = v162;
        *(_QWORD *)&v150 = v162;
        outlined retain of _GraphInputs((uint64_t)&v162);
        outlined retain of _ViewInputs(a2);
        outlined retain of ViewTransform((uint64_t)&v150);
        v106 = specialized find<A>(_:key:)(v105);
        if (v106)
          v107 = *(_BYTE *)(v106 + 72);
        else
          v107 = 0;
        v108 = *(_DWORD *)(a2 + 68);
        outlined release of ViewTransform((uint64_t)&v150);
        outlined release of _GraphInputs((uint64_t)&v162);
        outlined release of _ViewInputs(a2);
        *(_QWORD *)&v157 = __PAIR64__(v102, v137);
        *((_QWORD *)&v157 + 1) = __PAIR64__(v97, v135);
        *(_DWORD *)v158 = v138;
        *(_DWORD *)&v158[4] = v108;
        *(_DWORD *)&v158[8] = v104;
        v158[12] = v107;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for GeometryEffectDisplayList<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
        lazy protocol witness table accessor for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>();
        v109 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v157) = 0;
        PreferencesOutputs.subscript.setter(v109, v66, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v110);
        goto LABEL_66;
      }
      v85 = HIDWORD(*((_QWORD *)&v80 + 1));
    }
    v135 = v85;
    goto LABEL_48;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v69)
  {
    LODWORD(v150) = v68;
    v111 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v150);
    v111(&v157, 0);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int OffsetAttribute2;
  unsigned __int8 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  Swift::UInt32 v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned __int8 v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  void (*v111)(__int128 *, _QWORD);
  __int16 v112;
  int v113;
  int v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  Swift::UInt32 v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  unsigned __int8 v152;
  unsigned int v153;
  unsigned __int8 v154;
  unsigned int v155;
  unsigned __int8 v156;
  __int128 v157;
  _BYTE v158[48];
  _BYTE v159[20];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v161 = *(_OWORD *)(a2 + 16);
  v162 = v5;
  v160 = *(_OWORD *)a2;
  if ((BYTE4(v5) & 0x20) == 0)
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v158[32] = v6;
    *(_OWORD *)v159 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v159[16] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v157 = *(_OWORD *)a2;
    *(_OWORD *)v158 = v7;
    return a3(a1, &v157);
  }
  v9 = a1;
  v112 = WORD2(v5);
  if ((BYTE4(v5) & 1) != 0)
  {
    v143 = a1;
  }
  else
  {
    swift_beginAccess();
    *(_QWORD *)&v157 = __PAIR64__(*(_DWORD *)(v161 + 16), v9);
    *((_QWORD *)&v157 + 1) = __PAIR64__(DWORD2(v160), DWORD2(v161));
    *(_DWORD *)v158 = HIDWORD(v161);
    memset(&v158[8], 0, 32);
    v158[40] = 1;
    *(_QWORD *)v159 = 0;
    *(_DWORD *)&v159[8] = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>();
    v10 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    v143 = v10;
    AGGraphSetFlags();
  }
  KeyPath = swift_getKeyPath();
  v12 = v161;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v160);
  v138 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v160);
  swift_release();
  v131 = *(_DWORD *)(a2 + 8);
  v141 = *(_QWORD *)(a2 + 16);
  v142 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 24);
  v128 = *(_DWORD *)(a2 + 36);
  v139 = *(_QWORD *)(a2 + 48);
  v140 = *(_QWORD *)(a2 + 40);
  v122 = *(_DWORD *)(a2 + 32);
  v125 = *(_DWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 76);
  swift_beginAccess();
  v144 = *(_QWORD *)a2;
  v15 = *(_DWORD *)(a2 + 8);
  v120 = *(_QWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  v116 = *(_QWORD *)(a2 + 72);
  v118 = *(_QWORD *)(a2 + 64);
  v113 = *(_DWORD *)(a2 + 80);
  v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v158[32] = v21;
  *(_OWORD *)v159 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v159[16] = *(_DWORD *)(a2 + 80);
  v22 = *(_OWORD *)(a2 + 16);
  v157 = *(_OWORD *)a2;
  *(_OWORD *)v158 = v22;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v23 = _ViewInputs.geometryTransaction()();
  v24 = swift_getKeyPath();
  v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(v24);
  swift_release();
  if ((*(_BYTE *)(v12 + 81) & 1) != 0
    || (_DWORD)v118 != *(_DWORD *)(v12 + 32)
    || (_DWORD)v116 != *(_DWORD *)(v12 + 36)
    || v25 != *(_DWORD *)(v12 + 40)
    || v15 != *(_DWORD *)(v12 + 44)
    || v23 != *(_DWORD *)(v12 + 48)
    || v16 != *(_DWORD *)(v12 + 52))
  {
    *(_QWORD *)&v157 = v144;
    DWORD2(v157) = v15;
    *(_QWORD *)v158 = v120;
    *(_DWORD *)&v158[8] = v16;
    *(_DWORD *)&v158[12] = v23;
    *(_QWORD *)&v158[16] = v17;
    *(_QWORD *)&v158[24] = v19;
    *(_QWORD *)&v158[32] = v18;
    *(_QWORD *)&v158[40] = v20;
    *(_QWORD *)v159 = v118;
    *(_QWORD *)&v159[8] = v116;
    *(_DWORD *)&v159[16] = v113;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v25, (uint64_t)&v150);
    OffsetAttribute2 = v155;
    v27 = v156;
    v28 = v152 | ((unint64_t)v153 << 32);
    v29 = v154 | ((unint64_t)v155 << 32);
    v30 = v151;
    *(_OWORD *)(v12 + 32) = v150;
    *(_OWORD *)(v12 + 48) = v30;
    *(_QWORD *)(v12 + 64) = v28;
    *(_QWORD *)(v12 + 72) = v29;
    *(_WORD *)(v12 + 80) = v27;
    if ((v27 & 1) == 0)
      goto LABEL_17;
LABEL_16:
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 76) = OffsetAttribute2;
    *(_BYTE *)(v12 + 80) = 0;
    goto LABEL_17;
  }
  if ((*(_BYTE *)(v12 + 80) & 1) != 0)
    goto LABEL_16;
  OffsetAttribute2 = *(_DWORD *)(v12 + 76);
LABEL_17:
  v121 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v145 = *(_QWORD *)a2;
  v31 = *(_DWORD *)(a2 + 8);
  v32 = *(_QWORD *)(a2 + 16);
  v33 = *(_DWORD *)(a2 + 24);
  v34 = *(_QWORD *)(a2 + 32);
  v36 = *(_QWORD *)(a2 + 40);
  v35 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 56);
  v117 = *(_QWORD *)(a2 + 72);
  v119 = *(_QWORD *)(a2 + 64);
  v114 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v158[32] = v38;
  *(_OWORD *)v159 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v159[16] = *(_DWORD *)(a2 + 80);
  v39 = *(_OWORD *)(a2 + 16);
  v157 = *(_OWORD *)a2;
  *(_OWORD *)v158 = v39;
  outlined retain of _ViewInputs(a2);
  v40 = _ViewInputs.geometryTransaction()();
  v41 = swift_getKeyPath();
  v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
  swift_release();
  if ((*(_BYTE *)(v12 + 81) & 1) == 0
    && (_DWORD)v119 == *(_DWORD *)(v12 + 32)
    && (_DWORD)v117 == *(_DWORD *)(v12 + 36)
    && v42 == *(_DWORD *)(v12 + 40)
    && v31 == *(_DWORD *)(v12 + 44)
    && v40 == *(_DWORD *)(v12 + 48)
    && v33 == *(_DWORD *)(v12 + 52))
  {
    v43 = v143;
    v44 = v141;
    if ((*(_BYTE *)(v12 + 64) & 1) == 0)
    {
      LODWORD(v45) = *(_DWORD *)(v12 + 60);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  *(_QWORD *)&v157 = v145;
  DWORD2(v157) = v31;
  *(_QWORD *)v158 = v32;
  *(_DWORD *)&v158[8] = v33;
  *(_DWORD *)&v158[12] = v40;
  *(_QWORD *)&v158[16] = v34;
  *(_QWORD *)&v158[24] = v36;
  *(_QWORD *)&v158[32] = v35;
  *(_QWORD *)&v158[40] = v37;
  *(_QWORD *)v159 = v119;
  *(_QWORD *)&v159[8] = v117;
  *(_DWORD *)&v159[16] = v114;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v42, (uint64_t)&v150);
  v46 = v151;
  v47 = v152;
  v48 = v156;
  v49 = v152 | ((unint64_t)v153 << 32);
  v50 = v154 | ((unint64_t)v155 << 32);
  *(_OWORD *)(v12 + 32) = v150;
  *(_OWORD *)(v12 + 48) = v46;
  *(_QWORD *)(v12 + 64) = v49;
  *(_QWORD *)(v12 + 72) = v50;
  *(_WORD *)(v12 + 80) = v48;
  v43 = v143;
  v44 = v141;
  if ((v47 & 1) != 0)
  {
LABEL_27:
    LODWORD(v45) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v45;
    *(_BYTE *)(v12 + 64) = 0;
    goto LABEL_29;
  }
  v45 = HIDWORD(*((_QWORD *)&v46 + 1));
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v51 = *(_DWORD *)(a2 + 60);
  *(_QWORD *)&v157 = __PAIR64__(v121, v43);
  *((_QWORD *)&v157 + 1) = __PAIR64__(v51, v45);
  *(_DWORD *)v158 = v138;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for GeometryEffectTransform<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
  lazy protocol witness table accessor for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>();
  v52 = Attribute.init<A>(body:value:flags:update:)();
  v53 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  v54 = *(_DWORD *)(a2 + 64);
  v55 = *(_DWORD *)(a2 + 72);
  v56 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v160);
  v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v160);
  swift_release();
  *(_QWORD *)&v157 = __PAIR64__(v55, v54);
  DWORD2(v157) = v57;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  v58 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v157 = v142;
  DWORD2(v157) = v131;
  *(_QWORD *)v158 = v44;
  *(_QWORD *)&v158[8] = v13;
  *(_DWORD *)&v158[16] = v122 | 0x1C;
  *(_DWORD *)&v158[20] = v128;
  *(_QWORD *)&v158[24] = v140;
  *(_QWORD *)&v158[32] = v139;
  *(_DWORD *)&v158[40] = v125;
  *(_DWORD *)&v158[44] = v52;
  *(_DWORD *)v159 = v53;
  *(_DWORD *)&v159[4] = v53;
  *(_DWORD *)&v159[8] = v58;
  *(_QWORD *)&v159[12] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v59 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))a3)(&v148, v59, &v157);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v60 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, v61, v62, v63);
  v65 = *(_QWORD *)(v60 + 16);
  if (!v65)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *a4 = v148;
    a4[1] = v149;
    return result;
  }
  v66 = v64;
  v67 = (_QWORD *)(v60 + 32);
  while (*v67 != v64)
  {
    v67 += 2;
    if (!--v65)
      goto LABEL_66;
  }
  v68 = ++lastIdentity;
  v69 = (_DWORD *)MEMORY[0x24BE096C0];
  if ((v112 & 0x100) == 0)
  {
LABEL_35:
    v137 = v68;
    swift_beginAccess();
    v70 = *(_QWORD *)a2;
    v71 = *(_DWORD *)(a2 + 8);
    v146 = *(_QWORD *)(a2 + 16);
    v72 = *(_DWORD *)(a2 + 24);
    v73 = *(_QWORD *)(a2 + 32);
    v132 = *(_QWORD *)(a2 + 40);
    v129 = *(_QWORD *)(a2 + 48);
    v74 = *(_QWORD *)(a2 + 56);
    v134 = *(_QWORD *)(a2 + 64);
    v126 = *(_QWORD *)(a2 + 72);
    v123 = *(_DWORD *)(a2 + 80);
    v75 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v158[32] = v75;
    *(_OWORD *)v159 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v159[16] = *(_DWORD *)(a2 + 80);
    v76 = *(_OWORD *)(a2 + 16);
    v157 = *(_OWORD *)a2;
    *(_OWORD *)v158 = v76;
    outlined retain of _ViewInputs(a2);
    v77 = _ViewInputs.geometryTransaction()();
    v78 = swift_getKeyPath();
    v79 = specialized CachedEnvironment.attribute<A>(keyPath:)(v78);
    swift_release();
    if ((*(_BYTE *)(v12 + 81) & 1) == 0
      && (_DWORD)v134 == *(_DWORD *)(v12 + 32)
      && (_DWORD)v126 == *(_DWORD *)(v12 + 36)
      && v79 == *(_DWORD *)(v12 + 40)
      && v71 == *(_DWORD *)(v12 + 44)
      && v77 == *(_DWORD *)(v12 + 48)
      && v72 == *(_DWORD *)(v12 + 52))
    {
      if ((*(_BYTE *)(v12 + 64) & 1) != 0)
        goto LABEL_45;
      LODWORD(v85) = *(_DWORD *)(v12 + 60);
    }
    else
    {
      *(_QWORD *)&v157 = v70;
      DWORD2(v157) = v71;
      *(_QWORD *)v158 = v146;
      *(_DWORD *)&v158[8] = v72;
      *(_DWORD *)&v158[12] = v77;
      *(_QWORD *)&v158[16] = v73;
      *(_QWORD *)&v158[24] = v132;
      *(_QWORD *)&v158[32] = v129;
      *(_QWORD *)&v158[40] = v74;
      *(_QWORD *)v159 = v134;
      *(_QWORD *)&v159[8] = v126;
      *(_DWORD *)&v159[16] = v123;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v79, (uint64_t)&v150);
      v80 = v151;
      v81 = v152;
      v82 = v156;
      v83 = v152 | ((unint64_t)v153 << 32);
      v84 = v154 | ((unint64_t)v155 << 32);
      *(_OWORD *)(v12 + 32) = v150;
      *(_OWORD *)(v12 + 48) = v80;
      *(_QWORD *)(v12 + 64) = v83;
      *(_QWORD *)(v12 + 72) = v84;
      *(_WORD *)(v12 + 80) = v82;
      if ((v81 & 1) != 0)
      {
LABEL_45:
        v135 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 60) = v135;
        *(_BYTE *)(v12 + 64) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v133 = *(_QWORD *)a2;
        v86 = *(_DWORD *)(a2 + 8);
        v147 = *(_QWORD *)(a2 + 16);
        v87 = *(_DWORD *)(a2 + 24);
        v88 = *(_QWORD *)(a2 + 32);
        v89 = *(_QWORD *)(a2 + 40);
        v90 = *(_QWORD *)(a2 + 48);
        v91 = *(_QWORD *)(a2 + 56);
        v127 = *(_QWORD *)(a2 + 72);
        v130 = *(_QWORD *)(a2 + 64);
        v124 = *(_DWORD *)(a2 + 80);
        v92 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v158[16] = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v158[32] = v92;
        *(_OWORD *)v159 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v159[16] = *(_DWORD *)(a2 + 80);
        v93 = *(_OWORD *)(a2 + 16);
        v157 = *(_OWORD *)a2;
        *(_OWORD *)v158 = v93;
        outlined retain of _ViewInputs(a2);
        v94 = _ViewInputs.geometryTransaction()();
        v95 = swift_getKeyPath();
        v96 = specialized CachedEnvironment.attribute<A>(keyPath:)(v95);
        swift_release();
        if ((*(_BYTE *)(v12 + 81) & 1) == 0
          && (_DWORD)v130 == *(_DWORD *)(v12 + 32)
          && (_DWORD)v127 == *(_DWORD *)(v12 + 36)
          && v96 == *(_DWORD *)(v12 + 40)
          && v86 == *(_DWORD *)(v12 + 44)
          && v94 == *(_DWORD *)(v12 + 48)
          && v87 == *(_DWORD *)(v12 + 52))
        {
          v102 = v143;
          if ((*(_BYTE *)(v12 + 80) & 1) == 0)
          {
            v97 = *(_DWORD *)(v12 + 76);
            goto LABEL_59;
          }
        }
        else
        {
          *(_QWORD *)&v157 = v133;
          DWORD2(v157) = v86;
          *(_QWORD *)v158 = v147;
          *(_DWORD *)&v158[8] = v87;
          *(_DWORD *)&v158[12] = v94;
          *(_QWORD *)&v158[16] = v88;
          *(_QWORD *)&v158[24] = v89;
          *(_QWORD *)&v158[32] = v90;
          *(_QWORD *)&v158[40] = v91;
          *(_QWORD *)v159 = v130;
          *(_QWORD *)&v159[8] = v127;
          *(_DWORD *)&v159[16] = v124;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v96, (uint64_t)&v150);
          v97 = v155;
          v98 = v156;
          v99 = v152 | ((unint64_t)v153 << 32);
          v100 = v154 | ((unint64_t)v155 << 32);
          v101 = v151;
          *(_OWORD *)(v12 + 32) = v150;
          *(_OWORD *)(v12 + 48) = v101;
          *(_QWORD *)(v12 + 64) = v99;
          *(_QWORD *)(v12 + 72) = v100;
          *(_WORD *)(v12 + 80) = v98;
          v102 = v143;
          if ((v98 & 1) == 0)
            goto LABEL_59;
        }
        v97 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 76) = v97;
        *(_BYTE *)(v12 + 80) = 0;
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(_QWORD *)&v157 = v148;
        DWORD2(v157) = v149;
        v103 = PreferencesOutputs.subscript.getter(v66);
        if ((v103 & 0x100000000) != 0)
          v104 = *MEMORY[0x24BE096C0];
        else
          v104 = v103;
        v105 = v160;
        *(_QWORD *)&v150 = v160;
        outlined retain of _GraphInputs((uint64_t)&v160);
        outlined retain of _ViewInputs(a2);
        outlined retain of ViewTransform((uint64_t)&v150);
        v106 = specialized find<A>(_:key:)(v105);
        if (v106)
          v107 = *(_BYTE *)(v106 + 72);
        else
          v107 = 0;
        v108 = *(_DWORD *)(a2 + 68);
        outlined release of ViewTransform((uint64_t)&v150);
        outlined release of _GraphInputs((uint64_t)&v160);
        outlined release of _ViewInputs(a2);
        *(_QWORD *)&v157 = __PAIR64__(v102, v137);
        *((_QWORD *)&v157 + 1) = __PAIR64__(v97, v135);
        *(_DWORD *)v158 = v138;
        *(_DWORD *)&v158[4] = v108;
        *(_DWORD *)&v158[8] = v104;
        v158[12] = v107;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>(0);
        lazy protocol witness table accessor for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>();
        v109 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v157) = 0;
        PreferencesOutputs.subscript.setter(v109, v66, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v110);
        goto LABEL_66;
      }
      v85 = HIDWORD(*((_QWORD *)&v80 + 1));
    }
    v135 = v85;
    goto LABEL_48;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v69)
  {
    LODWORD(v150) = v68;
    v111 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v150);
    v111(&v157, 0);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

uint64_t static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  __int128 v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t OffsetAttribute2;
  int v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unsigned __int8 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  Swift::UInt32 v75;
  _DWORD *v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  void (*v120)(__int128 *, _QWORD);
  _BYTE v121[16];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t AssociatedConformanceWitness;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t (*v139)(void);
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  unsigned __int8 v153;
  unsigned int v154;
  unsigned __int8 v155;
  unsigned int v156;
  unsigned __int8 v157;
  unsigned int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _BYTE v163[20];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[20];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = a2[3];
  v166 = a2[2];
  v167 = v9;
  *(_OWORD *)v168 = a2[4];
  *(_DWORD *)&v168[16] = *((_DWORD *)a2 + 20);
  v10 = a2[1];
  v164 = *a2;
  v165 = v10;
  v170 = v10;
  v171 = v166;
  v169 = v164;
  if ((BYTE4(v166) & 0x20) == 0)
  {
    v11 = a2[3];
    v161 = a2[2];
    v162 = v11;
    *(_OWORD *)v163 = a2[4];
    *(_DWORD *)&v163[16] = *((_DWORD *)a2 + 20);
    v12 = a2[1];
    v159 = *a2;
    v160 = v12;
    return a3();
  }
  *(_QWORD *)&v138 = a4;
  v139 = a3;
  v126 = DWORD1(v166);
  v127 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v151) = v8;
  v17 = a2[1];
  v159 = *a2;
  v160 = v17;
  v161 = a2[2];
  v124 = a5;
  v125 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)&v133 = AssociatedTypeWitness;
  v141 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v151, (uint64_t *)&v159, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  KeyPath = swift_getKeyPath();
  v19 = v170;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v169);
  v140 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v169);
  swift_release();
  LODWORD(v137) = DWORD2(v164);
  v144 = v165;
  v145 = v164;
  v20 = *((_QWORD *)&v165 + 1);
  LODWORD(v136) = DWORD1(v166);
  LODWORD(v134) = v166;
  v142 = v167;
  v143 = *((_QWORD *)&v166 + 1);
  LODWORD(v135) = DWORD2(v167);
  v21 = *(_QWORD *)&v168[12];
  swift_beginAccess();
  v22 = DWORD2(v164);
  v146 = v165;
  v147 = v164;
  v23 = DWORD2(v165);
  v24 = v166;
  v130 = v167;
  v131 = *((_QWORD *)&v166 + 1);
  v26 = *((_QWORD *)&v167 + 1);
  *(_QWORD *)&v25 = *(_QWORD *)v168;
  *(_QWORD *)&v27 = *(_QWORD *)&v168[8];
  v128 = v27;
  v129 = v25;
  v28 = *(_DWORD *)&v168[16];
  v161 = v166;
  v162 = v167;
  *(_OWORD *)v163 = *(_OWORD *)v168;
  *(_DWORD *)&v163[16] = *(_DWORD *)&v168[16];
  v159 = v164;
  v160 = v165;
  outlined retain of _ViewInputs((uint64_t)&v164);
  outlined retain of _ViewInputs((uint64_t)&v164);
  v29 = _ViewInputs.geometryTransaction()();
  v30 = swift_getKeyPath();
  v148 = v19 + 16;
  v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(v30);
  swift_release();
  if ((*(_BYTE *)(v19 + 81) & 1) != 0
    || (_DWORD)v129 != *(_DWORD *)(v19 + 32)
    || __PAIR64__(v31, v128) != *(_QWORD *)(v19 + 36)
    || v22 != *(_DWORD *)(v19 + 44)
    || v29 != *(_DWORD *)(v19 + 48)
    || v23 != *(_DWORD *)(v19 + 52))
  {
    *(_QWORD *)&v159 = v147;
    DWORD2(v159) = v22;
    *(_QWORD *)&v160 = v146;
    *((_QWORD *)&v160 + 1) = __PAIR64__(v29, v23);
    *(_QWORD *)&v161 = v24;
    *((_QWORD *)&v161 + 1) = v131;
    *(_QWORD *)&v162 = v130;
    *((_QWORD *)&v162 + 1) = v26;
    *(_QWORD *)v163 = v129;
    *(_QWORD *)&v163[8] = v128;
    *(_DWORD *)&v163[16] = v28;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v159, v31, (uint64_t)&v151);
    OffsetAttribute2 = v156;
    v33 = v157;
    v34 = v153 | ((unint64_t)v154 << 32);
    v35 = v155 | ((unint64_t)v156 << 32);
    v36 = v152;
    *(_OWORD *)(v19 + 32) = v151;
    *(_OWORD *)(v19 + 48) = v36;
    *(_QWORD *)(v19 + 64) = v34;
    *(_QWORD *)(v19 + 72) = v35;
    *(_WORD *)(v19 + 80) = v33;
    if (v33 != 1)
      goto LABEL_13;
LABEL_12:
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 76) = OffsetAttribute2;
    *(_BYTE *)(v19 + 80) = 0;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v19 + 80) & 1) != 0)
    goto LABEL_12;
  OffsetAttribute2 = *(unsigned int *)(v19 + 76);
LABEL_13:
  v131 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v37 = DWORD2(v164);
  v146 = v165;
  v147 = v164;
  v38 = DWORD2(v165);
  v39 = v166;
  v40 = v167;
  v130 = *((_QWORD *)&v166 + 1);
  v42 = *((_QWORD *)&v167 + 1);
  *(_QWORD *)&v41 = *(_QWORD *)v168;
  *(_QWORD *)&v43 = *(_QWORD *)&v168[8];
  v128 = v43;
  v129 = v41;
  v44 = *(_DWORD *)&v168[16];
  v161 = v166;
  v162 = v167;
  *(_OWORD *)v163 = *(_OWORD *)v168;
  *(_DWORD *)&v163[16] = *(_DWORD *)&v168[16];
  v159 = v164;
  v160 = v165;
  outlined retain of _ViewInputs((uint64_t)&v164);
  v45 = _ViewInputs.geometryTransaction()();
  v46 = swift_getKeyPath();
  v47 = specialized CachedEnvironment.attribute<A>(keyPath:)(v46);
  swift_release();
  if ((*(_BYTE *)(v19 + 81) & 1) == 0
    && (_DWORD)v129 == *(_DWORD *)(v19 + 32)
    && __PAIR64__(v47, v128) == *(_QWORD *)(v19 + 36)
    && v37 == *(_DWORD *)(v19 + 44)
    && v45 == *(_DWORD *)(v19 + 48)
    && v38 == *(_DWORD *)(v19 + 52))
  {
    v48 = v142;
    if ((*(_BYTE *)(v19 + 64) & 1) == 0)
    {
      LODWORD(v49) = *(_DWORD *)(v19 + 60);
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  *(_QWORD *)&v159 = v147;
  DWORD2(v159) = v37;
  *(_QWORD *)&v160 = v146;
  *((_QWORD *)&v160 + 1) = __PAIR64__(v45, v38);
  *(_QWORD *)&v161 = v39;
  *((_QWORD *)&v161 + 1) = v130;
  *(_QWORD *)&v162 = v40;
  *((_QWORD *)&v162 + 1) = v42;
  *(_QWORD *)v163 = v129;
  *(_QWORD *)&v163[8] = v128;
  *(_DWORD *)&v163[16] = v44;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v159, v47, (uint64_t)&v151);
  v50 = v152;
  v51 = v153;
  v52 = v157;
  v53 = v153 | ((unint64_t)v154 << 32);
  v54 = v155 | ((unint64_t)v156 << 32);
  *(_OWORD *)(v19 + 32) = v151;
  *(_OWORD *)(v19 + 48) = v50;
  *(_QWORD *)(v19 + 64) = v53;
  *(_QWORD *)(v19 + 72) = v54;
  *(_WORD *)(v19 + 80) = v52;
  v48 = v142;
  if (v51 == 1)
  {
LABEL_22:
    LODWORD(v49) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 60) = v49;
    *(_BYTE *)(v19 + 64) = 0;
    goto LABEL_24;
  }
  v49 = HIDWORD(*((_QWORD *)&v50 + 1));
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v55 = swift_endAccess();
  *(_QWORD *)&v159 = __PAIR64__(v131, v141);
  *((_QWORD *)&v159 + 1) = __PAIR64__(HIDWORD(v167), v49);
  LODWORD(v160) = v140;
  MEMORY[0x24BDAC7A8](v55);
  v122 = type metadata accessor for GeometryEffectTransform(0, v133, AssociatedConformanceWitness, v56);
  v123 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectTransform<A>, v122);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTransform>, (uint64_t)&type metadata for ViewTransform, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v159, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v121, v122, MEMORY[0x24BEE4078], v57, MEMORY[0x24BEE40A8], v58);
  v147 = 0;
  v59 = v151;
  v60 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  v61 = *(_DWORD *)v168;
  v62 = *(_DWORD *)&v168[8];
  v63 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v169);
  v64 = specialized CachedEnvironment.attribute<A>(keyPath:)(v63);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v169);
  swift_release();
  *(_QWORD *)&v159 = __PAIR64__(v62, v61);
  DWORD2(v159) = v64;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  v65 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v159 = v145;
  DWORD2(v159) = v137;
  *(_QWORD *)&v160 = v144;
  *((_QWORD *)&v160 + 1) = v20;
  LODWORD(v161) = v134 | 0x1C;
  DWORD1(v161) = v136;
  *((_QWORD *)&v161 + 1) = v143;
  *(_QWORD *)&v162 = v48;
  *((_QWORD *)&v162 + 1) = __PAIR64__(v59, v135);
  *(_DWORD *)v163 = v60;
  *(_DWORD *)&v163[4] = v60;
  *(_DWORD *)&v163[8] = v65;
  *(_QWORD *)&v163[12] = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v66 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v139)(&v149, v66, &v159);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v67 = v167;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, v68, v69, v70);
  v72 = *(_QWORD *)(v67 + 16);
  if (!v72)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v119 = v127;
    *v127 = v149;
    v119[1] = v150;
    return result;
  }
  v73 = v71;
  v74 = (_QWORD *)(v67 + 32);
  while (*v74 != v71)
  {
    v74 += 2;
    if (!--v72)
      goto LABEL_57;
  }
  v75 = ++lastIdentity;
  v76 = (_DWORD *)MEMORY[0x24BE096C0];
  if ((v126 & 0x100) == 0)
  {
LABEL_30:
    LODWORD(v139) = v75;
    swift_beginAccess();
    v146 = v164;
    v77 = DWORD2(v164);
    v78 = DWORD2(v165);
    v136 = *((_QWORD *)&v166 + 1);
    v79 = v166;
    v137 = v165;
    v81 = *((_QWORD *)&v167 + 1);
    v135 = v167;
    *(_QWORD *)&v80 = *(_QWORD *)v168;
    v138 = v80;
    *(_QWORD *)&v80 = *(_QWORD *)&v168[8];
    v134 = v80;
    v161 = v166;
    v162 = v167;
    *(_OWORD *)v163 = *(_OWORD *)v168;
    LODWORD(v133) = *(_DWORD *)&v168[16];
    *(_DWORD *)&v163[16] = *(_DWORD *)&v168[16];
    v159 = v164;
    v160 = v165;
    outlined retain of _ViewInputs((uint64_t)&v164);
    v82 = _ViewInputs.geometryTransaction()();
    v83 = swift_getKeyPath();
    v84 = specialized CachedEnvironment.attribute<A>(keyPath:)(v83);
    swift_release();
    if ((*(_BYTE *)(v19 + 81) & 1) == 0
      && (_DWORD)v138 == *(_DWORD *)(v19 + 32)
      && __PAIR64__(v84, v134) == *(_QWORD *)(v19 + 36)
      && v77 == *(_DWORD *)(v19 + 44)
      && v82 == *(_DWORD *)(v19 + 48)
      && v78 == *(_DWORD *)(v19 + 52))
    {
      if ((*(_BYTE *)(v19 + 64) & 1) == 0)
      {
        *(_QWORD *)&v138 = *(unsigned int *)(v19 + 60);
        goto LABEL_40;
      }
    }
    else
    {
      *(_QWORD *)&v159 = v146;
      DWORD2(v159) = v77;
      *(_QWORD *)&v160 = v137;
      *((_QWORD *)&v160 + 1) = __PAIR64__(v82, v78);
      *(_QWORD *)&v161 = v79;
      *((_QWORD *)&v161 + 1) = v136;
      *(_QWORD *)&v162 = v135;
      *((_QWORD *)&v162 + 1) = v81;
      *(_QWORD *)v163 = v138;
      *(_QWORD *)&v163[8] = v134;
      *(_DWORD *)&v163[16] = v133;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v159, v84, (uint64_t)&v151);
      v85 = v152;
      v86 = v153;
      v87 = v157;
      v88 = v153 | ((unint64_t)v154 << 32);
      v89 = v155 | ((unint64_t)v156 << 32);
      *(_OWORD *)(v19 + 32) = v151;
      *(_OWORD *)(v19 + 48) = v85;
      *(_QWORD *)(v19 + 64) = v88;
      *(_QWORD *)(v19 + 72) = v89;
      *(_WORD *)(v19 + 80) = v87;
      if (v86 != 1)
      {
        *(_QWORD *)&v138 = HIDWORD(*((_QWORD *)&v85 + 1));
LABEL_40:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v90 = DWORD2(v164);
        v136 = v165;
        v137 = v164;
        v91 = DWORD2(v165);
        v135 = *((_QWORD *)&v166 + 1);
        v92 = v166;
        v94 = *((_QWORD *)&v167 + 1);
        v146 = v167;
        *(_QWORD *)&v93 = *(_QWORD *)v168;
        *(_QWORD *)&v95 = *(_QWORD *)&v168[8];
        v133 = v95;
        v134 = v93;
        v96 = *(_DWORD *)&v168[16];
        v161 = v166;
        v162 = v167;
        *(_OWORD *)v163 = *(_OWORD *)v168;
        *(_DWORD *)&v163[16] = *(_DWORD *)&v168[16];
        v159 = v164;
        v160 = v165;
        outlined retain of _ViewInputs((uint64_t)&v164);
        v97 = _ViewInputs.geometryTransaction()();
        v98 = swift_getKeyPath();
        v99 = specialized CachedEnvironment.attribute<A>(keyPath:)(v98);
        swift_release();
        if ((*(_BYTE *)(v19 + 81) & 1) == 0
          && (_DWORD)v134 == *(_DWORD *)(v19 + 32)
          && __PAIR64__(v99, v133) == *(_QWORD *)(v19 + 36)
          && v90 == *(_DWORD *)(v19 + 44)
          && v97 == *(_DWORD *)(v19 + 48)
          && v91 == *(_DWORD *)(v19 + 52))
        {
          v105 = v125;
          if ((*(_BYTE *)(v19 + 80) & 1) == 0)
          {
            v100 = *(_DWORD *)(v19 + 76);
            goto LABEL_50;
          }
        }
        else
        {
          *(_QWORD *)&v159 = v137;
          DWORD2(v159) = v90;
          *(_QWORD *)&v160 = v136;
          *((_QWORD *)&v160 + 1) = __PAIR64__(v97, v91);
          *(_QWORD *)&v161 = v92;
          *((_QWORD *)&v161 + 1) = v135;
          *(_QWORD *)&v162 = v146;
          *((_QWORD *)&v162 + 1) = v94;
          *(_QWORD *)v163 = v134;
          *(_QWORD *)&v163[8] = v133;
          *(_DWORD *)&v163[16] = v96;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v159, v99, (uint64_t)&v151);
          v100 = v156;
          v101 = v157;
          v102 = v153 | ((unint64_t)v154 << 32);
          v103 = v155 | ((unint64_t)v156 << 32);
          v104 = v152;
          *(_OWORD *)(v19 + 32) = v151;
          *(_OWORD *)(v19 + 48) = v104;
          *(_QWORD *)(v19 + 64) = v102;
          *(_QWORD *)(v19 + 72) = v103;
          *(_WORD *)(v19 + 80) = v101;
          v105 = v125;
          if (v101 != 1)
            goto LABEL_50;
        }
        v100 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v19 + 76) = v100;
        *(_BYTE *)(v19 + 80) = 0;
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(_QWORD *)&v159 = v149;
        DWORD2(v159) = v150;
        v106 = PreferencesOutputs.subscript.getter(v73);
        if ((v106 & 0x100000000) != 0)
          v107 = *MEMORY[0x24BE096C0];
        else
          v107 = v106;
        v108 = v169;
        *(_QWORD *)&v151 = v169;
        outlined retain of _GraphInputs((uint64_t)&v169);
        outlined retain of _ViewInputs((uint64_t)&v164);
        outlined retain of ViewTransform((uint64_t)&v151);
        v109 = specialized find<A>(_:key:)(v108);
        if (v109)
          v110 = *(_BYTE *)(v109 + 72);
        else
          v110 = 0;
        v111 = v124;
        v112 = *(_DWORD *)&v168[4];
        outlined release of ViewTransform((uint64_t)&v151);
        outlined release of _GraphInputs((uint64_t)&v169);
        v113 = outlined release of _ViewInputs((uint64_t)&v164);
        *(_QWORD *)&v159 = __PAIR64__(v141, v139);
        *((_QWORD *)&v159 + 1) = __PAIR64__(v100, v138);
        *(_QWORD *)&v160 = __PAIR64__(v112, v140);
        DWORD2(v160) = v107;
        BYTE12(v160) = v110;
        MEMORY[0x24BDAC7A8](v113);
        v115 = type metadata accessor for GeometryEffectDisplayList(0, v111, v105, v114);
        v122 = v115;
        v123 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectDisplayList<A>, v115);
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
        _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v159, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v121, v115, MEMORY[0x24BEE4078], v116, MEMORY[0x24BEE40A8], v117);
        LOBYTE(v159) = 0;
        PreferencesOutputs.subscript.setter(v158, v73, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v118);
        goto LABEL_57;
      }
    }
    *(_QWORD *)&v138 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 60) = v138;
    *(_BYTE *)(v19 + 64) = 0;
    goto LABEL_40;
  }
  outlined retain of _ViewInputs((uint64_t)&v164);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v164);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v76)
  {
    LODWORD(v151) = v75;
    v120 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v151);
    v120(&v159, 0);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t RoundedSize.init(position:size:pixelLength:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t GeometryEffectDisplayList.effect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t GeometryEffectDisplayList.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  char v5;

  if (*(_DWORD *)(v1 + 24) == *MEMORY[0x24BE096C0])
  {
    result = 0;
    *(_BYTE *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_BYTE *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(_BYTE *)(a1 + 10) = v5;
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t GeometryEffectDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t *Value;
  char v18;
  double *v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float64x2_t v26;
  __int128 *v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t result;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t AssociatedTypeWitness;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned __int16 v56;
  unsigned __int8 v57;
  float64x2_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  unsigned __int8 v65;
  unsigned int v66;
  float64x2_t v67;

  v4 = *(_QWORD *)(a1 + 16);
  v52 = *(_QWORD *)(a1 + 24);
  v51 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v44 - v5;
  v7 = v2[1];
  v9 = v2[2];
  v8 = v2[3];
  v11 = v2[4];
  v10 = v2[5];
  v12 = v2[6];
  v13 = *((unsigned __int8 *)v2 + 28);
  v54 = *v2;
  *(_QWORD *)&v58.f64[0] = __PAIR64__(v7, v54);
  *(_QWORD *)&v58.f64[1] = __PAIR64__(v8, v9);
  v50 = v8;
  *(_QWORD *)&v59 = __PAIR64__(v10, v11);
  DWORD2(v59) = v12;
  v53 = v13;
  BYTE12(v59) = v13;
  GeometryEffectDisplayList.content.getter((uint64_t)&v55);
  v14 = v55;
  v15 = MEMORY[0x24BEE4AF8];
  if (v55)
    v16 = v55;
  else
    v16 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(v16 + 16))
  {
    v47 = (_QWORD *)a2;
    v45 = v56 | (v57 << 16);
    v46 = v16;
    Value = (float64x2_t *)AGGraphGetValue();
    v67 = vsubq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
    *(_QWORD *)&v58.f64[0] = __PAIR64__(v7, v54);
    *(_QWORD *)&v58.f64[1] = __PAIR64__(v50, v9);
    *(_QWORD *)&v59 = __PAIR64__(v10, v11);
    DWORD2(v59) = v12;
    v18 = v53;
    BYTE12(v59) = v53;
    GeometryEffectDisplayList.effect.getter((uint64_t)v6);
    type metadata accessor for CGSize(0);
    v19 = (double *)AGGraphGetValue();
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v55) = *(_BYTE *)AGGraphGetValue();
    (*(void (**)(float64x2_t *__return_ptr, char *, float64x2_t *, uint64_t *, double, double))(v52 + 24))(&v58, v6, &v67, &v55, v20, v21);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v6, AssociatedTypeWitness);
    v22 = *(_QWORD *)&v58.f64[0];
    v23 = LODWORD(v58.f64[1]);
    v24 = BYTE4(v58.f64[1]);
    if (v14)
      v25 = v45;
    else
      v25 = 0;
    v26 = v67;
    v27 = (__int128 *)AGGraphGetValue();
    v58 = v26;
    v28 = *v27;
    ++static DisplayList.Version.lastValue;
    v59 = v28;
    v60 = static DisplayList.Version.lastValue;
    v61 = v22;
    v62 = v23 | (v24 << 32) | 0x4000000000000000;
    v29 = v23;
    v63 = v46;
    v65 = BYTE2(v25);
    v64 = v25;
    v66 = v54;
    LOBYTE(v55) = v18;
    v30 = v22;
    outlined copy of DisplayList.Effect(v22, v23, v24);
    DisplayList.Item.canonicalize(options:)((char *)&v55);
    v33 = v58;
    v32 = *(_OWORD *)&v33 >> 64;
    v31 = (uint64_t)v33;
    v34 = v59;
    v35 = v60;
    v36 = v61;
    v37 = v62;
    v38 = v63;
    v39 = v64 | (v65 << 16);
    v54 = v66;
    v40 = v62 >> 62;
    if (v62 >> 62 != 3 || (v39 & 0xFFFFFF) != 0 || v62 != 0xC000000000000000 || v63 | v61)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_23527E860;
      *(_QWORD *)(v41 + 32) = v31;
      *(_QWORD *)(v41 + 40) = v32;
      *(_OWORD *)(v41 + 48) = v34;
      *(_QWORD *)(v41 + 64) = v35;
      *(_QWORD *)(v41 + 72) = v36;
      *(_QWORD *)(v41 + 80) = v37;
      *(_QWORD *)(v41 + 88) = v38;
      *(_BYTE *)(v41 + 98) = BYTE2(v39);
      *(_WORD *)(v41 + 96) = v39;
      *(_DWORD *)(v41 + 100) = v54;
      __asm { BR              X10 }
    }
    outlined consume of DisplayList.Effect(v30, v29, v24);
    v42 = v47;
    *v47 = MEMORY[0x24BEE4AF8];
    *((_WORD *)v42 + 4) = 0;
    *((_BYTE *)v42 + 10) = 0;
    return outlined consume of DisplayList.Item.Value(v36, 0xC000000000000000);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v15;
    *(_WORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 10) = 0;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeometryEffectDisplayList<A>()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryEffectDisplayList<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectDisplayList<A>, a1);
  return static AsyncAttribute.flags.getter();
}

void GeometryEffectTransform.value.getter(unint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _BYTE *v32;
  double v33;
  uint64_t v34;
  Swift::String v35;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  double v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  double v48;
  double v49;
  double v50[9];
  double v51;
  double v52[9];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double v57;
  double v58[4];
  __int128 v59;
  uint64_t v60;
  __int128 v61;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  v12 = *(_QWORD *)Value;
  v13 = *(double *)(Value + 8);
  v14 = *(double *)(Value + 16);
  v15 = *(double *)(Value + 24);
  v16 = *(double *)(Value + 32);
  v46 = *(_QWORD *)Value;
  swift_retain();
  v17 = (double *)AGGraphGetValue();
  v18 = v15 - (*v17 - v13);
  v19 = v16 - (v17[1] - v14);
  v48 = v18;
  v49 = v19;
  v47 = 0uLL;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  v21 = 0uLL;
  if ((v20 & 1) != 0)
  {
    v37 = v19;
    v38 = v18;
    v22 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v22, a2);
    type metadata accessor for CGSize(0);
    v36 = HIDWORD(a1);
    v23 = (double *)AGGraphGetValue();
    (*(void (**)(double *__return_ptr, uint64_t, uint64_t, double, double))(a3 + 24))(v50, a2, a3, *v23, v23[1]);
    v24 = v50[1];
    v39 = v50[0];
    v25 = v50[2];
    v26 = v50[3];
    v28 = v50[4];
    v27 = v50[5];
    v29 = v50[6];
    v30 = v50[7];
    v31 = v50[8];
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
    v32 = (_BYTE *)AGGraphGetValue();
    v33 = v39;
    if (*v32 == 1)
    {
      v34 = *(_QWORD *)AGGraphGetValue();
      v58[0] = -1.0;
      memset(&v58[1], 0, 24);
      v59 = xmmword_235281560;
      v60 = v34;
      v61 = xmmword_23528A280;
      ProjectionTransform.concatenating(_:)(v50, &v51);
      ProjectionTransform.concatenating(_:)(v58, v52);
      v33 = v52[0];
      v24 = v52[1];
      v25 = v52[2];
      v26 = v52[3];
      v28 = v52[4];
      v27 = v52[5];
      v29 = v52[6];
      v30 = v52[7];
      v31 = v52[8];
    }
    *(double *)&v53 = v33;
    *((double *)&v53 + 1) = v24;
    *(double *)&v54 = v25;
    *((double *)&v54 + 1) = v26;
    *(double *)&v55 = v28;
    *((double *)&v55 + 1) = v27;
    *(double *)&v56 = v29;
    *((double *)&v56 + 1) = v30;
    v57 = v31;
    if (ProjectionTransform.isInvertible.getter())
    {
      ViewTransform.appendProjectionTransform(_:inverse:)((CGFloat *)&v53, 1);
      v12 = v46;
      v21 = v47;
      v18 = v48;
      v19 = v49;
    }
    else
    {
      *(_QWORD *)&v40 = 0;
      *((_QWORD *)&v40 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      v45 = v40;
      v35._object = (void *)0x80000002352E1010;
      v35._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v35);
      v42 = v55;
      v43 = v56;
      v44 = v57;
      v40 = v53;
      v41 = v54;
      _print_unlocked<A, B>(_:_:)();
      specialized static Log.externalWarning(_:)(v45, *((unint64_t *)&v45 + 1));
      swift_bridgeObjectRelease();
      v19 = v37;
      v18 = v38;
      v21 = 0uLL;
    }
  }
  *(_QWORD *)a4 = v12;
  *(_OWORD *)(a4 + 8) = v21;
  *(double *)(a4 + 24) = v18;
  *(double *)(a4 + 32) = v19;
}

void protocol witness for Rule.value.getter in conformance GeometryEffectTransform<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;

  GeometryEffectTransform.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryEffectTransform<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectTransform<A>, a1);
  return static AsyncAttribute.flags.getter();
}

double RoundedSize.value.getter@<D0>(uint64_t a1@<X8>)
{
  double *Value;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double result;
  __int128 v9;

  AGGraphGetValue();
  Value = (double *)AGGraphGetValue();
  v3 = *Value;
  v4 = *((_QWORD *)Value + 1);
  v5 = *((_QWORD *)Value + 2);
  v6 = *((_QWORD *)Value + 3);
  v7 = (double *)AGGraphGetValue();
  *(double *)&v9 = v3;
  *((_QWORD *)&v9 + 1) = v4;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(*v7);
  result = v3;
  *(_OWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance RoundedSize@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

float64x2_t CGAffineTransform.flipRTL(width:)(double a1)
{
  uint64_t v1;
  double v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = *(double *)(v1 + 40);
  v3 = *(float64x2_t *)(v1 + 8);
  *(double *)(v1 + 32) = a1 - *(double *)(v1 + 32) - *(double *)v1 * a1;
  *(double *)(v1 + 40) = v2 + a1 * v3.f64[0];
  result = vnegq_f64(v3);
  *(float64x2_t *)(v1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for DefaultGeometryEffectProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultGeometryEffectProvider);
}

unint64_t lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedSize and conformance RoundedSize;
  if (!lazy protocol witness table cache variable for type RoundedSize and conformance RoundedSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RoundedSize, &type metadata for RoundedSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedSize and conformance RoundedSize);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for RoundedSize(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of GeometryEffect.effectValue(size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static GeometryEffect._affectsLayout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for RoundedSize()
{
  return &type metadata for RoundedSize;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _Rotation3DEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _OWORD *))
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[5];
  int v12;

  v7 = *a1;
  v8 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v8;
  v11[4] = *(_OWORD *)(a2 + 64);
  v12 = *(_DWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return a7(v7, v11);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _Rotation3DEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScaleEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, uint64_t (*a4)(uint64_t, _OWORD *)@<X6>, _QWORD *a5@<X8>)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v10[5];
  char v11;

  v6 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v6;
  v10[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v7;
  v8 = *a1;
  v11 = *(_BYTE *)(a2 + 80);
  a3(a5);
  return a4(v8, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _OffsetEffect(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

uint64_t sub_234C7D560()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t type metadata accessor for GeometryEffectTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeometryEffectTransform);
}

unint64_t lazy protocol witness table accessor for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GeometryEffectTransform<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>);
  }
  return result;
}

void type metadata accessor for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for DefaultGeometryEffectProvider<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DefaultGeometryEffectProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>();
    v6 = type metadata accessor for GeometryEffectDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>;
  if (!lazy protocol witness table cache variable for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for DefaultGeometryEffectProvider<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DefaultGeometryEffectProvider);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultGeometryEffectProvider<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>);
  }
  return result;
}

uint64_t type metadata accessor for GeometryEffectDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeometryEffectDisplayList);
}

unint64_t lazy protocol witness table accessor for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>)
  {
    type metadata accessor for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GeometryEffectTransform<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GeometryEffectDisplayList<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _Rotation3DEffect, &type metadata for _Rotation3DEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _Rotation3DEffect, &type metadata for _Rotation3DEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _Rotation3DEffect, &type metadata for _Rotation3DEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GeometryEffectDisplayList<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>);
  }
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

__n128 __swift_memcpy29_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GeometryEffectDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 29))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GeometryEffectDisplayList(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 29) = v3;
  return result;
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GeometryEffectTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GeometryEffectTransform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for GeometryEffectTransform<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectTransform<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for GeometryEffectDisplayList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryEffectDisplayList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in GeometryEffectDisplayList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in GeometryEffectTransform<A>()
{
  JUMPOUT(0x23B7C9C04);
}

ValueMetadata *type metadata accessor for Text.Effect.Layout()
{
  return &type metadata for Text.Effect.Layout;
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.Layout.DisplayList(void (**a1)(void **a1), unint64_t *a2))(void **a1)
{
  double *v2;
  void (*result)(void **);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  result = (void (*)(void **))malloc(0x80uLL);
  *a1 = result;
  v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v7 = *(_QWORD *)v2 + (v6 << 7);
    v8 = *(_QWORD *)(v7 + 144);
    v9 = *(_QWORD *)(v7 + 152);
    v10 = v2[1] + *(double *)(v7 + 136);
    v11 = *(_OWORD *)(v7 + 40);
    v12 = *(_OWORD *)(v7 + 56);
    v13 = *(_OWORD *)(v7 + 72);
    v14 = *(_OWORD *)(v7 + 88);
    v15 = *(_OWORD *)(v7 + 104);
    v16 = *(_OWORD *)(v7 + 120);
    *(_QWORD *)result = *(_QWORD *)(v7 + 32);
    *(_OWORD *)((char *)result + 8) = v11;
    *(_OWORD *)((char *)result + 24) = v12;
    *(_OWORD *)((char *)result + 40) = v13;
    *(_OWORD *)((char *)result + 56) = v14;
    *(_OWORD *)((char *)result + 72) = v15;
    *(_OWORD *)((char *)result + 88) = v16;
    *((double *)result + 13) = v10;
    *((_QWORD *)result + 14) = v8;
    *((_QWORD *)result + 15) = v9;
    return protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.Layout.DisplayList@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.Layout.DisplayList@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  unint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.Layout.Fragment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (_OWORD *)((char *)a1 + v8);
    v11 = (_OWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v15 = *(uint64_t *)((char *)a2 + v9);
    v16 = *((_QWORD *)v14 + 1);
    v17 = v14[16];
    outlined copy of Text.Effect.Layout.Fragment.Storage(v15, v16, v17);
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = v16;
    v13[16] = v17;
  }
  return a1;
}

uint64_t outlined copy of Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t destroy for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return outlined consume of Text.Effect.Layout.Fragment.Storage(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 16));
}

uint64_t outlined consume of Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = *(_QWORD *)(a2 + v8);
  v15 = *(_QWORD *)(a2 + v8 + 8);
  v16 = *(_BYTE *)(v13 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(v14, v15, v16);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  *(_BYTE *)(v12 + 16) = v16;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_BYTE *)(v12 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(*(_QWORD *)v12, v14, v15);
  v16 = *(_QWORD *)v11;
  v17 = *(_QWORD *)(v11 + 8);
  v18 = *(_BYTE *)(v11 + 16);
  *(_QWORD *)v11 = v13;
  *(_QWORD *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 16) = v15;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  LOBYTE(v9) = *(_BYTE *)(v13 + 16);
  v14 = *(_QWORD *)v12;
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = (_BYTE)v9;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Layout.Fragment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C7E238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Layout.Fragment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_234C7E2E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 24) + 16) = -(char)a2;
}

uint64_t type metadata accessor for Text.Effect.Layout.Fragment()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Text.Effect.Layout.Fragment;
  if (!type metadata singleton initialization cache for Text.Effect.Layout.Fragment)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for Text.Effect.Layout.Fragment()
{
  unint64_t v0;

  type metadata accessor for FontBox<Font.SystemProvider>(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for Text.Effect.Layout.Fragment.Storage(uint64_t a1)
{
  return outlined consume of Text.Effect.Layout.Fragment.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Layout.Fragment.Storage()
{
  return &type metadata for Text.Effect.Layout.Fragment.Storage;
}

_QWORD *initializeBufferWithCopyOfBuffer for Text.Effect.Layout.DisplayList(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.Layout.DisplayList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Layout.DisplayList()
{
  return &type metadata for Text.Effect.Layout.DisplayList;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.Layout.DisplayList>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Layout.DisplayList, &type metadata for Text.Effect.Layout.DisplayList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Layout.DisplayList, &type metadata for Text.Effect.Layout.DisplayList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Layout.DisplayList, &type metadata for Text.Effect.Layout.DisplayList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Layout.DisplayList, &type metadata for Text.Effect.Layout.DisplayList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance Text.Effect.Layout.DisplayList@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.Layout.DisplayList()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD *)v0, *(double *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.Layout.DisplayList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(double *)(v3 + 8));
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Layout.DisplayList> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.Layout.DisplayList>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList, (uint64_t)&type metadata for Text.Effect.Layout.DisplayList, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.Layout.DisplayList>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList, (uint64_t)&type metadata for Text.Effect.Layout.DisplayList, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void static TimeDataFormatting.attribute.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance TimeDataFormatting()
{
  JUMPOUT(0x23B7C5DACLL);
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance TimeDataFormatting@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return static TimeDataFormatting.decode(from:)(a1, a2);
}

uint64_t static TimeDataFormatting.decode(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t DynamicType;
  __int128 v16[2];
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[48];
  _QWORD v24[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v24, v24[3]);
    type metadata accessor for AnyCodable<SafelyCodableRequirement>(0, v5, v6, v7);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable<SafelyCodableRequirement>, (uint64_t)&protocol conformance descriptor for AnyCodable<A>);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    outlined init with copy of Decodable & Encodable((uint64_t)v23, (uint64_t)v18);
    type metadata accessor for Decodable & Encodable();
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest(v16, (uint64_t)v19);
      outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
      v8 = v21;
      v9 = v22;
      v10 = __swift_project_boxed_opaque_existential_1(v20, v21);
      a2[3] = v8;
      a2[4] = *(_QWORD *)(v9 + 24);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, v10, v8);
      outlined destroy of TypesettingConfiguration((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      outlined destroy of AnyTrackedValue?((uint64_t)v16, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
      v12 = type metadata accessor for DecodingError();
      swift_allocError();
      v14 = v13;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, (void (*)(uint64_t))MEMORY[0x24BEE2700]);
      outlined init with copy of Decodable & Encodable((uint64_t)v23, (uint64_t)v18);
      __swift_project_boxed_opaque_existential_1(v18, v18[3]);
      DynamicType = swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      *v14 = DynamicType;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x24BEE26D0], v12);
      swift_willThrow();
      outlined destroy of TypesettingConfiguration((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  return result;
}

void type metadata accessor for AnyCodable<SafelyCodableRequirement>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnyCodable<SafelyCodableRequirement>)
  {
    v4 = type metadata accessor for AnyCodable(0, (uint64_t)&unk_250639928, (uint64_t)&protocol witness table for SafelyCodableRequirement, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnyCodable<SafelyCodableRequirement>);
  }
}

uint64_t outlined init with copy of Decodable & Encodable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for Decodable & Encodable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Decodable & Encodable;
  if (!lazy cache variable for type metadata for Decodable & Encodable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable);
  }
  return result;
}

void TimeDataFormatting.Resolvable.replacingFormat<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v5 = v4;
  v17[1] = a3;
  v18 = a4;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v12, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  default argument 3 of TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(&v19);
  static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(v18);
}

uint64_t sub_234C7EE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v5, v2);
}

void TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(uint64_t a1@<X8>)
{
  static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(a1);
}

uint64_t sub_234C7EEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3, v1);
}

void static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for TimeDataFormatting.Configuration();
}

void sub_234C7EF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 128) = *v9;
  static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)((uint64_t)&a9 - v17, v10, v16, v13, (uint64_t *)(v15 - 128), v12, v11, v14, *(_QWORD *)(v15 - 176));
}

void sub_234C7EFF4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)(v9 - 164) = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 152) + 16))(v5, v7, v3);
  *(_QWORD *)(v9 - 128) = v1;
  TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:configuration:sizeVariant:)(v8, v4, *(_QWORD *)(v9 - 136));
}

uint64_t sub_234C7F05C()
{
  uint64_t v0;

  return *(_DWORD *)(v0 - 164) & 1;
}

void TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:configuration:sizeVariant:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_234C7F108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 60), v2, v1);
  *(_QWORD *)(v3 + *(int *)(a1 + 64)) = v4;
  type metadata accessor for TimeDataFormatting.Configuration();
}

uint64_t sub_234C7F14C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
  *(_QWORD *)(v3 + *(int *)(v4 + 72)) = v5;
  return result;
}

void TimeDataFormatting.Resolvable.resolve(in:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v41 = a3;
  v35 = type metadata accessor for Locale();
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v32 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v30 = (char *)&v30 - v7;
  v8 = a2[4];
  v9 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v44 = (char *)&v30 - v11;
  v38 = a2[5];
  v52 = a2;
  v37 = a2[3];
  v49 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v42 = (char *)&v30 - v12;
  v13 = type metadata accessor for AttributedString();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v48 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date();
  v50 = *(_QWORD *)(v16 - 8);
  v51 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v30 - v20;
  v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  v24 = *v22;
  v23 = v22[1];
  v33 = v22;
  v40 = v13;
  v39 = v14;
  v47 = v9;
  v53 = v21;
  if (v23)
  {
    v31 = 0;
    v25 = v8;
    swift_retain_n();
    swift_retain_n();
    v26 = specialized PropertyList.Tracker.value<A>(_:for:)(v24);
    swift_release_n();
    swift_release_n();
    if ((v26 & 1) != 0)
    {
LABEL_3:
      ResolvableStringResolutionContext.date.getter((uint64_t)v21);
      v36 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v25 = v8;
    v27 = swift_retain_n();
    v28 = specialized closure #1 in PropertyList.subscript.getter(v27);
    v31 = 0;
    swift_release_n();
    if ((v28 & 1) != 0)
      goto LABEL_3;
  }
  v29 = ResolvableStringResolutionContext.date.getter((uint64_t)v18);
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v29, 0.0, 0.0333333333);
  static Date.+ infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v18, v51);
  v36 = 0;
LABEL_6:
  v54 = v47;
  v55 = v37;
  v56 = v25;
  v57 = v38;
  type metadata accessor for TimeDataFormatting.Configuration();
}

uint64_t sub_234C7F4EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  TimeDataFormatting.Configuration.formatAndFrequency(for:)(v6 - 144, (char *)(v6 - 152), v2, a1);
  v7 = *(unsigned __int8 *)(v6 - 152);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 - 144), *(_QWORD *)(v6 - 120));
  v8 = *(_QWORD *)(v6 - 256);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 40))(*(_QWORD *)(v6 - 176), v5, v4);
  v9 = *(_QWORD *)(v6 - 272);
  dispatch thunk of FormatStyle.format(_:)();
  v10 = v8;
  v11 = v7;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 248) + 8))(v10, *(_QWORD *)(v6 - 240));
  v12 = *(void (**)(uint64_t))(*(_QWORD *)(v1 + 48) + 8);
  v13 = *(_QWORD *)(v6 - 224);
  v14 = *(_QWORD *)(v6 - 208);
  v12(v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 264) + 8))(v9, v14);
  if (v7 == 3)
  {
    v15 = *(_QWORD *)(v6 - 280);
    v16 = *(_QWORD *)(v6 - 288);
    v17 = *(_QWORD *)(v6 - 296);
    v18 = *(_QWORD *)(v6 - 176);
    if (v14 == v16)
      goto LABEL_11;
LABEL_15:
    *(_QWORD *)(v6 - 152) = 0x3FF0000000000000;
    TimeDataFormatting.Resolvable.disableContentTransition(on:for:date:isLuminanceReduced:)(v13, (double *)(v6 - 152), v18, *(_DWORD *)(v6 - 316), *(_QWORD *)(v6 - 184));
    goto LABEL_16;
  }
  v19 = *(_QWORD *)(v6 - 120);
  v20 = *(_QWORD *)(v6 - 112);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 - 144), v19);
  *(_BYTE *)(v6 - 152) = v7;
  v18 = *(_QWORD *)(v6 - 176);
  if (DiscreteFormatStyle.needsRedaction<A>(for:evaluating:at:)((_BYTE *)(v6 - 152), v3, v18, v19, v5, v20, v4))
  {
    *(_BYTE *)(v6 - 152) = v11;
    v21 = *(uint64_t **)(v6 - 344);
    v22 = *v21;
    v15 = *(_QWORD *)(v6 - 280);
    v16 = *(_QWORD *)(v6 - 288);
    v17 = *(_QWORD *)(v6 - 296);
    if (v21[1])
    {
      swift_retain_n();
      swift_retain_n();
      v23 = *(_QWORD *)(v6 - 368);
      specialized PropertyList.Tracker.value<A>(_:for:)(v22, v23);
    }
    else
    {
      v24 = swift_retain_n();
      v23 = *(_QWORD *)(v6 - 368);
      v25 = *(_QWORD *)(v6 - 360);
      specialized closure #1 in PropertyList.subscript.getter(v24, v23);
      *(_QWORD *)(v6 - 360) = v25;
    }
    swift_release_n();
    swift_release_n();
    AttributedString.redact(for:locale:)((_BYTE *)(v6 - 152), v23);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 336) + 8))(v23, *(_QWORD *)(v6 - 328));
    if (*(_QWORD *)(v6 - 208) != v16)
      goto LABEL_15;
  }
  else
  {
    v15 = *(_QWORD *)(v6 - 280);
    v16 = *(_QWORD *)(v6 - 288);
    v17 = *(_QWORD *)(v6 - 296);
    if (v14 != v16)
      goto LABEL_15;
  }
LABEL_11:
  *(_QWORD *)(v6 - 152) = 0x3FF0000000000000;
  v26 = *(uint64_t **)(v6 - 344);
  v27 = *v26;
  if (v26[1])
  {
    swift_retain_n();
    swift_retain_n();
    v28 = *(_QWORD *)(v6 - 352);
    specialized PropertyList.Tracker.value<A>(_:for:)(v27, v28);
  }
  else
  {
    v29 = swift_retain_n();
    v30 = *(_QWORD *)(v6 - 352);
    specialized closure #1 in PropertyList.subscript.getter(v29, v30);
    v28 = v30;
  }
  swift_release_n();
  swift_release_n();
  v31 = AttributedString.disableContentTransition(for:locale:)((double *)(v6 - 152), v28);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 336) + 8))(v28, *(_QWORD *)(v6 - 328));
  if ((v31 & 1) == 0)
    goto LABEL_15;
LABEL_16:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 200) + 8))(v18, *(_QWORD *)(v6 - 192));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v15, v13, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  return __swift_destroy_boxed_opaque_existential_1(v6 - 144);
}

BOOL DiscreteFormatStyle.needsRedaction<A>(for:evaluating:at:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v36;
  unsigned int (*v37)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v39;
  void (*v40)(_BYTE *, _BYTE *, uint64_t);
  void (*v41)(_BYTE *, uint64_t);
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  double v47;
  double v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t);
  void (*v51)(uint64_t, uint64_t);
  double v52;
  _BYTE v53[12];
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = a5;
  v63 = a3;
  v11 = type metadata accessor for Date();
  v61 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v60 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v59 = &v53[-v14];
  v64 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v53[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v53[-v20];
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v23);
  MEMORY[0x24BDAC7A8](v24);
  v26 = &v53[-v25];
  v31 = MEMORY[0x24BDAC7A8](v27);
  v33 = &v53[-v32];
  v34 = *a1;
  if (!*a1)
    return 0;
  v56 = v30;
  v57 = v29;
  v54 = v34;
  v58 = v28;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(a7 + 40);
  v36 = v63;
  v55 = a2;
  v63 = a7;
  v35(v36, v65, a7, v31);
  dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
  v37 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48);
  if (v37(v21, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v33, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v21, v58);
    return 0;
  }
  v39 = v21;
  v40 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 32);
  v40(v26, v39, AssociatedTypeWitness);
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  if (v37(v18, 1, AssociatedTypeWitness) == 1)
  {
    v41 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
    v41(v26, AssociatedTypeWitness);
    v41(v33, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v18, v58);
    return 0;
  }
  v40(v57, v18, AssociatedTypeWitness);
  v42 = v63;
  v43 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v63 + 48);
  v44 = v59;
  v45 = v65;
  v43(v26, v65, v63);
  v46 = v60;
  v43(v57, v45, v42);
  Date.timeIntervalSince(_:)();
  v48 = v47;
  v49 = v62;
  v50 = *(void (**)(_BYTE *, uint64_t))(v61 + 8);
  v50(v46, v62);
  v50(v44, v49);
  v51 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v51((uint64_t)v57, AssociatedTypeWitness);
  v51((uint64_t)v26, AssociatedTypeWitness);
  v51((uint64_t)v33, AssociatedTypeWitness);
  v52 = 60.0;
  if (v54 != 2)
    v52 = 1.0;
  return v48 < v52;
}

void AttributedString.redact(for:locale:)(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  void (*v71)(char *, char *);
  uint64_t v72;
  uint64_t KeyPath;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  int v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t);
  int v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, void (*)(char *, uint64_t, uint64_t, uint64_t));
  char *v100;
  char *v101;
  void (*v102)(char *, char *, void (*)(char *, uint64_t, uint64_t, uint64_t));
  uint64_t v103;
  void (*v104)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t));
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t);
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  _BYTE *v116;
  char *v117;
  char v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  char *v121;
  void (*v122)(char *, _QWORD);
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  void (*v139)(char *, char *);
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  _BYTE *v149;
  char v150;
  char *v151;
  void (*v152)(char *, uint64_t);
  void (*v153)(char *, _QWORD);
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, char *, uint64_t);
  uint64_t v164;
  void (*v165)(uint64_t);
  uint64_t v166;
  uint64_t v167;
  double *v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  void (*v196)(char *, char *, uint64_t);
  char *v197;
  char *v198;
  char *v199;
  void (*v200)(char *, char *, uint64_t);
  char *v201;
  void (*v202)(char *, char *);
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  int v211;
  void (*v212)(char *, char *, uint64_t);
  uint64_t v213;
  char *v214;
  char *v215;
  void (*v216)(char *, uint64_t, uint64_t, uint64_t);
  char *v217;
  uint64_t v218;
  void (*v219)(char *, uint64_t);
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  char *v224;
  _BYTE *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char v229;
  char v230[8];

  v213 = a2;
  v225 = a1;
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  v188 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v197 = (char *)&v183 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v187 = (char *)&v183 - v5;
  v216 = (void (*)(char *, uint64_t, uint64_t, uint64_t))type metadata accessor for AttributedString.Index();
  v186 = *((_QWORD *)v216 - 1);
  MEMORY[0x24BDAC7A8](v216);
  v215 = (char *)&v183 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v200 = (void (*)(char *, char *, uint64_t))((char *)&v183 - v8);
  type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, &lazy cache variable for type metadata for (Range<AttributedString.Index>, Calendar.Component.Magnitude?), type metadata accessor for Range<AttributedString.Index>, (void (*)(uint64_t))type metadata accessor for Calendar.Component.Magnitude?);
  v194 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v193 = (uint64_t)&v183 - v10;
  type metadata accessor for Range<AttributedString.Index>(0);
  v184 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v185 = (char *)&v183 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v196 = (void (*)(char *, char *, uint64_t))((char *)&v183 - v14);
  MEMORY[0x24BDAC7A8](v15);
  v212 = (void (*)(char *, char *, uint64_t))((char *)&v183 - v16);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?, (void (*)(uint64_t))type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)((char *)&v183 - v18);
  type metadata accessor for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
  v210 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v209 = (uint64_t *)((char *)&v183 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(0);
  MEMORY[0x24BDAC7A8](v22);
  v207 = (char *)&v183 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v208 = (uint64_t)&v183 - v25;
  v26 = type metadata accessor for AttributedString.Runs.Run();
  v27 = (void (*)(uint64_t))MEMORY[0x24BDCC480];
  v206 = v26;
  v228 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v227 = (char *)&v183 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v199 = (char *)&v183 - v30;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3038]);
  MEMORY[0x24BDAC7A8](v31);
  v191 = (char *)&v183 - v32;
  type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator(0);
  v34 = v33;
  MEMORY[0x24BDAC7A8](v33);
  v190 = (char *)&v183 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v222 = (char *)&v183 - v37;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, v27);
  MEMORY[0x24BDAC7A8](v38);
  v214 = (char *)&v183 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v201 = (char *)&v183 - v41;
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v43 = v42;
  MEMORY[0x24BDAC7A8](v42);
  v205 = (char *)&v183 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?, (void (*)(uint64_t))MEMORY[0x24BDCC138]);
  MEMORY[0x24BDAC7A8](v45);
  v47 = (char *)&v183 - v46;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?, (void (*)(uint64_t))MEMORY[0x24BDCC040]);
  MEMORY[0x24BDAC7A8](v48);
  v217 = (char *)&v183 - v49;
  type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(0);
  MEMORY[0x24BDAC7A8](v50);
  v198 = (char *)&v183 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52);
  v224 = (char *)&v183 - v53;
  v54 = type metadata accessor for AttributedString.Runs.Index();
  v55 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v57 = (char *)&v183 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)&v183 - v59;
  v61 = type metadata accessor for AttributedString.Runs();
  v62 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v192 = (char *)&v183 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v64);
  v66 = *v225;
  if (!*v225)
    return;
  v183 = v47;
  v218 = v43;
  v189 = v34;
  v195 = v19;
  v211 = v66;
  v67 = (char *)&v183 - v65;
  AttributedString.runs.getter();
  v68 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v69 = dispatch thunk of Collection.distance(from:to:)();
  v204 = v55;
  v70 = *(void (**)(char *, uint64_t))(v55 + 8);
  v220 = v57;
  v70(v57, v54);
  v223 = v60;
  v225 = (_BYTE *)v54;
  v219 = v70;
  v70(v60, v54);
  v71 = *(void (**)(char *, char *))(v62 + 8);
  v203 = v67;
  v202 = v71;
  v71(v67, (char *)v61);
  v72 = v62;
  if (v69 != 1)
    goto LABEL_8;
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  *(&v183 - 2) = v74;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
  v75 = (uint64_t)v224;
  AttributedString.subscript.getter();
  swift_release();
  v76 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v75, 1, v76);
  outlined destroy of TypesettingConfiguration(v75, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  if (v77 != 1)
    goto LABEL_8;
  v78 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v78);
  *(&v183 - 2) = v79;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  v80 = (uint64_t)v217;
  AttributedString.subscript.getter();
  swift_release();
  v81 = type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  v82 = (void (*)(uint64_t))MEMORY[0x24BDCC040];
  v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v80, 1, v81);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v80, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?, v82);
  if (v83 != 1)
    goto LABEL_8;
  v84 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v84);
  *(&v183 - 2) = v85;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
  v86 = (uint64_t)v183;
  AttributedString.subscript.getter();
  swift_release();
  v87 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
  v88 = (void (*)(uint64_t))MEMORY[0x24BDCC138];
  v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48))(v86, 1, v87);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v86, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?, v88);
  if (v89 != 1)
  {
LABEL_8:
    v109 = v192;
    AttributedString.runs.getter();
    v200 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
    v200(v203, v109, v61);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], MEMORY[0x24BDCC4C0]);
    v110 = (uint64_t)v205;
    v224 = (char *)v61;
    dispatch thunk of Sequence.makeIterator()();
    v111 = (char *)(v110 + *(int *)(v218 + 36));
    v112 = v204;
    v218 = *(_QWORD *)(v204 + 16);
    v113 = (uint64_t)v222;
    v114 = v223;
    v221 = v68;
    v197 = v111;
    v115 = v224;
    while (1)
    {
      v116 = v225;
      ((void (*)(char *, char *, _BYTE *))v218)(v114, v111, v225);
      v117 = v220;
      dispatch thunk of Collection.endIndex.getter();
      v217 = (char *)lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC498], MEMORY[0x24BDCC4A0]);
      v118 = dispatch thunk of static Equatable.== infix(_:_:)();
      v119 = v117;
      v120 = v219;
      v219(v119, (uint64_t)v116);
      v120(v114, (uint64_t)v116);
      if ((v118 & 1) != 0)
      {
        v216 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v228 + 56);
        v216(v201, 1, 1, v206);
        LODWORD(v215) = 0;
        goto LABEL_15;
      }
      v121 = v114;
      v122 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v123 = v228;
      v124 = v201;
      v125 = v206;
      (*(void (**)(char *))(v228 + 16))(v201);
      v122(v230, 0);
      v126 = v203;
      v200(v203, (char *)v110, (uint64_t)v115);
      v127 = v125;
      dispatch thunk of Collection.formIndex(after:)();
      v202(v126, v115);
      v216 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56);
      v216(v124, 0, 1, v125);
      v128 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v123 + 48))(v124, 1, v125);
      LODWORD(v215) = v128 != 1;
      if (v128 == 1)
        break;
      v129 = v199;
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v199, v124, v127);
      v130 = swift_getKeyPath();
      MEMORY[0x24BDAC7A8](v130);
      *(&v183 - 2) = v131;
      swift_getKeyPath();
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
      v132 = (uint64_t)v198;
      AttributedString.Runs.Run.subscript.getter();
      v114 = v223;
      swift_release();
      v133 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
      v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 48))(v132, 1, v133);
      outlined destroy of TypesettingConfiguration(v132, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
      v110 = (uint64_t)v205;
      (*(void (**)(char *, uint64_t))(v123 + 8))(v129, v127);
      v113 = (uint64_t)v222;
      v112 = v204;
      v111 = v197;
      if (v134 != 1)
        goto LABEL_15;
    }
    v112 = v204;
    v114 = v121;
    v113 = (uint64_t)v222;
LABEL_15:
    v135 = v206;
    v136 = v195;
    outlined destroy of TypesettingConfiguration(v110, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    v137 = v224;
    v138 = v114;
    v139 = v202;
    v202(v192, v224);
    v229 = 2;
    v140 = v191;
    AttributedString.runs.getter();
    v141 = (uint64_t)v190;
    v200(v190, v140, (uint64_t)v137);
    dispatch thunk of Collection.endIndex.getter();
    v139(v140, v137);
    v142 = v189;
    (*(void (**)(uint64_t, char *, _BYTE *))(v112 + 32))(v141 + *(int *)(v189 + 36), v138, v225);
    outlined init with take of LocalizedStringKey.FormatArgument(v141, v113, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator);
    v143 = v113 + *(int *)(v142 + 36);
    while (1)
    {
      v147 = v220;
      v148 = v223;
      v149 = v225;
      ((void (*)(char *, uint64_t, _BYTE *))v218)(v223, v143, v225);
      dispatch thunk of Collection.startIndex.getter();
      v150 = dispatch thunk of static Equatable.== infix(_:_:)();
      v151 = v147;
      v152 = v219;
      v219(v151, (uint64_t)v149);
      v152(v148, (uint64_t)v149);
      if ((v150 & 1) != 0)
      {
        v216(v214, 1, 1, v135);
LABEL_46:
        v108 = type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator;
        v107 = v113;
LABEL_47:
        outlined destroy of TypesettingConfiguration(v107, (uint64_t (*)(_QWORD))v108);
        return;
      }
      lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v153 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v146 = v228;
      v154 = v214;
      v155 = v135;
      (*(void (**)(char *))(v228 + 16))(v214);
      v153(v230, 0);
      v156 = v154;
      v216(v154, 0, 1, v135);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v154, 1, v135) == 1)
        goto LABEL_46;
      v145 = (uint64_t)v227;
      (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v227, v156, v135);
      v157 = v213;
      v158 = specialized getter of localeUsesDecimalSystem #1 in AttributedString.disableContentTransition(for:locale:)(&v229);
      v159 = v136;
      v160 = v226;
      AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)(v145, v157, v158 & 1, v136);
      type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
      v162 = v161;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 48))(v136, 1, v161) != 1)
        break;
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v136, &lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?, (void (*)(uint64_t))type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
      v163 = v212;
      AttributedString.Runs.Run.range.getter();
      redact #1 (_:) in AttributedString.redact(for:locale:)(v163, (int)v215, v160);
      v164 = (uint64_t)v163;
      v165 = type metadata accessor for Range<AttributedString.Index>;
LABEL_44:
      outlined destroy of TypesettingConfiguration(v164, (uint64_t (*)(_QWORD))v165);
LABEL_17:
      v136 = v159;
      v135 = v155;
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v145, v155);
      v113 = (uint64_t)v222;
    }
    v166 = (uint64_t)v136 + *(int *)(v162 + 48);
    v167 = v210;
    v168 = (double *)v209;
    v169 = (uint64_t)v209 + *(int *)(v210 + 48);
    *v209 = *v136;
    outlined init with take of LocalizedStringKey.FormatArgument(v166, v169, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
    v170 = *v168;
    v171 = v208;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v168 + *(int *)(v167 + 48), v208, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
    if (v211)
    {
      v172 = (uint64_t)v207;
      if (v211 == 1)
      {
        if (v170 < 1.0)
          goto LABEL_16;
      }
      else if (v170 < 60.0)
      {
LABEL_16:
        v144 = v212;
        AttributedString.Runs.Run.range.getter();
        v145 = (uint64_t)v227;
        redact #1 (_:) in AttributedString.redact(for:locale:)(v144, (int)v215, v226);
        outlined destroy of TypesettingConfiguration((uint64_t)v144, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        outlined destroy of TypesettingConfiguration(v171, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        v146 = v228;
        goto LABEL_17;
      }
    }
    else
    {
      v172 = (uint64_t)v207;
      if (v170 < 0.0333333333)
        goto LABEL_16;
    }
    outlined init with copy of TypesettingLanguage(v171, v172, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
    type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
    v174 = v173;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 48))(v172, 1, v173) == 1)
    {
      outlined destroy of TypesettingConfiguration(v172, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      outlined destroy of TypesettingConfiguration(v171, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      v145 = (uint64_t)v227;
      v146 = v228;
      goto LABEL_17;
    }
    v175 = v172 + *(int *)(v174 + 48);
    v176 = *(_QWORD *)v175;
    v177 = *(_BYTE *)(v175 + 8);
    v178 = v194;
    v179 = v193;
    v180 = v193 + *(int *)(v194 + 48);
    outlined init with take of LocalizedStringKey.FormatArgument(v172, v193, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    *(_QWORD *)v180 = v176;
    *(_BYTE *)(v180 + 8) = v177;
    v181 = v179 + *(int *)(v178 + 48);
    v182 = *(double *)v181;
    LOBYTE(v176) = *(_BYTE *)(v181 + 8);
    outlined init with take of LocalizedStringKey.FormatArgument(v179, (uint64_t)v196, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    v155 = v135;
    v146 = v228;
    if ((v176 & 1) != 0)
    {
      if (one-time initialization token for zero != -1)
        swift_once();
      v182 = *(double *)&static Calendar.Component.Magnitude.zero;
    }
    if (v211)
    {
      v159 = v195;
      v145 = (uint64_t)v227;
      if (v211 == 1)
      {
        if (v182 >= 1.0)
          goto LABEL_43;
      }
      else if (v182 >= 60.0)
      {
LABEL_43:
        outlined destroy of TypesettingConfiguration((uint64_t)v196, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        v164 = v171;
        v165 = type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?;
        goto LABEL_44;
      }
    }
    else
    {
      v159 = v195;
      v145 = (uint64_t)v227;
      if (v182 >= 0.0333333333)
        goto LABEL_43;
    }
    redact #1 (_:) in AttributedString.redact(for:locale:)(v196, (int)v215, v226);
    goto LABEL_43;
  }
  v90 = (char *)v200;
  AttributedString.startIndex.getter();
  v91 = v215;
  AttributedString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
  v92 = v216;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
  {
    v93 = v91;
    v94 = v90;
    v95 = v188;
    v96 = v187;
    v97 = &v187[*(int *)(v188 + 48)];
    v98 = v186;
    v99 = *(void (**)(char *, char *, _QWORD *))(v186 + 32);
    v99(v187, v94, v92);
    v99(v97, v93, v92);
    v100 = v197;
    v101 = &v197[*(int *)(v95 + 48)];
    v102 = *(void (**)(char *, char *, _QWORD *))(v98 + 16);
    v102(v197, v96, v92);
    v102(v101, v97, v92);
    v103 = (uint64_t)v185;
    v99(v185, v100, v92);
    v104 = *(void (**)(char *, _QWORD *))(v98 + 8);
    v104(v101, v92);
    v105 = &v100[*(int *)(v95 + 48)];
    v99(v100, v96, v92);
    v99(v105, v97, v92);
    v99((char *)(v103 + *(int *)(v184 + 36)), v105, v92);
    v104(v100, v92);
    v106 = (uint64_t)v212;
    outlined init with take of LocalizedStringKey.FormatArgument(v103, (uint64_t)v212, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    AttributedString.redactNumbers(in:)(v106);
    v107 = v106;
    v108 = type metadata accessor for Range<AttributedString.Index>;
    goto LABEL_47;
  }
  __break(1u);
}

uint64_t AttributedString.disableContentTransition(for:locale:)(double *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char *v41;
  double v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, double *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  double *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, _QWORD);
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t KeyPath;
  void (*v88)(char *, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, _QWORD);
  void (*v101)(char *, _QWORD);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  void (*v114)(char *, uint64_t, uint64_t, double);
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  void (*v121)(char *, char *, uint64_t);
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  double *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133[8];
  char v134;

  v118 = a2;
  v126 = a1;
  type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, &lazy cache variable for type metadata for (Range<AttributedString.Index>, Calendar.Component.Magnitude?), type metadata accessor for Range<AttributedString.Index>, (void (*)(uint64_t))type metadata accessor for Calendar.Component.Magnitude?);
  v104 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v103 = (uint64_t)&v101 - v3;
  type metadata accessor for Range<AttributedString.Index>(0);
  v108 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v106 = (uint64_t)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v107 = (uint64_t)&v101 - v7;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?, (void (*)(uint64_t))type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
  MEMORY[0x24BDAC7A8](v8);
  v117 = (uint64_t *)((char *)&v101 - v9);
  type metadata accessor for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
  v110 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v109 = (double *)((char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(0);
  MEMORY[0x24BDAC7A8](v12);
  v105 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v111 = (uint64_t)&v101 - v15;
  v129 = type metadata accessor for AttributedString.Runs.Run();
  v16 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v119 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, v18);
  MEMORY[0x24BDAC7A8](v19);
  v123 = (char *)&v101 - v20;
  v21 = type metadata accessor for AttributedString.Runs.Index();
  v22 = *(_QWORD *)(v21 - 8);
  v130 = v21;
  v131 = v22;
  MEMORY[0x24BDAC7A8](v21);
  v127 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (double *)((char *)&v101 - v25);
  v27 = type metadata accessor for AttributedString.Runs();
  v124 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for AttributedString();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v101 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v35 = v34;
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v101 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v101 - v40;
  v42 = *v126;
  v134 = 2;
  v114 = *(void (**)(char *, uint64_t, uint64_t, double))(v31 + 16);
  v114(v33, v128, v30, v39);
  AttributedString.runs.getter();
  v43 = *(void (**)(char *, uint64_t))(v31 + 8);
  v115 = v33;
  v116 = v30;
  v113 = v43;
  v43(v33, v30);
  v44 = v124;
  v121 = *(void (**)(char *, char *, uint64_t))(v124 + 16);
  v121(v37, v29, v27);
  v125 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
  dispatch thunk of Collection.startIndex.getter();
  v45 = *(void (**)(char *, uint64_t))(v44 + 8);
  v122 = v29;
  v120 = v45;
  v45(v29, v27);
  v46 = &v37[*(int *)(v35 + 36)];
  v47 = v131;
  v48 = *(void (**)(char *, double *, uint64_t))(v131 + 32);
  v126 = v26;
  v48(v46, v26, v130);
  v49 = (uint64_t)v37;
  v50 = (uint64_t)v41;
  outlined init with take of LocalizedStringKey.FormatArgument(v49, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  LODWORD(v112) = 0;
  v51 = &v41[*(int *)(v35 + 36)];
  v124 = *(_QWORD *)(v47 + 16);
  while (1)
  {
    v52 = v126;
    v53 = v130;
    ((void (*)(double *, char *, uint64_t))v124)(v126, v51, v130);
    v54 = v51;
    v55 = v127;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC498], MEMORY[0x24BDCC4A0]);
    v56 = dispatch thunk of static Equatable.== infix(_:_:)();
    v57 = *(void (**)(char *, uint64_t))(v131 + 8);
    v57(v55, v53);
    v57((char *)v52, v53);
    if ((v56 & 1) != 0)
      break;
    v58 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v59 = v123;
    v60 = v129;
    (*(void (**)(char *))(v16 + 16))(v123);
    v58(v133, 0);
    v61 = v122;
    v121(v122, (char *)v50, v27);
    dispatch thunk of Collection.formIndex(after:)();
    v120(v61, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v59, 0, 1, v60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v59, 1, v60) == 1)
      goto LABEL_19;
    v62 = v50;
    v63 = (uint64_t)v119;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v119, v59, v60);
    v64 = v115;
    v65 = v116;
    ((void (*)(char *, uint64_t, uint64_t))v114)(v115, v128, v116);
    v66 = v118;
    v67 = specialized getter of localeUsesDecimalSystem #1 in AttributedString.disableContentTransition(for:locale:)(&v134);
    v68 = v117;
    AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)(v63, v66, v67 & 1, v117);
    v113(v64, v65);
    type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
    v70 = v69;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v68, 1, v69) == 1)
    {
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v68, &lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?, (void (*)(uint64_t))type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v63, v60);
      v50 = v62;
      v51 = v54;
    }
    else
    {
      v71 = *v68;
      v72 = (uint64_t)v68 + *(int *)(v70 + 48);
      v73 = v110;
      v74 = v109;
      v75 = (uint64_t)v109 + *(int *)(v110 + 48);
      *(_QWORD *)v109 = v71;
      outlined init with take of LocalizedStringKey.FormatArgument(v72, v75, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      v76 = *v74;
      v77 = v111;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v74 + *(int *)(v73 + 48), v111, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      v50 = v62;
      if (v42 >= v76)
      {
        v85 = v107;
        v86 = v119;
        AttributedString.Runs.Run.range.getter();
        KeyPath = swift_getKeyPath();
        MEMORY[0x24BDAC7A8](KeyPath);
        *(&v101 - 2) = v88;
        v102 = swift_getKeyPath();
        LODWORD(v112) = 1;
        v132 = 1;
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x24BEE1BC0]);
        v101 = (void (*)(char *, _QWORD))AttributedString.subscript.modify();
        lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
        AttributedSubstring.subscript.setter();
        v101(v133, 0);
        outlined destroy of TypesettingConfiguration(v85, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        outlined destroy of TypesettingConfiguration(v77, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v86, v129);
        v51 = v54;
      }
      else
      {
        v78 = v105;
        outlined init with copy of TypesettingLanguage(v77, v105, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
        v79 = v77;
        v81 = v80;
        v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 48))(v78, 1, v80);
        v51 = v54;
        v83 = v129;
        if (v82 == 1)
        {
          outlined destroy of TypesettingConfiguration(v78, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
          v84 = v79;
          goto LABEL_16;
        }
        v89 = v78 + *(int *)(v81 + 48);
        v112 = *(_QWORD *)v89;
        LODWORD(v102) = *(unsigned __int8 *)(v89 + 8);
        v90 = v104;
        v91 = v78;
        v92 = v103;
        v93 = v103 + *(int *)(v104 + 48);
        outlined init with take of LocalizedStringKey.FormatArgument(v91, v103, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        *(_QWORD *)v93 = v112;
        *(_BYTE *)(v93 + 8) = v102;
        v94 = v92 + *(int *)(v90 + 48);
        v95 = *(double *)v94;
        LOBYTE(v93) = *(_BYTE *)(v94 + 8);
        outlined init with take of LocalizedStringKey.FormatArgument(v92, v106, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
        if ((v93 & 1) != 0)
        {
          if (one-time initialization token for zero != -1)
            swift_once();
          v95 = *(double *)&static Calendar.Component.Magnitude.zero;
        }
        if (v42 >= v95)
        {
          v96 = v106;
          v97 = v107;
          outlined init with copy of TypesettingLanguage(v106, v107, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
          v98 = swift_getKeyPath();
          MEMORY[0x24BDAC7A8](v98);
          *(&v101 - 2) = v99;
          v102 = swift_getKeyPath();
          LODWORD(v112) = 1;
          v132 = 1;
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x24BEE1BC0]);
          v101 = (void (*)(char *, _QWORD))AttributedString.subscript.modify();
          lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
          AttributedSubstring.subscript.setter();
          v101(v133, 0);
          outlined destroy of TypesettingConfiguration(v97, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
          outlined destroy of TypesettingConfiguration(v96, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
          outlined destroy of TypesettingConfiguration(v111, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
          (*(void (**)(char *, uint64_t))(v16 + 8))(v119, v83);
        }
        else
        {
          outlined destroy of TypesettingConfiguration(v106, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
          v84 = v111;
LABEL_16:
          outlined destroy of TypesettingConfiguration(v84, (uint64_t (*)(_QWORD))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
          (*(void (**)(char *, uint64_t))(v16 + 8))(v119, v83);
          LODWORD(v112) = 1;
        }
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v123, 1, 1, v129);
LABEL_19:
  outlined destroy of TypesettingConfiguration(v50, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  return v112 & 1;
}

uint64_t TimeDataFormatting.Resolvable.disableContentTransition(on:for:date:isLuminanceReduced:)(uint64_t a1, double *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  double v22;
  uint64_t v24;
  double v25;
  uint64_t KeyPath;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  v6 = v5;
  v29 = a4;
  v28[1] = a1;
  v10 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v28 - v15;
  v17 = *(_QWORD *)(a5 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v16, v6, a5, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a5) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v16, a5);
  v33 = v29 & 1;
  v24 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>, a5);
  TimelineSchedule.nextEntry(after:mode:)(a3, &v33, a5, v24, (uint64_t)v12);
  Date.timeIntervalSince(_:)();
  if (v22 >= v25)
  {
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v28[-2] = v27;
    swift_getKeyPath();
    v32 = 1;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
    AttributedString.subscript.setter();
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, a5);
}

uint64_t TimeDataFormatting.Resolvable.schedule.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v3, a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, a1);
}

void TimeDataFormatting.Resolvable.requiredFeatures.getter(_WORD *a1@<X8>)
{
  *a1 = 128;
}

void TimeDataFormatting.Resolvable.sizeVariant(_:)(uint64_t a1)
{
  static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(a1);
}

uint64_t sub_234C81DA0(char a1)
{
  return a1 & 1;
}

uint64_t TimeDataFormatting.Resolvable.makePlatformAttributes(resolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[2];
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v22 - v16, v3 + *(int *)(v15 + 60), v10, v14);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for StyledFormatStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(v24, (uint64_t)v26);
    v22 = v11;
    v17 = v6;
    v18 = v27;
    v19 = v28;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v26, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a1, v18, v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v8, v3, v17);
    outlined init with copy of AnyTrackedValue((uint64_t)v26, (uint64_t)v24);
    swift_dynamicCast();
    v20 = *(_QWORD *)(v3 + *(int *)(a2 + 72));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v3, a2);
    v29 = v20;
    static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(v3);
  }
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  return outlined destroy of AnyTrackedValue?((uint64_t)v24, &lazy cache variable for type metadata for StyledFormatStyle?, &lazy cache variable for type metadata for StyledFormatStyle);
}

void TimeDataFormatting.Resolvable.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::UInt64 v4;

  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  if ((*(_QWORD *)(v2 + *(int *)(a2 + 64)) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v2 + *(int *)(a2 + 64));
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  type metadata accessor for TimeDataFormatting.Configuration();
}

void sub_234C82098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  TimeDataFormatting.Configuration.hash(into:)(v3, a1);
  Hasher._combine(_:)(*(_QWORD *)(v1 + *(int *)(v2 + 72)));
}

uint64_t static TimeDataFormatting.Resolvable.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for TimeDataFormatting.Resolvable();
  return 0;
}

void TimeDataFormatting.Resolvable.hashValue.getter(uint64_t a1)
{
  _BYTE v2[72];

  Hasher.init(_seed:)();
  TimeDataFormatting.Resolvable.hash(into:)((uint64_t)v2, a1);
}

Swift::Int sub_234C821FC()
{
  return Hasher._finalize()();
}

void protocol witness for ResolvableStringAttribute.requiredFeatures.getter in conformance TimeDataFormatting.Resolvable<A, B>(_WORD *a1@<X8>)
{
  TimeDataFormatting.Resolvable.requiredFeatures.getter(a1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Resolvable<A, B>(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  TimeDataFormatting.Resolvable.hash(into:)((uint64_t)v3, a2);
}

Swift::Int sub_234C82268()
{
  return Hasher._finalize()();
}

void protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance TimeDataFormatting.Resolvable<A, B>()
{
  static TimeDataFormatting.Resolvable.encode(_:to:)();
}

void static TimeDataFormatting.Resolvable.encode(_:to:)()
{
  type metadata accessor for TimeDataFormatting.Resolvable();
}

uint64_t sub_234C822E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v14 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>, a1);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>, a1);
  AnyCodable.init<A>(_:)((uint64_t)v7, a1, v8, v9, (uint64_t *)(v3 - 152));
  __swift_mutable_project_boxed_opaque_existential_1(v3 - 104, *(_QWORD *)(v3 - 80));
  type metadata accessor for AnyCodable<SafelyCodableRequirement>(0, v10, v11, v12);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable<SafelyCodableRequirement>, (uint64_t)&protocol conformance descriptor for AnyCodable<A>);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  outlined destroy of TypesettingConfiguration(v3 - 152, (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
  return __swift_destroy_boxed_opaque_existential_1(v3 - 104);
}

uint64_t TimeDataFormatting.Resolvable.representation(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  __int128 v17[2];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v7 = MEMORY[0x24BDAC7A8](a1);
  v10 = *v9;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v12((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2, v7);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v17, (uint64_t)v19);
    v13 = v20;
    v14 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    LOBYTE(v17[0]) = v10;
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v14 + 48))(v17, v13, v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    outlined destroy of AnyTrackedValue?((uint64_t)v17, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
    a3[3] = a2;
    a3[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v12)(boxed_opaque_existential_1, v4, a2);
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.Resolvable<A, B>()
{
  return static TimeDataFormatting.Resolvable.== infix(_:_:)();
}

uint64_t AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (**v32)(uint64_t, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  char *v42;
  void (*v43)(double);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  char *v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (**v91)(uint64_t, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  int v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  uint64_t KeyPath;
  uint64_t v115;

  v111 = a4;
  v98 = a3;
  v105 = a2;
  v93 = type metadata accessor for AttributedString.CharacterView();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v91 = (void (**)(uint64_t, char *, uint64_t))((char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = type metadata accessor for AttributedSubstring();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v88 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  v96 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v97 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v95 = (char *)&v86 - v10;
  v101 = type metadata accessor for AttributedString.Index();
  v109 = *(_QWORD *)(v101 - 8);
  MEMORY[0x24BDAC7A8](v101);
  v102 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v108 = (char *)&v86 - v13;
  type metadata accessor for Range<AttributedString.Index>?(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v107 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v112 = v17;
  v106 = *(char **)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v94 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v100 = (char *)&v86 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v99 = (uint64_t)&v86 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v104 = (uint64_t)&v86 - v24;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?, (void (*)(uint64_t))MEMORY[0x24BDCC138]);
  MEMORY[0x24BDAC7A8](v25);
  v103 = (char *)&v86 - v26;
  v27 = type metadata accessor for AttributedString.Runs.Run();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  v32 = *(void (***)(uint64_t, char *, uint64_t))(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (uint64_t)&v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?, v35);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v86 - v37;
  type metadata accessor for Range<AttributedString.Index>??(0);
  v40 = MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v86 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(void (**)(double))(v15 + 56);
  v113 = v42;
  v43(v40);
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v32[6])(v38, 1, v31) != 1)
  {
    v87 = v30;
    v103 = (char *)v27;
    v32[2](v34, v38, v31);
    v51 = ((uint64_t (*)(uint64_t, uint64_t))v32[11])(v34, v31);
    if (v51 == *MEMORY[0x24BDCC028])
    {
      v52 = 0x4122750000000000;
      v53 = v110;
      v54 = v105;
      v55 = v106;
      v56 = (uint64_t)v107;
      goto LABEL_22;
    }
    v53 = v110;
    v54 = v105;
    v55 = v106;
    v56 = (uint64_t)v107;
    if (v51 == *MEMORY[0x24BDCC018])
    {
      v52 = 0x40F5180000000000;
      goto LABEL_22;
    }
    if (v51 == *MEMORY[0x24BDCC020])
    {
      v52 = 0x40AC200000000000;
      goto LABEL_22;
    }
    if (v51 == *MEMORY[0x24BDCC030])
    {
      v52 = 0x404E000000000000;
      goto LABEL_22;
    }
    v52 = 1.0;
    if (v51 == *MEMORY[0x24BDCC038])
      goto LABEL_22;
    if (v51 == *MEMORY[0x24BDCC008])
    {
      v52 = 0x3EB0C6F7A0B5ED8DLL;
      goto LABEL_22;
    }
    if (v51 == *MEMORY[0x24BDCC010])
    {
      v52 = 0x3F50624DD2F1A9FCLL;
      goto LABEL_22;
    }
    if (v51 == *MEMORY[0x24BDCC000])
    {
      v52 = 0x3E112E0BE826D695;
      goto LABEL_22;
    }
    if (one-time initialization token for max != -1)
      goto LABEL_36;
    goto LABEL_21;
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v38, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?, (void (*)(uint64_t))MEMORY[0x24BDCC040]);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, a1, v27);
  v44 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v44);
  *(&v86 - 2) = v45;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
  v46 = (uint64_t)v103;
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v46, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?, (void (*)(uint64_t))MEMORY[0x24BDCC138]);
    outlined destroy of TypesettingConfiguration((uint64_t)v113, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>??);
    type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v111, 1, 1, v49);
  }
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.magnitude.getter(&v115);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  v52 = v115;
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  v53 = v110;
  v57 = (uint64_t)v113;
  v54 = v105;
  v55 = v106;
  v56 = (uint64_t)v107;
  while (1)
  {
    specialized getter of decimalSeparatorRange #1 in AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)(v57, v54, v53, a1, v56);
    v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v55 + 6);
    v55 = (char *)v112;
    v61 = v60(v56, 1, v112);
    v38 = v108;
    v28 = v109;
    if (v61 == 1)
    {
      outlined destroy of TypesettingConfiguration(v57, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>??);
      outlined destroy of TypesettingConfiguration(v56, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>?);
      type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
      v63 = v62;
      v64 = v111;
      v65 = (char *)v111 + *(int *)(v62 + 48);
      *v111 = v52;
      type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
      return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v64, 0, 1, v63);
    }
    v34 = (uint64_t)type metadata accessor for Range<AttributedString.Index>;
    v67 = v104;
    outlined init with take of LocalizedStringKey.FormatArgument(v56, v104, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    v32 = *(void (***)(uint64_t, char *, uint64_t))(v28 + 16);
    v31 = v101;
    ((void (*)(char *, uint64_t, uint64_t))v32)(v38, v67 + *((int *)v55 + 9), v101);
    v56 = (uint64_t)v100;
    a1 = v31;
    AttributedString.Runs.Run.range.getter();
    v54 = (uint64_t)v102;
    ((void (*)(char *, uint64_t, uint64_t))v32)(v102, v56 + *((int *)v55 + 9), v31);
    outlined destroy of TypesettingConfiguration(v56, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
    v53 = v31;
    if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
    {
      __break(1u);
      goto LABEL_35;
    }
    v68 = v96;
    v55 = v95;
    v69 = &v95[*(int *)(v96 + 48)];
    v70 = v28;
    v28 = *(_QWORD *)(v28 + 32);
    ((void (*)(char *, char *, uint64_t))v28)(v95, v38, a1);
    ((void (*)(char *, uint64_t, uint64_t))v28)(v69, v54, a1);
    v38 = v97;
    v71 = &v97[*(int *)(v68 + 48)];
    ((void (*)(char *, char *, uint64_t))v32)(v97, v55, a1);
    ((void (*)(char *, char *, uint64_t))v32)(v71, v69, a1);
    v54 = (uint64_t)v94;
    ((void (*)(char *, char *, uint64_t))v28)(v94, v38, a1);
    v72 = *(void (**)(char *, uint64_t))(v70 + 8);
    v72(v71, a1);
    v73 = &v38[*(int *)(v68 + 48)];
    v56 = v112;
    ((void (*)(char *, char *, uint64_t))v28)(v38, v55, a1);
    ((void (*)(char *, char *, uint64_t))v28)(v73, v69, a1);
    ((void (*)(uint64_t, char *, uint64_t))v28)(v54 + *(int *)(v56 + 36), v73, a1);
    v72(v38, a1);
    v31 = v99;
    outlined init with take of LocalizedStringKey.FormatArgument(v54, v99, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    if ((v98 & 1) == 0)
    {
      outlined destroy of TypesettingConfiguration(v104, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      outlined destroy of TypesettingConfiguration((uint64_t)v113, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>??);
      type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
      v77 = v83;
      v78 = v111;
      v79 = (uint64_t)v111 + *(int *)(v83 + 48);
      *v111 = v52;
      type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
      v81 = v84;
      v85 = v79 + *(int *)(v84 + 48);
      outlined init with take of LocalizedStringKey.FormatArgument(v31, v79, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      *(_QWORD *)v85 = 0;
      *(_BYTE *)(v85 + 8) = 1;
      goto LABEL_33;
    }
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x24BEE1BC0]);
    v74 = v88;
    AttributedString.subscript.getter();
    v32 = v91;
    AttributedSubstring.characters.getter();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v74, v90);
    v34 = AttributedString.CharacterView._count.getter();
    (*(void (**)(void (**)(uint64_t, char *, uint64_t), uint64_t))(v92 + 8))(v32, v93);
    v53 = (uint64_t)v113;
    if ((v34 & 0x8000000000000000) == 0)
      break;
LABEL_35:
    __break(1u);
LABEL_36:
    swift_once();
LABEL_21:
    v52 = static Calendar.Component.Magnitude.max;
    ((void (*)(uint64_t, uint64_t))v32[1])(v34, v31);
LABEL_22:
    ((void (*)(char *, uint64_t))v32[1])(v38, v31);
    v58 = v87;
    v59 = v103;
    (*(void (**)(char *, uint64_t, char *))(v28 + 16))(v87, a1, v103);
    (*(void (**)(char *, char *))(v28 + 8))(v58, v59);
    v57 = (uint64_t)v113;
  }
  v75 = *(double *)&v52;
  if (v34)
  {
    v75 = *(double *)&v52;
    do
    {
      v75 = v75 / 10.0;
      --v34;
    }
    while (v34);
  }
  outlined destroy of TypesettingConfiguration(v104, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  outlined destroy of TypesettingConfiguration(v53, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>??);
  type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
  v77 = v76;
  v78 = v111;
  v79 = (uint64_t)v111 + *(int *)(v76 + 48);
  *v111 = v52;
  type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
  v81 = v80;
  v82 = v79 + *(int *)(v80 + 48);
  outlined init with take of LocalizedStringKey.FormatArgument(v31, v79, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  *(double *)v82 = v75;
  *(_BYTE *)(v82 + 8) = 0;
LABEL_33:
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v79, 0, 1, v81);
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v78, 0, 1, v77);
}

uint64_t AttributedString.redactNumbers(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[32];

  v49 = a1;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributedString.Index?, (void (*)(uint64_t))MEMORY[0x24BDCC4F0]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v39 - v3;
  v5 = type metadata accessor for AttributedString.Index();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v39 - v10;
  type metadata accessor for DefaultIndices<AttributedString.CharacterView>(0);
  v47 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for AttributedString.CharacterView();
  v50 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (void (*)(char *, uint64_t))type metadata accessor for AttributedSubstring();
  v40 = *((_QWORD *)v46 - 1);
  MEMORY[0x24BDAC7A8](v46);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3038]);
  MEMORY[0x24BDAC7A8](v18);
  v45 = (char *)&v39 - v19;
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(0);
  v44 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v43 = (uint64_t)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v48 = (uint64_t)&v39 - v23;
  type metadata accessor for Range<AttributedString.Index>(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x24BEE1BC0]);
  v49 = v1;
  AttributedString.subscript.getter();
  AttributedSubstring.characters.getter();
  (*(void (**)(char *, _QWORD *))(v40 + 8))(v17, v46);
  v24 = v42;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v13, v15, v42);
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v46 = *(void (**)(char *, uint64_t))(v50 + 8);
  v46(v15, v24);
  v25 = v45;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v13, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v26 = v43;
  outlined init with copy of TypesettingLanguage((uint64_t)v25, v43, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v27 = &v25[*(int *)(v47 + 40)];
  v28 = v41;
  v50 = *(_QWORD *)(v6 + 16);
  ((void (*)(char *, char *, uint64_t))v50)(v41, v27, v5);
  outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v29 = v44;
  v30 = v26 + *(int *)(v44 + 36);
  v45 = *(char **)(v6 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v45)(v30, v28, v5);
  v31 = v48;
  outlined init with take of LocalizedStringKey.FormatArgument(v26, v48, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
  v32 = v31 + *(int *)(v29 + 36);
  v33 = v31 + *(int *)(v47 + 36);
  v43 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0], MEMORY[0x24BDCC508]);
  v44 = v33;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
LABEL_8:
    v35(v4, 1, 1, v5);
  }
  else
  {
    v47 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A0]);
    v34 = v42;
    while (1)
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      ((void (*)(char *, uint64_t, uint64_t))v50)(v4, v32, v5);
      v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v35(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        break;
      ((void (*)(char *, char *, uint64_t))v45)(v8, v4, v5);
      AttributedString.characters.getter();
      AttributedString.CharacterView.subscript.getter();
      v46(v15, v34);
      v36 = Character.isNumber.getter();
      swift_bridgeObjectRelease();
      if ((v36 & 1) != 0)
      {
        ((void (*)(char *, char *, uint64_t))v50)(v41, v8, v5);
        v37 = (void (*)(char *, _QWORD))AttributedString.characters.modify();
        v34 = v42;
        AttributedString.CharacterView.subscript.setter();
        v37(v51, 0);
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        goto LABEL_8;
    }
  }
  return outlined destroy of TypesettingConfiguration(v48, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>)()
{
  type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>(0, a4, a5);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t redact #1 (_:) in AttributedString.redact(for:locale:)(void (*a1)(char *, char *, uint64_t), int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a3;
  LODWORD(v43) = a2;
  v4 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?)();
  v39 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v40 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v37 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v37 - v16;
  v18 = type metadata accessor for AttributedSubstring();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v43 & 1) == 0)
    return AttributedString.redactNumbers(in:)((uint64_t)a1);
  v43 = (uint64_t)v11;
  v37 = v6;
  v38 = a1;
  outlined init with copy of TypesettingLanguage((uint64_t)a1, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  *(&v37 - 2) = v26;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x24BEE1BC0]);
  AttributedString.subscript.getter();
  outlined destroy of TypesettingConfiguration((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
  AttributedSubstring.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v28 = v41;
  v27 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v14, *MEMORY[0x24BDCBF68], v42);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, v27);
  v29 = v40;
  v30 = v40 + *(int *)(v39 + 48);
  outlined init with copy of TypesettingLanguage((uint64_t)v17, v40, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  outlined init with copy of TypesettingLanguage((uint64_t)v14, v30, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v31(v29, 1, v27) != 1)
  {
    v33 = v43;
    outlined init with copy of TypesettingLanguage(v29, v43, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
    if (v31(v30, 1, v27) != 1)
    {
      v34 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v37, v30, v27);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBF70], MEMORY[0x24BDCBF88]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v36 = *(void (**)(char *, uint64_t))(v28 + 8);
      v36(v34, v27);
      outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
      outlined destroy of TypesettingConfiguration((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
      v36((char *)v33, v27);
      result = outlined destroy of TypesettingConfiguration(v29, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
      if ((v35 & 1) == 0)
        return result;
      return AttributedString.redact(_:)(v38);
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
    outlined destroy of TypesettingConfiguration((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v33, v27);
    return outlined destroy of TypesettingConfiguration(v29, (uint64_t (*)(_QWORD))type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?));
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  outlined destroy of TypesettingConfiguration((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  if (v31(v30, 1, v27) != 1)
    return outlined destroy of TypesettingConfiguration(v29, (uint64_t (*)(_QWORD))type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?));
  outlined destroy of TypesettingConfiguration(v29, (uint64_t (*)(_QWORD))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  return AttributedString.redact(_:)(v38);
}

uint64_t AttributedString.redact(_:)(void (*a1)(char *, char *, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  void (*v37)(char *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[32];

  v44 = a1;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributedString.Index?, (void (*)(uint64_t))MEMORY[0x24BDCC4F0]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v39 - v3;
  v5 = type metadata accessor for AttributedString.Index();
  v47 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DefaultIndices<AttributedString.CharacterView>(0);
  v41 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for AttributedString.CharacterView();
  v10 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedSubstring();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3038]);
  MEMORY[0x24BDAC7A8](v17);
  v42 = (char *)&v39 - v18;
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(0);
  v40 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v39 = (uint64_t)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v48 = (uint64_t)&v39 - v22;
  type metadata accessor for Range<AttributedString.Index>(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x24BEE1BC0]);
  v43 = v1;
  AttributedString.subscript.getter();
  AttributedSubstring.characters.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v23 = v46;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v9, v12, v46);
  v24 = v41;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v23);
  v25 = v42;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v26 = v39;
  outlined init with copy of TypesettingLanguage((uint64_t)v25, v39, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v27 = &v25[*(int *)(v24 + 40)];
  v28 = v47;
  v29 = v45;
  v44 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v44(v45, v27, v5);
  outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v30 = v40;
  v31 = v26 + *(int *)(v40 + 36);
  v42 = *(char **)(v28 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v42)(v31, v29, v5);
  v32 = v48;
  outlined init with take of LocalizedStringKey.FormatArgument(v26, v48, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
  v33 = v32 + *(int *)(v30 + 36);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0], MEMORY[0x24BDCC508]);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v4, 1, 1, v5);
  }
  else
  {
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A0]);
    v34 = v45;
    while (1)
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v44(v4, (char *)v33, v5);
      v35 = v47;
      v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
      v36(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v4, 1, v5) == 1)
        break;
      ((void (*)(char *, char *, uint64_t))v42)(v34, v4, v5);
      v37 = (void (*)(char *, _QWORD))AttributedString.characters.modify();
      AttributedString.CharacterView.subscript.setter();
      v37(v49, 0);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        v36(v4, 1, 1, v5);
        return outlined destroy of TypesettingConfiguration(v48, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
      }
    }
  }
  return outlined destroy of TypesettingConfiguration(v48, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
}

uint64_t specialized getter of localeUsesDecimalSystem #1 in AttributedString.disableContentTransition(for:locale:)(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v2 = type metadata accessor for Locale.NumberingSystem();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - v7;
  v9 = *a1;
  if (v9 == 2)
  {
    Locale.numberingSystem.getter();
    Locale.NumberingSystem.init(_:)();
    v10 = MEMORY[0x23B7C5218](v8, v5);
    v11 = *(void (**)(char *, uint64_t))(v3 + 8);
    v11(v5, v2);
    v11(v8, v2);
    swift_beginAccess();
    *a1 = v10 & 1;
  }
  else
  {
    v10 = v9 & 1;
  }
  return v10 & 1;
}

uint64_t specialized getter of decimalSeparatorRange #1 in AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v53 = a4;
  v55 = a3;
  v59 = a2;
  v61 = a5;
  v52 = type metadata accessor for AttributedString.CharacterView();
  v56 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v58 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for AttributedSubstring();
  v51 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v57 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  v60 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>??(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v44 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v44 - v24;
  v26 = a1;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v44 - v24, v27);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v28((uint64_t)v25, 1, v13) == 1)
  {
    v44 = v28;
    v45 = v9;
    v46 = v14;
    v47 = v22;
    v30 = v57;
    v29 = v58;
    v48 = v16;
    v49 = v19;
    v50 = v26;
    outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>??);
    v31 = Locale.decimalSeparator.getter();
    if (v32)
    {
      v33 = v31;
      v34 = v32;
      AttributedString.Runs.Run.range.getter();
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x24BEE1BC0]);
      AttributedString.subscript.getter();
      outlined destroy of TypesettingConfiguration((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      v35 = v29;
      AttributedSubstring.characters.getter();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v54);
      v62 = v33;
      v63 = v34;
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A0]);
      lazy protocol witness table accessor for type String and conformance String();
      v36 = (uint64_t)v47;
      v37 = v52;
      BidirectionalCollection<>.firstRange<A>(of:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v37);
      v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
      v38(v36, 0, 1, v13);
      swift_bridgeObjectRelease();
      v39 = v44(v36, 1, v13);
      v40 = v61;
      v42 = (uint64_t)v49;
      v41 = v50;
      v25 = v48;
      if (v39 != 1)
      {
        outlined init with take of LocalizedStringKey.FormatArgument(v36, (uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>?);
LABEL_8:
        outlined init with copy of TypesettingLanguage((uint64_t)v25, v42, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>?);
        v38(v42, 0, 1, v13);
        swift_beginAccess();
        outlined assign with take of Range<AttributedString.Index>??(v42, v41);
        return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v25, v40, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>?);
      }
    }
    else
    {
      v36 = (uint64_t)v47;
      v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
      v38((uint64_t)v47, 1, 1, v13);
      v40 = v61;
      v42 = (uint64_t)v49;
      v41 = v50;
      v25 = v48;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v25, 1, 1, v60);
    outlined destroy of TypesettingConfiguration(v36, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>??);
    goto LABEL_8;
  }
  v40 = v61;
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v25, v40, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>?);
}

double TimeDataFormattingContainer.init(resolvable:)@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3[2];
  uint64_t v4;
  __int128 v5[2];

  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(v3, (uint64_t)v5);
    outlined init with take of ScrollStateRequest(v5, a1);
  }
  else
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    outlined destroy of AnyTrackedValue?((uint64_t)v3, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t TimeDataFormattingContainer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17[2];
  uint64_t v18[5];
  _OWORD v19[2];
  uint64_t v20;

  static TimeDataFormatting.decode(from:)(a1, v18);
  if (!v2)
  {
    outlined init with copy of ResolvableStringAttribute?((uint64_t)v18, (uint64_t)v12);
    if (v13)
    {
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          outlined destroy of AnyTrackedValue?((uint64_t)v18, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
          outlined init with take of ScrollStateRequest(&v14, (uint64_t)v17);
          outlined init with take of ScrollStateRequest(v17, (uint64_t)v19);
          v5 = v19[1];
          *(_OWORD *)a2 = v19[0];
          *(_OWORD *)(a2 + 16) = v5;
          *(_QWORD *)(a2 + 32) = v20;
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        }
      }
      else
      {
        v16 = 0;
        v14 = 0u;
        v15 = 0u;
      }
    }
    else
    {
      outlined destroy of AnyTrackedValue?((uint64_t)v12, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
    }
    outlined destroy of AnyTrackedValue?((uint64_t)&v14, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
    v6 = type metadata accessor for DecodingError();
    swift_allocError();
    v8 = v7;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, (void (*)(uint64_t))MEMORY[0x24BEE2700]);
    *v8 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
    v9 = a1[3];
    v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    MEMORY[0x23B7C7774](v9, v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, *MEMORY[0x24BEE26D0], v6);
    swift_willThrow();
    outlined destroy of AnyTrackedValue?((uint64_t)v18, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TimeDataFormattingContainer.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a1, v3, v4);
}

uint64_t TimeDataFormattingContainer.text.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t TimeDataFormattingContainer.representation(for:)(char *a1)
{
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v2 = *a1;
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 32))(&v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataFormattingContainer@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataFormattingContainer.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataFormattingContainer(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a1, v3, v4);
}

void TimeDataFormatting.Resolvable.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[18];

  v16[3] = a3;
  v16[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16[1] = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v16[5] = (char *)v16 - v5;
  v16[7] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v16[0] = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v16[8] = v10;
  v16[9] = (char *)v16 - v11;
  v16[13] = v12;
  v16[14] = v13;
  v16[15] = v10;
  v16[16] = v14;
  v16[6] = v14;
  v16[2] = v15;
  v16[17] = v15;
  type metadata accessor for TimeDataFormatting.Resolvable.CodingKeys();
}

uint64_t sub_234C84B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys, a1);
  v5 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v4 - 136) = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - v6;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  *(_QWORD *)(v4 - 144) = v7;
  v8 = *(_QWORD *)(v4 - 128);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v8)
  {
    v9 = *(_QWORD *)(v4 - 168);
    v10 = *(_QWORD *)(v4 - 184);
    *(_BYTE *)(v4 - 120) = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_BYTE *)(v4 - 120) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_BYTE *)(v4 - 120) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v9 + 16))(*(_QWORD *)(v4 - 224), *(_QWORD *)(v4 - 152), v1);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 192) + 16))(*(_QWORD *)(v4 - 216), v10, v2);
    *(_QWORD *)(v4 - 120) = 0;
    static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(*(_QWORD *)(v4 - 200));
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void sub_234C84D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 192) + 8);
  v6(v1, v2);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 168) + 8);
  v7(v3, v0);
  v6(v4, v2);
  v7(*(_QWORD *)(v5 - 152), v0);
  JUMPOUT(0x234C84CD4);
}

void TimeDataFormatting.Resolvable.encode(to:)()
{
  type metadata accessor for TimeDataFormatting.Resolvable.CodingKeys();
}

uint64_t sub_234C84E20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v2 - 120) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v7)
  {
    *(_BYTE *)(v2 - 120) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_BYTE *)(v2 - 120) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t TimeDataFormatting.Resolvable.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TimeDataFormatting.Resolvable.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t TimeDataFormatting.Resolvable.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return 0x656372756F73;
  if (a1 == 1)
    return 0x74616D726F66;
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  unint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = TimeDataFormatting.Resolvable.CodingKeys.init(rawValue:)(v5);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = TimeDataFormatting.Resolvable.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  char *v0;

  return TimeDataFormatting.Resolvable.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = TimeDataFormatting.Resolvable.CodingKeys.init(stringValue:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
  *a4 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance TimeDataFormatting.Resolvable<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TimeDataFormatting.Resolvable.init(from:)(a1, *(_QWORD *)(a2 + 24), a3);
}

void protocol witness for Encodable.encode(to:) in conformance TimeDataFormatting.Resolvable<A, B>()
{
  TimeDataFormatting.Resolvable.encode(to:)();
}

void TimeDataFormatting.Resolvable<>.makeText()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v11 + 16))(&v12[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v1, v8, v9);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(int *)(a1 + 60), v3);
  Text.init<A, B>(source:format:reducedLuminanceBudget:)();
}

void TimeDataFormatting.Resolvable<>.serialize(to:)()
{
  static TimeDataFormatting.Resolvable.encode(_:to:)();
}

uint64_t TimeDataFormatting.Resolvable<>._representation(for:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;

  v5 = *a1;
  return (*(uint64_t (**)(uint64_t, char *, _QWORD, _QWORD))(a3 + 24))(v3, &v5, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32));
}

void protocol witness for SafelyCodableResolvable.makeText() in conformance <> TimeDataFormatting.Resolvable<A, B>(uint64_t a1)
{
  TimeDataFormatting.Resolvable<>.makeText()(a1);
}

void protocol witness for SafelyCodableResolvable.serialize(to:) in conformance <> TimeDataFormatting.Resolvable<A, B>()
{
  TimeDataFormatting.Resolvable<>.serialize(to:)();
}

uint64_t protocol witness for SafelyCodableResolvable._representation(for:) in conformance <> TimeDataFormatting.Resolvable<A, B>(char *a1, uint64_t a2, uint64_t a3)
{
  return TimeDataFormatting.Resolvable<>._representation(for:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t static SafelyCodableRequirement.checkedCodableType<A>(_:)(uint64_t a1)
{
  if (swift_conformsToProtocol2())
    return a1;
  else
    return 0;
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x23B7C9D6C](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  return result;
}

void type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index))
  {
    type metadata accessor for AttributedString.Index();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index));
  }
}

void type metadata accessor for (@thick Any.Type, DecodingError.Context)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for Range<AttributedString.Index>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for Range<AttributedString.Index>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
}

uint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0], MEMORY[0x24BDCC500]);
}

void type metadata accessor for Calendar.Component.Magnitude?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Calendar.Component.Magnitude?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Calendar.Component.Magnitude?);
  }
}

void type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?))
  {
    type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
  }
}

void type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(uint64_t a1)
{
  type metadata accessor for Date?(a1, &lazy cache variable for type metadata for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?, (void (*)(uint64_t))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?));
}

void type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?))
  {
    type metadata accessor for Range<AttributedString.Index>(255);
    type metadata accessor for Calendar.Component.Magnitude?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?));
  }
}

void type metadata accessor for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?))
  {
    type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
  }
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], MEMORY[0x24BDCC4B8]);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], MEMORY[0x24BDCC4C8]);
}

void type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>.Iterator, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x24BEE3028]);
}

void type metadata accessor for IndexingIterator<AttributedString.Runs>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for IndexingIterator<AttributedString.Runs>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
}

void type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(uint64_t a1)
{
  type metadata accessor for Date?(a1, &lazy cache variable for type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, (void (*)(uint64_t))MEMORY[0x24BDCBF70]);
}

uint64_t sub_234C858E4()
{
  return AttributeScopes.FoundationAttributes.measurement.getter();
}

uint64_t sub_234C85904()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
}

uint64_t sub_234C85930()
{
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_234C85978()
{
  return 8;
}

uint64_t sub_234C85984()
{
  return swift_release();
}

uint64_t sub_234C8598C(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_234C8599C()
{
  type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>();
  return dispatch thunk of Hashable.hashValue.getter();
}

_QWORD *sub_234C859DC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_234C859E8()
{
  AttributeScopes.FoundationAttributes.durationField.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCC048], MEMORY[0x24BDCC058]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute);
  }
  return result;
}

void sub_234C85A48()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234C85A6C()
{
  return 8;
}

uint64_t sub_234C85A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DurationFieldAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]) & 1;
}

uint64_t sub_234C85AA8(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DurationFieldAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]);
}

uint64_t keypath_hash_37Tm(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>(0, a3, a4);
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_234C85B10()
{
  AttributeScopes.FoundationAttributes.dateField.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCC150], MEMORY[0x24BDCC170]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCC158], MEMORY[0x24BDCC170]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCC160], MEMORY[0x24BDCC170]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

void sub_234C85B70()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234C85B94()
{
  return 8;
}

uint64_t sub_234C85BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]) & 1;
}

uint64_t sub_234C85BD0(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]);
}

void type metadata accessor for TimeDataFormatting.Resolvable()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t outlined init with copy of ResolvableStringAttribute?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TimeDataFormatting.Resolvable.CodingKeys()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void associated type witness table accessor for ResolvableStringAttribute.Schedule : TimelineSchedule in TimeDataFormatting.Resolvable<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for TimeDataFormatting.Resolvable<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void base witness table accessor for Equatable in TimeDataFormatting.Resolvable<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in TimeDataFormatting.Resolvable<A, B>()
{
  return &protocol witness table for TimeDataFormatting;
}

uint64_t instantiation function for generic protocol witness table for <> TimeDataFormatting.Resolvable<A, B>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>);
  a1[2] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>, a2);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>, a2);
  a1[3] = result;
  return result;
}

ValueMetadata *type metadata accessor for TimeDataFormatting()
{
  return &type metadata for TimeDataFormatting;
}

uint64_t type metadata completion function for TimeDataFormatting.Resolvable()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 <= 0x3F)
      type metadata accessor for TimeDataFormatting.Configuration();
    return v2;
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.Resolvable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v8 + v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = *(_DWORD *)(v7 + 80);
  v14 = v13 & 0xF8 | 7;
  v15 = (v14 + ((v12 + ((v8 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14;
  v16 = v8 + 7;
  v17 = (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  if ((v14 | v10) != 7 || ((v13 | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v17 + v15 + 48 > 0x18)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (uint64_t *)(v20 + (((v14 | v10) + 16) & ~(v14 | v10)));
    swift_retain();
  }
  else
  {
    v22 = ~v10;
    v39 = *(_QWORD *)(a3 + 16);
    v40 = v17 + 40;
    v23 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    v23(a1, a2, v5);
    v41 = a1;
    v24 = ((unint64_t)a1 + v11) & v22;
    v25 = ((unint64_t)a2 + v11) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v24, v25, v6);
    v26 = (_QWORD *)((v12 + v24) & 0xFFFFFFFFFFFFFFF8);
    v27 = (_QWORD *)((v12 + v25) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v27;
    v28 = ((unint64_t)v26 + v14 + 8) & ~v14;
    v29 = ((unint64_t)v27 + v14 + 8) & ~v14;
    v23((uint64_t *)v28, (uint64_t *)v29, v39);
    v30 = (v16 + v28) & 0xFFFFFFFFFFFFFFF8;
    v31 = (v16 + v29) & 0xFFFFFFFFFFFFFFF8;
    v32 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v30 + 24) = v32;
    *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
    (**(void (***)(unint64_t, unint64_t))(v32 - 8))(v30, v31);
    v33 = (v30 + 47) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v31 + 47) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(_QWORD *)(v34 + 24);
    if (v35 < 0xFFFFFFFF)
    {
      v36 = *(_OWORD *)v34;
      v37 = *(_OWORD *)(v34 + 16);
      *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
      *(_OWORD *)v33 = v36;
      *(_OWORD *)(v33 + 16) = v37;
    }
    else
    {
      *(_QWORD *)(v33 + 24) = v35;
      *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
      (**(void (***)(void))(v35 - 8))();
    }
    v21 = v41;
    *(_QWORD *)(v28 + v40) = *(_QWORD *)(v29 + v40);
  }
  return v21;
}

unint64_t destroy for TimeDataFormatting.Resolvable(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(unint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + a1;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  v11 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v12 = (((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & ~v11;
  v6(v12, v4);
  v13 = (v7 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v13);
  result = (v13 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v9 + v11 + a1) & ~v11;
  v13 = (v9 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = *(_DWORD *)(v7 + 80) & 0xF8;
  v18 = v17 + 15;
  v19 = (unint64_t)v15 + v17 + 15;
  v20 = ~v17 & 0xFFFFFFFFFFFFFFF8;
  v21 = v19 & v20;
  v22 = ((unint64_t)v16 + v18) & v20;
  v8(v19 & v20, v22, v6);
  v23 = (v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  *(_QWORD *)(v23 + 24) = v25;
  *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
  (**(void (***)(unint64_t, unint64_t))(v25 - 8))(v23, v24);
  v26 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 24);
  if (v28 < 0xFFFFFFFF)
  {
    v29 = *(_OWORD *)v27;
    v30 = *(_OWORD *)(v27 + 16);
    *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
    *(_OWORD *)v26 = v29;
    *(_OWORD *)(v26 + 16) = v30;
  }
  else
  {
    *(_QWORD *)(v26 + 24) = v28;
    *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
    (**(void (***)(void))(v28 - 8))();
  }
  v31 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(_QWORD *)(v21 + v31) = *(_QWORD *)(v22 + v31);
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v9 + v11 + a1) & ~v11;
  v13 = (v9 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = *(_DWORD *)(v7 + 80) & 0xF8;
  v18 = v17 + 15;
  v19 = (unint64_t)v15 + v17 + 15;
  v20 = ~v17 & 0xFFFFFFFFFFFFFFF8;
  v21 = v19 & v20;
  v22 = ((unint64_t)v16 + v18) & v20;
  v8(v19 & v20, v22, v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)((v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8));
  v23 = (((v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v24 = (((v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v23 + 24) = v25;
      *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
      (**(void (***)(unint64_t, unint64_t))(v25 - 8))((((v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8, v24);
      goto LABEL_8;
    }
LABEL_7:
    v26 = *(_OWORD *)v24;
    v27 = *(_OWORD *)(v24 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
    *(_OWORD *)v23 = v26;
    *(_OWORD *)(v23 + 16) = v27;
    goto LABEL_8;
  }
  if (v25 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((((v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((((v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)v24);
LABEL_8:
  v28 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(_QWORD *)(v21 + v28) = *(_QWORD *)(v22 + v28);
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v9 + v11 + a1) & ~v11;
  v13 = (v9 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = *(_DWORD *)(v7 + 80) & 0xF8;
  v18 = v17 + 15;
  v19 = (unint64_t)v15 + v17 + 15;
  v20 = ~v17 & 0xFFFFFFFFFFFFFFF8;
  v21 = v19 & v20;
  v22 = ((unint64_t)v16 + v18) & v20;
  v8(v19 & v20, v22, v6);
  v23 = (v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v26;
  *(_QWORD *)(v23 + 32) = v25;
  v27 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_OWORD *)v28;
  v29 = *(_OWORD *)(v28 + 16);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  *(_OWORD *)v27 = v30;
  *(_OWORD *)(v27 + 16) = v29;
  v31 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(_QWORD *)(v21 + v31) = *(_QWORD *)(v22 + v31);
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v9 + v11 + a1) & ~v11;
  v13 = (v9 + v11 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = *(_DWORD *)(v7 + 80) & 0xF8;
  v18 = v17 + 15;
  v19 = (unint64_t)v15 + v17 + 15;
  v20 = ~v17 & 0xFFFFFFFFFFFFFFF8;
  v21 = v19 & v20;
  v22 = ((unint64_t)v16 + v18) & v20;
  v8(v19 & v20, v22, v6);
  v23 = (v9 + 7 + v21) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v23);
  v25 = *(_OWORD *)v24;
  v26 = *(_OWORD *)(v24 + 16);
  *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
  *(_OWORD *)v23 = v25;
  *(_OWORD *)(v23 + 16) = v26;
  v27 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v27 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(v27);
  v28 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_OWORD *)v28;
  v30 = *(_OWORD *)(v28 + 16);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  *(_OWORD *)v27 = v29;
  *(_OWORD *)(v27 + 16) = v30;
  v31 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(_QWORD *)(v21 + v31) = *(_QWORD *)(v22 + v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.Resolvable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v5 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v4 + 84);
  if (v8 <= v7)
    v9 = *(_DWORD *)(v6 + 84);
  else
    v9 = v8;
  if (!a2)
    return 0;
  v10 = *(_QWORD *)(v4 + 64);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = v10 + v11;
  v13 = *(_QWORD *)(v6 + 64) + 7;
  v14 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v15 = v10 + 7;
  if (v9 < a2)
  {
    if ((((((v15 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + ((v14 + ((v13 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14)
         + 48) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v9 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X19 }
  }
  if (v5 == v9)
    goto LABEL_23;
  v20 = (v12 + a1) & ~v11;
  if (v7 >= v8)
    __asm { BR              X3 }
  v21 = (((v13 + v20) & 0xFFFFFFFFFFFFFFF8) + v14 + 8) & ~v14;
  if (v5 >= 0x7FFFFFFF)
LABEL_23:
    __asm { BR              X3 }
  v22 = *(_QWORD *)(((v15 + v21) & 0xFFFFFFFFFFFFF8) + 0x18);
  if (v22 >= 0xFFFFFFFF)
    LODWORD(v22) = -1;
  return (v22 + 1);
}

void storeEnumTagSinglePayload for TimeDataFormatting.Resolvable(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_DWORD **)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (v5[21] <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = v5[21];
  if (v7 <= *(_DWORD *)(v6 + 84))
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = v7;
  if (v8 >= a3)
  {
    v11 = 0;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((((v5[16] + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8)
       + (((v5[20] & 0xF8 | 7)
         + ((*(_DWORD *)(v6 + 64) + 7 + ((v5[16] + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8)
         + 8) & ~(v5[20] & 0xF8 | 7)) == -48)
      v9 = a3 - v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X21 }
  }
  if (((((v5[16] + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8)
     + (((v5[20] & 0xF8 | 7)
       + ((*(_DWORD *)(v6 + 64) + 7 + ((v5[16] + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8)
       + 8) & ~(v5[20] & 0xF8 | 7)) != -48)
  {
    v12 = ~v8 + a2;
    bzero(a1, ((((*((_QWORD *)v5 + 8) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)+ (((v5[20] & 0xF8 | 7)+ ((*(_QWORD *)(v6 + 64)+ 7+ ((*((_QWORD *)v5 + 8) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 8) & ~(v5[20] & 0xF8 | 7))+ 48);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234C86980()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234C86A68);
}

void sub_234C86988(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234C86990);
  JUMPOUT(0x234C86A68);
}

void sub_234C869F4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C86A68);
}

void sub_234C869FC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234C86A68);
}

void sub_234C86A04(int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)(v15 + v16) = 0;
  if (a2)
  {
    if (a3 == a1)
      JUMPOUT(0x234C86A1CLL);
    if (v9 >= v11)
      JUMPOUT(0x234C86A10);
    v6 = (a5 + v15) & a6;
    v7 = (_DWORD *)((((v13 + v6) & 0xFFFFFFFFFFFFFFF8) + v14 + 8) & v10);
    if (v11 >= a2)
      JUMPOUT(0x234C86A30);
    if (v12 != -40)
    {
      v8 = ~v11 + a2;
      bzero((void *)((((v13 + v6) & 0xFFFFFFFFFFFFFFF8) + v14 + 8) & v10), (v12 + 40));
      *v7 = v8;
    }
  }
  JUMPOUT(0x234C86A68);
}

uint64_t destroy for TimeDataFormattingContainer(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for TimeDataFormattingContainer(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for TimeDataFormattingContainer(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t assignWithTake for TimeDataFormattingContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for TimeDataFormattingContainer()
{
  return &type metadata for TimeDataFormattingContainer;
}

uint64_t storeEnumTagSinglePayload for TimeDataFormatting.Resolvable.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234C86B84 + 4 * byte_2352929B4[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234C86BB8 + 4 * byte_2352929AF[v4]))();
}

uint64_t sub_234C86BB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C86BC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C86BC8);
  return result;
}

uint64_t sub_234C86BD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C86BDCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234C86BE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C86BE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SafelyCodableRequirement()
{
  return &unk_250639928;
}

void base witness table accessor for Equatable in TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)()
{
  return 3;
}

void type metadata accessor for DefaultIndices<AttributedString.CharacterView>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for DefaultIndices<AttributedString.CharacterView>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE0650]);
}

uint64_t lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2B0]);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A0]);
}

unint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>;
  if (!lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>)
  {
    type metadata accessor for DefaultIndices<AttributedString.CharacterView>(255);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A0]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE0658], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>);
  }
  return result;
}

void type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, MEMORY[0x24BEE3028]);
}

void type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>)
  {
    type metadata accessor for AttributeScopes.FoundationAttributes();
    type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute();
    v0 = type metadata accessor for KeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>);
  }
}

void type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?))
  {
    type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?));
  }
}

void type metadata accessor for Range<AttributedString.Index>?(uint64_t a1)
{
  type metadata accessor for Date?(a1, &lazy cache variable for type metadata for Range<AttributedString.Index>?, type metadata accessor for Range<AttributedString.Index>);
}

void type metadata accessor for Range<AttributedString.Index>??(uint64_t a1)
{
  type metadata accessor for Date?(a1, &lazy cache variable for type metadata for Range<AttributedString.Index>??, type metadata accessor for Range<AttributedString.Index>?);
}

uint64_t outlined assign with take of Range<AttributedString.Index>??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Range<AttributedString.Index>??(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_234C86E8C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
  result = AttributeDynamicLookup.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_234C86ED4()
{
  return 8;
}

uint64_t sub_234C86EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234C86F10(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy, &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy, &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy, &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy, &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy, &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

void type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for KeyPath();
    if (!v5)
      atomic_store(v4, a2);
  }
}

double _ColorInvertEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 2;
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(_BYTE *)(v2 + 132) = 16;
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_234C87064()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

uint64_t static _ColorInvertEffect.== infix(_:_:)()
{
  return 1;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorInvertEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 2;
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(_BYTE *)(v2 + 132) = 16;
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t View.colorInvert()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _ColorInvertEffect, a2);
}

unint64_t instantiation function for generic protocol witness table for _ColorInvertEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ColorInvertEffect and conformance _ColorInvertEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ColorInvertEffect and conformance _ColorInvertEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ColorInvertEffect and conformance _ColorInvertEffect;
  if (!lazy protocol witness table cache variable for type _ColorInvertEffect and conformance _ColorInvertEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ColorInvertEffect, &type metadata for _ColorInvertEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorInvertEffect and conformance _ColorInvertEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for _ColorInvertEffect()
{
  return &type metadata for _ColorInvertEffect;
}

uint64_t sub_234C871C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _ColorInvertEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _ColorInvertEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void specialized static DefaultSystemColorDefinition_PhoneTV.value(for:environment:)(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = *a1;
  v3 = *a2;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v12);
    swift_release_n();
    swift_release_n();
    v4 = v12;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v12);
    swift_release_n();
    swift_release_n();
    if ((v4 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
    BloomFilter.init(hashValue:)(v5);
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v11);
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 72);
    else
      v8 = 0;
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey);
    BloomFilter.init(hashValue:)(v9);
    v10 = swift_retain_n();
    specialized find1<A>(_:key:filter:)(v10, v11);
    swift_release_n();
    if (!v8)
LABEL_3:
      __asm { BR              X9 }
  }
  __asm { BR              X9 }
}

uint64_t sub_234C873E4(__n128 a1, __n128 a2, __n128 a3)
{
  char v3;

  if ((v3 & 1) != 0)
  {
    a2.n128_u32[0] = 1054003923;
    a3.n128_u32[0] = 1052951235;
  }
  else
  {
    a2.n128_u32[0] = 1049266827;
    a3.n128_u32[0] = 1047062761;
  }
  return specialized Color.Resolved.init(red:green:blue:opacity:)(a1, a2, a3);
}

void type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for EnvironmentPropertyKey(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v4;
  uint64_t v5;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  void (*v13)(_QWORD *);
  void *v14;
  uint64_t v15[3];
  _QWORD v16[2];

  v2 = v1;
  if (*(_BYTE *)(v1 + 34) == 1)
  {
    v4 = *(_WORD *)(v1 + 32);
    v5 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)a1 = *(_QWORD *)v1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = v4 & 1;
    *(_BYTE *)(a1 + 33) = HIBYTE(v4) & 1;
    return outlined retain of Environment<OpenURLAction>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<OpenURLAction>.Content);
  }
  else
  {
    outlined retain of Environment<OpenURLAction>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<OpenURLAction>.Content);
    v7 = static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    v8 = (void *)static Log.runtimeIssuesLog;
    v9 = v7;
    if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v7))
    {
      v10 = v8;
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v15[0] = v12;
      *(_DWORD *)v11 = 136315138;
      v16[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x414C52556E65704FLL, 0xED00006E6F697463, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2349C4000, v10, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v12, -1, -1);
      MEMORY[0x23B7C9D54](v11, -1, -1);

    }
    v16[0] = 0;
    v16[1] = 0;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v13 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v14 = static CoreGlue2.shared;
    v13(v16);

    swift_getAtKeyPath();
    outlined retain of Environment<OpenURLAction>(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<OpenURLAction>.Content);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(_QWORD *);
  void *v11;
  uint64_t v12[3];
  _QWORD v13[2];

  v3 = result;
  if ((a2 & 1) != 0)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<DynamicTypeSize>.Content(result, 0);
    v4 = static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    v5 = (void *)static Log.runtimeIssuesLog;
    v6 = v4;
    if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v4))
    {
      v7 = v5;
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12[0] = v9;
      *(_DWORD *)v8 = 136315138;
      v13[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x5463696D616E7944, 0xEF657A6953657079, v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2349C4000, v7, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v9, -1, -1);
      MEMORY[0x23B7C9D54](v8, -1, -1);

    }
    v13[0] = 0;
    v13[1] = 0;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v10 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v11 = static CoreGlue2.shared;
    v10(v13);

    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

double specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  os_log_type_t v3;
  void *v4;
  os_log_type_t v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  void (*v9)(_QWORD *);
  void *v10;
  uint64_t v12[3];
  _QWORD v13[3];

  if ((a2 & 1) != 0)
    return *(double *)&a1;
  swift_retain();
  v3 = static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1)
    swift_once();
  v4 = (void *)static Log.runtimeIssuesLog;
  v5 = v3;
  if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v3))
  {
    v6 = v4;
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v13[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x74616F6C464743, 0xE700000000000000, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2349C4000, v6, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7C9D54](v8, -1, -1);
    MEMORY[0x23B7C9D54](v7, -1, -1);

  }
  v13[0] = 0;
  v13[1] = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v10 = static CoreGlue2.shared;
  v9(v13);

  swift_getAtKeyPath();
  outlined consume of Environment<CGFloat>.Content(a1, 0);
  swift_release();
  swift_release();
  return *(double *)&v13[2];
}

uint64_t LinkDestination.Configuration.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t LinkDestination.Configuration.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*LinkDestination.Configuration.url.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LinkDestination.Configuration.isSensitive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for LinkDestination.Configuration(0) + 20));
}

uint64_t type metadata accessor for LinkDestination.Configuration(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LinkDestination.Configuration);
}

uint64_t LinkDestination.Configuration.isSensitive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for LinkDestination.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*LinkDestination.Configuration.isSensitive.modify())(_QWORD, _QWORD)
{
  type metadata accessor for LinkDestination.Configuration(0);
  return _ViewInputs.base.modify;
}

uint64_t LinkDestination.Configuration.init(url:isSensitive:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for LinkDestination.Configuration(0);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LinkDestination.Configuration.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7469736E65537369;
  else
    return 7107189;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkDestination.Configuration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized LinkDestination.Configuration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkDestination.Configuration.CodingKeys()
{
  lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkDestination.Configuration.CodingKeys()
{
  lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t LinkDestination.Configuration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  type metadata accessor for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDAE0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for LinkDestination.Configuration(0);
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinkDestination.Configuration.CodingKeys, &unk_25061E7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinkDestination.Configuration.CodingKeys, &unk_25061E7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinkDestination.Configuration.CodingKeys, &unk_25061E7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinkDestination.Configuration.CodingKeys, &unk_25061E7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

uint64_t LinkDestination.Configuration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  v26 = a2;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  v30 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v27 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<LinkDestination.Configuration.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v28 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for LinkDestination.Configuration(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = v11;
  v25 = v13;
  v14 = v8;
  v15 = v30;
  v32 = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB10]);
  v17 = v27;
  v16 = v28;
  v18 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v19 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v20 = (uint64_t)v25;
  v19(v25, v17, v18);
  v31 = 1;
  v21 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v16);
  *(_BYTE *)(v20 + *(int *)(v24 + 20)) = v21 & 1;
  outlined init with copy of LinkDestination.Configuration(v20, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of LinkDestination.Configuration(v20);
}

void type metadata accessor for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
    v7 = a3(a1, &unk_25061E7A8, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL();
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of LinkDestination.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of LinkDestination.Configuration(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LinkDestination.Configuration@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LinkDestination.Configuration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LinkDestination.Configuration(_QWORD *a1)
{
  return LinkDestination.Configuration.encode(to:)(a1);
}

uint64_t LinkDestination.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LinkDestination(0) + 24);
  return outlined init with copy of LinkDestination.Configuration(v3, a1);
}

uint64_t type metadata accessor for LinkDestination(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LinkDestination);
}

uint64_t LinkDestination.configuration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LinkDestination(0) + 24);
  return outlined assign with take of LinkDestination.Configuration(a1, v3);
}

uint64_t outlined assign with take of LinkDestination.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LinkDestination.configuration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for LinkDestination(0);
  return _ViewInputs.base.modify;
}

uint64_t LinkDestination.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = swift_getKeyPath();
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 31) = 0;
  *(_QWORD *)(a2 + 40) = swift_getKeyPath();
  v4 = type metadata accessor for LinkDestination(0);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 71) = 0;
  return outlined init with take of LinkDestination.Configuration(a1, a2 + *(int *)(v4 + 24));
}

uint64_t outlined init with take of LinkDestination.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall LinkDestination.open()()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _QWORD v15[4];
  char v16;
  char v17;
  _QWORD v18[4];
  char v19;
  char v20;
  __int128 v21;
  _OWORD v22[2];

  v1 = type metadata accessor for LinkDestination.Configuration(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (uint64_t)v0 + *(int *)(type metadata accessor for LinkDestination(0) + 24);
  if (*(_BYTE *)(v4 + *(int *)(v1 + 20)) == 1)
  {
    v5 = *(__int128 *)((char *)v0 + 56);
    v21 = *(__int128 *)((char *)v0 + 40);
    v22[0] = v5;
    v6 = *(_DWORD *)((char *)v0 + 71);
  }
  else
  {
    v7 = v0[1];
    v21 = *v0;
    v22[0] = v7;
    v6 = *(_DWORD *)((char *)v0 + 31);
  }
  *(_DWORD *)((char *)v22 + 15) = v6;
  outlined retain of Environment<OpenURLAction>((uint64_t)&v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<OpenURLAction>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v18);
  outlined retain of Environment<OpenURLAction>((uint64_t)&v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<OpenURLAction>.Content);
  v8 = v18[0];
  v9 = v18[1];
  v10 = v18[2];
  v11 = v18[3];
  v12 = v19;
  v13 = v20;
  outlined init with copy of LinkDestination.Configuration(v4, (uint64_t)v3);
  v15[0] = v8;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v11;
  v16 = v12;
  v17 = v13;
  specialized OpenURLAction._open(_:completion:)((uint64_t)v3, (uint64_t)v15);
  outlined consume of OpenURLAction.Handler(v8, v9, v10, v11, v12);
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v3, v14);
}

uint64_t outlined copy of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if ((a6 & 1) != 0)
    return outlined copy of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  else
    return swift_retain();
}

uint64_t outlined retain of Environment<OpenURLAction>(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
  return a1;
}

uint64_t outlined consume of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if ((a6 & 1) != 0)
    return outlined consume of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  else
    return swift_release();
}

unint64_t initializeBufferWithCopyOfBuffer for LinkDestination(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 34);
    v12 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v8, v9, v10, v12, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_WORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 34) = v11;
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 56);
    v16 = *(_QWORD *)(a2 + 64);
    v17 = *(_BYTE *)(a2 + 74);
    v18 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v16;
    *(_WORD *)(a1 + 72) = v18;
    *(_BYTE *)(a1 + 74) = v17;
    v19 = *(int *)(a3 + 24);
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = type metadata accessor for LinkDestination.Configuration(0);
    *(_BYTE *)(v20 + *(int *)(v23 + 20)) = *(_BYTE *)(v21 + *(int *)(v23 + 20));
  }
  return a1;
}

uint64_t destroy for LinkDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32), *(_BYTE *)(a1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_WORD *)(a1 + 72), *(_BYTE *)(a1 + 74));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 34);
  v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v7, v8, v9, v11, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_WORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 34) = v10;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_BYTE *)(a2 + 74);
  v17 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v15;
  *(_WORD *)(a1 + 72) = v17;
  *(_BYTE *)(a1 + 74) = v16;
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = type metadata accessor for LinkDestination.Configuration(0);
  *(_BYTE *)(v19 + *(int *)(v22 + 20)) = *(_BYTE *)(v20 + *(int *)(v22 + 20));
  return a1;
}

uint64_t assignWithCopy for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 34);
  v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v7, v8, v9, v11, v10);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v17 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 34) = v10;
  outlined consume of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  v22 = *(_BYTE *)(a2 + 74);
  v23 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v23, v22);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(a1 + 64);
  v28 = *(_BYTE *)(a1 + 74);
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  v29 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v23;
  *(_BYTE *)(a1 + 74) = v22;
  outlined consume of Environment<OpenURLAction>.Content(v24, v25, v26, v27, v29, v28);
  v30 = *(int *)(a3 + 24);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  v34 = type metadata accessor for LinkDestination.Configuration(0);
  *(_BYTE *)(v31 + *(int *)(v34 + 20)) = *(_BYTE *)(v32 + *(int *)(v34 + 20));
  return a1;
}

uint64_t initializeWithTake for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 24);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v6, v8);
  v9 = type metadata accessor for LinkDestination.Configuration(0);
  *(_BYTE *)(v7 + *(int *)(v9 + 20)) = *(_BYTE *)(v6 + *(int *)(v9 + 20));
  return a1;
}

uint64_t assignWithTake for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int16 v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_WORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 34);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 34);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 34) = v7;
  outlined consume of Environment<OpenURLAction>.Content(v8, v9, v10, v11, v14, v12);
  v15 = *(_WORD *)(a2 + 72);
  v16 = *(_BYTE *)(a2 + 74);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v22 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 74) = v16;
  outlined consume of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v22, v21);
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = type metadata accessor for LinkDestination.Configuration(0);
  *(_BYTE *)(v24 + *(int *)(v27 + 20)) = *(_BYTE *)(v25 + *(int *)(v27 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkDestination()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C89414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 34);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for LinkDestination.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LinkDestination()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C89494(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 34) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for LinkDestination.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for LinkDestination()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LinkDestination.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LinkDestination.Configuration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for LinkDestination.Configuration(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkDestination.Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C897B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LinkDestination.Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234C89848(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for LinkDestination.Configuration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LinkDestination.Configuration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234C8997C + 4 * byte_235292FFD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234C899B0 + 4 * byte_235292FF8[v4]))();
}

uint64_t sub_234C899B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C899B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234C899C0);
  return result;
}

uint64_t sub_234C899CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234C899D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234C899D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234C899E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LinkDestination.Configuration.CodingKeys()
{
  return &unk_25061E7A8;
}

uint64_t specialized LinkDestination.Configuration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469736E65537369 && a2 == 0xEB00000000657669)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t outlined consume of Environment<CGFloat>.Content(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t outlined copy of Environment<DynamicTypeSize>.Content(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t Color.gradient.getter(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for GradientBox<ColorGradientProvider>(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  return v2;
}

void type metadata accessor for GradientBox<ColorGradientProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for GradientBox<ColorGradientProvider>)
  {
    v2 = lazy protocol witness table accessor for type ColorGradientProvider and conformance ColorGradientProvider();
    v4 = type metadata accessor for GradientBox(a1, (uint64_t)&unk_250632068, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for GradientBox<ColorGradientProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type ColorGradientProvider and conformance ColorGradientProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorGradientProvider, &unk_250632068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorGradientProvider, &unk_250632068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorGradientProvider, &unk_250632068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider);
  }
  return result;
}

void *type metadata accessor for ColorGradientProvider()
{
  return &unk_250632068;
}

double ColorGradientProvider.resolve(in:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  float v24;
  double v25;
  float v26;
  double v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  double v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  double result;
  double v51;
  float v52;
  float v53;
  __int128 v54;

  v54 = *a1;
  v4 = (*(float (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v54);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = -v4;
  if (v4 > 0.0)
    v11 = v4;
  if (v11 <= 0.0031308)
  {
    v12 = v11 * 12.92;
  }
  else
  {
    v12 = 1.0;
    if (v11 != 1.0)
      v12 = (float)(powf(v11, 0.41667) * 1.055) + -0.055;
  }
  if (v4 <= 0.0)
    v13 = -v12;
  else
    v13 = v12;
  v14 = -v6;
  if (v6 > 0.0)
    v14 = v6;
  if (v14 <= 0.0031308)
  {
    v15 = v14 * 12.92;
  }
  else
  {
    v15 = 1.0;
    if (v14 != 1.0)
      v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
  }
  if (v6 <= 0.0)
    v16 = -v15;
  else
    v16 = v15;
  v17 = -v8;
  if (v8 > 0.0)
    v17 = v8;
  if (v17 <= 0.0031308)
  {
    v18 = v17 * 12.92;
  }
  else
  {
    v18 = 1.0;
    if (v17 != 1.0)
      v18 = (float)(powf(v17, 0.41667) * 1.055) + -0.055;
  }
  v19 = -v18;
  if (v8 > 0.0)
    v19 = v18;
  v20 = (float)((float)(v13 * 0.2126) + (float)(v16 * 0.7152)) + (float)(v19 * 0.0722);
  v21 = 0.7;
  v22 = 0.3;
  if (v20 <= 0.75)
    v22 = 0.7;
  v23 = 1.0;
  if (v20 <= 0.75)
    v23 = 0.0;
  v24 = -0.1;
  if (v20 <= 0.75)
    v24 = 0.3;
  if (v20 <= 0.5)
  {
    v25 = 0.0;
  }
  else
  {
    v21 = v22;
    v25 = v23;
  }
  if (v20 > 0.5)
    v26 = v24;
  else
    v26 = 0.25;
  if (v20 <= 0.25)
    v27 = 0.7;
  else
    v27 = v21;
  if (v20 <= 0.25)
    v28 = 0.0;
  else
    v28 = v25;
  if (v20 <= 0.25)
    v29 = 0.2;
  else
    v29 = v26;
  v30 = v13 - (float)((float)(v20 - v13) * 0.2);
  v31 = 1.0 - v30;
  if (v29 < 0.0)
    v31 = v13 - (float)((float)(v20 - v13) * 0.2);
  v32 = v16 - (float)((float)(v20 - v16) * 0.2);
  v33 = 1.0 - v32;
  if (v29 < 0.0)
    v33 = v16 - (float)((float)(v20 - v16) * 0.2);
  v34 = v19 - (float)((float)(v20 - v19) * 0.2);
  if (v29 >= 0.0)
    v35 = 1.0 - v34;
  else
    v35 = v19 - (float)((float)(v20 - v19) * 0.2);
  v36 = specialized Color.Resolved.init(red:green:blue:opacity:)(v30 + (float)(v29 * v31), v32 + (float)(v29 * v33), v34 + (float)(v29 * v35));
  if (v27 >= v28)
    v40 = v4;
  else
    v40 = v36;
  if (v27 >= v28)
    v41 = v6;
  else
    v41 = v37;
  if (v27 >= v28)
    v42 = v8;
  else
    v42 = v38;
  if (v27 >= v28)
    v43 = v10;
  else
    v43 = v39;
  v52 = v43;
  v53 = v42;
  if (v27 >= v28)
    v44 = v27;
  else
    v44 = v28;
  v51 = v44;
  v45 = v8;
  if (v27 >= v28)
    v46 = v36;
  else
    v46 = v4;
  if (v27 >= v28)
    v47 = v37;
  else
    v47 = v6;
  if (v27 >= v28)
    v48 = v38;
  else
    v48 = v45;
  if (v27 >= v28)
  {
    v10 = v39;
    v27 = v28;
  }
  type metadata accessor for _ContiguousArrayStorage<ResolvedGradient.Stop>();
  v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_2352828C0;
  *(float *)(v49 + 32) = v46;
  *(float *)(v49 + 36) = v47;
  *(float *)(v49 + 40) = v48;
  *(float *)(v49 + 44) = v10;
  *(double *)(v49 + 48) = v27;
  *(_QWORD *)(v49 + 56) = 0;
  *(_QWORD *)(v49 + 64) = 0;
  *(_BYTE *)(v49 + 72) = 1;
  *(float *)(v49 + 80) = v40;
  *(float *)(v49 + 84) = v41;
  *(float *)(v49 + 88) = v53;
  *(float *)(v49 + 92) = v52;
  result = v51;
  *(double *)(v49 + 96) = v51;
  *(_QWORD *)(v49 + 104) = 0;
  *(_QWORD *)(v49 + 112) = 0;
  *(_BYTE *)(v49 + 120) = 1;
  *(_QWORD *)a3 = v49;
  *(_BYTE *)(a3 + 8) = 0;
  return result;
}

double protocol witness for GradientProvider.resolve(in:) in conformance ColorGradientProvider@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return ColorGradientProvider.resolve(in:)(a1, *v2, a2);
}

uint64_t protocol witness for GradientProvider.fallbackColor(in:) in conformance ColorGradientProvider()
{
  return swift_retain();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ColorGradientProvider()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ColorGradientProvider(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(**(_QWORD **)v1 + 136);
  swift_retain();
  v3(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColorGradientProvider()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for ColorGradientProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ColorGradientProvider and conformance ColorGradientProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<ResolvedGradient.Stop>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>);
  }
}

uint64_t specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v5;
  v53 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    v7 = a1;
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v39 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v44 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      v37 = *(_DWORD *)(a2 + 36);
      v36 = *(_DWORD *)(a2 + 32);
      v38 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((_QWORD *)&v48 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v36 | 0x18;
      v19 = v37 | 2;
    }
    else
    {
      v18 = v55;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v48 = v10;
    DWORD2(v48) = v39;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = __PAIR64__(v19, v18);
    *((_QWORD *)&v50 + 1) = v13;
    *(_QWORD *)&v51 = v44;
    *((_QWORD *)&v51 + 1) = v14;
    *(_DWORD *)v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v28 = swift_release();
    v29 = v45;
    v30 = v46;
    v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v28);
      MEMORY[0x24BDAC7A8](v32);
      v33 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v33);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v35 = v43;
    if ((v6 & 2) == 0)
      v35 = v31;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v20;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v21;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6E0]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6E8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  Swift::Int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  if (*(_QWORD *)(a2 + 16))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v3 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v4 = -1 << *(_BYTE *)(a2 + 32);
    v5 = v3 & ~v4;
    v6 = a2 + 56;
    if (((*(_QWORD *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;
      if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_18;
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
LABEL_18:
        v20 = 1;
        return v20 & 1;
      }
      v13 = ~v4;
      v14 = (v5 + 1) & v13;
      if (((*(_QWORD *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        while (1)
        {
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v17 = v16;
          if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
            break;
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            v14 = (v14 + 1) & v13;
            if (((*(_QWORD *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
              continue;
          }
          return v20 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  v20 = 0;
  return v20 & 1;
}

BOOL specialized Set.contains(_:)(Swift::UInt64 a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

Swift::Int specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  Swift::Int result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a1);
    result = Hasher._finalize()();
    v5 = -1 << *(_BYTE *)(a2 + 32);
    v6 = result & ~v5;
    v7 = a2 + 56;
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
    {
      v8 = *(_QWORD *)(a2 + 48);
      v9 = *(_QWORD *)(v8 + 8 * v6);
      if (__OFSUB__(a1, v9))
      {
LABEL_14:
        __break(1u);
        return result;
      }
      if (v9 == a1)
        return 1;
      v10 = ~v5;
      v11 = (v6 + 1) & v10;
      if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        while (1)
        {
          v12 = *(_QWORD *)(v8 + 8 * v11);
          if (__OFSUB__(a1, v12))
            break;
          result = v12 == a1;
          if (v12 != a1)
          {
            v11 = (v11 + 1) & v10;
            if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
              continue;
          }
          return result;
        }
        __break(1u);
        goto LABEL_14;
      }
    }
  }
  return 0;
}

Swift::Int specialized Set.contains(_:)(Swift::UInt64 a1, Swift::UInt a2, uint64_t a3)
{
  Swift::Int result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(a2);
    result = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = result & ~v7;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v9 = ~v7;
      v10 = *(_QWORD *)(a3 + 48);
      do
      {
        if (*(_QWORD *)(v10 + 16 * v8) == a1)
        {
          v11 = *(_QWORD *)(v10 + 16 * v8 + 8);
          if (__OFSUB__(a2, v11))
          {
            __break(1u);
            return result;
          }
          if (v11 == a2)
            return 1;
        }
        v8 = (v8 + 1) & v9;
      }
      while (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v9 = ~v5;
  v10 = (v6 + 1) & v9;
  if (((*(_QWORD *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return 0;
  do
  {
    v11 = *(_QWORD *)(v8 + 8 * v10);
    result = v11 == a1;
    if (v11 == a1)
      break;
    v10 = (v10 + 1) & v9;
  }
  while (((*(_QWORD *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  return result;
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t a1)
{
  return specialized Set.formUnion<A>(_:)(a1, (uint64_t (*)(_BYTE *, _QWORD))specialized Set._Variant.insert(_:));
}

{
  return specialized Set.formUnion<A>(_:)(a1, (uint64_t (*)(_BYTE *, _QWORD))specialized Set._Variant.insert(_:));
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt64 v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt v13[2];

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9 + 8));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v13, *(unsigned int *)(*(_QWORD *)(v1 + 48) + 4 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt v13[2];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9 + 8));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result, uint64_t (*a2)(_BYTE *, _QWORD))
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _BYTE v15[8];

  v3 = result;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v9)
      return swift_release();
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return swift_release();
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return swift_release();
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return swift_release();
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_5:
    result = a2(v15, *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11));
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return swift_release();
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return swift_release();
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

SwiftUI::ViewTraitCollection __swiftcall ViewTraitCollection.init()()
{
  _QWORD *v0;
  SwiftUI::ViewTraitCollection result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t ViewTraitCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v7 = v4;
  v42 = a1;
  v9 = type metadata accessor for ViewTraitCollection.AnyTrait(0, a3, a4, a4);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v37 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v38 = (char *)&v35 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (uint64_t *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16.n128_f64[0] = MEMORY[0x24BDAC7A8](v15);
  v36 = (char *)&v35 - v17;
  v18 = *(_QWORD *)(*v4 + 16);
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      if ((unint64_t)v20 >= *(_QWORD *)(*v7 + 16))
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue(*v7 + v19 * 8 + 32, (uint64_t)v44);
      v6 = v45;
      v5 = v46;
      __swift_project_boxed_opaque_existential_1(v44, v45);
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      if (v21 == a3)
        break;
      ++v20;
      v19 += 5;
      if ((char *)v18 == v20)
        goto LABEL_6;
    }
    v6 = v42;
    v29 = v36;
    v18 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v36, v42, AssociatedTypeWitness);
    v30 = (_QWORD *)*v7;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v7 = (uint64_t)v30;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v30);
      v30 = (_QWORD *)result;
      *v7 = result;
    }
    if ((unint64_t)v20 < v30[2])
    {
      v32 = (uint64_t)&v30[v19 + 4];
      v33 = v30[v19 + 7];
      v34 = v30[v19 + 8];
      __swift_mutable_project_boxed_opaque_existential_1(v32, v33);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 24))(v29, v18, v33, v34);
      *v7 = (uint64_t)v30;
      v5 = v43;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v18);
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    v6 = v42;
    v5 = v43;
    v18 = AssociatedTypeWitness;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v43 + 16))(v14, v42, AssociatedTypeWitness, v16);
    v22 = swift_getAssociatedTypeWitness();
    v20 = v38;
    (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v38, v14, v22);
    v14 = (_QWORD *)*v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v7 = (uint64_t)v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *v7 = (uint64_t)v14;
    }
    v25 = v14[2];
    v24 = v14[3];
    if (v25 >= v24 >> 1)
      *v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v14);
    v27 = v39;
    v26 = v40;
    v28 = (uint64_t)v37;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v37, v20, v40);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v28, v7, v26, (uint64_t)&protocol witness table for ViewTraitCollection.AnyTrait<A>);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v26);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v18);
  }
  return result;
}

uint64_t type metadata accessor for ViewTraitCollection.AnyTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewTraitCollection.AnyTrait);
}

uint64_t ViewTraitCollection.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return ViewTraitCollection.value<A>(for:)(a1, a2, a3);
}

uint64_t View._trait<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v22 - v13;
  v16 = type metadata accessor for _TraitWritingModifier(0, a4, a6, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a2, AssociatedTypeWitness, v18);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v14, AssociatedTypeWitness);
  View.modifier<A>(_:)(v20, a3, v16, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t _TraitWritingModifier.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
}

uint64_t static _TraitWritingModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  _OWORD v15[5];
  int v16;
  _OWORD v17[5];
  int v18;

  v9 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v9;
  v17[4] = *(_OWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v10;
  if (a5 == &type metadata for LayoutPriorityTraitKey)
  {
    type metadata accessor for _TraitWritingModifier(0, (uint64_t)&type metadata for LayoutPriorityTraitKey, a6, a4);
    v14 = Attribute.unsafeBitCast<A>(to:)();
    return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v14, (uint64_t)v17, a3, a7);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    v15[2] = *(_OWORD *)(a2 + 32);
    v15[3] = v11;
    v15[4] = *(_OWORD *)(a2 + 64);
    v16 = *(_DWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 16);
    v15[0] = *(_OWORD *)a2;
    v15[1] = v12;
    return ((uint64_t (*)(uint64_t, _OWORD *))a3)(a1, v15);
  }
}

uint64_t static _TraitWritingModifier._makeViewList(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, ValueMetadata *, uint64_t))type metadata accessor for _TraitWritingModifier, a7, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>.AddTrait, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4);
}

uint64_t _TraitWritingModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t Value;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v21 - v10;
  v13 = type metadata accessor for _TraitWritingModifier(0, a2, a3, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - v15;
  _TraitWritingModifier.AddTrait.traits.getter(a1, &v21);
  v17 = v21;
  if (!v21)
    v17 = MEMORY[0x24BEE4AF8];
  v22 = v17;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, Value, v13);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, AssociatedTypeWitness);
  result = ViewTraitCollection.subscript.setter((uint64_t)v11, v19, a2, a3);
  *a4 = v22;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _TraitWritingModifier<A>.AddTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return _TraitWritingModifier.AddTrait.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TraitWritingModifier<A>.AddTrait(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _TraitWritingModifier<A>.AddTrait, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TraitWritingModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _TraitWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TraitWritingModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TraitWritingModifier<A>()
{
  return static _TraitWritingModifier._viewListCount(inputs:body:)();
}

uint64_t _TraitWritingModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t _ConditionalTraitWritingModifier.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t (*_ConditionalTraitWritingModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ConditionalTraitWritingModifier.isEnabled.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _ConditionalTraitWritingModifier.isEnabled.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_ConditionalTraitWritingModifier.isEnabled.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ConditionalTraitWritingModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a3@<X3>, ValueMetadata *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  _DWORD v30[3];

  v11 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v13 = a1[2];
  v14 = *((_DWORD *)a1 + 20);
  v15 = *MEMORY[0x24BE096C0];
  type metadata accessor for _TraitWritingModifier(0, (uint64_t)a4, a5, a3);
  v18 = *(_OWORD *)(a1 + 3);
  v19 = *(_OWORD *)(a1 + 7);
  v20 = *(_OWORD *)(a1 + 5);
  v16 = a1[9];
  _GraphValue.init(_:)(v15, v30);
  v22 = v11;
  v23 = v12;
  v24 = v13;
  v25 = v18;
  v26 = v20;
  v27 = v19;
  v28 = v16;
  v29 = v14;
  return static _TraitWritingModifier._makeView(modifier:inputs:body:)((uint64_t)v30, (uint64_t)&v22, a2, a3, a4, a5, a6);
}

uint64_t static _ConditionalTraitWritingModifier._makeViewList(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, ValueMetadata *, uint64_t))type metadata accessor for _ConditionalTraitWritingModifier, a7, (uint64_t)&protocol conformance descriptor for _ConditionalTraitWritingModifier<A>.ConditionalAddTrait, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t static _TraitWritingModifier._makeViewList(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, void (*a7)(_QWORD, ValueMetadata *, uint64_t)@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  double v21;
  uint64_t (*v22)(_QWORD, ValueMetadata *, uint64_t, double);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, unint64_t *);
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v14 = *a1;
  v15 = *(_OWORD *)(a2 + 48);
  v49 = *(_OWORD *)(a2 + 32);
  v50 = v15;
  v51 = *(_OWORD *)(a2 + 64);
  v52 = *(_BYTE *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 16);
  v47 = *(_OWORD *)a2;
  v48 = v16;
  if (a5 != &type metadata for LayoutPriorityTraitKey || (BYTE8(v50) & 0x80) != 0)
  {
    v31 = a3;
    v46 = *(_BYTE *)(a2 + 80);
    v30 = a4;
    v19 = *(_OWORD *)(a2 + 48);
    v43[1] = *(_OWORD *)(a2 + 32);
    v44 = v19;
    v45 = *(_OWORD *)(a2 + 64);
    v20 = *(_OWORD *)(a2 + 16);
    v42 = *(_OWORD *)a2;
    v43[0] = v20;
    v33 = __PAIR64__(v51, v14);
    v21 = MEMORY[0x24BDAC7A8](a1);
    v29 = a8;
    v27 = v22(0, a5, a6, v21);
    v28 = MEMORY[0x23B7C9C04](a9, v27);
    outlined retain of _ViewListInputs((uint64_t)&v47);
    type metadata accessor for Attribute<ViewTraitCollection>();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, a10, (uint64_t)&v26, v27, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
    LODWORD(v45) = v32;
    _ViewListInputs.addTraitKey<A>(_:)((uint64_t)a5, (uint64_t)a5);
    v33 = v42;
    v34 = DWORD2(v42);
    v35 = *(_QWORD *)&v43[0];
    v36 = *(_OWORD *)((char *)v43 + 8);
    v37 = *((_QWORD *)&v43[1] + 1);
    v38 = v44;
    v39 = v45;
    v40 = *((_QWORD *)&v45 + 1);
    v41 = v46;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v25 = swift_bridgeObjectRetain();
    v31(v25, &v33);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    a7(0, &type metadata for LayoutPriorityTraitKey, a6);
    v17 = Attribute.unsafeBitCast<A>(to:)();
    v43[1] = v49;
    v44 = v50;
    v45 = v51;
    v46 = v52;
    v42 = v47;
    v43[0] = v48;
    a3(v17, (unint64_t *)&v42);
    return specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v17, &v47);
  }
}

uint64_t _ConditionalTraitWritingModifier.ConditionalAddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Value;
  void (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&AssociatedTypeWitness - v8;
  v11 = type metadata accessor for _ConditionalTraitWritingModifier(0, a2, a3, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&AssociatedTypeWitness - v13;
  _TraitWritingModifier.AddTrait.traits.getter(a1, &v24);
  v15 = v24;
  if (!v24)
    v15 = MEMORY[0x24BEE4AF8];
  v25 = v15;
  Value = AGGraphGetValue();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17(v14, Value, v11);
  v18 = v14[*(int *)(v11 + 36)];
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v18 == 1)
  {
    v20 = AGGraphGetValue();
    v17(v14, v20, v11);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, AssociatedTypeWitness);
    result = ViewTraitCollection.subscript.setter((uint64_t)v9, v21, a2, a3);
  }
  *v23 = v25;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ConditionalTraitWritingModifier<A>.ConditionalAddTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return _ConditionalTraitWritingModifier.ConditionalAddTrait.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalTraitWritingModifier<A>.ConditionalAddTrait(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalTraitWritingModifier<A>.ConditionalAddTrait, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ConditionalTraitWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _ConditionalTraitWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(ValueMetadata **)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ConditionalTraitWritingModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ConditionalTraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t View.transformTrait<A>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v9 = type metadata accessor for TraitTransformerModifier(0, a5, a7, a4);
  return View.modifier<A>(_:)(v11, a4, v9, a6);
}

uint64_t static TraitTransformerModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 20);
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = v5;
  return a3(a1, &v8);
}

uint64_t static TraitTransformerModifier._makeViewList(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = a2[6];
  v23 = a2[7];
  v12 = *((_DWORD *)a2 + 16);
  v13 = a2[9];
  v14 = *((_BYTE *)a2 + 80);
  LODWORD(v29) = *a1;
  HIDWORD(v29) = v12;
  v15 = type metadata accessor for TraitTransformerModifier.TransformTrait(0, a5, a6, a4);
  v16 = a2[3];
  v17 = a2[4];
  v27 = v15;
  v28 = MEMORY[0x23B7C9C04]("ն<\x1B$h\v", v15);
  type metadata accessor for Attribute<ViewTraitCollection>();
  v19 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v26, v15, MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v20);
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v32 = v16;
  v33 = v17;
  v34 = v10;
  v35 = v11;
  v36 = v23;
  v37 = v25;
  v38 = v13;
  v39 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v21 = swift_bridgeObjectRetain();
  a3(v21, &v29);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _TraitWritingModifier.AddTrait.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
  {
    result = 0;
  }
  else
  {
    AGGraphGetValue();
    result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t TraitTransformerModifier.TransformTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *);
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v16 - v9;
  _TraitWritingModifier.AddTrait.traits.getter(a1, &v17);
  if (v17)
    v12 = v17;
  else
    v12 = MEMORY[0x24BEE4AF8];
  v16 = v12;
  type metadata accessor for TraitTransformerModifier(0, a2, a3, v11);
  v13 = *(void (**)(char *))AGGraphGetValue();
  swift_retain();
  v17 = v12;
  ViewTraitCollection.value<A>(for:)(a2, a3, (uint64_t)v10);
  v13(v10);
  swift_release();
  result = ViewTraitCollection.subscript.setter((uint64_t)v10, v14, a2, a3);
  *a4 = v16;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TraitTransformerModifier<A>.TransformTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return TraitTransformerModifier.TransformTrait.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TraitTransformerModifier<A>.TransformTrait(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TraitTransformerModifier<A>.TransformTrait, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TraitTransformerModifier<A>(_DWORD *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static TraitTransformerModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t ViewTraitCollection.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)v2 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of AnyTrackedValue(v5, (uint64_t)v10);
    v6 = v11;
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    if (v8 == a2)
      break;
    v5 += 40;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t ViewTraitCollection.value<A>(for:defaultValue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v8, (uint64_t)v17);
      v9 = v18;
      v10 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10) == a2)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      v8 += 40;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v13 = v18;
    v14 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v15(AssociatedTypeWitness, v13, v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
LABEL_6:
    v11 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a3, a1, v11);
  }
}

uint64_t ViewTraitCollection.value<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v13 - v10;
  v13[1] = *v3;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, v9);
  ViewTraitCollection.value<A>(for:defaultValue:)((uint64_t)v11, a1, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t ViewTraitCollection.setValueIfUnset<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD v37[3];
  uint64_t v38;
  char *v39;

  v6 = v4;
  v35 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v13 = type metadata accessor for ViewTraitCollection.AnyTrait(0, a3, a4, v12);
  v31 = *(_QWORD *)(v13 - 8);
  v32 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v30 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x24BDAC7A8](v15);
  v36 = (char *)&v30 - v17;
  v18 = *(_QWORD *)(*v4 + 16);
  if (v18)
  {
    v19 = 0;
    v20 = 32;
    while (v19 < *(_QWORD *)(*v6 + 16))
    {
      outlined init with copy of AnyTrackedValue(*v6 + v20, (uint64_t)v37);
      v21 = v38;
      v5 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      v4 = (uint64_t *)(*((uint64_t (**)(uint64_t, char *))v5 + 1))(v21, v5);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      if (v4 == (uint64_t *)a3)
        return result;
      ++v19;
      v20 += 40;
      if (v18 == v19)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v33 + 16))(v11, v35, v34, v16);
  v23 = swift_getAssociatedTypeWitness();
  v5 = v36;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v36, v11, v23);
  v4 = (uint64_t *)*v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = (uint64_t)v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_12:
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    *v6 = (uint64_t)v4;
  }
  v26 = v31;
  v25 = v32;
  v27 = (uint64_t)v30;
  v29 = v4[2];
  v28 = v4[3];
  if (v29 >= v28 >> 1)
    *v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(v27, v5, v25);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27, v6, v25, (uint64_t)&protocol witness table for ViewTraitCollection.AnyTrait<A>);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v5, v25);
}

void (*ViewTraitCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  ViewTraitCollection.value<A>(for:)(a3, a4, (uint64_t)v13);
  return ViewTraitCollection.subscript.modify;
}

void ViewTraitCollection.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  if ((a2 & 1) != 0)
  {
    v5 = v2[4];
    v6 = v2[5];
    v7 = v2[2];
    v8 = v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    ViewTraitCollection.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ViewTraitCollection.subscript.setter((*a1)[7], a2, v2[1], v2[2]);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t ViewTraitCollection.setErasedValue<A>(trait:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, __n128);
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v33 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v31 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10.n128_f64[0] = MEMORY[0x24BDAC7A8](v9);
  v32 = (char *)&v30 - v11;
  v34 = v3;
  v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*v3 + 16);
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
    while (1)
    {
      if (v14 >= *(_QWORD *)(*v34 + 16))
      {
        __break(1u);
        goto LABEL_15;
      }
      outlined init with copy of AnyTrackedValue(*v34 + v13 * 8 + 32, (uint64_t)v35);
      v16 = v36;
      v17 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      v3 = (uint64_t *)v15(a2, a3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      if ((uint64_t *)v4 == v3)
        break;
      ++v14;
      v13 += 5;
      if (v12 == (void (*)(char *, uint64_t, uint64_t, __n128))v14)
        goto LABEL_6;
    }
    v24 = MEMORY[0x24BEE4AD8];
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(a3 + 16))(v35, MEMORY[0x24BEE4AD8] + 8, a2, a3);
    v25 = v34;
    v26 = (_QWORD *)*v34;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v25 = (uint64_t)v26;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      v26 = (_QWORD *)result;
      *v34 = result;
    }
    if (v14 >= v26[2])
    {
      __break(1u);
    }
    else
    {
      v27 = v26[v13 + 7];
      v28 = v26[v13 + 8];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v26[v13 + 4], v27);
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v28 + 24))(v35, v24 + 8, v27, v28);
      *v34 = (uint64_t)v26;
    }
  }
  else
  {
LABEL_6:
    v4 = (uint64_t)v32;
    v14 = v33;
    v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v33 + 16);
    v12(v32, a1, a2, v10);
    v18 = v34;
    v3 = (uint64_t *)*v34;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v18 = (uint64_t)v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_15:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      *v34 = (uint64_t)v3;
    }
    v21 = v3[2];
    v20 = v3[3];
    if (v21 >= v20 >> 1)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v3);
      *v34 = (uint64_t)v29;
    }
    v22 = (uint64_t)v31;
    ((void (*)(char *, uint64_t, uint64_t))v12)(v31, v4, a2);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v22, v34, a2, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v4, a2);
  }
  return result;
}

Swift::Void __swiftcall ViewTraitCollection.mergeValues(_:)(SwiftUI::ViewTraitCollection a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(*(_QWORD *)a1.storage._rawValue + 16);
  if (v1)
  {
    v2 = *(_QWORD *)a1.storage._rawValue + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of AnyTrackedValue(v2, (uint64_t)v6);
      v3 = v7;
      v4 = v8;
      v5 = __swift_project_boxed_opaque_existential_1(v6, v7);
      ViewTraitCollection.setErasedValue<A>(trait:)((uint64_t)v5, v3, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
}

uint64_t ViewTraitCollection.AnyTrait.subscript.getter()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v6 - v4, v0, AssociatedTypeWitness, v2);
  return swift_dynamicCast();
}

uint64_t ViewTraitCollection.AnyTrait.subscript.setter()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = (char *)&v6 - v3;
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 40))(v0, v4, AssociatedTypeWitness);
}

uint64_t protocol witness for AnyViewTrait.id.getter in conformance ViewTraitCollection.AnyTrait<A>(uint64_t a1)
{
  return _ViewInputs.base.modify(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for AnyViewTrait.subscript.getter in conformance ViewTraitCollection.AnyTrait<A>()
{
  return ViewTraitCollection.AnyTrait.subscript.getter();
}

uint64_t protocol witness for AnyViewTrait.subscript.setter in conformance ViewTraitCollection.AnyTrait<A>()
{
  return ViewTraitCollection.AnyTrait.subscript.setter();
}

uint64_t ViewTraitKeys.types.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ViewTraitKeys.types.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ViewTraitKeys.types.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewTraitKeys.isDataDependent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ViewTraitKeys.isDataDependent.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*ViewTraitKeys.isDataDependent.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ViewTraitKeys.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a1 + 8) = 0;
}

BOOL ViewTraitKeys.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized Set.contains(_:)(a2, *v2);
}

uint64_t ViewTraitKeys.insert<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  return specialized Set._Variant.insert(_:)(&v3, a2);
}

uint64_t ViewTraitKeys.formUnion(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = swift_bridgeObjectRetain();
  result = specialized Set.formUnion<A>(_:)(v3, (uint64_t (*)(_BYTE *, _QWORD))specialized Set._Variant.insert(_:));
  *(_BYTE *)(v1 + 8) = (*(_BYTE *)(v1 + 8) | v2) & 1;
  return result;
}

uint64_t ViewTraitKeys.withDataDependency()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = HIDWORD(a3);
  return result;
}

uint64_t specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 12) = HIDWORD(a3);
  return result;
}

uint64_t specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<SpacingLayout>.ListModifier, (uint64_t)&type metadata for SpacingLayout, (uint64_t)&protocol witness table for SpacingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<SpacingLayout>, (uint64_t)&type metadata for SpacingLayout, (uint64_t)&protocol witness table for SpacingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<MoveTransition.MoveLayout>.ListModifier, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t)&protocol witness table for MoveTransition.MoveLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<MoveTransition.MoveLayout>, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t)&protocol witness table for MoveTransition.MoveLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<ResetDeltaModifier>.ListModifier, (uint64_t)&type metadata for ResetDeltaModifier, (uint64_t)&protocol witness table for ResetDeltaModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<ResetDeltaModifier>, (uint64_t)&type metadata for ResetDeltaModifier, (uint64_t)&protocol witness table for ResetDeltaModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<GraphicsBlendModeEffect>.ListModifier, (uint64_t)&type metadata for GraphicsBlendModeEffect, (uint64_t)&protocol witness table for GraphicsBlendModeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<GraphicsBlendModeEffect>, (uint64_t)&type metadata for GraphicsBlendModeEffect, (uint64_t)&protocol witness table for GraphicsBlendModeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<ResetScrollInputsModifier>.ListModifier, (uint64_t)&type metadata for ResetScrollInputsModifier, (uint64_t)&protocol witness table for ResetScrollInputsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<ResetScrollInputsModifier>, (uint64_t)&type metadata for ResetScrollInputsModifier, (uint64_t)&protocol witness table for ResetScrollInputsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<ViewListArchivedAnimation.Effect>.ListModifier, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<ViewListArchivedAnimation.Effect>, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>.ListModifier, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<AutomaticPaddingViewModifier>.ListModifier, (uint64_t)&type metadata for AutomaticPaddingViewModifier, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<AutomaticPaddingViewModifier>, (uint64_t)&type metadata for AutomaticPaddingViewModifier, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<PrivacyRedactionViewModifier>.ListModifier, (uint64_t)&type metadata for PrivacyRedactionViewModifier, (uint64_t)&protocol witness table for PrivacyRedactionViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<PrivacyRedactionViewModifier>, (uint64_t)&type metadata for PrivacyRedactionViewModifier, (uint64_t)&protocol witness table for PrivacyRedactionViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<IgnoresAutomaticPaddingLayout>.ListModifier, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t)&protocol witness table for IgnoresAutomaticPaddingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<IgnoresAutomaticPaddingLayout>, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t)&protocol witness table for IgnoresAutomaticPaddingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<ScrapeableAttachmentViewModifier>.ListModifier, (uint64_t)&type metadata for ScrapeableAttachmentViewModifier, (uint64_t)&protocol witness table for ScrapeableAttachmentViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<ScrapeableAttachmentViewModifier>, (uint64_t)&type metadata for ScrapeableAttachmentViewModifier, (uint64_t)&protocol witness table for ScrapeableAttachmentViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<VerticalStackOrientationModifier>.ListModifier, (uint64_t)&type metadata for VerticalStackOrientationModifier, (uint64_t)&protocol witness table for VerticalStackOrientationModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<VerticalStackOrientationModifier>, (uint64_t)&type metadata for VerticalStackOrientationModifier, (uint64_t)&protocol witness table for VerticalStackOrientationModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedViewList<ScrollPhaseStateConfigurationModifier>.ListModifier, (uint64_t)&type metadata for ScrollPhaseStateConfigurationModifier, (uint64_t)&protocol witness table for ScrollPhaseStateConfigurationModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<ScrollPhaseStateConfigurationModifier>, (uint64_t)&type metadata for ScrollPhaseStateConfigurationModifier, (uint64_t)&protocol witness table for ScrollPhaseStateConfigurationModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<PreferTextLayoutManagerInputModifier>.ListModifier, (uint64_t)&type metadata for PreferTextLayoutManagerInputModifier, (uint64_t)&protocol witness table for PreferTextLayoutManagerInputModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<PreferTextLayoutManagerInputModifier>, (uint64_t)&type metadata for PreferTextLayoutManagerInputModifier, (uint64_t)&protocol witness table for PreferTextLayoutManagerInputModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<LayoutPriorityLayout>.ListModifier, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t)&protocol witness table for LayoutPriorityLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<LayoutPriorityLayout>, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t)&protocol witness table for LayoutPriorityLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_AppearanceActionModifier>.ListModifier, (uint64_t)&type metadata for _AppearanceActionModifier, (uint64_t)&protocol witness table for _AppearanceActionModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_AppearanceActionModifier>, (uint64_t)&type metadata for _AppearanceActionModifier, (uint64_t)&protocol witness table for _AppearanceActionModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier, (uint64_t (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundStyleModifier2<AngularGradient, Color>>, (uint64_t (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_BlurEffect>.ListModifier, (uint64_t)&type metadata for _BlurEffect, (uint64_t)&protocol witness table for _BlurEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_BlurEffect>, (uint64_t)&type metadata for _BlurEffect, (uint64_t)&protocol witness table for _BlurEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_FrameLayout>.ListModifier, (uint64_t)&type metadata for _FrameLayout, (uint64_t)&protocol witness table for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_FrameLayout>, (uint64_t)&type metadata for _FrameLayout, (uint64_t)&protocol witness table for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ScaleEffect>.ListModifier, (uint64_t)&type metadata for _ScaleEffect, (uint64_t)&protocol witness table for _ScaleEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ScaleEffect>, (uint64_t)&type metadata for _ScaleEffect, (uint64_t)&protocol witness table for _ScaleEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_OffsetEffect>.ListModifier, (uint64_t)&type metadata for _OffsetEffect, (uint64_t)&protocol witness table for _OffsetEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_OffsetEffect>, (uint64_t)&type metadata for _OffsetEffect, (uint64_t)&protocol witness table for _OffsetEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ShadowEffect._Resolved>.ListModifier, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t)&protocol witness table for _ShadowEffect._Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ShadowEffect._Resolved>, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t)&protocol witness table for _ShadowEffect._Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<GraphicsFilter>.ListModifier, (uint64_t)&type metadata for GraphicsFilter, (uint64_t)&protocol witness table for GraphicsFilter, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<GraphicsFilter>, (uint64_t)&type metadata for GraphicsFilter, (uint64_t)&protocol witness table for GraphicsFilter, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_OpacityEffect>.ListModifier, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_PaddingLayout>.ListModifier, (uint64_t)&type metadata for _PaddingLayout, (uint64_t)&protocol witness table for _PaddingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_PaddingLayout>, (uint64_t)&type metadata for _PaddingLayout, (uint64_t)&protocol witness table for _PaddingLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ContrastEffect>.ListModifier, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_RotationEffect>.ListModifier, (uint64_t)&type metadata for _RotationEffect, (uint64_t)&protocol witness table for _RotationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_RotationEffect>, (uint64_t)&type metadata for _RotationEffect, (uint64_t)&protocol witness table for _RotationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_AlignmentLayout>.ListModifier, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t)&protocol witness table for _AlignmentLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_AlignmentLayout>, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t)&protocol witness table for _AlignmentLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_BlendModeEffect>.ListModifier, (uint64_t)&type metadata for _BlendModeEffect, (uint64_t)&protocol witness table for _BlendModeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_BlendModeEffect>, (uint64_t)&type metadata for _BlendModeEffect, (uint64_t)&protocol witness table for _BlendModeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_FixedSizeLayout>.ListModifier, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t)&protocol witness table for _FixedSizeLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_FixedSizeLayout>, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t)&protocol witness table for _FixedSizeLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedViewList<_FlexFrameLayout>.ListModifier, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t)&protocol witness table for _FlexFrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_FlexFrameLayout>, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t)&protocol witness table for _FlexFrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_GrayscaleEffect>.ListModifier, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<GraphicsBlendMode>.ListModifier, (uint64_t)&type metadata for GraphicsBlendMode, (uint64_t)&protocol witness table for GraphicsBlendMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<GraphicsBlendMode>, (uint64_t)&type metadata for GraphicsBlendMode, (uint64_t)&protocol witness table for GraphicsBlendMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<VariableBlurStyle>.ListModifier, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t)&protocol witness table for VariableBlurStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<VariableBlurStyle>, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t)&protocol witness table for VariableBlurStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_BrightnessEffect>.ListModifier, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_Rotation3DEffect>.ListModifier, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t)&protocol witness table for _Rotation3DEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_Rotation3DEffect>, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t)&protocol witness table for _Rotation3DEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_SaturationEffect>.ListModifier, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_AspectRatioLayout>.ListModifier, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t)&protocol witness table for _AspectRatioLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_AspectRatioLayout>, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t)&protocol witness table for _AspectRatioLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorInvertEffect>.ListModifier, (uint64_t)&type metadata for _ColorInvertEffect, (uint64_t)&protocol witness table for _ColorInvertEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ColorInvertEffect>, (uint64_t)&type metadata for _ColorInvertEffect, (uint64_t)&protocol witness table for _ColorInvertEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _ColorMatrixEffect, (uint64_t)&protocol witness table for _ColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ColorMatrixEffect>, (uint64_t)&type metadata for _ColorMatrixEffect, (uint64_t)&protocol witness table for _ColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_HueRotationEffect>.ListModifier, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_DrawingGroupEffect>.ListModifier, (uint64_t)&type metadata for _DrawingGroupEffect, (uint64_t)&protocol witness table for _DrawingGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_DrawingGroupEffect>, (uint64_t)&type metadata for _DrawingGroupEffect, (uint64_t)&protocol witness table for _DrawingGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ShaderFilterEffect>.ListModifier, (uint64_t)&type metadata for _ShaderFilterEffect, (uint64_t)&protocol witness table for _ShaderFilterEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ShaderFilterEffect>, (uint64_t)&type metadata for _ShaderFilterEffect, (uint64_t)&protocol witness table for _ShaderFilterEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<LuminanceCurveEffect>.ListModifier, (uint64_t)&type metadata for LuminanceCurveEffect, (uint64_t)&protocol witness table for LuminanceCurveEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<LuminanceCurveEffect>, (uint64_t)&type metadata for LuminanceCurveEffect, (uint64_t)&protocol witness table for LuminanceCurveEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorMultiplyEffect._Resolved>.ListModifier, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t)&protocol witness table for _ColorMultiplyEffect._Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ColorMultiplyEffect._Resolved>, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t)&protocol witness table for _ColorMultiplyEffect._Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_GeometryGroupEffect>.ListModifier, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<OpacityRendererEffect>.ListModifier, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ModifiedViewList<ReferenceDateModifier>.ListModifier, type metadata accessor for ReferenceDateModifier, (uint64_t)&protocol witness table for ReferenceDateModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ModifiedElements<ReferenceDateModifier>, type metadata accessor for ReferenceDateModifier, (uint64_t)&protocol witness table for ReferenceDateModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<HitTestBindingModifier>.ListModifier, (uint64_t)&type metadata for HitTestBindingModifier, (uint64_t)&protocol witness table for HitTestBindingModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<HitTestBindingModifier>, (uint64_t)&type metadata for HitTestBindingModifier, (uint64_t)&protocol witness table for HitTestBindingModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorMonochromeEffect._Resolved>.ListModifier, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t)&protocol witness table for _ColorMonochromeEffect._Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ColorMonochromeEffect._Resolved>, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t)&protocol witness table for _ColorMonochromeEffect._Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<ContentTransitionEffect>.ListModifier, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_CompositingGroupEffect>.ListModifier, (uint64_t)&type metadata for _CompositingGroupEffect, (uint64_t)&protocol witness table for _CompositingGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_CompositingGroupEffect>, (uint64_t)&type metadata for _CompositingGroupEffect, (uint64_t)&protocol witness table for _CompositingGroupEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ContentTransitionGroup>.ListModifier, (uint64_t)&type metadata for _ContentTransitionGroup, (uint64_t)&protocol witness table for _ContentTransitionGroup, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ContentTransitionGroup>, (uint64_t)&type metadata for _ContentTransitionGroup, (uint64_t)&protocol witness table for _ContentTransitionGroup, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_LuminanceToAlphaEffect>.ListModifier, (uint64_t)&type metadata for _LuminanceToAlphaEffect, (uint64_t)&protocol witness table for _LuminanceToAlphaEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_LuminanceToAlphaEffect>, (uint64_t)&type metadata for _LuminanceToAlphaEffect, (uint64_t)&protocol witness table for _LuminanceToAlphaEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_SafeAreaIgnoringLayout>.ListModifier, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaIgnoringLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_SafeAreaIgnoringLayout>, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaIgnoringLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_SafeAreaInsetsModifier>.ListModifier, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t)&protocol witness table for _SafeAreaInsetsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_SafeAreaInsetsModifier>, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t)&protocol witness table for _SafeAreaInsetsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ExtendedBlendModeEffect>.ListModifier, (uint64_t)&type metadata for _ExtendedBlendModeEffect, (uint64_t)&protocol witness table for _ExtendedBlendModeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ExtendedBlendModeEffect>, (uint64_t)&type metadata for _ExtendedBlendModeEffect, (uint64_t)&protocol witness table for _ExtendedBlendModeEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundColorModifier>.ListModifier, (uint64_t)&type metadata for _ForegroundColorModifier, (uint64_t)&protocol witness table for _ForegroundColorModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundColorModifier>, (uint64_t)&type metadata for _ForegroundColorModifier, (uint64_t)&protocol witness table for _ForegroundColorModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ContentTransitionModifier>.ListModifier, (uint64_t)&type metadata for _ContentTransitionModifier, (uint64_t)&protocol witness table for _ContentTransitionModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ContentTransitionModifier>, (uint64_t)&type metadata for _ContentTransitionModifier, (uint64_t)&protocol witness table for _ContentTransitionModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerViewModifier>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerViewModifier>, (uint64_t)&type metadata for _ForegroundLayerViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_SafeAreaRegionsIgnoringLayout>.ListModifier, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_PremultipliedColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _PremultipliedColorMatrixEffect, (uint64_t)&protocol witness table for _PremultipliedColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_PremultipliedColorMatrixEffect>, (uint64_t)&type metadata for _PremultipliedColorMatrixEffect, (uint64_t)&protocol witness table for _PremultipliedColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerColorMatrixEffect>, (uint64_t)&type metadata for _ForegroundLayerColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerLevelViewModifier>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerLevelViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerLevelViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerLevelViewModifier>, (uint64_t)&type metadata for _ForegroundLayerLevelViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerLevelViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerLevelColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerLevelColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerLevelColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerLevelColorMatrixEffect>, (uint64_t)&type metadata for _ForegroundLayerLevelColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerLevelColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedViewList<Shader.ResolvedShader>.ListModifier, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t)&protocol witness table for Shader.ResolvedShader, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ModifiedElements<Shader.ResolvedShader>, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t)&protocol witness table for Shader.ResolvedShader, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[5];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a2[1];
  v25 = *a2;
  v26 = v3;
  v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v4 = v23[0];
    v5 = *((_QWORD *)&v23[0] + 1);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ModifiedViewList<_OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>.ListModifier, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, (uint64_t)&protocol witness table for _OverlayPreferenceModifier<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(_QWORD *)(v6 + 24) = AGCreateWeakAttribute();
    v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((_QWORD *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = AGCreateWeakAttribute();
    v19 = v25;
    v20 = v26;
    v21 = v27;
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ModifiedElements<_OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, (uint64_t)&protocol witness table for _OverlayPreferenceModifier<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    v12 = v21;
    v10[5] = v20;
    v10[6] = v12;
    v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v16 = 0;
    v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

uint64_t type metadata accessor for _TraitWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TraitWritingModifier);
}

uint64_t type metadata accessor for _TraitWritingModifier.AddTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TraitWritingModifier.AddTrait);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for Attribute<ViewTraitCollection>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<ViewTraitCollection>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>);
  }
}

uint64_t type metadata accessor for _ConditionalTraitWritingModifier.ConditionalAddTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalTraitWritingModifier.ConditionalAddTrait);
}

uint64_t type metadata accessor for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ConditionalTraitWritingModifier);
}

uint64_t type metadata accessor for TraitTransformerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TraitTransformerModifier);
}

uint64_t dispatch thunk of static _ViewTraitKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata completion function for _ConditionalTraitWritingModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _ConditionalTraitWritingModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalTraitWritingModifier(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (a2 <= v6)
    goto LABEL_23;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v11))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_14;
  }
  else
  {
    if (v11 <= 0xFF)
    {
      if (v11 < 2)
        goto LABEL_23;
LABEL_7:
      v10 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        goto LABEL_23;
LABEL_14:
      v12 = (v10 - 1) << v9;
      if (v8 > 3)
        v12 = 0;
      if ((_DWORD)v7 != -1)
      {
        if (v8 <= 3)
          v13 = v7 + 1;
        else
          v13 = 4;
        __asm { BR              X12 }
      }
      v16 = v6 + v12;
      return (v16 + 1);
    }
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_14;
  }
LABEL_23:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  v16 = (v15 + 2147483646) & 0x7FFFFFFF;
  return (v16 + 1);
}

void storeEnumTagSinglePayload for _ConditionalTraitWritingModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 1;
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

ValueMetadata *type metadata accessor for ViewTraitCollection()
{
  return &type metadata for ViewTraitCollection;
}

ValueMetadata *type metadata accessor for ViewTraitKeys()
{
  return &type metadata for ViewTraitKeys;
}

uint64_t sub_234C98B64(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _TraitWritingModifier, (uint64_t)&protocol witness table for _TraitWritingModifier<A>);
}

uint64_t sub_234C98B78(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TraitTransformerModifier, (uint64_t)&protocol witness table for TraitTransformerModifier<A>);
}

_QWORD *initializeBufferWithCopyOfBuffer for TraitTransformerModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for TraitTransformerModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for TraitTransformerModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata completion function for _TraitWritingModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TraitWritingModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _TraitWritingModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TraitWritingModifier(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for _TraitWritingModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t instantiation function for generic protocol witness table for _TraitWritingModifier<A>.AddTrait(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _TraitWritingModifier<A>.AddTrait);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _ConditionalTraitWritingModifier<A>.ConditionalAddTrait(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ConditionalTraitWritingModifier<A>.ConditionalAddTrait);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in _ConditionalTraitWritingModifier<A>.ConditionalAddTrait()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in _TraitWritingModifier<A>.AddTrait()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t outlined assign with take of _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  assignWithTake for _ViewListOutputs.Views(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutPositionQuery and conformance LayoutPositionQuery;
  if (!lazy protocol witness table cache variable for type LayoutPositionQuery and conformance LayoutPositionQuery)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutPositionQuery, &type metadata for LayoutPositionQuery);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPositionQuery and conformance LayoutPositionQuery);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

uint64_t type metadata accessor for TraitTransformerModifier.TransformTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TraitTransformerModifier.TransformTrait);
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 12) = *(_DWORD *)(v1 + 28);
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for TraitTransformerModifier<A>.TransformTrait(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TraitTransformerModifier<A>.TransformTrait);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in TraitTransformerModifier<A>.TransformTrait()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

CFIndex specialized Text.Effect.Tokenizer.init(_:range:)(__CFString *string, CFRange range)
{
  __CFStringTokenizer *v3;
  CFStringTokenizerTokenType Token;
  _QWORD *v5;
  CFIndex result;
  CFRange CurrentTokenRange;
  CFIndex v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = CFStringTokenizerCreate(0, string, range, 0, 0);
  Token = CFStringTokenizerAdvanceToNextToken(v3);
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (Token)
  {
    while (1)
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v3);
      result = CurrentTokenRange.location;
      v8 = CurrentTokenRange.location + CurrentTokenRange.length;
      if (__OFADD__(CurrentTokenRange.location, CurrentTokenRange.length))
        break;
      if (v8 < CurrentTokenRange.location)
        goto LABEL_11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v11 = &v5[2 * v10];
      v11[4] = CurrentTokenRange.location;
      v11[5] = v8;
      if (!CFStringTokenizerAdvanceToNextToken(v3))
        goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_9:

    return (CFIndex)v5;
  }
  return result;
}

void _ForegroundLayerViewModifier.effectValue(size:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 2;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _ForegroundLayerViewModifier(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 2;
}

__n128 _ForegroundLayerColorMatrixEffect.foreground.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ForegroundLayerColorMatrixEffect.foreground.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v2;
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(__n128 *)(v1 + 16) = result;
  return result;
}

uint64_t (*_ForegroundLayerColorMatrixEffect.foreground.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _ForegroundLayerColorMatrixEffect.background.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 144);
  result = *(__n128 *)(v1 + 96);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 80);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ForegroundLayerColorMatrixEffect.background.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 112) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 128) = v2;
  *(_OWORD *)(v1 + 144) = *(_OWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)a1;
  *(__n128 *)(v1 + 96) = result;
  return result;
}

uint64_t (*_ForegroundLayerColorMatrixEffect.background.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void __swiftcall _ForegroundLayerColorMatrixEffect.init(foreground:background:)(SwiftUI::_ForegroundLayerColorMatrixEffect *__return_ptr retstr, SwiftUI::_ColorMatrix *foreground, SwiftUI::_ColorMatrix *background)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = *(_OWORD *)&background->m15;
  v9 = *(_OWORD *)&background->m24;
  v10 = *(_OWORD *)&background->m33;
  v11 = *(_OWORD *)&background->m42;
  v5 = *(_OWORD *)&foreground->m24;
  v6 = *(_OWORD *)&foreground->m33;
  v7 = *(_OWORD *)&foreground->m42;
  v8 = *(_OWORD *)&background->m11;
  v4 = *(_OWORD *)&foreground->m15;
  *(_OWORD *)&retstr->foreground.m11 = *(_OWORD *)&foreground->m11;
  *(_OWORD *)&retstr->foreground.m15 = v4;
  *(_OWORD *)&retstr->background.m33 = v10;
  *(_OWORD *)&retstr->background.m42 = v11;
  *(_OWORD *)&retstr->background.m15 = v3;
  *(_OWORD *)&retstr->background.m24 = v9;
  *(_OWORD *)&retstr->foreground.m42 = v7;
  *(_OWORD *)&retstr->background.m11 = v8;
  *(_OWORD *)&retstr->foreground.m24 = v5;
  *(_OWORD *)&retstr->foreground.m33 = v6;
}

void static _ForegroundLayerColorMatrixEffect._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v4 = a2;
  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  KeyPath = swift_getKeyPath();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>, (uint64_t)&type metadata for _ForegroundLayerColorMatrixEffect, (uint64_t)&type metadata for _ForegroundLayerLevelColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
  lazy protocol witness table accessor for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>();
  v10 = v4[3];
  v11 = v4[4];
  v13 = *(_OWORD *)(v4 + 7);
  v14 = *(_OWORD *)(v4 + 5);
  v12 = v4[9];
  LODWORD(v4) = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v16 = v4;
  v17 = v6;
  LODWORD(KeyPath) = v7;
  v19 = v8;
  v20 = v10;
  v21 = v11;
  v22 = v14;
  v23 = v13;
  v24 = v12;
  v25 = v9;
  static _ForegroundLayerLevelColorMatrixEffect._makeView(modifier:inputs:body:)(&v16, (uint64_t)&v17, a3, a4);
}

uint64_t _ForegroundLayerColorMatrixEffect.levelEffect.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  _OWORD v14[5];
  _OWORD v15[5];

  v3 = v1[3];
  v15[2] = v1[2];
  v15[3] = v3;
  v4 = v1[5];
  v15[4] = v1[4];
  v5 = v1[1];
  v15[0] = *v1;
  v15[1] = v5;
  v6 = v1[6];
  v7 = v1[8];
  v8 = v1[9];
  v14[2] = v1[7];
  v14[3] = v7;
  v14[4] = v8;
  v14[0] = v4;
  v14[1] = v6;
  v11 = 1;
  result = _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)(&v11, v15, v14, 0, (uint64_t)&v12);
  v10 = v13;
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 8) = v10;
  return result;
}

uint64_t sub_234C9A20C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  _OWORD v14[5];
  _OWORD v15[5];

  v3 = a1[3];
  v14[2] = a1[2];
  v14[3] = v3;
  v4 = a1[5];
  v14[4] = a1[4];
  v5 = a1[1];
  v14[0] = *a1;
  v14[1] = v5;
  v6 = a1[6];
  v7 = a1[8];
  v8 = a1[9];
  v15[2] = a1[7];
  v15[3] = v7;
  v15[4] = v8;
  v15[0] = v4;
  v15[1] = v6;
  v11 = 1;
  result = _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)(&v11, v14, v15, 0, (uint64_t)&v12);
  v10 = v13;
  *(_QWORD *)a2 = v12;
  *(_DWORD *)(a2 + 8) = v10;
  return result;
}

double static _ForegroundLayerLevelColorMatrixEffect._makeView(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  double result;
  unint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a2 + 80);
  v22 = *(_QWORD *)a2;
  LODWORD(v23) = v6;
  v24 = v7;
  v25 = *(_OWORD *)(a2 + 24);
  v26 = v8;
  v27 = v9;
  v28 = *(_OWORD *)(a2 + 56);
  v29 = *(_QWORD *)(a2 + 72);
  v30 = v10;
  a3(&v20);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v12 = *(_QWORD *)(v9 + 16);
  if (v12)
  {
    v13 = v11;
    v14 = (_QWORD *)(v9 + 32);
    while (*v14 != v11)
    {
      v14 += 2;
      if (!--v12)
        goto LABEL_9;
    }
    v22 = v20;
    LODWORD(v23) = LODWORD(v21);
    v15 = PreferencesOutputs.subscript.getter(v11);
    v16 = *MEMORY[0x24BE096C0];
    if ((v15 & 0x100000000) == 0)
      v16 = v15;
    v22 = __PAIR64__(v16, v5);
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList();
    v17 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v22) = 0;
    PreferencesOutputs.subscript.setter(v17, v13, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v18);
  }
LABEL_9:
  *(_QWORD *)a4 = v20;
  result = v21;
  a4[1] = v21;
  return result;
}

uint64_t _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:)@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;

  v7 = *a1;
  result = _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)(&v7, a2, a3, 0, (uint64_t)&v8);
  v6 = v9;
  *(_QWORD *)a4 = v8;
  *(_DWORD *)(a4 + 8) = v6;
  return result;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundLayerColorMatrixEffect(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v4 = a2;
  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  KeyPath = swift_getKeyPath();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>, (uint64_t)&type metadata for _ForegroundLayerColorMatrixEffect, (uint64_t)&type metadata for _ForegroundLayerLevelColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
  lazy protocol witness table accessor for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>();
  v10 = v4[3];
  v11 = v4[4];
  v13 = *(_OWORD *)(v4 + 7);
  v14 = *(_OWORD *)(v4 + 5);
  v12 = v4[9];
  LODWORD(v4) = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v16 = v4;
  v17 = v6;
  LODWORD(KeyPath) = v7;
  v19 = v8;
  v20 = v10;
  v21 = v11;
  v22 = v14;
  v23 = v13;
  v24 = v12;
  v25 = v9;
  static _ForegroundLayerLevelColorMatrixEffect._makeView(modifier:inputs:body:)(&v16, (uint64_t)&v17, a3, a4);
}

void _ForegroundLayerLevel.properties.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_ForegroundLayerLevel.properties.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_ForegroundLayerLevel.properties.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

char *_ForegroundLayerLevel.init(_:)@<X0>(char *result@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  v3 = *result;
  if (one-time initialization token for all != -1)
    result = (char *)swift_once();
  *a2 = static _ForegroundLayerLevel.all & v3;
  return result;
}

void static _ForegroundLayerLevel.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static _ForegroundLayerLevel.primary.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static _ForegroundLayerLevel.secondary.getter(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

void static _ForegroundLayerLevel.tertiary.getter(_BYTE *a1@<X8>)
{
  *a1 = 32;
}

void static _ForegroundLayerLevel.quaternary.getter(_BYTE *a1@<X8>)
{
  *a1 = 64;
}

void one-time initialization function for all()
{
  static _ForegroundLayerLevel.all = 113;
}

{
  static AbsoluteEdge.Set.all = 15;
}

{
  static _DetachableProperties.all = 31;
}

{
  static ViewRendererHostProperties.all = 2047;
}

void _ForegroundLayerLevel.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static _ForegroundLayerLevel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int _ForegroundLayerLevel.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *_ForegroundLayerLevelViewModifier.init(level:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void _ForegroundLayerLevelViewModifier.effectValue(size:)(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  *(_QWORD *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 2;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _ForegroundLayerLevelViewModifier(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  *(_QWORD *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 2;
}

uint64_t static _ForegroundLayerLevelColorMatrixEffect.Options.premultiplied.getter()
{
  return 1;
}

uint64_t _ForegroundLayerLevelColorMatrixEffect.init(_:options:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  char v13;

  v9 = *a1;
  v10 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, 0, isUniquelyReferenced_nonNull_native);
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    v13 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v9, v13);
    result = swift_bridgeObjectRelease();
  }
  *(_QWORD *)a5 = v10;
  *(_DWORD *)(a5 + 8) = a4;
  return result;
}

uint64_t ForegroundLayerDisplayList.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  __int16 v3;
  char v4;
  int v5;
  char v6;
  uint64_t v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x24BE096C0])
  {
    v13 = MEMORY[0x24BEE4AF8];
    v14 = 0;
    v15 = 0;
    return AGGraphSetOutputValue();
  }
  else
  {
    Value = AGGraphGetValue();
    v3 = *(_WORD *)(Value + 8);
    v4 = *(_BYTE *)(Value + 10);
    v13 = *(_QWORD *)Value;
    v14 = v3;
    v15 = v4;
    v5 = *(_DWORD *)(AGGraphGetValue() + 8);
    if ((v6 & 1) != 0)
    {
      v7 = ++static DisplayList.Version.lastValue;
      *(_QWORD *)(v0 + 8) = static DisplayList.Version.lastValue;
    }
    else
    {
      v7 = *(_QWORD *)(v0 + 8);
    }
    v10 = v7;
    v8 = v5 & 1;
    swift_bridgeObjectRetain();
    v9 = swift_bridgeObjectRetain();
    DisplayList.insertLayerFilters(matrices:version:premultiplied:)((Swift::OpaquePointer)v9, (SwiftUI::DisplayList::Version)&v10, v8);
    swift_bridgeObjectRelease();
    v10 = v13;
    v11 = v14;
    v12 = v15;
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>, (uint64_t)&type metadata for _ForegroundLayerColorMatrixEffect, (uint64_t)&type metadata for _ForegroundLayerLevelColorMatrixEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09658], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList;
  if (!lazy protocol witness table cache variable for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ForegroundLayerDisplayList, &unk_25063C728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ForegroundLayerViewModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerViewModifier, &type metadata for _ForegroundLayerViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ForegroundLayerLevelViewModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerLevelViewModifier, &type metadata for _ForegroundLayerLevelViewModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerLevelColorMatrixEffect.Options, &type metadata for _ForegroundLayerLevelColorMatrixEffect.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerLevelColorMatrixEffect.Options, &type metadata for _ForegroundLayerLevelColorMatrixEffect.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerLevelColorMatrixEffect.Options, &type metadata for _ForegroundLayerLevelColorMatrixEffect.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerLevelColorMatrixEffect.Options, &type metadata for _ForegroundLayerLevelColorMatrixEffect.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

ValueMetadata *type metadata accessor for _ForegroundLayerViewModifier()
{
  return &type metadata for _ForegroundLayerViewModifier;
}

__n128 __swift_memcpy160_4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for _ForegroundLayerColorMatrixEffect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ForegroundLayerColorMatrixEffect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ForegroundLayerColorMatrixEffect()
{
  return &type metadata for _ForegroundLayerColorMatrixEffect;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevel()
{
  return &type metadata for _ForegroundLayerLevel;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevelViewModifier()
{
  return &type metadata for _ForegroundLayerLevelViewModifier;
}

uint64_t initializeBufferWithCopyOfBuffer for _ForegroundLayerLevelColorMatrixEffect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ForegroundLayerLevelColorMatrixEffect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for _ForegroundLayerLevelColorMatrixEffect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ForegroundLayerLevelColorMatrixEffect(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 12))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ForegroundLayerLevelColorMatrixEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 12) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevelColorMatrixEffect()
{
  return &type metadata for _ForegroundLayerLevelColorMatrixEffect;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevelColorMatrixEffect.Options()
{
  return &type metadata for _ForegroundLayerLevelColorMatrixEffect.Options;
}

void *type metadata accessor for ForegroundLayerDisplayList()
{
  return &unk_25063C728;
}

unint64_t instantiation function for generic protocol witness table for ForegroundLayerDisplayList(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double specialized Sequence.reduce<A>(into:_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D2>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  char v13;
  _BYTE v14[40];

  v11 = *a1;
  v12 = a1[1];
  v13 = *((_BYTE *)a1 + 32);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      v8 = v7 + 1;
      v9 = swift_retain();
      specialized Shape.effectivePath(in:)(v9, (uint64_t)v14, a4);
      Path.formTrivialUnion(_:)((uint64_t)v14);
      outlined retain of Path.Storage((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      swift_release();
      v7 = v8;
    }
    while (v5 != v8);
    swift_bridgeObjectRelease();
  }
  result = *(double *)&v11;
  *(_OWORD *)a3 = v11;
  *(_OWORD *)(a3 + 16) = v12;
  *(_BYTE *)(a3 + 32) = v13;
  return result;
}

uint64_t ContentShapeKinds.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ContentShapeKinds.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ContentShapeKinds.rawValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ContentShapeKinds __swiftcall ContentShapeKinds.init(rawValue:)(SwiftUI::ContentShapeKinds rawValue)
{
  SwiftUI::ContentShapeKinds *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ContentShapeKinds.interaction.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ContentShapeKinds.dragPreview.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ContentShapeKinds.contextMenuPreview.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ContentShapeKinds.hoverEffect.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ContentShapeKinds.focusEffect.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ContentShapeKinds.accessibility.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

uint64_t ContentShapeKinds.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  v1 = *v0;
  if ((*v0 & 1) != 0)
  {
    v5._countAndFlagsBits = 0x7463617265746E69;
    v5._object = (void *)0xEC000000206E6F69;
    String.append(_:)(v5);
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }
  v6._countAndFlagsBits = 0x7665725067617264;
  v6._object = (void *)0xEC00000020776569;
  String.append(_:)(v6);
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v7._object = (void *)0x80000002352E19C0;
  v7._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v7);
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    v9._countAndFlagsBits = 0x6666457375636F66;
    v9._object = (void *)0xEC00000020746365;
    String.append(_:)(v9);
    if ((v1 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_12:
  v8._countAndFlagsBits = 0x6666457265766F68;
  v8._object = (void *)0xEC00000020746365;
  String.append(_:)(v8);
  if ((v1 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v1 & 0x40) != 0)
  {
LABEL_7:
    v2._countAndFlagsBits = 0x6269737365636361;
    v2._object = (void *)0xEE00207974696C69;
    String.append(_:)(v2);
  }
LABEL_8:
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 93;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 8283;
}

SwiftUI::ContentShapes __swiftcall ContentShapes.init()()
{
  _QWORD *v0;
  SwiftUI::ContentShapes result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ContentShapesKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static EnvironmentValues.ContentShapesKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t EnvironmentValues.contentShapes.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.contentShapes : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.contentShapes.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.contentShapes.modify(uint64_t **a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[4] = (uint64_t)v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, v3);
  }
  swift_release_n();
  v3[5] = 0;
  return EnvironmentValues.contentShapes.modify;
}

void EnvironmentValues.contentShapes.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (uint64_t *)(*a1)[4];
  v5 = **a1;
  v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v7 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v8 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v3);
}

uint64_t ContentShapes.addShape<A>(_:forKinds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v4;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))(v9, v13, v7);
  v15 = AnyShape.init<A>(_:)((uint64_t)v9, a3, a4, v14);
  v16 = *v4;
  result = swift_isUniquelyReferenced_nonNull_native();
  if (v11)
  {
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      v16 = (_QWORD *)result;
    }
    v19 = v16[2];
    v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
      v16 = (_QWORD *)result;
    }
    v16[2] = v19 + 1;
    v20 = &v16[2 * v19];
    v20[4] = v11;
  }
  else
  {
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      v16 = (_QWORD *)result;
    }
    v22 = v16[2];
    v21 = v16[3];
    if (v22 >= v21 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v16);
      v16 = (_QWORD *)result;
    }
    v16[2] = v22 + 1;
    v20 = &v16[2 * v22];
    v20[4] = 1;
  }
  v20[5] = v15;
  *v4 = v16;
  return result;
}

uint64_t ContentShapes.shape(for:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = *a1;
  v5 = *v2;
  v12 = MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(*v2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = v5 + 16 * v6 + 24;
    do
    {
      if (v4)
      {
        v8 = *(_QWORD *)(v7 - 8);
        if ((v8 & v4) != 0)
        {
          v9 = swift_retain();
          MEMORY[0x23B7C61A8](v9);
          if (*(_QWORD *)(v12 + 16) >= *(_QWORD *)(v12 + 24) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v4 &= ~v8;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      v7 -= 16;
      --v6;
    }
    while (v6);
    v10 = v12;
  }
  else
  {
    swift_bridgeObjectRetain();
    v10 = MEMORY[0x24BEE4AF8];
  }
  result = swift_bridgeObjectRelease();
  *a2 = v10;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>)
{
  double v16;
  double v17;
  double v18;
  BOOL IsNull;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  BOOL v32;
  void (*v33)(unint64_t *);
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *InputValue;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t result;
  unsigned __int8 v44;
  _QWORD v45[4];
  unsigned __int8 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CGFloat v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v16 = a2;
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    v17 = a4;
  }
  else
  {
    v58.origin.x = v16;
    v58.origin.y = a3;
    v58.size.width = a4;
    v58.size.height = a5;
    v59 = CGRectStandardize(v58);
    if (a7 == a9)
      v18 = a9;
    else
      v18 = a7;
    v16 = v18 + v59.origin.x;
    a3 = v59.origin.y + a6;
    v17 = v59.size.width - (a7 + a9);
    a5 = v59.size.height - (a6 + a8);
    v60.origin.x = v18 + v59.origin.x;
    v60.origin.y = v59.origin.y + a6;
    v60.size.width = v17;
    v60.size.height = a5;
    if (CGRectGetWidth(v60) < 0.0
      || (v61.origin.x = v16, v61.origin.y = a3, v61.size.width = v17, v61.size.height = a5, CGRectGetHeight(v61) < 0.0))
    {
      v16 = *MEMORY[0x24BDBF070];
      a3 = *(double *)(MEMORY[0x24BDBF070] + 8);
      v17 = *(double *)(MEMORY[0x24BDBF070] + 16);
      a5 = *(double *)(MEMORY[0x24BDBF070] + 24);
    }
  }
  v62.origin.x = v16;
  v62.origin.y = a3;
  v62.size.width = v17;
  v62.size.height = a5;
  IsNull = CGRectIsNull(v62);
  if (IsNull)
    v20 = 0;
  else
    v20 = *(_QWORD *)&v16;
  if (IsNull)
    v21 = 0;
  else
    v21 = *(_QWORD *)&a3;
  if (IsNull)
    v22 = 0;
  else
    v22 = *(_QWORD *)&v17;
  if (IsNull)
    v23 = 0;
  else
    v23 = *(_QWORD *)&a5;
  if (IsNull)
    v24 = 6;
  else
    v24 = 0;
  v53 = v20;
  v54 = v21;
  v55 = v22;
  v56 = v23;
  v57 = v24;
  v44 = v24;
  outlined copy of Path.Storage(v20, v21, v22, v23, v24);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v25 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    v26 = v20;
    v27 = v21;
    v28 = v22;
    v29 = v23;
    v30 = v44;
    v31 = v44;
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_47;
  }
  else
  {
    v26 = v20;
    v27 = v21;
    v28 = v22;
    v29 = v23;
    v31 = v44;
    v32 = dword_25426FAB8 >= v25;
    v30 = v44;
    if (!v32)
      goto LABEL_47;
  }
  v26 = v20;
  v27 = v21;
  v28 = v22;
  v29 = v23;
  v31 = v30;
  if (_threadGeometryProxyData())
  {
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
    {
      v47 = 0;
      v48 = 0;
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v33 = *(void (**)(unint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared)
                                                      + 0x68);
      v34 = static CoreGlue2.shared;
      v33(&v47);

      v36 = v47;
      v35 = v48;
      v30 = v44;
    }
    else
    {
      AGWeakAttributeGetAttribute();
      InputValue = (uint64_t *)AGGraphGetInputValue();
      v36 = *InputValue;
      v35 = InputValue[1];
      swift_retain();
      swift_retain();
    }
    if (v35)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v36, v45);
      swift_release_n();
      swift_release_n();
      v26 = v20;
      v27 = v21;
      v28 = v22;
      v29 = v23;
      v31 = v30;
      if ((v45[0] & 1) == 0)
        goto LABEL_47;
    }
    else
    {
      v38 = swift_retain_n();
      v39 = specialized find<A>(_:key:)(v38);
      if (!v39)
      {
        swift_release_n();
        v26 = v20;
        v27 = v21;
        v28 = v22;
        v29 = v23;
        v31 = v30;
        goto LABEL_47;
      }
      v40 = *(unsigned __int8 *)(v39 + 72);
      swift_release_n();
      v26 = v20;
      v27 = v21;
      v28 = v22;
      v29 = v23;
      v31 = v44;
      v41 = v40 == 1;
      v30 = v44;
      if (!v41)
        goto LABEL_47;
    }
    v47 = 0xBFF0000000000000;
    v48 = 0;
    v49 = 0;
    v50 = 0x3FF0000000000000;
    v51 = a4;
    v52 = 0;
    Path.applying(_:)((double *)&v47, (uint64_t)v45);
    v26 = v45[0];
    v27 = v45[1];
    v28 = v45[2];
    v29 = v45[3];
    v31 = v46;
    outlined consume of Path.Storage(v20, v21, v22, v23, v30);
  }
LABEL_47:
  result = outlined consume of Path.Storage(v20, v21, v22, v23, v30);
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v29;
  *(_BYTE *)(a1 + 32) = v31;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D2>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(CGAffineTransform *);
  void *v12;
  CGFloat b;
  uint64_t v14;
  uint64_t *InputValue;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int rect;
  uint64_t v22;
  _QWORD v24[4];
  char v25;
  CGAffineTransform v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = swift_retain();
    specialized Shape.effectivePath(in:)(v4, (uint64_t)&v22, a3);
    __asm { BR              X8 }
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 6;
  outlined copy of Path.Storage(0, 0, 0, 0, 6u);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 6;
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 6;
    if (dword_25426FAB8 < v5)
      goto LABEL_24;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 6;
  if (_threadGeometryProxyData())
  {
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
    {
      v26.a = 0.0;
      v26.b = 0.0;
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v11 = *(void (**)(CGAffineTransform *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared)
                                                       + 0x68);
      v12 = static CoreGlue2.shared;
      v11(&v26);

      v14 = *(_QWORD *)&v26.a;
      b = v26.b;
    }
    else
    {
      AGWeakAttributeGetAttribute();
      InputValue = (uint64_t *)AGGraphGetInputValue();
      v14 = *InputValue;
      b = *((double *)InputValue + 1);
      swift_retain();
      swift_retain();
    }
    if (b != 0.0)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v14, v24);
      swift_release_n();
      swift_release_n();
      v6 = 0;
      v7 = 0;
      v8 = v3;
      v9 = 0;
      v10 = 6;
      if ((v24[0] & 1) == 0)
        goto LABEL_24;
LABEL_22:
      v26.a = -1.0;
      v26.b = 0.0;
      v26.c = 0.0;
      v26.d = 1.0;
      v26.tx = a3;
      v26.ty = 0.0;
      Path.applying(_:)(&v26.a, (uint64_t)v24);
      v6 = v24[0];
      v7 = v24[1];
      v8 = v24[2];
      v9 = v24[3];
      v10 = v25;
      outlined consume of Path.Storage(0, 0, v3, 0, 6u);
      goto LABEL_24;
    }
    v16 = swift_retain_n();
    v17 = specialized find<A>(_:key:)(v16);
    if (!v17)
    {
      swift_release_n();
      v6 = 0;
      v7 = 0;
      v8 = v3;
      v9 = 0;
      v10 = 6;
      goto LABEL_24;
    }
    rect = *(unsigned __int8 *)(v17 + 72);
    swift_release_n();
    v6 = 0;
    v7 = 0;
    v8 = v3;
    v9 = 0;
    v10 = 6;
    if (rect == 1)
      goto LABEL_22;
  }
LABEL_24:
  result = outlined consume of Path.Storage(0, 0, v3, 0, 6u);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  void (*v11)(unint64_t *);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *InputValue;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  _QWORD v20[4];
  char v21;
  _QWORD v22[4];
  char v23;
  _BYTE v24[40];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v20);
  v5 = v20[0];
  v6 = v20[1];
  v7 = v20[2];
  v8 = v20[3];
  v9 = v21;
  outlined init with take of Path.Storage((uint64_t)v20, (uint64_t)v24);
  outlined retain of Path.Storage((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v10 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_22;
  }
  else if (dword_25426FAB8 < v10)
  {
    goto LABEL_22;
  }
  if (_threadGeometryProxyData())
  {
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
    {
      v25 = 0;
      v26 = 0;
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v11 = *(void (**)(unint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared)
                                                      + 0x68);
      v12 = static CoreGlue2.shared;
      v11(&v25);

      v14 = v25;
      v13 = v26;
    }
    else
    {
      AGWeakAttributeGetAttribute();
      InputValue = (uint64_t *)AGGraphGetInputValue();
      v14 = *InputValue;
      v13 = InputValue[1];
      swift_retain();
      swift_retain();
    }
    if (v13)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v14, v22);
      swift_release_n();
      swift_release_n();
      if ((v22[0] & 1) == 0)
        goto LABEL_22;
LABEL_20:
      v25 = 0xBFF0000000000000;
      v26 = 0;
      v27 = 0;
      v28 = 0x3FF0000000000000;
      v29 = a3;
      v30 = 0;
      Path.applying(_:)((double *)&v25, (uint64_t)v22);
      v5 = v22[0];
      v6 = v22[1];
      v7 = v22[2];
      v8 = v22[3];
      v9 = v23;
      outlined retain of Path.Storage((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      goto LABEL_22;
    }
    v16 = swift_retain_n();
    v17 = specialized find<A>(_:key:)(v16);
    if (!v17)
    {
      swift_release_n();
      goto LABEL_22;
    }
    v18 = *(unsigned __int8 *)(v17 + 72);
    swift_release_n();
    if (v18 == 1)
      goto LABEL_20;
  }
LABEL_22:
  result = outlined retain of Path.Storage((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = v9;
  return result;
}

void sub_234C9D040()
{
  JUMPOUT(0x234C9D048);
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(char a1@<W0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  double Width;
  double Height;
  uint64_t result;
  char v15;
  double v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  Width = CGRectGetWidth(*(CGRect *)&a3);
  v17.origin.x = a3;
  v17.origin.y = a4;
  v17.size.width = a5;
  v17.size.height = a6;
  Height = CGRectGetHeight(v17);
  if (Height < Width)
    Width = Height;
  v18.origin.x = a3;
  v18.origin.y = a4;
  v18.size.width = a5;
  v18.size.height = a6;
  if (CGRectIsNull(v18))
  {
    result = 0;
    v15 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
  }
  else
  {
    v16 = Width * 0.5;
    if (v16 == 0.0
      || (v19.origin.x = a3, v19.origin.y = a4, v19.size.width = a5, v19.size.height = a6, CGRectIsInfinite(v19)))
    {
      v15 = 0;
      result = *(_QWORD *)&a3;
    }
    else
    {
      result = swift_allocObject();
      *(CGFloat *)(result + 16) = a3;
      *(CGFloat *)(result + 24) = a4;
      *(CGFloat *)(result + 32) = a5;
      *(CGFloat *)(result + 40) = a6;
      v15 = 2;
      a4 = 0.0;
      *(double *)(result + 48) = v16;
      *(double *)(result + 56) = v16;
      a5 = 0.0;
      a6 = 0.0;
      *(_BYTE *)(result + 64) = a1 & 1;
    }
  }
  *(_QWORD *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_BYTE *)(a2 + 32) = v15;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>)
{
  unsigned int v12;
  char v13;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v18;
  double v19;
  uint64_t result;
  char v21;
  double v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  if (one-time initialization token for v5 != -1)
    swift_once();
  v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v13 = 0;
      goto LABEL_10;
    }
  }
  else if (static Semantics.forced < v12)
  {
    goto LABEL_7;
  }
  v13 = LOBYTE(a6) & 1;
  *(_QWORD *)&a6 &= ~1uLL;
LABEL_10:
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  v24 = CGRectInset(v23, a6, a6);
  x = v24.origin.x;
  y = v24.origin.y;
  width = v24.size.width;
  height = v24.size.height;
  v18 = CGRectGetWidth(v24);
  v25.origin.x = x;
  v25.origin.y = y;
  v25.size.width = width;
  v25.size.height = height;
  v19 = CGRectGetHeight(v25);
  if (v19 < v18)
    v18 = v19;
  v26.origin.x = x;
  v26.origin.y = y;
  v26.size.width = width;
  v26.size.height = height;
  if (CGRectIsNull(v26))
  {
    result = 0;
    v21 = 6;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    v22 = v18 * 0.5;
    if (v22 == 0.0
      || (v27.origin.x = x, v27.origin.y = y, v27.size.width = width, v27.size.height = height, CGRectIsInfinite(v27)))
    {
      v21 = 0;
      result = *(_QWORD *)&x;
    }
    else
    {
      result = swift_allocObject();
      *(CGFloat *)(result + 16) = x;
      *(CGFloat *)(result + 24) = y;
      *(CGFloat *)(result + 32) = width;
      *(CGFloat *)(result + 40) = height;
      v21 = 2;
      y = 0.0;
      *(double *)(result + 48) = v22;
      *(double *)(result + 56) = v22;
      width = 0.0;
      height = 0.0;
      *(_BYTE *)(result + 64) = v13;
    }
  }
  *(_QWORD *)a1 = result;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_BYTE *)(a1 + 32) = v21;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, unint64_t a2@<D2>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[40];

  v3 = v2;
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 24);
  v10 = *(_BYTE *)(v2 + 32);
  outlined init with take of Path.Storage(v2, (uint64_t)v29);
  outlined retain of Path.Storage((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  outlined retain of Path.Storage((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v11 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_17;
  }
  else if (dword_25426FAB8 < v11)
  {
    goto LABEL_17;
  }
  v12 = _threadGeometryProxyData();
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 48);
    v14 = *(_OWORD *)(v12 + 16);
    v20 = *(_OWORD *)v12;
    v21 = v14;
    v22 = *(_OWORD *)(v12 + 32);
    v23 = v13;
    GeometryProxy.environment.getter(&v24);
    v15 = v24;
    if (v25)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v15, &v20);
      swift_release_n();
      swift_release_n();
      if ((v20 & 1) == 0)
        goto LABEL_17;
LABEL_15:
      v20 = 0xBFF0000000000000;
      *(_QWORD *)&v21 = 0;
      *((_QWORD *)&v21 + 1) = 0x3FF0000000000000;
      v22 = a2;
      Path.applying(_:)((double *)&v20, (uint64_t)&v24);
      v6 = v24;
      v7 = v25;
      v8 = v26;
      v9 = v27;
      v10 = v28;
      outlined retain of Path.Storage(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    v16 = swift_retain_n();
    v17 = specialized find<A>(_:key:)(v16);
    if (!v17)
    {
      swift_release_n();
      goto LABEL_17;
    }
    v18 = *(_BYTE *)(v17 + 72);
    swift_release_n();
    if ((v18 & 1) != 0)
      goto LABEL_15;
  }
LABEL_17:
  result = outlined retain of Path.Storage(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _OWORD v39[2];
  char v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[40];

  v11 = *(double *)v5;
  v12 = *(double *)(v5 + 8);
  v14 = *(double *)(v5 + 16);
  v13 = *(double *)(v5 + 24);
  v15 = *(_BYTE *)(v5 + 32);
  v30 = 0u;
  v31 = 0u;
  v16 = 6;
  LOBYTE(v32) = 6;
  v41 = 0x3FF0000000000000uLL;
  v42 = 0;
  v43 = 0x3FF0000000000000;
  v44 = 0;
  v45 = 0;
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    specialized Path.withMutableBuffer(do:)((uint64_t)&v30, &v41, v15, a2, a3, a4, a5, v11, v12, v14, v13);
    v19 = *((_QWORD *)&v30 + 1);
    v20 = v30;
    v17 = *((_QWORD *)&v31 + 1);
    v18 = v31;
    v16 = v32;
  }
  v39[0] = v30;
  v39[1] = v31;
  v40 = v32;
  outlined init with take of Path.Storage((uint64_t)v39, (uint64_t)v46);
  outlined retain of Path.Storage((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v21 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_20;
  }
  else if (dword_25426FAB8 < v21)
  {
    goto LABEL_20;
  }
  v22 = _threadGeometryProxyData();
  if (v22)
  {
    v23 = *(_DWORD *)(v22 + 48);
    v24 = *(_OWORD *)(v22 + 16);
    v30 = *(_OWORD *)v22;
    v31 = v24;
    v32 = *(_OWORD *)(v22 + 32);
    v33 = v23;
    GeometryProxy.environment.getter(&v34);
    v25 = v34;
    if (v35)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v25, &v30);
      swift_release_n();
      swift_release_n();
      if ((v30 & 1) == 0)
        goto LABEL_20;
LABEL_18:
      v30 = 0xBFF0000000000000;
      *(_QWORD *)&v31 = 0;
      *((_QWORD *)&v31 + 1) = 0x3FF0000000000000;
      v32 = *(unint64_t *)&a4;
      Path.applying(_:)((double *)&v30, (uint64_t)&v34);
      v20 = v34;
      v19 = v35;
      v18 = v36;
      v17 = v37;
      v16 = v38;
      outlined retain of Path.Storage((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      goto LABEL_20;
    }
    v26 = swift_retain_n();
    v27 = specialized find<A>(_:key:)(v26);
    if (!v27)
    {
      swift_release_n();
      goto LABEL_20;
    }
    v28 = *(_BYTE *)(v27 + 72);
    swift_release_n();
    if ((v28 & 1) != 0)
      goto LABEL_18;
  }
LABEL_20:
  result = outlined retain of Path.Storage((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 24) = v17;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, unint64_t a3@<D2>)
{
  __int128 *v3;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[4];
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _BYTE v35[40];

  v6 = v3[1];
  v25 = *v3;
  v26 = v6;
  v27 = v3[2];
  UnevenRoundedRectangle._Inset.path(in:)((uint64_t)v28, a2);
  v7 = v28[0];
  v8 = v28[1];
  v9 = v28[2];
  v10 = v28[3];
  v11 = v29;
  outlined init with take of Path.Storage((uint64_t)v28, (uint64_t)v35);
  outlined retain of Path.Storage((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_17;
  }
  else if (dword_25426FAB8 < v12)
  {
    goto LABEL_17;
  }
  v13 = _threadGeometryProxyData();
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 48);
    v15 = *(_OWORD *)(v13 + 16);
    v21 = *(_OWORD *)v13;
    v22 = v15;
    v23 = *(_OWORD *)(v13 + 32);
    v24 = v14;
    GeometryProxy.environment.getter(&v30);
    v16 = v30;
    if (v31)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v16, &v21);
      swift_release_n();
      swift_release_n();
      if ((v21 & 1) == 0)
        goto LABEL_17;
LABEL_15:
      v21 = 0xBFF0000000000000;
      *(_QWORD *)&v22 = 0;
      *((_QWORD *)&v22 + 1) = 0x3FF0000000000000;
      v23 = a3;
      Path.applying(_:)((double *)&v21, (uint64_t)&v30);
      v7 = v30;
      v8 = v31;
      v9 = v32;
      v10 = v33;
      v11 = v34;
      outlined retain of Path.Storage((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    v17 = swift_retain_n();
    v18 = specialized find<A>(_:key:)(v17);
    if (!v18)
    {
      swift_release_n();
      goto LABEL_17;
    }
    v19 = *(_BYTE *)(v18 + 72);
    swift_release_n();
    if ((v19 & 1) != 0)
      goto LABEL_15;
  }
LABEL_17:
  result = outlined retain of Path.Storage((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, unint64_t a3@<D2>, CGFloat a4@<D4>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _QWORD v26[4];
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[40];
  CGRect v34;

  v34 = CGRectInset(*(CGRect *)&a2, a4, a4);
  specialized ContainerRelativeShape.path(in:)((uint64_t)v26, (__n128)v34.origin, *(__n128 *)&v34.origin.y, (__n128)v34.size, *(__n128 *)&v34.size.height);
  v8 = v26[0];
  v9 = v26[1];
  v10 = v26[2];
  v11 = v26[3];
  v12 = v27;
  outlined init with take of Path.Storage((uint64_t)v26, (uint64_t)v33);
  outlined retain of Path.Storage((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v13 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_17;
  }
  else if (dword_25426FAB8 < v13)
  {
    goto LABEL_17;
  }
  v14 = _threadGeometryProxyData();
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 48);
    v16 = *(_OWORD *)(v14 + 16);
    v22 = *(_OWORD *)v14;
    v23 = v16;
    v24 = *(_OWORD *)(v14 + 32);
    v25 = v15;
    GeometryProxy.environment.getter(&v28);
    v17 = v28;
    if (v29)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v22);
      swift_release_n();
      swift_release_n();
      if ((v22 & 1) == 0)
        goto LABEL_17;
LABEL_15:
      v22 = 0xBFF0000000000000;
      *(_QWORD *)&v23 = 0;
      *((_QWORD *)&v23 + 1) = 0x3FF0000000000000;
      v24 = a3;
      Path.applying(_:)((double *)&v22, (uint64_t)&v28);
      v8 = v28;
      v9 = v29;
      v10 = v30;
      v11 = v31;
      v12 = v32;
      outlined retain of Path.Storage((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    v18 = swift_retain_n();
    v19 = specialized find<A>(_:key:)(v18);
    if (!v19)
    {
      swift_release_n();
      goto LABEL_17;
    }
    v20 = *(_BYTE *)(v19 + 72);
    swift_release_n();
    if ((v20 & 1) != 0)
      goto LABEL_15;
  }
LABEL_17:
  result = outlined retain of Path.Storage((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

double protocol witness for Shape.path(in:) in conformance CombinedContentShape@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t *v2;
  uint64_t v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  char v8;
  __int128 v9[2];
  char v10;

  v4 = *v2;
  memset(v9, 0, sizeof(v9));
  v10 = 6;
  specialized Sequence.reduce<A>(into:_:)(v9, v4, (uint64_t)v7, a2);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentShapeKinds and conformance ContentShapeKinds()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentShapeKinds, &type metadata for ContentShapeKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentShapeKinds, &type metadata for ContentShapeKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentShapeKinds, &type metadata for ContentShapeKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentShapeKinds, &type metadata for ContentShapeKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

uint64_t sub_234C9E27C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for ContentShapeKinds()
{
  return &type metadata for ContentShapeKinds;
}

ValueMetadata *type metadata accessor for ContentShapes()
{
  return &type metadata for ContentShapes;
}

ValueMetadata *type metadata accessor for CombinedContentShape()
{
  return &type metadata for CombinedContentShape;
}

unint64_t instantiation function for generic protocol witness table for CombinedContentShape(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CombinedContentShape and conformance CombinedContentShape();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234C9E348()
{
  return swift_deallocObject();
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  _QWORD v25[4];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[40];

  v5 = a4.n128_u64[0];
  specialized ContainerRelativeShape.path(in:)((uint64_t)v25, a2, a3, a4, a5);
  v7 = v25[0];
  v8 = v25[1];
  v9 = v25[2];
  v10 = v25[3];
  v11 = v26;
  outlined init with take of Path.Storage((uint64_t)v25, (uint64_t)v32);
  outlined retain of Path.Storage((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_17;
  }
  else if (dword_25426FAB8 < v12)
  {
    goto LABEL_17;
  }
  v13 = _threadGeometryProxyData();
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 48);
    v15 = *(_OWORD *)(v13 + 16);
    v21 = *(_OWORD *)v13;
    v22 = v15;
    v23 = *(_OWORD *)(v13 + 32);
    v24 = v14;
    GeometryProxy.environment.getter(&v27);
    v16 = v27;
    if (v28)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v16, &v21);
      swift_release_n();
      swift_release_n();
      if ((v21 & 1) == 0)
        goto LABEL_17;
LABEL_15:
      v21 = 0xBFF0000000000000;
      *(_QWORD *)&v22 = 0;
      *((_QWORD *)&v22 + 1) = 0x3FF0000000000000;
      v23 = v5;
      Path.applying(_:)((double *)&v21, (uint64_t)&v27);
      v7 = v27;
      v8 = v28;
      v9 = v29;
      v10 = v30;
      v11 = v31;
      outlined retain of Path.Storage((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    v17 = swift_retain_n();
    v18 = specialized find<A>(_:key:)(v17);
    if (!v18)
    {
      swift_release_n();
      goto LABEL_17;
    }
    v19 = *(_BYTE *)(v18 + 72);
    swift_release_n();
    if ((v19 & 1) != 0)
      goto LABEL_15;
  }
LABEL_17:
  result = outlined retain of Path.Storage((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ContentShapesKey()
{
  return &type metadata for EnvironmentValues.ContentShapesKey;
}

void _GrayscaleEffect.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_GrayscaleEffect.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _GrayscaleEffect.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*_GrayscaleEffect.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _GrayscaleEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 10;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_234C9E660()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

BOOL static _GrayscaleEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _GrayscaleEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 10;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t View.grayscale(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return View.modifier<A>(_:)(&v4, a1, &type metadata for _GrayscaleEffect, a2);
}

double sub_234C9E768@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234C9E774(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _GrayscaleEffect()
{
  return &type metadata for _GrayscaleEffect;
}

uint64_t sub_234C9E790(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _GrayscaleEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _GrayscaleEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t Anchor.convert(to:)(uint64_t *a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *a1;
  v2 = *(_OWORD *)(a1 + 3);
  v5 = *(_OWORD *)(a1 + 1);
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)a2 + 96))(&v4);
}

uint64_t AnchorGeometry.init(position:size:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t AnchorGeometry.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  double v9;
  double v10;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(double *)(Value + 8);
  v5 = *(double *)(Value + 16);
  v6 = *(double *)(Value + 24);
  v7 = *(double *)(Value + 32);
  v8 = (double *)AGGraphGetValue();
  v9 = *v8;
  v10 = v8[1];
  *(_QWORD *)a1 = v3;
  *(double *)(a1 + 24) = v6 - (v9 - v4);
  *(double *)(a1 + 32) = v7 - (v10 - v5);
  *(double *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = v10;
  return swift_retain();
}

double AnchorGeometry.size.getter()
{
  type metadata accessor for CGSize(0);
  return *(double *)AGGraphGetValue();
}

uint64_t Anchor.in(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t InputValue;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  _QWORD v14[5];

  InputValue = AGGraphGetInputValue();
  v4 = *(_QWORD *)InputValue;
  v5 = *(double *)(InputValue + 8);
  v6 = *(double *)(InputValue + 16);
  v7 = *(double *)(InputValue + 24);
  v8 = *(double *)(InputValue + 32);
  v9 = AGGraphGetInputValue();
  v10 = *(double *)v9;
  v11 = *(double *)(v9 + 8);
  v12 = v7 - (*(double *)v9 - v5);
  swift_retain();
  v14[0] = v4;
  *(double *)&v14[1] = v10;
  *(double *)&v14[2] = v11;
  *(double *)&v14[3] = v12;
  *(double *)&v14[4] = v8 - (v11 - v6);
  (*(void (**)(_QWORD *))(*(_QWORD *)a2 + 96))(v14);
  return swift_release();
}

uint64_t Anchor.defaultValue.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 88))();
}

uint64_t Anchor.Source.prepare(geometry:)(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;

  v4 = *((_DWORD *)a1 + 2);
  swift_retain();
  v7 = *a1;
  v8 = v4;
  v5 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)a2 + 88))(&v7);
  swift_release();
  return v5;
}

uint64_t static Anchor<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Anchor<A>(uint64_t *a1, uint64_t *a2)
{
  return static Anchor<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t Anchor<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 112))();
}

Swift::Int Anchor<A>.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 112))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> Anchor<A>()
{
  uint64_t *v0;

  return Anchor<A>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <A> Anchor<A>(uint64_t a1)
{
  uint64_t *v1;

  return Anchor<A>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> Anchor<A>()
{
  uint64_t *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Anchor<A>.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

void AnchorBoxBase.prepare(geometry:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnchorBoxBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnchorBoxBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void AnchorValueBoxBase.defaultValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnchorValueBoxBase.convert(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnchorValueBoxBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t static AnchorProtocol<>.valueIsEqual(lhs:rhs:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t static AnchorProtocol<>.hashValue(_:into:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Anchor.Source.init<A>(anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for AnchorBox(0, a3, a4, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 104) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 120), a1);
  return v5;
}

uint64_t AnchorBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 104) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120), a1);
  return v2;
}

uint64_t AnchorBox.prepare(geometry:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v11 - v6;
  v8 = *((_DWORD *)a1 + 2);
  type metadata accessor for AnchorValueBox(0, v4, v3, v9);
  v11 = *a1;
  v12 = v8;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(&v11, v4, v3);
  return AnchorValueBox.__allocating_init(_:)((uint64_t)v7);
}

uint64_t AnchorValueBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 144);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v2;
}

uint64_t AnchorBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t AnchorBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_deallocClassInstance();
}

uint64_t AnchorValueBox.defaultValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v0 + 136) + 24))();
}

uint64_t AnchorValueBox.convert(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  char v18;

  v4 = *a1;
  v11 = *(_OWORD *)(a1 + 1);
  v5 = a1[3];
  v6 = a1[4];
  v7 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 144);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v7, AssociatedTypeWitness);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v18 = 2;
  v12 = v4;
  v13 = v11;
  v14 = v5;
  v15 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_OWORD *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v16, &v12, AssociatedTypeWitness, AssociatedConformanceWitness);
  return outlined destroy of CoordinateSpace((uint64_t)v16);
}

uint64_t AnchorValueBox.isEqual(to:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)*v0;
  result = swift_dynamicCastClass();
  if (result)
  {
    v3 = (char *)v0 + v1[18];
    v4 = result + *(_QWORD *)(*(_QWORD *)result + 144);
    v6 = v1[16];
    v5 = v1[17];
    v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 40);
    swift_retain();
    LOBYTE(v3) = v7(v3, v4, v6, v5);
    swift_release();
    return v3 & 1;
  }
  return result;
}

uint64_t AnchorValueBox.hash(into:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v1 + 136) + 48))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144), a1);
}

uint64_t AnchorValueBox.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 144);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t AnchorValueBox.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 144);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_deallocClassInstance();
}

uint64_t Anchor.Source.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Anchor.Source.init<A>(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for ArrayAnchorBox);
}

{
  return Anchor.Source.init<A>(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for OptionalAnchorBox);
}

uint64_t ArrayAnchorBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t ArrayAnchorBox.prepare(geometry:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[4];
  int v19;
  uint64_t v20;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(*v4 + 104);
  type metadata accessor for ArrayAnchorValueBox(0, v7, a3, a4);
  v20 = v4[2];
  v18[2] = v7;
  v18[3] = *(_QWORD *)a1;
  v19 = v6;
  type metadata accessor for Anchor.Source(255, v7, v8, v9);
  v10 = type metadata accessor for Array();
  v13 = (char *)type metadata accessor for Anchor(0, v7, v11, v12);
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v10);
  v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:), (uint64_t)v18, v10, v13, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v15);
  swift_bridgeObjectRelease();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v16;
  return result;
}

uint64_t ArrayAnchorBox.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t ArrayAnchorValueBox.defaultValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v5 = *v4;
  v13 = v4[2];
  v12 = *(char **)(v5 + 128);
  type metadata accessor for Anchor(255, (uint64_t)v12, a3, a4);
  v6 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v6);
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter, (uint64_t)&v11, v6, v12, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t ArrayAnchorValueBox.convert(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  v5 = *v4;
  v6 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v6;
  v17 = *(_QWORD *)(a1 + 32);
  v15 = v4[2];
  v13 = *(char **)(v5 + 128);
  v14 = v16;
  type metadata accessor for Anchor(255, (uint64_t)v13, a3, a4);
  v7 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v7);
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.convert(to:), (uint64_t)&v12, v7, v13, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t ArrayAnchorValueBox.isEqual(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  result = swift_dynamicCastClass();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    v6 = type metadata accessor for Anchor(0, *(_QWORD *)(v1 + 128), v3, v4);
    swift_retain();
    v7 = MEMORY[0x23B7C6268](v5, v6);
    v8 = v0[2];
    if (v7 == MEMORY[0x23B7C6268](v8, v6))
    {
      v9 = type metadata accessor for Array();
      MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D8], v9);
      result = RandomAccessCollection<>.indices.getter();
      v10 = v12;
      if (v12 == v13)
      {
LABEL_8:
        swift_release();
        return 1;
      }
      else
      {
        if (v13 >= v12)
        {
          while (v10 < v13)
          {
            Array.subscript.getter();
            Array.subscript.getter();
            v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 104))(v8);
            swift_release();
            result = swift_release();
            if ((v11 & 1) == 0)
              goto LABEL_9;
            if (v13 == ++v10)
              goto LABEL_8;
          }
          __break(1u);
        }
        __break(1u);
      }
    }
    else
    {
LABEL_9:
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t ArrayAnchorValueBox.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Bool IsNativeType;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);

  v6 = v4[2];
  v7 = type metadata accessor for Anchor(0, *(_QWORD *)(*v4 + 128), a3, a4);
  v8 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B7C6298](v8, v7))
  {
    v9 = 4;
    do
    {
      v10 = v9 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v12 = *(_QWORD *)(v6 + 8 * v9);
        swift_retain();
        v13 = v9 - 3;
        if (__OFADD__(v10, 1))
          goto LABEL_9;
      }
      else
      {
        v12 = _ArrayBuffer._getElementSlowPath(_:)();
        v13 = v9 - 3;
        if (__OFADD__(v10, 1))
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      v14 = *(void (**)(uint64_t))(*(_QWORD *)v12 + 112);
      swift_retain();
      v14(a1);
      swift_release_n();
      ++v9;
    }
    while (v13 != MEMORY[0x23B7C6298](v6, v7));
  }
  return swift_bridgeObjectRelease();
}

uint64_t ArrayAnchorBox.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t vtable thunk for AnchorValueBoxBase.defaultValue.getter dispatching to ArrayAnchorValueBox.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = ArrayAnchorValueBox.defaultValue.getter(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t vtable thunk for AnchorValueBoxBase.convert(to:) dispatching to ArrayAnchorValueBox.convert(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = ArrayAnchorValueBox.convert(to:)(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t Anchor.Source.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t result;

  a3(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t OptionalAnchorBox.prepare(geometry:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[4];
  int v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(*v4 + 104);
  type metadata accessor for OptionalAnchorValueBox(0, v7, a3, a4);
  v18 = v4[2];
  v16[2] = v7;
  v16[3] = *(_QWORD *)a1;
  v17 = v6;
  type metadata accessor for Anchor.Source(255, v7, v8, v9);
  type metadata accessor for Optional();
  v12 = type metadata accessor for Anchor(0, v7, v10, v11);
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:), (uint64_t)v16, MEMORY[0x24BEE4078], v12, v13, (uint64_t)&v19);
  swift_release();
  v14 = v19;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v14;
  return result;
}

uint64_t OptionalAnchorBox.__ivar_destroyer()
{
  return swift_release();
}

uint64_t OptionalAnchorValueBox.defaultValue.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v3;
  v10 = v3[2];
  v9 = *(_QWORD *)(v5 + 128);
  type metadata accessor for Anchor(255, v9, a1, a2);
  type metadata accessor for Optional();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter, (uint64_t)&v8, MEMORY[0x24BEE4078], v9, v6, a3);
  return swift_release();
}

uint64_t OptionalAnchorValueBox.convert(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v6 = *v4;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v15 = *(_QWORD *)(a1 + 32);
  v13 = v4[2];
  v11 = *(_QWORD *)(v6 + 128);
  v12 = v14;
  type metadata accessor for Anchor(255, v11, a2, a3);
  type metadata accessor for Optional();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.convert(to:), (uint64_t)&v10, MEMORY[0x24BEE4078], v11, v8, a4);
  return swift_release();
}

uint64_t OptionalAnchorValueBox.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(result + 16);
    result = (v2 | v3) == 0;
    if (v2)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104);
      swift_retain();
      swift_retain();
      v6 = swift_retain();
      LOBYTE(v5) = v5(v6);
      swift_release();
      swift_release();
      swift_release();
      return v5 & 1;
    }
  }
  return result;
}

uint64_t OptionalAnchorValueBox.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  return result;
}

uint64_t OptionalAnchorBox.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnchorBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchorBox);
}

uint64_t type metadata accessor for ArrayAnchorBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayAnchorBox);
}

uint64_t type metadata accessor for OptionalAnchorBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalAnchorBox);
}

uint64_t base witness table accessor for Equatable in <A> Anchor<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Anchor<A>, a1, &v4);
}

ValueMetadata *type metadata accessor for AnchorGeometry()
{
  return &type metadata for AnchorGeometry;
}

uint64_t type metadata accessor for Anchor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Anchor);
}

uint64_t type metadata accessor for Anchor.Source(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Anchor.Source);
}

uint64_t type metadata accessor for AnchorBoxBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchorBoxBase);
}

uint64_t method lookup function for AnchorBoxBase()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for AnchorBoxBase()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnchorValueBoxBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchorValueBoxBase);
}

uint64_t method lookup function for AnchorValueBoxBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static AnchorProtocol.defaultAnchor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnchorProtocol.prepare(geometry:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static AnchorProtocol.valueIsEqual(lhs:rhs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static AnchorProtocol.hashValue(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t type metadata completion function for AnchorBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for AnchorValueBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AnchorValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchorValueBox);
}

uint64_t type metadata completion function for ArrayAnchorBox()
{
  return type metadata completion function for ArrayAnchorBox();
}

{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for ArrayAnchorValueBox()
{
  return type metadata completion function for ArrayAnchorValueBox();
}

{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ArrayAnchorValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayAnchorValueBox);
}

uint64_t type metadata completion function for OptionalAnchorBox()
{
  return type metadata completion function for ArrayAnchorBox();
}

uint64_t type metadata completion function for OptionalAnchorValueBox()
{
  return type metadata completion function for ArrayAnchorValueBox();
}

uint64_t type metadata accessor for OptionalAnchorValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalAnchorValueBox);
}

uint64_t partial apply for closure #1 in OptionalAnchorValueBox.convert(to:)(uint64_t *a1)
{
  return partial apply for closure #1 in OptionalAnchorValueBox.convert(to:)(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v2 = *(uint64_t **)(v1 + 24);
  v3 = *a1;
  v6 = *v2;
  v4 = *(_OWORD *)(v2 + 3);
  v7 = *(_OWORD *)(v2 + 1);
  v8 = v4;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v3 + 96))(&v6);
}

uint64_t partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter(uint64_t a1)
{
  return partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter(a1);
}

{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
}

uint64_t partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:)(a1, a2);
}

{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v4 = *(_DWORD *)(v2 + 32);
  v5 = *a1;
  swift_retain();
  v8 = *(_QWORD *)(v2 + 24);
  v9 = v4;
  v6 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v5 + 88))(&v8);
  result = swift_release();
  *a2 = v6;
  return result;
}

void _Rotation3DEffect.Data.transform.getter(CGFloat *a1@<X8>)
{
  CGFloat *v1;
  CGFloat v3;
  CGFloat v4;
  CGFloat m11;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat m12;
  CGFloat m14;
  CGFloat m21;
  CGFloat m22;
  CGFloat m24;
  CGFloat m41;
  CGFloat m42;
  CGFloat m44;
  CGFloat m33;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CATransform3D v37;
  CATransform3D b;
  CATransform3D a;
  double v40[9];

  v34 = v1[1];
  v35 = *v1;
  v32 = v1[3];
  v33 = v1[2];
  v30 = v1[5];
  v31 = v1[4];
  v3 = v1[6];
  v29 = v3;
  v36 = v1[8];
  v4 = *(double *)(MEMORY[0x24BDE5598] + 8);
  v6 = *(double *)(MEMORY[0x24BDE5598] + 16);
  v7 = *(double *)(MEMORY[0x24BDE5598] + 24);
  v9 = *(double *)(MEMORY[0x24BDE5598] + 32);
  v8 = *(double *)(MEMORY[0x24BDE5598] + 40);
  v10 = *(double *)(MEMORY[0x24BDE5598] + 48);
  v11 = *(double *)(MEMORY[0x24BDE5598] + 56);
  v22 = *(double *)(MEMORY[0x24BDE5598] + 72);
  v23 = *(double *)(MEMORY[0x24BDE5598] + 64);
  v26 = *(double *)(MEMORY[0x24BDE5598] + 104);
  v27 = *(double *)(MEMORY[0x24BDE5598] + 96);
  v24 = *(double *)(MEMORY[0x24BDE5598] + 112);
  v25 = *(double *)(MEMORY[0x24BDE5598] + 120);
  v28 = -1.0 / v1[7];
  a.m11 = *(CGFloat *)MEMORY[0x24BDE5598];
  m11 = a.m11;
  a.m12 = v4;
  a.m13 = v6;
  a.m14 = v7;
  a.m21 = v9;
  a.m22 = v8;
  a.m23 = v10;
  a.m24 = v11;
  a.m31 = v23;
  a.m32 = v22;
  *(_OWORD *)&a.m33 = *(_OWORD *)(MEMORY[0x24BDE5598] + 80);
  m33 = a.m33;
  a.m41 = v27;
  a.m42 = v26;
  a.m43 = v24;
  a.m44 = v25;
  CATransform3DTranslate(&b, &a, v31, v30, v3);
  a.m11 = m11;
  a.m12 = v4;
  a.m13 = v6;
  a.m14 = v7;
  a.m21 = v9;
  a.m22 = v8;
  a.m23 = v10;
  a.m24 = v11;
  a.m31 = v23;
  a.m32 = v22;
  a.m33 = m33;
  a.m34 = v28;
  a.m41 = v27;
  a.m42 = v26;
  a.m43 = v24;
  a.m44 = v25;
  CATransform3DConcat(&v37, &a, &b);
  a = v37;
  CATransform3DRotate(&b, &a, v35, v34, v33, v32);
  a = b;
  CATransform3DTranslate(&b, &a, -v31, -v30, -v29);
  v12 = b.m11;
  m12 = b.m12;
  m14 = b.m14;
  m21 = b.m21;
  m22 = b.m22;
  m24 = b.m24;
  m41 = b.m41;
  m42 = b.m42;
  m44 = b.m44;
  a.m11 = b.m11;
  a.m12 = b.m12;
  a.m13 = b.m14;
  a.m14 = b.m21;
  a.m21 = b.m22;
  a.m22 = b.m24;
  a.m23 = b.m41;
  a.m24 = b.m42;
  a.m31 = b.m44;
  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) != 0)
  {
    b.m11 = -1.0;
    memset(&b.m12, 0, 24);
    *(_OWORD *)&b.m21 = xmmword_235281560;
    b.m23 = v36;
    *(_OWORD *)&b.m24 = xmmword_23528A280;
    ProjectionTransform.concatenating(_:)(&a.m11, v40);
    ProjectionTransform.concatenating(_:)(&b.m11, &v37.m11);
    v12 = v37.m11;
    m12 = v37.m12;
    m14 = v37.m13;
    m21 = v37.m14;
    m22 = v37.m21;
    m24 = v37.m22;
    m41 = v37.m23;
    m42 = v37.m24;
    m44 = v37.m31;
  }
  *a1 = v12;
  a1[1] = m12;
  a1[2] = m14;
  a1[3] = m21;
  a1[4] = m22;
  a1[5] = m24;
  a1[6] = m41;
  a1[7] = m42;
  a1[8] = m44;
}

double _Rotation3DEffect.angle.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void _Rotation3DEffect.angle.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_Rotation3DEffect.angle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.axis.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void _Rotation3DEffect.axis.setter(double a1, double a2, double a3)
{
  double *v3;

  v3[1] = a1;
  v3[2] = a2;
  v3[3] = a3;
}

uint64_t (*_Rotation3DEffect.axis.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.anchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void _Rotation3DEffect.anchor.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*_Rotation3DEffect.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.anchorZ.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void _Rotation3DEffect.anchorZ.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*_Rotation3DEffect.anchorZ.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.perspective.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void _Rotation3DEffect.perspective.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*_Rotation3DEffect.perspective.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.angle.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void _Rotation3DEffect.Data.angle.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_Rotation3DEffect.Data.angle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.axis.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void _Rotation3DEffect.Data.axis.setter(double a1, double a2, double a3)
{
  double *v3;

  v3[1] = a1;
  v3[2] = a2;
  v3[3] = a3;
}

uint64_t (*_Rotation3DEffect.Data.axis.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.anchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void _Rotation3DEffect.Data.anchor.setter(double a1, double a2, double a3)
{
  double *v3;

  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
}

uint64_t (*_Rotation3DEffect.Data.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.perspective.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void _Rotation3DEffect.Data.perspective.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*_Rotation3DEffect.Data.perspective.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.flipWidth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void _Rotation3DEffect.Data.flipWidth.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*_Rotation3DEffect.Data.flipWidth.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0x7FF8000000000000;
  return result;
}

double _Rotation3DEffect.Data.init(_:size:layoutDirection:)@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>, double a5@<D1>)
{
  int v5;
  double v6;
  uint64_t v7;
  double v8;
  __int128 v9;
  double v10;
  double result;

  v5 = *a2;
  if (a4.f64[0] > a5)
    v6 = a4.f64[0];
  else
    v6 = a5;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(double *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v9;
  v10 = NAN;
  if (v5)
    v10 = a4.f64[0];
  a4.f64[1] = a5;
  *(float64x2_t *)(a3 + 32) = vmulq_f64(*(float64x2_t *)(a1 + 32), a4);
  result = v6 / v8;
  *(_QWORD *)(a3 + 48) = v7;
  *(double *)(a3 + 56) = v6 / v8;
  *(double *)(a3 + 64) = v10;
  return result;
}

__n128 _Rotation3DEffect.effectValue(size:)@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __n128 result;
  _OWORD v4[4];
  uint64_t v5;

  _Rotation3DEffect.Data.transform.getter((CGFloat *)v4);
  v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 64) = v5;
  result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

float64_t _Rotation3DEffect.animatableData.getter@<D0>(float64x2_t *a1@<X8>)
{
  float64x2_t *v1;
  float64_t result;
  float64x2_t v3;
  float64_t v4;
  float64x2_t v5;

  result = v1[3].f64[0];
  v3 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v4 = v1[3].f64[1] * 128.0;
  v5 = vmulq_f64(v1[1], v3);
  *a1 = vmulq_f64(*v1, v3);
  a1[1] = v5;
  a1[2] = vmulq_f64(v1[2], v3);
  a1[3].f64[0] = result;
  a1[3].f64[1] = v4;
  return result;
}

float64_t _Rotation3DEffect.animatableData.setter(float64x2_t *a1)
{
  float64x2_t *v1;
  float64_t result;
  double v3;
  float64x2_t v4;
  float64x2_t v5;

  result = a1[3].f64[0];
  v3 = a1[3].f64[1];
  v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v5 = vmulq_f64(a1[1], v4);
  *v1 = vmulq_f64(*a1, v4);
  v1[1] = v5;
  v1[2] = vmulq_f64(a1[2], v4);
  v1[3].f64[0] = result;
  v1[3].f64[1] = v3 * 0.0078125;
  return result;
}

double (*_Rotation3DEffect.animatableData.modify(float64x2_t **a1))(uint64_t *a1)
{
  float64_t v1;
  float64x2_t *v3;
  float64x2_t v4;
  float64_t v5;
  double v6;
  float64x2_t v7;

  v3 = (float64x2_t *)malloc(0x48uLL);
  *a1 = v3;
  v3[4].f64[0] = v1;
  v4 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v5 = *(double *)(*(_QWORD *)&v1 + 48);
  v6 = *(double *)(*(_QWORD *)&v1 + 56) * 128.0;
  v7 = vmulq_f64(*(float64x2_t *)(*(_QWORD *)&v1 + 16), v4);
  *v3 = vmulq_f64(**(float64x2_t **)&v1, v4);
  v3[1] = v7;
  v3[2] = vmulq_f64(*(float64x2_t *)(*(_QWORD *)&v1 + 32), v4);
  v3[3].f64[0] = v5;
  v3[3].f64[1] = v6;
  return _Rotation3DEffect.animatableData.modify;
}

double _Rotation3DEffect.animatableData.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  double result;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v5 = *(double *)(v1 + 56) * 0.0078125;
  v6 = vmulq_f64(*(float64x2_t *)v1, v4);
  v7 = vmulq_f64(*(float64x2_t *)(v1 + 16), v4);
  v8 = vmulq_f64(*(float64x2_t *)(v1 + 32), v4);
  *(float64x2_t *)v2 = v6;
  *(float64x2_t *)(v2 + 16) = v7;
  *(float64x2_t *)(v2 + 32) = v8;
  *(_QWORD *)(v2 + 48) = v3;
  *(double *)(v2 + 56) = v5;
  free((void *)v1);
  return result;
}

BOOL static _Rotation3DEffect.== infix(_:_:)(double *a1, double *a2)
{
  BOOL v2;
  BOOL v3;

  if (*a1 == *a2
    && (a1[1] == a2[1] ? (v2 = a1[2] == a2[2]) : (v2 = 0),
        v2 ? (v3 = a1[3] == a2[3]) : (v3 = 0),
        v3 && a1[4] == a2[4] && a1[5] == a2[5] && a1[6] == a2[6]))
  {
    return a1[7] == a2[7];
  }
  else
  {
    return 0;
  }
}

__n128 protocol witness for GeometryEffect.effectValue(size:) in conformance _Rotation3DEffect@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __n128 result;
  _OWORD v4[4];
  uint64_t v5;

  _Rotation3DEffect.Data.transform.getter((CGFloat *)v4);
  v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 64) = v5;
  result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _Rotation3DEffect(float64x2_t *a1, float64x2_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0]&& a1[2].f64[1] == a2[2].f64[1]&& a1[3].f64[0] == a2[3].f64[0])
  {
    return a1[3].f64[1] == a2[3].f64[1];
  }
  return result;
}

uint64_t protocol witness for static GeometryEffectProvider.resolve(effect:origin:size:layoutDirection:) in conformance _Rotation3DEffect@<X0>(__int128 *a1@<X0>, unsigned __int8 *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v13;
  uint64_t result;
  double v15;
  __int128 v16;

  v16 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 6);
  v9 = *a2;
  v10 = *((double *)a1 + 4) * a4;
  v11 = *((double *)a1 + 5) * a5;
  if (a4 > a5)
    a5 = a4;
  v13 = a5 / *((double *)a1 + 7);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = v16;
  v15 = NAN;
  if (v9)
    v15 = a4;
  *(_QWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 40) = v7;
  *(double *)(result + 48) = v10;
  *(double *)(result + 56) = v11;
  *(_QWORD *)(result + 64) = v8;
  *(double *)(result + 72) = v13;
  *(double *)(result + 80) = v15;
  *(_BYTE *)(result + 88) = 3;
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 8;
  return result;
}

float64_t protocol witness for Animatable.animatableData.getter in conformance _Rotation3DEffect@<D0>(float64x2_t *a1@<X8>)
{
  float64x2_t *v1;
  float64_t result;
  float64x2_t v3;
  float64_t v4;
  float64x2_t v5;

  result = v1[3].f64[0];
  v3 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v4 = v1[3].f64[1] * 128.0;
  v5 = vmulq_f64(v1[1], v3);
  *a1 = vmulq_f64(*v1, v3);
  a1[1] = v5;
  a1[2] = vmulq_f64(v1[2], v3);
  a1[3].f64[0] = result;
  a1[3].f64[1] = v4;
  return result;
}

float64_t protocol witness for Animatable.animatableData.setter in conformance _Rotation3DEffect(float64x2_t *a1)
{
  float64x2_t *v1;
  float64_t result;
  double v3;
  float64x2_t v4;
  float64x2_t v5;

  result = a1[3].f64[0];
  v3 = a1[3].f64[1];
  v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v5 = vmulq_f64(a1[1], v4);
  *v1 = vmulq_f64(*a1, v4);
  v1[1] = v5;
  v1[2] = vmulq_f64(a1[2], v4);
  v1[3].f64[0] = result;
  v1[3].f64[1] = v3 * 0.0078125;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance _Rotation3DEffect(float64x2_t **a1))(uint64_t *a1)
{
  float64_t v1;
  float64x2_t *v3;
  float64x2_t v4;
  float64_t v5;
  double v6;
  float64x2_t v7;

  v3 = (float64x2_t *)malloc(0x48uLL);
  *a1 = v3;
  v3[4].f64[0] = v1;
  v4 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v5 = *(double *)(*(_QWORD *)&v1 + 48);
  v6 = *(double *)(*(_QWORD *)&v1 + 56) * 128.0;
  v7 = vmulq_f64(*(float64x2_t *)(*(_QWORD *)&v1 + 16), v4);
  *v3 = vmulq_f64(**(float64x2_t **)&v1, v4);
  v3[1] = v7;
  v3[2] = vmulq_f64(*(float64x2_t *)(*(_QWORD *)&v1 + 32), v4);
  v3[3].f64[0] = v5;
  v3[3].f64[1] = v6;
  return _Rotation3DEffect.animatableData.modify;
}

_QWORD *_Rotation3DEffect.Data.encode(to:)(_QWORD *result)
{
  double *v1;
  double *v2;
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  double v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  Swift::UInt v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  double v40;

  v2 = v1;
  v3 = result;
  v4 = *v2;
  v5 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = v2[6];
  v40 = v2[7];
  v11 = v2[8];
  if (*v2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    v12 = v3[1];
    result = (_QWORD *)(v12 + 8);
    if (__OFADD__(v12, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v12) = v4;
      goto LABEL_5;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v4;
  }
LABEL_5:
  v13 = v5;
  if (v13 == 0.0)
    goto LABEL_9;
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  v14 = v3[1];
  result = (_QWORD *)(v14 + 4);
  if (__OFADD__(v14, 4))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(float *)(*v3 + v14) = v13;
    goto LABEL_9;
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(float *)result = v13;
LABEL_9:
  v15 = v7;
  if (v15 == 0.0)
    goto LABEL_13;
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  v16 = v3[1];
  result = (_QWORD *)(v16 + 4);
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(float *)(*v3 + v16) = v15;
    goto LABEL_13;
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(float *)result = v15;
LABEL_13:
  v17 = v6;
  if (v17 == 0.0)
    goto LABEL_17;
  ProtobufEncoder.encodeVarint(_:)(0x25uLL);
  v18 = v3[1];
  result = (_QWORD *)(v18 + 4);
  if (__OFADD__(v18, 4))
  {
    __break(1u);
LABEL_82:
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(float *)result = v17;
    if (v9 == 0.0)
      goto LABEL_28;
    goto LABEL_18;
  }
  if (v3[2] < (uint64_t)result)
    goto LABEL_82;
  v3[1] = result;
  *(float *)(*v3 + v18) = v17;
LABEL_17:
  if (v9 == 0.0)
    goto LABEL_28;
LABEL_18:
  v19 = fabs(v9);
  if (v19 >= 65536.0)
    v20 = 41;
  else
    v20 = 45;
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    v22 = v3[1];
    result = (_QWORD *)(v22 + 8);
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v22) = v9;
      goto LABEL_28;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v9;
  }
  else
  {
    v21 = v3[1];
    result = (_QWORD *)(v21 + 4);
    if (__OFADD__(v21, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v19 = v9;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v21) = LODWORD(v19);
        goto LABEL_28;
      }
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)result = LODWORD(v19);
  }
LABEL_28:
  if (v8 == 0.0)
    goto LABEL_39;
  v23 = fabs(v8);
  if (v23 >= 65536.0)
    v24 = 49;
  else
    v24 = 53;
  ProtobufEncoder.encodeVarint(_:)(v24);
  if (v23 >= 65536.0)
  {
    v26 = v3[1];
    result = (_QWORD *)(v26 + 8);
    if (__OFADD__(v26, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v26) = v8;
      goto LABEL_39;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v8;
  }
  else
  {
    v25 = v3[1];
    result = (_QWORD *)(v25 + 4);
    if (__OFADD__(v25, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v23 = v8;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v25) = LODWORD(v23);
        goto LABEL_39;
      }
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)result = LODWORD(v23);
  }
LABEL_39:
  if (v10 == 0.0)
    goto LABEL_50;
  v27 = fabs(v10);
  if (v27 >= 65536.0)
    v28 = 57;
  else
    v28 = 61;
  ProtobufEncoder.encodeVarint(_:)(v28);
  if (v27 >= 65536.0)
  {
    v30 = v3[1];
    result = (_QWORD *)(v30 + 8);
    if (__OFADD__(v30, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v30) = v10;
      goto LABEL_50;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v10;
  }
  else
  {
    v29 = v3[1];
    result = (_QWORD *)(v29 + 4);
    if (__OFADD__(v29, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v27 = v10;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v29) = LODWORD(v27);
        goto LABEL_50;
      }
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)result = LODWORD(v27);
  }
LABEL_50:
  if (v40 != 0.0)
  {
    v31 = fabs(v40);
    if (v31 >= 65536.0)
      v32 = 65;
    else
      v32 = 69;
    ProtobufEncoder.encodeVarint(_:)(v32);
    if (v31 >= 65536.0)
    {
      v34 = v3[1];
      result = (_QWORD *)(v34 + 8);
      if (__OFADD__(v34, 8))
      {
        __break(1u);
      }
      else if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(double *)(*v3 + v34) = v40;
        goto LABEL_61;
      }
      result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(double *)result = v40;
      goto LABEL_61;
    }
    v33 = v3[1];
    result = (_QWORD *)(v33 + 4);
    if (__OFADD__(v33, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v31 = v40;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v33) = LODWORD(v31);
        goto LABEL_61;
      }
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)result = LODWORD(v31);
  }
LABEL_61:
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0 || v11 == 0.0)
    return result;
  v35 = fabs(v11);
  if (v35 >= 65536.0)
    v36 = 73;
  else
    v36 = 77;
  ProtobufEncoder.encodeVarint(_:)(v36);
  if (v35 >= 65536.0)
  {
    v38 = v3[1];
    v39 = v38 + 8;
    if (__OFADD__(v38, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v39)
    {
      v3[1] = v39;
      result = (_QWORD *)(*v3 + v38);
LABEL_73:
      *(double *)result = v11;
      return result;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v39);
    goto LABEL_73;
  }
  v37 = v3[1];
  result = (_QWORD *)(v37 + 4);
  if (__OFADD__(v37, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&v11 = v11;
    if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(_DWORD *)(*v3 + v37) = LODWORD(v11);
      return result;
    }
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(_DWORD *)result = LODWORD(v11);
  return result;
}

unint64_t _Rotation3DEffect.Data.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  float *v18;
  float *v19;
  float *v20;
  unint64_t v21;
  double *v22;
  unint64_t v23;
  double *v24;
  unint64_t v25;
  double *v26;
  unint64_t v27;
  double *v28;
  unint64_t v29;
  double *v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  float *v36;
  float v37;
  float *v38;
  float v39;
  float *v40;
  float v41;
  float *v42;
  float v43;
  float *v44;
  float v45;
  double v46;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v46 = 0.0;
    v7 = NAN;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v15 = v3[4];
        if (v5 < v15)
          goto LABEL_15;
        if (v15 < v5)
          goto LABEL_122;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_122:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      switch(result >> 3)
      {
        case 1uLL:
          v16 = result & 7;
          switch(v16)
          {
            case 5uLL:
              v34 = (float *)v3[1];
              v5 = (unint64_t)(v34 + 1);
              if (v6 < (unint64_t)(v34 + 1))
                goto LABEL_122;
              v35 = *v34;
              v3[1] = v5;
              v14 = v35;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_127;
              v17 = (double *)v3[1];
              if (v6 < (unint64_t)v17 + result)
                goto LABEL_122;
              v3[3] = 9;
              v3[4] = (char *)v17 + result;
              break;
            case 1uLL:
              v17 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1))
            goto LABEL_122;
          v14 = *v17;
          goto LABEL_7;
        case 2uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
              JUMPOUT(0x234CA13C8);
            }
            v18 = (float *)v3[1];
            if (v6 < (unint64_t)v18 + result)
              goto LABEL_122;
            v3[3] = 21;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_122;
            v18 = (float *)v3[1];
          }
          v5 = (unint64_t)(v18 + 1);
          if (v6 < (unint64_t)(v18 + 1))
            goto LABEL_122;
          v31 = *v18;
          v3[1] = v5;
          v13 = v31;
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_125;
            v19 = (float *)v3[1];
            if (v6 < (unint64_t)v19 + result)
              goto LABEL_122;
            v3[3] = 29;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_122;
            v19 = (float *)v3[1];
          }
          v5 = (unint64_t)(v19 + 1);
          if (v6 < (unint64_t)(v19 + 1))
            goto LABEL_122;
          v32 = *v19;
          v3[1] = v5;
          v12 = v32;
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_126;
            v20 = (float *)v3[1];
            if (v6 < (unint64_t)v20 + result)
              goto LABEL_122;
            v3[3] = 37;
            v3[4] = (char *)v20 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_122;
            v20 = (float *)v3[1];
          }
          v5 = (unint64_t)(v20 + 1);
          if (v6 < (unint64_t)(v20 + 1))
            goto LABEL_122;
          v33 = *v20;
          v3[1] = v5;
          v11 = v33;
          break;
        case 5uLL:
          v21 = result & 7;
          switch(v21)
          {
            case 5uLL:
              v36 = (float *)v3[1];
              v5 = (unint64_t)(v36 + 1);
              if (v6 < (unint64_t)(v36 + 1))
                goto LABEL_122;
              v37 = *v36;
              v3[1] = v5;
              v10 = v37;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_128;
              v22 = (double *)v3[1];
              if (v6 < (unint64_t)v22 + result)
                goto LABEL_122;
              v3[3] = 41;
              v3[4] = (char *)v22 + result;
              break;
            case 1uLL:
              v22 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          v5 = (unint64_t)(v22 + 1);
          if (v6 < (unint64_t)(v22 + 1))
            goto LABEL_122;
          v10 = *v22;
          goto LABEL_7;
        case 6uLL:
          v23 = result & 7;
          switch(v23)
          {
            case 5uLL:
              v38 = (float *)v3[1];
              v5 = (unint64_t)(v38 + 1);
              if (v6 < (unint64_t)(v38 + 1))
                goto LABEL_122;
              v39 = *v38;
              v3[1] = v5;
              v9 = v39;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_129;
              v24 = (double *)v3[1];
              if (v6 < (unint64_t)v24 + result)
                goto LABEL_122;
              v3[3] = 49;
              v3[4] = (char *)v24 + result;
              break;
            case 1uLL:
              v24 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          v5 = (unint64_t)(v24 + 1);
          if (v6 < (unint64_t)(v24 + 1))
            goto LABEL_122;
          v9 = *v24;
          goto LABEL_7;
        case 7uLL:
          v25 = result & 7;
          switch(v25)
          {
            case 5uLL:
              v40 = (float *)v3[1];
              v5 = (unint64_t)(v40 + 1);
              if (v6 < (unint64_t)(v40 + 1))
                goto LABEL_122;
              v41 = *v40;
              v3[1] = v5;
              v8 = v41;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_130;
              v26 = (double *)v3[1];
              if (v6 < (unint64_t)v26 + result)
                goto LABEL_122;
              v3[3] = 57;
              v3[4] = (char *)v26 + result;
              break;
            case 1uLL:
              v26 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          v5 = (unint64_t)(v26 + 1);
          if (v6 < (unint64_t)(v26 + 1))
            goto LABEL_122;
          v8 = *v26;
          goto LABEL_7;
        case 8uLL:
          v27 = result & 7;
          switch(v27)
          {
            case 5uLL:
              v42 = (float *)v3[1];
              v5 = (unint64_t)(v42 + 1);
              if (v6 < (unint64_t)(v42 + 1))
                goto LABEL_122;
              v43 = *v42;
              v3[1] = v5;
              v46 = v43;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_131;
              v28 = (double *)v3[1];
              if (v6 < (unint64_t)v28 + result)
                goto LABEL_122;
              v3[3] = 65;
              v3[4] = (char *)v28 + result;
              break;
            case 1uLL:
              v28 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          v5 = (unint64_t)(v28 + 1);
          if (v6 < (unint64_t)(v28 + 1))
            goto LABEL_122;
          v46 = *v28;
          goto LABEL_7;
        case 9uLL:
          v29 = result & 7;
          if (v29 == 5)
          {
            v44 = (float *)v3[1];
            v5 = (unint64_t)(v44 + 1);
            if (v6 < (unint64_t)(v44 + 1))
              goto LABEL_122;
            v45 = *v44;
            v3[1] = v5;
            v7 = v45;
          }
          else
          {
            if (v29 == 2)
            {
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_132;
              v30 = (double *)v3[1];
              if (v6 < (unint64_t)v30 + result)
                goto LABEL_122;
              v3[3] = 73;
              v3[4] = (char *)v30 + result;
            }
            else
            {
              if (v29 != 1)
                goto LABEL_122;
              v30 = (double *)v3[1];
            }
            v5 = (unint64_t)(v30 + 1);
            if (v6 < (unint64_t)(v30 + 1))
              goto LABEL_122;
            v7 = *v30;
LABEL_7:
            v3[1] = v5;
          }
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_133;
              v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5)
                goto LABEL_7;
              goto LABEL_122;
            case 5uLL:
              v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_122;
          }
      }
LABEL_8:
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v46 = 0.0;
  v8 = 0.0;
  v7 = NAN;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
LABEL_4:
  v3[3] = 0;
  *a2 = v14;
  a2[1] = v13;
  a2[2] = v12;
  a2[3] = v11;
  a2[4] = v10;
  a2[5] = v9;
  a2[6] = v8;
  a2[7] = v46;
  a2[8] = v7;
  return result;
}

_QWORD *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _Rotation3DEffect.Data(_QWORD *a1)
{
  return _Rotation3DEffect.Data.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _Rotation3DEffect.Data@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return _Rotation3DEffect.Data.init(from:)(a1, a2);
}

unint64_t instantiation function for generic protocol witness table for _Rotation3DEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _Rotation3DEffect()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>);
}

float64_t sub_234CA1478@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64_t result;
  float64x2_t v3;
  float64_t v4;
  float64x2_t v5;

  result = a1[3].f64[0];
  v3 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v4 = a1[3].f64[1] * 128.0;
  v5 = vmulq_f64(a1[1], v3);
  *a2 = vmulq_f64(*a1, v3);
  a2[1] = v5;
  a2[2] = vmulq_f64(a1[2], v3);
  a2[3].f64[0] = result;
  a2[3].f64[1] = v4;
  return result;
}

float64_t sub_234CA14B0(float64x2_t *a1, float64x2_t *a2)
{
  float64_t result;
  double v3;
  float64x2_t v4;
  float64x2_t v5;

  result = a1[3].f64[0];
  v3 = a1[3].f64[1];
  v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v5 = vmulq_f64(a1[1], v4);
  *a2 = vmulq_f64(*a1, v4);
  a2[1] = v5;
  a2[2] = vmulq_f64(a1[2], v4);
  a2[3].f64[0] = result;
  a2[3].f64[1] = v3 * 0.0078125;
  return result;
}

ValueMetadata *type metadata accessor for _Rotation3DEffect()
{
  return &type metadata for _Rotation3DEffect;
}

uint64_t getEnumTagSinglePayload for _Rotation3DEffect.Data(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _Rotation3DEffect.Data(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _Rotation3DEffect.Data()
{
  return &type metadata for _Rotation3DEffect.Data;
}

uint64_t sub_234CA1564()
{
  return swift_deallocObject();
}

void static LayoutDirectionBehavior.mirrors.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL LayoutDirectionBehavior.shouldFlip(in:)(void (*a1)(uint64_t *__return_ptr))
{
  unsigned __int8 *v1;
  int v2;
  _BOOL8 result;
  uint64_t v4;

  v2 = *v1;
  result = 0;
  if (v2 != 2)
  {
    a1(&v4);
    if (v4 != 2 && ((v4 ^ v2) & 1) == 0)
      return 1;
  }
  return result;
}

void LayoutDirectionBehavior.hash(into:)()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  if (v1 == 2)
  {
    v2 = 0;
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
}

BOOL static LayoutDirectionBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL8 result;

  v2 = *a1;
  v3 = *a2;
  result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2)
    return ((v3 ^ v2) & 1) == 0;
  return result;
}

Swift::Int LayoutDirectionBehavior.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = 0;
  if (v1 != 2)
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LayoutDirectionBehavior()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = 0;
  if (v1 != 2)
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LayoutDirectionBehavior()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  if (v1 == 2)
  {
    v2 = 0;
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LayoutDirectionBehavior()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  Hasher.init(_seed:)();
  v1 = *v0;
  if (v1 == 2)
  {
    v2 = 0;
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior;
  if (!lazy protocol witness table cache variable for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutDirectionBehavior, &type metadata for LayoutDirectionBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LayoutDirectionBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL8 result;

  v2 = *a1;
  v3 = *a2;
  result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2)
    return ((v3 ^ v2) & 1) == 0;
  return result;
}

uint64_t getEnumTagSinglePayload for LayoutDirectionBehavior(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = v6 - 2;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234CA1888 + 4 * asc_2352943A0[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for LayoutDirectionBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234CA1930 + 4 * byte_2352943AA[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234CA1964 + 4 * byte_2352943A5[v5]))();
}

uint64_t sub_234CA1964(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CA196C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CA1974);
  return result;
}

uint64_t sub_234CA1980(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CA1988);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234CA198C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CA1994(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for LayoutDirectionBehavior(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 2)
    return v1 - 1;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for LayoutDirectionBehavior(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for LayoutDirectionBehavior()
{
  return &type metadata for LayoutDirectionBehavior;
}

uint64_t specialized RandomAccessCollection<>.indices.getter()
{
  uint64_t *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = *v0 + 48;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v1, v3), (v5 & 1) != 0))
  {
    swift_endAccess();
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v4 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
      if ((v6 & 1) != 0)
      {
        swift_endAccess();
        return 0;
      }
    }
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  Swift::UInt64 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::UInt64 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt64 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t result;
  _BYTE v44[24];
  _QWORD v45[7];

  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)&v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)&v44[-v8];
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)&v44[-v15];
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
  outlined init with copy of TypesettingLanguage((uint64_t)v9, (uint64_t)v13, type metadata accessor for Text.Effect.BaseContent);
  v18 = *v9;
  v17 = v9[1];
  v19 = v9[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v18 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
    if ((v20 & 1) != 0)
    {
      swift_endAccess();
      outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
      *(_QWORD *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.BaseContent>((uint64_t)v13, (uint64_t)v16);
      v21 = *(int *)(v11 + 36);
      while (1)
      {
        v22 = *(uint64_t *)((char *)v16 + v21);
        v23 = *v16;
        v24 = v16[1];
        v25 = v16[2];
        swift_beginAccess();
        v26 = *(_QWORD *)(v23 + 48);
        if (!*(_QWORD *)(v26 + 16))
          break;
        v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        if ((v28 & 1) == 0)
          break;
        v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        v30 = *(_QWORD *)(v29 + 16);
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          break;
        }
        if (v30 == v22)
          goto LABEL_19;
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v23, v24, v25, v22, v45);
        outlined init with copy of TypesettingLanguage((uint64_t)v16, (uint64_t)v6, type metadata accessor for Text.Effect.BaseContent);
        v32 = *v6;
        v31 = v6[1];
        v33 = v6[2];
        v34 = *v6 + 48;
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v32 + 48) + 16))
          goto LABEL_26;
        specialized __RawDictionaryStorage.find<A>(_:)(v31, v33);
        if ((v35 & 1) == 0)
          goto LABEL_26;
        swift_endAccess();
        swift_beginAccess();
        v36 = *(_QWORD *)v34;
        if (!*(_QWORD *)(*(_QWORD *)v34 + 16))
          goto LABEL_27;
        v37 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v33);
        if ((v38 & 1) == 0)
          goto LABEL_27;
        v39 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 16 * v37);
        swift_endAccess();
        if (v22 >= *(_QWORD *)(v39 + 16))
          goto LABEL_21;
        *(uint64_t *)((char *)v16 + v21) = v22 + 1;
        outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for Text.Effect.BaseContent);
        v40 = v45[6];
        v41 = *(_QWORD *)(*(_QWORD *)(v45[3] + 96) + 16);
        outlined release of Text.Effect.BaseFragment((uint64_t)v45);
        if (__OFADD__(v40, v41))
          goto LABEL_22;
        if (v40 + v41 < v40)
          goto LABEL_23;
        if (__OFSUB__(v40 + v41, v40))
          goto LABEL_24;
        v42 = __OFADD__(a1, v41);
        a1 += v41;
        if (v42)
        {
          __break(1u);
LABEL_19:
          outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_26:
      swift_endAccess();
      __break(1u);
LABEL_27:
      swift_endAccess();
      __break(1u);
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  Swift::UInt64 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::UInt64 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt64 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t result;
  _BYTE v43[24];
  _QWORD v44[7];

  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)&v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)&v43[-v8];
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)&v43[-v15];
  outlined init with copy of Text.Effect.BaseContent(a2, (uint64_t)v9);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v9, (uint64_t)v13);
  v18 = *v9;
  v17 = v9[1];
  v19 = v9[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v18 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
    if ((v20 & 1) != 0)
    {
      swift_endAccess();
      outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
      *(_QWORD *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.BaseContent>((uint64_t)v13, (uint64_t)v16);
      v21 = *(int *)(v11 + 36);
      while (1)
      {
        v22 = *(uint64_t *)((char *)v16 + v21);
        v23 = *v16;
        v24 = v16[1];
        v25 = v16[2];
        swift_beginAccess();
        v26 = *(_QWORD *)(v23 + 48);
        if (!*(_QWORD *)(v26 + 16))
          break;
        v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        if ((v28 & 1) == 0)
          break;
        v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        v30 = *(_QWORD *)(v29 + 16);
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_18:
          __break(1u);
          break;
        }
        if (v30 == v22)
          goto LABEL_16;
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v23, v24, v25, v22, v44);
        outlined init with copy of Text.Effect.BaseContent((uint64_t)v16, (uint64_t)v6);
        v32 = *v6;
        v31 = v6[1];
        v33 = v6[2];
        v34 = *v6 + 48;
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v32 + 48) + 16))
          goto LABEL_20;
        specialized __RawDictionaryStorage.find<A>(_:)(v31, v33);
        if ((v35 & 1) == 0)
          goto LABEL_20;
        swift_endAccess();
        swift_beginAccess();
        v36 = *(_QWORD *)v34;
        if (!*(_QWORD *)(*(_QWORD *)v34 + 16))
          goto LABEL_21;
        v37 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v33);
        if ((v38 & 1) == 0)
          goto LABEL_21;
        v39 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 16 * v37);
        swift_endAccess();
        if (v22 >= *(_QWORD *)(v39 + 16))
          goto LABEL_18;
        *(uint64_t *)((char *)v16 + v21) = v22 + 1;
        outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for Text.Effect.BaseContent);
        v40 = *(_QWORD *)(v44[3] + 112);
        outlined release of Text.Effect.BaseFragment((uint64_t)v44);
        v41 = __OFADD__(a1, v40);
        a1 += v40;
        if (v41)
        {
          __break(1u);
LABEL_16:
          outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_endAccess();
      __break(1u);
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  Swift::UInt64 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  Swift::UInt64 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t result;
  _QWORD v49[7];
  uint64_t *v50;

  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x24BDAC7A8](v4);
  v50 = (_QWORD *)((char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 24);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_QWORD *)((char *)v49 - v7 + 24);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>();
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (_QWORD *)((char *)v49 - v14 + 24);
  outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>(a2, (uint64_t)v8);
  outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8, (uint64_t)v12);
  v17 = *v8;
  v16 = v8[1];
  v18 = v8[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
    if ((v19 & 1) != 0)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8);
      *(_QWORD *)&v12[*(int *)(v10 + 36)] = 0;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
      v20 = *(int *)(v10 + 36);
      while (1)
      {
        v21 = v20;
        v22 = *(uint64_t *)((char *)v15 + v20);
        v24 = *v15;
        v23 = v15[1];
        v25 = v15[2];
        swift_beginAccess();
        v26 = *(_QWORD *)(v24 + 48);
        if (!*(_QWORD *)(v26 + 16))
          break;
        swift_retain();
        v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
        if ((v28 & 1) == 0)
          goto LABEL_25;
        v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        v30 = *(_QWORD *)(v29 + 16);
        swift_bridgeObjectRelease();
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          swift_release();
          break;
        }
        if (v30 == v22)
          goto LABEL_19;
        swift_retain();
        v31 = swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v23, v25, v22, v49);
        v32 = v50;
        outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v15, (uint64_t)v50);
        v33 = *v32;
        v34 = v32[1];
        v35 = v32[2];
        v36 = *v32 + 48;
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v33 + 48) + 16))
          goto LABEL_28;
        swift_retain();
        specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        if ((v37 & 1) == 0)
          goto LABEL_27;
        swift_endAccess();
        swift_release();
        swift_beginAccess();
        v38 = *(_QWORD *)v36;
        if (!*(_QWORD *)(*(_QWORD *)v36 + 16))
          goto LABEL_30;
        swift_retain();
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        if ((v40 & 1) == 0)
          goto LABEL_29;
        v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 16 * v39);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        v42 = *(_QWORD *)(v41 + 16);
        swift_bridgeObjectRelease();
        if (v22 >= v42)
          goto LABEL_21;
        v43 = v22 + 1;
        outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v50);
        v20 = v21;
        *(uint64_t *)((char *)v15 + v21) = v43;
        v44 = v49[6];
        v45 = *(_QWORD *)(*(_QWORD *)(v49[3] + 96) + 16);
        outlined release of Text.Effect.BaseFragment((uint64_t)v49);
        if (__OFADD__(v44, v45))
          goto LABEL_22;
        if (v44 + v45 < v44)
          goto LABEL_23;
        if (__OFSUB__(v44 + v45, v44))
          goto LABEL_24;
        v46 = __OFADD__(a1, v45);
        a1 += v45;
        if (v46)
        {
          __break(1u);
LABEL_19:
          outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_27:
      swift_release();
LABEL_28:
      swift_endAccess();
      __break(1u);
LABEL_29:
      swift_release();
LABEL_30:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::UInt64 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  Swift::UInt64 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t result;
  _QWORD v49[7];
  uint64_t *v50;

  type metadata accessor for Text.Effect.DrawableContent<BounceTextEffect>(0);
  MEMORY[0x24BDAC7A8](v4);
  v50 = (_QWORD *)((char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 24);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_QWORD *)((char *)v49 - v7 + 24);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>();
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (_QWORD *)((char *)v49 - v14 + 24);
  outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>(a2, (uint64_t)v8);
  outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>((uint64_t)v8, (uint64_t)v12);
  v16 = *v8;
  v17 = v8[1];
  v18 = v8[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
    if ((v19 & 1) != 0)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of TypesettingConfiguration((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.DrawableContent<BounceTextEffect>);
      *(_QWORD *)&v12[*(int *)(v10 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>((uint64_t)v12, (uint64_t)v15);
      v20 = *(int *)(v10 + 36);
      while (1)
      {
        v21 = v20;
        v22 = *(uint64_t *)((char *)v15 + v20);
        v23 = *v15;
        v24 = v15[1];
        v25 = v15[2];
        swift_beginAccess();
        v26 = *(_QWORD *)(v23 + 48);
        if (!*(_QWORD *)(v26 + 16))
          break;
        swift_retain();
        v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        if ((v28 & 1) == 0)
          goto LABEL_25;
        v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        v30 = *(_QWORD *)(v29 + 16);
        swift_bridgeObjectRelease();
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          swift_release();
          break;
        }
        if (v30 == v22)
          goto LABEL_19;
        swift_retain();
        v31 = swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v24, v25, v22, v49);
        v32 = v50;
        outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>((uint64_t)v15, (uint64_t)v50);
        v34 = *v32;
        v33 = v32[1];
        v35 = v32[2];
        v36 = *v32 + 48;
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v34 + 48) + 16))
          goto LABEL_28;
        swift_retain();
        specialized __RawDictionaryStorage.find<A>(_:)(v33, v35);
        if ((v37 & 1) == 0)
          goto LABEL_27;
        swift_endAccess();
        swift_release();
        swift_beginAccess();
        v38 = *(_QWORD *)v36;
        if (!*(_QWORD *)(*(_QWORD *)v36 + 16))
          goto LABEL_30;
        swift_retain();
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v35);
        if ((v40 & 1) == 0)
          goto LABEL_29;
        v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 16 * v39);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        v42 = *(_QWORD *)(v41 + 16);
        swift_bridgeObjectRelease();
        if (v22 >= v42)
          goto LABEL_21;
        outlined destroy of TypesettingConfiguration((uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.DrawableContent<BounceTextEffect>);
        v20 = v21;
        *(uint64_t *)((char *)v15 + v21) = v22 + 1;
        v43 = v49[6];
        v44 = *(_QWORD *)(*(_QWORD *)(v49[3] + 96) + 16);
        outlined release of Text.Effect.BaseFragment((uint64_t)v49);
        v45 = v43 + v44;
        if (__OFADD__(v43, v44))
          goto LABEL_22;
        if (v45 < v43)
          goto LABEL_23;
        if (__OFSUB__(v45, v43))
          goto LABEL_24;
        v46 = __OFADD__(a1, v44);
        a1 += v44;
        if (v46)
        {
          __break(1u);
LABEL_19:
          outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_27:
      swift_release();
LABEL_28:
      swift_endAccess();
      __break(1u);
LABEL_29:
      swift_release();
LABEL_30:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt64 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  double v48;
  double Width;
  uint64_t result;
  uint64_t v51;
  char *v52;

  v4 = type metadata accessor for FragmentRangeSequence(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for FragmentRangeSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v51 - v11;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v6, type metadata accessor for FragmentRangeSequence);
  outlined init with copy of TypesettingLanguage((uint64_t)v6, (uint64_t)v12, type metadata accessor for Text.Effect.BaseContent);
  v13 = *(int *)(v4 + 24);
  v14 = &v6[*(int *)(v4 + 20)];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = &v12[v7[5]];
  *(_QWORD *)v17 = v16;
  *((_QWORD *)v17 + 1) = v15;
  v18 = &v12[v7[6]];
  *(_OWORD *)v18 = *(_OWORD *)&v6[v13];
  v19 = v7[7];
  v52 = v12;
  v20 = &v12[v19];
  *(_QWORD *)v20 = v16;
  *((_QWORD *)v20 + 1) = v15;
  outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for FragmentRangeSequence);
  while (1)
  {
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)v18;
    if (*(_QWORD *)v20 >= *(_QWORD *)v18)
    {
      if (__OFSUB__(v22, v21))
        goto LABEL_48;
      if (v22 != v21 || *((_QWORD *)v20 + 1) >= *((_QWORD *)v18 + 1))
        return outlined destroy of TypesettingConfiguration((uint64_t)v52, type metadata accessor for FragmentRangeSequence.Iterator);
    }
    outlined init with copy of TypesettingLanguage((uint64_t)v52, (uint64_t)v9, type metadata accessor for FragmentRangeSequence.Iterator);
    v23 = *v9;
    v24 = v9[1];
    v25 = v9[2];
    swift_beginAccess();
    v26 = *(_QWORD *)(v23 + 48);
    if (!*(_QWORD *)(v26 + 16))
      goto LABEL_52;
    swift_retain_n();
    swift_retain();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
    if ((v28 & 1) == 0)
      break;
    v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 16 * v27);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((v21 & 0x8000000000000000) != 0)
      goto LABEL_38;
    if (v21 >= *(_QWORD *)(v29 + 16))
      goto LABEL_39;
    v30 = v29 + 32;
    v31 = *(_QWORD *)(v29 + 32 + 8 * v21);
    v32 = 0;
    if (v21)
    {
      while (1)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v30 + 96) + 16);
        v46 = __OFADD__(v32, v33);
        v32 += v33;
        if (v46)
          break;
        v30 += 8;
        if (!--v21)
          goto LABEL_13;
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_retain();
      swift_retain();
      goto LABEL_54;
    }
LABEL_13:
    swift_retain();
    swift_bridgeObjectRelease();
    outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
    v34 = *(_QWORD *)v20;
    if (__OFSUB__(*(_QWORD *)v18, *(_QWORD *)v20))
      goto LABEL_40;
    if (*(_QWORD *)v18 == *(_QWORD *)v20)
    {
      v35 = *((_QWORD *)v20 + 1);
      v36 = *((_QWORD *)v18 + 1);
      if (v36 < v35)
        goto LABEL_49;
      v37 = *(_QWORD *)(v31 + 96);
      v38 = *(_QWORD *)(v37 + 16);
      v46 = __OFADD__(v32, v38);
      v39 = v32 + v38;
      v40 = v46;
    }
    else
    {
      v37 = *(_QWORD *)(v31 + 96);
      v41 = *(_QWORD *)(v37 + 16);
      v39 = v32 + v41;
      v40 = __OFADD__(v32, v41);
      if (__OFADD__(v32, v41))
        goto LABEL_50;
      v35 = *((_QWORD *)v20 + 1);
      v42 = v39 < v32 || v39 < v35;
      if (v42)
        goto LABEL_51;
      v36 = v39;
    }
    if (v40)
      goto LABEL_41;
    if (v39 < v32)
      goto LABEL_42;
    *((_QWORD *)v20 + 1) = v39;
    v46 = __OFADD__(v34, 1);
    v43 = v34 + 1;
    if (v46)
      goto LABEL_43;
    *(_QWORD *)v20 = v43;
    if (__OFSUB__(v36, v35))
      goto LABEL_44;
    v44 = *(_QWORD *)(v37 + 16);
    v46 = __OFADD__(v32, v44);
    v45 = v32 + v44;
    if (v46)
      goto LABEL_45;
    v46 = __OFSUB__(v45, v32);
    v42 = v45 < v32;
    v47 = v45 - v32;
    if (v42)
      goto LABEL_46;
    if (v46)
      goto LABEL_47;
    v48 = (double)(v36 - v35) / (double)v47 * CGRectGetWidth(*(CGRect *)(v31 + 120));
    Width = CGRectGetWidth(*(CGRect *)(v31 + 120));
    swift_release();
    swift_release();
    swift_release();
    a2 = a2 + v48 / Width;
  }
  swift_release();
LABEL_54:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt64 v40;
  uint64_t result;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  Swift::UInt64 v45;

  v4 = type metadata accessor for ClusterIndexSequence(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for ClusterIndexSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v43 - v11;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v6, type metadata accessor for ClusterIndexSequence);
  outlined init with copy of TypesettingLanguage((uint64_t)v6, (uint64_t)v12, type metadata accessor for Text.Effect.BaseContent);
  v13 = *(int *)(v4 + 24);
  v14 = &v6[*(int *)(v4 + 20)];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = &v12[v7[5]];
  *(_QWORD *)v17 = v16;
  *((_QWORD *)v17 + 1) = v15;
  v18 = &v12[v7[6]];
  *(_OWORD *)v18 = *(_OWORD *)&v6[v13];
  v19 = &v12[v7[7]];
  *(_QWORD *)v19 = v16;
  *((_QWORD *)v19 + 1) = v15;
  outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for ClusterIndexSequence);
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)v18;
  if (*(_QWORD *)v19 >= *(_QWORD *)v18)
  {
    if (__OFSUB__(v21, v20))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v21 != v20 || *((_QWORD *)v19 + 1) >= *((_QWORD *)v18 + 1))
    {
      result = outlined destroy of TypesettingConfiguration((uint64_t)v12, type metadata accessor for ClusterIndexSequence.Iterator);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      return result;
    }
  }
  outlined init with copy of TypesettingLanguage((uint64_t)v12, (uint64_t)v9, type metadata accessor for ClusterIndexSequence.Iterator);
  v22 = *v9;
  v23 = v9[1];
  v24 = v9[2];
  swift_beginAccess();
  v25 = *(_QWORD *)(v22 + 48);
  if (*(_QWORD *)(v25 + 16))
  {
    swift_retain_n();
    swift_retain();
    v45 = v23;
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    if ((v27 & 1) == 0)
    {
      swift_release();
      goto LABEL_33;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v26);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((v20 & 0x8000000000000000) == 0)
    {
      v29 = *(_QWORD *)(v28 + 16);
      if (v20 >= v29)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v44 = v24;
      v30 = v28 + 32;
      v31 = *(_QWORD *)(v28 + 32 + 8 * v20);
      v32 = 0;
      if (!v20)
      {
LABEL_10:
        v43 = v29;
        swift_retain();
        swift_bridgeObjectRelease();
        outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
        v36 = *((_QWORD *)v19 + 1);
        v37 = v36 + 1;
        if (!__OFADD__(v36, 1))
        {
          *((_QWORD *)v19 + 1) = v37;
          v38 = *(_QWORD *)(*(_QWORD *)(v31 + 96) + 16);
          v35 = __OFADD__(v32, v38);
          v39 = v32 + v38;
          if (!v35)
          {
            if (v39 >= v32)
            {
              if (!__OFSUB__(v39, v37))
              {
                v40 = v45;
                if (v39 == v37)
                {
                  if (__OFADD__(*(_QWORD *)v19, 1))
                  {
LABEL_30:
                    __break(1u);
                    goto LABEL_31;
                  }
                  ++*(_QWORD *)v19;
                }
                result = outlined destroy of TypesettingConfiguration((uint64_t)v12, type metadata accessor for ClusterIndexSequence.Iterator);
                *(_QWORD *)a2 = v22;
                *(_QWORD *)(a2 + 8) = v40;
                *(_QWORD *)(a2 + 16) = v44;
                *(_QWORD *)(a2 + 24) = v31;
                v42 = v43;
                *(_QWORD *)(a2 + 32) = v20;
                *(_QWORD *)(a2 + 40) = v42;
                *(_QWORD *)(a2 + 48) = v32;
                *(_QWORD *)(a2 + 56) = v36;
                return result;
              }
              goto LABEL_28;
            }
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v33 = v20;
      while (1)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v30 + 96) + 16);
        v35 = __OFADD__(v32, v34);
        v32 += v34;
        if (v35)
          break;
        v30 += 8;
        if (!--v33)
          goto LABEL_10;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_31:
  swift_retain();
  swift_retain();
LABEL_33:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_7SwiftUI4TextVAJE6EffectO6TimingV09UnitGlyphJ0Vs5NeverOTg506_sS2d7f3UI4h5VAAE6i2O6j3V09kl19E0VIgyyd_Sd_SdtAIs5m149OIegnrzr_TR03_s7a3UI4c5VAAE6d2O6e109V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09fG65t21VGAG13ConfigurationV_v31AA6SpringVSayAG0W4InfoVGtFAQSd_W16XEfU5_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v35 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v32 = v5;
  v33 = v4;
  v34 = a1;
  if (v6)
  {
    v7 = (uint64_t *)(a1 + 32);
    v8 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v35 + 16);
      v14 = *(_QWORD *)(v35 + 24);
      if (v15 >= v14 >> 1)
      {
        v30 = v11;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v11 = v30;
      }
      *(_QWORD *)(v35 + 16) = v15 + 1;
      v16 = v35 + 16 * v15;
      --v5;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v33 <= v32)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v35;
    }
    v17 = 0;
    if (v6 <= v32)
      v18 = v32;
    else
      v18 = v6;
    v19 = v18 - v6;
    v20 = v33 - v6;
    v21 = v32 - v6;
    v22 = 8 * v6 + 32;
    v23 = v34 + v22;
    v24 = v11 + v22;
    while (v20 != v17)
    {
      if (v21 == v17)
        goto LABEL_24;
      if (v19 == v17)
        goto LABEL_28;
      v25 = *(_QWORD *)(v23 + 8 * v17);
      v26 = *(_QWORD *)(v24 + 8 * v17);
      v28 = *(_QWORD *)(v35 + 16);
      v27 = *(_QWORD *)(v35 + 24);
      if (v28 >= v27 >> 1)
      {
        v31 = v11;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v11 = v31;
      }
      *(_QWORD *)(v35 + 16) = v28 + 1;
      v29 = v35 + 16 * v28;
      *(_QWORD *)(v29 + 32) = v25;
      *(_QWORD *)(v29 + 40) = v26;
      if (v20 == ++v17)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

Swift::Double __swiftcall Text.Effect.ClusterSeparationFunction.separation(clusterCount:lineCoverage:)(Swift::Int clusterCount, Swift::Double lineCoverage)
{
  Swift::Double result;

  __asm { BR              X10 }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.FragmentSeparationFunction.Storage(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  double v5;
  uint64_t v7;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16))
    return !*(_BYTE *)(a2 + 16) && v2 == v3;
  v5 = *(double *)(a2 + 8);
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    if (v4 == 1 && v2 == v3)
      return *(double *)(a1 + 8) == v5;
    return 0;
  }
  v7 = *(_QWORD *)&v5 | *(_QWORD *)&v3;
  return v4 == 2 && v7 == 0;
}

void Text.Effect.FractionalIndexFunction.summary(of:content:)(unint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, double *a7@<X8>)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  const __CTLine *v31;
  void *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  double v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt64 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  double MidX;
  uint64_t v54;
  CFIndex v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68[3];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  double v75;
  double v76;
  CGRect v77;

  v67 = a1;
  v66 = type metadata accessor for ClusterIndexSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v66);
  v14 = (uint64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v54 - v16;
  v18 = type metadata accessor for ClusterIndexSequence(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a6 & 1) == 0)
  {
    if (a4 >= a2)
    {
      v21 = 0;
      *(_QWORD *)a7 = a2;
      *((_QWORD *)a7 + 1) = a4;
LABEL_32:
      *((_BYTE *)a7 + 16) = v21;
      return;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v64 = a5;
  outlined init with copy of TypesettingLanguage(a5, (uint64_t)v20, type metadata accessor for Text.Effect.BaseContent);
  v22 = &v20[*(int *)(v18 + 20)];
  *(_QWORD *)v22 = v67;
  *((_QWORD *)v22 + 1) = a2;
  v23 = &v20[*(int *)(v18 + 24)];
  v65 = a3;
  *(_QWORD *)v23 = a3;
  *((_QWORD *)v23 + 1) = a4;
  specialized Sequence.first(where:)((uint64_t)v20, (uint64_t)v68);
  outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for ClusterIndexSequence);
  v24 = v68[0];
  v25 = a4;
  v26 = a2;
  v63 = a7;
  if (!v68[0])
    goto LABEL_11;
  v27 = v73 - v72;
  if (__OFSUB__(v73, v72))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((v27 & 0x8000000000000000) != 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v28 = *(_QWORD *)(v69 + 96);
  if (v27 < *(_QWORD *)(v28 + 16))
  {
    v29 = *(_QWORD **)(v28 + 24 * v27 + 48);
    if (v29[2])
    {
      v30 = (void *)v29[4];
      v55 = v29[5];
      v62 = v29[9];
      v57 = v68[1];
      v61 = v72;
      v58 = v69;
      v59 = v70;
      v60 = v71;
      v56 = v68[2];
      swift_retain_n();
      v31 = v30;
      v32 = (id)_CTLineGetRunAtIndex(v31, v55);
      LODWORD(v55) = CTRunGetStatus((CTRunRef)v32);

      outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v24);
      swift_release_n();

      LODWORD(v62) = v55 & 1;
      goto LABEL_12;
    }
    outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v68[0]);
LABEL_11:
    LODWORD(v62) = 0;
LABEL_12:
    outlined init with copy of TypesettingLanguage(v64, (uint64_t)v20, type metadata accessor for Text.Effect.BaseContent);
    v33 = &v20[*(int *)(v18 + 20)];
    v34 = v67;
    *(_QWORD *)v33 = v67;
    *((_QWORD *)v33 + 1) = v26;
    v35 = &v20[*(int *)(v18 + 24)];
    v36 = v65;
    *(_QWORD *)v35 = v65;
    *((_QWORD *)v35 + 1) = v25;
    outlined init with copy of TypesettingLanguage((uint64_t)v20, (uint64_t)v17, type metadata accessor for Text.Effect.BaseContent);
    v37 = v66;
    v38 = &v17[*(int *)(v66 + 20)];
    *(_QWORD *)v38 = v34;
    *((_QWORD *)v38 + 1) = v26;
    v39 = &v17[*(int *)(v37 + 24)];
    *(_QWORD *)v39 = v36;
    *((_QWORD *)v39 + 1) = v25;
    v40 = (unint64_t *)&v17[*(int *)(v37 + 28)];
    *v40 = v34;
    v40[1] = v26;
    outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for ClusterIndexSequence);
    v41 = INFINITY;
    v42 = -INFINITY;
    while (1)
    {
      v43 = *v40;
      v44 = *(_QWORD *)v39;
      if ((int64_t)*v40 >= *(_QWORD *)v39)
      {
        if (__OFSUB__(v44, v43))
          goto LABEL_38;
        if (v44 != v43 || (int64_t)v40[1] >= *((_QWORD *)v39 + 1))
          break;
      }
      outlined init with copy of TypesettingLanguage((uint64_t)v17, (uint64_t)v14, type metadata accessor for ClusterIndexSequence.Iterator);
      v45 = *v14;
      v46 = v14[1];
      v47 = v14[2];
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v45, v46, v47, v43, v68);
      outlined destroy of TypesettingConfiguration((uint64_t)v14, type metadata accessor for Text.Effect.BaseContent);
      v48 = v40[1];
      v49 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v40[1] = v49;
      v50 = *(_QWORD *)(*(_QWORD *)(v69 + 96) + 16);
      v51 = __OFADD__(v72, v50);
      v52 = v72 + v50;
      if (v51)
        goto LABEL_34;
      if (v52 < v72)
        goto LABEL_35;
      if (__OFSUB__(v52, v49))
        goto LABEL_36;
      if (v52 == v49)
      {
        if (__OFADD__(*v40, 1))
          goto LABEL_39;
        ++*v40;
      }
      if (v49 < v48)
        goto LABEL_37;
      Text.Effect.BaseFragment.typographicBounds(for:)(v48, v49, (uint64_t)v74);
      *(_QWORD *)&v77.origin.x = v74[0];
      *(_QWORD *)&v77.size.width = v74[2];
      v77.origin.y = *(double *)&v74[1] - v75;
      v77.size.height = v75 + v76;
      MidX = CGRectGetMidX(v77);
      outlined release of Text.Effect.BaseFragment((uint64_t)v68);
      if (MidX < v41)
        v41 = MidX;
      if (v42 <= MidX)
        v42 = MidX;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v17, type metadata accessor for ClusterIndexSequence.Iterator);
    if (v41 > v42)
      goto LABEL_41;
    v21 = v62 | 0x80;
    a7 = v63;
    *v63 = v41;
    a7[1] = v42;
    goto LABEL_32;
  }
LABEL_44:
  __break(1u);
}

