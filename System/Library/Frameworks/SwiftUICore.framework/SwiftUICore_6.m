_QWORD *Text.Effect.ChunkingFunction.chunk(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt64 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char v42;
  const __CTLine *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t *, _QWORD);
  uint64_t *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Swift::UInt64 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  Swift::UInt64 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *result;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  int64_t v81;
  uint64_t *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[4];
  uint64_t v88;
  _QWORD v89[7];
  _QWORD v90[3];
  uint64_t v91;
  _QWORD v92[7];
  _QWORD v93[6];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v83 = a3;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
  v8 = v7;
  v80 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v76 - v9;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v85 = *(_QWORD *)(v11 - 8);
  v86 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v84 = (char *)&v76 - v12;
  v13 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v18 = (uint64_t *)((char *)&v76 - v17);
  if ((a4 & 1) != 0)
  {
    outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v76 - v17, type metadata accessor for Text.Effect.BaseContent);
    specialized BidirectionalCollection.last.getter((uint64_t)&v95);
    if (!v95)
    {
LABEL_15:
      v25 = 0;
LABEL_16:
      v27 = *v18;
      v28 = v18[1];
      v29 = v18[2];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)(v27 + 48) + 16))
      {
LABEL_86:
        swift_endAccess();
        __break(1u);
        goto LABEL_87;
      }
      swift_retain();
      specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
      if ((v30 & 1) == 0)
      {
LABEL_85:
        swift_release();
        goto LABEL_86;
      }
      swift_endAccess();
LABEL_64:
      swift_release();
      v73 = specialized Text.Effect.DrawableContent.endIndex.getter();
      type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Chunk>);
      v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_23527E860;
      *(_QWORD *)(v74 + 32) = 0;
      *(_QWORD *)(v74 + 40) = 0;
      *(_QWORD *)(v74 + 48) = v73;
      *(_QWORD *)(v74 + 56) = v25;
      v77 = (_QWORD *)v74;
      outlined destroy of TypesettingConfiguration((uint64_t)v18, type metadata accessor for Text.Effect.BaseContent);
      return v77;
    }
    v23 = v97;
    v24 = *(_QWORD *)(*(_QWORD *)(v96 + 96) + 16);
    outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v95);
    v25 = (char *)(v23 + v24);
    if (__OFADD__(v23, v24))
      goto LABEL_81;
    if ((uint64_t)v25 >= v23)
      goto LABEL_16;
    __break(1u);
  }
  else
  {
    a4 = (uint64_t *)a1;
    if (specialized Sequence.reduce<A>(_:_:)(0, a1) > a2)
    {
      v79 = v10;
      v19 = specialized RandomAccessCollection<>.indices.getter();
      if (v20 < v19)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      if (__OFSUB__(v20, v19))
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      v21 = v19;
      v22 = v20;
      if (v20 == v19)
        return (_QWORD *)MEMORY[0x24BEE4AF8];
      v77 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v78 = v8;
      v81 = v20;
      v82 = (uint64_t *)a1;
      while (1)
      {
        if (v21 >= v22)
          goto LABEL_71;
        v31 = *a4;
        v32 = a4[1];
        v33 = a4[2];
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v32, v33, v21, v89);
        v34 = v89[6];
        v35 = *(_QWORD *)(*(_QWORD *)(v89[3] + 96) + 16);
        outlined release of Text.Effect.BaseFragment((uint64_t)v89);
        if (__OFADD__(v34, v35))
          break;
        v36 = __OFSUB__(v34 + v35, v34);
        v37 = v35;
        if (v35 < 0 != v36)
          goto LABEL_73;
        if (v36)
          goto LABEL_74;
        v38 = v21 + 1;
        if (v21 + 1 < v22 && v37 < v83)
        {
          v76 = v21;
          while (1)
          {
            swift_retain();
            swift_retain();
            specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v32, v33, v38, v90);
            v39 = v91;
            v98 = v91;
            swift_retain();
            outlined release of Text.Effect.BaseFragment((uint64_t)v90);
            v40 = *(void **)(v39 + 32);
            v41 = *(_QWORD *)(v39 + 40);
            v42 = *(_BYTE *)(v39 + 48);
            if ((v42 & 1) != 0)
            {
              outlined copy of Text.Layout.Line.Line(*(void **)(v39 + 32), *(_QWORD *)(v39 + 40), 1);
              v43 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v40);
              if (!v43)
              {
                v42 = 1;
                goto LABEL_32;
              }
            }
            else
            {
              outlined copy of Text.Layout.Line.Line(*(void **)(v39 + 32), *(_QWORD *)(v39 + 40), 0);
              outlined copy of Text.Layout.Line.Line(v40, v41, 0);
              swift_release();
              v43 = (const __CTLine *)v40;
            }
            _CTLineGetRunCount(v43);

LABEL_32:
            outlined consume of Text.Layout.Line.Line(v40, v41, v42);
            (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, v39+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v86);
            v44 = v79;
            RangeSet.ranges.getter();
            lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
            v45 = v78;
            dispatch thunk of Collection.startIndex.getter();
            dispatch thunk of Collection.endIndex.getter();
            v46 = v88;
            v47 = v87[0];
            if (v88 == v87[0])
            {
              v48 = 0;
            }
            else
            {
              v49 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
              v48 = *v50;
              v49(v87, 0);
            }
            LOBYTE(v87[0]) = v46 == v47;
            (*(void (**)(char *, uint64_t))(v80 + 8))(v44, v45);
            v51 = v87[0];
            (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v86);
            outlined release of ViewTransform((uint64_t)&v98);
            if ((v51 & 1) == 0 && !v48)
              goto LABEL_46;
            v31 = *v82;
            v32 = v82[1];
            v33 = v82[2];
            swift_retain();
            swift_retain();
            specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v32, v33, v38, v92);
            v52 = v92[6];
            v53 = *(_QWORD *)(*(_QWORD *)(v92[3] + 96) + 16);
            outlined release of Text.Effect.BaseFragment((uint64_t)v92);
            v54 = v52 + v53;
            if (__OFADD__(v52, v53))
            {
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
LABEL_71:
              __break(1u);
              goto LABEL_72;
            }
            if (v54 < v52)
              goto LABEL_67;
            if (__OFSUB__(v54, v52))
              goto LABEL_68;
            v36 = __OFADD__(v37, v53);
            v37 += v53;
            if (v36)
              goto LABEL_69;
            if (v37 <= v83)
              v21 = v38;
            if (v37 < v83)
            {
              v38 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_70;
              if (v38 < v81)
                continue;
            }
LABEL_46:
            v38 = v21 + 1;
            v55 = v76;
            goto LABEL_48;
          }
        }
        v55 = v21;
LABEL_48:
        a4 = v82;
        v56 = *v82;
        v57 = v82[1];
        v58 = v82[2];
        swift_retain();
        swift_retain();
        v59 = v55;
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v56, v57, v58, v55, v93);
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v56, v57, v58, v21, &v95);
        v60 = v94;
        v61 = *(_QWORD *)(*(_QWORD *)(v93[3] + 96) + 16);
        v36 = __OFADD__(v94, v61);
        v62 = v94 + v61;
        if (v36)
          goto LABEL_75;
        if (v62 < v94)
          goto LABEL_76;
        v63 = *(_QWORD *)(*(_QWORD *)(v96 + 96) + 16);
        v64 = v97 + v63;
        if (__OFADD__(v97, v63))
          goto LABEL_77;
        if (v64 < v97)
          goto LABEL_78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
        v66 = v77[2];
        v65 = v77[3];
        if (v66 >= v65 >> 1)
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v77);
        v67 = v77;
        v77[2] = v66 + 1;
        v68 = &v67[4 * v66];
        v68[4] = v59;
        v68[5] = v60;
        v68[6] = v38;
        v68[7] = v64;
        outlined release of Text.Effect.BaseFragment((uint64_t)&v95);
        outlined release of Text.Effect.BaseFragment((uint64_t)v93);
        v22 = v81;
        if (v81 <= v21)
          goto LABEL_79;
        if (__OFSUB__(v81, v38))
          goto LABEL_80;
        v21 = v38;
        if (v81 == v38)
          return v77;
      }
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
  }
  outlined init with copy of TypesettingLanguage((uint64_t)a4, (uint64_t)v15, type metadata accessor for Text.Effect.BaseContent);
  specialized BidirectionalCollection.last.getter((uint64_t)&v95);
  if (v95)
  {
    v26 = v97;
    v18 = *(uint64_t **)(*(_QWORD *)(v96 + 96) + 16);
    outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v95);
    v25 = (char *)v18 + v26;
    if (__OFADD__(v26, v18))
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if ((uint64_t)v25 < v26)
    {
      __break(1u);
      goto LABEL_15;
    }
  }
  else
  {
    v25 = 0;
  }
  v69 = *v15;
  v70 = v15[1];
  v71 = v15[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v69 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
    if ((v72 & 1) == 0)
    {
LABEL_87:
      swift_release();
      goto LABEL_88;
    }
    swift_endAccess();
    v18 = v15;
    goto LABEL_64;
  }
LABEL_88:
  result = (_QWORD *)swift_endAccess();
  __break(1u);
  return result;
}

SwiftUI::Spring __swiftcall Spring.scaledResponse(_:)(Swift::Double a1)
{
  uint64_t v1;
  double *v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  SwiftUI::Spring result;

  v3 = v2[1];
  v4 = -*v2;
  if (*v2 >= 0.0)
    v4 = *v2;
  v5 = 6.28318531 / sqrt(v3 * v3 + *v2 * v4);
  *(double *)&v6 = v5 * a1;
  v7 = v3 * 0.5 * v5 / 3.14159265;
  *(_QWORD *)&v8.f64[0] = qword_2352904C0[v7 > 1.0];
  v8.f64[1] = v7;
  v9 = (float64x2_t)vdupq_lane_s64(0x401921FB54442D18, 0);
  v9.f64[0] = sqrt(vabdd_f64(1.0, v7 * v7));
  v10 = vmulq_f64(v8, v9);
  v11 = vdivq_f64(v10, (float64x2_t)vdupq_lane_s64(v6, 0));
  *(float64x2_t *)v1 = v11;
  *(_QWORD *)(v1 + 16) = 0x3FF0000000000000;
  result._mass = v9.f64[0];
  result.decayConstant = v10.f64[0];
  result.angularFrequency = v11.f64[0];
  return result;
}

uint64_t protocol witness for Text.Effect.DurationProvider.duration.getter in conformance Text.Effect.Timing()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t protocol witness for Text.Effect.DurationProvider.animationInterval(for:) in conformance Text.Effect.Timing(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (*(_QWORD *)(v2 + 16) > result)
      return *(_QWORD *)(v2 + 16 * result + 32);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Text.Effect.DurationProvider.chunks.getter in conformance Text.Effect.Timing()
{
  return swift_bridgeObjectRetain();
}

void Text.Effect.Timing.Chunk.computeInfos(configuration:chunk:content:)(uint64_t a1, unint64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  uint64_t v27;
  unint64_t *v28;
  char *v29;
  unint64_t *v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  double v35;
  double v36;
  double v37;
  _BOOL4 v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  Swift::UInt64 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v59;
  _QWORD **v60;
  _QWORD *v61;
  uint64_t v62;
  double v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CFIndex v68;
  uint64_t v69;
  const __CFString *v70;
  __CFString *v71;
  CFStringRef v72;
  __CFString *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  double v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  _QWORD **v95;
  unint64_t *v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  double v100[2];
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[3];
  double v106;
  double v107;
  CFRange v108;
  CGRect v109;

  v98 = a6;
  v99 = type metadata accessor for FragmentRangeSequence(0);
  MEMORY[0x24BDAC7A8](v99);
  v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for FragmentRangeSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v14);
  v92 = (uint64_t *)((char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v90 - v17;
  swift_bridgeObjectRelease();
  v19 = MEMORY[0x24BEE4AF8];
  *v6 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v6[2] = v19;
  v20 = *(_BYTE *)(a1 + 112);
  v21 = a4;
  v22 = a4;
  v23 = a5;
  v24 = v98;
  Text.Effect.FractionalIndexFunction.summary(of:content:)(a2, a3, v22, a5, v98, v20, v100);
  v25 = v100[0];
  v91 = v100[1];
  v26 = v101;
  outlined init with copy of TypesettingLanguage(v24, (uint64_t)v13, type metadata accessor for Text.Effect.BaseContent);
  v27 = v99;
  v28 = (unint64_t *)&v13[*(int *)(v99 + 20)];
  *v28 = a2;
  v28[1] = a3;
  v29 = &v13[*(int *)(v27 + 24)];
  *(_QWORD *)v29 = v21;
  *((_QWORD *)v29 + 1) = v23;
  outlined init with copy of TypesettingLanguage((uint64_t)v13, (uint64_t)v18, type metadata accessor for Text.Effect.BaseContent);
  v30 = (unint64_t *)&v18[v14[5]];
  *v30 = a2;
  v30[1] = a3;
  v31 = &v18[v14[6]];
  *(_QWORD *)v31 = v21;
  *((_QWORD *)v31 + 1) = v23;
  v94 = v31;
  v32 = v14[7];
  v93 = v18;
  v33 = (unint64_t *)&v18[v32];
  *v33 = a2;
  v33[1] = a3;
  v34 = v33;
  outlined destroy of TypesettingConfiguration((uint64_t)v13, type metadata accessor for FragmentRangeSequence);
  v35 = v25;
  v36 = v91 - v25;
  v97 = v25;
  v98 = *(_QWORD *)&v91 - *(_QWORD *)&v25;
  v37 = (double)(*(_QWORD *)&v91 - *(_QWORD *)&v25 - 1);
  v38 = __OFSUB__(*(_QWORD *)&v91, *(_QWORD *)&v25);
  LODWORD(v99) = v38;
  v96 = v34;
  while (1)
  {
    v39 = *v34;
    v40 = v94;
    v41 = *(_QWORD *)v94;
    if ((int64_t)*v34 >= *(_QWORD *)v94)
    {
      if (__OFSUB__(v41, v39))
        goto LABEL_86;
      if (v41 != v39 || (int64_t)v34[1] >= *((_QWORD *)v94 + 1))
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v93, type metadata accessor for FragmentRangeSequence.Iterator);
        return;
      }
    }
    v42 = v92;
    outlined init with copy of TypesettingLanguage((uint64_t)v93, (uint64_t)v92, type metadata accessor for FragmentRangeSequence.Iterator);
    v43 = *v42;
    v44 = v42[1];
    v45 = v42[2];
    swift_retain();
    swift_retain();
    v46 = v43;
    v47 = v96;
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v46, v44, v45, v39, v100);
    outlined destroy of TypesettingConfiguration((uint64_t)v42, type metadata accessor for Text.Effect.BaseContent);
    v48 = *v47;
    if (__OFSUB__(*(_QWORD *)v40, *v47))
      break;
    if (*(_QWORD *)v40 == *v47)
    {
      v49 = v47[1];
      v50 = *((_QWORD *)v40 + 1);
      if (v50 < v49)
        goto LABEL_87;
      v51 = v104;
      v52 = v102;
      v53 = *(_QWORD *)(*(_QWORD *)(v102 + 96) + 16);
      v57 = __OFADD__(v104, v53);
      v54 = v104 + v53;
      v55 = v57;
    }
    else
    {
      v51 = v104;
      v52 = v102;
      v56 = *(_QWORD *)(*(_QWORD *)(v102 + 96) + 16);
      v57 = __OFADD__(v104, v56);
      v54 = v104 + v56;
      v55 = v57;
      if (v57)
        goto LABEL_88;
      v49 = v47[1];
      if (v54 < v104 || v54 < v49)
        goto LABEL_89;
      v50 = v54;
    }
    if ((v55 & 1) != 0)
      goto LABEL_78;
    if (v54 < v51)
      goto LABEL_79;
    v47[1] = v54;
    v57 = __OFADD__(v48, 1);
    v59 = v48 + 1;
    if (v57)
      goto LABEL_80;
    *v47 = v59;
    if (__OFSUB__(v50, v49))
      goto LABEL_81;
    if (v50 != v49)
    {
      if (v50 < v49)
        goto LABEL_90;
      v61 = *v95;
      while (v49 < v50)
      {
        v62 = v49 + 1;
        if (v26 < 0)
        {
          v63 = 0.0;
          if (v36 > 0.0)
          {
            Text.Effect.BaseFragment.typographicBounds(for:)(v49, v49 + 1, (uint64_t)v105);
            *(_QWORD *)&v109.origin.x = v105[0];
            *(_QWORD *)&v109.size.width = v105[2];
            v109.origin.y = *(double *)&v105[1] - v106;
            v109.size.height = v106 + v107;
            v64 = (CGRectGetMidX(v109) - v35) / v36;
            if (v64 < 0.0)
              v64 = 0.0;
            if (v64 > 1.0)
              v64 = 1.0;
            if ((v26 & 1) != 0)
              v63 = 1.0 - v64;
            else
              v63 = v64;
          }
        }
        else
        {
          if ((v99 & 1) != 0)
            goto LABEL_75;
          v63 = 0.0;
          if (v98 >= 2)
          {
            if (__OFSUB__(v49, *(_QWORD *)&v97))
              goto LABEL_76;
            v63 = (double)(v49 - *(_QWORD *)&v97) / v37;
          }
        }
        v65 = v49 - v51;
        if (__OFSUB__(v49, v51))
          goto LABEL_70;
        if ((v65 & 0x8000000000000000) != 0)
          goto LABEL_71;
        v66 = *(_QWORD *)(v52 + 96);
        if (v65 >= *(_QWORD *)(v66 + 16))
          goto LABEL_72;
        v67 = v66 + 24 * v65;
        v68 = *(_QWORD *)(v67 + 32);
        v69 = *(_QWORD *)(v67 + 40);
        v70 = (id)CFAttributedStringGetString(*(CFAttributedStringRef *)(v52 + 80));
        if (__OFSUB__(v69, v68))
          goto LABEL_73;
        v71 = (__CFString *)v70;
        v108.location = v68;
        v108.length = v69 - v68;
        v72 = CFStringCreateWithSubstring(0, v70, v108);
        if (!v72)
          goto LABEL_91;
        v73 = (__CFString *)v72;
        v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v76 = v75;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        v78 = v61[2];
        v77 = v61[3];
        if (v78 >= v77 >> 1)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v61);
        v79 = v103;
        v61[2] = v78 + 1;
        v80 = (double *)&v61[4 * v78];
        v80[4] = v63;
        *((_QWORD *)v80 + 5) = v74;
        *((_QWORD *)v80 + 6) = v76;
        *((_QWORD *)v80 + 7) = v79;
        if (__OFSUB__(v50, v62))
          goto LABEL_74;
        v49 = v62;
        if (v50 == v62)
        {
          v60 = v95;
          *v95 = v61;
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      break;
    }
    v60 = v95;
    v61 = *v95;
LABEL_58:
    v81 = *(_QWORD *)(*(_QWORD *)(v52 + 96) + 16);
    v57 = __OFADD__(v51, v81);
    v82 = v51 + v81;
    if (v57)
      goto LABEL_82;
    v83 = v82 - v51;
    if (__OFSUB__(v82, v51))
      goto LABEL_83;
    v84 = v61[2];
    v85 = v84 - v83;
    if (__OFSUB__(v84, v83))
      goto LABEL_84;
    if (v82 < v51 || v84 < v85)
      goto LABEL_85;
    v86 = v60[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v86[2] + 1, 1, v86);
    v34 = v96;
    v88 = v86[2];
    v87 = v86[3];
    if (v88 >= v87 >> 1)
      v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v87 > 1), v88 + 1, 1, v86);
    v86[2] = v88 + 1;
    v89 = &v86[2 * v88];
    v89[4] = v85;
    v89[5] = v84;
    outlined release of Text.Effect.BaseFragment((uint64_t)v100);
    v60[2] = v86;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
}

uint64_t Text.Effect.Timing.Chunk.computeTimings(configuration:lineCoverage:spring:from:)(uint64_t a1, double *a2, uint64_t a3, Swift::Double a4)
{
  uint64_t v4;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int64_t *v21;
  int64_t v22;
  double v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  int64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int64_t *v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  int64x2_t *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  double v71;
  int64_t *v72;
  int64_t v73;
  int64_t v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  float64x2_t v78;
  float64x2_t *v79;
  unint64_t v80;
  float64x2_t v81;
  int64_t v82;
  double *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  int64_t *v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int64_t v97;
  float64x2_t v98;
  float64x2_t *v99;
  unint64_t v100;
  float64x2_t v101;
  uint64_t v102;
  double *v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  double *v107;
  double *v108;
  uint64_t v109;
  int64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  double v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t result;
  _QWORD v130[4];
  int64x2_t v131;
  uint64_t v132;
  int64_t v133;
  int64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t *v144;
  int64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  char v160;
  __int128 v161;
  __int128 v162;
  char v163;
  __int128 v164;
  double v165[2];
  char v166;
  double v167;
  double v168;
  char v169;

  v6 = a1;
  v8 = *a2;
  v7 = a2[1];
  v162 = *(_OWORD *)a1;
  v163 = *(_BYTE *)(a1 + 16);
  v137 = a3;
  v9 = *(_QWORD *)(a3 + 16);
  outlined init with take of Text.Effect.DurationFunction.Storage(&v162, (uint64_t)&v164);
  outlined init with take of Text.Effect.DurationFunction.Storage(&v164, (uint64_t)v165);
  v10 = v165[0];
  if (v166 == 1)
  {
    v11 = 3.0 / ((double)(uint64_t)v9 + 2.0);
    v12 = 1.0 - v11;
    if (v11 > 1.0)
      v12 = 0.0;
    if (v11 < 0.0)
      v13 = 1.0;
    else
      v13 = v12;
    v10 = (1.0 - v13) * v165[0] + v13 * v165[1];
  }
  *(double *)(v4 + 24) = v10;
  if (v9 <= 1)
  {
    v15 = 1.0;
    v14 = 0.0;
    specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, v8, v7);
  }
  else
  {
    v14 = Text.Effect.ClusterSeparationFunction.separation(clusterCount:lineCoverage:)(v9, a4);
    specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, v8, v7);
    v15 = 1.0 - v14 + v14 * (1.0 / (double)*(uint64_t *)(*(_QWORD *)v4 + 16));
  }
  outlined retain of Text.Effect.Timing.Configuration(v6);
  v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO6TimingV9GlyphInfoVG_Sds5NeverOTg503_s7d3UI4f5VAAE6g2O6h113V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09Uniti43E0VGAG13ConfigurationV_SdAA6SpringVSayAG0W4J14VGtFSdAXXEfU0_AL13ConfigurationVSdTf1cn_nTf4ngn_n(v137, v6, v15);
  outlined release of Text.Effect.Timing.Configuration(v6);
  v17 = (_QWORD *)specialized Array.init(repeating:count:)(v9, 0.0);
  v132 = v4;
  v18 = *(_QWORD *)(v4 + 16);
  v135 = *(_QWORD *)(v18 + 16);
  if (!v135)
  {
    v65 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_80:
    v139 = v65;
    specialized Sequence<>.max()((uint64_t)v65);
    v160 = *(_BYTE *)(v6 + 40);
    v159 = *(_OWORD *)(v6 + 24);
    v66 = *(_QWORD *)(v132 + 16);
    v18 = *(_QWORD *)(v66 + 16);
    outlined init with take of Text.Effect.DurationFunction.Storage(&v159, (uint64_t)&v161);
    outlined init with take of Text.Effect.DurationFunction.Storage(&v161, (uint64_t)&v167);
    if (!v169)
    {
      v14 = v167;
      if (!v18)
        goto LABEL_139;
LABEL_87:
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      v68 = 0;
      v69 = *(_QWORD *)(v66 + 16);
      v70 = v139;
      v71 = 0.0;
      while (1)
      {
        if (v68 == v69)
          goto LABEL_167;
        v72 = (int64_t *)(v66 + 32 + 16 * v68);
        v74 = *v72;
        v73 = v72[1];
        if (v68)
        {
          if ((unint64_t)(v68 - 1) >= v70[2])
            goto LABEL_172;
          v71 = v71 + v14 * *(double *)&v70[v68 + 3];
        }
        if (v73 != v74)
        {
          if (v73 < v74)
            goto LABEL_173;
          v75 = v73 - v74;
          if (v73 <= v74)
            goto LABEL_174;
          if (v74 < 0)
            goto LABEL_175;
          v76 = v17[2];
          if (v74 >= v76 || v73 - 1 >= v76)
            goto LABEL_176;
          if (v75 >= 4)
          {
            v77 = v74 + (v75 & 0xFFFFFFFFFFFFFFFCLL);
            v78 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71, 0);
            v79 = (float64x2_t *)&v17[v74 + 6];
            v80 = v75 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v81 = vaddq_f64(v78, *v79);
              v79[-1] = vaddq_f64(v78, v79[-1]);
              *v79 = v81;
              v79 += 2;
              v80 -= 4;
            }
            while (v80);
            if (v75 == (v75 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_90;
          }
          else
          {
            v77 = v74;
          }
          v82 = v73 - v77;
          v83 = (double *)&v17[v77 + 4];
          do
          {
            *v83 = v71 + *v83;
            ++v83;
            --v82;
          }
          while (v82);
        }
LABEL_90:
        if (++v68 == v18)
          goto LABEL_138;
      }
    }
    if (v169 == 1)
    {
      v67 = 5;
      if ((unint64_t)v18 > 5)
        v67 = v18;
      v14 = (-5.0 / (double)v67 + 1.0) * v167 + (1.0 - (-5.0 / (double)v67 + 1.0)) * v168;
      if (!v18)
      {
LABEL_139:
        v104 = v17[2];
        v105 = MEMORY[0x24BEE4AF8];
        if (v104)
        {
          v106 = *(_QWORD *)(v16 + 16);
          if (v106)
          {
            v107 = (double *)(v17 + 4);
            v108 = (double *)(v16 + 32);
            v109 = v106 - 1;
            v110 = v104 - 1;
            v111 = 0.0;
            do
            {
              v112 = *v107++;
              v113 = v112;
              v114 = *v108++;
              v115 = v113 + v114;
              if (v111 <= v115)
                v111 = v115;
              if (!v110)
                break;
              v116 = v109--;
              --v110;
            }
            while (v116);
          }
          else
          {
            v111 = 0.0;
          }
          v158 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104, 0);
          v120 = 0;
          v117 = v158;
          v121 = *(_QWORD *)(v158 + 16);
          do
          {
            v122 = *(double *)&v17[v120 + 4];
            v158 = v117;
            v123 = *(_QWORD *)(v117 + 24);
            if (v121 >= v123 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v121 + 1, 1);
              v117 = v158;
            }
            ++v120;
            *(_QWORD *)(v117 + 16) = v121 + 1;
            *(double *)(v117 + 8 * v121++ + 32) = v122 / v111;
          }
          while (v104 != v120);
          swift_bridgeObjectRelease();
          v118 = *(_QWORD *)(v16 + 16);
          if (v118)
            goto LABEL_155;
        }
        else
        {
          v111 = 0.0;
          v117 = MEMORY[0x24BEE4AF8];
          v118 = *(_QWORD *)(v16 + 16);
          if (v118)
          {
LABEL_155:
            v158 = v105;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v118, 0);
            v124 = 0;
            v119 = v158;
            v125 = *(_QWORD *)(v158 + 16);
            do
            {
              v126 = *(double *)(v16 + 8 * v124 + 32);
              v158 = v119;
              v127 = *(_QWORD *)(v119 + 24);
              if (v125 >= v127 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v127 > 1, v125 + 1, 1);
                v119 = v158;
              }
              ++v124;
              *(_QWORD *)(v119 + 16) = v125 + 1;
              *(double *)(v119 + 8 * v125++ + 32) = v126 / v111;
            }
            while (v118 != v124);
            swift_bridgeObjectRelease();
            goto LABEL_160;
          }
        }
        swift_bridgeObjectRelease();
        v119 = MEMORY[0x24BEE4AF8];
LABEL_160:
        v128 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_7SwiftUI4TextVAJE6EffectO6TimingV09UnitGlyphJ0Vs5NeverOTg506_sS2d7f3UI4h5VAAE6i2O6j3V09kl19E0VIgyyd_Sd_SdtAIs5m149OIegnrzr_TR03_s7a3UI4c5VAAE6d2O6e109V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09fG65t21VGAG13ConfigurationV_v31AA6SpringVSayAG0W4InfoVGtFAQSd_W16XEfU5_Tf3nnnpf_nTf1cn_n(v117, v119);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v128;
      }
      goto LABEL_87;
    }
    if (!v18)
      goto LABEL_139;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
    v84 = 0;
    v85 = *(_QWORD *)(v66 + 16);
    v86 = v17 + 4;
    while (1)
    {
      if (v84 == v85)
        goto LABEL_177;
      v87 = (int64_t *)(v66 + 32 + 16 * v84);
      v89 = *v87;
      v88 = v87[1];
      if (v84 && (v91 = *(v87 - 2), v90 = *(v87 - 1), v91 != v90))
      {
        if (v91 >= v90)
          goto LABEL_184;
        v93 = v90 < 1;
        v95 = v90 - 1;
        if (v93)
          goto LABEL_185;
        if (v95 >= v17[2])
          goto LABEL_186;
        if (v95 >= *(_QWORD *)(v16 + 16))
          goto LABEL_187;
        if (v88 == v89)
          goto LABEL_113;
        v92 = *(double *)&v86[v95] + v14 * *(double *)(v16 + 32 + 8 * v95);
        v94 = v88 - v89;
        v93 = v88 <= v89;
        if (v88 < v89)
          goto LABEL_180;
      }
      else
      {
        v92 = 0.0;
        if (v88 == v89)
          goto LABEL_113;
        v94 = v88 - v89;
        v93 = v88 <= v89;
        if (v88 < v89)
          goto LABEL_180;
      }
      if (v93)
        goto LABEL_181;
      if (v89 < 0)
        goto LABEL_182;
      v96 = v17[2];
      if (v89 >= v96 || v88 - 1 >= v96)
        goto LABEL_183;
      if (v94 >= 4)
      {
        v97 = v89 + (v94 & 0xFFFFFFFFFFFFFFFCLL);
        v98 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v92, 0);
        v99 = (float64x2_t *)&v17[v89 + 6];
        v100 = v94 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v101 = vaddq_f64(v98, *v99);
          v99[-1] = vaddq_f64(v98, v99[-1]);
          *v99 = v101;
          v99 += 2;
          v100 -= 4;
        }
        while (v100);
        if (v94 == (v94 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_113;
      }
      else
      {
        v97 = v89;
      }
      v102 = v88 - v97;
      v103 = (double *)&v86[v97];
      do
      {
        *v103 = v92 + *v103;
        ++v103;
        --v102;
      }
      while (v102);
LABEL_113:
      if (++v84 == v18)
      {
LABEL_138:
        swift_bridgeObjectRelease();
        goto LABEL_139;
      }
    }
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_188:
    v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  v19 = 0;
  v134 = v18 + 32;
  v140 = v137 + 32;
  v147 = v16 + 32;
  v149 = v17 + 4;
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v131 = (int64x2_t)xmmword_235260F20;
  v133 = v18;
  v143 = v17;
  v142 = v16;
  v148 = v6;
  v141 = v9;
  while (1)
  {
    if (v19 >= *(_QWORD *)(v18 + 16))
      goto LABEL_165;
    v21 = (int64_t *)(v134 + 16 * v19);
    v22 = *v21;
    v18 = v21[1];
    v6 = v18 - *v21;
    if (__OFSUB__(v18, *v21))
      goto LABEL_166;
    v138 = v19;
    v139 = v20;
    if (!v6)
    {
      v23 = MEMORY[0x24BEE4AF8];
LABEL_28:
      v6 = v148;
      goto LABEL_29;
    }
    if (v6 < 1)
      break;
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v23 = COERCE_DOUBLE(swift_allocObject());
    v24 = _swift_stdlib_malloc_size(*(const void **)&v23);
    v25 = 0;
    v26 = v24 - 32;
    if (v24 < 32)
      v26 = v24 - 25;
    *(_QWORD *)(*(_QWORD *)&v23 + 16) = v6;
    *(_QWORD *)(*(_QWORD *)&v23 + 24) = 2 * (v26 >> 3);
    if (v22 != v18)
    {
      if (v18 < v22)
        goto LABEL_178;
      if (v22 >= v18)
        goto LABEL_179;
      *(_QWORD *)(*(_QWORD *)&v23 + 32) = v22;
      if (v6 != 1)
      {
        v52 = v22 + 1;
        if (v22 + 1 != v18)
        {
          v53 = (int64_t *)(*(_QWORD *)&v23 + 40);
          v54 = v18 - v22 - 2;
          if (v18 + ~v22 < v54)
            v54 = v18 + ~v22;
          v55 = v54 + 1;
          v6 = v148;
          if (v55 >= 5)
          {
            v58 = v55 & 3;
            if ((v55 & 3) == 0)
              v58 = 4;
            v59 = v55 - v58;
            v60 = v55 - v58 + 2;
            v56 = v52 + v59;
            v53 += v59;
            v61 = vaddq_s64(vdupq_n_s64(v52), v131);
            v62 = (int64x2_t *)(*(_QWORD *)&v23 + 56);
            do
            {
              v62[-1] = v61;
              *v62 = vaddq_s64(v61, vdupq_n_s64(2uLL));
              v61 = vaddq_s64(v61, vdupq_n_s64(4uLL));
              v62 += 2;
              v59 -= 4;
            }
            while (v59);
            v57 = v60 + v22;
          }
          else
          {
            v56 = v22 + 1;
            v57 = v22 + 2;
          }
          while (v56 < v18)
          {
            *v53 = v56;
            if (v18 != v57)
            {
              ++v53;
              ++v56;
              ++v57;
              if (v18 != v56)
                continue;
            }
            goto LABEL_29;
          }
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
          goto LABEL_188;
        }
        goto LABEL_28;
      }
      v25 = 1;
    }
    v27 = v25 == v6;
    v6 = v148;
    if (!v27)
      goto LABEL_168;
LABEL_29:
    v167 = v23;
    v28 = v137;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v167, v28);
    swift_bridgeObjectRelease_n();
    v29 = *(_QWORD *)(*(_QWORD *)&v167 + 16);
    if (v29)
    {
      v30 = *(_QWORD *)(v6 + 104);
      v150 = *(_QWORD *)&v167 + 32;
      v31 = *(_QWORD *)(v30 + 16);
      v136 = v167;
      swift_retain();
      v32 = 0;
      v144 = (unint64_t *)(v30 + 48);
      v18 = v31;
      v33 = 0.0;
      v146 = v29;
      v145 = v31;
      do
      {
        v34 = *(_QWORD *)(v150 + 8 * v32);
        v35 = v34 - 1;
        if (v34 >= 1)
        {
          if (v35 >= *(_QWORD *)(v16 + 16))
            goto LABEL_163;
          v33 = v33 + v14 * *(double *)(v147 + 8 * v35);
        }
        if (v34 >= v9)
        {
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
        if (v18)
        {
          v152 = v32;
          v151 = v34;
          v36 = v140 + 32 * v34;
          v37 = *(unint64_t *)(v36 + 8);
          v38 = *(_QWORD *)(v36 + 16);
          outlined retain of Text.Effect.Timing.Configuration(v6);
          v39 = HIBYTE(v38) & 0xF;
          v156 = v39;
          v155 = v37 & 0xFFFFFFFFFFFFLL;
          if ((v38 & 0x2000000000000000) == 0)
            v39 = v37 & 0xFFFFFFFFFFFFLL;
          v157 = v39;
          v154 = v38 & 0xFFFFFFFFFFFFFFLL;
          v153 = (v38 & 0xFFFFFFFFFFFFFFFLL) + 32;
          swift_bridgeObjectRetain();
          v40 = v144;
          v41 = v18;
          while (1)
          {
            if (v157)
            {
              v45 = *((double *)v40 - 2);
              v46 = *(v40 - 1);
              v47 = *v40;
              _StringGuts.validateScalarIndex(_:)(0xFuLL, v37, v38);
              if ((v38 & 0x1000000000000000) != 0)
              {
                v42 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                v43 = swift_bridgeObjectRetain();
              }
              else if ((v38 & 0x2000000000000000) != 0)
              {
                v167 = *(double *)&v37;
                v168 = *(double *)&v154;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v42 = _decodeScalar(_:startingAt:)();
                v43 = swift_bridgeObjectRelease();
              }
              else
              {
                if ((v37 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v42 = _decodeScalar(_:startingAt:)();
                v43 = swift_bridgeObjectRelease();
              }
              LODWORD(v167) = v42;
              MEMORY[0x24BDAC7A8](v43);
              v130[2] = &v167;
              swift_bridgeObjectRetain();
              v44 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v130, v46, v47);
              swift_bridgeObjectRelease_n();
              if ((v44 & 1) != 0)
                break;
            }
            v40 += 3;
            if (!--v41)
            {
              v45 = 0.0;
              break;
            }
          }
          v6 = v148;
          outlined release of Text.Effect.Timing.Configuration(v148);
          swift_bridgeObjectRelease();
          v17 = v143;
          v16 = v142;
          v9 = v141;
          v29 = v146;
          v18 = v145;
          v32 = v152;
          v34 = v151;
        }
        else
        {
          v45 = 0.0;
        }
        if (v34 >= v17[2])
          goto LABEL_162;
        ++v32;
        v33 = v33 + v45;
        *(double *)&v149[v34] = v33;
      }
      while (v32 != v29);
      v18 = *(_QWORD *)&v136;
      swift_release();
      if (v29 > *(_QWORD *)(v18 + 16))
        goto LABEL_169;
      v18 = *(_QWORD *)(v150 + 8 * v29 - 8);
      swift_release();
      if (v18 < 0)
        goto LABEL_170;
      if ((unint64_t)v18 < *(_QWORD *)(v16 + 16))
      {
        v48 = v33 + *(double *)(v147 + 8 * v18);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_58;
LABEL_64:
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v139[2] + 1, 1, v139);
        goto LABEL_59;
      }
      goto LABEL_171;
    }
    swift_release();
    v48 = 0.0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_64;
LABEL_58:
    v20 = v139;
LABEL_59:
    v50 = v20[2];
    v49 = v20[3];
    v51 = v138;
    if (v50 >= v49 >> 1)
    {
      v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v20);
      v51 = v138;
      v20 = v63;
    }
    v19 = v51 + 1;
    v20[2] = v50 + 1;
    *(double *)&v20[v50 + 4] = v48;
    v18 = v133;
    if (v19 == v135)
    {
      v64 = v20;
      swift_bridgeObjectRelease();
      v65 = v64;
      goto LABEL_80;
    }
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO6TimingV9GlyphInfoVG_Sds5NeverOTg503_s7d3UI4f5VAAE6g2O6h113V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09Uniti43E0VGAG13ConfigurationV_SdAA6SpringVSayAG0W4J14VGtFSdAXXEfU0_AL13ConfigurationVSdTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, double a3)
{
  int64_t v3;
  uint64_t v4;
  double *v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  char v16;
  __int128 v17;
  double v18[2];
  char v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v14;
    v8 = (double *)(a1 + 32);
    v15 = *(_OWORD *)(a2 + 80);
    v16 = *(_BYTE *)(a2 + 96);
    outlined init with take of Text.Effect.DurationFunction.Storage(&v15, (uint64_t)&v17);
    do
    {
      v9 = *v8;
      outlined init with take of Text.Effect.DurationFunction.Storage(&v17, (uint64_t)v18);
      v10 = 1.0;
      if ((v19 & 1) == 0)
        v10 = (1.0 - v9) * v18[0] + v9 * v18[1];
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      *(double *)(v14 + 8 * v12 + 32) = v10 * a3;
      v8 += 4;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  BOOL v15;

  if (a3 != a2)
  {
    v5 = *a4;
    v6 = a5 + 32;
    v7 = *(_QWORD *)(a5 + 16);
    v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    v9 = *(_QWORD *)(v5 + 8 * a3);
    v10 = (double *)(v6 + 32 * v9);
    v11 = result;
    v12 = (unint64_t *)v8;
    while (v9 < v7)
    {
      v13 = *v12;
      if (*v12 >= v7)
        goto LABEL_17;
      v14 = *(double *)(v6 + 32 * v13);
      if (*v10 < v14 || (*v10 == v14 ? (v15 = v9 >= v13) : (v15 = 1), !v15))
      {
        if (!v5)
          goto LABEL_18;
        *v12 = v9;
        v12[1] = v13;
        --v12;
        if (a3 != ++v11)
          continue;
      }
      ++a3;
      v8 += 8;
      if (a3 == a2)
        return result;
      goto LABEL_5;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  double v14;
  BOOL v15;

  if (a3 != a2)
  {
    v5 = *a4;
    v6 = a5 + 32;
    v7 = *(_QWORD *)(a5 + 16);
    v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    v9 = *(_QWORD *)(v5 + 8 * a3);
    v10 = result;
    v11 = (unint64_t *)v8;
    while (v9 < v7)
    {
      v12 = *v11;
      if (*v11 >= v7)
        goto LABEL_17;
      v13 = *(double *)(v6 + 8 * v9);
      v14 = *(double *)(v6 + 8 * v12);
      if (v13 < v14 || (v13 == v14 ? (v15 = v9 >= v12) : (v15 = 1), !v15))
      {
        if (!v5)
          goto LABEL_18;
        *v11 = v9;
        v11[1] = v12;
        --v11;
        if (a3 != ++v10)
          continue;
      }
      ++a3;
      v8 += 8;
      if (a3 == a2)
        return result;
      goto LABEL_5;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  _BOOL4 v20;
  Swift::Int v21;
  unint64_t v22;
  double v23;
  double v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  double *v32;
  Swift::Int v33;
  unint64_t *v34;
  unint64_t v35;
  double v36;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  Swift::Int v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  uint64_t v110;
  char *__dst;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  v4 = a1[1];
  swift_bridgeObjectRetain_n();
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_168;
    if (!v4)
      return swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
    if (!v117)
      return swift_bridgeObjectRelease_n();
    goto LABEL_139;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 >= -1)
  {
    v112 = a2;
    v108 = v4;
    v106 = v5;
    v104 = a1;
    if (v4 >= 2)
    {
      v7 = v6 >> 1;
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = v7;
      v105 = v8;
      __dst = (char *)(v8 + 32);
LABEL_13:
      v11 = 0;
      v12 = *a1;
      v107 = a2 + 32;
      v103 = *a1 - 8;
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = v4;
      v110 = *a1;
      while (1)
      {
        v14 = v11 + 1;
        if (v11 + 1 < v13)
        {
          v15 = *(_QWORD *)(v12 + 8 * v14);
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_164;
          v16 = *(_QWORD *)(a2 + 16);
          if (v15 >= v16)
            goto LABEL_165;
          v17 = *(_QWORD *)(v12 + 8 * v11);
          if (v17 >= v16)
            goto LABEL_166;
          v18 = *(double *)(v107 + 32 * v15);
          v19 = *(double *)(v107 + 32 * v17);
          if (v18 < v19)
          {
            v14 = v11 + 2;
            if (v11 + 2 < v13)
            {
              v20 = 1;
LABEL_26:
              if (v13 <= v14 + 1)
                v21 = v14 + 1;
              else
                v21 = v13;
              while (1)
              {
                v22 = *(_QWORD *)(v12 + 8 * v14);
                if (v22 >= v16)
                  goto LABEL_146;
                if (v15 >= v16)
                  break;
                v23 = *(double *)(v107 + 32 * v22);
                v24 = *(double *)(v107 + 32 * v15);
                if (v23 < v24)
                {
                  if (!v20)
                    goto LABEL_49;
                }
                else if (v23 == v24)
                {
                  if (((v20 ^ (v22 >= v15)) & 1) == 0)
                    goto LABEL_40;
                }
                else if (v20)
                {
                  goto LABEL_41;
                }
                ++v14;
                v15 = v22;
                if (v14 >= v13)
                {
                  v14 = v21;
                  goto LABEL_40;
                }
              }
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
              goto LABEL_159;
            }
LABEL_42:
            if (v11 < v14)
            {
              v25 = v14 - 1;
              v26 = v11;
              while (1)
              {
                if (v26 != v25)
                {
                  if (!v12)
                    goto LABEL_174;
                  v27 = *(_QWORD *)(v12 + 8 * v26);
                  *(_QWORD *)(v12 + 8 * v26) = *(_QWORD *)(v12 + 8 * v25);
                  *(_QWORD *)(v12 + 8 * v25) = v27;
                }
                v71 = ++v26 < v25--;
                if (!v71)
                  goto LABEL_49;
              }
            }
            goto LABEL_49;
          }
          if (v18 == v19)
          {
            v20 = v15 < v17;
            v14 = v11 + 2;
            if (v11 + 2 < v13)
              goto LABEL_26;
LABEL_40:
            if (!v20)
              goto LABEL_49;
LABEL_41:
            if (v14 < v11)
              goto LABEL_169;
            goto LABEL_42;
          }
          v14 = v11 + 2;
          if (v11 + 2 < v13)
          {
            v20 = 0;
            goto LABEL_26;
          }
        }
LABEL_49:
        if (v14 < v13)
        {
          if (__OFSUB__(v14, v11))
            goto LABEL_167;
          if (v14 - v11 < v106)
          {
            v28 = v11 + v106;
            if (__OFADD__(v11, v106))
              goto LABEL_170;
            if (v28 >= v13)
              v28 = v13;
            if (v28 < v11)
              goto LABEL_171;
            if (v14 != v28)
            {
              v29 = *(_QWORD *)(a2 + 16);
              v30 = (unint64_t *)(v103 + 8 * v14);
              do
              {
                v31 = *(_QWORD *)(v12 + 8 * v14);
                v32 = (double *)(v107 + 32 * v31);
                v33 = v11;
                v34 = v30;
                do
                {
                  if (v31 >= v29)
                  {
                    __break(1u);
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
LABEL_144:
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
                    goto LABEL_147;
                  }
                  v35 = *v34;
                  if (*v34 >= v29)
                    goto LABEL_141;
                  v36 = *(double *)(v107 + 32 * v35);
                  if (*v32 >= v36 && (*v32 != v36 || v31 >= v35))
                    break;
                  if (!v12)
                    goto LABEL_172;
                  *v34 = v31;
                  v34[1] = v35;
                  --v34;
                  ++v33;
                }
                while (v14 != v33);
                ++v14;
                ++v30;
              }
              while (v14 != v28);
              v14 = v28;
            }
          }
        }
        if (v14 < v11)
          goto LABEL_163;
        v109 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v39 = *((_QWORD *)v10 + 2);
        v38 = *((_QWORD *)v10 + 3);
        v113 = v10;
        v40 = v39 + 1;
        v12 = v110;
        if (v39 >= v38 >> 1)
        {
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v10);
          v12 = v110;
          v113 = v92;
        }
        *((_QWORD *)v113 + 2) = v40;
        v41 = v113 + 32;
        v42 = &v113[16 * v39 + 32];
        *(_QWORD *)v42 = v11;
        *((_QWORD *)v42 + 1) = v14;
        if (v39)
        {
          v10 = v113;
          while (1)
          {
            v43 = v40 - 1;
            if (v40 >= 4)
            {
              v48 = &v41[16 * v40];
              v49 = *((_QWORD *)v48 - 8);
              v50 = *((_QWORD *)v48 - 7);
              v54 = __OFSUB__(v50, v49);
              v51 = v50 - v49;
              if (v54)
                goto LABEL_148;
              v53 = *((_QWORD *)v48 - 6);
              v52 = *((_QWORD *)v48 - 5);
              v54 = __OFSUB__(v52, v53);
              v46 = v52 - v53;
              v47 = v54;
              if (v54)
                goto LABEL_149;
              v55 = v40 - 2;
              v56 = &v41[16 * v40 - 32];
              v58 = *(_QWORD *)v56;
              v57 = *((_QWORD *)v56 + 1);
              v54 = __OFSUB__(v57, v58);
              v59 = v57 - v58;
              if (v54)
                goto LABEL_151;
              v54 = __OFADD__(v46, v59);
              v60 = v46 + v59;
              if (v54)
                goto LABEL_154;
              if (v60 >= v51)
              {
                v78 = &v41[16 * v43];
                v80 = *(_QWORD *)v78;
                v79 = *((_QWORD *)v78 + 1);
                v54 = __OFSUB__(v79, v80);
                v81 = v79 - v80;
                if (v54)
                  goto LABEL_158;
                v71 = v46 < v81;
                goto LABEL_109;
              }
            }
            else
            {
              if (v40 != 3)
              {
                v72 = *((_QWORD *)v10 + 4);
                v73 = *((_QWORD *)v10 + 5);
                v54 = __OFSUB__(v73, v72);
                v65 = v73 - v72;
                v66 = v54;
                goto LABEL_103;
              }
              v45 = *((_QWORD *)v10 + 4);
              v44 = *((_QWORD *)v10 + 5);
              v54 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              v47 = v54;
            }
            if ((v47 & 1) != 0)
              goto LABEL_150;
            v55 = v40 - 2;
            v61 = &v41[16 * v40 - 32];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v64 = __OFSUB__(v62, v63);
            v65 = v62 - v63;
            v66 = v64;
            if (v64)
              goto LABEL_153;
            v67 = &v41[16 * v43];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v54 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v54)
              goto LABEL_156;
            if (__OFADD__(v65, v70))
              goto LABEL_157;
            if (v65 + v70 >= v46)
            {
              v71 = v46 < v70;
LABEL_109:
              if (v71)
                v43 = v55;
              goto LABEL_111;
            }
LABEL_103:
            if ((v66 & 1) != 0)
              goto LABEL_152;
            v74 = &v41[16 * v43];
            v76 = *(_QWORD *)v74;
            v75 = *((_QWORD *)v74 + 1);
            v54 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v54)
              goto LABEL_155;
            if (v77 < v65)
              goto LABEL_120;
LABEL_111:
            v82 = v43 - 1;
            if (v43 - 1 >= v40)
              goto LABEL_142;
            if (!v12)
              goto LABEL_173;
            v83 = v41;
            v84 = &v41[16 * v82];
            v85 = *(_QWORD *)v84;
            v86 = v43;
            v87 = &v83[16 * v43];
            v88 = *((_QWORD *)v87 + 1);
            v115 = (char *)(v12 + 8 * *(_QWORD *)v84);
            v89 = (char *)(v12 + 8 * *(_QWORD *)v87);
            v90 = v12 + 8 * v88;
            a2 = v112;
            swift_bridgeObjectRetain();
            specialized _merge<A>(low:mid:high:buffer:by:)(v115, v89, v90, __dst, v112);
            if (v117)
            {
LABEL_136:
              v102 = v105;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_138;
            }
            swift_bridgeObjectRelease();
            if (v88 < v85)
              goto LABEL_143;
            v10 = v113;
            if (v86 > *((_QWORD *)v113 + 2))
              goto LABEL_144;
            *(_QWORD *)v84 = v85;
            v41 = v113 + 32;
            *(_QWORD *)&v113[16 * v82 + 40] = v88;
            v91 = *((_QWORD *)v113 + 2);
            if (v86 >= v91)
              goto LABEL_145;
            v40 = v91 - 1;
            memmove(v87, v87 + 16, 16 * (v91 - 1 - v86));
            *((_QWORD *)v113 + 2) = v91 - 1;
            v12 = v110;
            if (v91 <= 2)
              goto LABEL_120;
          }
        }
        v40 = 1;
        v10 = v113;
LABEL_120:
        v13 = v108;
        v11 = v109;
        if (v109 >= v108)
          goto LABEL_124;
      }
    }
    v10 = (char *)MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v105 = MEMORY[0x24BEE4AF8];
    if (v4 == 1)
      goto LABEL_13;
    v40 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_124:
    if (v40 >= 2)
    {
      v93 = *v104;
      v116 = *v104;
      while (1)
      {
        v94 = v40 - 2;
        if (v40 < 2)
          break;
        if (!v93)
          goto LABEL_175;
        v114 = v10;
        v95 = *(_QWORD *)&v10[16 * v94 + 32];
        v96 = *(_QWORD *)&v10[16 * v40 + 24];
        v97 = (char *)(v93 + 8 * v95);
        v98 = (char *)(v93 + 8 * *(_QWORD *)&v10[16 * v40 + 16]);
        v99 = v93 + 8 * v96;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v97, v98, v99, __dst, v112);
        if (v117)
          goto LABEL_136;
        swift_bridgeObjectRelease();
        if (v96 < v95)
          goto LABEL_160;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
        v10 = v114;
        if (v94 >= *((_QWORD *)v114 + 2))
          goto LABEL_161;
        v100 = &v114[16 * v94 + 32];
        *(_QWORD *)v100 = v95;
        *((_QWORD *)v100 + 1) = v96;
        v101 = *((_QWORD *)v114 + 2);
        if (v40 > v101)
          goto LABEL_162;
        memmove(&v114[16 * v40 + 16], &v114[16 * v40 + 32], 16 * (v101 - v40));
        *((_QWORD *)v114 + 2) = v101 - 1;
        v40 = v101 - 1;
        v93 = v116;
        if (v101 <= 2)
          goto LABEL_137;
      }
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_173:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_174:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_175:
      swift_bridgeObjectRelease_n();
      __break(1u);
      goto LABEL_176;
    }
LABEL_137:
    swift_bridgeObjectRelease();
    v102 = v105;
LABEL_138:
    *(_QWORD *)(v102 + 16) = 0;
LABEL_139:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
LABEL_176:
  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  _BOOL4 v20;
  Swift::Int v21;
  unint64_t v22;
  double v23;
  double v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  Swift::Int v32;
  unint64_t *v33;
  unint64_t v34;
  double v35;
  double v36;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  Swift::Int v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  uint64_t v110;
  char *__dst;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  v4 = a1[1];
  swift_bridgeObjectRetain_n();
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_168;
    if (!v4)
      return swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
    if (!v117)
      return swift_bridgeObjectRelease_n();
    goto LABEL_139;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 >= -1)
  {
    v112 = a2;
    v108 = v4;
    v106 = v5;
    v104 = a1;
    if (v4 >= 2)
    {
      v7 = v6 >> 1;
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = v7;
      v105 = v8;
      __dst = (char *)(v8 + 32);
LABEL_13:
      v11 = 0;
      v12 = *a1;
      v107 = a2 + 32;
      v103 = *a1 - 8;
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = v4;
      v110 = *a1;
      while (1)
      {
        v14 = v11 + 1;
        if (v11 + 1 < v13)
        {
          v15 = *(_QWORD *)(v12 + 8 * v14);
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_164;
          v16 = *(_QWORD *)(a2 + 16);
          if (v15 >= v16)
            goto LABEL_165;
          v17 = *(_QWORD *)(v12 + 8 * v11);
          if (v17 >= v16)
            goto LABEL_166;
          v18 = *(double *)(v107 + 8 * v15);
          v19 = *(double *)(v107 + 8 * v17);
          if (v18 < v19)
          {
            v14 = v11 + 2;
            if (v11 + 2 < v13)
            {
              v20 = 1;
LABEL_26:
              if (v13 <= v14 + 1)
                v21 = v14 + 1;
              else
                v21 = v13;
              while (1)
              {
                v22 = v15;
                v15 = *(_QWORD *)(v12 + 8 * v14);
                if (v15 >= v16)
                  goto LABEL_146;
                if (v22 >= v16)
                  break;
                v23 = *(double *)(v107 + 8 * v15);
                v24 = *(double *)(v107 + 8 * v22);
                if (v23 < v24)
                {
                  if (!v20)
                    goto LABEL_49;
                }
                else if (v23 == v24)
                {
                  if (((v20 ^ (v15 >= v22)) & 1) == 0)
                    goto LABEL_40;
                }
                else if (v20)
                {
                  goto LABEL_41;
                }
                if (++v14 >= v13)
                {
                  v14 = v21;
                  goto LABEL_40;
                }
              }
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
              goto LABEL_159;
            }
LABEL_42:
            if (v11 < v14)
            {
              v25 = v14 - 1;
              v26 = v11;
              while (1)
              {
                if (v26 != v25)
                {
                  if (!v12)
                    goto LABEL_174;
                  v27 = *(_QWORD *)(v12 + 8 * v26);
                  *(_QWORD *)(v12 + 8 * v26) = *(_QWORD *)(v12 + 8 * v25);
                  *(_QWORD *)(v12 + 8 * v25) = v27;
                }
                v71 = ++v26 < v25--;
                if (!v71)
                  goto LABEL_49;
              }
            }
            goto LABEL_49;
          }
          if (v18 == v19)
          {
            v20 = v15 < v17;
            v14 = v11 + 2;
            if (v11 + 2 < v13)
              goto LABEL_26;
LABEL_40:
            if (!v20)
              goto LABEL_49;
LABEL_41:
            if (v14 < v11)
              goto LABEL_169;
            goto LABEL_42;
          }
          v14 = v11 + 2;
          if (v11 + 2 < v13)
          {
            v20 = 0;
            goto LABEL_26;
          }
        }
LABEL_49:
        if (v14 < v13)
        {
          if (__OFSUB__(v14, v11))
            goto LABEL_167;
          if (v14 - v11 < v106)
          {
            v28 = v11 + v106;
            if (__OFADD__(v11, v106))
              goto LABEL_170;
            if (v28 >= v13)
              v28 = v13;
            if (v28 < v11)
              goto LABEL_171;
            if (v14 != v28)
            {
              v29 = *(_QWORD *)(a2 + 16);
              v30 = (unint64_t *)(v103 + 8 * v14);
              do
              {
                v31 = *(_QWORD *)(v12 + 8 * v14);
                v32 = v11;
                v33 = v30;
                do
                {
                  if (v31 >= v29)
                  {
                    __break(1u);
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
LABEL_144:
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
                    goto LABEL_147;
                  }
                  v34 = *v33;
                  if (*v33 >= v29)
                    goto LABEL_141;
                  v35 = *(double *)(v107 + 8 * v31);
                  v36 = *(double *)(v107 + 8 * v34);
                  if (v35 >= v36 && (v35 != v36 || v31 >= v34))
                    break;
                  if (!v12)
                    goto LABEL_172;
                  *v33 = v31;
                  v33[1] = v34;
                  --v33;
                  ++v32;
                }
                while (v14 != v32);
                ++v14;
                ++v30;
              }
              while (v14 != v28);
              v14 = v28;
            }
          }
        }
        if (v14 < v11)
          goto LABEL_163;
        v109 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v39 = *((_QWORD *)v10 + 2);
        v38 = *((_QWORD *)v10 + 3);
        v113 = v10;
        v40 = v39 + 1;
        v12 = v110;
        if (v39 >= v38 >> 1)
        {
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v10);
          v12 = v110;
          v113 = v92;
        }
        *((_QWORD *)v113 + 2) = v40;
        v41 = v113 + 32;
        v42 = &v113[16 * v39 + 32];
        *(_QWORD *)v42 = v11;
        *((_QWORD *)v42 + 1) = v14;
        if (v39)
        {
          v10 = v113;
          while (1)
          {
            v43 = v40 - 1;
            if (v40 >= 4)
            {
              v48 = &v41[16 * v40];
              v49 = *((_QWORD *)v48 - 8);
              v50 = *((_QWORD *)v48 - 7);
              v54 = __OFSUB__(v50, v49);
              v51 = v50 - v49;
              if (v54)
                goto LABEL_148;
              v53 = *((_QWORD *)v48 - 6);
              v52 = *((_QWORD *)v48 - 5);
              v54 = __OFSUB__(v52, v53);
              v46 = v52 - v53;
              v47 = v54;
              if (v54)
                goto LABEL_149;
              v55 = v40 - 2;
              v56 = &v41[16 * v40 - 32];
              v58 = *(_QWORD *)v56;
              v57 = *((_QWORD *)v56 + 1);
              v54 = __OFSUB__(v57, v58);
              v59 = v57 - v58;
              if (v54)
                goto LABEL_151;
              v54 = __OFADD__(v46, v59);
              v60 = v46 + v59;
              if (v54)
                goto LABEL_154;
              if (v60 >= v51)
              {
                v78 = &v41[16 * v43];
                v80 = *(_QWORD *)v78;
                v79 = *((_QWORD *)v78 + 1);
                v54 = __OFSUB__(v79, v80);
                v81 = v79 - v80;
                if (v54)
                  goto LABEL_158;
                v71 = v46 < v81;
                goto LABEL_109;
              }
            }
            else
            {
              if (v40 != 3)
              {
                v72 = *((_QWORD *)v10 + 4);
                v73 = *((_QWORD *)v10 + 5);
                v54 = __OFSUB__(v73, v72);
                v65 = v73 - v72;
                v66 = v54;
                goto LABEL_103;
              }
              v45 = *((_QWORD *)v10 + 4);
              v44 = *((_QWORD *)v10 + 5);
              v54 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              v47 = v54;
            }
            if ((v47 & 1) != 0)
              goto LABEL_150;
            v55 = v40 - 2;
            v61 = &v41[16 * v40 - 32];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v64 = __OFSUB__(v62, v63);
            v65 = v62 - v63;
            v66 = v64;
            if (v64)
              goto LABEL_153;
            v67 = &v41[16 * v43];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v54 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v54)
              goto LABEL_156;
            if (__OFADD__(v65, v70))
              goto LABEL_157;
            if (v65 + v70 >= v46)
            {
              v71 = v46 < v70;
LABEL_109:
              if (v71)
                v43 = v55;
              goto LABEL_111;
            }
LABEL_103:
            if ((v66 & 1) != 0)
              goto LABEL_152;
            v74 = &v41[16 * v43];
            v76 = *(_QWORD *)v74;
            v75 = *((_QWORD *)v74 + 1);
            v54 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v54)
              goto LABEL_155;
            if (v77 < v65)
              goto LABEL_120;
LABEL_111:
            v82 = v43 - 1;
            if (v43 - 1 >= v40)
              goto LABEL_142;
            if (!v12)
              goto LABEL_173;
            v83 = &v41[16 * v82];
            v84 = v41;
            v85 = *(_QWORD *)v83;
            v86 = v43;
            v87 = &v84[16 * v43];
            v88 = *((_QWORD *)v87 + 1);
            v115 = (char *)(v12 + 8 * *(_QWORD *)v83);
            v89 = (char *)(v12 + 8 * *(_QWORD *)v87);
            v90 = v12 + 8 * v88;
            a2 = v112;
            swift_bridgeObjectRetain();
            specialized _merge<A>(low:mid:high:buffer:by:)(v115, v89, v90, __dst, v112);
            if (v117)
            {
LABEL_136:
              v102 = v105;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_138;
            }
            swift_bridgeObjectRelease();
            if (v88 < v85)
              goto LABEL_143;
            v10 = v113;
            if (v86 > *((_QWORD *)v113 + 2))
              goto LABEL_144;
            *(_QWORD *)v83 = v85;
            v41 = v113 + 32;
            *(_QWORD *)&v113[16 * v82 + 40] = v88;
            v91 = *((_QWORD *)v113 + 2);
            if (v86 >= v91)
              goto LABEL_145;
            v40 = v91 - 1;
            memmove(v87, v87 + 16, 16 * (v91 - 1 - v86));
            *((_QWORD *)v113 + 2) = v91 - 1;
            v12 = v110;
            if (v91 <= 2)
              goto LABEL_120;
          }
        }
        v40 = 1;
        v10 = v113;
LABEL_120:
        v13 = v108;
        v11 = v109;
        if (v109 >= v108)
          goto LABEL_124;
      }
    }
    v10 = (char *)MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v105 = MEMORY[0x24BEE4AF8];
    if (v4 == 1)
      goto LABEL_13;
    v40 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_124:
    if (v40 >= 2)
    {
      v93 = *v104;
      v116 = *v104;
      while (1)
      {
        v94 = v40 - 2;
        if (v40 < 2)
          break;
        if (!v93)
          goto LABEL_175;
        v114 = v10;
        v95 = *(_QWORD *)&v10[16 * v94 + 32];
        v96 = *(_QWORD *)&v10[16 * v40 + 24];
        v97 = (char *)(v93 + 8 * v95);
        v98 = (char *)(v93 + 8 * *(_QWORD *)&v10[16 * v40 + 16]);
        v99 = v93 + 8 * v96;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v97, v98, v99, __dst, v112);
        if (v117)
          goto LABEL_136;
        swift_bridgeObjectRelease();
        if (v96 < v95)
          goto LABEL_160;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
        v10 = v114;
        if (v94 >= *((_QWORD *)v114 + 2))
          goto LABEL_161;
        v100 = &v114[16 * v94 + 32];
        *(_QWORD *)v100 = v95;
        *((_QWORD *)v100 + 1) = v96;
        v101 = *((_QWORD *)v114 + 2);
        if (v40 > v101)
          goto LABEL_162;
        memmove(&v114[16 * v40 + 16], &v114[16 * v40 + 32], 16 * (v101 - v40));
        *((_QWORD *)v114 + 2) = v101 - 1;
        v40 = v101 - 1;
        v93 = v116;
        if (v101 <= 2)
          goto LABEL_137;
      }
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_173:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_174:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_175:
      swift_bridgeObjectRelease_n();
      __break(1u);
      goto LABEL_176;
    }
LABEL_137:
    swift_bridgeObjectRelease();
    v102 = v105;
LABEL_138:
    *(_QWORD *)(v102 + 16) = 0;
LABEL_139:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
LABEL_176:
  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

double specialized Text.Effect.Timing.Chunk.init(configuration:spring:chunk:content:)(uint64_t a1, __int128 *a2, unint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t *v19;
  double v20;
  Swift::Double v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  v14 = type metadata accessor for FragmentRangeSequence(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v27 = MEMORY[0x24BEE4AF8];
  v28 = MEMORY[0x24BEE4AF8];
  v29 = MEMORY[0x24BEE4AF8];
  v30 = 0.0;
  outlined init with copy of TypesettingLanguage(a7, (uint64_t)v16, type metadata accessor for Text.Effect.BaseContent);
  v18 = (unint64_t *)&v16[*(int *)(v14 + 20)];
  *v18 = a3;
  v18[1] = a4;
  v19 = (uint64_t *)&v16[*(int *)(v14 + 24)];
  *v19 = a5;
  v19[1] = a6;
  specialized Sequence.reduce<A>(_:_:)((uint64_t)v16, 0.0);
  v21 = v20;
  outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for FragmentRangeSequence);
  Text.Effect.Timing.Chunk.computeInfos(configuration:chunk:content:)(a1, a3, a4, a5, a6, a7);
  v25 = v24;
  v26 = v17;
  v22 = v27;
  swift_bridgeObjectRetain();
  Text.Effect.Timing.Chunk.computeTimings(configuration:lineCoverage:spring:from:)(a1, (double *)&v25, v22, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of TypesettingConfiguration(a7, type metadata accessor for Text.Effect.BaseContent);
  return v30;
}

uint64_t outlined init with take of Text.Effect.DurationFunction.Storage(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t outlined retain of Text.Effect.Timing.Configuration(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Text.Effect.Timing.Configuration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

BOOL partial apply for specialized closure #1 in Sequence<>.contains(_:)(_DWORD *a1)
{
  uint64_t v1;

  return *a1 == **(_DWORD **)(v1 + 16);
}

uint64_t outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of IndexingIterator<Text.Effect.BaseContent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *assignWithCopy for Text.Effect.DelayFunction.Element(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Text.Effect.DelayFunction.Element(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.DelayFunction.Element()
{
  return &type metadata for Text.Effect.DelayFunction.Element;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.Chunk.Fragment()
{
  return &type metadata for Text.Effect.Timing.Chunk.Fragment;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.ClusterDurationFunction.Storage(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t getEnumTag for Text.Effect.ClusterDurationFunction.Storage(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for Text.Effect.ClusterDurationFunction.Storage(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterDurationFunction.Storage()
{
  return &type metadata for Text.Effect.ClusterDurationFunction.Storage;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.UnitGlyphTiming()
{
  return &type metadata for Text.Effect.Timing.UnitGlyphTiming;
}

uint64_t getEnumTag for Text.Effect.FragmentSeparationFunction.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for Text.Effect.FragmentSeparationFunction.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for Text.Effect.FragmentSeparationFunction.Storage()
{
  return &unk_250649668;
}

ValueMetadata *type metadata accessor for Text.Effect.DurationFunction.Storage()
{
  return &type metadata for Text.Effect.DurationFunction.Storage;
}

uint64_t destroy for Text.Effect.Timing.Chunk()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Text.Effect.Timing.Chunk(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.Timing.Chunk(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for Text.Effect.Timing.Chunk(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Timing.Chunk(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Timing.Chunk(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.Chunk()
{
  return &type metadata for Text.Effect.Timing.Chunk;
}

uint64_t initializeWithCopy for Text.Effect.Timing.GlyphInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.Timing.GlyphInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

_QWORD *assignWithTake for Text.Effect.Timing.GlyphInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.GlyphInfo()
{
  return &type metadata for Text.Effect.Timing.GlyphInfo;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Timing.GlyphTiming(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Timing.GlyphTiming(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.GlyphTiming()
{
  return &type metadata for Text.Effect.Timing.GlyphTiming;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.Fragment()
{
  return &type metadata for Text.Effect.Timing.Fragment;
}

uint64_t destroy for Text.Effect.Timing()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.Timing(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.Timing(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Text.Effect.Timing(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Timing(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Timing(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing()
{
  return &type metadata for Text.Effect.Timing;
}

ValueMetadata *type metadata accessor for Text.Effect.DurationFunction()
{
  return &type metadata for Text.Effect.DurationFunction;
}

uint64_t getEnumTagSinglePayload for Text.Effect.FragmentSeparationFunction.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.FragmentSeparationFunction.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.FragmentSeparationFunction()
{
  return &type metadata for Text.Effect.FragmentSeparationFunction;
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterDurationFunction()
{
  return &type metadata for Text.Effect.ClusterDurationFunction;
}

ValueMetadata *type metadata accessor for Text.Effect.DelayFunction()
{
  return &type metadata for Text.Effect.DelayFunction;
}

void static EmptyHoverEffectContent._makeHoverEffectContent(effect:inputs:body:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall EmptyHoverEffectContent.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for static HoverEffectContent._makeHoverEffectContent(effect:inputs:body:) in conformance EmptyHoverEffectContent()
{
  _diagnoseUnavailableCodeReached()();
}

void _HoverEffectContentInputs.base.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentInputs.base.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentInputs.base.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentInputs.isActive.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentInputs.isActive.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentInputs.init(base:isActive:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentOutputs.content.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentOutputs.content.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _HoverEffectContentOutputs.init(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HoverEffectContent.geometryEffect<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HoverEffectContent.concat<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static ModifiedContent<>._makeHoverEffectContent(effect:inputs:body:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HoverEffectContentList.Item.identity.getter(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *HoverEffectContentList.Item.identity.setter(_DWORD *result)
{
  _DWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*HoverEffectContentList.Item.identity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void HoverEffectContentList.Item.version.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *HoverEffectContentList.Item.version.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*HoverEffectContentList.Item.version.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t HoverEffectContentList.Item.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t HoverEffectContentList.Item.value.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*HoverEffectContentList.Item.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_DWORD *HoverEffectContentList.Item.init(identity:version:value:)@<X0>(_DWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a3;
  *(_DWORD *)a4 = *result;
  *(_QWORD *)(a4 + 8) = v4;
  *(_QWORD *)(a4 + 16) = v5;
  return result;
}

BOOL static HoverEffectContentList.Item.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

void HoverEffectContentList.Item.affectsBoundsForHitTesting.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_234CA6574()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v11 = v0;
  v8 = swift_retain();
  if (v7)
  {
    v9 = ((uint64_t (*)(uint64_t))HoverEffectContentList.Item.affectsBoundsForHitTesting.getter)(v8);
    outlined consume of HoverEffectContentList.Effect(v5, v4, v3, v2, v1, v11, v6);
    swift_release();
  }
  else
  {
    outlined consume of HoverEffectContentList.Effect(v5, v4, v3, v2, v1, v11, v6);
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t outlined copy of HoverEffectContentList.Effect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, char a7)
{
  if (a7 == 4)
  {
    swift_retain();
    return swift_retain();
  }
  else if (a7 == 3 || a7 == 2)
  {
    return outlined copy of Path.Storage(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined consume of HoverEffectContentList.Effect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, char a7)
{
  if (a7 == 4)
  {
    swift_release();
    return swift_release();
  }
  else if (a7 == 3 || a7 == 2)
  {
    return outlined consume of Path.Storage(result, a2, a3, a4, a5);
  }
  return result;
}

void HoverEffectContentList.Item.transform.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_234CA67CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGAffineTransform *a9, CGAffineTransform *t2, CGAffineTransform *t1, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t t2a,uint64_t t2_8,uint64_t t2_16,uint64_t t2_24,uint64_t t2_32,uint64_t t2_40,uint64_t t1a,uint64_t t1_8,uint64_t t1_16,uint64_t t1_24,uint64_t t1_32,uint64_t t1_40,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v62 = swift_retain();
  if (v60)
  {
    v63 = v55;
    v64 = v56;
    v78 = v54;
    ((void (*)(uint64_t))HoverEffectContentList.Item.transform.getter)(v62);
    v77 = v53;
    v79 = *(_QWORD *)(v61 - 200);
    v66 = *(_QWORD *)(v61 - 192);
    v65 = *(_QWORD *)(v61 - 184);
    v67 = v63;
    v69 = *(_QWORD *)(v61 - 176);
    v68 = *(_QWORD *)(v61 - 168);
    v70 = *(_BYTE *)(v61 - 160);
    v71 = v64;
    v72 = *(_QWORD *)(v61 - 208);
    outlined consume of HoverEffectContentList.Effect(v80, v57, v58, v59, v71, v78, v67);
    result = swift_release();
    v74 = v69;
    v75 = v65;
    v76 = v79;
    v53 = v77;
  }
  else
  {
    result = outlined consume of HoverEffectContentList.Effect(v80, v57, v58, v59, v56, v54, v55);
    v72 = 0;
    v76 = 0;
    v66 = 0;
    v75 = 0;
    v74 = 0;
    v68 = 0;
    v70 = 1;
  }
  *(_QWORD *)v53 = v72;
  *(_QWORD *)(v53 + 8) = v76;
  *(_QWORD *)(v53 + 16) = v66;
  *(_QWORD *)(v53 + 24) = v75;
  *(_QWORD *)(v53 + 32) = v74;
  *(_QWORD *)(v53 + 40) = v68;
  *(_BYTE *)(v53 + 48) = v70;
  return result;
}

void HoverEffectContentList.transform.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  if (*(_QWORD *)(v1 + 16))
  {
    HoverEffectContentList.Item.transform.getter();
    v3 = v7;
    v4 = v8;
    v5 = v9;
    v6 = v10;
  }
  else
  {
    v3 = 0uLL;
    v6 = 1;
    v4 = 0uLL;
    v5 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = v6;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContentList.Item(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t HoverEffectContentList.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  return swift_retain();
}

__n128 HoverEffectContentList.item.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_release();
  result = v4;
  *v1 = v4;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*HoverEffectContentList.item.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 HoverEffectContentList.init(item:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

BOOL specialized static HoverEffectContentList.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[2];
  if (a1[2])
  {
    if (v2)
      return *a1 == *a2 && a1[1] == a2[1];
    swift_retain();
  }
  else if (!v2)
  {
    return 1;
  }
  swift_release();
  return 0;
}

uint64_t dispatch thunk of static HoverEffectContent._makeHoverEffectContent(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

ValueMetadata *type metadata accessor for EmptyHoverEffectContent()
{
  return &type metadata for EmptyHoverEffectContent;
}

uint64_t initializeWithCopy for _HoverEffectContentInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _HoverEffectContentInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _HoverEffectContentInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for _HoverEffectContentInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 89))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _HoverEffectContentInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _HoverEffectContentInputs()
{
  return &type metadata for _HoverEffectContentInputs;
}

ValueMetadata *type metadata accessor for _HoverEffectContentOutputs()
{
  return &type metadata for _HoverEffectContentOutputs;
}

ValueMetadata *type metadata accessor for HoverEffectContentList()
{
  return &type metadata for HoverEffectContentList;
}

uint64_t initializeBufferWithCopyOfBuffer for HoverEffectContentList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HoverEffectContentList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for HoverEffectContentList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for HoverEffectContentList.Item()
{
  return &type metadata for HoverEffectContentList.Item;
}

_QWORD *__swift_initWithCopy_strong(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t __swift_destroy_strong()
{
  return swift_release();
}

_QWORD *__swift_assignWithCopy_strong(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_assignWithTake_strong(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectContentList.Item.Value(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContentList.Item.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContentList.Item.Value()
{
  return &type metadata for HoverEffectContentList.Item.Value;
}

uint64_t destroy for HoverEffectContentList.Effect(uint64_t a1)
{
  return outlined consume of HoverEffectContentList.Effect(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for HoverEffectContentList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of HoverEffectContentList.Effect(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for HoverEffectContentList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of HoverEffectContentList.Effect(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of HoverEffectContentList.Effect(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for HoverEffectContentList.Effect(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of HoverEffectContentList.Effect(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectContentList.Effect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContentList.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for HoverEffectContentList.Effect(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 4u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for HoverEffectContentList.Effect(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContentList.Effect()
{
  return &type metadata for HoverEffectContentList.Effect;
}

uint64_t sub_234CA7454(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t outlined init with take of CGAffineTransform?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for CGAffineTransform?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGAffineTransform?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CGAffineTransform?)
  {
    type metadata accessor for CGAffineTransform(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGAffineTransform?);
  }
}

void HoverEffectContent.rendererEffect<A>(_:)()
{
  HoverEffectContent.geometryEffect<A>(_:)();
}

uint64_t specialized static Animatable._makeAnimatable(value:inputs:)(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<EdgeInsets>, (uint64_t (*)(void))lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ViewOrigin>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewOrigin and conformance ViewOrigin, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<StrokeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type StrokeStyle and conformance StrokeStyle, (uint64_t)&type metadata for StrokeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BlurEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect, (uint64_t)&type metadata for _BlurEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_OffsetEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect, (uint64_t)&type metadata for _OffsetEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShadowEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedGradient>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient, (uint64_t)&type metadata for ResolvedGradient, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Style>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Fill>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<VariableBlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedShadowStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedShadowStyle and conformance ResolvedShadowStyle, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RectangleCornerRadii>, (uint64_t (*)(void))lazy protocol witness table accessor for type RectangleCornerRadii and conformance RectangleCornerRadii, (uint64_t)&type metadata for RectangleCornerRadii, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMultiplyEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMonochromeEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<Angle>, (uint64_t)&type metadata for Angle, (uint64_t)&protocol witness table for Angle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Color.ResolvedVibrant>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant, (uint64_t)&type metadata for Color.ResolvedVibrant, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnitRect>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitRect and conformance UnitRect, (uint64_t)&type metadata for UnitRect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ViewSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewSize and conformance ViewSize, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<BlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BlurStyle and conformance BlurStyle, (uint64_t)&type metadata for BlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnitPoint>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitPoint and conformance UnitPoint, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ViewFrame>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame, (uint64_t)&type metadata for ViewFrame, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>();
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for CGRect(0);
    type metadata accessor for AnimatableAttribute<CGRect>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatableAttribute<CGRect> and conformance AnimatableAttribute<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableAttribute<CGRect>, (uint64_t)&protocol conformance descriptor for AnimatableAttribute<A>);
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for CGSize(0);
    type metadata accessor for AnimatableAttribute<CGSize>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatableAttribute<CGSize> and conformance AnimatableAttribute<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableAttribute<CGSize>, (uint64_t)&protocol conformance descriptor for AnimatableAttribute<A>);
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for CGPoint(0);
    type metadata accessor for AnimatableAttribute<CGPoint>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableAttribute<CGPoint>, (uint64_t)&protocol conformance descriptor for AnimatableAttribute<A>);
    *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

_DWORD *specialized static Animatable._makeAnimatable(value:inputs:)(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE v10[80];
  _DWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = result;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_DWORD *)(a2 + 28);
    v7 = *result;
    swift_beginAccess();
    v8 = *(_DWORD *)(v4 + 16);
    v11[0] = v7;
    v11[1] = v8;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11[2] = v5;
    v11[3] = v3;
    v15 = 0;
    v11[4] = v6;
    outlined init with copy of AnimatableAttribute<AnyShape>((uint64_t)v11, (uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v11, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    *v2 = v9;
    AGGraphGetFlags();
    return (_DWORD *)AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE v10[80];
  _DWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 36) & 1) == 0)
  {
    v2 = result;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_DWORD *)(a2 + 28);
    v7 = *result;
    swift_beginAccess();
    v8 = *(_DWORD *)(v4 + 16);
    v11[0] = v7;
    v11[1] = v8;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11[2] = v5;
    v11[3] = v3;
    v15 = 0;
    v11[4] = v6;
    outlined init with copy of AnimatableAttribute<AnyShape>((uint64_t)v11, (uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout);
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v11, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout);
    *v2 = v9;
    AGGraphGetFlags();
    return (_DWORD *)AGGraphSetFlags();
  }
  return result;
}

uint64_t View.opacity(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return View.modifier<A>(_:)(&v4, a1, &type metadata for _OpacityEffect, a2);
}

void _OpacityEffect.opacity.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_OpacityEffect.opacity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _OpacityEffect.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*_OpacityEffect.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

float _OpacityEffect.effectValue(size:)@<S0>(uint64_t a1@<X8>, double a2@<D2>)
{
  float result;

  result = a2;
  *(_QWORD *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 4;
  return result;
}

uint64_t static _OpacityEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _OWORD v26[3];
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = a2[2];
  v8 = a2[4];
  v27 = a2[3];
  v28 = v8;
  v29 = *((_DWORD *)a2 + 20);
  v9 = a2[1];
  v26[0] = *a2;
  v26[1] = v9;
  v26[2] = v7;
  v31 = v9;
  v32 = v7;
  v30 = v26[0];
  v10 = BYTE4(v7);
  if ((BYTE4(v7) & 0x20) == 0)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v13 = *(_QWORD *)(v27 + 16);
    if (!v13)
    {
LABEL_6:
      v15 = a2[3];
      v22 = a2[2];
      v23 = v15;
      v24 = a2[4];
      v25 = *((_DWORD *)a2 + 20);
      v16 = a2[1];
      v20 = *a2;
      v21 = v16;
      v17 = swift_retain();
      closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)(v17, (uint64_t)&v20, a3, v6, a4);
      return swift_release();
    }
    v14 = (_QWORD *)(v27 + 32);
    while (*v14 != v12)
    {
      v14 += 2;
      if (!--v13)
        goto LABEL_6;
    }
  }
  swift_retain();
  if ((v10 & 1) != 0)
  {
    swift_retain_n();
    v19 = v6;
  }
  else
  {
    swift_beginAccess();
    *(_QWORD *)&v20 = __PAIR64__(*(_DWORD *)(v31 + 16), v6);
    *((_QWORD *)&v20 + 1) = __PAIR64__(DWORD2(v30), DWORD2(v31));
    LODWORD(v21) = HIDWORD(v31);
    *((_QWORD *)&v21 + 1) = 0;
    LOBYTE(v22) = 1;
    *((_QWORD *)&v22 + 1) = 0;
    LODWORD(v23) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    swift_retain_n();
    outlined retain of _GraphInputs((uint64_t)&v30);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>();
    v19 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)&v30);
  }
  swift_retain();
  specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v19, (uint64_t)v26, a3, v6, a4);
  return swift_release_n();
}

double closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unsigned int a4@<W4>, double *a5@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double result;
  double *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v49;
  double v50;
  unint64_t v51;
  id v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v17 = *(_DWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 68);
  v19 = *(_DWORD *)(a2 + 72);
  v20 = *(_DWORD *)(a2 + 76);
  v21 = *(_DWORD *)(a2 + 80);
  v51 = *(_QWORD *)a2;
  v46 = v9;
  v47 = v7;
  LODWORD(v52) = v7;
  v53 = v8;
  v54 = v9;
  v55 = v10;
  v44 = v11;
  v45 = v10;
  v56 = v11;
  v57 = v12;
  v42 = v15;
  v43 = v12;
  v58 = v13;
  v59 = v14;
  v60 = v15;
  v61 = v16;
  v40 = v17;
  v41 = v16;
  v62 = v17;
  v63 = v18;
  v39 = v18;
  v38 = v19;
  v64 = v19;
  v65 = v20;
  v66 = v21;
  a3(&v49, a1, &v51);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v24 = v22;
    v25 = 32;
    while (*(_QWORD *)(v14 + v25) != v22)
    {
      v25 += 16;
      if (!--v23)
        goto LABEL_13;
    }
    v26 = *(_QWORD *)(v49 + 16);
    v37 = a5;
    if (v26)
    {
      v27 = (_DWORD *)(v49 + 48);
      while (*((_QWORD *)v27 - 2) != v22)
      {
        v27 += 6;
        if (!--v26)
        {
          v27 = (_DWORD *)MEMORY[0x24BE096C0];
          break;
        }
      }
    }
    else
    {
      v27 = (_DWORD *)MEMORY[0x24BE096C0];
    }
    v28 = *v27;
    type metadata accessor for OpacityViewResponder();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 208) = 0x3FF0000000000000;
    v51 = v6;
    LODWORD(v52) = v47;
    v53 = v8;
    v54 = v46;
    v55 = v45;
    v56 = v44;
    v57 = v43;
    v58 = v13;
    v59 = v14;
    v60 = v42;
    v61 = v41;
    v62 = v40;
    v63 = v39;
    v64 = v38;
    v65 = v20;
    v66 = v21;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = specialized DefaultLayoutViewResponder.init(inputs:)((uint64_t *)&v51, v29);
    swift_release();
    v51 = __PAIR64__(v28, a4);
    v52 = v30;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for [ViewResponder](0);
    lazy protocol witness table accessor for type OpacityResponderFilter and conformance OpacityResponderFilter();
    LODWORD(v29) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v51) = 0;
    PreferencesOutputs.subscript.setter(v29, v24, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v31);
    a5 = v37;
  }
LABEL_13:
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.getter(v6);
  v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  v34 = swift_release_n();
  v35 = MEMORY[0x24BDAC7A8](v34);
  v51 = v6;
  LODWORD(v52) = v47;
  v53 = v8;
  v54 = v46;
  v55 = v45;
  v56 = v44;
  v57 = v43;
  v58 = v13;
  v59 = v14;
  v60 = v42;
  v61 = v41;
  v62 = v40;
  v63 = v39;
  v64 = v38;
  v65 = v20;
  v66 = v21;
  (*(void (**)(uint64_t (*)(), double))(v33 + 8))(partial apply for implicit closure #1 in closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:), v35);
  *(_QWORD *)a5 = v49;
  result = v50;
  a5[1] = v50;
  return result;
}

uint64_t _ViewInputs.opacityAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = *(_OWORD *)(a2 + 16);
  v24 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 32);
  v25 = v8;
  v26 = v9;
  v10 = BYTE4(v9);
  if ((BYTE4(v9) & 0x20) == 0)
  {
    v11 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v13 = *(_QWORD *)(v11 + 16);
    if (!v13)
    {
LABEL_6:
      v15 = *(_OWORD *)(a2 + 48);
      v20 = *(_OWORD *)(a2 + 32);
      v21 = v15;
      v22 = *(_OWORD *)(a2 + 64);
      v23 = *(_DWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = v16;
      return a3();
    }
    v14 = (_QWORD *)(v11 + 32);
    while (*v14 != v12)
    {
      v14 += 2;
      if (!--v13)
        goto LABEL_6;
    }
  }
  if ((v10 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)&v18 = __PAIR64__(*(_DWORD *)(v25 + 16), a1);
    *((_QWORD *)&v18 + 1) = __PAIR64__(DWORD2(v24), DWORD2(v25));
    LODWORD(v19) = HIDWORD(v25);
    *((_QWORD *)&v19 + 1) = 0;
    LOBYTE(v20) = 1;
    *((_QWORD *)&v20 + 1) = 0;
    LODWORD(v21) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)&v24);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>();
    a1 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)&v24);
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))a3, a4);
}

{
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = *(_OWORD *)(a2 + 16);
  v24 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 32);
  v25 = v8;
  v26 = v9;
  v10 = BYTE4(v9);
  if ((BYTE4(v9) & 0x20) == 0)
  {
    v11 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v13 = *(_QWORD *)(v11 + 16);
    if (!v13)
    {
LABEL_6:
      v15 = *(_OWORD *)(a2 + 48);
      v20 = *(_OWORD *)(a2 + 32);
      v21 = v15;
      v22 = *(_OWORD *)(a2 + 64);
      v23 = *(_DWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = v16;
      return a3();
    }
    v14 = (_QWORD *)(v11 + 32);
    while (*v14 != v12)
    {
      v14 += 2;
      if (!--v13)
        goto LABEL_6;
    }
  }
  if ((v10 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)&v18 = __PAIR64__(*(_DWORD *)(v25 + 16), a1);
    *((_QWORD *)&v18 + 1) = __PAIR64__(DWORD2(v24), DWORD2(v25));
    LODWORD(v19) = HIDWORD(v25);
    *((_QWORD *)&v19 + 1) = 0;
    *(_QWORD *)&v20 = 0;
    DWORD2(v20) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)&v24);
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>();
    a1 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)&v24);
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))a3, a4);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMonochromeEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMultiplyEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<VariableBlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShadowEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

{
  uint64_t (*v4)(void);
  unsigned int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v4 = a3;
  v6 = a1;
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 36);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = a3;
    v7 = a4;
    v6 = a1;
    v13 = *(_QWORD *)(v9 + 16);
    if (!v13)
      return v4();
    for (i = (_QWORD *)(v9 + 32); *i != v12; i += 2)
    {
      if (!--v13)
        return v4();
    }
  }
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BlurEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect, (uint64_t)&type metadata for _BlurEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>();
    v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v4, v7);
}

uint64_t specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

uint64_t specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t (*v14)(_QWORD, _QWORD, _QWORD, _QWORD);

  if ((*(_BYTE *)(a2 + 36) & 0x20) == 0)
  {
    v9 = *(_QWORD *)(a2 + 48);
    v14 = a5;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    a5 = v14;
    v11 = *(_QWORD *)(v9 + 16);
    if (!v11)
      return a3();
    for (i = (_QWORD *)(v9 + 32); *i != v10; i += 2)
    {
      if (!--v11)
        return a3();
    }
  }
  return a5(a1, a2, a3, a4);
}

uint64_t static _OpacityEffect.isScrapeable.getter()
{
  return 1;
}

uint64_t _OpacityEffect.scrapeableContent.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t result;

  result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *a1 = result | 0x7000000000000000;
  return result;
}

BOOL static _OpacityEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

float protocol witness for _RendererEffect.effectValue(size:) in conformance _OpacityEffect@<S0>(uint64_t a1@<X8>)
{
  double *v1;
  float result;

  result = *v1;
  *(_QWORD *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 4;
  return result;
}

uint64_t protocol witness for _RendererEffect.scrapeableContent.getter in conformance _OpacityEffect@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a1 = result | 0x7000000000000000;
  return result;
}

double OpacityRendererEffect.opacity.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*OpacityRendererEffect.opacity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::OpacityRendererEffect __swiftcall OpacityRendererEffect.init(opacity:)(SwiftUI::OpacityRendererEffect opacity)
{
  SwiftUI::OpacityRendererEffect *v1;

  v1->opacity = opacity.opacity;
  return opacity;
}

SwiftUI::OpacityRendererEffect __swiftcall OpacityRendererEffect.init(isHidden:)(Swift::Bool isHidden)
{
  double *v1;
  SwiftUI::OpacityRendererEffect result;

  result.opacity = 1.0;
  if (isHidden)
    result.opacity = 0.0;
  *v1 = result.opacity;
  return result;
}

double OpacityRendererEffect.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*OpacityRendererEffect.animatableData.modify(_QWORD *a1))()
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

float OpacityRendererEffect.effectValue(size:)@<S0>(uint64_t a1@<X8>)
{
  double *v1;
  float result;

  result = *v1;
  *(_QWORD *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 4;
  return result;
}

uint64_t static OpacityRendererEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OpacityRendererEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t one-time initialization function for opacity()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TransitionBox<OpacityTransition>, (uint64_t (*)(void))lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition, (uint64_t)&type metadata for OpacityTransition, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TransitionBox);
  result = swift_allocObject();
  static AnyTransition.opacity = result;
  return result;
}

uint64_t static AnyTransition.opacity.getter()
{
  if (one-time initialization token for opacity != -1)
    swift_once();
  return swift_retain();
}

float *_OpacityEffect.encode(to:)(float *result, double a2)
{
  float v2;
  float *v3;
  uint64_t v4;

  v2 = a2;
  if (v2 != 1.0)
  {
    v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    v4 = *((_QWORD *)v3 + 1);
    result = (float *)(v4 + 4);
    if (__OFADD__(v4, 4))
    {
      __break(1u);
    }
    else if (*((_QWORD *)v3 + 2) >= (uint64_t)result)
    {
      *((_QWORD *)v3 + 1) = result;
      *(float *)(*(_QWORD *)v3 + v4) = v2;
      return result;
    }
    result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = v2;
  }
  return result;
}

double _OpacityEffect.init(from:)(_QWORD *a1)
{
  return specialized _OpacityEffect.init(from:)(a1);
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _OpacityEffect(float *result)
{
  double *v1;
  float v2;
  float *v3;
  uint64_t v4;
  int64_t v5;

  v2 = *v1;
  if (v2 != 1.0)
  {
    v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    v4 = *((_QWORD *)v3 + 1);
    v5 = v4 + 4;
    if (__OFADD__(v4, 4))
    {
      __break(1u);
    }
    else if (*((_QWORD *)v3 + 2) >= v5)
    {
      *((_QWORD *)v3 + 1) = v5;
      result = (float *)(*(_QWORD *)v3 + v4);
LABEL_5:
      *result = v2;
      return result;
    }
    result = (float *)ProtobufEncoder.growBufferSlow(to:)(v5);
    goto LABEL_5;
  }
  return result;
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance _OpacityEffect(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v4;

  v4 = specialized _OpacityEffect.init(from:)(a1);
  if (!v2)
    *a2 = v4;
}

id OpacityViewResponder.__allocating_init(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  id v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 80);
  *(_QWORD *)(v2 + 208) = 0x3FF0000000000000;
  v10 = v3;
  v11 = v4;
  v12 = v5;
  v7 = *(_OWORD *)(a1 + 40);
  v13 = *(_OWORD *)(a1 + 24);
  v14 = v7;
  v15 = *(_OWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = v6;
  v8 = specialized DefaultLayoutViewResponder.init(inputs:)(&v10, v2);
  swift_release();
  return v8;
}

Swift::Void __swiftcall OpacityResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *Value;
  char v3;
  char v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)AGGraphGetValue();
  if (*(_DWORD *)(v0 + 4) != *MEMORY[0x24BE096C0])
  {
    type metadata accessor for [ViewResponder](0);
    Value = (uint64_t *)AGGraphGetValue();
    v4 = v3;
    v5 = *Value;
    swift_bridgeObjectRetain();
    if (v5)
    {
      if ((v4 & 1) != 0)
      {
        v6 = swift_bridgeObjectRetain();
        MultiViewResponder.children.setter(v6);
      }
      swift_bridgeObjectRelease();
    }
  }
  type metadata accessor for [ViewResponder](0);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_235283250;
    *(_QWORD *)(v7 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

double OpacityViewResponder.opacity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 208);
}

_QWORD *OpacityViewResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = result;
  if (*(double *)(v4 + 208) <= 0.0)
  {
    *result = 0;
    return result;
  }
  v6 = v4;
  v9 = *a4;
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 52) & 1) == 0 && (a3 & 0x100000000) == 0 && *(_DWORD *)(v4 + 48) == (_DWORD)a3)
  {
    *v5 = *(_QWORD *)(v4 + 56);
    return (_QWORD *)swift_endAccess();
  }
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 40);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
    v11 = (uint64_t)result;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (_QWORD *)swift_bridgeObjectRetain();
  }
  v19 = a3;
  v20 = v5;
  v18 = HIDWORD(a3) & 1;
  if (!v11)
  {
    v13 = 0;
    v14 = 0.0;
LABEL_19:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 56) = v13;
    *(double *)(v6 + 64) = v14;
    *(_DWORD *)(v6 + 48) = v19;
    *(_BYTE *)(v6 + 52) = v18;
    *v20 = v13;
    return (_QWORD *)swift_endAccess();
  }
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0.0;
    v15 = a3 | ((HIDWORD(a3) & 1) << 32);
    do
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        v16 = MEMORY[0x23B7C6D9C](v12, v10);
      }
      else
      {
        v16 = *(_QWORD *)(v10 + 8 * v12 + 32);
        swift_retain();
      }
      ++v12;
      v21 = v9;
      v17 = (*(double (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v16 + 168))(&v22, a2, v15, &v21);
      swift_release();
      v13 |= v22;
      if (v14 <= v17)
        v14 = v17;
    }
    while (v11 != v12);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t OpacityViewResponder.extendPrintTree(string:)()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x207974696361706FLL;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t OpacityViewResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v4 = swift_allocObject();
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 80);
  *(_QWORD *)(v4 + 208) = 0x3FF0000000000000;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v9 = *(_OWORD *)(a1 + 40);
  v15 = *(_OWORD *)(a1 + 24);
  v16 = v9;
  v17 = *(_OWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = v8;
  v10 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(&v12, a2, v4);
  swift_release();
  return v10;
}

uint64_t OpacityViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t _OpacityShapeStyle.init(style:opacity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  result = type metadata accessor for _OpacityShapeStyle(0, a2, a3, v9);
  *(float *)(a4 + *(int *)(result + 36)) = a5;
  return result;
}

uint64_t _OpacityShapeStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _OpacityShapeStyle.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_OpacityShapeStyle.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _OpacityShapeStyle.opacity.getter(uint64_t a1)
{
  uint64_t v1;

  return *(float *)(v1 + *(int *)(a1 + 36));
}

uint64_t _OpacityShapeStyle.opacity.setter(uint64_t result, float a2)
{
  uint64_t v2;

  *(float *)(v2 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t (*_OpacityShapeStyle.opacity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OpacityShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  if (*(float *)(v2 + *(int *)(v6 + 36)) != 1.0)
    __asm { BR              X10 }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 32))(a1, v5);
}

uint64_t sub_234CAEBD8()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t closure #1 in _OpacityShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  float v17;
  uint64_t v18;

  result = type metadata accessor for _OpacityShapeStyle(0, a3, a4, a4);
  v7 = *(float *)(a2 + *(int *)(result + 36));
  *(float *)(a1 + 84) = v7 * *(float *)(a1 + 84);
  v8 = *(_QWORD **)(a1 + 104);
  v9 = v8[2];
  if (v9)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      v8 = (_QWORD *)result;
    }
    v10 = v8[2];
    v11 = v9 - 1;
    if (v10 < v9 - 1)
      v11 = v8[2];
    if (v11 > 1)
    {
      v13 = v11 + 1;
      v14 = v13 & 1;
      if ((v13 & 1) == 0)
        v14 = 2;
      v12 = v13 - v14;
      v15 = (float *)(v8 + 19);
      v16 = v12;
      do
      {
        v17 = v7 * *v15;
        *(v15 - 18) = v7 * *(v15 - 18);
        *v15 = v17;
        v15 += 36;
        v16 -= 2;
      }
      while (v16);
    }
    else
    {
      v12 = 0;
    }
    v18 = 72 * v12 + 80;
    do
    {
      if (v12 >= v10)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v12;
      *(float *)((char *)v8 + v18) = v7 * *(float *)((char *)v8 + v18);
      v18 += 72;
    }
    while (v9 != v12);
    *(_QWORD *)(a1 + 104) = v8;
  }
  return result;
}

uint64_t static _OpacityShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _OpacityShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _OpacityShapeStyle._apply(to:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t (*_OpacitiesShapeStyle.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OpacitiesShapeStyle.opacities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _OpacitiesShapeStyle.opacities.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*_OpacitiesShapeStyle.opacities.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OpacitiesShapeStyle.init(style:opacities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for _OpacitiesShapeStyle(0, a3, a4, v9);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

void _OpacitiesShapeStyle._apply(to:)(uint64_t a1)
{
  char *v1;

  v1 = (char *)&loc_234CAF0F0 + dword_234CAF9A4[*(unsigned __int8 *)(MEMORY[0x24BDAC7A8](a1) + 24)];
  __asm { BR              X10 }
}

uint64_t sub_234CAF100()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t closure #1 in _OpacitiesShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for _OpacitiesShapeStyle(0, a3, a4, a4) + 36));
  *a5 = a1;
  a5[1] = v7;
  swift_retain();
  return swift_bridgeObjectRetain();
}

void OpacityTransition.body(content:phase:)(char a1@<W1>, double *a2@<X8>)
{
  double v2;

  v2 = 0.0;
  if (a1 == 1)
    v2 = 1.0;
  *a2 = v2;
}

void static OpacityTransition.properties.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t OpacityTransition._makeContentTransition(transition:)(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t result;
  void *v4;

  v2 = *a1;
  result = outlined consume of _Transition_ContentTransition.Result(*((_QWORD *)a1 + 3), a1[32]);
  v4 = &outlined read-only object #0 of OpacityTransition._makeContentTransition(transition:);
  if (v2 == 3)
    v4 = 0;
  *((_QWORD *)a1 + 3) = v4;
  a1[32] = v2 != 3;
  return result;
}

void protocol witness for Transition.body(content:phase:) in conformance OpacityTransition(char a1@<W1>, double *a2@<X8>)
{
  double v2;

  v2 = 0.0;
  if (a1 == 1)
    v2 = 1.0;
  *a2 = v2;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance OpacityTransition(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t result;
  void *v4;

  v2 = *a1;
  result = outlined consume of _Transition_ContentTransition.Result(*((_QWORD *)a1 + 3), a1[32]);
  v4 = &outlined read-only object #0 of OpacityTransition._makeContentTransition(transition:);
  if (v2 == 3)
    v4 = 0;
  *((_QWORD *)a1 + 3) = v4;
  a1[32] = v2 != 3;
  return result;
}

uint64_t _GraphInputs.opacityAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _GraphInputs.opacityAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  v6 = v5;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t key path setter for _GraphInputs.opacityAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.opacityAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.opacityAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.opacityAccessibilityProvider.modify;
}

void _GraphInputs.opacityAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[5];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.OpacityAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.opacityAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t _ViewInputs.opacityAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.opacityAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.opacityAccessibilityProvider.modify;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t sub_234CB00E4()
{
  return swift_deallocObject();
}

double specialized _OpacityEffect.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  double i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;

  v3 = a1[1];
  v4 = a1[2];
  for (i = 1.0; v3 < v4; v4 = a1[2])
  {
    v6 = a1[3];
    if (v6)
    {
      v7 = a1[4];
      if (v3 < v7)
        goto LABEL_12;
      if (v7 < v3)
        goto LABEL_30;
      a1[3] = 0;
    }
    v6 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return i;
    if (v6 <= 7)
      goto LABEL_30;
LABEL_12:
    v8 = v6 & 7;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) == 8)
    {
      if (v8 == 2)
      {
        v10 = ProtobufDecoder.decodeVarint()();
        if (v1)
          return i;
        if (v10 < 0)
        {
          __break(1u);
LABEL_35:
          __break(1u);
          JUMPOUT(0x234CB02B8);
        }
        v9 = (float *)a1[1];
        if (v4 < (unint64_t)v9 + v10)
        {
LABEL_30:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return i;
        }
        a1[3] = 13;
        a1[4] = (char *)v9 + v10;
      }
      else
      {
        if (v8 != 5)
          goto LABEL_30;
        v9 = (float *)a1[1];
      }
      v3 = (unint64_t)(v9 + 1);
      if (v4 < (unint64_t)(v9 + 1))
        goto LABEL_30;
      v11 = *v9;
      a1[1] = v3;
      i = v11;
    }
    else
    {
      switch(v6 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v1)
            return i;
          v3 = a1[1];
          continue;
        case 1uLL:
          v3 = a1[1] + 8;
          if (v4 < v3)
            goto LABEL_30;
          goto LABEL_4;
        case 2uLL:
          v12 = ProtobufDecoder.decodeVarint()();
          if (v1)
            return i;
          if (v12 < 0)
            goto LABEL_35;
          v3 = a1[1] + v12;
          if (v4 < v3)
            goto LABEL_30;
LABEL_4:
          a1[1] = v3;
          break;
        case 5uLL:
          v3 = a1[1] + 4;
          if (v4 >= v3)
            goto LABEL_4;
          goto LABEL_30;
        default:
          goto LABEL_30;
      }
    }
  }
  a1[3] = 0;
  return i;
}

uint64_t type metadata accessor for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _OpacityShapeStyle);
}

uint64_t partial apply for closure #2 in _OpacityShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = *(_DWORD *)(v8 + *(int *)(type metadata accessor for _OpacityShapeStyle(0, v6, v7, a2) + 36));
  *(_QWORD *)a3 = a1;
  *(_DWORD *)(a3 + 8) = v9;
  return swift_retain();
}

uint64_t type metadata accessor for _OpacitiesShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _OpacitiesShapeStyle);
}

uint64_t partial apply for closure #1 in _OpacitiesShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in _OpacitiesShapeStyle._apply(to:)(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t associated type witness table accessor for Transition.Body : View in OpacityTransition()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_234CB0350@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234CB035C(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _OpacityEffect()
{
  return &type metadata for _OpacityEffect;
}

ValueMetadata *type metadata accessor for OpacityRendererEffect()
{
  return &type metadata for OpacityRendererEffect;
}

uint64_t type metadata accessor for OpacityViewResponder()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for _OpacityShapeStyle()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t *initializeBufferWithCopyOfBuffer for _OpacityShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7 & 0xFC | 3;
  v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
  }
  return v4;
}

uint64_t initializeWithCopy for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithCopy for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t initializeWithTake for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for _OpacityShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234CB0658 + 4 * byte_2352946C0[v8]))();
}

void storeEnumTagSinglePayload for _OpacityShapeStyle(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234CB0798()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234CB07A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234CB07A8);
}

void sub_234CB07C4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234CB07CC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234CB07D4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234CB07DCLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for _OpacitiesShapeStyle()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t getEnumTagSinglePayload for _OpacitiesShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234CB0880 + 4 * byte_2352946CF[v10]))();
  }
}

void storeEnumTagSinglePayload for _OpacitiesShapeStyle(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234CB09F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234CB0A6CLL);
}

void sub_234CB0A00(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234CB0A08);
  JUMPOUT(0x234CB0A6CLL);
}

void sub_234CB0A48()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234CB0A6CLL);
}

void sub_234CB0A50()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234CB0A6CLL);
}

uint64_t sub_234CB0A58(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234CB0A6CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234CB0A68);
    JUMPOUT(0x234CB0A64);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

ValueMetadata *type metadata accessor for OpacityTransition()
{
  return &type metadata for OpacityTransition;
}

uint64_t dispatch thunk of static OpacityAccessibilityProvider.makeOpacity(effect:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t sub_234CB0A9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _OpacityEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _OpacityEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>(255);
    v2[0] = &protocol witness table for PlaceholderContentView<A>;
    v2[1] = &protocol witness table for OpacityRendererEffect;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for PlaceholderContentView<OpacityTransition>, (uint64_t)&type metadata for OpacityTransition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for PlaceholderContentView);
    v4 = type metadata accessor for ModifiedContent(a1, v2, (uint64_t)&type metadata for OpacityRendererEffect, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>);
  }
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RectangleCornerRadii and conformance RectangleCornerRadii()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RectangleCornerRadii and conformance RectangleCornerRadii;
  if (!lazy protocol witness table cache variable for type RectangleCornerRadii and conformance RectangleCornerRadii)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RectangleCornerRadii, &type metadata for RectangleCornerRadii);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RectangleCornerRadii and conformance RectangleCornerRadii);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<RectangleCornerRadii>, (uint64_t (*)(void))lazy protocol witness table accessor for type RectangleCornerRadii and conformance RectangleCornerRadii, (uint64_t)&type metadata for RectangleCornerRadii, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>);
  }
  return result;
}

void type metadata accessor for AnimatableAttribute<CGRect>(uint64_t a1)
{
  type metadata accessor for AnimatableAttribute<CGRect>(a1, &lazy cache variable for type metadata for AnimatableAttribute<CGRect>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, &lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
}

unint64_t lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved;
  if (!lazy protocol witness table cache variable for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ColorMultiplyEffect._Resolved, &type metadata for _ColorMultiplyEffect._Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMultiplyEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<Angle>, (uint64_t)&type metadata for Angle, (uint64_t)&protocol witness table for Angle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets;
  if (!lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EdgeInsets, &type metadata for EdgeInsets);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<EdgeInsets>, (uint64_t (*)(void))lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitPoint and conformance UnitPoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint;
  if (!lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitPoint, &type metadata for UnitPoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint;
  if (!lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitPoint, &type metadata for UnitPoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnitPoint>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitPoint and conformance UnitPoint, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StrokeStyle and conformance StrokeStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StrokeStyle and conformance StrokeStyle;
  if (!lazy protocol witness table cache variable for type StrokeStyle and conformance StrokeStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StrokeStyle, &type metadata for StrokeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrokeStyle and conformance StrokeStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<StrokeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type StrokeStyle and conformance StrokeStyle, (uint64_t)&type metadata for StrokeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedShadowStyle and conformance ResolvedShadowStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedShadowStyle and conformance ResolvedShadowStyle;
  if (!lazy protocol witness table cache variable for type ResolvedShadowStyle and conformance ResolvedShadowStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedShadowStyle, &type metadata for ResolvedShadowStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedShadowStyle and conformance ResolvedShadowStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedShadowStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedShadowStyle and conformance ResolvedShadowStyle, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t outlined init with copy of AnimatableAttribute<AnyShape>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;

  type metadata accessor for FontBox<Font.SystemProvider>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout;
  if (!lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyLayout, &type metadata for AnyLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t outlined destroy of AnimatableAttribute<AnyShape>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for FontBox<Font.SystemProvider>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlurStyle and conformance BlurStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlurStyle and conformance BlurStyle;
  if (!lazy protocol witness table cache variable for type BlurStyle and conformance BlurStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BlurStyle, &type metadata for BlurStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlurStyle and conformance BlurStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<BlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BlurStyle and conformance BlurStyle, (uint64_t)&type metadata for BlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Effect.Kind, &type metadata for _ShapeStyle_Pack.Effect.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Effect, &type metadata for _ShapeStyle_Pack.Effect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Fill, &type metadata for _ShapeStyle_Pack.Fill);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Fill>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Style, &type metadata for _ShapeStyle_Pack.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Style>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack, &type metadata for _ShapeStyle_Pack);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VariableBlurStyle and conformance VariableBlurStyle;
  if (!lazy protocol witness table cache variable for type VariableBlurStyle and conformance VariableBlurStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VariableBlurStyle, &type metadata for VariableBlurStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VariableBlurStyle and conformance VariableBlurStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<VariableBlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitRect and conformance UnitRect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitRect and conformance UnitRect;
  if (!lazy protocol witness table cache variable for type UnitRect and conformance UnitRect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitRect, &type metadata for UnitRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitRect and conformance UnitRect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitRect and conformance UnitRect;
  if (!lazy protocol witness table cache variable for type UnitRect and conformance UnitRect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnitRect, &type metadata for UnitRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitRect and conformance UnitRect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnitRect>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitRect and conformance UnitRect, (uint64_t)&type metadata for UnitRect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved;
  if (!lazy protocol witness table cache variable for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShadowEffect._Resolved, &type metadata for _ShadowEffect._Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShadowEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_BlurEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect, (uint64_t)&type metadata for _BlurEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

void type metadata accessor for AnimatableAttribute<CGSize>(uint64_t a1)
{
  type metadata accessor for AnimatableAttribute<CGRect>(a1, &lazy cache variable for type metadata for AnimatableAttribute<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, &lazy protocol witness table cache variable for type CGSize and conformance CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant;
  if (!lazy protocol witness table cache variable for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.ResolvedVibrant, &type metadata for Color.ResolvedVibrant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<Color.ResolvedVibrant>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant, (uint64_t)&type metadata for Color.ResolvedVibrant, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedGradient>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient, (uint64_t)&type metadata for ResolvedGradient, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame;
  if (!lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewFrame, &type metadata for ViewFrame);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<ViewFrame>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame, (uint64_t)&type metadata for ViewFrame, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewSize and conformance ViewSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewSize and conformance ViewSize;
  if (!lazy protocol witness table cache variable for type ViewSize and conformance ViewSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewSize, &type metadata for ViewSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewSize and conformance ViewSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<ViewSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewSize and conformance ViewSize, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewOrigin and conformance ViewOrigin()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewOrigin and conformance ViewOrigin;
  if (!lazy protocol witness table cache variable for type ViewOrigin and conformance ViewOrigin)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewOrigin, &type metadata for ViewOrigin);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewOrigin and conformance ViewOrigin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<ViewOrigin>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewOrigin and conformance ViewOrigin, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMonochromeEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<_OffsetEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect, (uint64_t)&type metadata for _OffsetEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatableAttribute<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

void type metadata accessor for AnimatableAttribute<CGPoint>(uint64_t a1)
{
  type metadata accessor for AnimatableAttribute<CGRect>(a1, &lazy cache variable for type metadata for AnimatableAttribute<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, &lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
}

void type metadata accessor for AnimatableAttribute<CGRect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!*a2)
  {
    v10 = a3(255);
    v11 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, a5);
    v13 = type metadata accessor for AnimatableAttribute(a1, v10, v11, v12);
    if (!v14)
      atomic_store(v13, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ColorView and conformance ColorView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorView and conformance ColorView;
  if (!lazy protocol witness table cache variable for type ColorView and conformance ColorView)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorView, &type metadata for ColorView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorView and conformance ColorView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

unint64_t lazy protocol witness table accessor for type OpacityResponderFilter and conformance OpacityResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpacityResponderFilter and conformance OpacityResponderFilter;
  if (!lazy protocol witness table cache variable for type OpacityResponderFilter and conformance OpacityResponderFilter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for OpacityResponderFilter, &type metadata for OpacityResponderFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityResponderFilter and conformance OpacityResponderFilter);
  }
  return result;
}

ValueMetadata *type metadata accessor for OpacityResponderFilter()
{
  return &type metadata for OpacityResponderFilter;
}

ValueMetadata *type metadata accessor for EmptyOpacityAccessibilityProvider()
{
  return &type metadata for EmptyOpacityAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.OpacityAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.OpacityAccessibilityProviderKey;
}

uint64_t _ShadowEffect.color.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_ShadowEffect.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ShadowEffect.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*_ShadowEffect.radius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _ShadowEffect.offset.getter(double a1, double a2)
{
  return a2;
}

void _ShadowEffect.offset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*_ShadowEffect.offset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ShadowEffect.resolve(in:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  int v10;
  int v11;
  int v12;
  __int128 v13;

  v13 = *a1;
  *(float *)a3 = (*(float (**)(__int128 *))(*(_QWORD *)a2 + 104))(&v13);
  *(_DWORD *)(a3 + 4) = v10;
  *(_DWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 12) = v12;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(_DWORD *)(a3 + 40) = 1056964608;
  *(_BYTE *)(a3 + 44) = 0;
}

uint64_t static _ShadowEffect._requiresMainThread.getter()
{
  return 0;
}

uint64_t _ShadowEffect._requiresMainThread.getter()
{
  return 0;
}

double _ShadowEffect._Resolved.style.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  int v3;
  char v4;
  __int128 v5;

  result = *(double *)(v1 + 32);
  v3 = *(_DWORD *)(v1 + 40);
  v4 = *(_BYTE *)(v1 + 44);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 44) = v4;
  return result;
}

double _ShadowEffect._Resolved.style.setter(uint64_t a1)
{
  uint64_t v1;
  double result;
  int v3;
  char v4;
  __int128 v5;

  result = *(double *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 44);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v5;
  *(double *)(v1 + 32) = result;
  *(_DWORD *)(v1 + 40) = v3;
  *(_BYTE *)(v1 + 44) = v4;
  return result;
}

uint64_t (*_ShadowEffect._Resolved.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _ShadowEffect._Resolved.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __n128 result;
  int8x16_t v9;
  __n128 v10;
  float32x4_t v11;

  v9 = *(int8x16_t *)v1;
  v10 = *(__n128 *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v4);
    v5 = v11;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  v7 = vmulq_f32(v5, v6);
  result = v10;
  *(float32x4_t *)a1 = v7;
  *(__n128 *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

double key path getter for _ShadowEffect._Resolved.animatableData : _ShadowEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  _ShadowEffect._Resolved.animatableData.getter((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

double _ShadowEffect._Resolved.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  __int32 v6;
  __int32 v7;
  __int32 v8;
  double result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  char v13;

  v3 = *(float32x4_t *)a1;
  v4.i64[0] = 0x3C0000003C000000;
  v4.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    v11 = *(float32x4_t *)a1;
    swift_once();
    v4.i64[0] = 0x3C0000003C000000;
    v4.i64[1] = 0x3C0000003C000000;
    v3 = v11;
  }
  v10 = vmulq_f32(v3, v4);
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = v10.f32[0];
    v7 = v10.i32[2];
    v6 = v10.i32[1];
    v8 = v10.i32[3];
  }
  else
  {
    v13 = 2;
    v12 = v10;
    v5 = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
  }
  *(float *)v1 = v5;
  *(_DWORD *)(v1 + 4) = v6;
  *(_DWORD *)(v1 + 8) = v7;
  *(_DWORD *)(v1 + 12) = v8;
  result = *(double *)(a1 + 32);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(a1 + 16);
  *(double *)(v1 + 32) = result;
  return result;
}

void (*_ShadowEffect._Resolved.animatableData.modify(_QWORD *a1))(float32x4_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v9;
  __int128 v10;
  float32x4_t v11;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  v9 = *(int8x16_t *)v1;
  v10 = *(_OWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v6 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v5);
    v6 = v11;
  }
  v7.i64[0] = 0x4300000043000000;
  v7.i64[1] = 0x4300000043000000;
  *(float32x4_t *)v3 = vmulq_f32(v6, v7);
  *((_OWORD *)v3 + 1) = v10;
  v3[4] = v4;
  return _ShadowEffect._Resolved.animatableData.modify;
}

void _ShadowEffect._Resolved.animatableData.modify(float32x4_t **a1, char a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  __int32 v7;
  __int32 v8;
  __int32 v9;
  __int32 v10;
  unsigned int v11;
  unsigned int v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2].i64[0];
  v5.i64[0] = 0x3C0000003C000000;
  v5.i64[1] = 0x3C0000003C000000;
  v6 = vmulq_f32(**a1, v5);
  if ((a2 & 1) != 0)
  {
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v7 = v6.i32[1];
      v9 = v6.i32[3];
      v8 = v6.i32[2];
    }
    else
    {
      v16 = v6;
      v15 = v3;
      v6.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v16.f32);
      v3 = v15;
    }
    v13 = (float32x4_t *)v2[4].i64[0];
    v13->i32[0] = v6.i32[0];
    v13->i32[1] = v7;
    v13->i32[2] = v8;
    v13->i32[3] = v9;
  }
  else
  {
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v16 = v6;
      v14 = v3;
      v6.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v16.f32);
      v3 = v14;
      v6.i32[1] = v10;
      v6.i64[1] = __PAIR64__(v12, v11);
    }
    v13 = (float32x4_t *)v2[4].i64[0];
    *v13 = v6;
  }
  v13[1] = v3;
  v13[2].i64[0] = v4;
  free(v2);
}

double _ShadowEffect._Resolved.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  __int128 v9;

  v8 = v1[1];
  v9 = *v1;
  v3 = *((_QWORD *)v1 + 4);
  v4 = *((unsigned int *)v1 + 10);
  v5 = *((unsigned __int8 *)v1 + 44);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 48) = v3;
  *(_QWORD *)(v6 + 56) = v4 | (v5 << 32);
  result = 0.0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_DWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 132) = 2;
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ShadowEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  __int128 v9;

  v8 = v1[1];
  v9 = *v1;
  v3 = *((_QWORD *)v1 + 4);
  v4 = *((unsigned int *)v1 + 10);
  v5 = *((unsigned __int8 *)v1 + 44);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 48) = v3;
  *(_QWORD *)(v6 + 56) = v4 | (v5 << 32);
  result = 0.0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_DWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 132) = 2;
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance _ShadowEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  _ShadowEffect._Resolved.animatableData.getter((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ShadowEffect._Resolved(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShadowEffect._Resolved.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

BOOL static _ShadowEffect.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  char v14;
  _BOOL8 result;

  if (a1 == a2)
  {
    if (a3 != a6)
      return 0;
    return a5 == a8 && a4 == a7;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a2);
  result = 0;
  if ((v14 & 1) != 0 && a3 == a6)
    return a5 == a8 && a4 == a7;
  return result;
}

__n128 protocol witness for EnvironmentalModifier.resolve(in:) in conformance _ShadowEffect@<Q0>(__int128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int32 v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  __n128 result;
  __n128 v10;
  __int128 v11;

  v4 = *v2;
  v5 = v2[3];
  v10 = *(__n128 *)(v2 + 1);
  v11 = *a1;
  a2->n128_f32[0] = (*(float (**)(__int128 *))(*(_QWORD *)v4 + 104))(&v11);
  a2->n128_u32[1] = v6;
  a2->n128_u32[2] = v7;
  a2->n128_u32[3] = v8;
  result = v10;
  a2[1] = v10;
  a2[2].n128_u64[0] = v5;
  a2[2].n128_u32[2] = 1056964608;
  a2[2].n128_u8[12] = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ShadowEffect(double *a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v8;
  _BOOL8 result;

  v3 = a1[1];
  v2 = a1[2];
  v4 = a1[3];
  v6 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v7 = *(double *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if (v3 != v6)
      return 0;
    return v4 == v7 && v2 == v5;
  }
  v8 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  result = 0;
  if ((v8 & 1) != 0 && v3 == v6)
    return v4 == v7 && v2 == v5;
  return result;
}

uint64_t View.shadow(color:radius:x:y:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  _QWORD v7[4];

  v7[0] = a1;
  *(double *)&v7[1] = a4;
  *(double *)&v7[2] = a5;
  *(double *)&v7[3] = a6;
  return View.modifier<A>(_:)(v7, a2, &type metadata for _ShadowEffect, a3);
}

uint64_t sub_234CB352C()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for _ShadowEffect._Resolved(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ShadowEffect._Resolved()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
}

_UNKNOWN **associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in _ShadowEffect()
{
  return &protocol witness table for _ShadowEffect._Resolved;
}

double sub_234CB35DC(uint64_t a1)
{
  return _ShadowEffect._Resolved.animatableData.setter(a1);
}

uint64_t initializeWithCopy for _ShadowEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _ShadowEffect(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _ShadowEffect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for _ShadowEffect()
{
  return &type metadata for _ShadowEffect;
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _ShadowEffect._Resolved(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 45))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ShadowEffect._Resolved(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 45) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ShadowEffect._Resolved()
{
  return &type metadata for _ShadowEffect._Resolved;
}

uint64_t sub_234CB3760(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _ShadowEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _ShadowEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t LayoutProxy.size(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t *InputValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = *((_BYTE *)a1 + 24);
  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (uint64_t *)AGGraphGetInputValue();
  }
  v7 = *InputValue;
  v8 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v8 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v10 = v2;
    v11 = v3;
    v12 = v4;
    v13 = v5;
    (*(void (**)(uint64_t *))(*(_QWORD *)v7 + 120))(&v10);
    return swift_release();
  }
  return result;
}

uint64_t LayoutProxy.layoutPriority.getter()
{
  uint64_t v0;
  uint64_t *InputValue;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (uint64_t *)AGGraphGetInputValue();
  }
  v2 = *InputValue;
  v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(_QWORD *)v2 + 88))();
    return swift_release();
  }
  return result;
}

SwiftUI::Spacing __swiftcall LayoutProxy.spacing()()
{
  uint64_t v0;
  __int128 *InputValue;
  uint64_t v2;
  uint64_t v3;
  SwiftUI::Spacing result;

  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v2 = *(_QWORD *)InputValue;
  v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result.minima._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(_QWORD *)v2 + 112))();
    return (SwiftUI::Spacing)swift_release();
  }
  return result;
}

uint64_t LayoutProxyAttributes.init(layoutComputer:traitsList:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t LayoutProxyAttributes.init(traitsList:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *MEMORY[0x24BE096C0];
  a2[1] = result;
  return result;
}

uint64_t LayoutProxyAttributes.init(layoutComputer:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  int v2;

  v2 = *MEMORY[0x24BE096C0];
  *a2 = result;
  a2[1] = v2;
  return result;
}

void LayoutProxyAttributes.init()(_DWORD *a1@<X8>)
{
  int v1;

  v1 = *MEMORY[0x24BE096C0];
  *a1 = *MEMORY[0x24BE096C0];
  a1[1] = v1;
}

BOOL LayoutProxyAttributes.isEmpty.getter()
{
  _DWORD *v0;

  return *v0 == *MEMORY[0x24BE096C0] && v0[1] == *MEMORY[0x24BE096C0];
}

BOOL static LayoutProxyAttributes.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

double LayoutProxy.init(context:attributes:)@<D0>(int a1@<W0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_DWORD *)a3 = a1;
  result = *a2;
  *(double *)(a3 + 4) = *a2;
  return result;
}

uint64_t LayoutProxy.init(context:layoutComputer:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v3;
  int v4;

  v3 = *MEMORY[0x24BE096C0];
  if ((a2 & 0x100000000) != 0)
    v4 = *MEMORY[0x24BE096C0];
  else
    v4 = a2;
  *a3 = result;
  a3[1] = v4;
  a3[2] = v3;
  return result;
}

uint64_t LayoutProxy.layoutComputer.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _UNKNOWN **InputValue;
  void *v4;

  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (_UNKNOWN **)AGGraphGetInputValue();
  }
  v4 = InputValue[1];
  *a1 = *InputValue;
  a1[1] = v4;
  return swift_retain();
}

void LayoutProxy.traits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t InputValue;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(v1 + 8) == *MEMORY[0x24BE096C0])
  {
    *a1 = 0;
  }
  else
  {
    type metadata accessor for ViewList();
    InputValue = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v5);
    v3 = v6;
    v4 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

uint64_t LayoutProxy.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t InputValue;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v22 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v12 = (char *)&v20 - v11;
  v13 = 0;
  if (*(_DWORD *)(v4 + 8) != *MEMORY[0x24BE096C0])
  {
    type metadata accessor for ViewList();
    InputValue = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v24);
    v15 = v25;
    v16 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 40))(&v23, v15, v16);
    v13 = v23;
    v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  v24[0] = v13;
  MEMORY[0x24BDAC7A8](v10);
  *(&v20 - 4) = a2;
  *(&v20 - 3) = a3;
  *(&v20 - 2) = a1;
  type metadata accessor for ViewTraitCollection?();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in LayoutProxy.subscript.getter, (uint64_t)(&v20 - 6), MEMORY[0x24BEE4078], AssociatedTypeWitness, v17, (uint64_t)v12);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v12, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v21);
}

CGSize __swiftcall LayoutProxy.idealSize()()
{
  uint64_t *v0;
  int v1;
  double v2;
  double v3;
  CGSize result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v1 = *((_DWORD *)v0 + 2);
  v9 = *v0;
  v10 = v1;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 1;
  LayoutProxy.size(in:)(&v5);
  result.height = v3;
  result.width = v2;
  return result;
}

uint64_t LayoutProxy.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 *InputValue;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  if (*(_DWORD *)(v2 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v9 = *(_QWORD *)InputValue;
  v10 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v10 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v12 = v4;
    v13 = v5;
    v14 = v6;
    v15 = v7;
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)v9 + 128))(&v12, a2 & 1);
    return swift_release();
  }
  return result;
}

uint64_t LayoutProxy.dimensions(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  int v5;
  double v6;
  int v7;
  uint64_t *InputValue;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  char v18;
  double v19;
  char v20;

  v4 = *(double *)a1;
  v5 = *(unsigned __int8 *)(a1 + 8);
  v6 = *(double *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a1 + 24);
  if (*(_DWORD *)(v2 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (uint64_t *)AGGraphGetInputValue();
  }
  v9 = *InputValue;
  v10 = InputValue[1];
  v11 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v11 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v17 = v4;
    v18 = v5;
    v19 = v6;
    v20 = v7;
    result = (*(uint64_t (**)(double *))(*(_QWORD *)v9 + 120))(&v17);
    v15 = v4;
    if (v5)
      v15 = NAN;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v14;
    if (v7)
      v16 = NAN;
    else
      v16 = v6;
    *(double *)(a2 + 32) = v15;
    *(double *)(a2 + 40) = v16;
  }
  return result;
}

void LayoutProxy.finallyPlaced(at:in:layoutDirection:)(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t *v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  __int128 v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];
  double rect;
  __int128 v32;
  uint64_t v33;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  v11 = *((double *)a1 + 4);
  v12 = *((double *)a1 + 5);
  v13 = *((double *)a1 + 6);
  v14 = *((double *)a1 + 7);
  v15 = *a2;
  v16 = *((_DWORD *)v4 + 2);
  v28 = *v4;
  v29 = v16;
  v24 = v7;
  v25 = v8;
  v26 = v9;
  v27 = v10;
  LayoutProxy.dimensions(in:)((uint64_t)&v24, (uint64_t)v30);
  v17 = v30[0];
  v18 = v30[1];
  v19 = rect;
  v20 = v33;
  v21 = v13 - v11 * rect;
  v22 = v32;
  v23 = v14 - v12 * *(double *)&v32;
  *(double *)a3 = v21;
  *(double *)(a3 + 8) = v23;
  *(_QWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = v18;
  *(double *)(a3 + 32) = v19;
  *(_OWORD *)(a3 + 40) = v22;
  *(_QWORD *)(a3 + 56) = v20;
  if (v15 == 1)
    *(double *)a3 = a4 - CGRectGetMaxX(*(CGRect *)&v21);
}

uint64_t LayoutProxy.explicitAlignment(_:at:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 *InputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];

  v9 = a2[1];
  v10 = *a2;
  if (*(_DWORD *)(v2 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v5 = *(_QWORD *)InputValue;
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v11[0] = v10;
    v11[1] = v9;
    v7 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 144))(a1, v11);
    swift_release();
    return v7;
  }
  return result;
}

uint64_t LayoutProxy.ignoresAutomaticPadding.getter()
{
  uint64_t v0;
  __int128 *InputValue;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v2 = *(_QWORD *)InputValue;
  v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 96))();
    swift_release();
    return v4 & 1;
  }
  return result;
}

uint64_t LayoutProxy.requiresSpacingProjection.getter()
{
  uint64_t v0;
  __int128 *InputValue;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v2 = *(_QWORD *)InputValue;
  v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 104))();
    swift_release();
    return v4 & 1;
  }
  return result;
}

BOOL static LayoutProxy.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LayoutProxy(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t LayoutProxyCollection.init(context:attributes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t LayoutProxyCollection.startIndex.getter()
{
  return 0;
}

uint64_t LayoutProxyCollection.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

unint64_t LayoutProxyCollection.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)(v3 + 16) > result)
    {
      *(_DWORD *)a2 = *(_DWORD *)v2;
      *(_QWORD *)(a2 + 4) = *(_QWORD *)(v3 + 8 * result + 32);
      return result;
    }
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance LayoutProxyCollection@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance LayoutProxyCollection(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance LayoutProxyCollection(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
}

char *protocol witness for Collection.subscript.read in conformance LayoutProxyCollection(char *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v3 < *(_QWORD *)(v4 + 16))
    {
      v5 = *(_QWORD *)(v4 + 8 * v3 + 32);
      *(_DWORD *)result = *(_DWORD *)v2;
      *(_QWORD *)(result + 4) = v5;
      return (char *)_ViewInputs.base.modify;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance LayoutProxyCollection@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *(uint64_t **)(v2 + 8), result[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(a2 + 16) = *(_DWORD *)v2;
    *(_QWORD *)(a2 + 24) = result;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance LayoutProxyCollection(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance LayoutProxyCollection()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance LayoutProxyCollection@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LayoutProxyCollection@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance LayoutProxyCollection(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance LayoutProxyCollection@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance LayoutProxyCollection(_QWORD *result)
{
  uint64_t v1;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance LayoutProxyCollection(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance LayoutProxyCollection()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t partial apply for closure #1 in LayoutProxy.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return ViewTraitCollection.subscript.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void type metadata accessor for ViewTraitCollection?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ViewTraitCollection?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewTraitCollection?);
  }
}

unint64_t lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutProxyCollection, &type metadata for LayoutProxyCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutProxyCollection, &type metadata for LayoutProxyCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutProxyCollection, &type metadata for LayoutProxyCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutProxyCollection, &type metadata for LayoutProxyCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutProxyCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutProxyCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutProxyCollection>(255, &lazy cache variable for type metadata for Slice<LayoutProxyCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutProxyCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<LayoutProxyCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<LayoutProxyCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<LayoutProxyCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutProxyCollection>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<LayoutProxyCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection();
    v7 = a3(a1, &type metadata for LayoutProxyCollection, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

ValueMetadata *type metadata accessor for LayoutProxyAttributes()
{
  return &type metadata for LayoutProxyAttributes;
}

ValueMetadata *type metadata accessor for LayoutProxy()
{
  return &type metadata for LayoutProxy;
}

uint64_t initializeBufferWithCopyOfBuffer for LayoutProxyCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LayoutProxyCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LayoutProxyCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LayoutProxyCollection()
{
  return &type metadata for LayoutProxyCollection;
}

_BYTE *RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v5;

  v5 = *a3;
  *(_BYTE *)a5 = *result;
  *(_DWORD *)(a5 + 4) = a2;
  *(_BYTE *)(a5 + 8) = BYTE4(a2) & 1;
  *(_DWORD *)(a5 + 12) = v5;
  *(_BYTE *)(a5 + 16) = a4;
  return result;
}

uint64_t RasterizationOptions.isAccelerated.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFE | result & 1;
  return result;
}

uint64_t RasterizationOptions.alphaOnly.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 6) & 1;
}

uint64_t RasterizationOptions.requiresLayer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12) >> 7;
}

BOOL static ColorRenderingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ColorRenderingMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ColorRenderingMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ColorRenderingMode.protobufValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::ColorRenderingMode_optional __swiftcall ColorRenderingMode.init(protobufValue:)(Swift::UInt protobufValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if (protobufValue < 3)
    v2 = protobufValue;
  *v1 = v2;
  return (SwiftUI::ColorRenderingMode_optional)protobufValue;
}

uint64_t RasterizationOptions.Flags.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t RasterizationOptions.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static RasterizationOptions.Flags.isAccelerated.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static RasterizationOptions.Flags.isOpaque.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static RasterizationOptions.Flags.rendersAsynchronously.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static RasterizationOptions.Flags.prefersDisplayCompositing.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static RasterizationOptions.Flags.rendersFirstFrameAsync.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static RasterizationOptions.Flags.allowsPackedDrawable.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static RasterizationOptions.Flags.alphaOnly.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static RasterizationOptions.Flags.requiresLayer.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static RasterizationOptions.Flags.rgbaContext.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

void static RasterizationOptions.Flags.highRes.getter(_DWORD *a1@<X8>)
{
  *a1 = 512;
}

void static RasterizationOptions.Flags.defaultFlags.getter(_DWORD *a1@<X8>)
{
  *a1 = 160;
}

uint64_t (*RasterizationOptions.colorMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RasterizationOptions.rbColorMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void RasterizationOptions.flags.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 12);
}

_DWORD *RasterizationOptions.flags.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = *result;
  return result;
}

uint64_t (*RasterizationOptions.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t RasterizationOptions.maxDrawableCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t RasterizationOptions.maxDrawableCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*RasterizationOptions.maxDrawableCount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unsigned __int8 *(*RasterizationOptions.isAccelerated.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 12) & 1;
  return RasterizationOptions.isAccelerated.modify;
}

unsigned __int8 *RasterizationOptions.isAccelerated.modify(unsigned __int8 *result)
{
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFFE | result[8];
  return result;
}

uint64_t RasterizationOptions.isOpaque.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFD | v2;
  return result;
}

_BYTE *(*RasterizationOptions.isOpaque.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 2) != 0;
  return RasterizationOptions.isOpaque.modify;
}

_BYTE *RasterizationOptions.isOpaque.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 2;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFFD | v1;
  return result;
}

uint64_t RasterizationOptions.rendersAsynchronously.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

_BYTE *(*RasterizationOptions.rendersAsynchronously.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 4) != 0;
  return RasterizationOptions.rendersAsynchronously.modify;
}

_BYTE *RasterizationOptions.rendersAsynchronously.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 4;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFFB | v1;
  return result;
}

uint64_t RasterizationOptions.rendersFirstFrameAsynchronously.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFEF | v2;
  return result;
}

_BYTE *(*RasterizationOptions.rendersFirstFrameAsynchronously.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 0x10) != 0;
  return RasterizationOptions.rendersFirstFrameAsynchronously.modify;
}

_BYTE *RasterizationOptions.rendersFirstFrameAsynchronously.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 16;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFEF | v1;
  return result;
}

uint64_t RasterizationOptions.prefersDisplayCompositing.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 3) & 1;
}

uint64_t RasterizationOptions.prefersDisplayCompositing.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFF7 | v2;
  return result;
}

_BYTE *(*RasterizationOptions.prefersDisplayCompositing.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 8) != 0;
  return RasterizationOptions.prefersDisplayCompositing.modify;
}

_BYTE *RasterizationOptions.prefersDisplayCompositing.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 8;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFF7 | v1;
  return result;
}

uint64_t RasterizationOptions.allowsPackedDrawable.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFDF | v2;
  return result;
}

_BYTE *(*RasterizationOptions.allowsPackedDrawable.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 0x20) != 0;
  return RasterizationOptions.allowsPackedDrawable.modify;
}

_BYTE *RasterizationOptions.allowsPackedDrawable.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 32;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFDF | v1;
  return result;
}

uint64_t RasterizationOptions.resolvedColorMode.getter()
{
  uint64_t v0;
  int v1;
  unsigned int v2;
  int v3;
  unsigned int v4;

  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
    return *(unsigned int *)(v0 + 4);
  v1 = *(_DWORD *)(v0 + 12);
  v2 = (v1 << 25 >> 31) & 9;
  if ((v1 & 0x40) != 0)
    v3 = 10;
  else
    v3 = 1;
  if ((v1 & 0x40) != 0)
    v4 = 10;
  else
    v4 = 2;
  if (*(_BYTE *)v0 == 1)
    v4 = v3;
  if (*(_BYTE *)v0)
    return v4;
  else
    return v2;
}

uint64_t RasterizationOptions.colorSpace.getter()
{
  return RBColorModeWorkingColorSpace();
}

uint64_t RasterizationOptions.alphaOnly.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 64;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFBF | v2;
  return result;
}

_BYTE *(*RasterizationOptions.alphaOnly.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 0x40) != 0;
  return RasterizationOptions.alphaOnly.modify;
}

_BYTE *RasterizationOptions.alphaOnly.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 64;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFBF | v1;
  return result;
}

uint64_t RasterizationOptions.requiresLayer.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 128;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFF7F | v2;
  return result;
}

_BYTE *(*RasterizationOptions.requiresLayer.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_DWORD *)(v1 + 12) & 0x80) != 0;
  return RasterizationOptions.requiresLayer.modify;
}

_BYTE *RasterizationOptions.requiresLayer.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 128;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFF7F | v1;
  return result;
}

void RasterizationOptions.encode(to:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  unsigned __int8 v3;
  Swift::UInt v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *((unsigned int *)v0 + 1);
  v3 = v0[8];
  v4 = *((unsigned int *)v0 + 3);
  v5 = (char)v0[16];
  if (*v0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
  }
  if ((v3 & 1) == 0)
  {
    if ((v2 & 0x80000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    if ((_DWORD)v2)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v2);
    }
  }
  if ((_DWORD)v4)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v4);
  }
  if ((_DWORD)v5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v5) ^ (v5 >> 63));
  }
}

uint64_t RasterizationOptions.init(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  char v9;
  int v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 3;
    v10 = 160;
    v11 = 1;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v13 = v3[4];
        if (v5 < v13)
          goto LABEL_14;
        if (v13 < v5)
          goto LABEL_59;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if ((unint64_t)result <= 7)
      {
LABEL_59:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_14:
      switch((unint64_t)result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 0)
            goto LABEL_21;
          if ((result & 7) != 2)
            goto LABEL_59;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (result < 0)
          {
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
            JUMPOUT(0x234CB5A30);
          }
          v14 = v3[1] + result;
          if (v6 < v14)
            goto LABEL_59;
          v3[3] = 8;
          v3[4] = v14;
LABEL_21:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (result == 2)
            v8 = 2;
          else
            v8 = result == 1;
          break;
        case 2uLL:
          if ((result & 7) == 0)
            goto LABEL_34;
          if ((result & 7) != 2)
            goto LABEL_59;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (result < 0)
            goto LABEL_62;
          v15 = v3[1] + result;
          if (v6 < v15)
            goto LABEL_59;
          v3[3] = 16;
          v3[4] = v15;
LABEL_34:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          v16 = -(result & 1) ^ (result >> 1);
          v11 &= (int)v16 != v16;
          if ((int)v16 == v16)
            v7 = -(result & 1) ^ (result >> 1);
          break;
        case 3uLL:
          if ((result & 7) == 0)
            goto LABEL_43;
          if ((result & 7) != 2)
            goto LABEL_59;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (result < 0)
            goto LABEL_63;
          v17 = v3[1] + result;
          if (v6 < v17)
            goto LABEL_59;
          v3[3] = 24;
          v3[4] = v17;
LABEL_43:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          v10 = result;
          break;
        case 4uLL:
          if ((result & 7) == 0)
            goto LABEL_51;
          if ((result & 7) != 2)
            goto LABEL_59;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if (result < 0)
            goto LABEL_64;
          v18 = v3[1] + result;
          if (v6 < v18)
            goto LABEL_59;
          v3[3] = 32;
          v3[4] = v18;
LABEL_51:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((-(result & 1) ^ (result >> 1)) == (char)(-(result & 1) ^ (result >> 1)))
            v9 = -(result & 1) ^ (result >> 1);
          break;
        default:
          switch(result & 7)
          {
            case 0:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              goto LABEL_7;
            case 1:
              v12 = v3[1] + 8;
              if (v6 >= v12)
                goto LABEL_6;
              goto LABEL_59;
            case 2:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if (result < 0)
                goto LABEL_65;
              v12 = v3[1] + result;
              if (v6 < v12)
                goto LABEL_59;
LABEL_6:
              v3[1] = v12;
              break;
            case 5:
              v12 = v3[1] + 4;
              if (v6 < v12)
                goto LABEL_59;
              goto LABEL_6;
            default:
              goto LABEL_59;
          }
          break;
      }
LABEL_7:
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
  v8 = 0;
  v9 = 3;
  v10 = 160;
  v11 = 1;
LABEL_4:
  v3[3] = 0;
  *(_BYTE *)a2 = v8;
  *(_DWORD *)(a2 + 4) = v7;
  *(_BYTE *)(a2 + 8) = v11 & 1;
  *(_DWORD *)(a2 + 12) = v10;
  *(_BYTE *)(a2 + 16) = v9;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance RasterizationOptions()
{
  RasterizationOptions.encode(to:)();
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance RasterizationOptions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RasterizationOptions.init(from:)(a1, a2);
}

void _DrawingGroupEffect.rasterizationOptions.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  int v4;
  char v5;

  v2 = *(_DWORD *)(v1 + 4);
  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 12);
  v5 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_DWORD *)(a1 + 4) = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 16) = v5;
}

uint64_t _DrawingGroupEffect.rasterizationOptions.setter(uint64_t result)
{
  uint64_t v1;
  int v2;
  char v3;
  int v4;
  char v5;

  v2 = *(_DWORD *)(result + 4);
  v3 = *(_BYTE *)(result + 8);
  v4 = *(_DWORD *)(result + 12);
  v5 = *(_BYTE *)(result + 16);
  *(_BYTE *)v1 = *(_BYTE *)result;
  *(_DWORD *)(v1 + 4) = v2;
  *(_BYTE *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 12) = v4;
  *(_BYTE *)(v1 + 16) = v5;
  return result;
}

uint64_t (*_DrawingGroupEffect.rasterizationOptions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _DrawingGroupEffect.isOpaque.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 1) & 1;
}

uint64_t _DrawingGroupEffect.isOpaque.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFD | v2;
  return result;
}

_BYTE *(*_DrawingGroupEffect.isOpaque.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 2) != 0;
  return RasterizationOptions.isOpaque.modify;
}

void _DrawingGroupEffect.colorMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_DrawingGroupEffect.colorMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_DrawingGroupEffect.colorMode.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return _DrawingGroupEffect.colorMode.modify;
}

uint64_t _DrawingGroupEffect.colorMode.modify(uint64_t result)
{
  **(_BYTE **)result = *(_BYTE *)(result + 8);
  return result;
}

uint64_t _DrawingGroupEffect.init(opaque:colorMode:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  *(_BYTE *)a3 = *a2;
  if ((result & 1) != 0)
    v3 = 163;
  else
    v3 = 161;
  *(_DWORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 12) = v3;
  *(_BYTE *)(a3 + 16) = 3;
  return result;
}

uint64_t static _DrawingGroupEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t KeyPath;
  int v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt value;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  Swift::UInt32 v56;
  _DWORD *v57;
  char v58;
  unsigned int OffsetAttribute2;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  __int128 v78;
  __int128 v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  unint64_t v88;
  int v89;
  __int128 v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t result;
  void (*v94)(__int128 *, _QWORD);
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  __int16 v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  Swift::UInt32 v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  unsigned __int8 v126;
  unsigned int v127;
  unsigned __int8 v128;
  unsigned int v129;
  unsigned __int8 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[20];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[20];
  _OWORD v141[3];
  _QWORD v142[4];

  v142[1] = *MEMORY[0x24BDAC8D0];
  v97 = *a1;
  v4 = a2[1];
  v136 = *a2;
  v137 = v4;
  v5 = a2[3];
  v7 = *a2;
  v6 = a2[1];
  v138 = a2[2];
  v139 = v5;
  *(_OWORD *)v140 = a2[4];
  *(_DWORD *)&v140[16] = *((_DWORD *)a2 + 20);
  v108 = DWORD2(v136);
  v9 = *((_QWORD *)&v137 + 1);
  v8 = v137;
  v10 = v138;
  v111 = DWORD1(v138);
  v11 = v5;
  v113 = DWORD2(v5);
  v141[1] = v6;
  v141[2] = v138;
  v12 = *(_QWORD *)&v140[12];
  v13 = v6;
  v14 = (_DWORD *)(v6 + 16);
  v141[0] = v7;
  swift_beginAccess();
  v100 = WORD2(v138);
  v119 = v11;
  v120 = *((_QWORD *)&v138 + 1);
  v121 = v136;
  if ((BYTE4(v138) & 0x20) == 0)
  {
    LODWORD(v15) = *(_DWORD *)v140;
    outlined retain of _ViewInputs((uint64_t)&v136);
    goto LABEL_16;
  }
  v101 = v138;
  v105 = v136;
  v16 = DWORD2(v136);
  v17 = v137;
  v18 = DWORD2(v137);
  v20 = v138;
  v19 = v139;
  v98 = *((_QWORD *)&v138 + 1);
  v21 = *((_QWORD *)&v139 + 1);
  v95 = *(_QWORD *)&v140[8];
  v96 = *(_QWORD *)v140;
  v22 = *(_DWORD *)&v140[16];
  v133 = v138;
  v134 = v139;
  *(_OWORD *)v135 = *(_OWORD *)v140;
  *(_DWORD *)&v135[16] = *(_DWORD *)&v140[16];
  v131 = v136;
  v132 = v137;
  outlined retain of _ViewInputs((uint64_t)&v136);
  outlined retain of _ViewInputs((uint64_t)&v136);
  v23 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v13 + 81) & 1) != 0
    || (_DWORD)v96 != *(_DWORD *)(v13 + 32)
    || (_DWORD)v95 != *(_DWORD *)(v13 + 36)
    || v25 != *(_DWORD *)(v13 + 40)
    || v16 != *(_DWORD *)(v13 + 44)
    || v23 != *(_DWORD *)(v13 + 48)
    || v18 != *(_DWORD *)(v13 + 52))
  {
    *(_QWORD *)&v131 = v105;
    DWORD2(v131) = v16;
    *(_QWORD *)&v132 = v17;
    *((_QWORD *)&v132 + 1) = __PAIR64__(v23, v18);
    *(_QWORD *)&v133 = v20;
    *((_QWORD *)&v133 + 1) = v98;
    *(_QWORD *)&v134 = v19;
    *((_QWORD *)&v134 + 1) = v21;
    *(_QWORD *)v135 = v96;
    *(_QWORD *)&v135[8] = v95;
    *(_DWORD *)&v135[16] = v22;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v25, (uint64_t)&v124);
    v26 = v125;
    v27 = v126;
    v28 = v130;
    v29 = v126 | ((unint64_t)v127 << 32);
    v30 = v128 | ((unint64_t)v129 << 32);
    *(_OWORD *)(v13 + 32) = v124;
    *(_OWORD *)(v13 + 48) = v26;
    *(_QWORD *)(v13 + 64) = v29;
    *(_QWORD *)(v13 + 72) = v30;
    *(_WORD *)(v13 + 80) = v28;
    if (v27 != 1)
    {
      v15 = HIDWORD(*((_QWORD *)&v26 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v13 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v13 + 60) = v15;
    *(_BYTE *)(v13 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v15) = *(_DWORD *)(v13 + 60);
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v10 = v101;
LABEL_16:
  swift_endAccess();
  v31 = HIDWORD(v139);
  *(_QWORD *)&v131 = __PAIR64__(HIDWORD(v139), v15);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  v106 = Attribute.init<A>(body:value:flags:update:)();
  v32 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  v33 = *(_DWORD *)v140;
  v34 = *(_DWORD *)&v140[8];
  v35 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v141);
  v36 = specialized CachedEnvironment.attribute<A>(keyPath:)(v35);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v141);
  swift_release();
  v102 = v33;
  *(_QWORD *)&v131 = __PAIR64__(v34, v33);
  DWORD2(v131) = v36;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  v37 = Attribute.init<A>(body:value:flags:update:)();
  v38 = v10 | 0x1C;
  v39 = *(_QWORD *)&v141[0];
  v142[0] = *(_QWORD *)&v141[0];
  outlined retain of _ViewInputs((uint64_t)&v136);
  outlined retain of _GraphInputs((uint64_t)v141);
  outlined retain of ViewTransform((uint64_t)v142);
  v40 = specialized find<A>(_:key:)(v39);
  v99 = v31;
  if (v40)
  {
    v41 = *(_BYTE *)(v40 + 72);
    outlined release of ViewTransform((uint64_t)v142);
    outlined release of _GraphInputs((uint64_t)v141);
    outlined release of _ViewInputs((uint64_t)&v136);
    v42 = v121;
    if ((v41 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v142);
    outlined release of _GraphInputs((uint64_t)v141);
    outlined release of _ViewInputs((uint64_t)&v136);
    v42 = v121;
  }
  v43 = swift_retain();
  v44 = specialized find<A>(_:key:)(v43);
  if (!v44 || (value = v42, *(_BYTE *)(v44 + 72) != 1))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<UsingGraphicsRenderer>, (uint64_t)&type metadata for UsingGraphicsRenderer, (uint64_t)&protocol witness table for UsingGraphicsRenderer, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = 1;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for UsingGraphicsRenderer, 0, v42).value;
  }
  swift_release();
  LODWORD(v131) = *v14;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment();
  v46 = Attribute.init<A>(body:value:flags:update:)();
  v47 = MEMORY[0x24BEE4AF8];
  v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v49 = swift_allocObject();
  *(_DWORD *)(v49 + 16) = v46;
  *(_QWORD *)(v49 + 24) = v47;
  *(_OWORD *)(v49 + 32) = 0u;
  *(_OWORD *)(v49 + 48) = 0u;
  *(_OWORD *)(v49 + 64) = 0u;
  *(_WORD *)(v49 + 80) = 256;
  *(_QWORD *)(v49 + 88) = v48;
  swift_release();
  if ((v10 & 0x20) == 0)
    v38 = v10 | 0x3C;
  v42 = value;
  v8 = v49;
LABEL_26:
  *(_QWORD *)&v131 = v42;
  DWORD2(v131) = v108;
  *(_QWORD *)&v132 = v8;
  *((_QWORD *)&v132 + 1) = v9;
  *(_QWORD *)&v133 = __PAIR64__(v111, v38);
  *((_QWORD *)&v133 + 1) = v120;
  *(_QWORD *)&v134 = v119;
  *((_QWORD *)&v134 + 1) = __PAIR64__(v106, v113);
  *(_DWORD *)v135 = v32;
  *(_DWORD *)&v135[4] = v32;
  *(_DWORD *)&v135[8] = v37;
  *(_QWORD *)&v135[12] = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v50 = swift_bridgeObjectRetain();
  a3(&v122, v50, &v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v51 = v139;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v53 = *(_QWORD *)(v51 + 16);
  if (!v53)
  {
LABEL_60:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *a4 = v122;
    a4[1] = v123;
    return result;
  }
  v54 = v52;
  v55 = (_QWORD *)(v51 + 32);
  while (*v55 != v52)
  {
    v55 += 2;
    if (!--v53)
      goto LABEL_60;
  }
  v56 = ++lastIdentity;
  v57 = (_DWORD *)MEMORY[0x24BE096C0];
  v58 = v100;
  if ((v100 & 0x100) == 0)
  {
LABEL_32:
    swift_beginAccess();
    if ((v58 & 0x20) == 0)
    {
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v60 = v99;
      v61 = v102;
LABEL_57:
      swift_endAccess();
      *(_QWORD *)&v131 = v122;
      DWORD2(v131) = v123;
      v88 = PreferencesOutputs.subscript.getter(v54);
      v89 = *MEMORY[0x24BE096C0];
      if ((v88 & 0x100000000) == 0)
        v89 = v88;
      *(_QWORD *)&v131 = __PAIR64__(v97, v56);
      *((_QWORD *)&v131 + 1) = __PAIR64__(OffsetAttribute2, v61);
      *(_QWORD *)&v132 = __PAIR64__(*(unsigned int *)&v140[4], v60);
      DWORD2(v132) = v89;
      WORD6(v132) = 0;
      v90 = *(_OWORD *)(MEMORY[0x24BDBF028] + 16);
      v133 = *MEMORY[0x24BDBF028];
      v134 = v90;
      v135[0] = 0;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList();
      v91 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v131) = 0;
      PreferencesOutputs.subscript.setter(v91, v54, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v92);
      goto LABEL_60;
    }
    v115 = v56;
    v62 = v136;
    v63 = DWORD2(v136);
    v117 = v137;
    v64 = DWORD2(v137);
    v65 = v138;
    v66 = v139;
    v107 = *(_QWORD *)&v140[8];
    v109 = *(_QWORD *)v140;
    v67 = *(_DWORD *)&v140[16];
    v133 = v138;
    v134 = v139;
    *(_OWORD *)v135 = *(_OWORD *)v140;
    *(_DWORD *)&v135[16] = *(_DWORD *)&v140[16];
    v131 = v136;
    v132 = v137;
    outlined retain of _ViewInputs((uint64_t)&v136);
    v68 = _ViewInputs.geometryTransaction()();
    v69 = swift_getKeyPath();
    v70 = specialized CachedEnvironment.attribute<A>(keyPath:)(v69);
    swift_release();
    if ((*(_BYTE *)(v13 + 81) & 1) == 0
      && (_DWORD)v109 == *(_DWORD *)(v13 + 32)
      && (_DWORD)v107 == *(_DWORD *)(v13 + 36)
      && v70 == *(_DWORD *)(v13 + 40)
      && v63 == *(_DWORD *)(v13 + 44)
      && v68 == *(_DWORD *)(v13 + 48)
      && v64 == *(_DWORD *)(v13 + 52))
    {
      if ((*(_BYTE *)(v13 + 64) & 1) == 0)
      {
        LODWORD(v103) = *(_DWORD *)(v13 + 60);
        goto LABEL_45;
      }
    }
    else
    {
      *(_QWORD *)&v131 = v62;
      DWORD2(v131) = v63;
      *(_QWORD *)&v132 = v117;
      *((_QWORD *)&v132 + 1) = __PAIR64__(v68, v64);
      v133 = v65;
      v134 = v66;
      *(_QWORD *)v135 = v109;
      *(_QWORD *)&v135[8] = v107;
      *(_DWORD *)&v135[16] = v67;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v70, (uint64_t)&v124);
      v71 = v125;
      v72 = v126;
      v73 = v130;
      v74 = v126 | ((unint64_t)v127 << 32);
      v75 = v128 | ((unint64_t)v129 << 32);
      *(_OWORD *)(v13 + 32) = v124;
      *(_OWORD *)(v13 + 48) = v71;
      *(_QWORD *)(v13 + 64) = v74;
      *(_QWORD *)(v13 + 72) = v75;
      *(_WORD *)(v13 + 80) = v73;
      if (v72 != 1)
      {
        v103 = HIDWORD(*((_QWORD *)&v71 + 1));
LABEL_45:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v114 = v136;
        v76 = DWORD2(v136);
        v118 = v137;
        v77 = DWORD2(v137);
        v78 = v138;
        v79 = v139;
        v110 = *(_QWORD *)&v140[8];
        v112 = *(_QWORD *)v140;
        v80 = *(_DWORD *)&v140[16];
        v133 = v138;
        v134 = v139;
        *(_OWORD *)v135 = *(_OWORD *)v140;
        *(_DWORD *)&v135[16] = *(_DWORD *)&v140[16];
        v131 = v136;
        v132 = v137;
        outlined retain of _ViewInputs((uint64_t)&v136);
        v81 = _ViewInputs.geometryTransaction()();
        v82 = swift_getKeyPath();
        v83 = specialized CachedEnvironment.attribute<A>(keyPath:)(v82);
        swift_release();
        if ((*(_BYTE *)(v13 + 81) & 1) == 0
          && (_DWORD)v112 == *(_DWORD *)(v13 + 32)
          && (_DWORD)v110 == *(_DWORD *)(v13 + 36)
          && v83 == *(_DWORD *)(v13 + 40)
          && v76 == *(_DWORD *)(v13 + 44)
          && v81 == *(_DWORD *)(v13 + 48)
          && v77 == *(_DWORD *)(v13 + 52))
        {
          v60 = v99;
          if ((*(_BYTE *)(v13 + 80) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v13 + 76);
            goto LABEL_56;
          }
        }
        else
        {
          *(_QWORD *)&v131 = v114;
          DWORD2(v131) = v76;
          *(_QWORD *)&v132 = v118;
          *((_QWORD *)&v132 + 1) = __PAIR64__(v81, v77);
          v133 = v78;
          v134 = v79;
          *(_QWORD *)v135 = v112;
          *(_QWORD *)&v135[8] = v110;
          *(_DWORD *)&v135[16] = v80;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v83, (uint64_t)&v124);
          OffsetAttribute2 = v129;
          v84 = v130;
          v85 = v126 | ((unint64_t)v127 << 32);
          v86 = v128 | ((unint64_t)v129 << 32);
          v87 = v125;
          *(_OWORD *)(v13 + 32) = v124;
          *(_OWORD *)(v13 + 48) = v87;
          *(_QWORD *)(v13 + 64) = v85;
          *(_QWORD *)(v13 + 72) = v86;
          *(_WORD *)(v13 + 80) = v84;
          v60 = v99;
          if (v84 != 1)
            goto LABEL_56;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v13 + 76) = OffsetAttribute2;
        *(_BYTE *)(v13 + 80) = 0;
LABEL_56:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v61 = v103;
        v56 = v115;
        goto LABEL_57;
      }
    }
    LODWORD(v103) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v13 + 60) = v103;
    *(_BYTE *)(v13 + 64) = 0;
    goto LABEL_45;
  }
  outlined retain of _ViewInputs((uint64_t)&v136);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v136);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v57)
  {
    LODWORD(v124) = v56;
    v94 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v124);
    v94(&v131, 0);
    v58 = v100;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _DrawingGroupEffect.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(8uLL, 0);
}

BOOL static _DrawingGroupEffect.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;

  if (*a1 != *a2)
    return 0;
  v2 = *((_DWORD *)a1 + 3);
  v3 = *((_DWORD *)a2 + 3);
  if ((a1[8] & 1) != 0)
  {
    if (v2 == v3)
      v4 = a2[8];
    else
      v4 = 0;
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    if ((a2[8] & 1) != 0)
      return 0;
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1) || v2 != v3)
      return 0;
  }
  return a1[16] == a2[16];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _DrawingGroupEffect(uint64_t a1, uint64_t a2)
{
  int v2;
  char v3;
  int v4;
  char v5;
  unsigned __int8 v6;
  int v7;
  char v8;
  int v9;
  char v10;
  unsigned __int8 v12[4];
  int v13;
  char v14;
  int v15;
  char v16;
  unsigned __int8 v17[4];
  int v18;
  char v19;
  int v20;
  char v21;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_BYTE *)a2;
  v7 = *(_DWORD *)(a2 + 4);
  v8 = *(_BYTE *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_BYTE *)(a2 + 16);
  v17[0] = *(_BYTE *)a1;
  v18 = v2;
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v12[0] = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = v10;
  return specialized static RasterizationOptions.== infix(_:_:)(v17, v12);
}

uint64_t View.drawingGroup(opaque:colorMode:)(char a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _BYTE v6[4];
  int v7;
  char v8;
  int v9;
  char v10;

  v6[0] = *a2;
  if ((a1 & 1) != 0)
    v4 = 163;
  else
    v4 = 161;
  v7 = 0;
  v8 = 1;
  v9 = v4;
  v10 = 3;
  return View.modifier<A>(_:)(v6, a3, &type metadata for _DrawingGroupEffect, a4);
}

uint64_t _DrawingGroupEffect._rendersAsynchronously.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 2) & 1;
}

uint64_t _DrawingGroupEffect._rendersAsynchronously.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

_BYTE *(*_DrawingGroupEffect._rendersAsynchronously.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 4) != 0;
  return RasterizationOptions.rendersAsynchronously.modify;
}

unint64_t _DrawingGroupEffect.rbColorMode.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t _DrawingGroupEffect.rbColorMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t *(*_DrawingGroupEffect.rbColorMode.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  int v2;

  *(_QWORD *)a1 = v1;
  v2 = *(_DWORD *)(v1 + 4);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return _DrawingGroupEffect.rbColorMode.modify;
}

uint64_t *_DrawingGroupEffect.rbColorMode.modify(uint64_t *result)
{
  uint64_t v1;
  char v2;

  v1 = *result;
  v2 = *((_BYTE *)result + 12);
  *(_DWORD *)(v1 + 4) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t _DrawingGroupEffect.rendersFirstFrameAsynchronously.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 4) & 1;
}

uint64_t _DrawingGroupEffect.rendersFirstFrameAsynchronously.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFEF | v2;
  return result;
}

_BYTE *(*_DrawingGroupEffect.rendersFirstFrameAsynchronously.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 0x10) != 0;
  return RasterizationOptions.rendersFirstFrameAsynchronously.modify;
}

uint64_t _DrawingGroupEffect.isAccelerated.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 12) & 1;
}

uint64_t _DrawingGroupEffect.isAccelerated.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFE | result & 1;
  return result;
}

unsigned __int8 *(*_DrawingGroupEffect.isAccelerated.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 12) & 1;
  return RasterizationOptions.isAccelerated.modify;
}

uint64_t _DrawingGroupEffect.allowsPackedDrawable.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 5) & 1;
}

uint64_t _DrawingGroupEffect.allowsPackedDrawable.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFDF | v2;
  return result;
}

_BYTE *(*_DrawingGroupEffect.allowsPackedDrawable.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 0x20) != 0;
  return RasterizationOptions.allowsPackedDrawable.modify;
}

uint64_t DrawingGroupDisplayList.updateValue()()
{
  int *v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  double *v12;
  char v13;
  char v14;
  char v15;
  double width;
  double height;
  float64x2_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  CGFloat x;
  CGFloat y;
  CGPoint origin;
  CGSize size;
  double v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  double *v36;
  char v37;
  double v38;
  double v39;
  unint64_t v40;
  int v41;
  float64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  float64x2_t v50;
  char v51;
  int v52;
  char v53;
  int v54;
  char v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  CGRect v64;
  char v65;
  uint64_t v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;

  v66 = *MEMORY[0x24BDAC8D0];
  if (v0[6] == *MEMORY[0x24BE096C0]
    || (Value = AGGraphGetValue(),
        v3 = v2,
        v4 = *(_QWORD *)Value,
        v5 = *(_WORD *)(Value + 8),
        v6 = *(_BYTE *)(Value + 10),
        swift_bridgeObjectRetain(),
        !v4))
  {
    v5 = 0;
    v6 = 0;
    v7 = *((unsigned __int8 *)v0 + 64);
    v4 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v3 & 1;
  }
  v8 = *(_QWORD *)(v4 + 16);
  *((_BYTE *)v0 + 64) = v8 != 0;
  if (!v8)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v59 = MEMORY[0x24BEE4AF8];
    WORD4(v59) = 0;
    BYTE10(v59) = 0;
    return AGGraphSetOutputValue();
  }
  v9 = AGGraphGetValue();
  v11 = v10;
  v54 = *(_DWORD *)(v9 + 4);
  v55 = *(_BYTE *)v9;
  v52 = *(_DWORD *)(v9 + 12);
  v53 = *(_BYTE *)(v9 + 8);
  v51 = *(_BYTE *)(v9 + 16);
  type metadata accessor for CGSize(0);
  v12 = (double *)AGGraphGetValue();
  v14 = v13;
  v15 = v11 | v13;
  width = *v12;
  height = v12[1];
  v18 = (float64x2_t *)AGGraphGetValue();
  v20 = v19;
  v21 = AGGraphGetValue();
  v23 = *(_QWORD *)v21;
  v24 = *v18;
  v25 = *(float64x2_t *)(v21 + 8);
  v26 = *(float64x2_t *)(v21 + 24);
  v50 = *v18;
  if ((v15 & 1) != 0)
  {
    v7 = 1;
    if ((v20 & 1) == 0 && (v14 & 1) == 0 && (v22 & 1) == 0)
      goto LABEL_10;
  }
  else if (((v20 | v22) & 1) == 0)
  {
LABEL_10:
    swift_retain();
    goto LABEL_20;
  }
  memset(&v64, 0, sizeof(v64));
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v65 = 1;
  v56 = v23;
  v57 = v24;
  v58 = vsubq_f64(v26, vsubq_f64(v24, v25));
  v59 = 0u;
  swift_retain();
  specialized ViewTransform.forEach(inverted:_:)(0, (uint64_t)&v56, (uint64_t)&v59);
  x = 0.0;
  if ((v65 & 1) != 0
    || (origin = v64.origin, size = v64.size, CGRectGetWidth(v64) > width)
    && (v67.origin = origin, v67.size = size, CGRectGetHeight(v67) > height))
  {
    y = 0.0;
  }
  else
  {
    v68.origin.x = 0.0;
    v68.origin.y = 0.0;
    v68.size.width = width;
    v68.size.height = height;
    v72.origin = origin;
    v72.size = size;
    v69 = CGRectIntersection(v68, v72);
    x = v69.origin.x;
    y = v69.origin.y;
    width = v69.size.width;
    height = v69.size.height;
  }
  v70.origin.x = x;
  v70.origin.y = y;
  v70.size.width = width;
  v70.size.height = height;
  if (!CGRectEqualToRect(v70, *((CGRect *)v0 + 1)))
  {
    *((CGFloat *)v0 + 4) = x;
    *((CGFloat *)v0 + 5) = y;
    v7 = 1;
    *((double *)v0 + 6) = width;
    *((double *)v0 + 7) = height;
  }
LABEL_20:
  v32 = *((double *)v0 + 4);
  v33 = *((double *)v0 + 5);
  v34 = *((double *)v0 + 6);
  v35 = *((double *)v0 + 7);
  v71.origin.x = v32;
  v71.origin.y = v33;
  v71.size.width = v34;
  v71.size.height = v35;
  if (CGRectIsEmpty(v71))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v59 = MEMORY[0x24BEE4AF8];
    WORD4(v59) = 0;
    BYTE10(v59) = 0;
    AGGraphSetOutputValue();
  }
  else
  {
    v36 = (double *)AGGraphGetValue();
    v39 = *v36;
    v38 = v36[1];
    if (((v7 | v20) & 1) == 0 && (v37 & 1) == 0 && AGGraphGetOutputValue())
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v40 = ++static DisplayList.Version.lastValue;
    if (v7)
    {
      if (v40)
        v41 = (2 * ((33 * (v40 >> 16)) ^ v40)) | 1;
      else
        LOWORD(v41) = 0;
      *((_WORD *)v0 + 14) = v41;
    }
    v42 = v50.f64[1] - v38;
    v43 = v32 + v50.f64[0] - v39;
    v44 = v33 + v42;
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v4;
    *(_WORD *)(v45 + 24) = v5;
    *(_BYTE *)(v45 + 26) = v6;
    *(double *)(v45 + 32) = v32;
    *(double *)(v45 + 40) = v33;
    *(_BYTE *)(v45 + 48) = v55;
    *(_DWORD *)(v45 + 52) = v54;
    *(_BYTE *)(v45 + 56) = v53;
    *(_DWORD *)(v45 + 60) = v52;
    *(_BYTE *)(v45 + 64) = v51;
    v46 = *((unsigned __int16 *)v0 + 14);
    v47 = *v0;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_23527E860;
    *(double *)(v48 + 32) = v43;
    *(double *)(v48 + 40) = v44;
    *(CGFloat *)(v48 + 48) = v34;
    *(CGFloat *)(v48 + 56) = v35;
    *(_QWORD *)(v48 + 64) = v40;
    *(_QWORD *)(v48 + 72) = v45 | 0x9000000000000000;
    *(_QWORD *)(v48 + 80) = v46;
    *(_QWORD *)(v48 + 88) = 0;
    *(_BYTE *)(v48 + 98) = 0;
    *(_WORD *)(v48 + 96) = 0;
    *(_DWORD *)(v48 + 100) = v47;
    *(double *)&v59 = v43;
    *((double *)&v59 + 1) = v44;
    *(CGFloat *)&v60 = v34;
    *((CGFloat *)&v60 + 1) = v35;
    *(_QWORD *)&v61 = v40;
    *((_QWORD *)&v61 + 1) = v45 | 0x9000000000000000;
    v62 = v46;
    BYTE2(v63) = 0;
    LOWORD(v63) = 0;
    DWORD1(v63) = v47;
    swift_retain();
    DisplayList.Item.features.getter();
    v49 = *(_BYTE *)(v45 + 26);
    v56 = v48;
    BYTE2(v57.f64[0]) = v49;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

BOOL specialized static RasterizationOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;

  if (*a1 != *a2)
    return 0;
  v2 = *((_DWORD *)a1 + 3);
  v3 = *((_DWORD *)a2 + 3);
  if ((a1[8] & 1) != 0)
  {
    if (v2 == v3)
      v4 = a2[8];
    else
      v4 = 0;
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    if ((a2[8] & 1) != 0)
      return 0;
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1) || v2 != v3)
      return 0;
  }
  return a1[16] == a2[16];
}

unint64_t lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResetPositionTransform and conformance ResetPositionTransform;
  if (!lazy protocol witness table cache variable for type ResetPositionTransform and conformance ResetPositionTransform)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResetPositionTransform, &type metadata for ResetPositionTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetPositionTransform and conformance ResetPositionTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DrawingGroupEffect.ChildEnvironment, &unk_25062E718);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList;
  if (!lazy protocol witness table cache variable for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DrawingGroupDisplayList, &unk_250637818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorRenderingMode and conformance ColorRenderingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorRenderingMode and conformance ColorRenderingMode;
  if (!lazy protocol witness table cache variable for type ColorRenderingMode and conformance ColorRenderingMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorRenderingMode, &type metadata for ColorRenderingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorRenderingMode and conformance ColorRenderingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RasterizationOptions.Flags, &type metadata for RasterizationOptions.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RasterizationOptions.Flags, &type metadata for RasterizationOptions.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RasterizationOptions.Flags, &type metadata for RasterizationOptions.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RasterizationOptions.Flags, &type metadata for RasterizationOptions.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

uint64_t sub_234CB73AC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 12) & 1;
  return result;
}

unsigned __int8 *sub_234CB73BC(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFE | *result;
  return result;
}

_BYTE *sub_234CB73D4(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFD | v2;
  return result;
}

_BYTE *sub_234CB73F8(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFB | v2;
  return result;
}

_BYTE *sub_234CB741C(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t sub_234CB7440@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 12) & 8) != 0;
  return result;
}

_BYTE *sub_234CB7450(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t sub_234CB7474@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 12) & 0x20) != 0;
  return result;
}

_BYTE *sub_234CB7484(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t sub_234CB74A8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 12) & 0x40) != 0;
  return result;
}

_BYTE *sub_234CB74B8(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 64;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFBF | v2;
  return result;
}

uint64_t sub_234CB74DC@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 12) & 0x80) != 0;
  return result;
}

_BYTE *sub_234CB74EC(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 128;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFF7F | v2;
  return result;
}

uint64_t sub_234CB7510@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 12) & 2) != 0;
  return result;
}

_BYTE *sub_234CB7520(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFD | v2;
  return result;
}

_BYTE *sub_234CB7544@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_234CB7550(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_234CB755C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 12) & 4) != 0;
  return result;
}

_BYTE *sub_234CB756C(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t sub_234CB7590@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_DWORD *)a2 = *(_DWORD *)(result + 4);
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_234CB75A4(uint64_t result, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 4);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_234CB75B8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 12) & 0x10) != 0;
  return result;
}

_BYTE *sub_234CB75C8(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFEF | v2;
  return result;
}

unsigned __int8 *sub_234CB75EC(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFE | *result;
  return result;
}

_BYTE *sub_234CB7604(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for ColorRenderingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234CB7674 + 4 * byte_235294E35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234CB76A8 + 4 * asc_235294E30[v4]))();
}

uint64_t sub_234CB76A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CB76B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CB76B8);
  return result;
}

uint64_t sub_234CB76C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CB76CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234CB76D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CB76D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ColorRenderingMode()
{
  return &type metadata for ColorRenderingMode;
}

ValueMetadata *type metadata accessor for RasterizationOptions()
{
  return &type metadata for RasterizationOptions;
}

ValueMetadata *type metadata accessor for RasterizationOptions.Flags()
{
  return &type metadata for RasterizationOptions.Flags;
}

uint64_t getEnumTagSinglePayload for RasterizationOptions(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[17])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RasterizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _DrawingGroupEffect()
{
  return &type metadata for _DrawingGroupEffect;
}

uint64_t sub_234CB77B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _DrawingGroupEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _DrawingGroupEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DrawingGroupDisplayList(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DrawingGroupDisplayList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for DrawingGroupDisplayList()
{
  return &unk_250637818;
}

void *type metadata accessor for _DrawingGroupEffect.ChildEnvironment()
{
  return &unk_25062E718;
}

unint64_t instantiation function for generic protocol witness table for DrawingGroupDisplayList(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234CB7924()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t EnvironmentValues.isLuminanceReduced.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.isLuminanceReduced : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.isLuminanceReduced.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.isLuminanceReduced.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isLuminanceReduced.modify;
}

void EnvironmentValues.isLuminanceReduced.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t sub_234CB7CF0(char *a1)
{
  return EnvironmentValues.isLuminanceReduced.setter(*a1);
}

ValueMetadata *type metadata accessor for ReducedLuminanceKey()
{
  return &type metadata for ReducedLuminanceKey;
}

void _BrightnessEffect.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*_BrightnessEffect.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _BrightnessEffect.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*_BrightnessEffect.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _BrightnessEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 8;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_234CB7DE4()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

BOOL static _BrightnessEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _BrightnessEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_BYTE *)(v4 + 132) = 8;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t View.brightness(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return View.modifier<A>(_:)(&v4, a1, &type metadata for _BrightnessEffect, a2);
}

double sub_234CB7EEC@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234CB7EF8(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _BrightnessEffect()
{
  return &type metadata for _BrightnessEffect;
}

uint64_t sub_234CB7F14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _BrightnessEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _BrightnessEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t static _RendererEffect.isScrapeable.getter()
{
  return 0;
}

void protocol witness for _RendererEffect.scrapeableContent.getter in conformance _ColorMonochromeEffect._Resolved(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000007;
}

void _RendererEffect.scrapeableContent.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000007;
}

{
  _RendererEffect.scrapeableContent.getter(a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t specialized static RendererEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[5];
  int v22;

  if ((*(_BYTE *)(a2 + 36) & 0x20) == 0)
  {
    v8 = *(_QWORD *)(a2 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v16 = *(_QWORD *)(v8 + 16);
    if (!v16)
    {
LABEL_6:
      v18 = *(_OWORD *)(a2 + 48);
      v21[2] = *(_OWORD *)(a2 + 32);
      v21[3] = v18;
      v21[4] = *(_OWORD *)(a2 + 64);
      v22 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v21[0] = *(_OWORD *)a2;
      v21[1] = v19;
      return ((uint64_t (*)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3)(v9, v21, v10, v11, v12, v13, v14, v15);
    }
    v17 = (_QWORD *)(v8 + 32);
    while (*v17 != v9)
    {
      v17 += 2;
      if (!--v16)
        goto LABEL_6;
    }
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4);
}

uint64_t static RendererEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 24);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 72);
  v20 = v10;
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)(&v21, &v13, a3, a4, a5, a6, a7);
}

uint64_t static RendererEffect._viewListCount(inputs:body:)(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BlendModeEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ExtendedBlendModeEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GraphicsBlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static RendererEffect._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMatrixEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PremultipliedColorMatrixEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;

  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect, a5);
  return static RendererEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContrastEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BlurEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorInvertEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundLayerViewModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundLayerLevelViewModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GrayscaleEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t static RendererEffect.makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  v8 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 6);
  v13 = *((_DWORD *)a2 + 7);
  v14 = *((_DWORD *)a2 + 8);
  v15 = *((_DWORD *)a2 + 9);
  v16 = a2[5];
  v35 = a5;
  v36 = a2[6];
  v26 = *((_DWORD *)a2 + 14);
  v27 = *((_DWORD *)a2 + 15);
  v28 = *((_DWORD *)a2 + 16);
  v29 = *((_DWORD *)a2 + 17);
  v30 = *((_DWORD *)a2 + 18);
  v31 = *((_DWORD *)a2 + 19);
  v25 = *((_DWORD *)a2 + 20);
  if ((v15 & 0x20) == 0)
  {
    v24 = *a1;
    v17 = *a2;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v8 = v24;
    v9 = v17;
    a5 = v35;
    v19 = *(_QWORD *)(v36 + 16);
    if (!v19)
    {
LABEL_6:
      *(_QWORD *)&v39 = v17;
      DWORD2(v39) = v10;
      v40 = v11;
      v41 = v12;
      v42 = v13;
      v43 = v14;
      v44 = v15;
      v45 = v16;
      v46 = v36;
      v47 = v26;
      v48 = v27;
      v49 = v28;
      v50 = v29;
      v51 = v30;
      v52 = v31;
      v53 = v25;
      return a3();
    }
    v20 = (_QWORD *)(v36 + 32);
    while (*v20 != v18)
    {
      v20 += 2;
      if (!--v19)
        goto LABEL_6;
    }
  }
  v38 = v8;
  *(_QWORD *)&v39 = v9;
  DWORD2(v39) = v10;
  v40 = v11;
  v41 = v12;
  v42 = v13;
  v43 = v14;
  v44 = v15;
  v45 = v16;
  v22 = v10;
  v23 = v9;
  (*(void (**)(unsigned int *, __int128 *, uint64_t))(*(_QWORD *)(a6 + 8) + 48))(&v38, &v39, a5);
  v37 = v38;
  *(_QWORD *)&v39 = v23;
  DWORD2(v39) = v22;
  v40 = v11;
  v41 = v12;
  v42 = v13;
  v43 = v14;
  v44 = v15;
  v45 = v16;
  v46 = v36;
  v47 = v26;
  v48 = v27;
  v49 = v28;
  v50 = v29;
  v51 = v30;
  v52 = v31;
  v53 = v25;
  return static _RendererEffect._makeRendererEffect(effect:inputs:body:)(&v37, &v39, (uint64_t)a3, a4, v35, *(_QWORD *)(a6 + 16), a7);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ShadowEffect._Resolved(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t ResetPositionTransform.init(position:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BrightnessEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X4>, unint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t KeyPath;
  int v32;
  __int128 v33;
  uint64_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int *v43;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int OffsetAttribute2;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned __int8 v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t result;
  void (*v91)(__int128 *, _QWORD);
  int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v97;
  __int16 v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  Swift::UInt32 v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  unsigned __int8 v131;
  unsigned int v132;
  unsigned __int8 v133;
  unsigned int v134;
  unsigned __int8 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _BYTE v146[32];
  __int128 v147;
  __int128 v148;
  int v149;
  uint64_t v150;

  v7 = a6;
  v8 = a5;
  v10 = a7;
  v150 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)a2;
  v113 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v116 = *(_OWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 68);
  v110 = *(_DWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 72);
  v119 = *(_DWORD *)(a2 + 80);
  v18 = *(_OWORD *)(a2 + 32);
  v143 = *(_OWORD *)(a2 + 16);
  v144 = v18;
  v142 = *(_OWORD *)a2;
  v97 = v16;
  v99 = WORD2(v18);
  if ((BYTE4(v18) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v19) = v16;
    v20 = a4;
    goto LABEL_16;
  }
  v105 = v14;
  v106 = v13;
  v107 = v12;
  v21 = v143;
  swift_beginAccess();
  v22 = *(_DWORD *)(a2 + 8);
  v100 = *(_QWORD *)(a2 + 16);
  v102 = *(_QWORD *)a2;
  v23 = *(_DWORD *)(a2 + 24);
  v24 = *(_QWORD *)(a2 + 32);
  v25 = *(_QWORD *)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 48);
  v27 = *(_QWORD *)(a2 + 56);
  v93 = *(_QWORD *)(a2 + 72);
  v94 = *(_QWORD *)(a2 + 64);
  v92 = *(_DWORD *)(a2 + 80);
  v28 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v146[16] = *(_OWORD *)(a2 + 32);
  v147 = v28;
  v148 = *(_OWORD *)(a2 + 64);
  v149 = *(_DWORD *)(a2 + 80);
  v29 = *(_OWORD *)(a2 + 16);
  v145 = *(_OWORD *)a2;
  *(_OWORD *)v146 = v29;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v30 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v32 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v143 + 81) & 1) != 0
    || (_DWORD)v94 != *(_DWORD *)(v143 + 32)
    || (_DWORD)v93 != *(_DWORD *)(v143 + 36)
    || v32 != *(_DWORD *)(v143 + 40)
    || v22 != *(_DWORD *)(v143 + 44)
    || v30 != *(_DWORD *)(v143 + 48)
    || v23 != *(_DWORD *)(v143 + 52))
  {
    *(_QWORD *)&v145 = v102;
    DWORD2(v145) = v22;
    *(_QWORD *)v146 = v100;
    *(_DWORD *)&v146[8] = v23;
    *(_DWORD *)&v146[12] = v30;
    *(_QWORD *)&v146[16] = v24;
    *(_QWORD *)&v146[24] = v25;
    *(_QWORD *)&v147 = v26;
    *((_QWORD *)&v147 + 1) = v27;
    *(_QWORD *)&v148 = v94;
    *((_QWORD *)&v148 + 1) = v93;
    v149 = v92;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v145, v32, (uint64_t)&v136);
    v33 = v137;
    v34 = v138;
    v35 = v139;
    v36 = v138 | ((unint64_t)DWORD1(v138) << 32);
    v37 = BYTE8(v138) | ((unint64_t)HIDWORD(v138) << 32);
    *(_OWORD *)(v21 + 32) = v136;
    *(_OWORD *)(v21 + 48) = v33;
    *(_QWORD *)(v21 + 64) = v36;
    *(_QWORD *)(v21 + 72) = v37;
    *(_WORD *)(v21 + 80) = v35;
    if (v34 != 1)
    {
      v19 = HIDWORD(*((_QWORD *)&v33 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v143 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v19) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v21 + 60) = v19;
    *(_BYTE *)(v21 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v19) = *(_DWORD *)(v143 + 60);
LABEL_15:
  v10 = a7;
  v14 = v105;
  v7 = a6;
  v20 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v13 = v106;
  v12 = v107;
  v8 = a5;
LABEL_16:
  *(_QWORD *)&v145 = v11;
  DWORD2(v145) = v113;
  *(_QWORD *)v146 = v12;
  *(_OWORD *)&v146[8] = v116;
  *(_QWORD *)&v146[24] = v13;
  *(_QWORD *)&v147 = v14;
  *((_QWORD *)&v147 + 1) = v15;
  *(_QWORD *)&v148 = __PAIR64__(v19, v110);
  *((_QWORD *)&v148 + 1) = v17;
  v149 = v119;
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a3, (uint64_t)&v145, v20, 0, v8, v7, &v127);
  v38 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v40 = *(_QWORD *)(v38 + 16);
  if (!v40)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v10 = v127;
    v10[1] = v128;
    return result;
  }
  v41 = v39;
  v42 = (_QWORD *)(v38 + 32);
  while (*v42 != v39)
  {
    v42 += 2;
    if (!--v40)
      goto LABEL_57;
  }
  v126 = ++lastIdentity;
  v43 = (int *)MEMORY[0x24BE096C0];
  v44 = v99;
  if ((v99 & 0x100) == 0)
  {
LABEL_22:
    v45 = v143;
    v46 = (unsigned int *)(v143 + 16);
    swift_beginAccess();
    v109 = v10;
    if ((v44 & 0x20) == 0)
    {
      LODWORD(v123) = *(_DWORD *)(a2 + 64);
      OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      v78 = *v46;
      *(_QWORD *)&v136 = v127;
      DWORD2(v136) = v128;
      v79 = PreferencesOutputs.subscript.getter(v41);
      if ((v79 & 0x100000000) != 0)
        v80 = *v43;
      else
        v80 = v79;
      v81 = v142;
      *(_QWORD *)&v129 = v142;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v142);
      outlined retain of ViewTransform((uint64_t)&v129);
      v82 = specialized find<A>(_:key:)(v81);
      if (v82)
        v83 = *(_BYTE *)(v82 + 72);
      else
        v83 = 0;
      outlined release of ViewTransform((uint64_t)&v129);
      outlined release of _GraphInputs((uint64_t)&v142);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v142);
      outlined retain of ViewTransform((uint64_t)&v129);
      v84 = specialized find<A>(_:key:)(v81);
      if (v84)
        v85 = *(_DWORD *)(v84 + 72);
      else
        v85 = 0;
      v86 = *(_DWORD *)(a2 + 60);
      v87 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v129);
      outlined release of _GraphInputs((uint64_t)&v142);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v136 = __PAIR64__(a1, v126);
      *((_QWORD *)&v136 + 1) = __PAIR64__(OffsetAttribute2, v123);
      *(_QWORD *)&v137 = __PAIR64__(v97, v86);
      *((_QWORD *)&v137 + 1) = __PAIR64__(v87, v78);
      LODWORD(v138) = v80;
      BYTE4(v138) = v83;
      DWORD2(v138) = 0;
      HIDWORD(v138) = v85;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect);
      v88 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v136) = 0;
      PreferencesOutputs.subscript.setter(v88, v41, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v89);
      v10 = v109;
      goto LABEL_57;
    }
    v48 = *(_QWORD *)a2;
    v49 = *(_DWORD *)(a2 + 8);
    v120 = *(_QWORD *)(a2 + 16);
    v50 = *(_DWORD *)(a2 + 24);
    v51 = *(_QWORD *)(a2 + 32);
    v114 = *(_QWORD *)(a2 + 48);
    v117 = *(_QWORD *)(a2 + 40);
    v52 = *(_QWORD *)(a2 + 56);
    v124 = *(_QWORD *)(a2 + 64);
    v111 = *(_QWORD *)(a2 + 72);
    v103 = *(_DWORD *)(a2 + 80);
    v53 = *(_OWORD *)(a2 + 48);
    v138 = *(_OWORD *)(a2 + 32);
    v139 = v53;
    v140 = *(_OWORD *)(a2 + 64);
    v141 = *(_DWORD *)(a2 + 80);
    v54 = *(_OWORD *)(a2 + 16);
    v136 = *(_OWORD *)a2;
    v137 = v54;
    outlined retain of _ViewInputs(a2);
    v55 = _ViewInputs.geometryTransaction()();
    v56 = swift_getKeyPath();
    v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
    swift_release();
    if ((*(_BYTE *)(v45 + 81) & 1) == 0
      && (_DWORD)v124 == *(_DWORD *)(v45 + 32)
      && (_DWORD)v111 == *(_DWORD *)(v45 + 36)
      && v57 == *(_DWORD *)(v45 + 40)
      && v49 == *(_DWORD *)(v45 + 44)
      && v55 == *(_DWORD *)(v45 + 48)
      && v50 == *(_DWORD *)(v45 + 52))
    {
      if ((*(_BYTE *)(v45 + 64) & 1) == 0)
      {
        LODWORD(v123) = *(_DWORD *)(v45 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)&v136 = v48;
      DWORD2(v136) = v49;
      *(_QWORD *)&v137 = v120;
      *((_QWORD *)&v137 + 1) = __PAIR64__(v55, v50);
      *(_QWORD *)&v138 = v51;
      *((_QWORD *)&v138 + 1) = v117;
      *(_QWORD *)&v139 = v114;
      *((_QWORD *)&v139 + 1) = v52;
      *(_QWORD *)&v140 = v124;
      *((_QWORD *)&v140 + 1) = v111;
      v141 = v103;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v136, v57, (uint64_t)&v129);
      v58 = v130;
      v59 = v131;
      v60 = v135;
      v61 = v131 | ((unint64_t)v132 << 32);
      v62 = v133 | ((unint64_t)v134 << 32);
      *(_OWORD *)(v45 + 32) = v129;
      *(_OWORD *)(v45 + 48) = v58;
      *(_QWORD *)(v45 + 64) = v61;
      *(_QWORD *)(v45 + 72) = v62;
      *(_WORD *)(v45 + 80) = v60;
      if (v59 != 1)
      {
        v123 = HIDWORD(*((_QWORD *)&v58 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v63 = *(_DWORD *)(a2 + 8);
        v115 = *(_QWORD *)(a2 + 16);
        v118 = *(_QWORD *)a2;
        v64 = *(_DWORD *)(a2 + 24);
        v65 = *(_QWORD *)(a2 + 32);
        v66 = *(_QWORD *)(a2 + 48);
        v121 = *(_QWORD *)(a2 + 40);
        v67 = *(_QWORD *)(a2 + 56);
        v112 = *(_QWORD *)(a2 + 64);
        v104 = *(_QWORD *)(a2 + 72);
        v101 = *(_DWORD *)(a2 + 80);
        v68 = *(_OWORD *)(a2 + 48);
        v138 = *(_OWORD *)(a2 + 32);
        v139 = v68;
        v140 = *(_OWORD *)(a2 + 64);
        v141 = *(_DWORD *)(a2 + 80);
        v69 = *(_OWORD *)(a2 + 16);
        v136 = *(_OWORD *)a2;
        v137 = v69;
        outlined retain of _ViewInputs(a2);
        v70 = _ViewInputs.geometryTransaction()();
        v71 = swift_getKeyPath();
        v72 = specialized CachedEnvironment.attribute<A>(keyPath:)(v71);
        swift_release();
        if ((*(_BYTE *)(v45 + 81) & 1) == 0
          && (_DWORD)v112 == *(_DWORD *)(v45 + 32)
          && (_DWORD)v104 == *(_DWORD *)(v45 + 36)
          && v72 == *(_DWORD *)(v45 + 40)
          && v63 == *(_DWORD *)(v45 + 44)
          && v70 == *(_DWORD *)(v45 + 48)
          && v64 == *(_DWORD *)(v45 + 52))
        {
          if ((*(_BYTE *)(v45 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v45 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(_QWORD *)&v136 = v118;
          DWORD2(v136) = v63;
          *(_QWORD *)&v137 = v115;
          *((_QWORD *)&v137 + 1) = __PAIR64__(v70, v64);
          *(_QWORD *)&v138 = v65;
          *((_QWORD *)&v138 + 1) = v121;
          *(_QWORD *)&v139 = v66;
          *((_QWORD *)&v139 + 1) = v67;
          *(_QWORD *)&v140 = v112;
          *((_QWORD *)&v140 + 1) = v104;
          v141 = v101;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v136, v72, (uint64_t)&v129);
          OffsetAttribute2 = v132;
          v73 = v133;
          v74 = v135;
          v75 = v131 | ((unint64_t)v132 << 32);
          v76 = v133 | ((unint64_t)v134 << 32);
          v77 = v130;
          *(_OWORD *)(v45 + 32) = v129;
          *(_OWORD *)(v45 + 48) = v77;
          *(_QWORD *)(v45 + 64) = v75;
          *(_QWORD *)(v45 + 72) = v76;
          *(_WORD *)(v45 + 80) = v74;
          if (v73 != 1)
            goto LABEL_46;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v45 + 68) = OffsetAttribute2;
        *(_BYTE *)(v45 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v43 = (int *)MEMORY[0x24BE096C0];
        goto LABEL_47;
      }
    }
    LODWORD(v123) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v45 + 60) = v123;
    *(_BYTE *)(v45 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v43)
  {
    LODWORD(v129) = v126;
    v91 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v129);
    v91(&v136, 0);
    v44 = v99;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t KeyPath;
  int v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int *v40;
  char v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int OffsetAttribute2;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned __int8 v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  unsigned int v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t result;
  void (*v88)(__int128 *, _QWORD);
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v94;
  unsigned int v95;
  __int16 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  Swift::UInt32 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned __int8 v127;
  unsigned int v128;
  unsigned __int8 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[32];
  __int128 v141;
  __int128 v142;
  int v143;
  uint64_t v144;

  v5 = a4;
  v6 = a3;
  v8 = a5;
  v144 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a2;
  v113 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v116 = *(_OWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 68);
  v110 = *(_DWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v119 = *(_DWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 32);
  v137 = *(_OWORD *)(a2 + 16);
  v138 = v16;
  v136 = *(_OWORD *)a2;
  v97 = WORD2(v16);
  v95 = v14;
  if ((BYTE4(v16) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v17) = v14;
    goto LABEL_16;
  }
  v106 = v11;
  v107 = v9;
  v18 = v137;
  swift_beginAccess();
  v103 = *(_QWORD *)a2;
  v19 = *(_DWORD *)(a2 + 8);
  v100 = *(_QWORD *)(a2 + 16);
  v20 = *(_DWORD *)(a2 + 24);
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *(_QWORD *)(a2 + 48);
  v24 = *(_QWORD *)(a2 + 56);
  v90 = *(_QWORD *)(a2 + 72);
  v91 = *(_QWORD *)(a2 + 64);
  v89 = *(_DWORD *)(a2 + 80);
  v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
  v141 = v25;
  v142 = *(_OWORD *)(a2 + 64);
  v143 = *(_DWORD *)(a2 + 80);
  v26 = *(_OWORD *)(a2 + 16);
  v139 = *(_OWORD *)a2;
  *(_OWORD *)v140 = v26;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v27 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v29 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v137 + 81) & 1) != 0
    || (_DWORD)v91 != *(_DWORD *)(v137 + 32)
    || (_DWORD)v90 != *(_DWORD *)(v137 + 36)
    || v29 != *(_DWORD *)(v137 + 40)
    || v19 != *(_DWORD *)(v137 + 44)
    || v27 != *(_DWORD *)(v137 + 48)
    || v20 != *(_DWORD *)(v137 + 52))
  {
    *(_QWORD *)&v139 = v103;
    DWORD2(v139) = v19;
    *(_QWORD *)v140 = v100;
    *(_DWORD *)&v140[8] = v20;
    *(_DWORD *)&v140[12] = v27;
    *(_QWORD *)&v140[16] = v21;
    *(_QWORD *)&v140[24] = v22;
    *(_QWORD *)&v141 = v23;
    *((_QWORD *)&v141 + 1) = v24;
    *(_QWORD *)&v142 = v91;
    *((_QWORD *)&v142 + 1) = v90;
    v143 = v89;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v29, (uint64_t)&v130);
    v30 = v131;
    v31 = v132;
    v32 = v133;
    v33 = v132 | ((unint64_t)DWORD1(v132) << 32);
    v34 = BYTE8(v132) | ((unint64_t)HIDWORD(v132) << 32);
    *(_OWORD *)(v18 + 32) = v130;
    *(_OWORD *)(v18 + 48) = v30;
    *(_QWORD *)(v18 + 64) = v33;
    *(_QWORD *)(v18 + 72) = v34;
    *(_WORD *)(v18 + 80) = v32;
    if (v31 != 1)
    {
      v17 = HIDWORD(*((_QWORD *)&v30 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v137 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v17) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v17;
    *(_BYTE *)(v18 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v17) = *(_DWORD *)(v137 + 60);
LABEL_15:
  v9 = v107;
  v8 = a5;
  v5 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v11 = v106;
  v6 = a3;
LABEL_16:
  *(_QWORD *)&v139 = v9;
  DWORD2(v139) = v113;
  *(_QWORD *)v140 = v10;
  *(_OWORD *)&v140[8] = v116;
  *(_QWORD *)&v140[24] = v12;
  *(_QWORD *)&v141 = v11;
  *((_QWORD *)&v141 + 1) = v13;
  *(_QWORD *)&v142 = __PAIR64__(v17, v110);
  *((_QWORD *)&v142 + 1) = v15;
  v143 = v119;
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v6, (uint64_t)&v139, v5, 0, &v121);
  v35 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v37 = *(_QWORD *)(v35 + 16);
  if (!v37)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v8 = v121;
    v8[1] = v122;
    return result;
  }
  v38 = v36;
  v39 = (_QWORD *)(v35 + 32);
  while (*v39 != v36)
  {
    v39 += 2;
    if (!--v37)
      goto LABEL_57;
  }
  v120 = ++lastIdentity;
  v40 = (int *)MEMORY[0x24BE096C0];
  v41 = v97;
  if ((v97 & 0x100) == 0)
  {
LABEL_22:
    v109 = v8;
    v42 = v137;
    v43 = (unsigned int *)(v137 + 16);
    swift_beginAccess();
    if ((v41 & 0x20) == 0)
    {
      LODWORD(v117) = *(_DWORD *)(a2 + 64);
      OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      v75 = *v43;
      *(_QWORD *)&v130 = v121;
      DWORD2(v130) = v122;
      v76 = PreferencesOutputs.subscript.getter(v38);
      if ((v76 & 0x100000000) != 0)
        v77 = *v40;
      else
        v77 = v76;
      v78 = v136;
      *(_QWORD *)&v123 = v136;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v136);
      outlined retain of ViewTransform((uint64_t)&v123);
      v79 = specialized find<A>(_:key:)(v78);
      if (v79)
        v80 = *(_BYTE *)(v79 + 72);
      else
        v80 = 0;
      v8 = v109;
      outlined release of ViewTransform((uint64_t)&v123);
      outlined release of _GraphInputs((uint64_t)&v136);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v136);
      outlined retain of ViewTransform((uint64_t)&v123);
      v81 = specialized find<A>(_:key:)(v78);
      if (v81)
        v82 = *(_DWORD *)(v81 + 72);
      else
        v82 = 0;
      v83 = *(_DWORD *)(a2 + 60);
      v84 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v123);
      outlined release of _GraphInputs((uint64_t)&v136);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v130 = __PAIR64__(a1, v120);
      *((_QWORD *)&v130 + 1) = __PAIR64__(OffsetAttribute2, v117);
      *(_QWORD *)&v131 = __PAIR64__(v95, v83);
      *((_QWORD *)&v131 + 1) = __PAIR64__(v84, v75);
      LODWORD(v132) = v77;
      BYTE4(v132) = v80;
      DWORD2(v132) = 0;
      HIDWORD(v132) = v82;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect);
      v85 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v130) = 0;
      PreferencesOutputs.subscript.setter(v85, v38, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v86);
      goto LABEL_57;
    }
    v45 = *(_QWORD *)a2;
    v46 = *(_DWORD *)(a2 + 8);
    v47 = *(_DWORD *)(a2 + 24);
    v48 = *(_QWORD *)(a2 + 32);
    v111 = *(_QWORD *)(a2 + 40);
    v114 = *(_QWORD *)(a2 + 16);
    v104 = *(_QWORD *)(a2 + 48);
    v49 = *(_QWORD *)(a2 + 56);
    v118 = *(_QWORD *)(a2 + 64);
    v101 = *(_QWORD *)(a2 + 72);
    v98 = *(_DWORD *)(a2 + 80);
    v50 = *(_OWORD *)(a2 + 48);
    v132 = *(_OWORD *)(a2 + 32);
    v133 = v50;
    v134 = *(_OWORD *)(a2 + 64);
    v135 = *(_DWORD *)(a2 + 80);
    v51 = *(_OWORD *)(a2 + 16);
    v130 = *(_OWORD *)a2;
    v131 = v51;
    outlined retain of _ViewInputs(a2);
    v52 = _ViewInputs.geometryTransaction()();
    v53 = swift_getKeyPath();
    v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v53);
    swift_release();
    if ((*(_BYTE *)(v42 + 81) & 1) == 0
      && (_DWORD)v118 == *(_DWORD *)(v42 + 32)
      && (_DWORD)v101 == *(_DWORD *)(v42 + 36)
      && v54 == *(_DWORD *)(v42 + 40)
      && v46 == *(_DWORD *)(v42 + 44)
      && v52 == *(_DWORD *)(v42 + 48)
      && v47 == *(_DWORD *)(v42 + 52))
    {
      if ((*(_BYTE *)(v42 + 64) & 1) == 0)
      {
        LODWORD(v117) = *(_DWORD *)(v42 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)&v130 = v45;
      DWORD2(v130) = v46;
      *(_QWORD *)&v131 = v114;
      *((_QWORD *)&v131 + 1) = __PAIR64__(v52, v47);
      *(_QWORD *)&v132 = v48;
      *((_QWORD *)&v132 + 1) = v111;
      *(_QWORD *)&v133 = v104;
      *((_QWORD *)&v133 + 1) = v49;
      *(_QWORD *)&v134 = v118;
      *((_QWORD *)&v134 + 1) = v101;
      v135 = v98;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v54, (uint64_t)&v123);
      v55 = v124;
      v56 = v125;
      v57 = v129;
      v58 = v125 | ((unint64_t)v126 << 32);
      v59 = v127 | ((unint64_t)v128 << 32);
      *(_OWORD *)(v42 + 32) = v123;
      *(_OWORD *)(v42 + 48) = v55;
      *(_QWORD *)(v42 + 64) = v58;
      *(_QWORD *)(v42 + 72) = v59;
      *(_WORD *)(v42 + 80) = v57;
      if (v56 != 1)
      {
        v117 = HIDWORD(*((_QWORD *)&v55 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v105 = *(_QWORD *)a2;
        v60 = *(_DWORD *)(a2 + 8);
        v61 = *(_DWORD *)(a2 + 24);
        v62 = *(_QWORD *)(a2 + 32);
        v63 = *(_QWORD *)(a2 + 48);
        v112 = *(_QWORD *)(a2 + 40);
        v115 = *(_QWORD *)(a2 + 16);
        v64 = *(_QWORD *)(a2 + 56);
        v99 = *(_QWORD *)(a2 + 72);
        v102 = *(_QWORD *)(a2 + 64);
        v94 = *(_DWORD *)(a2 + 80);
        v65 = *(_OWORD *)(a2 + 48);
        v132 = *(_OWORD *)(a2 + 32);
        v133 = v65;
        v134 = *(_OWORD *)(a2 + 64);
        v135 = *(_DWORD *)(a2 + 80);
        v66 = *(_OWORD *)(a2 + 16);
        v130 = *(_OWORD *)a2;
        v131 = v66;
        outlined retain of _ViewInputs(a2);
        v67 = _ViewInputs.geometryTransaction()();
        v68 = swift_getKeyPath();
        v69 = specialized CachedEnvironment.attribute<A>(keyPath:)(v68);
        swift_release();
        if ((*(_BYTE *)(v42 + 81) & 1) == 0
          && (_DWORD)v102 == *(_DWORD *)(v42 + 32)
          && (_DWORD)v99 == *(_DWORD *)(v42 + 36)
          && v69 == *(_DWORD *)(v42 + 40)
          && v60 == *(_DWORD *)(v42 + 44)
          && v67 == *(_DWORD *)(v42 + 48)
          && v61 == *(_DWORD *)(v42 + 52))
        {
          v40 = (int *)MEMORY[0x24BE096C0];
          if ((*(_BYTE *)(v42 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v42 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(_QWORD *)&v130 = v105;
          DWORD2(v130) = v60;
          *(_QWORD *)&v131 = v115;
          *((_QWORD *)&v131 + 1) = __PAIR64__(v67, v61);
          *(_QWORD *)&v132 = v62;
          *((_QWORD *)&v132 + 1) = v112;
          *(_QWORD *)&v133 = v63;
          *((_QWORD *)&v133 + 1) = v64;
          *(_QWORD *)&v134 = v102;
          *((_QWORD *)&v134 + 1) = v99;
          v135 = v94;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v69, (uint64_t)&v123);
          OffsetAttribute2 = v126;
          v70 = v127;
          v71 = v129;
          v72 = v125 | ((unint64_t)v126 << 32);
          v73 = v127 | ((unint64_t)v128 << 32);
          v74 = v124;
          *(_OWORD *)(v42 + 32) = v123;
          *(_OWORD *)(v42 + 48) = v74;
          *(_QWORD *)(v42 + 64) = v72;
          *(_QWORD *)(v42 + 72) = v73;
          *(_WORD *)(v42 + 80) = v71;
          v40 = (int *)MEMORY[0x24BE096C0];
          if (v70 != 1)
            goto LABEL_46;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v42 + 68) = OffsetAttribute2;
        *(_BYTE *)(v42 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_47;
      }
    }
    LODWORD(v117) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v42 + 60) = v117;
    *(_BYTE *)(v42 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v40)
  {
    LODWORD(v123) = v120;
    v88 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v123);
    v88(&v130, 0);
    v41 = v97;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  void (*v4)(uint64_t *__return_ptr, __int128 *);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t KeyPath;
  int v27;
  __int128 v28;
  uint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  int *v40;
  unsigned int OffsetAttribute2;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  unsigned __int8 v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned __int8 v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t result;
  void (*v84)(__int128 *, _QWORD);
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v90;
  int v91;
  __int16 v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  Swift::UInt32 v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  unsigned __int8 v122;
  unsigned int v123;
  unsigned __int8 v124;
  unsigned int v125;
  unsigned __int8 v126;
  __int128 v127;
  _BYTE v128[32];
  __int128 v129;
  __int128 v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;

  v4 = a3;
  v6 = a4;
  v135 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a2;
  v110 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v113 = *(_OWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_DWORD *)(a2 + 68);
  v107 = *(_DWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v116 = *(_DWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 32);
  v133 = *(_OWORD *)(a2 + 16);
  v134 = v14;
  v132 = *(_OWORD *)a2;
  v93 = WORD2(v14);
  v91 = v12;
  if ((BYTE4(v14) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v15) = v12;
    goto LABEL_16;
  }
  v102 = v9;
  v103 = v8;
  v104 = v7;
  v16 = v133;
  swift_beginAccess();
  v99 = *(_QWORD *)a2;
  v17 = *(_DWORD *)(a2 + 8);
  v96 = *(_QWORD *)(a2 + 16);
  v18 = *(_DWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  v86 = *(_QWORD *)(a2 + 72);
  v87 = *(_QWORD *)(a2 + 64);
  v85 = *(_DWORD *)(a2 + 80);
  v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v128[16] = *(_OWORD *)(a2 + 32);
  v129 = v23;
  v130 = *(_OWORD *)(a2 + 64);
  v131 = *(_DWORD *)(a2 + 80);
  v24 = *(_OWORD *)(a2 + 16);
  v127 = *(_OWORD *)a2;
  *(_OWORD *)v128 = v24;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  v25 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v133 + 81) & 1) != 0
    || (_DWORD)v87 != *(_DWORD *)(v133 + 32)
    || (_DWORD)v86 != *(_DWORD *)(v133 + 36)
    || v27 != *(_DWORD *)(v133 + 40)
    || v17 != *(_DWORD *)(v133 + 44)
    || v25 != *(_DWORD *)(v133 + 48)
    || v18 != *(_DWORD *)(v133 + 52))
  {
    *(_QWORD *)&v127 = v99;
    DWORD2(v127) = v17;
    *(_QWORD *)v128 = v96;
    *(_DWORD *)&v128[8] = v18;
    *(_DWORD *)&v128[12] = v25;
    *(_QWORD *)&v128[16] = v19;
    *(_QWORD *)&v128[24] = v21;
    *(_QWORD *)&v129 = v20;
    *((_QWORD *)&v129 + 1) = v22;
    *(_QWORD *)&v130 = v87;
    *((_QWORD *)&v130 + 1) = v86;
    v131 = v85;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v27, (uint64_t)&v120);
    v28 = v121;
    v29 = v122;
    v30 = v126;
    v31 = v122 | ((unint64_t)v123 << 32);
    v32 = v124 | ((unint64_t)v125 << 32);
    *(_OWORD *)(v16 + 32) = v120;
    *(_OWORD *)(v16 + 48) = v28;
    *(_QWORD *)(v16 + 64) = v31;
    *(_QWORD *)(v16 + 72) = v32;
    *(_WORD *)(v16 + 80) = v30;
    if (v29 != 1)
    {
      v15 = HIDWORD(*((_QWORD *)&v28 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v133 + 64) & 1) != 0)
  {
LABEL_13:
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v15;
    *(_BYTE *)(v16 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v15) = *(_DWORD *)(v133 + 60);
LABEL_15:
  v7 = v104;
  v6 = a4;
  v4 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  v8 = v103;
  v9 = v102;
LABEL_16:
  *(_QWORD *)&v127 = v7;
  DWORD2(v127) = v110;
  *(_QWORD *)v128 = v8;
  *(_OWORD *)&v128[8] = v113;
  *(_QWORD *)&v128[24] = v10;
  *(_QWORD *)&v129 = v9;
  *((_QWORD *)&v129 + 1) = v11;
  *(_QWORD *)&v130 = __PAIR64__(v15, v107);
  *((_QWORD *)&v130 + 1) = v13;
  v131 = v116;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4(&v118, &v127);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v33 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v35 = *(_QWORD *)(v33 + 16);
  if (!v35)
  {
LABEL_57:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *v6 = v118;
    v6[1] = v119;
    return result;
  }
  v36 = v34;
  v37 = (_QWORD *)(v33 + 32);
  while (*v37 != v34)
  {
    v37 += 2;
    if (!--v35)
      goto LABEL_57;
  }
  v117 = ++lastIdentity;
  v38 = v93;
  if ((v93 & 0x100) == 0)
  {
LABEL_22:
    v39 = v133;
    v40 = (int *)(v133 + 16);
    swift_beginAccess();
    v106 = v6;
    if ((v38 & 0x20) == 0)
    {
      LODWORD(v114) = *(_DWORD *)(a2 + 64);
      OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      v71 = *v40;
      *(_QWORD *)&v127 = v118;
      DWORD2(v127) = v119;
      v72 = PreferencesOutputs.subscript.getter(v36);
      if ((v72 & 0x100000000) != 0)
        v73 = *MEMORY[0x24BE096C0];
      else
        v73 = v72;
      v74 = v132;
      *(_QWORD *)&v120 = v132;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v132);
      outlined retain of ViewTransform((uint64_t)&v120);
      v75 = specialized find<A>(_:key:)(v74);
      if (v75)
        v76 = *(_BYTE *)(v75 + 72);
      else
        v76 = 0;
      outlined release of ViewTransform((uint64_t)&v120);
      outlined release of _GraphInputs((uint64_t)&v132);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v132);
      outlined retain of ViewTransform((uint64_t)&v120);
      v77 = specialized find<A>(_:key:)(v74);
      if (v77)
        v78 = *(_DWORD *)(v77 + 72);
      else
        v78 = 0;
      v79 = *(_DWORD *)(a2 + 60);
      v80 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v120);
      outlined release of _GraphInputs((uint64_t)&v132);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v127 = __PAIR64__(a1, v117);
      *((_QWORD *)&v127 + 1) = __PAIR64__(OffsetAttribute2, v114);
      *(_DWORD *)v128 = v79;
      *(_DWORD *)&v128[4] = v91;
      *(_DWORD *)&v128[8] = v71;
      *(_DWORD *)&v128[12] = v80;
      *(_DWORD *)&v128[16] = v73;
      v128[20] = v76;
      *(_DWORD *)&v128[24] = 0;
      *(_DWORD *)&v128[28] = v78;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect);
      v81 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v127) = 0;
      PreferencesOutputs.subscript.setter(v81, v36, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v82);
      v6 = v106;
      goto LABEL_57;
    }
    v42 = *(_QWORD *)a2;
    v43 = *(_DWORD *)(a2 + 8);
    v44 = *(_DWORD *)(a2 + 24);
    v45 = *(_QWORD *)(a2 + 32);
    v108 = *(_QWORD *)(a2 + 40);
    v111 = *(_QWORD *)(a2 + 16);
    v100 = *(_QWORD *)(a2 + 48);
    v46 = *(_QWORD *)(a2 + 56);
    v115 = *(_QWORD *)(a2 + 64);
    v97 = *(_QWORD *)(a2 + 72);
    v94 = *(_DWORD *)(a2 + 80);
    v47 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v128[16] = *(_OWORD *)(a2 + 32);
    v129 = v47;
    v130 = *(_OWORD *)(a2 + 64);
    v131 = *(_DWORD *)(a2 + 80);
    v48 = *(_OWORD *)(a2 + 16);
    v127 = *(_OWORD *)a2;
    *(_OWORD *)v128 = v48;
    outlined retain of _ViewInputs(a2);
    v49 = _ViewInputs.geometryTransaction()();
    v50 = swift_getKeyPath();
    v51 = specialized CachedEnvironment.attribute<A>(keyPath:)(v50);
    swift_release();
    if ((*(_BYTE *)(v39 + 81) & 1) == 0
      && (_DWORD)v115 == *(_DWORD *)(v39 + 32)
      && (_DWORD)v97 == *(_DWORD *)(v39 + 36)
      && v51 == *(_DWORD *)(v39 + 40)
      && v43 == *(_DWORD *)(v39 + 44)
      && v49 == *(_DWORD *)(v39 + 48)
      && v44 == *(_DWORD *)(v39 + 52))
    {
      if ((*(_BYTE *)(v39 + 64) & 1) == 0)
      {
        LODWORD(v114) = *(_DWORD *)(v39 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)&v127 = v42;
      DWORD2(v127) = v43;
      *(_QWORD *)v128 = v111;
      *(_DWORD *)&v128[8] = v44;
      *(_DWORD *)&v128[12] = v49;
      *(_QWORD *)&v128[16] = v45;
      *(_QWORD *)&v128[24] = v108;
      *(_QWORD *)&v129 = v100;
      *((_QWORD *)&v129 + 1) = v46;
      *(_QWORD *)&v130 = v115;
      *((_QWORD *)&v130 + 1) = v97;
      v131 = v94;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v51, (uint64_t)&v120);
      v52 = v121;
      v53 = v122;
      v54 = v126;
      v55 = v122 | ((unint64_t)v123 << 32);
      v56 = v124 | ((unint64_t)v125 << 32);
      *(_OWORD *)(v39 + 32) = v120;
      *(_OWORD *)(v39 + 48) = v52;
      *(_QWORD *)(v39 + 64) = v55;
      *(_QWORD *)(v39 + 72) = v56;
      *(_WORD *)(v39 + 80) = v54;
      if (v53 != 1)
      {
        v114 = HIDWORD(*((_QWORD *)&v52 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v57 = *(_DWORD *)(a2 + 8);
        v101 = *(_QWORD *)(a2 + 16);
        v58 = *(_DWORD *)(a2 + 24);
        v59 = *(_QWORD *)(a2 + 32);
        v98 = *(_QWORD *)(a2 + 40);
        v109 = *(_QWORD *)a2;
        v112 = *(_QWORD *)(a2 + 48);
        v60 = *(_QWORD *)(a2 + 56);
        v95 = *(_QWORD *)(a2 + 64);
        v90 = *(_QWORD *)(a2 + 72);
        v88 = *(_DWORD *)(a2 + 80);
        v61 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v128[16] = *(_OWORD *)(a2 + 32);
        v129 = v61;
        v130 = *(_OWORD *)(a2 + 64);
        v131 = *(_DWORD *)(a2 + 80);
        v62 = *(_OWORD *)(a2 + 16);
        v127 = *(_OWORD *)a2;
        *(_OWORD *)v128 = v62;
        outlined retain of _ViewInputs(a2);
        v63 = _ViewInputs.geometryTransaction()();
        v64 = swift_getKeyPath();
        v65 = specialized CachedEnvironment.attribute<A>(keyPath:)(v64);
        swift_release();
        if ((*(_BYTE *)(v39 + 81) & 1) == 0
          && (_DWORD)v95 == *(_DWORD *)(v39 + 32)
          && (_DWORD)v90 == *(_DWORD *)(v39 + 36)
          && v65 == *(_DWORD *)(v39 + 40)
          && v57 == *(_DWORD *)(v39 + 44)
          && v63 == *(_DWORD *)(v39 + 48)
          && v58 == *(_DWORD *)(v39 + 52))
        {
          if ((*(_BYTE *)(v39 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v39 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(_QWORD *)&v127 = v109;
          DWORD2(v127) = v57;
          *(_QWORD *)v128 = v101;
          *(_DWORD *)&v128[8] = v58;
          *(_DWORD *)&v128[12] = v63;
          *(_QWORD *)&v128[16] = v59;
          *(_QWORD *)&v128[24] = v98;
          *(_QWORD *)&v129 = v112;
          *((_QWORD *)&v129 + 1) = v60;
          *(_QWORD *)&v130 = v95;
          *((_QWORD *)&v130 + 1) = v90;
          v131 = v88;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v65, (uint64_t)&v120);
          OffsetAttribute2 = v123;
          v66 = v124;
          v67 = v126;
          v68 = v122 | ((unint64_t)v123 << 32);
          v69 = v124 | ((unint64_t)v125 << 32);
          v70 = v121;
          *(_OWORD *)(v39 + 32) = v120;
          *(_OWORD *)(v39 + 48) = v70;
          *(_QWORD *)(v39 + 64) = v68;
          *(_QWORD *)(v39 + 72) = v69;
          *(_WORD *)(v39 + 80) = v67;
          if (v66 != 1)
            goto LABEL_46;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v39 + 68) = OffsetAttribute2;
        *(_BYTE *)(v39 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_47;
      }
    }
    LODWORD(v114) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v39 + 60) = v114;
    *(_BYTE *)(v39 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    LODWORD(v120) = v117;
    v84 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v120);
    v84(&v127, 0);
    v38 = v93;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unsigned int a4@<W4>, _QWORD *a5@<X8>)
{
  __int128 v7;
  __int128 v8;
  Swift::UInt value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t KeyPath;
  int v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  Swift::UInt32 v45;
  int *v46;
  uint64_t v47;
  int *v48;
  unsigned int OffsetAttribute2;
  uint64_t v50;
  Swift::UInt v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  unsigned __int8 v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  int v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t result;
  int v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  int v100;
  uint64_t v102;
  int v103;
  Swift::UInt v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  Swift::UInt v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(__int128 *, _QWORD);
  Swift::UInt32 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  unsigned __int8 v134;
  unsigned int v135;
  unsigned __int8 v136;
  unsigned int v137;
  unsigned __int8 v138;
  __int128 v139;
  _BYTE v140[32];
  __int128 v141;
  __int128 v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD v147[3];

  v147[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_OWORD *)(a2 + 16);
  v144 = *(_OWORD *)a2;
  v145 = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v146 = *(_OWORD *)(a2 + 32);
  v147[0] = v144;
  value = *(_QWORD *)a2;
  v118 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v121 = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  LODWORD(v14) = *(_DWORD *)(a2 + 68);
  v115 = *(_DWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v112 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
  v141 = v8;
  v142 = *(_OWORD *)(a2 + 64);
  v143 = *(_DWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 16);
  v139 = *(_OWORD *)a2;
  *(_OWORD *)v140 = v16;
  v17 = _ViewInputs.isScrapeable.getter();
  outlined retain of _ViewInputs(a2);
  v111 = v144;
  if (v17)
  {
    v18 = AGMakeUniqueID();
    v19 = swift_retain();
    v20 = specialized find<A>(_:key:)(v19);
    if (!v20 || *(_DWORD *)(v20 + 72) != v18)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>, (uint64_t)&type metadata for _ViewInputs.ScrapeableParentID, (uint64_t)&protocol witness table for _ViewInputs.ScrapeableParentID, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v18;
      value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _ViewInputs.ScrapeableParentID, 0, v111).value;
    }
    outlined release of ViewTransform((uint64_t)v147);
  }
  else
  {
    v18 = 0;
  }
  v100 = v18;
  v21 = WORD2(v146);
  if ((BYTE4(v146) & 0x20) != 0)
  {
    v99 = WORD2(v146);
    v107 = v12;
    v108 = v11;
    v109 = v10;
    v22 = v145;
    swift_beginAccess();
    v23 = *(_DWORD *)(a2 + 8);
    v102 = *(_QWORD *)(a2 + 16);
    v104 = *(_QWORD *)a2;
    v24 = *(_DWORD *)(a2 + 24);
    v25 = *(_QWORD *)(a2 + 32);
    v26 = *(_QWORD *)(a2 + 40);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_QWORD *)(a2 + 56);
    v97 = *(_QWORD *)(a2 + 72);
    v98 = *(_QWORD *)(a2 + 64);
    v96 = *(_DWORD *)(a2 + 80);
    v29 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
    v141 = v29;
    v142 = *(_OWORD *)(a2 + 64);
    v143 = *(_DWORD *)(a2 + 80);
    v30 = *(_OWORD *)(a2 + 16);
    v139 = *(_OWORD *)a2;
    *(_OWORD *)v140 = v30;
    outlined retain of _ViewInputs(a2);
    v31 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v33 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v145 + 81) & 1) == 0
      && (_DWORD)v98 == *(_DWORD *)(v145 + 32)
      && (_DWORD)v97 == *(_DWORD *)(v145 + 36)
      && v33 == *(_DWORD *)(v145 + 40)
      && v23 == *(_DWORD *)(v145 + 44)
      && v31 == *(_DWORD *)(v145 + 48)
      && v24 == *(_DWORD *)(v145 + 52))
    {
      if ((*(_BYTE *)(v145 + 64) & 1) == 0)
      {
        LODWORD(v14) = *(_DWORD *)(v145 + 60);
LABEL_20:
        v10 = v109;
        v21 = v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        v12 = v107;
        v11 = v108;
        goto LABEL_21;
      }
    }
    else
    {
      *(_QWORD *)&v139 = v104;
      DWORD2(v139) = v23;
      *(_QWORD *)v140 = v102;
      *(_DWORD *)&v140[8] = v24;
      *(_DWORD *)&v140[12] = v31;
      *(_QWORD *)&v140[16] = v25;
      *(_QWORD *)&v140[24] = v26;
      *(_QWORD *)&v141 = v27;
      *((_QWORD *)&v141 + 1) = v28;
      *(_QWORD *)&v142 = v98;
      *((_QWORD *)&v142 + 1) = v97;
      v143 = v96;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v33, (uint64_t)&v132);
      v34 = v133;
      v35 = v134;
      v36 = v138;
      v37 = v134 | ((unint64_t)v135 << 32);
      v38 = v136 | ((unint64_t)v137 << 32);
      *(_OWORD *)(v22 + 32) = v132;
      *(_OWORD *)(v22 + 48) = v34;
      *(_QWORD *)(v22 + 64) = v37;
      *(_QWORD *)(v22 + 72) = v38;
      *(_WORD *)(v22 + 80) = v36;
      if (v35 != 1)
      {
        v14 = HIDWORD(*((_QWORD *)&v34 + 1));
        goto LABEL_20;
      }
    }
    LODWORD(v14) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v22 + 60) = v14;
    *(_BYTE *)(v22 + 64) = 0;
    goto LABEL_20;
  }
LABEL_21:
  *(_QWORD *)&v139 = value;
  DWORD2(v139) = v118;
  *(_QWORD *)v140 = v10;
  *(_OWORD *)&v140[8] = v121;
  *(_QWORD *)&v140[24] = v11;
  *(_QWORD *)&v141 = v12;
  *((_QWORD *)&v141 + 1) = v13;
  *(_QWORD *)&v142 = __PAIR64__(v14, v115);
  *((_QWORD *)&v142 + 1) = v15;
  v143 = v112;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v39 = swift_bridgeObjectRetain();
  closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)(v39, (uint64_t)&v139, a3, a4, (double *)&v130);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v40 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v42 = *(_QWORD *)(v40 + 16);
  if (!v42)
  {
LABEL_64:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *a5 = v130;
    a5[1] = v131;
    return result;
  }
  v43 = v41;
  v44 = (_QWORD *)(v40 + 32);
  while (*v44 != v41)
  {
    v44 += 2;
    if (!--v42)
      goto LABEL_64;
  }
  v45 = ++lastIdentity;
  v46 = (int *)MEMORY[0x24BE096C0];
  if ((v21 & 0x100) == 0)
  {
LABEL_27:
    v47 = v145;
    v48 = (int *)(v145 + 16);
    swift_beginAccess();
    v110 = a5;
    v129 = v45;
    if ((v21 & 0x20) == 0)
    {
      LODWORD(v125) = *(_DWORD *)(a2 + 64);
      OffsetAttribute2 = *(_DWORD *)(a2 + 72);
      v50 = v111;
LABEL_52:
      swift_endAccess();
      v81 = *v48;
      *(_QWORD *)&v139 = v130;
      DWORD2(v139) = v131;
      v82 = PreferencesOutputs.subscript.getter(v43);
      if ((v82 & 0x100000000) != 0)
        v83 = *v46;
      else
        v83 = v82;
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)v147);
      outlined retain of _GraphInputs((uint64_t)&v144);
      v84 = specialized find<A>(_:key:)(v50);
      if (v84)
        v85 = *(_BYTE *)(v84 + 72);
      else
        v85 = 0;
      outlined release of ViewTransform((uint64_t)v147);
      outlined release of _GraphInputs((uint64_t)&v144);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)v147);
      outlined retain of _GraphInputs((uint64_t)&v144);
      v86 = specialized find<A>(_:key:)(v50);
      if (v86)
        v87 = *(_DWORD *)(v86 + 72);
      else
        v87 = 0;
      v88 = *(_DWORD *)(a2 + 60);
      v89 = *(_DWORD *)(a2 + 68);
      v90 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)v147);
      outlined release of _GraphInputs((uint64_t)&v144);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(_QWORD *)&v139 = __PAIR64__(a1, v129);
      *((_QWORD *)&v139 + 1) = __PAIR64__(OffsetAttribute2, v125);
      *(_DWORD *)v140 = v88;
      *(_DWORD *)&v140[4] = v89;
      *(_DWORD *)&v140[8] = v81;
      *(_DWORD *)&v140[12] = v90;
      *(_DWORD *)&v140[16] = v83;
      v140[20] = v85;
      *(_DWORD *)&v140[24] = v100;
      *(_DWORD *)&v140[28] = v87;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<_OpacityEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect);
      v91 = Attribute.init<A>(body:value:flags:update:)();
      v92 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
      v141 = v92;
      v142 = *(_OWORD *)(a2 + 64);
      v143 = *(_DWORD *)(a2 + 80);
      v93 = *(_OWORD *)(a2 + 16);
      v139 = *(_OWORD *)a2;
      *(_OWORD *)v140 = v93;
      if (_ViewInputs.isScrapeable.getter())
      {
        AGGraphGetFlags();
        AGGraphSetFlags();
      }
      LOBYTE(v139) = 0;
      PreferencesOutputs.subscript.setter(v91, v43, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v94);
      a5 = v110;
      goto LABEL_64;
    }
    v51 = *(_QWORD *)a2;
    v52 = *(_DWORD *)(a2 + 8);
    v53 = *(_DWORD *)(a2 + 24);
    v54 = *(_QWORD *)(a2 + 32);
    v119 = *(_QWORD *)(a2 + 40);
    v122 = *(_QWORD *)(a2 + 16);
    v116 = *(_QWORD *)(a2 + 48);
    v55 = *(_QWORD *)(a2 + 56);
    v126 = *(_QWORD *)(a2 + 64);
    v113 = *(_QWORD *)(a2 + 72);
    v105 = *(_DWORD *)(a2 + 80);
    v56 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
    v141 = v56;
    v142 = *(_OWORD *)(a2 + 64);
    v143 = *(_DWORD *)(a2 + 80);
    v57 = *(_OWORD *)(a2 + 16);
    v139 = *(_OWORD *)a2;
    *(_OWORD *)v140 = v57;
    outlined retain of _ViewInputs(a2);
    v58 = _ViewInputs.geometryTransaction()();
    v59 = swift_getKeyPath();
    v60 = specialized CachedEnvironment.attribute<A>(keyPath:)(v59);
    swift_release();
    if ((*(_BYTE *)(v47 + 81) & 1) == 0
      && (_DWORD)v126 == *(_DWORD *)(v47 + 32)
      && (_DWORD)v113 == *(_DWORD *)(v47 + 36)
      && v60 == *(_DWORD *)(v47 + 40)
      && v52 == *(_DWORD *)(v47 + 44)
      && v58 == *(_DWORD *)(v47 + 48)
      && v53 == *(_DWORD *)(v47 + 52))
    {
      if ((*(_BYTE *)(v47 + 64) & 1) == 0)
      {
        LODWORD(v125) = *(_DWORD *)(v47 + 60);
        goto LABEL_40;
      }
    }
    else
    {
      *(_QWORD *)&v139 = v51;
      DWORD2(v139) = v52;
      *(_QWORD *)v140 = v122;
      *(_DWORD *)&v140[8] = v53;
      *(_DWORD *)&v140[12] = v58;
      *(_QWORD *)&v140[16] = v54;
      *(_QWORD *)&v140[24] = v119;
      *(_QWORD *)&v141 = v116;
      *((_QWORD *)&v141 + 1) = v55;
      *(_QWORD *)&v142 = v126;
      *((_QWORD *)&v142 + 1) = v113;
      v143 = v105;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v60, (uint64_t)&v132);
      v61 = v133;
      v62 = v134;
      v63 = v138;
      v64 = v134 | ((unint64_t)v135 << 32);
      v65 = v136 | ((unint64_t)v137 << 32);
      *(_OWORD *)(v47 + 32) = v132;
      *(_OWORD *)(v47 + 48) = v61;
      *(_QWORD *)(v47 + 64) = v64;
      *(_QWORD *)(v47 + 72) = v65;
      *(_WORD *)(v47 + 80) = v63;
      if (v62 != 1)
      {
        v125 = HIDWORD(*((_QWORD *)&v61 + 1));
LABEL_40:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v66 = *(_DWORD *)(a2 + 8);
        v123 = *(_QWORD *)(a2 + 16);
        v67 = *(_DWORD *)(a2 + 24);
        v68 = *(_QWORD *)(a2 + 32);
        v69 = *(_QWORD *)(a2 + 48);
        v117 = *(_QWORD *)a2;
        v120 = *(_QWORD *)(a2 + 40);
        v70 = *(_QWORD *)(a2 + 56);
        v114 = *(_QWORD *)(a2 + 64);
        v106 = *(_QWORD *)(a2 + 72);
        v103 = *(_DWORD *)(a2 + 80);
        v71 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
        v141 = v71;
        v142 = *(_OWORD *)(a2 + 64);
        v143 = *(_DWORD *)(a2 + 80);
        v72 = *(_OWORD *)(a2 + 16);
        v139 = *(_OWORD *)a2;
        *(_OWORD *)v140 = v72;
        outlined retain of _ViewInputs(a2);
        v73 = _ViewInputs.geometryTransaction()();
        v74 = swift_getKeyPath();
        v75 = specialized CachedEnvironment.attribute<A>(keyPath:)(v74);
        swift_release();
        if ((*(_BYTE *)(v47 + 81) & 1) == 0
          && (_DWORD)v114 == *(_DWORD *)(v47 + 32)
          && (_DWORD)v106 == *(_DWORD *)(v47 + 36)
          && v75 == *(_DWORD *)(v47 + 40)
          && v66 == *(_DWORD *)(v47 + 44)
          && v73 == *(_DWORD *)(v47 + 48)
          && v67 == *(_DWORD *)(v47 + 52))
        {
          v50 = v111;
          v46 = (int *)MEMORY[0x24BE096C0];
          if ((*(_BYTE *)(v47 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v47 + 68);
            goto LABEL_51;
          }
        }
        else
        {
          *(_QWORD *)&v139 = v117;
          DWORD2(v139) = v66;
          *(_QWORD *)v140 = v123;
          *(_DWORD *)&v140[8] = v67;
          *(_DWORD *)&v140[12] = v73;
          *(_QWORD *)&v140[16] = v68;
          *(_QWORD *)&v140[24] = v120;
          *(_QWORD *)&v141 = v69;
          *((_QWORD *)&v141 + 1) = v70;
          *(_QWORD *)&v142 = v114;
          *((_QWORD *)&v142 + 1) = v106;
          v143 = v103;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v75, (uint64_t)&v132);
          OffsetAttribute2 = v135;
          v76 = v136;
          v77 = v138;
          v78 = v134 | ((unint64_t)v135 << 32);
          v79 = v136 | ((unint64_t)v137 << 32);
          v80 = v133;
          *(_OWORD *)(v47 + 32) = v132;
          *(_OWORD *)(v47 + 48) = v80;
          *(_QWORD *)(v47 + 64) = v78;
          *(_QWORD *)(v47 + 72) = v79;
          *(_WORD *)(v47 + 80) = v77;
          v50 = v111;
          v46 = (int *)MEMORY[0x24BE096C0];
          if (v76 != 1)
            goto LABEL_51;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v47 + 68) = OffsetAttribute2;
        *(_BYTE *)(v47 + 72) = 0;
LABEL_51:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_52;
      }
    }
    LODWORD(v125) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v47 + 60) = v125;
    *(_BYTE *)(v47 + 64) = 0;
    goto LABEL_40;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v46)
  {
    LODWORD(v132) = v45;
    v127 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v132);
    v127(&v139, 0);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  uint64_t KeyPath;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int *v68;
  char v69;
  uint64_t v70;
  unsigned int *v71;
  __int128 v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  unsigned __int8 v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t OffsetAttribute2;
  uint64_t v96;
  unsigned __int8 v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  unsigned int v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t result;
  void (*v119)(__int128 *, _QWORD);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  __int128 v125;
  __int128 v126;
  unsigned int v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t (*v133)(uint64_t, uint64_t);
  uint64_t v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  Swift::UInt value;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  unsigned __int8 v157;
  unsigned int v158;
  unsigned __int8 v159;
  unsigned int v160;
  unsigned __int8 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _BYTE v166[20];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[20];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _QWORD v175[4];

  v146 = a4;
  *(_QWORD *)&v147 = a3;
  v175[1] = *MEMORY[0x24BDAC8D0];
  v132 = *a1;
  v10 = a2[3];
  v169 = a2[2];
  v170 = v10;
  *(_OWORD *)v171 = a2[4];
  *(_DWORD *)&v171[16] = *((_DWORD *)a2 + 20);
  v11 = a2[1];
  v167 = *a2;
  v168 = v11;
  v172 = v167;
  v173 = v11;
  v174 = v169;
  v148 = (uint64_t *)v167;
  v175[0] = v167;
  value = v167;
  LODWORD(v145) = DWORD2(v167);
  v13 = *((_QWORD *)&v11 + 1);
  v12 = v11;
  LODWORD(v144) = DWORD1(v169);
  LODWORD(v142) = v169;
  v150 = *((_QWORD *)&v169 + 1);
  v14 = v10;
  LODWORD(v149) = HIDWORD(v10);
  LODWORD(v143) = DWORD2(v10);
  LODWORD(v140) = *(_DWORD *)v171;
  LODWORD(v15) = *(_DWORD *)&v171[4];
  LODWORD(v139) = *(_DWORD *)&v171[8];
  v16 = *(_QWORD *)&v171[12];
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 56);
  outlined retain of _ViewInputs((uint64_t)&v167);
  v141 = a5;
  v133 = v17;
  if ((v17(a5, a6) & 1) != 0
    && (v164 = v169,
        v165 = v170,
        *(_OWORD *)v166 = *(_OWORD *)v171,
        *(_DWORD *)&v166[16] = *(_DWORD *)&v171[16],
        v162 = v167,
        v163 = v168,
        _ViewInputs.isScrapeable.getter()))
  {
    v138 = AGMakeUniqueID();
    v18 = swift_retain();
    v19 = specialized find<A>(_:key:)(v18);
    if (!v19 || *(_DWORD *)(v19 + 72) != (_DWORD)v138)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>, (uint64_t)&type metadata for _ViewInputs.ScrapeableParentID, (uint64_t)&protocol witness table for _ViewInputs.ScrapeableParentID, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v138;
      value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _ViewInputs.ScrapeableParentID, 0, (uint64_t)v148).value;
    }
    outlined release of ViewTransform((uint64_t)v175);
  }
  else
  {
    v138 = 0;
  }
  v135 = DWORD1(v174);
  v151 = v14;
  v134 = a6;
  if ((BYTE4(v174) & 0x20) != 0)
  {
    v136 = v12;
    v137 = a7;
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(v141, a6);
    v22 = v173;
    if ((v21 & 1) != 0)
    {
      swift_beginAccess();
      v149 = v167;
      v23 = DWORD2(v167);
      v131 = v168;
      v24 = DWORD2(v168);
      *(_QWORD *)&v140 = *((_QWORD *)&v169 + 1);
      v25 = v169;
      v26 = *((_QWORD *)&v170 + 1);
      *(_QWORD *)&v139 = v170;
      *(_QWORD *)&v27 = *(_QWORD *)v171;
      v130 = v27;
      *(_QWORD *)&v27 = *(_QWORD *)&v171[8];
      v129 = v27;
      v28 = *(_DWORD *)&v171[16];
      v164 = v169;
      v165 = v170;
      *(_OWORD *)v166 = *(_OWORD *)v171;
      *(_DWORD *)&v166[16] = *(_DWORD *)&v171[16];
      v162 = v167;
      v163 = v168;
      outlined retain of _ViewInputs((uint64_t)&v167);
      v29 = _ViewInputs.geometryTransaction()();
      KeyPath = swift_getKeyPath();
      v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_release();
      if ((*(_BYTE *)(v22 + 81) & 1) == 0
        && (_DWORD)v130 == *(_DWORD *)(v22 + 32)
        && __PAIR64__(v31, v129) == *(_QWORD *)(v22 + 36)
        && v23 == *(_DWORD *)(v22 + 44)
        && v29 == *(_DWORD *)(v22 + 48)
        && v24 == *(_DWORD *)(v22 + 52))
      {
        v12 = v136;
        a7 = v137;
        if ((*(_BYTE *)(v22 + 64) & 1) == 0)
        {
          LODWORD(v32) = *(_DWORD *)(v22 + 60);
LABEL_32:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_endAccess();
          *(_QWORD *)&v162 = __PAIR64__(HIDWORD(v170), v32);
          protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
          lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
          LODWORD(v149) = Attribute.init<A>(body:value:flags:update:)();
          v50 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
          swift_release();
          v51 = *(_DWORD *)v171;
          v52 = *(_DWORD *)&v171[8];
          v53 = swift_getKeyPath();
          swift_beginAccess();
          outlined retain of _GraphInputs((uint64_t)&v172);
          v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v53);
          swift_endAccess();
          outlined release of _GraphInputs((uint64_t)&v172);
          swift_release();
          *(_QWORD *)&v162 = __PAIR64__(v52, v51);
          DWORD2(v162) = v54;
          protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
          lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
          v55 = Attribute.init<A>(body:value:flags:update:)();
          v56 = v50;
          v57 = v149;
          v58 = v142 | 0x1C;
          LODWORD(v15) = v50;
          v20 = v150;
          v14 = v151;
          v59 = (int)v145;
          v60 = v144;
          v61 = v143;
          goto LABEL_36;
        }
      }
      else
      {
        *(_QWORD *)&v162 = v149;
        DWORD2(v162) = v23;
        *(_QWORD *)&v163 = v131;
        *((_QWORD *)&v163 + 1) = __PAIR64__(v29, v24);
        *(_QWORD *)&v164 = v25;
        *((_QWORD *)&v164 + 1) = v140;
        *(_QWORD *)&v165 = v139;
        *((_QWORD *)&v165 + 1) = v26;
        *(_QWORD *)v166 = v130;
        *(_QWORD *)&v166[8] = v129;
        *(_DWORD *)&v166[16] = v28;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v162, v31, (uint64_t)&v155);
        v40 = v156;
        v41 = v157;
        v42 = v161;
        v43 = v157 | ((unint64_t)v158 << 32);
        v44 = v159 | ((unint64_t)v160 << 32);
        *(_OWORD *)(v22 + 32) = v155;
        *(_OWORD *)(v22 + 48) = v40;
        *(_QWORD *)(v22 + 64) = v43;
        *(_QWORD *)(v22 + 72) = v44;
        *(_WORD *)(v22 + 80) = v42;
        v12 = v136;
        a7 = v137;
        if (v41 != 1)
        {
          v32 = HIDWORD(*((_QWORD *)&v40 + 1));
          goto LABEL_32;
        }
      }
      LODWORD(v32) = AGGraphCreateOffsetAttribute2();
      *(_DWORD *)(v22 + 60) = v32;
      *(_BYTE *)(v22 + 64) = 0;
      goto LABEL_32;
    }
    swift_beginAccess();
    v131 = v167;
    v33 = DWORD2(v167);
    *(_QWORD *)&v130 = v168;
    v34 = DWORD2(v168);
    v35 = v169;
    v128 = v170;
    *(_QWORD *)&v129 = *((_QWORD *)&v169 + 1);
    v36 = *((_QWORD *)&v170 + 1);
    *(_QWORD *)&v37 = *(_QWORD *)v171;
    v126 = v37;
    *(_QWORD *)&v37 = *(_QWORD *)&v171[8];
    v125 = v37;
    v164 = v169;
    v165 = v170;
    *(_OWORD *)v166 = *(_OWORD *)v171;
    v124 = *(_DWORD *)&v171[16];
    *(_DWORD *)&v166[16] = *(_DWORD *)&v171[16];
    v162 = v167;
    v163 = v168;
    outlined retain of _ViewInputs((uint64_t)&v167);
    v38 = _ViewInputs.geometryTransaction()();
    v39 = swift_getKeyPath();
    v127 = specialized CachedEnvironment.attribute<A>(keyPath:)(v39);
    swift_release();
    if ((*(_BYTE *)(v22 + 81) & 1) == 0
      && (_DWORD)v126 == *(_DWORD *)(v22 + 32)
      && __PAIR64__(v127, v125) == *(_QWORD *)(v22 + 36)
      && v33 == *(_DWORD *)(v22 + 44)
      && v38 == *(_DWORD *)(v22 + 48)
      && v34 == *(_DWORD *)(v22 + 52))
    {
      v12 = v136;
      a7 = v137;
      v14 = v151;
      if ((*(_BYTE *)(v22 + 64) & 1) == 0)
      {
        LODWORD(v15) = *(_DWORD *)(v22 + 60);
LABEL_34:
        v20 = v150;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        goto LABEL_35;
      }
    }
    else
    {
      *(_QWORD *)&v162 = v131;
      DWORD2(v162) = v33;
      *(_QWORD *)&v163 = v130;
      *((_QWORD *)&v163 + 1) = __PAIR64__(v38, v34);
      *(_QWORD *)&v164 = v35;
      *((_QWORD *)&v164 + 1) = v129;
      *(_QWORD *)&v165 = v128;
      *((_QWORD *)&v165 + 1) = v36;
      *(_QWORD *)v166 = v126;
      *(_QWORD *)&v166[8] = v125;
      *(_DWORD *)&v166[16] = v124;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v162, v127, (uint64_t)&v155);
      v45 = v156;
      v46 = v157;
      v47 = v161;
      v48 = v157 | ((unint64_t)v158 << 32);
      v49 = v159 | ((unint64_t)v160 << 32);
      *(_OWORD *)(v22 + 32) = v155;
      *(_OWORD *)(v22 + 48) = v45;
      *(_QWORD *)(v22 + 64) = v48;
      *(_QWORD *)(v22 + 72) = v49;
      *(_WORD *)(v22 + 80) = v47;
      v12 = v136;
      a7 = v137;
      v14 = v151;
      if (v46 != 1)
      {
        v15 = HIDWORD(*((_QWORD *)&v45 + 1));
        goto LABEL_34;
      }
    }
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v22 + 60) = v15;
    *(_BYTE *)(v22 + 64) = 0;
    goto LABEL_34;
  }
  v20 = v150;
LABEL_35:
  v59 = (int)v145;
  v60 = v144;
  v61 = v143;
  v58 = v142;
  v57 = v149;
  v56 = v140;
  v55 = v139;
LABEL_36:
  *(_QWORD *)&v162 = value;
  DWORD2(v162) = v59;
  *(_QWORD *)&v163 = v12;
  *((_QWORD *)&v163 + 1) = v13;
  *(_QWORD *)&v164 = __PAIR64__(v60, v58);
  *((_QWORD *)&v164 + 1) = v20;
  *(_QWORD *)&v165 = v14;
  *((_QWORD *)&v165 + 1) = __PAIR64__(v57, v61);
  *(_DWORD *)v166 = v56;
  *(_DWORD *)&v166[4] = v15;
  *(_DWORD *)&v166[8] = v55;
  *(_QWORD *)&v166[12] = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v62 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))v147)(&v153, v62, &v162);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v63 = v170;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v65 = *(_QWORD *)(v63 + 16);
  if (!v65)
  {
LABEL_78:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *a7 = v153;
    a7[1] = v154;
    return result;
  }
  v66 = v64;
  v67 = (_QWORD *)(v63 + 32);
  while (*v67 != v64)
  {
    v67 += 2;
    if (!--v65)
      goto LABEL_78;
  }
  LODWORD(v149) = ++lastIdentity;
  v68 = (int *)MEMORY[0x24BE096C0];
  v69 = v135;
  if ((v135 & 0x100) == 0)
  {
LABEL_42:
    v70 = v173;
    v71 = (unsigned int *)(v173 + 16);
    swift_beginAccess();
    v136 = v12;
    v137 = a7;
    if ((v69 & 0x20) == 0)
    {
      *(_QWORD *)&v147 = *(unsigned int *)v171;
      v146 = *(unsigned int *)&v171[8];
LABEL_65:
      swift_endAccess();
      v101 = *v71;
      *(_QWORD *)&v162 = v153;
      DWORD2(v162) = v154;
      v102 = PreferencesOutputs.subscript.getter(v66);
      if ((v102 & 0x100000000) != 0)
        v103 = *v68;
      else
        v103 = v102;
      outlined retain of _ViewInputs((uint64_t)&v167);
      outlined retain of ViewTransform((uint64_t)v175);
      outlined retain of _GraphInputs((uint64_t)&v172);
      v104 = specialized find<A>(_:key:)((uint64_t)v148);
      if (v104)
        LODWORD(v145) = *(unsigned __int8 *)(v104 + 72);
      else
        LODWORD(v145) = 0;
      outlined release of ViewTransform((uint64_t)v175);
      outlined release of _GraphInputs((uint64_t)&v172);
      outlined release of _ViewInputs((uint64_t)&v167);
      outlined retain of _ViewInputs((uint64_t)&v167);
      outlined retain of ViewTransform((uint64_t)v175);
      outlined retain of _GraphInputs((uint64_t)&v172);
      v105 = specialized find<A>(_:key:)((uint64_t)v148);
      if (v105)
        v106 = *(_DWORD *)(v105 + 72);
      else
        v106 = 0;
      v107 = HIDWORD(v170);
      v108 = *(_DWORD *)&v171[4];
      v109 = *(_DWORD *)&v171[12];
      outlined release of ViewTransform((uint64_t)v175);
      outlined release of _GraphInputs((uint64_t)&v172);
      v110 = outlined release of _ViewInputs((uint64_t)&v167);
      v148 = &v123;
      *(_QWORD *)&v162 = __PAIR64__(v132, v149);
      *((_QWORD *)&v162 + 1) = __PAIR64__(v146, v147);
      *(_QWORD *)&v163 = __PAIR64__(v108, v107);
      *((_QWORD *)&v163 + 1) = __PAIR64__(v109, v101);
      LODWORD(v164) = v103;
      BYTE4(v164) = (_BYTE)v145;
      *((_QWORD *)&v164 + 1) = __PAIR64__(v106, v138);
      MEMORY[0x24BDAC7A8](v110);
      v111 = v141;
      v112 = v134;
      v121 = type metadata accessor for RendererEffectDisplayList(0, v141, v134, v113);
      v122 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RendererEffectDisplayList<A>, v121);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v162, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v120, v121, MEMORY[0x24BEE4078], v114, MEMORY[0x24BEE40A8], v115);
      v116 = v155;
      if ((v133(v111, v112) & 1) != 0)
      {
        v164 = v169;
        v165 = v170;
        *(_OWORD *)v166 = *(_OWORD *)v171;
        *(_DWORD *)&v166[16] = *(_DWORD *)&v171[16];
        v162 = v167;
        v163 = v168;
        if (_ViewInputs.isScrapeable.getter())
        {
          AGGraphGetFlags();
          AGGraphSetFlags();
        }
      }
      LOBYTE(v162) = 0;
      PreferencesOutputs.subscript.setter(v116, v66, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v117);
      a7 = v137;
      goto LABEL_78;
    }
    v146 = v167;
    v73 = DWORD2(v167);
    v74 = DWORD2(v168);
    v143 = *((_QWORD *)&v169 + 1);
    v75 = v169;
    v144 = v168;
    v76 = *((_QWORD *)&v170 + 1);
    v142 = v170;
    *(_QWORD *)&v72 = *(_QWORD *)v171;
    v147 = v72;
    *(_QWORD *)&v72 = *(_QWORD *)&v171[8];
    v140 = v72;
    v77 = *(_DWORD *)&v171[16];
    v164 = v169;
    v165 = v170;
    *(_OWORD *)v166 = *(_OWORD *)v171;
    *(_DWORD *)&v166[16] = *(_DWORD *)&v171[16];
    v162 = v167;
    v163 = v168;
    outlined retain of _ViewInputs((uint64_t)&v167);
    v78 = _ViewInputs.geometryTransaction()();
    v79 = swift_getKeyPath();
    v145 = (unsigned int *)(v70 + 16);
    v80 = specialized CachedEnvironment.attribute<A>(keyPath:)(v79);
    swift_release();
    if ((*(_BYTE *)(v70 + 81) & 1) == 0
      && (_DWORD)v147 == *(_DWORD *)(v70 + 32)
      && __PAIR64__(v80, v140) == *(_QWORD *)(v70 + 36)
      && v73 == *(_DWORD *)(v70 + 44)
      && v78 == *(_DWORD *)(v70 + 48)
      && v74 == *(_DWORD *)(v70 + 52))
    {
      if ((*(_BYTE *)(v70 + 64) & 1) == 0)
      {
        *(_QWORD *)&v147 = *(unsigned int *)(v70 + 60);
        goto LABEL_54;
      }
    }
    else
    {
      *(_QWORD *)&v162 = v146;
      DWORD2(v162) = v73;
      *(_QWORD *)&v163 = v144;
      *((_QWORD *)&v163 + 1) = __PAIR64__(v78, v74);
      *(_QWORD *)&v164 = v75;
      *((_QWORD *)&v164 + 1) = v143;
      *(_QWORD *)&v165 = v142;
      *((_QWORD *)&v165 + 1) = v76;
      *(_QWORD *)v166 = v147;
      *(_QWORD *)&v166[8] = v140;
      *(_DWORD *)&v166[16] = v77;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v162, v80, (uint64_t)&v155);
      v81 = v156;
      v82 = v157;
      v83 = v161;
      v84 = v157 | ((unint64_t)v158 << 32);
      v85 = v159 | ((unint64_t)v160 << 32);
      *(_OWORD *)(v70 + 32) = v155;
      *(_OWORD *)(v70 + 48) = v81;
      *(_QWORD *)(v70 + 64) = v84;
      *(_QWORD *)(v70 + 72) = v85;
      *(_WORD *)(v70 + 80) = v83;
      if (v82 != 1)
      {
        *(_QWORD *)&v147 = HIDWORD(*((_QWORD *)&v81 + 1));
LABEL_54:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v146 = v167;
        v86 = DWORD2(v167);
        v87 = DWORD2(v168);
        v143 = *((_QWORD *)&v169 + 1);
        v88 = v169;
        v144 = v168;
        v89 = *((_QWORD *)&v170 + 1);
        v142 = v170;
        *(_QWORD *)&v90 = *(_QWORD *)v171;
        v140 = v90;
        *(_QWORD *)&v90 = *(_QWORD *)&v171[8];
        v139 = v90;
        v91 = *(_DWORD *)&v171[16];
        v164 = v169;
        v165 = v170;
        *(_OWORD *)v166 = *(_OWORD *)v171;
        *(_DWORD *)&v166[16] = *(_DWORD *)&v171[16];
        v162 = v167;
        v163 = v168;
        outlined retain of _ViewInputs((uint64_t)&v167);
        v92 = _ViewInputs.geometryTransaction()();
        v93 = swift_getKeyPath();
        v94 = specialized CachedEnvironment.attribute<A>(keyPath:)(v93);
        swift_release();
        if ((*(_BYTE *)(v70 + 81) & 1) == 0
          && (_DWORD)v140 == *(_DWORD *)(v70 + 32)
          && __PAIR64__(v94, v139) == *(_QWORD *)(v70 + 36)
          && v86 == *(_DWORD *)(v70 + 44)
          && v92 == *(_DWORD *)(v70 + 48)
          && v87 == *(_DWORD *)(v70 + 52))
        {
          v68 = (int *)MEMORY[0x24BE096C0];
          if ((*(_BYTE *)(v70 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(unsigned int *)(v70 + 68);
            goto LABEL_64;
          }
        }
        else
        {
          *(_QWORD *)&v162 = v146;
          DWORD2(v162) = v86;
          *(_QWORD *)&v163 = v144;
          *((_QWORD *)&v163 + 1) = __PAIR64__(v92, v87);
          *(_QWORD *)&v164 = v88;
          *((_QWORD *)&v164 + 1) = v143;
          *(_QWORD *)&v165 = v142;
          *((_QWORD *)&v165 + 1) = v89;
          *(_QWORD *)v166 = v140;
          *(_QWORD *)&v166[8] = v139;
          *(_DWORD *)&v166[16] = v91;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v162, v94, (uint64_t)&v155);
          OffsetAttribute2 = v158;
          v96 = v159;
          v97 = v161;
          v98 = v157 | ((unint64_t)v158 << 32);
          v99 = v159 | ((unint64_t)v160 << 32);
          v100 = v156;
          *(_OWORD *)(v70 + 32) = v155;
          *(_OWORD *)(v70 + 48) = v100;
          *(_QWORD *)(v70 + 64) = v98;
          *(_QWORD *)(v70 + 72) = v99;
          *(_WORD *)(v70 + 80) = v97;
          v68 = (int *)MEMORY[0x24BE096C0];
          if (v96 != 1)
            goto LABEL_64;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v70 + 68) = OffsetAttribute2;
        *(_BYTE *)(v70 + 72) = 0;
LABEL_64:
        v146 = OffsetAttribute2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v71 = v145;
        goto LABEL_65;
      }
    }
    *(_QWORD *)&v147 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v70 + 60) = v147;
    *(_BYTE *)(v70 + 64) = 0;
    goto LABEL_54;
  }
  outlined retain of _ViewInputs((uint64_t)&v167);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v167);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *v68)
  {
    LODWORD(v155) = v149;
    v119 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v155);
    v119(&v162, 0);
    v69 = v135;
    goto LABEL_42;
  }
  __break(1u);
  return result;
}

uint64_t static RendererEffectDisplayList.scrapeContent(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Value;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetAttributeInfo();
  v11 = v10;
  v13 = *(_QWORD *)(type metadata accessor for RendererEffectDisplayList(0, a2, a3, v12) + 16);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, Value, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v19, a2, a3);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v16 = v19;
  if ((~v19 & 0xF000000000000007) != 0)
  {
    v18 = v19;
    closure #1 in static RendererEffectDisplayList.scrapeContent(from:)(&v18, v11, a2, a3, a4);
    return outlined consume of ScrapeableContent.Content?(v16);
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_QWORD *)(a4 + 32) = 1;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
  }
  return result;
}

uint64_t closure #1 in static RendererEffectDisplayList.scrapeContent(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  int v8;
  int v9;
  uint64_t v10;

  v10 = *a1;
  v6 = *(_DWORD *)(a2 + 40);
  v8 = *(_DWORD *)(a2 + 44);
  v9 = v6;
  type metadata accessor for RendererEffectDisplayList(0, a3, a4, a4);
  ScrapeableContent.Item.init(_:ids:_:position:size:transform:)(&v10, &v9, &v8, a5);
  return swift_retain();
}

uint64_t RendererEffectDisplayList.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  char v5;

  if (*(_DWORD *)(v1 + 32) == *MEMORY[0x24BE096C0])
  {
    result = 0;
    *(_BYTE *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_BYTE *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(_BYTE *)(a1 + 10) = v5;
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t protocol witness for static ScrapeableAttribute.scrapeContent(from:) in conformance RendererEffectDisplayList<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static RendererEffectDisplayList.scrapeContent(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance RendererEffectDisplayList<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for RendererEffectDisplayList<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *Value;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  unsigned int v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  _OWORD v50[2];
  __int128 v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int16 v60;
  unsigned __int8 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v5 = v2[1];
  v50[0] = *v2;
  v50[1] = v5;
  v7 = *v2;
  v6 = v2[1];
  v51 = v2[2];
  v55 = v7;
  v56 = v6;
  v57 = v2[2];
  RendererEffectDisplayList.content.getter((uint64_t)&v52);
  v8 = v52;
  v9 = (unsigned __int16)v53 | (BYTE2(v53) << 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v52)
    v11 = v52;
  else
    v11 = MEMORY[0x24BEE4AF8];
  if (v52)
    v12 = v53;
  else
    v12 = 0;
  v48 = v12;
  if (*(_QWORD *)(v11 + 16) || ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 48))() & 1) != 0)
  {
    v13 = ++static DisplayList.Version.lastValue;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
    {
      __break(1u);
      JUMPOUT(0x234CBCFB0);
    }
    v46 = a2;
    v47 = v13;
    v45 = v8;
    v44 = v9 & 0xFFFF0000;
    v43 = AGCreateWeakAttribute();
    v42 = AGCreateWeakAttribute();
    v14 = AGCreateWeakAttribute();
    v15 = AGCreateWeakAttribute();
    v16 = AGCreateWeakAttribute();
    v17 = AGCreateWeakAttribute();
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v18, v19) & 1) != 0 && (v48 & 0x200) != 0)
    {
      v20 = 0;
      v21 = 0;
      v52 = 0;
      v53 = 0;
      v22 = 19;
      v23 = v11;
    }
    else
    {
      _threadGeometryProxyData();
      *(_QWORD *)&v55 = v43;
      *((_QWORD *)&v55 + 1) = v42;
      *(_QWORD *)&v56 = v14;
      *((_QWORD *)&v56 + 1) = v15;
      *(_QWORD *)&v57 = v16;
      *((_QWORD *)&v57 + 1) = v17;
      LODWORD(v58) = v47;
      _setThreadGeometryProxyData();
      closure #1 in RendererEffectDisplayList.value.getter((uint64_t)v50, v18, v19);
      _setThreadGeometryProxyData();
      v21 = v52;
      v20 = v53;
      v22 = v54;
      v23 = v11;
    }
    Value = (double *)AGGraphGetValue();
    v25 = *Value;
    v26 = Value[1];
    v27 = (double *)AGGraphGetValue();
    v28 = v25 - *v27;
    v29 = v26 - v27[1];
    if (v45)
      v30 = v44;
    else
      v30 = 0;
    v31 = (__int128 *)AGGraphGetValue();
    *(double *)&v55 = v28;
    *((double *)&v55 + 1) = v29;
    v56 = *v31;
    *(_QWORD *)&v57 = v47;
    *((_QWORD *)&v57 + 1) = v21;
    v58 = v20 | (unint64_t)(v22 << 32) | 0x4000000000000000;
    v59 = v23;
    v61 = BYTE2(v30);
    v60 = v30 | v48;
    v62 = v50[0];
    LOBYTE(v52) = BYTE4(v51);
    outlined copy of DisplayList.Effect(v21, v20, v22);
    DisplayList.Item.canonicalize(options:)((char *)&v52);
    v32 = v55;
    v33 = v56;
    v34 = *((_QWORD *)&v57 + 1);
    v49 = v57;
    v35 = v58;
    v36 = v59;
    v37 = v60 | (v61 << 16);
    v38 = v62;
    v39 = v58 >> 62;
    if (v58 >> 62 != 3 || (v37 & 0xFFFFFF) != 0 || v58 != 0xC000000000000000 || v59 | *((_QWORD *)&v57 + 1))
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_23527E860;
      *(_OWORD *)(v40 + 32) = v32;
      *(_OWORD *)(v40 + 48) = v33;
      *(_QWORD *)(v40 + 64) = v49;
      *(_QWORD *)(v40 + 72) = v34;
      *(_QWORD *)(v40 + 80) = v35;
      *(_QWORD *)(v40 + 88) = v36;
      *(_BYTE *)(v40 + 98) = BYTE2(v37);
      *(_WORD *)(v40 + 96) = v37;
      *(_DWORD *)(v40 + 100) = v38;
      __asm { BR              X10 }
    }
    outlined consume of DisplayList.Effect(v21, v20, v22);
    *(_QWORD *)v46 = MEMORY[0x24BEE4AF8];
    *(_WORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 10) = 0;
    return outlined consume of DisplayList.Item.Value(v34, 0xC000000000000000);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v10;
    *(_WORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 10) = 0;
  }
  return result;
}

uint64_t closure #1 in RendererEffectDisplayList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  double *v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(type metadata accessor for RendererEffectDisplayList(0, v8, v9, v10) + 16);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, Value, v11);
  v13 = (double *)AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, double, double))(a3 + 24))(a2, a3, *v13, v13[1]);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t ResetPositionTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(float64x2_t *)(a1 + 24) = vsubq_f64(*(float64x2_t *)(Value + 24), vsubq_f64(*(float64x2_t *)AGGraphGetValue(), *(float64x2_t *)(Value + 8)));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return swift_retain();
}

id GraphicsFilter.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v3 = *(void **)v1;
  v20 = *(_QWORD *)(v1 + 8);
  v18 = *(_QWORD *)(v1 + 24);
  v19 = *(void **)(v1 + 16);
  v16 = *(_QWORD *)(v1 + 40);
  v17 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 64);
  v14 = *(_QWORD *)(v1 + 56);
  v15 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_DWORD *)(v1 + 112);
  v11 = *(_BYTE *)(v1 + 116);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v3;
  *(_QWORD *)(v12 + 24) = v20;
  *(_QWORD *)(v12 + 32) = v19;
  *(_QWORD *)(v12 + 40) = v18;
  *(_QWORD *)(v12 + 48) = v17;
  *(_QWORD *)(v12 + 56) = v16;
  *(_QWORD *)(v12 + 64) = v15;
  *(_QWORD *)(v12 + 72) = v14;
  *(_QWORD *)(v12 + 80) = v4;
  *(_QWORD *)(v12 + 88) = v5;
  *(_QWORD *)(v12 + 96) = v6;
  *(_QWORD *)(v12 + 104) = v7;
  *(_QWORD *)(v12 + 112) = v8;
  *(_QWORD *)(v12 + 120) = v9;
  *(_DWORD *)(v12 + 128) = v10;
  *(_BYTE *)(v12 + 132) = v11;
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return outlined copy of GraphicsFilter(v3, v20, v19, v18, v17, v16, v15, v14, v4, v5, v6, v7, v8, v9, v10, SBYTE2(v10));
}

id protocol witness for _RendererEffect.effectValue(size:) in conformance GraphicsFilter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v3 = *(void **)v1;
  v20 = *(_QWORD *)(v1 + 8);
  v18 = *(_QWORD *)(v1 + 24);
  v19 = *(void **)(v1 + 16);
  v16 = *(_QWORD *)(v1 + 40);
  v17 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 64);
  v14 = *(_QWORD *)(v1 + 56);
  v15 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_DWORD *)(v1 + 112);
  v11 = *(_BYTE *)(v1 + 116);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v3;
  *(_QWORD *)(v12 + 24) = v20;
  *(_QWORD *)(v12 + 32) = v19;
  *(_QWORD *)(v12 + 40) = v18;
  *(_QWORD *)(v12 + 48) = v17;
  *(_QWORD *)(v12 + 56) = v16;
  *(_QWORD *)(v12 + 64) = v15;
  *(_QWORD *)(v12 + 72) = v14;
  *(_QWORD *)(v12 + 80) = v4;
  *(_QWORD *)(v12 + 88) = v5;
  *(_QWORD *)(v12 + 96) = v6;
  *(_QWORD *)(v12 + 104) = v7;
  *(_QWORD *)(v12 + 112) = v8;
  *(_QWORD *)(v12 + 120) = v9;
  *(_DWORD *)(v12 + 128) = v10;
  *(_BYTE *)(v12 + 132) = v11;
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return outlined copy of GraphicsFilter(v3, v20, v19, v18, v17, v16, v15, v14, v4, v5, v6, v7, v8, v9, v10, SBYTE2(v10));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GraphicsFilter(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t GraphicsBlendMode.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = 5;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GraphicsBlendMode(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GeometryGroupEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _CompositingGroupEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VariableBlurStyle(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance Shader.ResolvedShader(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _LuminanceToAlphaEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LuminanceCurveEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AppearanceAnimationView<A, B>.AnimationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;

  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceAnimationView<A, B>.AnimationEffect, a5);
  return static RendererEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance AppearanceAnimationView<A, B>.AnimationEffect(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for AppearanceAnimationView<A, B>.AnimationEffect);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SaturationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMultiplyEffect._Resolved(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ClipEffect<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;

  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ClipEffect<A>, a5);
  return static RendererEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _ClipEffect<A>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x23B7C9C04](a6, a4);
  return static RendererEffect._viewListCount(inputs:body:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HueRotationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t type metadata accessor for RendererEffectDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RendererEffectDisplayList);
}

uint64_t sub_234CBD59C()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for ResetPositionTransform(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for GraphicsFilter(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GraphicsFilter and conformance GraphicsFilter();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsFilter and conformance GraphicsFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsFilter and conformance GraphicsFilter;
  if (!lazy protocol witness table cache variable for type GraphicsFilter and conformance GraphicsFilter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsFilter, &type metadata for GraphicsFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsFilter and conformance GraphicsFilter);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for GraphicsBlendMode(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GraphicsBlendMode and conformance GraphicsBlendMode();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsBlendMode and conformance GraphicsBlendMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsBlendMode and conformance GraphicsBlendMode;
  if (!lazy protocol witness table cache variable for type GraphicsBlendMode and conformance GraphicsBlendMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsBlendMode, &type metadata for GraphicsBlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsBlendMode and conformance GraphicsBlendMode);
  }
  return result;
}

uint64_t dispatch thunk of _RendererEffect.effectValue(size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _RendererEffect.isolatesChildPosition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static _RendererEffect.disabledForFlattenedContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static _RendererEffect.preservesEmptyContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static _RendererEffect.isScrapeable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _RendererEffect.scrapeableContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for ResetPositionTransform()
{
  return &type metadata for ResetPositionTransform;
}

__n128 __swift_memcpy48_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RendererEffectDisplayList<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RendererEffectDisplayList<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in RendererEffectDisplayList<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t outlined consume of ScrapeableContent.Content?(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RendererEffectDisplayList<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static _GeometryGroupEffect.isolatesChildPosition.getter()
{
  return 1;
}

void _GeometryGroupEffect.effectValue(size:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 19;
}

uint64_t static _GeometryGroupEffect.== infix(_:_:)()
{
  return 1;
}

unint64_t instantiation function for generic protocol witness table for _GeometryGroupEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _GeometryGroupEffect and conformance _GeometryGroupEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _GeometryGroupEffect and conformance _GeometryGroupEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GeometryGroupEffect and conformance _GeometryGroupEffect;
  if (!lazy protocol witness table cache variable for type _GeometryGroupEffect and conformance _GeometryGroupEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GeometryGroupEffect, &type metadata for _GeometryGroupEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GeometryGroupEffect and conformance _GeometryGroupEffect);
  }
  return result;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _GeometryGroupEffect(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 19;
}

ValueMetadata *type metadata accessor for _GeometryGroupEffect()
{
  return &type metadata for _GeometryGroupEffect;
}

void Text.Effect.AttributeTracker.AnyValue.copy.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AttributeTracker.AnyValue.isSettled.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t Text.Effect.AttributeTracker.ValueBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 120);
  v5 = type metadata accessor for Text.Effect.AttributeTracker.Value(0, *(_QWORD *)(*(_QWORD *)v2 + 104), *(_QWORD *)(*(_QWORD *)v2 + 112), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, a1, v5);
  return v2;
}

uint64_t Text.Effect.AttributeTracker.ValueBox.copy.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *v4;
  v6 = type metadata accessor for Text.Effect.AttributeTracker.Value(0, *(_QWORD *)(*v4 + 104), *(_QWORD *)(*v4 + 112), a4);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v12 - v8, (uint64_t)v4 + *(_QWORD *)(v5 + 120), v7);
  return Text.Effect.AttributeTracker.ValueBox.__allocating_init(_:)((uint64_t)v9);
}

BOOL Text.Effect.AttributeTracker.ValueBox.isSettled.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 120);
  v6 = type metadata accessor for Text.Effect.AttributeTracker.Value(0, *(_QWORD *)(*(_QWORD *)v4 + 104), *(_QWORD *)(*(_QWORD *)v4 + 112), a4);
  v7 = v5 + *(int *)(v6 + 48);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
    return 1;
  v8 = v5 + *(int *)(v6 + 52);
  return (*(_BYTE *)(v8 + 8) & 1) != 0 || *(double *)v8 <= *(double *)v7;
}

uint64_t Text.Effect.AttributeTracker.ValueBox.__ivar_destroyer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 120);
  v6 = type metadata accessor for Text.Effect.AttributeTracker.Value(0, *(_QWORD *)(*(_QWORD *)v4 + 104), *(_QWORD *)(*(_QWORD *)v4 + 112), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t Text.Effect.AttributeTracker.ValueBox.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 120);
  v6 = type metadata accessor for Text.Effect.AttributeTracker.Value(0, *(_QWORD *)(*(_QWORD *)v4 + 104), *(_QWORD *)(*(_QWORD *)v4 + 112), a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance();
}

void Text.Effect.AttributeTracker.Key.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int Text.Effect.AttributeTracker.Key.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.AttributeTracker.Key()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  int v5;
  Swift::UInt v6;
  int v7;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(unsigned __int8 *)(v0 + 48);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  if (v5 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if (!v7)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v7)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.AttributeTracker.Key(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  char v6;
  _OWORD v7[3];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  return specialized static Text.Effect.AttributeTracker.Key.== infix(_:_:)((_BOOL8)v5, (uint64_t)v7);
}

uint64_t Text.Effect.AttributeTracker.Tracker.commitUpdates()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  unint64_t v20;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[3];
  char v26;

  v1 = v0;
  v2 = v0[2];
  if (v2 < 1)
  {
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE4B00];
    *v1 = MEMORY[0x24BEE4B00];
    v1[1] = v23;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v1[3] = v23;
    return result;
  }
  v3 = v0[1];
  if ((unint64_t)v2 >= *(_QWORD *)(v3 + 16))
  {
LABEL_29:
    v24 = v1[1];
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *v1 = v24;
    return result;
  }
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_22;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v8)
      goto LABEL_28;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_28;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_28;
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_22:
    v16 = *(_QWORD *)(v3 + 56);
    v17 = *(_QWORD *)(v3 + 48) + 56 * v12;
    v18 = *(_OWORD *)(v17 + 16);
    v25[0] = *(_OWORD *)v17;
    v25[1] = v18;
    v25[2] = *(_OWORD *)(v17 + 32);
    v26 = *(_BYTE *)(v17 + 48);
    result = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v16 + 8 * v12) + 88))(result);
    if ((result & 1) != 0)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v25);
      if ((v19 & 1) != 0)
      {
        v20 = result;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v22 = v1[1];
        v1[1] = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
          specialized _NativeDictionary.copy()();
        specialized _NativeDictionary._delete(at:)(v20, v22);
        v1[1] = v22;
        swift_release();
        result = swift_bridgeObjectRelease();
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_28:
    swift_release();
    goto LABEL_29;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_28;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t Text.Effect.AttributeTracker.needsUpdate(for:state:interval:)(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  double v10;
  double v11;
  uint64_t v12;
  double v14;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  char v35;
  uint64_t (*v36)(uint64_t);
  Swift::UInt v38;

  v6 = v5;
  v10 = *(double *)(a2 + 16);
  v11 = *(double *)(a2 + 24);
  v12 = v5 + 48;
  if (*(_BYTE *)(a2 + 40) == 1)
  {
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v12 + 16))
    {
      *(_QWORD *)v12 = MEMORY[0x24BEE4B08];
      swift_bridgeObjectRelease();
    }
    if ((a5 & 1) != 0)
      goto LABEL_18;
    v14 = v11 - v10;
    if (v11 - v10 < 0.0)
      v14 = 0.0;
    if (v14 >= *(double *)&a3 && v14 <= *(double *)&a4)
      goto LABEL_18;
    swift_beginAccess();
    v20 = *(_QWORD *)(v6 + 40);
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17, v18, v19);
      if ((v23 & 1) != 0)
      {
        LOBYTE(v21) = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v22) != 0;
        return v21 & 1;
      }
LABEL_23:
      LOBYTE(v21) = 0;
    }
  }
  else
  {
    v24 = *(_QWORD *)(a2 + 64);
    v25 = *(_QWORD *)(a2 + 80);
    swift_beginAccess();
    v26 = specialized Set.contains(_:)(a1, *(_QWORD *)(v6 + 48));
    swift_beginAccess();
    specialized Set._Variant.insert(_:)(&v38, a1);
    swift_endAccess();
    swift_beginAccess();
    v31 = *(_QWORD *)(v6 + 40);
    if (*(_QWORD *)(v31 + 16))
    {
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28, v29, v30);
      if ((v33 & 1) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32))
        {
LABEL_18:
          LOBYTE(v21) = 1;
          return v21 & 1;
        }
      }
    }
    if ((a5 & 1) != 0)
    {
      if ((v26 & 1) != 0)
        goto LABEL_23;
    }
    else
    {
      v34 = v11 - v10;
      if (v11 - v10 < 0.0)
        v34 = 0.0;
      if ((v34 < *(double *)&a3) | v26 & 1)
        goto LABEL_23;
    }
    v35 = (v24 | v25) == 0;
    if (v24 && v25)
    {
      v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 88);
      swift_retain();
      swift_retain();
      v35 = v36(v25);
      swift_release();
      swift_release();
    }
    LOBYTE(v21) = v35 ^ 1;
  }
  return v21 & 1;
}

uint64_t Text.Effect.AttributeTracker.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker.AnyValue()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for Text.Effect.AttributeTracker.ValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Text.Effect.AttributeTracker.Value(319, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker.ValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.AttributeTracker.ValueBox);
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.AttributeTracker.Value);
}

uint64_t type metadata completion function for Text.Effect.AttributeTracker.Value()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.AttributeTracker.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v6 + v7;
  if (v7 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7) + 55) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v12 = AssociatedTypeWitness;
    v13 = ~v7;
    v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v14(a1, a2, AssociatedTypeWitness);
    v15 = ((unint64_t)a2 + v8) & v13;
    v14((uint64_t *)(((unint64_t)a1 + v8) & v13), (uint64_t *)v15, v12);
    v16 = (v8 + (((unint64_t)a1 + v8) & v13)) & v13;
    v17 = (v8 + v15) & v13;
    v14((uint64_t *)v16, (uint64_t *)v17, v12);
    v18 = (_OWORD *)((v16 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v19 = (__int128 *)((v17 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v20 = *v19;
    *(_OWORD *)((char *)v18 + 9) = *(__int128 *)((char *)v19 + 9);
    *v18 = v20;
    v21 = (v16 + v6 + 39) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v17 + v6 + 39) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_BYTE *)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_BYTE *)(v21 + 8) = v23;
    v24 = (v16 + v6 + 55) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v17 + v6 + 55) & 0xFFFFFFFFFFFFFFF8;
    LOBYTE(v21) = *(_BYTE *)(v25 + 8);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_BYTE *)(v24 + 8) = v21;
  }
  return a1;
}

uint64_t destroy for Text.Effect.AttributeTracker.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = v4 + v5;
  v7 = (v4 + v5 + a1) & ~v5;
  v9(v7, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v6 + v7) & ~v5, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8;
  v11 = (v7 + v8 + v9) & ~v8;
  v6(v10, v11, AssociatedTypeWitness);
  v12 = (_OWORD *)((v10 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = (__int128 *)((v11 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *(_OWORD *)((char *)v12 + 9) = *(__int128 *)((char *)v13 + 9);
  *v12 = v14;
  v15 = (v10 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v11 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  v18 = (v10 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v15) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v15;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8;
  v11 = (v7 + v8 + v9) & ~v8;
  v6(v10, v11, AssociatedTypeWitness);
  v12 = (_OWORD *)((v10 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = (__int128 *)((v11 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *(_OWORD *)((char *)v12 + 9) = *(__int128 *)((char *)v13 + 9);
  *v12 = v14;
  v15 = (v10 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v11 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  v18 = (v10 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v15) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v15;
  return a1;
}

uint64_t initializeWithTake for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8;
  v11 = (v7 + v8 + v9) & ~v8;
  v6(v10, v11, AssociatedTypeWitness);
  v12 = (_OWORD *)((v10 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = (__int128 *)((v11 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *(_OWORD *)((char *)v12 + 9) = *(__int128 *)((char *)v13 + 9);
  *v12 = v14;
  v15 = (v10 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v11 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  v18 = (v10 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v15) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v15;
  return a1;
}

uint64_t assignWithTake for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8;
  v11 = (v7 + v8 + v9) & ~v8;
  v6(v10, v11, AssociatedTypeWitness);
  v12 = (_OWORD *)((v10 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = (__int128 *)((v11 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *(_OWORD *)((char *)v12 + 9) = *(__int128 *)((char *)v13 + 9);
  *v12 = v14;
  v15 = (v10 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v11 + v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  v18 = (v10 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v15) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.AttributeTracker.Value(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 < a2)
  {
    v7 = ((*(_QWORD *)(v5 + 64)
         + ((*(_QWORD *)(v5 + 64)
           + *(unsigned __int8 *)(v5 + 80)
           + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 55) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    if (v7 < 4)
      v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for Text.Effect.AttributeTracker.Value(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64)
       + ((*(_QWORD *)(v6 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 55) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v7 >= a3)
  {
    v11 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_234CBED2C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_234CBED34()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x234CBED3CLL);
}

void sub_234CBED5C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_234CBED64()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_234CBED6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x234CBED74);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t destroy for Text.Effect.AttributeTracker.Tracker()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Text.Effect.AttributeTracker.Tracker(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.AttributeTracker.Tracker(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.AttributeTracker.Tracker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for Text.Effect.AttributeTracker.Tracker()
{
  return &unk_250647EC0;
}

BOOL specialized static Text.Effect.AttributeTracker.Key.== infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)result != *(_QWORD *)a2)
    return 0;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (__OFSUB__(v3, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v3 != v2)
    return 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (__OFSUB__(v5, v4))
    goto LABEL_21;
  if (v5 != v4)
    return 0;
  if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
      return 0;
    v6 = *(_QWORD *)(result + 24);
    v7 = *(_QWORD *)(a2 + 24);
    if (!__OFSUB__(v7, v6))
    {
      if (v7 != v6)
        return 0;
      goto LABEL_12;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    return 0;
LABEL_12:
  if ((*(_BYTE *)(result + 48) & 1) != 0)
    return (*(_BYTE *)(a2 + 48) & 1) != 0;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    return 0;
  v8 = *(_QWORD *)(result + 40);
  v9 = *(_QWORD *)(a2 + 40);
  if (!__OFSUB__(v9, v8))
    return v9 == v8;
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.AttributeTracker.Tracker.deepCopy()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;

  v33 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(v2 + 63) >> 6;
  v5 = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    if (v4)
    {
      v9 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v10 = v9 | (v6 << 6);
    }
    else
    {
      v11 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_36;
      if (v11 >= v34)
      {
LABEL_33:
        swift_release();
        swift_bridgeObjectRetain();
        return swift_bridgeObjectRetain();
      }
      v12 = *(_QWORD *)(v33 + 8 * v11);
      ++v6;
      if (!v12)
      {
        v6 = v11 + 1;
        if (v11 + 1 >= v34)
          goto LABEL_33;
        v12 = *(_QWORD *)(v33 + 8 * v6);
        if (!v12)
        {
          v6 = v11 + 2;
          if (v11 + 2 >= v34)
            goto LABEL_33;
          v12 = *(_QWORD *)(v33 + 8 * v6);
          if (!v12)
          {
            v13 = v11 + 3;
            if (v13 >= v34)
              goto LABEL_33;
            v12 = *(_QWORD *)(v33 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                v6 = v13 + 1;
                if (__OFADD__(v13, 1))
                  goto LABEL_37;
                if (v6 >= v34)
                  goto LABEL_33;
                v12 = *(_QWORD *)(v33 + 8 * v6);
                ++v13;
                if (v12)
                  goto LABEL_21;
              }
            }
            v6 = v13;
          }
        }
      }
LABEL_21:
      v4 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v6 << 6);
    }
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48) + 56 * v10;
    v16 = *(_OWORD *)(v15 + 16);
    v35 = *(_OWORD *)v15;
    v36 = v16;
    v37 = *(_OWORD *)(v15 + 32);
    v38 = *(_BYTE *)(v15 + 48);
    v17 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v14 + 8 * v10) + 80))(v5);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v35);
    v21 = v7[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (v7[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v24 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v35);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_38;
      v20 = v25;
      if ((v24 & 1) != 0)
      {
LABEL_4:
        v8 = v7[7];
        swift_release();
        *(_QWORD *)(v8 + 8 * v20) = v17;
        goto LABEL_5;
      }
    }
    v7[(v20 >> 6) + 8] |= 1 << v20;
    v27 = v7[6] + 56 * v20;
    v28 = v36;
    *(_OWORD *)v27 = v35;
    *(_OWORD *)(v27 + 16) = v28;
    *(_OWORD *)(v27 + 32) = v37;
    *(_BYTE *)(v27 + 48) = v38;
    *(_QWORD *)(v7[7] + 8 * v20) = v17;
    v29 = v7[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_35;
    v7[2] = v31;
LABEL_5:
    swift_release();
    v5 = swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for Text.Effect.AttributeTracker.Key(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.AttributeTracker.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.AttributeTracker.Key()
{
  return &type metadata for Text.Effect.AttributeTracker.Key;
}

ValueMetadata *type metadata accessor for Text.Effect.WidthMultiplierAttribute()
{
  return &type metadata for Text.Effect.WidthMultiplierAttribute;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingStateAttribute()
{
  return &type metadata for Text.Effect.DrawingStateAttribute;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingState, &type metadata for Text.Effect.DrawingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingState, &type metadata for Text.Effect.DrawingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingState, &type metadata for Text.Effect.DrawingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState);
  }
  return result;
}

uint64_t static AnyTransition.asymmetric(insertion:removal:)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t *, void *, _UNKNOWN **);
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v2 = *(uint64_t (**)(uint64_t *, void *, _UNKNOWN **))(*(_QWORD *)a1 + 80);
  swift_retain();
  result = v2(&v5, &unk_2506160F0, &protocol witness table for AnyTransition.InsertionVisitor);
  v4 = v6;
  if (v6)
  {
    swift_release();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AnyTransition.InsertionVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t result;
  uint64_t v19;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AnyTransition.RemovalVisitor(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, a2, v13);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v7, a2);
  *(_QWORD *)&v15[*(int *)(v11 + 36)] = 0;
  AnyTransition.visitBase<A>(applying:)((uint64_t)v15, *v2, v11, (uint64_t)&protocol witness table for AnyTransition.RemovalVisitor<A>);
  v16 = *(_QWORD *)&v15[*(int *)(v11 + 36)];
  v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v17(v15, v11);
  result = swift_release();
  v2[1] = v16;
  return result;
}

void AnyTransition.RemovalVisitor.visit<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for AsymmetricTransition();
}

void sub_234CBF624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&a9 - v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v10 + 16))(v16, v9, v15, v18);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v12, *(_QWORD *)(v17 - 128), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v20, v16, v15);
  *(_QWORD *)(v17 - 112) = v15;
  *(_QWORD *)(v17 - 104) = v11;
  v21 = *(_QWORD *)(v17 - 144);
  *(_QWORD *)(v17 - 96) = v13;
  *(_QWORD *)(v17 - 88) = v21;
  type metadata accessor for AsymmetricTransition();
}

uint64_t sub_234CBF6A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5 + *(int *)(a1 + 52), v2, v1);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AsymmetricTransition<A, B>, v3);
  v9 = AnyTransition.init<A>(_:)(v5, v3, v7, v8);
  v10 = *(int *)(*(_QWORD *)(v6 - 120) + 36);
  v11 = *(_QWORD *)(v6 - 136);
  result = swift_release();
  *(_QWORD *)(v11 + v10) = v9;
  return result;
}

void AsymmetricTransition.init(insertion:removal:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for AsymmetricTransition();
}

uint64_t sub_234CBF770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void type metadata accessor for AsymmetricTransition()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void protocol witness for TransitionVisitor.visit<A>(_:) in conformance AnyTransition.RemovalVisitor<A>(uint64_t a1)
{
  AnyTransition.RemovalVisitor.visit<A>(_:)(a1);
}

uint64_t AsymmetricTransition.insertion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AsymmetricTransition.insertion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AsymmetricTransition.insertion.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AsymmetricTransition.removal.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t AsymmetricTransition.removal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*AsymmetricTransition.removal.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AsymmetricTransition.body(content:phase:)@<X0>(unsigned __int8 a1@<W1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  _QWORD v25[2];

  v24[1] = a4;
  v6 = a1;
  v7 = type metadata accessor for PlaceholderContentView(255, (uint64_t)a2, (uint64_t)a2, a3);
  v8 = a2[2];
  v9 = a2[4];
  v11 = type metadata accessor for ApplyTransitionModifier(255, v8, v9, v10);
  v13 = type metadata accessor for ModifiedContent(0, v7, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v24 - v16;
  if (v6 == 2)
    v18 = 1;
  else
    v18 = a1;
  if ((a1 & 0xFE) != 0)
    v19 = v6;
  else
    v19 = 1;
  Transition.apply<A>(content:phase:)(v15, v18, v8, v7, v9, (uint64_t)&protocol witness table for PlaceholderContentView<A>);
  v20 = a2[3];
  v21 = a2[5];
  v25[0] = &protocol witness table for PlaceholderContentView<A>;
  v25[1] = &protocol witness table for ApplyTransitionModifier<A>;
  v22 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v13, v25);
  Transition.apply<A>(content:phase:)((uint64_t)v17, v19, v20, v13, v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

_QWORD *static AsymmetricTransition.properties.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  char v7;
  _QWORD *result;
  uint64_t v9;

  (*(void (**)(char *__return_ptr))(a2 + 32))((char *)&v9 + 1);
  v7 = BYTE1(v9);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v9, a1, a3);
  *a4 = (v7 | v9) & 1;
  return result;
}

uint64_t AsymmetricTransition._makeContentTransition(transition:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  BOOL v10;
  _BOOL8 v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;

  v5 = *(a2 - 1);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v8;
  if (v9 == 3)
  {
    v10 = Transition.hasContentTransition.getter(a2[2], a2[4]);
    (*(void (**)(char *, uint64_t, uint64_t *))(v5 + 16))(v7, v2, a2);
    v11 = v10 || Transition.hasContentTransition.getter(a2[3], a2[5]);
    (*(void (**)(char *, uint64_t *))(v5 + 8))(v7, a2);
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v13 = *(double *)(a1 + 8);
    v12 = *(double *)(a1 + 16);
    v48 = a2;
    v49 = a1;
    v46 = v9;
    v47 = v2;
    v51 = v9;
    v14 = Transition.contentTransitionEffects(style:size:)(&v51, v13, v12, a2[2], a2[4]);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v17 = 0;
      v18 = *((_QWORD *)v16 + 2);
      v19 = 36 * v18;
      do
      {
        v20 = *(_QWORD *)(v14 + v17 + 32);
        v21 = *(_BYTE *)(v14 + v17 + 40);
        v22 = *(_DWORD *)(v14 + v17 + 44);
        v23 = *(_BYTE *)(v14 + v17 + 48);
        v24 = *(_QWORD *)(v14 + v17 + 52);
        v25 = *(_DWORD *)(v14 + v17 + 64);
        v26 = *((_QWORD *)v16 + 3);
        v27 = v18 + 1;
        if (v18 >= v26 >> 1)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v18 + 1, 1, v16);
        *((_QWORD *)v16 + 2) = v27;
        v28 = &v16[v19 + v17];
        *((_QWORD *)v28 + 4) = v20;
        v28[40] = v21;
        *((_DWORD *)v28 + 11) = v22;
        v28[48] = v23;
        *(_QWORD *)(v28 + 52) = v24;
        v17 += 36;
        v18 = v27;
        *((_DWORD *)v28 + 15) = 1;
        *((_DWORD *)v28 + 16) = v25;
        --v15;
      }
      while (v15);
    }
    else
    {
      v16 = (char *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v50 = v46;
    v30 = Transition.contentTransitionEffects(style:size:)(&v50, v13, v12, v48[3], v48[5]);
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
      v32 = 0;
      v33 = *((_QWORD *)v16 + 2);
      v34 = 36 * v33;
      do
      {
        v35 = *(_QWORD *)(v30 + v32 + 32);
        v36 = *(_BYTE *)(v30 + v32 + 40);
        v37 = *(_DWORD *)(v30 + v32 + 44);
        v38 = *(_BYTE *)(v30 + v32 + 48);
        v39 = *(_QWORD *)(v30 + v32 + 52);
        v40 = *(_DWORD *)(v30 + v32 + 64);
        v41 = *((_QWORD *)v16 + 3);
        v42 = v33 + 1;
        if (v33 >= v41 >> 1)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v33 + 1, 1, v16);
        *((_QWORD *)v16 + 2) = v42;
        v43 = &v16[v34 + v32];
        *((_QWORD *)v43 + 4) = v35;
        v43[40] = v36;
        *((_DWORD *)v43 + 11) = v37;
        v43[48] = v38;
        *(_QWORD *)(v43 + 52) = v39;
        v32 += 36;
        v33 = v42;
        *((_DWORD *)v43 + 15) = 2;
        *((_DWORD *)v43 + 16) = v40;
        --v31;
      }
      while (v31);
    }
    swift_bridgeObjectRelease();
    v44 = v49;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(v49 + 24), *(_BYTE *)(v49 + 32));
    *(_QWORD *)(v44 + 24) = v16;
    *(_BYTE *)(v44 + 32) = 1;
  }
  return result;
}

_QWORD *protocol witness for static Transition.properties.getter in conformance AsymmetricTransition<A, B>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return static AsymmetricTransition.properties.getter(a1[3], a1[4], a1[5], a2);
}

uint64_t associated type witness table accessor for Transition.Body : View in AsymmetricTransition<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for AsymmetricTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CBFE60 + 4 * byte_235295980[v17 - 1]))();
}

void storeEnumTagSinglePayload for AsymmetricTransition(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_234CC00DC()
{
  type metadata accessor for AsymmetricTransition();
}

uint64_t sub_234CC0110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[14];

  v8 = type metadata accessor for PlaceholderContentView(255, a1, a3, a4);
  v10 = type metadata accessor for ApplyTransitionModifier(255, v4, v6, v9);
  v12 = type metadata accessor for ModifiedContent(255, v8, v10, v11);
  v14 = type metadata accessor for ApplyTransitionModifier(255, v5, v7, v13);
  v16 = type metadata accessor for ModifiedContent(255, v12, v14, v15);
  v19[0] = &protocol witness table for PlaceholderContentView<A>;
  v19[1] = &protocol witness table for ApplyTransitionModifier<A>;
  v18[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v12, v19);
  v18[1] = &protocol witness table for ApplyTransitionModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v16, v18);
}

uint64_t destroy for AnyTransition.InsertionVisitor()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyTransition.InsertionVisitor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AnyTransition.InsertionVisitor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AnyTransition.InsertionVisitor(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

void *type metadata accessor for AnyTransition.InsertionVisitor()
{
  return &unk_2506160F0;
}

uint64_t type metadata accessor for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyTransition.RemovalVisitor);
}

uint64_t type metadata completion function for AnyTransition.RemovalVisitor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyTransition.RemovalVisitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyTransition.RemovalVisitor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234CC05E4 + 4 * byte_23529598E[v10]))();
  }
}

void storeEnumTagSinglePayload for AnyTransition.RemovalVisitor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234CC0764()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234CC07E8);
}

void sub_234CC076C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234CC0774);
  JUMPOUT(0x234CC07E8);
}

void sub_234CC07BC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234CC07E8);
}

void sub_234CC07C4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234CC07E8);
}

uint64_t sub_234CC07CC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x234CC07D8);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x234CC07E8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

double static CGPoint.defaultAnchor.getter()
{
  return 0.0;
}

double CGPoint.prepare(geometry:)(double a1, double a2)
{
  uint64_t Value;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  _BYTE v13[96];
  _QWORD v14[5];
  _BYTE v15[32];
  uint64_t v16;
  char v17;
  double v18;
  double v19;

  v18 = a1;
  v19 = a2;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v17 = 2;
  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(double *)(Value + 8);
  v5 = *(double *)(Value + 16);
  v6 = *(double *)(Value + 24);
  v7 = *(double *)(Value + 32);
  v8 = AGGraphGetValue();
  v9 = *(double *)v8;
  v10 = *(double *)(v8 + 8);
  v11 = v6 - (*(double *)v8 - v4);
  v14[0] = v3;
  *(double *)&v14[1] = v9;
  *(double *)&v14[2] = v10;
  *(double *)&v14[3] = v11;
  *(double *)&v14[4] = v7 - (v10 - v5);
  outlined init with copy of CoordinateSpace((uint64_t)v15, (uint64_t)v13);
  v13[89] = 2;
  swift_retain();
  specialized ViewTransform.convert(_:_:)((uint64_t)v13, (uint64_t)v14);
  outlined destroy of ViewTransform.Conversion((uint64_t)v13);
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)v15);
  return v18;
}

void protocol witness for AnchorProtocol.prepare(geometry:) in conformance CGPoint(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v3;

  *(double *)a1 = CGPoint.prepare(geometry:)(*v1, v1[1]);
  *(_QWORD *)(a1 + 8) = v3;
}

void protocol witness for static AnchorProtocol.hashValue(_:into:) in conformance CGPoint(double *a1)
{
  specialized static CGPoint.hashValue(_:into:)(*a1, a1[1]);
}

double static UnitPoint.defaultAnchor.getter()
{
  return 0.0;
}

void UnitPoint.prepare(geometry:)(double a1, double a2)
{
  double *Value;

  type metadata accessor for CGSize(0);
  Value = (double *)AGGraphGetValue();
  CGPoint.prepare(geometry:)(*Value * a1, Value[1] * a2);
}

void static UnitPoint.hashValue(_:into:)(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

void protocol witness for AnchorProtocol.prepare(geometry:) in conformance UnitPoint(uint64_t a1@<X8>)
{
  double *v1;
  double v3;
  double v4;
  double *Value;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  type metadata accessor for CGSize(0);
  Value = (double *)AGGraphGetValue();
  *(double *)a1 = CGPoint.prepare(geometry:)(v3 * *Value, v4 * Value[1]);
  *(_QWORD *)(a1 + 8) = v6;
}

uint64_t static Anchor.Source<A>.point(_:)(double a1, double a2)
{
  return static Anchor.Source<A>.point(_:)(type metadata accessor for AnchorBox<CGPoint>, a1, a2);
}

uint64_t static Anchor.Source<A>.unitPoint(_:)(double a1, double a2)
{
  return static Anchor.Source<A>.point(_:)((void (*)(_QWORD))type metadata accessor for AnchorBox<UnitPoint>, a1, a2);
}

uint64_t static Anchor.Source<A>.point(_:)(void (*a1)(_QWORD), double a2, double a3)
{
  uint64_t result;

  a1(0);
  result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *(double *)(result + 24) = a3;
  return result;
}

uint64_t static Anchor.Source<A>.topLeading.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  uint64_t result;

  if (one-time initialization token for topLeading != -1)
    swift_once();
  v4 = static UnitPoint.topLeading;
  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = v4;
  return result;
}

double static Anchor.Source<A>.top.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = swift_allocObject();
  result = 0.5;
  *(_OWORD *)(v4 + 16) = xmmword_235286C10;
  return result;
}

double static Anchor.Source<A>.topTrailing.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = swift_allocObject();
  result = 1.0;
  *(_OWORD *)(v4 + 16) = xmmword_235281560;
  return result;
}

double static Anchor.Source<A>.leading.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v4 + 16) = xmmword_235295A70;
  return result;
}

__n128 static Anchor.Source<A>.center.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v4;
  __n128 result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = (__n128 *)swift_allocObject();
  __asm { FMOV            V0.2D, #0.5 }
  v4[1] = result;
  return result;
}

double static Anchor.Source<A>.trailing.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = swift_allocObject();
  result = 1.0;
  *(_OWORD *)(v4 + 16) = xmmword_235295A80;
  return result;
}

double static Anchor.Source<A>.bottomLeading.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v4 + 16) = xmmword_23528A280;
  return result;
}

double static Anchor.Source<A>.bottom.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = swift_allocObject();
  result = 0.5;
  *(_OWORD *)(v4 + 16) = xmmword_235285B50;
  return result;
}

__n128 static Anchor.Source<A>.bottomTrailing.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v4;
  __n128 result;

  type metadata accessor for AnchorBox<UnitPoint>(0, a2, a3, a4);
  v4 = (__n128 *)swift_allocObject();
  __asm { FMOV            V0.2D, #1.0 }
  v4[1] = result;
  return result;
}

void specialized static CGPoint.hashValue(_:into:)(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

void type metadata accessor for AnchorBox<CGPoint>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnchorBox<CGPoint>)
  {
    type metadata accessor for CGPoint(255);
    v4 = type metadata accessor for AnchorBox(a1, v2, (uint64_t)&protocol witness table for CGPoint, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnchorBox<CGPoint>);
  }
}

void type metadata accessor for AnchorBox<UnitPoint>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnchorBox<UnitPoint>)
  {
    v4 = type metadata accessor for AnchorBox(0, (uint64_t)&type metadata for UnitPoint, (uint64_t)&protocol witness table for UnitPoint, a4);
    if (!v5)
      atomic_store(v4, &lazy cache variable for type metadata for AnchorBox<UnitPoint>);
  }
}

_UNKNOWN **associated type witness table accessor for AnchorProtocol.AnchorValue : ViewTransformable in CGPoint()
{
  return &protocol witness table for CGPoint;
}

uint64_t AbsoluteEdge.Set.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AbsoluteEdge.Set.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

unsigned __int8 *AbsoluteEdge.Set.init(_:)@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = *result;
  v3 = v2 > 8;
  if (v2 >= 8)
    LOBYTE(v4) = 0;
  else
    v4 = 1 << v2;
  if (v3)
    LOBYTE(v4) = 0;
  *a2 = v4;
  return result;
}

void static AbsoluteEdge.Set.top.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AbsoluteEdge.Set.left.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static AbsoluteEdge.Set.bottom.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static AbsoluteEdge.Set.right.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

_QWORD *static AbsoluteEdge.Set.all.getter@<X0>(_BYTE *a1@<X8>)
{
  return static AbsoluteEdge.Set.all.getter(&one-time initialization token for all, &static AbsoluteEdge.Set.all, a1);
}

void one-time initialization function for horizontal()
{
  static AbsoluteEdge.Set.horizontal = 10;
}

_QWORD *static AbsoluteEdge.Set.horizontal.getter@<X0>(_BYTE *a1@<X8>)
{
  return static AbsoluteEdge.Set.all.getter(&one-time initialization token for horizontal, &static AbsoluteEdge.Set.horizontal, a1);
}

void one-time initialization function for vertical()
{
  static AbsoluteEdge.Set.vertical = 5;
}

_QWORD *static AbsoluteEdge.Set.vertical.getter@<X0>(_BYTE *a1@<X8>)
{
  return static AbsoluteEdge.Set.all.getter(one-time initialization token for vertical, &static AbsoluteEdge.Set.vertical, a1);
}

_QWORD *static AbsoluteEdge.Set.all.getter@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

uint64_t AbsoluteEdge.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

Swift::Bool __swiftcall AbsoluteEdge.Set.contains(_:)(SwiftUI::AbsoluteEdge a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = *(unsigned __int8 *)a1;
  v3 = v2 > 8;
  if (v2 >= 8)
    v4 = 0;
  else
    v4 = 1 << v2;
  if (v3)
    v4 = 0;
  return (v4 & ~*v1) == 0;
}

SwiftUI::AbsoluteEdge_optional __swiftcall AbsoluteEdge.init(rawValue:)(SwiftUI::AbsoluteEdge_optional rawValue)
{
  SwiftUI::AbsoluteEdge *v1;
  SwiftUI::AbsoluteEdge value;

  value = rawValue.value;
  if ((rawValue.value & 0xFC) != 0)
    value = SwiftUI_AbsoluteEdge_unknownDefault;
  *v1 = value;
  return rawValue;
}

void *static AbsoluteEdge.allCases.getter()
{
  return &outlined read-only object #0 of static AbsoluteEdge.allCases.getter;
}

SwiftUI::AbsoluteEdge_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AbsoluteEdge(Swift::Int8 *a1)
{
  return AbsoluteEdge.init(rawValue:)(*a1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AbsoluteEdge(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AbsoluteEdge;
}

BOOL AbsoluteEdge.Set.init(_:layoutDirection:)@<W0>(unsigned __int8 *a1@<X1>, _BYTE *a2@<X8>)
{
  int v3;
  Swift::Bool v4;
  int v5;
  int v6;
  Swift::Bool v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BOOL8 result;
  char v13;

  v3 = *a1;
  v4 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  if (v3)
    v5 = 8;
  else
    v5 = 2;
  if (v4)
    v6 = v5;
  else
    v6 = 0;
  v7 = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  if (v3)
    v8 = 2;
  else
    v8 = 8;
  if ((v6 & v8) != 0)
    v8 = 0;
  v9 = v8 | v6;
  if (v7)
    v10 = v9;
  else
    v10 = v6;
  v11 = v10 | (Edge.Set.contains(_:)(SwiftUI_Edge_top) && (v10 & 1) == 0);
  result = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  if (result && (v10 & 4) == 0)
    v13 = v11 | 4;
  else
    v13 = v11;
  *a2 = v13;
  return result;
}

Swift::tuple_min_SwiftUI_AbsoluteEdge_max_SwiftUI_AbsoluteEdge __swiftcall Axis.perpendicularAbsoluteEdges(with:)(SwiftUI::LayoutDirection with)
{
  char *v1;
  _BYTE *v2;
  char v3;
  char v4;
  char v5;
  Swift::tuple_min_SwiftUI_AbsoluteEdge_max_SwiftUI_AbsoluteEdge result;

  if (*v2)
    v4 = 3;
  else
    v4 = 1;
  if (*v2)
    v5 = 1;
  else
    v5 = 3;
  if ((v3 & 1) != 0)
  {
    v4 = 0;
    v5 = 2;
  }
  *(_BYTE *)with = v4;
  *v1 = v5;
  result.max = (char)v1;
  result.min = with;
  return result;
}

BOOL AbsoluteEdge.horizontal.getter()
{
  unsigned __int8 *v0;

  return ((*v0 - 1) & 0xFD) == 0;
}

void AbsoluteEdge.opposite.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0x1000302u >> (8 * *v1);
}

unint64_t lazy protocol witness table accessor for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AbsoluteEdge.Set, &type metadata for AbsoluteEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AbsoluteEdge.Set, &type metadata for AbsoluteEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AbsoluteEdge.Set, &type metadata for AbsoluteEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AbsoluteEdge.Set, &type metadata for AbsoluteEdge.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AbsoluteEdge] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AbsoluteEdge] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AbsoluteEdge] and conformance [A])
  {
    type metadata accessor for [AbsoluteEdge]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AbsoluteEdge] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AbsoluteEdge]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [AbsoluteEdge])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AbsoluteEdge]);
  }
}

unint64_t lazy protocol witness table accessor for type AbsoluteEdge and conformance AbsoluteEdge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteEdge and conformance AbsoluteEdge;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge and conformance AbsoluteEdge)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AbsoluteEdge, &type metadata for AbsoluteEdge);
    atomic_store(result, &lazy protocol witness table cache variable for type AbsoluteEdge and conformance AbsoluteEdge);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AbsoluteEdge(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234CC1330 + 4 * byte_235295AB5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234CC1364 + 4 * byte_235295AB0[v4]))();
}

uint64_t sub_234CC1364(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CC136C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CC1374);
  return result;
}

uint64_t sub_234CC1380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CC1388);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234CC138C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CC1394(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AbsoluteEdge()
{
  return &type metadata for AbsoluteEdge;
}

ValueMetadata *type metadata accessor for AbsoluteEdge.Set()
{
  return &type metadata for AbsoluteEdge.Set;
}

uint64_t one-time initialization function for update()
{
  uint64_t result;

  result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.update = result;
  return result;
}

uint64_t static AGNamedTraceEventID.update.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for update, (unsigned int *)&static AGNamedTraceEventID.update);
}

uint64_t one-time initialization function for sizeThatFits()
{
  uint64_t result;

  result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.sizeThatFits = result;
  return result;
}

uint64_t static AGNamedTraceEventID.sizeThatFits.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for sizeThatFits, (unsigned int *)&static AGNamedTraceEventID.sizeThatFits);
}

uint64_t one-time initialization function for lengthThatFits()
{
  uint64_t result;

  result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.lengthThatFits = result;
  return result;
}

uint64_t static AGNamedTraceEventID.lengthThatFits.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for lengthThatFits, (unsigned int *)&static AGNamedTraceEventID.lengthThatFits);
}

uint64_t one-time initialization function for childGeometries()
{
  uint64_t result;

  result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.childGeometries = result;
  return result;
}

uint64_t static AGNamedTraceEventID.childGeometries.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for childGeometries, (unsigned int *)&static AGNamedTraceEventID.childGeometries);
}

uint64_t one-time initialization function for contentDescription()
{
  uint64_t result;

  result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.contentDescription = result;
  return result;
}

uint64_t static AGNamedTraceEventID.contentDescription.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for contentDescription, (unsigned int *)&static AGNamedTraceEventID.contentDescription);
}

uint64_t static AGNamedTraceEventID.update.getter(_QWORD *a1, unsigned int *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t static LayoutTrace.register(graph:)(void *a1)
{
  uint64_t result;
  uint64_t v3;
  id v4;

  if (one-time initialization token for update != -1)
    swift_once();
  result = AGGraphTraceEventEnabled();
  if ((_DWORD)result)
  {
    type metadata accessor for LayoutTrace.Recorder();
    v3 = swift_allocObject();
    *(_BYTE *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_WORD *)(v3 + 56) = 512;
    *(_QWORD *)(v3 + 16) = a1;
    swift_beginAccess();
    static LayoutTrace.recorder = (_UNKNOWN *)v3;
    v4 = a1;
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for LayoutTrace.Recorder()
{
  return objc_opt_self();
}

BOOL static LayoutTrace.isEnabled.getter()
{
  swift_beginAccess();
  return static LayoutTrace.recorder != 0;
}

uint64_t static LayoutTrace.recorder.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static LayoutTrace.recorder.setter(void *a1)
{
  swift_beginAccess();
  static LayoutTrace.recorder = a1;
  return swift_release();
}

uint64_t (*static LayoutTrace.recorder.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id LayoutTrace.Recorder.graph.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 16);
}

void LayoutTrace.Recorder.graph.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t (*LayoutTrace.Recorder.graph.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t LayoutTrace.Recorder.frameActive.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t LayoutTrace.Recorder.frameActive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  return result;
}

uint64_t (*LayoutTrace.Recorder.frameActive.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

__n128 LayoutTrace.Recorder.cacheLookup.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v3;
  unsigned __int16 v4;
  __n128 result;

  swift_beginAccess();
  v3 = v1[3].n128_u64[0];
  v4 = v1[3].n128_u16[4];
  result = v1[2];
  *a1 = result;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u16[4] = v4;
  return result;
}

__n128 LayoutTrace.Recorder.cacheLookup.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int16 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u16[4];
  swift_beginAccess();
  result = v5;
  v1[2] = v5;
  v1[3].n128_u64[0] = v2;
  v1[3].n128_u16[4] = v3;
  return result;
}

uint64_t (*LayoutTrace.Recorder.cacheLookup.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t LayoutTrace.Recorder.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LayoutTrace.Recorder.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t static LayoutTrace.traceSizeThatFits(_:proposal:_:)(unint64_t a1, uint64_t *a2, double (*a3)(uint64_t))
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = v8;
    swift_retain();
    LayoutTrace.Recorder.traceSizeThatFits(_:proposal:_:)(a1 | ((HIDWORD(a1) & 1) << 32), (uint64_t)&v10, a3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double LayoutTrace.Recorder.traceSizeThatFits(_:proposal:_:)(uint64_t a1, uint64_t a2, double (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v4 = v3;
  LayoutTrace.Recorder.activateFrameIfNeeded()();
  swift_beginAccess();
  v6 = one-time initialization token for sizeThatFits;
  v7 = *(id *)(v3 + 16);
  if (v6 != -1)
    swift_once();
  AGGraphAddNamedTraceEvent();

  v8 = swift_beginAccess();
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 56) = 512;
  v9 = a3(v8);
  AGGraphAddNamedTraceEvent();
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 56) = 512;
  return v9;
}

uint64_t static LayoutTrace.traceLengthThatFits(_:proposal:in:_:)(unint64_t a1, uint64_t *a2, char a3, double (*a4)(uint64_t))
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 8);
  v9 = a2[2];
  v10 = *((_BYTE *)a2 + 24);
  result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    v12 = v7;
    v13 = v8;
    v14 = v9;
    v15 = v10;
    swift_retain();
    LayoutTrace.Recorder.traceLengthThatFits(_:proposal:in:_:)(a1 | ((HIDWORD(a1) & 1) << 32), (uint64_t)&v12, a3 & 1, a4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double LayoutTrace.Recorder.traceLengthThatFits(_:proposal:in:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  uint64_t v9;
  double v10;

  v5 = v4;
  LayoutTrace.Recorder.activateFrameIfNeeded()();
  swift_beginAccess();
  v7 = one-time initialization token for lengthThatFits;
  v8 = *(id *)(v4 + 16);
  if (v7 != -1)
    swift_once();
  AGGraphAddNamedTraceEvent();

  v9 = swift_beginAccess();
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_WORD *)(v5 + 56) = 512;
  v10 = a4(v9);
  AGGraphAddNamedTraceEvent();
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_WORD *)(v5 + 56) = 512;
  return v10;
}

uint64_t static LayoutTrace.traceCacheLookup(_:_:)(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t result;
  _QWORD *v8;
  __int16 v9;
  __int16 v10;

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = a1[2];
  v6 = *((unsigned __int8 *)a1 + 24);
  result = swift_beginAccess();
  v8 = static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    if ((a2 & 1) != 0)
      v9 = 256;
    else
      v9 = 0;
    v10 = v9 | v6;
    result = swift_beginAccess();
    v8[4] = v3;
    v8[5] = v4;
    v8[6] = v5;
    *((_WORD *)v8 + 28) = v10;
  }
  return result;
}

uint64_t static LayoutTrace.traceCacheLookup(_:_:)(char a1, double a2, double a3)
{
  uint64_t result;
  double *v7;
  __int16 v8;

  result = swift_beginAccess();
  v7 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    if ((a1 & 1) != 0)
      v8 = 256;
    else
      v8 = 0;
    result = swift_beginAccess();
    v7[4] = a2;
    v7[5] = 0.0;
    v7[6] = a3;
    *((_WORD *)v7 + 28) = v8;
  }
  return result;
}

uint64_t static LayoutTrace.traceChildGeometries(_:at:origin:_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void *v14;
  int v15;
  void *v16;
  _QWORD *v17;
  void (*v18)(void **);
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(void **);
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  int v32;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  result = swift_beginAccess();
  v14 = static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_retain();
    LayoutTrace.Recorder.activateFrameIfNeeded()();
    if (one-time initialization token for shared != -1)
      swift_once();
    if ((a1 & 0x100000000) != 0)
      v15 = 0;
    else
      v15 = a1;
    swift_beginAccess();
    v16 = static CoreGlue.shared;
    v25 = v14;
    v26 = v9;
    v27 = v10;
    v28 = v11;
    v29 = v12;
    v30 = a4;
    v31 = a5;
    v32 = v15;
    v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v18 = *(void (**)(void **))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x90);
    swift_retain();
    v19 = v16;
    v18(&v25);

    v20 = swift_release();
    v21 = a3(v20);
    v22 = static CoreGlue.shared;
    v25 = v14;
    v26 = v21;
    v23 = *(void (**)(void **))((*v17 & *(_QWORD *)static CoreGlue.shared) + 0xA0);
    swift_retain();
    v24 = v22;
    swift_bridgeObjectRetain();
    v23(&v25);

    swift_bridgeObjectRelease();
    swift_release_n();
    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static LayoutTrace.traceContentDescription(_:_:)(unint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    swift_retain();
    LayoutTrace.Recorder.traceContentDescription(_:_:)(a1 | ((HIDWORD(a1) & 1) << 32));
    return swift_release();
  }
  return result;
}

void LayoutTrace.Recorder.traceContentDescription(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Class isa;
  _DWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for String.Encoding();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x100000000) != 0)
    v7 = 0;
  else
    v7 = a1;
  swift_beginAccess();
  v8 = *(void **)(v1 + 16);
  v9 = one-time initialization token for contentDescription;
  v10 = v8;
  if (v9 != -1)
    swift_once();
  static String.Encoding.utf8.getter();
  v11 = String.data(using:allowLossyConversion:)();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v15[3] = v7;
  if (v13 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  AGGraphAddNamedTraceEvent();

  outlined consume of Data?(v11, v13);
}

Swift::Void __swiftcall LayoutTrace.Recorder.activateFrameIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  swift_beginAccess();
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    *(_BYTE *)(v0 + 24) = 1;
    swift_beginAccess();
    v1 = one-time initialization token for update;
    v2 = *(id *)(v0 + 16);
    if (v1 != -1)
      swift_once();
    AGGraphAddNamedTraceEvent();

    swift_retain();
    specialized static Update.begin()();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = partial apply for closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded();
    *(_QWORD *)(v3 + 24) = v0;
    v4 = one-time initialization token for actions;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v7 = v5[2];
    v6 = v5[3];
    if (v7 >= v6 >> 1)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
    v5[2] = v7 + 1;
    v8 = &v5[2 * v7];
    v8[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v8[5] = v3;
    static Update.actions = v5;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
  }
}

uint64_t closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded()(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  id v4;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    *(_BYTE *)(a1 + 24) = 0;
    swift_beginAccess();
    v3 = one-time initialization token for update;
    v4 = *(id *)(a1 + 16);
    if (v3 != -1)
      swift_once();
    AGGraphAddNamedTraceEvent();

    return AGGraphSyncTracing();
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutTrace()
{
  return &type metadata for LayoutTrace;
}

uint64_t method lookup function for LayoutTrace.Recorder()
{
  return swift_lookUpClassMethod();
}

uint64_t partial apply for closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded()()
{
  uint64_t v0;

  return closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded()(v0);
}

uint64_t sub_234CC2734()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t Date.ComponentsFormatStyle.Field.magnitude.getter@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t result;
  double v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v22 - v11, v2, v4, v10);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v5, MEMORY[0x24BDCE6E8]);
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v4);
  if ((v5 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
    v15 = 31536000.0;
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.narrow.getter();
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13(v8, v4);
    if ((v16 & 1) != 0)
    {
      result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
      v15 = 2592000.0;
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v13(v8, v4);
      if ((v17 & 1) != 0)
      {
        result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
        v15 = 604800.0;
      }
      else
      {
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v13(v8, v4);
        if ((v18 & 1) != 0)
        {
          result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
          v15 = 86400.0;
        }
        else
        {
          static Date.ComponentsFormatStyle.Style.spellOut.getter();
          v19 = dispatch thunk of static Equatable.== infix(_:_:)();
          v13(v8, v4);
          if ((v19 & 1) != 0)
          {
            result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
            v15 = 3600.0;
          }
          else
          {
            static Date.ComponentsFormatStyle.Field.minute.getter();
            v20 = dispatch thunk of static Equatable.== infix(_:_:)();
            v13(v8, v4);
            if ((v20 & 1) != 0)
            {
              result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
              v15 = 60.0;
            }
            else
            {
              static Date.ComponentsFormatStyle.Field.second.getter();
              v21 = dispatch thunk of static Equatable.== infix(_:_:)();
              v13(v8, v4);
              result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
              v15 = 1.0;
              if ((v21 & 1) == 0)
              {
                if (one-time initialization token for max != -1)
                  result = swift_once();
                v15 = *(double *)&static Calendar.Component.Magnitude.max;
              }
            }
          }
        }
      }
    }
  }
  *a1 = v15;
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  int64_t v33;

  v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - v9;
  v11 = a1 + 56;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(a1 + 56);
  v33 = (unint64_t)(v12 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v11 + 8 * v16);
    if (!v20)
      break;
LABEL_18:
    v14 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v10, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v18, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v10, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
    {
      swift_release();
      return (uint64_t)v30;
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    closure #1 in NSCalendarUnit.init(_:)((uint64_t)v6, (uint64_t)&v31);
    if (v1)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v26 = v30;
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if ((v32 & 1) == 0)
    {
      v29 = v31;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
        v30 = (_QWORD *)result;
      }
      v23 = v30[2];
      v22 = v30[3];
      v24 = v23 + 1;
      if (v23 >= v22 >> 1)
      {
        v27 = v30[2];
        v28 = v23 + 1;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v30);
        v23 = v27;
        v24 = v28;
        v30 = (_QWORD *)result;
      }
      v25 = v30;
      v30[2] = v24;
      v25[v23 + 4] = v29;
    }
  }
  v21 = v16 + 1;
  if (v16 + 1 >= v33)
    goto LABEL_33;
  v20 = *(_QWORD *)(v11 + 8 * v21);
  if (v20)
    goto LABEL_17;
  v21 = v16 + 2;
  if (v16 + 2 >= v33)
    goto LABEL_33;
  v20 = *(_QWORD *)(v11 + 8 * v21);
  if (v20)
    goto LABEL_17;
  v21 = v16 + 3;
  if (v16 + 3 >= v33)
    goto LABEL_33;
  v20 = *(_QWORD *)(v11 + 8 * v21);
  if (v20)
    goto LABEL_17;
  v21 = v16 + 4;
  if (v16 + 4 >= v33)
  {
LABEL_33:
    v26 = v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v10, 1, 1, v3);
LABEL_34:
    swift_release();
    return (uint64_t)v26;
  }
  v20 = *(_QWORD *)(v11 + 8 * v21);
  if (v20)
  {
LABEL_17:
    v16 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v11 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
  return result;
}

void Calendar.Component.Magnitude.init(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

BOOL static Calendar.Component.Magnitude.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.magnitude.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;

  v2 = v1;
  v4 = type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v4, v6);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if ((_DWORD)result == *MEMORY[0x24BDCC028])
  {
    *a1 = 0x4122750000000000;
  }
  else if ((_DWORD)result == *MEMORY[0x24BDCC018])
  {
    *a1 = 0x40F5180000000000;
  }
  else if ((_DWORD)result == *MEMORY[0x24BDCC020])
  {
    *a1 = 0x40AC200000000000;
  }
  else if ((_DWORD)result == *MEMORY[0x24BDCC030])
  {
    *a1 = 0x404E000000000000;
  }
  else if ((_DWORD)result == *MEMORY[0x24BDCC038])
  {
    *a1 = 0x3FF0000000000000;
  }
  else if ((_DWORD)result == *MEMORY[0x24BDCC008])
  {
    *a1 = 0x3EB0C6F7A0B5ED8DLL;
  }
  else if ((_DWORD)result == *MEMORY[0x24BDCC010])
  {
    *a1 = 0x3F50624DD2F1A9FCLL;
  }
  else if ((_DWORD)result == *MEMORY[0x24BDCC000])
  {
    *a1 = 0x3E112E0BE826D695;
  }
  else
  {
    if (one-time initialization token for max != -1)
      swift_once();
    *a1 = static Calendar.Component.Magnitude.max;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.magnitude.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v4, v6);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if ((_DWORD)result == *MEMORY[0x24BDCC0E0])
  {
    v10 = 0x422D5EC4B0000000;
LABEL_26:
    *a1 = v10;
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC0F8] || (_DWORD)result == *MEMORY[0x24BDCC0C8])
  {
    v10 = 0x417E133800000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC118])
  {
    v10 = 0x415DA9C000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC100])
  {
    v10 = 0x4143C68000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC0A8] || (_DWORD)result == *MEMORY[0x24BDCC0B0])
  {
LABEL_19:
    v10 = 0x4122750000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC120])
    goto LABEL_25;
  if ((_DWORD)result == *MEMORY[0x24BDCC0C0])
    goto LABEL_19;
  if ((_DWORD)result == *MEMORY[0x24BDCC0D8] || (_DWORD)result == *MEMORY[0x24BDCC130])
  {
LABEL_25:
    v10 = 0x40F5180000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC0E8])
  {
    v10 = 0x40E5180000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC0F0])
  {
    v10 = 0x40AC200000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC108])
  {
    v10 = 0x404E000000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC110])
  {
    v10 = 0x3FF0000000000000;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC0B8])
  {
    v10 = 0x3F50624DD2F1A9FCLL;
    goto LABEL_26;
  }
  if ((_DWORD)result == *MEMORY[0x24BDCC128])
  {
    if (one-time initialization token for max != -1)
      result = swift_once();
    *a1 = static Calendar.Component.Magnitude.max;
  }
  else
  {
    if (one-time initialization token for max != -1)
      swift_once();
    *a1 = static Calendar.Component.Magnitude.max;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

Swift::Void __swiftcall Calendar.Component.Magnitude.decrementByOrderOfMagnitude()()
{
  double *v0;

  *v0 = *v0 / 10.0;
}

uint64_t URL.swiftUI_contentType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t inited;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URLResourceValues?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC818], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - v3;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  v6 = (void *)*MEMORY[0x24BDBCBE8];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCBE8];
  v7 = v6;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for URLResourceValues();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of URLResourceValues?((uint64_t)v4);
    v10 = type metadata accessor for UTType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    URLResourceValues.contentType.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v4, v8);
  }
}

uint64_t Set<>.init(_:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  result = MEMORY[0x24BEE4B08];
  v15 = MEMORY[0x24BEE4B08];
  if ((a2 & 1) == 0)
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)((char *)&outlined read-only object #0 of Set<>.init(_:) + v12 + 32);
      if ((v13 & ~a1) == 0)
      {
        if (v13 > 127)
        {
          switch(v13)
          {
            case 0x80:
              static Duration.UnitsFormatStyle.Unit.seconds.getter();
              break;
            case 0x8000:
              static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
              break;
            case 0x200:
              static Duration.UnitsFormatStyle.Unit.weeks.getter();
              break;
            default:
              goto LABEL_5;
          }
        }
        else
        {
          switch(v13)
          {
            case 16:
              static Duration.UnitsFormatStyle.Unit.days.getter();
              break;
            case 32:
              static Duration.UnitsFormatStyle.Unit.hours.getter();
              break;
            case 64:
              static Duration.UnitsFormatStyle.Unit.minutes.getter();
              break;
            default:
              goto LABEL_5;
          }
        }
        specialized Set._Variant.insert(_:)((uint64_t)v10, v7);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
LABEL_5:
      v12 += 8;
      if (v12 == 40)
        return v15;
    }
  }
  return result;
}

{
  return specialized Set<>.init(_:)(a1, a2 & 1);
}

uint64_t NSCalendarUnit.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = specialized Sequence.compactMap<A>(_:)(a1, a1);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = (uint64_t *)(v1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if ((v6 & ~v3) == 0)
        v5 = 0;
      v3 |= v5;
      --v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = specialized Sequence.compactMap<A>(_:)(a1);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = (uint64_t *)(v1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if ((v6 & ~v3) == 0)
        v5 = 0;
      v3 |= v5;
      --v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t closure #1 in NSCalendarUnit.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  _QWORD v26[2];

  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v26 - v13, a1, v6, v12);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v7, MEMORY[0x24BDCE6E8]);
  LOBYTE(v7) = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v6);
  if ((v7 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, uint64_t))v15)(v14, v6);
    v17 = 0;
    v18 = 4;
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.narrow.getter();
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v10, v6);
    if ((v19 & 1) != 0)
    {
      result = ((uint64_t (*)(char *, uint64_t))v15)(v14, v6);
      v17 = 0;
      v18 = 8;
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      v15(v10, v6);
      if ((v20 & 1) != 0)
      {
        v15(v14, v6);
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        v21 = specialized Set.contains(_:)((uint64_t)v10, a2);
        result = ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
        v17 = 0;
        v18 = 0x2000;
        if ((v21 & 1) != 0)
          v18 = 4096;
      }
      else
      {
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
        v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        v15(v10, v6);
        if ((v22 & 1) != 0)
        {
          result = ((uint64_t (*)(char *, uint64_t))v15)(v14, v6);
          v17 = 0;
          v18 = 16;
        }
        else
        {
          static Date.ComponentsFormatStyle.Style.spellOut.getter();
          v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          v15(v10, v6);
          if ((v23 & 1) != 0)
          {
            result = ((uint64_t (*)(char *, uint64_t))v15)(v14, v6);
            v17 = 0;
            v18 = 32;
          }
          else
          {
            static Date.ComponentsFormatStyle.Field.minute.getter();
            v24 = dispatch thunk of static Equatable.== infix(_:_:)();
            v15(v10, v6);
            if ((v24 & 1) != 0)
            {
              result = ((uint64_t (*)(char *, uint64_t))v15)(v14, v6);
              v17 = 0;
              v18 = 64;
            }
            else
            {
              static Date.ComponentsFormatStyle.Field.second.getter();
              v25 = dispatch thunk of static Equatable.== infix(_:_:)();
              v15(v10, v6);
              result = ((uint64_t (*)(char *, uint64_t))v15)(v14, v6);
              if ((v25 & 1) != 0)
                v18 = 128;
              else
                v18 = 0;
              v17 = v25 ^ 1;
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a3 = v18;
  *(_BYTE *)(a3 + 8) = v17 & 1;
  return result;
}

uint64_t closure #1 in NSCalendarUnit.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t result;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v24 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v24 - v11, a1, v4, v10);
  static Duration.UnitsFormatStyle.Unit.weeks.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, v5, MEMORY[0x24BDD0A68]);
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v4);
  if ((v5 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
    v15 = 0;
    v16 = 0x2000;
  }
  else
  {
    static Duration.UnitsFormatStyle.Unit.days.getter();
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13(v8, v4);
    if ((v17 & 1) != 0)
    {
      result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
      v15 = 0;
      v16 = 16;
    }
    else
    {
      static Duration.UnitsFormatStyle.Unit.hours.getter();
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v13(v8, v4);
      if ((v18 & 1) != 0)
      {
        result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
        v15 = 0;
        v16 = 32;
      }
      else
      {
        static Duration.UnitsFormatStyle.Unit.minutes.getter();
        v19 = dispatch thunk of static Equatable.== infix(_:_:)();
        v13(v8, v4);
        if ((v19 & 1) != 0)
        {
          result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
          v15 = 0;
          v16 = 64;
        }
        else
        {
          static Duration.UnitsFormatStyle.Unit.seconds.getter();
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v13(v8, v4);
          if ((v20 & 1) != 0)
          {
            result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
            v15 = 0;
            v16 = 128;
          }
          else
          {
            static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
            v21 = dispatch thunk of static Equatable.== infix(_:_:)();
            v13(v8, v4);
            if ((v21 & 1) != 0
              || (static Duration.UnitsFormatStyle.Unit.microseconds.getter(),
                  v22 = dispatch thunk of static Equatable.== infix(_:_:)(),
                  v13(v8, v4),
                  (v22 & 1) != 0))
            {
              result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
              v15 = 0;
              v16 = 0x8000;
            }
            else
            {
              static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
              v23 = dispatch thunk of static Equatable.== infix(_:_:)();
              v13(v8, v4);
              result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
              if ((v23 & 1) != 0)
                v16 = 0x8000;
              else
                v16 = 0;
              v15 = v23 ^ 1;
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = v15 & 1;
  return result;
}

double Calendar.Component.Magnitude.init(_:)@<D0>(double *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = Duration.components.getter();
  result = (double)v3 * 1.0e-18 + (double)v2;
  *a1 = result;
  return result;
}

Swift::Void __swiftcall Calendar.Component.Magnitude.incrementByOrderOfMagnitude()()
{
  double *v0;

  *v0 = *v0 * 10.0;
}

double Calendar.Component.Magnitude.ratio(to:)(double *a1)
{
  double *v1;
  double v2;
  double v3;

  v2 = *a1;
  v3 = INFINITY;
  if (*v1 == 0.0)
    v3 = NAN;
  if (v2 == 0.0)
    return v3;
  else
    return *v1 / v2;
}

void one-time initialization function for max()
{
  static Calendar.Component.Magnitude.max = 0x7FF0000000000000;
}

double static Calendar.Component.Magnitude.max.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for max, (double *)&static Calendar.Component.Magnitude.max, a1);
}

double one-time initialization function for zero()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  static Duration.zero.getter();
  v0 = Duration.components.getter();
  result = (double)v1 * 1.0e-18 + (double)v0;
  *(double *)&static Calendar.Component.Magnitude.zero = result;
  return result;
}

{
  double result;

  result = 0.0;
  xmmword_25622D280 = 0u;
  unk_25622D290 = 0u;
  static Text.Effect.DrawingState.zero = 0u;
  *(_OWORD *)algn_25622D270 = 0u;
  qword_25622D2A0 = 0x3FF0000000000000;
  byte_25622D2A8 = 0;
  return result;
}

double static Calendar.Component.Magnitude.zero.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for zero, (double *)&static Calendar.Component.Magnitude.zero, a1);
}

double static Calendar.Component.Magnitude.max.getter@<D0>(_QWORD *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double result;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  *a3 = *(_QWORD *)a2;
  return result;
}

void Calendar.Component.Magnitude.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

BOOL static Calendar.Component.Magnitude.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.Component.Magnitude.CodingKeys()
{
  return 0x6C61767265746E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.Component.Magnitude.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Component.Magnitude.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Component.Magnitude.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.Component.Magnitude.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys, (uint64_t)&unk_25060CD78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Calendar.Component.Magnitude.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Calendar.Component.Magnitude.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v14 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Calendar.Component.Magnitude.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys, (uint64_t)&unk_25060CD78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v14;
    KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a2 < *a1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.Component.Magnitude()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Component.Magnitude@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Calendar.Component.Magnitude.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.Component.Magnitude(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys, (uint64_t)&unk_25060CD78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Duration.UnitsFormatStyle.Unit.magnitude.getter@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  double v23;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v24 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v24 - v11, v2, v4, v10);
  static Duration.UnitsFormatStyle.Unit.weeks.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, v5, MEMORY[0x24BDD0A68]);
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v4);
  if ((v5 & 1) != 0)
    goto LABEL_11;
  static Duration.UnitsFormatStyle.Unit.days.getter();
  v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v8, v4);
  if ((v14 & 1) != 0)
    goto LABEL_11;
  static Duration.UnitsFormatStyle.Unit.hours.getter();
  v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v8, v4);
  if ((v15 & 1) != 0)
    goto LABEL_11;
  static Duration.UnitsFormatStyle.Unit.minutes.getter();
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v8, v4);
  if ((v16 & 1) != 0)
    goto LABEL_11;
  static Duration.UnitsFormatStyle.Unit.seconds.getter();
  v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v8, v4);
  if ((v17 & 1) != 0
    || (static Duration.UnitsFormatStyle.Unit.milliseconds.getter(),
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v13(v8, v4),
        (v18 & 1) != 0)
    || (static Duration.UnitsFormatStyle.Unit.microseconds.getter(),
        v19 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v13(v8, v4),
        (v19 & 1) != 0))
  {
LABEL_11:
    v13(v12, v4);
LABEL_13:
    result = Duration.components.getter();
    v23 = (double)v22 * 1.0e-18 + (double)result;
    goto LABEL_14;
  }
  static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
  if ((v20 & 1) != 0)
    goto LABEL_13;
  if (one-time initialization token for max != -1)
    result = swift_once();
  v23 = *(double *)&static Calendar.Component.Magnitude.max;
LABEL_14:
  *a1 = v23;
  return result;
}

BOOL String.isBeginningOfSentence(pattern:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFString *v7;
  __CFString *v8;
  const __CFLocale *isa;
  _BOOL8 isBeginningOfSentence;

  v7 = (__CFString *)MEMORY[0x23B7C5DAC](a4, a5);
  v8 = (__CFString *)MEMORY[0x23B7C5DAC](a1, a2);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  isBeginningOfSentence = _isBeginningOfSentence(v7, v8, isa);

  return isBeginningOfSentence;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = type metadata accessor for Calendar.Component();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v33 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _SetStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], &lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
    v9 = static _SetStorage.allocate(capacity:)();
    v10 = 0;
    v32 = v9 + 56;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v29 = v8;
    v30 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v31 = v10;
      v13(v33, v30 + v12 * v10, v2);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2A8]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v9 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v13(v5, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], MEMORY[0x24BDCF2C0]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v33, v2);
            v3 = v21;
            v8 = v29;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v8 = v29;
      }
      v23 = v33;
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v23, v2);
      v25 = *(_QWORD *)(v9 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v9 + 16) = v27;
LABEL_4:
      v10 = v31 + 1;
      if (v31 + 1 == v8)
        return v9;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v33 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6E0]);
    v9 = static _SetStorage.allocate(capacity:)();
    v10 = 0;
    v32 = v9 + 56;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v29 = v8;
    v30 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v31 = v10;
      v13(v33, v30 + v12 * v10, v2);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v9 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v13(v5, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v33, v2);
            v3 = v21;
            v8 = v29;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v8 = v29;
      }
      v23 = v33;
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v23, v2);
      v25 = *(_QWORD *)(v9 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v9 + 16) = v27;
LABEL_4:
      v10 = v31 + 1;
      if (v31 + 1 == v8)
        return v9;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v33 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x24BDD0A60]);
    v9 = static _SetStorage.allocate(capacity:)();
    v10 = 0;
    v32 = v9 + 56;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v29 = v8;
    v30 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v31 = v10;
      v13(v33, v30 + v12 * v10, v2);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], MEMORY[0x24BDD0A60]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v9 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v13(v5, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], MEMORY[0x24BDD0A68]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v33, v2);
            v3 = v21;
            v8 = v29;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v8 = v29;
      }
      v23 = v33;
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v23, v2);
      v25 = *(_QWORD *)(v9 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v9 + 16) = v27;
LABEL_4:
      v10 = v31 + 1;
      if (v31 + 1 == v8)
        return v9;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _SetStorage<NSURLResourceKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      v7 = v6;
      String.hash(into:)();
      v8 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
            goto LABEL_3;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B08];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _SetStorage<DefaultDescriptionAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute, (uint64_t)&type metadata for DefaultDescriptionAttribute, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v3 = static _SetStorage.allocate(capacity:)();
  v4 = 0;
  v5 = v3 + 56;
  v17 = v1;
  do
  {
    v6 = *(_BYTE *)(a1 + 32 + v4);
    Hasher.init(_seed:)();
    DefaultDescriptionAttribute.rawValue.getter();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v7 = Hasher._finalize()();
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    v9 = v7 & v8;
    v10 = (v7 & (unint64_t)v8) >> 6;
    v11 = *(_QWORD *)(v5 + 8 * v10);
    v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
      __asm { BR              X9 }
    *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v9) = v6;
    v13 = *(_QWORD *)(v3 + 16);
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
    {
      __break(1u);
      JUMPOUT(0x234CC61C4);
    }
    *(_QWORD *)(v3 + 16) = v15;
    ++v4;
  }
  while (v4 != v17);
  return v3;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int64_t v37;

  v5 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - v11;
  v13 = *(_QWORD *)(a1 + 56);
  v34 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v37 = (unint64_t)(v14 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v37)
      goto LABEL_33;
    v22 = *(_QWORD *)(v34 + 8 * v18);
    if (!v22)
      break;
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v6 + 72) * v20, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
    {
      swift_release();
      return (uint64_t)v33;
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    closure #1 in NSCalendarUnit.init(_:)((uint64_t)v8, a2, (uint64_t)&v35);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v28 = v33;
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v36 & 1) == 0)
    {
      v32 = v35;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        v33 = (_QWORD *)result;
      }
      v25 = v33[2];
      v24 = v33[3];
      v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        v30 = v33[2];
        v31 = v25 + 1;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v33);
        v25 = v30;
        v26 = v31;
        v33 = (_QWORD *)result;
      }
      v27 = v33;
      v33[2] = v26;
      v27[v25 + 4] = v32;
    }
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v37)
    goto LABEL_33;
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 2;
  if (v18 + 2 >= v37)
    goto LABEL_33;
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 3;
  if (v18 + 3 >= v37)
    goto LABEL_33;
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 4;
  if (v18 + 4 >= v37)
  {
LABEL_33:
    v28 = v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v5);
LABEL_34:
    swift_release();
    return (uint64_t)v28;
  }
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v37)
      goto LABEL_33;
    v22 = *(_QWORD *)(v34 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set<>.init(_:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  result = MEMORY[0x24BEE4B08];
  v15 = MEMORY[0x24BEE4B08];
  if ((a2 & 1) == 0)
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)((char *)&outlined read-only object #0 of Set<>.init(_:) + v12 + 32);
      if ((v13 & ~a1) == 0)
      {
        if (v13 <= 63)
        {
          switch(v13)
          {
            case 4:
              static Date.ComponentsFormatStyle.Style.wide.getter();
              goto LABEL_4;
            case 8:
              static Date.ComponentsFormatStyle.Style.narrow.getter();
              goto LABEL_4;
            case 16:
              static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
              goto LABEL_4;
            case 32:
              static Date.ComponentsFormatStyle.Style.spellOut.getter();
              goto LABEL_4;
            default:
              goto LABEL_5;
          }
          goto LABEL_5;
        }
        if (v13 > 4095)
        {
          if (v13 != 4096 && v13 != 0x2000)
            goto LABEL_5;
          static Date.ComponentsFormatStyle.Style.abbreviated.getter();
        }
        else if (v13 == 64)
        {
          static Date.ComponentsFormatStyle.Field.minute.getter();
        }
        else
        {
          if (v13 != 128)
            goto LABEL_5;
          static Date.ComponentsFormatStyle.Field.second.getter();
        }
LABEL_4:
        specialized Set._Variant.insert(_:)((uint64_t)v10, v7);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
LABEL_5:
      v12 += 8;
      if (v12 == 64)
        return v15;
    }
  }
  return result;
}

uint64_t outlined destroy of URLResourceValues?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URLResourceValues?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC818], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("ݞ<\x1B<U\v", &unk_25060CD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("՞<\x1BdU\v", &unk_25060CD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Calendar.Component.Magnitude.CodingKeys, &unk_25060CD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Calendar.Component.Magnitude.CodingKeys, &unk_25060CD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Calendar.Component.Magnitude, &type metadata for Calendar.Component.Magnitude);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude);
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.Component.Magnitude()
{
  return &type metadata for Calendar.Component.Magnitude;
}

uint64_t storeEnumTagSinglePayload for Calendar.Component.Magnitude.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234CC5828 + 4 * byte_235295DBD[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234CC5848 + 4 * byte_235295DC2[v4]))();
}

_BYTE *sub_234CC5828(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234CC5848(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234CC5850(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234CC5858(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234CC5860(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234CC5868(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Calendar.Component.Magnitude.CodingKeys()
{
  return &unk_25060CD78;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _SetStorage<TouchType>, (uint64_t (*)(void))lazy protocol witness table accessor for type TouchType and conformance TouchType, (uint64_t)&type metadata for TouchType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

unint64_t lazy protocol witness table accessor for type TouchType and conformance TouchType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchType and conformance TouchType;
  if (!lazy protocol witness table cache variable for type TouchType and conformance TouchType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TouchType, &type metadata for TouchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchType and conformance TouchType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchType and conformance TouchType;
  if (!lazy protocol witness table cache variable for type TouchType and conformance TouchType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TouchType, &type metadata for TouchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchType and conformance TouchType);
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewBuilder()
{
  return &type metadata for ViewBuilder;
}

uint64_t static ViewBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t static ViewBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for _ConditionalContent.Storage(0, a2, a3, a4);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))((char *)&v15 - v12, a1, a2, v11);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)((uint64_t)v13, a2, a3, a4, a5);
}

uint64_t static ViewBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for _ConditionalContent.Storage(0, a2, a3, a4);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 16))((char *)&v15 - v12, a1, a3, v11);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)((uint64_t)v13, a2, a3, a4, a5);
}

uint64_t static ViewBuilder.buildIf<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t EnvironmentObject.Wrapper.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  swift_unknownObjectRetain();
  swift_retain();
  return Binding.init<A>(_:keyPath:isolation:)(a2, a1, 0, 0, a3);
}

uint64_t EnvironmentObject.wrappedValue.getter(uint64_t a1)
{
  specialized EnvironmentObject.wrappedValue.getter(a1);
  return swift_unknownObjectRetain();
}

void EnvironmentObject.error()()
{
  specialized EnvironmentObject.error()();
}

uint64_t EnvironmentObject._store.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*EnvironmentObject._store.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentObject._seed.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t EnvironmentObject._seed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*EnvironmentObject._seed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentObject.projectedValue.getter(uint64_t a1)
{
  if (!a1)
    specialized EnvironmentObject.error()();
  return swift_unknownObjectRetain();
}

uint64_t EnvironmentObject.init()()
{
  return 0;
}

uint64_t static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance EnvironmentObject<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16), a5, *(_QWORD *)(a6 + 24));
}

uint64_t static EnvironmentObject._propertyBehaviors.getter()
{
  return 2;
}

uint64_t View.environmentObject<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *KeyPath;
  _QWORD v11[2];

  EnvironmentObjectKey.init()(a3);
  v11[1] = a5;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v11[0] = a1;
  swift_unknownObjectRetain();
  View.environment<A>(_:_:)(KeyPath, (uint64_t)v11, a2, a4);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t static ObservableObject.environmentStore.getter(uint64_t a1)
{
  EnvironmentObjectKey.init()(a1);
  return swift_getKeyPath();
}

uint64_t StoreBox.reset()()
{
  uint64_t v0;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 40) = 0;
  return result;
}

uint64_t StoreBox.update(property:phase:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  _QWORD *Value;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD);
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[4];
  _QWORD v33[3];
  char v34;

  v4 = v3;
  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 40);
  Value = (_QWORD *)AGGraphGetValue();
  v12 = Value[1];
  v33[1] = *Value;
  v33[2] = v12;
  v34 = v11 & 1;
  if (v9 && (v11 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *a1 = v9;
    v13 = v9;
    goto LABEL_11;
  }
  EnvironmentObjectKey.init()(v7);
  v32[0] = v7;
  v32[1] = v6;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  v14 = (void (*)(_QWORD *, _QWORD))swift_readAtKeyPath();
  v13 = *v15;
  swift_unknownObjectRetain();
  v14(v32, 0);
  swift_release();
  swift_unknownObjectRelease();
  *a1 = v13;
  if (!v9)
  {
    if (v13)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (v13 && v9 == v13)
LABEL_9:
    v34 = 0;
  if (!v13)
    goto LABEL_26;
LABEL_11:
  v16 = one-time initialization token for v6;
  swift_unknownObjectRetain();
  if (v16 != -1)
    swift_once();
  v17 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  v18 = swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    v18 = dyld_program_sdk_at_least();
    if ((v18 & 1) == 0)
    {
LABEL_17:
      v18 = static ObservableObject.hasDefaultPublisher.getter();
      v22 = v18 ^ 1;
      goto LABEL_20;
    }
  }
  else if (static Semantics.forced < v17)
  {
    goto LABEL_17;
  }
  v22 = 0;
LABEL_20:
  v23 = SubscriptionLifetime.isUninitialized.getter(v18, v19, v20, v21);
  if (!v9 || v23 || v13 != v9 || (v22 & 1) != 0)
  {
    v33[0] = v31;
    swift_retain();
    dispatch thunk of ObservableObject.objectWillChange.getter();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v26 = type metadata accessor for AttributeInvalidatingSubscriber(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeInvalidatingSubscriber<A>, v26);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeInvalidatingSubscriber<A>, v26);
    SubscriptionLifetime.subscribe<A>(subscriber:to:)((uint64_t)v33);
  }
  swift_unknownObjectRelease();
LABEL_26:
  if (AGGraphGetWeakValue())
  {
    if ((v27 & 1) != 0)
    {
      v28 = 1;
    }
    else
    {
      v28 = 0;
      if (v34 != 1)
        goto LABEL_34;
    }
  }
  else
  {
    v28 = 0;
    if ((v34 & 1) == 0)
      goto LABEL_34;
  }
  ++*(_QWORD *)(v4 + 32);
LABEL_34:
  a1[1] = *(_QWORD *)(v4 + 32);
  v29 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 40) = v29;
  LOBYTE(v29) = v28 | v34;
  swift_release();
  swift_release();
  return v29 & 1;
}

uint64_t specialized StoreBox.init(host:environment:signal:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = HIDWORD(a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SubscriptionLifetime(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v12 = SubscriptionLifetime.__allocating_init()();
  type metadata accessor for AttributeInvalidatingSubscriber(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  result = specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(a1, a3);
  *(_DWORD *)a4 = a2;
  *(_DWORD *)(a4 + 4) = a3;
  *(_DWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = result;
  *(_QWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  return result;
}

uint64_t specialized static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t Context;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _OWORD v24[3];
  _OWORD v25[3];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  v11 = Attribute.init<A>(body:value:flags:update:)();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v12 = (id)AGSubgraphGetCurrent();
    if (!v12)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v13 = v12;
    v14 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v14 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (!Context)
    __break(1u);
  v16 = Context;
  swift_retain();

  v17 = *(_QWORD *)(a3 + 16);
  swift_beginAccess();
  LODWORD(v17) = *(_DWORD *)(v17 + 16);
  v18 = AGCreateWeakAttribute();
  specialized StoreBox.init(host:environment:signal:)(v16, v17, v18, (uint64_t)v25);
  swift_release();
  v24[0] = v25[0];
  v24[1] = v25[1];
  v24[2] = v25[2];
  v20 = type metadata accessor for StoreBox(0, a4, a6, v19);
  v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StoreBox<A>, v20);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v24, a2, v20, v21);
  if (AGSubgraphShouldRecordTree())
  {
    type metadata accessor for EnvironmentObject(0, a4, a6, v22);
    LODWORD(v24[0]) = 2;
    static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(v11, a4, a5, a2);
  }
  return outlined release of StoreBox<A>((uint64_t)v25);
}

void specialized EnvironmentObject.error()()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(117);
  v0._object = (void *)0x80000002352E1C30;
  v0._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0xD000000000000029;
  v2._object = (void *)0x80000002352DF710;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0xD00000000000002CLL;
  v4._object = (void *)0x80000002352DF740;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized EnvironmentObject.wrappedValue.getter(uint64_t result)
{
  if (!result)
    specialized EnvironmentObject.error()();
  return result;
}

uint64_t sub_234CC71BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = specialized EnvironmentValues.subscript.getter(*(_QWORD *)(a2 + a1 - 16), a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_234CC7204()
{
  return 16;
}

uint64_t sub_234CC7210()
{
  return 1;
}

Swift::Int sub_234CC7218(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(_QWORD *)(a2 + a1 - 16));
}

__n128 sub_234CC7224(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for EnvironmentObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EnvironmentObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for EnvironmentObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentObject(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentObject(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for EnvironmentObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentObject);
}

uint64_t type metadata accessor for EnvironmentObject.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentObject.Wrapper);
}

uint64_t sub_234CC73B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = *a1;
  v2 = a1[2];
  v3 = type metadata accessor for Optional();
  v6 = type metadata accessor for _EnvironmentKeyWritingModifier(255, v3, v4, v5);
  v8 = type metadata accessor for ModifiedContent(255, v1, v6, v7);
  v10[0] = v2;
  v10[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for External<()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<()>)
  {
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<()>);
  }
}

unint64_t lazy protocol witness table accessor for type External<()> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<()> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<()> and conformance External<A>)
  {
    type metadata accessor for External<()>();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<()> and conformance External<A>);
  }
  return result;
}

uint64_t type metadata accessor for StoreBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoreBox);
}

uint64_t outlined release of StoreBox<A>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t destroy for StoreBox()
{
  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for StoreBox(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StoreBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for StoreBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_unknownObjectRelease();
  return a1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in StoreBox<A>()
{
  return &protocol witness table for EnvironmentObject<A>;
}

uint64_t View.mask<A>(alignment:_:)(uint64_t a1, uint64_t a2, void (*a3)(double), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a7;
  v24 = a2;
  v25 = a5;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _MaskAlignmentEffect(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - v19;
  a3(v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[*(int *)(v16 + 36)], v12, a6);
  v22 = v24;
  v21 = v25;
  *(_QWORD *)v20 = a1;
  *((_QWORD *)v20 + 1) = v22;
  View.modifier<A>(_:)(v20, v21, v16, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t type metadata accessor for _MaskAlignmentEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MaskAlignmentEffect);
}

uint64_t _MaskAlignmentEffect.init(alignment:mask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t result;

  v11 = type metadata accessor for _MaskAlignmentEffect(0, a4, a5, a4);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a6[*(int *)(v11 + 36)], a3, a4);
  *(_QWORD *)a6 = a1;
  *((_QWORD *)a6 + 1) = a2;
  return result;
}

uint64_t _MaskAlignmentEffect.alignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _MaskAlignmentEffect.alignment.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*_MaskAlignmentEffect.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _MaskAlignmentEffect.mask.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t _MaskAlignmentEffect.mask.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*_MaskAlignmentEffect.mask.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _MaskAlignmentEffect._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v9 = *a1;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)&v23 = *(_QWORD *)a2;
  DWORD2(v23) = v10;
  v24 = v11;
  v25 = *(_OWORD *)(a2 + 24);
  v26 = *(_OWORD *)(a2 + 40);
  v27 = *(_OWORD *)(a2 + 56);
  v28 = *(_QWORD *)(a2 + 72);
  v29 = v12;
  v18 = a5;
  v19 = a6;
  v20 = v9;
  v21 = v9;
  v13 = type metadata accessor for _MaskAlignmentEffect(255, a5, a6, a4);
  type metadata accessor for _GraphValue(0, v13, v14, v15);
  swift_retain();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:), (uint64_t)&type metadata for Alignment, &v22);
  LOBYTE(v21) = 0;
  return specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(&v23, (void (*)(uint64_t *__return_ptr, __int128 *))partial apply for makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:), (uint64_t)v17, 0, 1, v22, a3, a7);
}

uint64_t closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for _MaskAlignmentEffect(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  return v11[5];
}

uint64_t closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for _MaskAlignmentEffect(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v8, (uint64_t)&type metadata for Alignment, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v8[5];
}

uint64_t specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)@<X0>(__int128 *a1@<X0>, void (*a2)(uint64_t *__return_ptr, __int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, void (*a7)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X6>, _QWORD *a8@<X8>)
{
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  int v33;
  unsigned int v34;
  uint64_t KeyPath;
  int v36;
  __int128 v37;
  uint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::UInt32 v77;
  void (*v78)(__int128 *, _QWORD);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  int v112;
  int v114;
  __int16 v117;
  char v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  Swift::UInt32 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 v150;
  unsigned int v151;
  unsigned __int8 v152;
  unsigned int v153;
  unsigned __int8 v154;
  __int128 v155;
  _OWORD v156[2];
  _OWORD v157[2];
  int v158;
  __int128 v159;
  _OWORD v160[2];
  _OWORD v161[2];
  int v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  int v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  int v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;

  v118 = a4;
  v178 = *MEMORY[0x24BDAC8D0];
  v10 = a1[3];
  v171 = a1[2];
  v172 = v10;
  v173 = a1[4];
  v174 = *((_DWORD *)a1 + 20);
  v11 = a1[1];
  v169 = *a1;
  v170 = v11;
  v12 = v10;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (uint64_t)a2, a3, a4);
  v14 = *(_QWORD *)(v12 + 16);
  v110 = v13;
  if (v14)
  {
    v15 = (uint64_t *)(v12 + 32);
    v16 = v14 - 1;
    do
    {
      v17 = *v15;
      v15 += 2;
      v18 = v17 == v13;
    }
    while (v17 != v13 && v16-- != 0);
  }
  else
  {
    v18 = 0;
  }
  v20 = a1[2];
  v21 = a1[3];
  v22 = a1[1];
  v175 = *a1;
  v176 = v22;
  v177 = v20;
  v23 = DWORD1(v20);
  v165 = v20;
  v166 = v21;
  v167 = a1[4];
  v168 = *((_DWORD *)a1 + 20);
  v163 = v175;
  v164 = v22;
  outlined retain of _ViewInputs((uint64_t)&v169);
  if ((v23 & 0x100) != 0)
    specialized _GraphInputs.pushScope<A>(id:)(0);
  v117 = v23;
  if ((v23 & 0x20) == 0)
  {
    v24 = DWORD1(v165);
    v25 = v167;
    LODWORD(v26) = DWORD1(v167);
    v27 = DWORD2(v167);
    goto LABEL_30;
  }
  DWORD1(v165) = v23 | 2;
  v28 = v176;
  swift_beginAccess();
  v29 = DWORD2(v169);
  v131 = v170;
  v134 = v169;
  v30 = DWORD2(v170);
  v31 = v171;
  v32 = v172;
  v123 = *((_QWORD *)&v173 + 1);
  v126 = v173;
  v33 = v174;
  v160[1] = v171;
  v161[0] = v172;
  v161[1] = v173;
  v162 = v174;
  v159 = v169;
  v160[0] = v170;
  outlined retain of _ViewInputs((uint64_t)&v169);
  v34 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v36 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v28 + 81) & 1) != 0
    || (_DWORD)v126 != *(_DWORD *)(v28 + 32)
    || (_DWORD)v123 != *(_DWORD *)(v28 + 36)
    || v36 != *(_DWORD *)(v28 + 40)
    || v29 != *(_DWORD *)(v28 + 44)
    || v34 != *(_DWORD *)(v28 + 48)
    || v30 != *(_DWORD *)(v28 + 52))
  {
    *(_QWORD *)&v159 = v134;
    DWORD2(v159) = v29;
    *(_QWORD *)&v160[0] = v131;
    *((_QWORD *)&v160[0] + 1) = __PAIR64__(v34, v30);
    v160[1] = v31;
    v161[0] = v32;
    *(_QWORD *)&v161[1] = v126;
    *((_QWORD *)&v161[1] + 1) = v123;
    v162 = v33;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v159, v36, (uint64_t)&v155);
    v37 = v156[0];
    v38 = LOBYTE(v156[1]);
    v39 = v157[0];
    v40 = LOBYTE(v156[1]) | ((unint64_t)DWORD1(v156[1]) << 32);
    v41 = BYTE8(v156[1]) | ((unint64_t)HIDWORD(v156[1]) << 32);
    *(_OWORD *)(v28 + 32) = v155;
    *(_OWORD *)(v28 + 48) = v37;
    *(_QWORD *)(v28 + 64) = v40;
    *(_QWORD *)(v28 + 72) = v41;
    *(_WORD *)(v28 + 80) = v39;
    if (v38 != 1)
    {
      v26 = HIDWORD(*((_QWORD *)&v37 + 1));
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  if ((*(_BYTE *)(v28 + 64) & 1) != 0)
  {
LABEL_24:
    LODWORD(v26) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v28 + 60) = v26;
    *(_BYTE *)(v28 + 64) = 0;
    goto LABEL_26;
  }
  LODWORD(v26) = *(_DWORD *)(v28 + 60);
LABEL_26:
  v24 = v23 | 2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  DWORD1(v167) = v26;
  v42 = swift_getKeyPath();
  outlined retain of _GraphInputs((uint64_t)&v175);
  v43 = specialized CachedEnvironment.attribute<A>(keyPath:)(v42);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v175);
  swift_release();
  v44 = *MEMORY[0x24BE096C0];
  if ((a6 & 0x100000000) != 0)
    v45 = *MEMORY[0x24BE096C0];
  else
    v45 = a6;
  v46 = v167;
  v47 = DWORD2(v167);
  *(_QWORD *)&v159 = __PAIR64__(v43, v45);
  *((_QWORD *)&v159 + 1) = __PAIR64__(DWORD2(v167), v167);
  LODWORD(v160[0]) = v44;
  DWORD1(v160[0]) = v44;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  v27 = v47;
  v25 = v46;
LABEL_30:
  v48 = v163;
  v49 = v164;
  v50 = v165;
  v51 = *((_QWORD *)&v165 + 1);
  v52 = v166;
  *(_QWORD *)&v159 = v163;
  v119 = DWORD2(v163);
  v120 = HIDWORD(v164);
  DWORD2(v159) = DWORD2(v163);
  v160[0] = v164;
  v121 = DWORD2(v164);
  *(_QWORD *)&v160[1] = __PAIR64__(v24, v165);
  *((_QWORD *)&v160[1] + 1) = *((_QWORD *)&v165 + 1);
  v161[0] = v166;
  v127 = HIDWORD(v166);
  v124 = DWORD2(v166);
  v138 = v25;
  *(_QWORD *)&v161[1] = __PAIR64__(v26, v25);
  v141 = v26;
  v135 = v27;
  *((_QWORD *)&v161[1] + 1) = __PAIR64__(HIDWORD(v167), v27);
  v132 = HIDWORD(v167);
  v129 = v168;
  v162 = v168;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53 = v24;
  if ((v24 & 0x100) == 0)
  {
    v54 = v50;
    if ((v23 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  specialized _GraphInputs.pushScope<A>(id:)((_QWORD *)1);
  v54 = v50;
  if ((v23 & 0x20) != 0)
  {
LABEL_32:
    LODWORD(v161[1]) = AGGraphCreateOffsetAttribute2();
    v54 = v50 | 0x18;
    DWORD2(v161[1]) = AGGraphCreateOffsetAttribute2();
    LODWORD(v160[1]) = v50 | 0x18;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v161[0] = MEMORY[0x24BEE4AF8];
  if (v18)
    specialized PreferenceKeys.add<A>(_:)();
  if ((v118 & 1) != 0)
  {
    v55 = v159;
    v56 = DWORD2(v159);
    *(_QWORD *)&v159 = v48;
    DWORD2(v159) = v119;
    v57 = DWORD2(v160[0]);
    v58 = HIDWORD(v160[0]);
    *((_QWORD *)&v160[0] + 1) = __PAIR64__(v120, v121);
    v59 = DWORD1(v160[1]);
    v60 = *((_QWORD *)&v160[1] + 1);
    v61 = *(_QWORD *)&v161[0];
    *((_QWORD *)&v160[1] + 1) = v51;
    *(_QWORD *)&v161[0] = v52;
    v62 = DWORD2(v161[0]);
    v63 = HIDWORD(v161[0]);
    *((_QWORD *)&v161[0] + 1) = __PAIR64__(v127, v124);
    v64 = v161[1];
    v65 = DWORD1(v161[1]);
    *(_QWORD *)&v161[1] = __PAIR64__(v141, v138);
    v66 = DWORD2(v161[1]);
    v67 = HIDWORD(v161[1]);
    *((_QWORD *)&v161[1] + 1) = __PAIR64__(v132, v135);
    v68 = v160[1];
    *(_QWORD *)&v160[1] = __PAIR64__(v53, v50);
    v69 = v162;
    v162 = v129;
    v70 = *(_QWORD *)&v160[0];
    *(_QWORD *)&v163 = v55;
    DWORD2(v163) = v56;
    *(_QWORD *)&v164 = *(_QWORD *)&v160[0];
    *((_QWORD *)&v164 + 1) = __PAIR64__(v58, v57);
    *((_QWORD *)&v165 + 1) = v60;
    *(_QWORD *)&v166 = v61;
    *((_QWORD *)&v166 + 1) = __PAIR64__(v63, v62);
    v52 = v61;
    *(_QWORD *)&v167 = __PAIR64__(v65, v64);
    v124 = v62;
    v127 = v63;
    v141 = v65;
    *((_QWORD *)&v167 + 1) = __PAIR64__(v67, v66);
    v132 = v67;
    v168 = v69;
    v129 = v69;
    v48 = v55;
    v119 = v56;
    v120 = v58;
    v121 = v57;
    *(_QWORD *)&v165 = __PAIR64__(v59, v68);
    v51 = v60;
    *(_QWORD *)&v160[0] = v49;
    if ((a5 & 1) == 0)
    {
LABEL_37:
      v71 = *(_QWORD *)&v160[0];
      goto LABEL_42;
    }
  }
  else
  {
    v70 = v49;
    v68 = v50;
    v50 = v54;
    v59 = v53;
    v64 = v138;
    v66 = v135;
    if ((a5 & 1) == 0)
      goto LABEL_37;
  }
  v112 = v59;
  v114 = v68;
  v136 = v66;
  v139 = v64;
  v72 = v176;
  swift_beginAccess();
  LODWORD(v155) = *(_DWORD *)(v72 + 16);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  LODWORD(v72) = Attribute.init<A>(body:value:flags:update:)();
  v73 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v71 = swift_allocObject();
  *(_DWORD *)(v71 + 16) = v72;
  *(_QWORD *)(v71 + 24) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v71 + 32) = 0u;
  *(_OWORD *)(v71 + 48) = 0u;
  *(_OWORD *)(v71 + 64) = 0u;
  *(_WORD *)(v71 + 80) = 256;
  *(_QWORD *)(v71 + 88) = v73;
  swift_release();
  *(_QWORD *)&v160[0] = v71;
  if ((v50 & 0x20) == 0)
    LODWORD(v160[1]) = v50 | 0x20;
  v59 = v112;
  v68 = v114;
  v64 = v139;
  v66 = v136;
LABEL_42:
  *(_QWORD *)&v155 = v48;
  DWORD2(v155) = v119;
  *(_QWORD *)&v156[0] = v70;
  *((_QWORD *)&v156[0] + 1) = __PAIR64__(v120, v121);
  *(_QWORD *)&v156[1] = __PAIR64__(v59, v68);
  *((_QWORD *)&v156[1] + 1) = v51;
  *(_QWORD *)&v157[0] = v52;
  *((_QWORD *)&v157[0] + 1) = __PAIR64__(v127, v124);
  *(_QWORD *)&v157[1] = __PAIR64__(v141, v64);
  *((_QWORD *)&v157[1] + 1) = __PAIR64__(v132, v66);
  v158 = v129;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(&v145, &v155);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)&v155 = v159;
  DWORD2(v155) = DWORD2(v159);
  *(_OWORD *)((char *)v156 + 8) = *(_OWORD *)((char *)v160 + 8);
  *(_QWORD *)&v156[0] = v71;
  *((_QWORD *)&v156[1] + 1) = *((_QWORD *)&v160[1] + 1);
  *(_QWORD *)&v157[0] = *(_QWORD *)&v161[0];
  *(_OWORD *)((char *)v157 + 8) = *(_OWORD *)((char *)v161 + 8);
  *((_QWORD *)&v157[1] + 1) = *((_QWORD *)&v161[1] + 1);
  v158 = v162;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v74 = swift_bridgeObjectRetain();
  a7(&v143, v74, &v155);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v75 = swift_release();
  if (!v18)
  {
    v81 = 0;
    v82 = v117;
    if ((v118 & 1) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  v77 = ++lastIdentity;
  if ((v117 & 0x100) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v169);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v169);
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
      __break(1u);
    LODWORD(v147) = v77;
    v78 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v147);
    v78(&v155, 0);
  }
  v79 = v176;
  swift_beginAccess();
  v142 = v77;
  if ((v117 & 0x20) == 0)
  {
    LODWORD(v80) = v173;
    goto LABEL_69;
  }
  v130 = v169;
  v87 = DWORD2(v169);
  v128 = v170;
  v88 = DWORD2(v170);
  v89 = v171;
  v137 = v172;
  v140 = *((_QWORD *)&v171 + 1);
  v90 = *((_QWORD *)&v172 + 1);
  v122 = *((_QWORD *)&v173 + 1);
  v125 = v173;
  v91 = v174;
  v156[1] = v171;
  v157[0] = v172;
  v157[1] = v173;
  v158 = v174;
  v155 = v169;
  v156[0] = v170;
  outlined retain of _ViewInputs((uint64_t)&v169);
  v92 = _ViewInputs.geometryTransaction()();
  v93 = swift_getKeyPath();
  v133 = specialized CachedEnvironment.attribute<A>(keyPath:)(v93);
  swift_release();
  if ((*(_BYTE *)(v79 + 81) & 1) != 0
    || (_DWORD)v125 != *(_DWORD *)(v79 + 32)
    || (_DWORD)v122 != *(_DWORD *)(v79 + 36)
    || v133 != *(_DWORD *)(v79 + 40)
    || v87 != *(_DWORD *)(v79 + 44)
    || v92 != *(_DWORD *)(v79 + 48)
    || v88 != *(_DWORD *)(v79 + 52))
  {
    *(_QWORD *)&v155 = v130;
    DWORD2(v155) = v87;
    *(_QWORD *)&v156[0] = v128;
    *((_QWORD *)&v156[0] + 1) = __PAIR64__(v92, v88);
    *(_QWORD *)&v156[1] = v89;
    *((_QWORD *)&v156[1] + 1) = v140;
    *(_QWORD *)&v157[0] = v137;
    *((_QWORD *)&v157[0] + 1) = v90;
    *(_QWORD *)&v157[1] = v125;
    *((_QWORD *)&v157[1] + 1) = v122;
    v158 = v91;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v155, v133, (uint64_t)&v147);
    v95 = v148;
    v94 = v149;
    v96 = v150;
    v97 = v154;
    v98 = v150 | ((unint64_t)v151 << 32);
    v99 = v152 | ((unint64_t)v153 << 32);
    *(_OWORD *)(v79 + 32) = v147;
    *(_QWORD *)(v79 + 48) = v95;
    *(_QWORD *)(v79 + 56) = v94;
    *(_QWORD *)(v79 + 64) = v98;
    *(_QWORD *)(v79 + 72) = v99;
    *(_WORD *)(v79 + 80) = v97;
    if (v96 != 1)
    {
      v80 = HIDWORD(v94);
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if ((*(_BYTE *)(v79 + 64) & 1) != 0)
  {
LABEL_66:
    LODWORD(v80) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v79 + 60) = v80;
    *(_BYTE *)(v79 + 64) = 0;
    goto LABEL_68;
  }
  LODWORD(v80) = *(_DWORD *)(v79 + 60);
LABEL_68:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
LABEL_69:
  v156[1] = v171;
  v157[0] = v172;
  v157[1] = v173;
  v158 = v174;
  v155 = v169;
  v156[0] = v170;
  v100 = CachedEnvironment.animatedCGSize(for:)((uint64_t *)&v155);
  swift_endAccess();
  *(_QWORD *)&v155 = v145;
  DWORD2(v155) = v146;
  v101 = PreferencesOutputs.subscript.getter(v110);
  v102 = *MEMORY[0x24BE096C0];
  if ((v101 & 0x100000000) != 0)
    v103 = *MEMORY[0x24BE096C0];
  else
    v103 = v101;
  *(_QWORD *)&v155 = v143;
  DWORD2(v155) = v144;
  v104 = PreferencesOutputs.subscript.getter(v110);
  if ((v104 & 0x100000000) != 0)
    v105 = v102;
  else
    v105 = v104;
  v106 = v175;
  *(_QWORD *)&v147 = v175;
  outlined retain of _ViewInputs((uint64_t)&v169);
  outlined retain of _GraphInputs((uint64_t)&v175);
  outlined retain of ViewTransform((uint64_t)&v147);
  v107 = specialized find<A>(_:key:)(v106);
  if (v107)
    v108 = *(_BYTE *)(v107 + 72);
  else
    v108 = 0;
  v109 = DWORD1(v173);
  outlined release of ViewTransform((uint64_t)&v147);
  outlined release of _GraphInputs((uint64_t)&v175);
  outlined release of _ViewInputs((uint64_t)&v169);
  *(_QWORD *)&v155 = __PAIR64__(v80, v142);
  *((_QWORD *)&v155 + 1) = __PAIR64__(v109, v100);
  *(_QWORD *)&v156[0] = __PAIR64__(v105, v103);
  BYTE8(v156[0]) = v108;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList();
  v75 = Attribute.init<A>(body:value:flags:update:)();
  v81 = v75;
  v82 = v117;
  if ((v118 & 1) != 0)
  {
LABEL_49:
    v83 = v145;
    v145 = v143;
    v143 = v83;
    v84 = v146;
    v146 = v144;
    v144 = v84;
  }
LABEL_50:
  if ((v82 & 0x20) != 0)
  {
    MEMORY[0x24BDAC7A8](v75);
    MEMORY[0x24BDAC7A8](v86);
    AGGraphMutateAttribute();
    if (!v18)
      goto LABEL_53;
    goto LABEL_52;
  }
  if (v18)
  {
LABEL_52:
    LOBYTE(v155) = !v18;
    PreferencesOutputs.subscript.setter(v81 | ((unint64_t)!v18 << 32), v110, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v76);
  }
LABEL_53:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a8 = v145;
  a8[1] = v146;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  unsigned int v35;
  uint64_t KeyPath;
  int v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::UInt32 v78;
  char v79;
  void (*v80)(__int128 *, _QWORD);
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  int v88;
  unsigned int v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  int v114;
  int v116;
  __int16 v119;
  char v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  Swift::UInt32 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int8 v151;
  unsigned int v152;
  unsigned __int8 v153;
  unsigned int v154;
  unsigned __int8 v155;
  __int128 v156;
  _OWORD v157[2];
  _OWORD v158[2];
  int v159;
  __int128 v160;
  _OWORD v161[2];
  _OWORD v162[2];
  int v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  int v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  int v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;

  v120 = a4;
  v179 = *MEMORY[0x24BDAC8D0];
  v10 = a1[3];
  v172 = a1[2];
  v173 = v10;
  v174 = a1[4];
  v175 = *((_DWORD *)a1 + 20);
  v11 = a1[1];
  v170 = *a1;
  v171 = v11;
  v12 = v10;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (uint64_t)a2, a3, a4);
  v14 = *(_QWORD *)(v12 + 16);
  v112 = v13;
  if (v14)
  {
    v15 = (uint64_t *)(v12 + 32);
    v16 = v14 - 1;
    do
    {
      v17 = *v15;
      v15 += 2;
      v18 = v17 == v13;
    }
    while (v17 != v13 && v16-- != 0);
  }
  else
  {
    v18 = 0;
  }
  v20 = a1[2];
  v21 = a1[3];
  v22 = a1[1];
  v176 = *a1;
  v177 = v22;
  v178 = v20;
  v23 = DWORD1(v20);
  v166 = v20;
  v167 = v21;
  v168 = a1[4];
  v169 = *((_DWORD *)a1 + 20);
  v164 = v176;
  v165 = v22;
  outlined retain of _ViewInputs((uint64_t)&v170);
  if ((v23 & 0x100) != 0)
  {
    specialized _GraphInputs.pushScope<A>(id:)(0);
    v119 = v23;
    if ((v23 & 0x20) == 0)
      goto LABEL_12;
  }
  else
  {
    v119 = v23;
    if ((v23 & 0x20) == 0)
    {
LABEL_12:
      v24 = DWORD1(v166);
      v25 = v168;
      LODWORD(v26) = DWORD1(v168);
      v27 = DWORD2(v168);
      goto LABEL_29;
    }
  }
  v141 = a6;
  DWORD1(v166) = v23 | 2;
  v28 = v177;
  swift_beginAccess();
  v29 = DWORD2(v170);
  v133 = v171;
  v137 = v170;
  v30 = DWORD2(v171);
  v31 = v172;
  v128 = v173;
  v130 = *((_QWORD *)&v172 + 1);
  v32 = *((_QWORD *)&v173 + 1);
  v33 = v174;
  v34 = v175;
  v161[1] = v172;
  v162[0] = v173;
  v162[1] = v174;
  v163 = v175;
  v160 = v170;
  v161[0] = v171;
  outlined retain of _ViewInputs((uint64_t)&v170);
  v35 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v37 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v28 + 81) & 1) != 0
    || (_DWORD)v33 != *(_DWORD *)(v28 + 32)
    || __PAIR64__(v37, DWORD2(v33)) != *(_QWORD *)(v28 + 36)
    || v29 != *(_DWORD *)(v28 + 44)
    || v35 != *(_DWORD *)(v28 + 48)
    || v30 != *(_DWORD *)(v28 + 52))
  {
    *(_QWORD *)&v160 = v137;
    DWORD2(v160) = v29;
    *(_QWORD *)&v161[0] = v133;
    *((_QWORD *)&v161[0] + 1) = __PAIR64__(v35, v30);
    *(_QWORD *)&v161[1] = v31;
    *((_QWORD *)&v161[1] + 1) = v130;
    *(_QWORD *)&v162[0] = v128;
    *((_QWORD *)&v162[0] + 1) = v32;
    v162[1] = v33;
    v163 = v34;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v37, (uint64_t)&v156);
    v38 = v157[0];
    v39 = LOBYTE(v157[1]);
    v40 = v158[0];
    v41 = LOBYTE(v157[1]) | ((unint64_t)DWORD1(v157[1]) << 32);
    v42 = BYTE8(v157[1]) | ((unint64_t)HIDWORD(v157[1]) << 32);
    *(_OWORD *)(v28 + 32) = v156;
    *(_OWORD *)(v28 + 48) = v38;
    *(_QWORD *)(v28 + 64) = v41;
    *(_QWORD *)(v28 + 72) = v42;
    *(_WORD *)(v28 + 80) = v40;
    if (v39 != 1)
    {
      v26 = HIDWORD(*((_QWORD *)&v38 + 1));
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if ((*(_BYTE *)(v28 + 64) & 1) != 0)
  {
LABEL_23:
    LODWORD(v26) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v28 + 60) = v26;
    *(_BYTE *)(v28 + 64) = 0;
    goto LABEL_25;
  }
  LODWORD(v26) = *(_DWORD *)(v28 + 60);
LABEL_25:
  v24 = v23 | 2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  DWORD1(v168) = v26;
  v43 = swift_getKeyPath();
  outlined retain of _GraphInputs((uint64_t)&v176);
  v44 = specialized CachedEnvironment.attribute<A>(keyPath:)(v43);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v176);
  swift_release();
  v45 = *MEMORY[0x24BE096C0];
  if ((v141 & 0x100000000) != 0)
    v46 = *MEMORY[0x24BE096C0];
  else
    v46 = v141;
  v47 = v168;
  v48 = DWORD2(v168);
  *(_QWORD *)&v160 = __PAIR64__(v44, v46);
  *((_QWORD *)&v160 + 1) = __PAIR64__(DWORD2(v168), v168);
  LODWORD(v161[0]) = v45;
  DWORD1(v161[0]) = v45;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  v27 = v48;
  v25 = v47;
  LOBYTE(v23) = v119;
LABEL_29:
  v49 = v164;
  v50 = v165;
  v51 = v166;
  v52 = *((_QWORD *)&v166 + 1);
  v53 = v167;
  *(_QWORD *)&v160 = v164;
  v121 = DWORD2(v164);
  v122 = HIDWORD(v165);
  DWORD2(v160) = DWORD2(v164);
  v161[0] = v165;
  v123 = DWORD2(v165);
  *(_QWORD *)&v161[1] = __PAIR64__(v24, v166);
  *((_QWORD *)&v161[1] + 1) = *((_QWORD *)&v166 + 1);
  v162[0] = v167;
  v126 = HIDWORD(v167);
  v124 = DWORD2(v167);
  v138 = v25;
  *(_QWORD *)&v162[1] = __PAIR64__(v26, v25);
  v142 = v26;
  v134 = v27;
  *((_QWORD *)&v162[1] + 1) = __PAIR64__(HIDWORD(v168), v27);
  v131 = HIDWORD(v168);
  v129 = v169;
  v163 = v169;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = v24;
  if ((v24 & 0x100) == 0)
  {
    v55 = v51;
    if ((v23 & 0x20) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  specialized _GraphInputs.pushScope<A>(id:)((_QWORD *)1);
  v55 = v51;
  if ((v23 & 0x20) != 0)
  {
LABEL_31:
    LODWORD(v162[1]) = AGGraphCreateOffsetAttribute2();
    v55 = v51 | 0x18;
    DWORD2(v162[1]) = AGGraphCreateOffsetAttribute2();
    LODWORD(v161[1]) = v51 | 0x18;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v162[0] = MEMORY[0x24BEE4AF8];
  if (v18)
    specialized PreferenceKeys.add<A>(_:)();
  if ((v120 & 1) != 0)
  {
    v56 = v160;
    v57 = DWORD2(v160);
    *(_QWORD *)&v160 = v49;
    DWORD2(v160) = v121;
    v58 = DWORD2(v161[0]);
    v59 = HIDWORD(v161[0]);
    *((_QWORD *)&v161[0] + 1) = __PAIR64__(v122, v123);
    v60 = DWORD1(v161[1]);
    v61 = *((_QWORD *)&v161[1] + 1);
    v62 = *(_QWORD *)&v162[0];
    *((_QWORD *)&v161[1] + 1) = v52;
    *(_QWORD *)&v162[0] = v53;
    v63 = DWORD2(v162[0]);
    v64 = HIDWORD(v162[0]);
    *((_QWORD *)&v162[0] + 1) = __PAIR64__(v126, v124);
    v65 = v162[1];
    v66 = DWORD1(v162[1]);
    *(_QWORD *)&v162[1] = __PAIR64__(v142, v138);
    v67 = DWORD2(v162[1]);
    v68 = HIDWORD(v162[1]);
    *((_QWORD *)&v162[1] + 1) = __PAIR64__(v131, v134);
    v69 = v161[1];
    *(_QWORD *)&v161[1] = __PAIR64__(v54, v51);
    v70 = v163;
    v163 = v129;
    v71 = *(_QWORD *)&v161[0];
    *(_QWORD *)&v164 = v56;
    DWORD2(v164) = v57;
    *(_QWORD *)&v165 = *(_QWORD *)&v161[0];
    *((_QWORD *)&v165 + 1) = __PAIR64__(v59, v58);
    *((_QWORD *)&v166 + 1) = v61;
    *(_QWORD *)&v167 = v62;
    *((_QWORD *)&v167 + 1) = __PAIR64__(v64, v63);
    v53 = v62;
    *(_QWORD *)&v168 = __PAIR64__(v66, v65);
    v124 = v63;
    v126 = v64;
    v142 = v66;
    *((_QWORD *)&v168 + 1) = __PAIR64__(v68, v67);
    v131 = v68;
    v169 = v70;
    v129 = v70;
    v49 = v56;
    v121 = v57;
    v122 = v59;
    v123 = v58;
    *(_QWORD *)&v166 = __PAIR64__(v60, v69);
    v52 = v61;
    *(_QWORD *)&v161[0] = v50;
    if ((a5 & 1) == 0)
    {
LABEL_36:
      v72 = *(_QWORD *)&v161[0];
      goto LABEL_41;
    }
  }
  else
  {
    v71 = v50;
    v69 = v51;
    v51 = v55;
    v60 = v54;
    v65 = v138;
    v67 = v134;
    if ((a5 & 1) == 0)
      goto LABEL_36;
  }
  v114 = v60;
  v116 = v69;
  v135 = v67;
  v139 = v65;
  v73 = v177;
  swift_beginAccess();
  LODWORD(v156) = *(_DWORD *)(v73 + 16);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  LODWORD(v73) = Attribute.init<A>(body:value:flags:update:)();
  v74 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v72 = swift_allocObject();
  *(_DWORD *)(v72 + 16) = v73;
  *(_QWORD *)(v72 + 24) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)(v72 + 64) = 0u;
  *(_WORD *)(v72 + 80) = 256;
  *(_QWORD *)(v72 + 88) = v74;
  swift_release();
  *(_QWORD *)&v161[0] = v72;
  if ((v51 & 0x20) == 0)
    LODWORD(v161[1]) = v51 | 0x20;
  v60 = v114;
  v69 = v116;
  v65 = v139;
  v67 = v135;
LABEL_41:
  *(_QWORD *)&v156 = v49;
  DWORD2(v156) = v121;
  *(_QWORD *)&v157[0] = v71;
  *((_QWORD *)&v157[0] + 1) = __PAIR64__(v122, v123);
  *(_QWORD *)&v157[1] = __PAIR64__(v60, v69);
  *((_QWORD *)&v157[1] + 1) = v52;
  *(_QWORD *)&v158[0] = v53;
  *((_QWORD *)&v158[0] + 1) = __PAIR64__(v126, v124);
  *(_QWORD *)&v158[1] = __PAIR64__(v142, v65);
  *((_QWORD *)&v158[1] + 1) = __PAIR64__(v131, v67);
  v159 = v129;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v75 = swift_bridgeObjectRetain();
  a7(&v146, v75, &v156);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)&v156 = v160;
  DWORD2(v156) = DWORD2(v160);
  *(_OWORD *)((char *)v157 + 8) = *(_OWORD *)((char *)v161 + 8);
  *(_QWORD *)&v157[0] = v72;
  *((_QWORD *)&v157[1] + 1) = *((_QWORD *)&v161[1] + 1);
  *(_QWORD *)&v158[0] = *(_QWORD *)&v162[0];
  *(_OWORD *)((char *)v158 + 8) = *(_OWORD *)((char *)v162 + 8);
  *((_QWORD *)&v158[1] + 1) = *((_QWORD *)&v162[1] + 1);
  v159 = v163;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(&v144, &v156);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v76 = swift_release();
  if (!v18)
  {
    v83 = 0;
    v79 = v119;
    if ((v120 & 1) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v78 = ++lastIdentity;
  v79 = v119;
  if ((v119 & 0x100) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v170);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v170);
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
      __break(1u);
    LODWORD(v148) = v78;
    v80 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v148);
    v80(&v156, 0);
  }
  v81 = v177;
  swift_beginAccess();
  v143 = v78;
  if ((v119 & 0x20) == 0)
  {
    LODWORD(v82) = v174;
    goto LABEL_68;
  }
  v88 = DWORD2(v170);
  v89 = DWORD2(v171);
  v90 = v172;
  v132 = v171;
  v136 = v173;
  v140 = v170;
  v91 = *((_QWORD *)&v173 + 1);
  v125 = *((_QWORD *)&v174 + 1);
  v127 = v174;
  v92 = v175;
  v157[1] = v172;
  v158[0] = v173;
  v158[1] = v174;
  v159 = v175;
  v156 = v170;
  v157[0] = v171;
  outlined retain of _ViewInputs((uint64_t)&v170);
  v93 = _ViewInputs.geometryTransaction()();
  v94 = swift_getKeyPath();
  v95 = specialized CachedEnvironment.attribute<A>(keyPath:)(v94);
  swift_release();
  if ((*(_BYTE *)(v81 + 81) & 1) != 0
    || (_DWORD)v127 != *(_DWORD *)(v81 + 32)
    || (_DWORD)v125 != *(_DWORD *)(v81 + 36)
    || v95 != *(_DWORD *)(v81 + 40)
    || v88 != *(_DWORD *)(v81 + 44)
    || v93 != *(_DWORD *)(v81 + 48)
    || v89 != *(_DWORD *)(v81 + 52))
  {
    *(_QWORD *)&v156 = v140;
    DWORD2(v156) = v88;
    *(_QWORD *)&v157[0] = v132;
    *((_QWORD *)&v157[0] + 1) = __PAIR64__(v93, v89);
    v157[1] = v90;
    *(_QWORD *)&v158[0] = v136;
    *((_QWORD *)&v158[0] + 1) = v91;
    *(_QWORD *)&v158[1] = v127;
    *((_QWORD *)&v158[1] + 1) = v125;
    v159 = v92;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v156, v95, (uint64_t)&v148);
    v97 = v149;
    v96 = v150;
    v98 = v151;
    v99 = v155;
    v100 = v151 | ((unint64_t)v152 << 32);
    v101 = v153 | ((unint64_t)v154 << 32);
    *(_OWORD *)(v81 + 32) = v148;
    *(_QWORD *)(v81 + 48) = v97;
    *(_QWORD *)(v81 + 56) = v96;
    *(_QWORD *)(v81 + 64) = v100;
    *(_QWORD *)(v81 + 72) = v101;
    *(_WORD *)(v81 + 80) = v99;
    if (v98 != 1)
    {
      v82 = HIDWORD(v96);
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  if ((*(_BYTE *)(v81 + 64) & 1) != 0)
  {
LABEL_65:
    LODWORD(v82) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v81 + 60) = v82;
    *(_BYTE *)(v81 + 64) = 0;
    goto LABEL_67;
  }
  LODWORD(v82) = *(_DWORD *)(v81 + 60);
LABEL_67:
  v79 = v119;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
LABEL_68:
  v157[1] = v172;
  v158[0] = v173;
  v158[1] = v174;
  v159 = v175;
  v156 = v170;
  v157[0] = v171;
  v102 = CachedEnvironment.animatedCGSize(for:)((uint64_t *)&v156);
  swift_endAccess();
  *(_QWORD *)&v156 = v146;
  DWORD2(v156) = v147;
  v103 = PreferencesOutputs.subscript.getter(v112);
  v104 = *MEMORY[0x24BE096C0];
  if ((v103 & 0x100000000) != 0)
    v105 = *MEMORY[0x24BE096C0];
  else
    v105 = v103;
  *(_QWORD *)&v156 = v144;
  DWORD2(v156) = v145;
  v106 = PreferencesOutputs.subscript.getter(v112);
  if ((v106 & 0x100000000) != 0)
    v107 = v104;
  else
    v107 = v106;
  v108 = v176;
  *(_QWORD *)&v148 = v176;
  outlined retain of _ViewInputs((uint64_t)&v170);
  outlined retain of _GraphInputs((uint64_t)&v176);
  outlined retain of ViewTransform((uint64_t)&v148);
  v109 = specialized find<A>(_:key:)(v108);
  if (v109)
    v110 = *(_BYTE *)(v109 + 72);
  else
    v110 = 0;
  v111 = DWORD1(v174);
  outlined release of ViewTransform((uint64_t)&v148);
  outlined release of _GraphInputs((uint64_t)&v176);
  outlined release of _ViewInputs((uint64_t)&v170);
  *(_QWORD *)&v156 = __PAIR64__(v82, v143);
  *((_QWORD *)&v156 + 1) = __PAIR64__(v111, v102);
  *(_QWORD *)&v157[0] = __PAIR64__(v107, v105);
  BYTE8(v157[0]) = v110;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList();
  v76 = Attribute.init<A>(body:value:flags:update:)();
  v83 = v76;
  if ((v120 & 1) != 0)
  {
LABEL_48:
    v84 = v146;
    v146 = v144;
    v144 = v84;
    v85 = v147;
    v147 = v145;
    v145 = v85;
  }
LABEL_49:
  if ((v79 & 0x20) != 0)
  {
    MEMORY[0x24BDAC7A8](v76);
    MEMORY[0x24BDAC7A8](v87);
    AGGraphMutateAttribute();
    if (!v18)
      goto LABEL_52;
    goto LABEL_51;
  }
  if (v18)
  {
LABEL_51:
    LOBYTE(v156) = !v18;
    PreferencesOutputs.subscript.setter(v83 | ((unint64_t)!v18 << 32), v112, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v77);
  }
LABEL_52:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a8 = v146;
  a8[1] = v147;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _MaskAlignmentEffect, (void (*)(uint64_t))partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:), a2);
}

uint64_t partial apply for closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _MaskAlignmentEffect<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t static _MaskEffect<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> _MaskEffect<A>()
{
  return static _MaskEffect<>.== infix(_:_:)();
}

uint64_t MaskDisplayList.value.getter@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  int v3;
  int v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int8 v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  __int128 v22;
  double v23;
  double v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t Value;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  char v38;
  int v39;
  __int128 v40;
  double v41;
  double v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  unsigned __int8 v49;
  int v50;

  v3 = *v1;
  v5 = v1[4];
  v4 = v1[5];
  v6 = *((_BYTE *)v1 + 24);
  v7 = *MEMORY[0x24BE096C0];
  v8 = MEMORY[0x24BEE4AF8];
  v38 = v6;
  v39 = v3;
  if (v4 == *MEMORY[0x24BE096C0])
  {
    v9 = 0;
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_3;
LABEL_11:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v8;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  Value = AGGraphGetValue();
  v11 = *(_QWORD *)Value;
  v9 = *(_WORD *)(Value + 8);
  v10 = *(_BYTE *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_11;
LABEL_3:
  v37 = a1;
  if (v5 == v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = v8;
    if (*(_QWORD *)(v8 + 16))
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v37 = v8;
    *(_WORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 10) = 0;
    return result;
  }
  v34 = AGGraphGetValue();
  v14 = *(_QWORD *)v34;
  v12 = *(_WORD *)(v34 + 8);
  v13 = *(_BYTE *)(v34 + 10);
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_13;
LABEL_5:
  v15 = (double *)AGGraphGetValue();
  v16 = *v15;
  v17 = v15[1];
  v18 = (double *)AGGraphGetValue();
  v19 = v16 - *v18;
  v20 = v17 - v18[1];
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v11;
  *(_WORD *)(v21 + 24) = v9;
  *(_BYTE *)(v21 + 26) = v10;
  *(_DWORD *)(v21 + 28) = 0;
  type metadata accessor for CGSize(0);
  v41 = v19;
  v42 = v20;
  v22 = *(_OWORD *)AGGraphGetValue();
  ++static DisplayList.Version.lastValue;
  v43 = v22;
  v44 = static DisplayList.Version.lastValue;
  v45 = v21;
  v46 = 0x4000000700000000;
  v47 = v14;
  v49 = v13;
  v48 = v12;
  v50 = v39;
  LOBYTE(v40) = v38;
  DisplayList.Item.canonicalize(options:)((char *)&v40);
  v23 = v41;
  v24 = v42;
  v25 = v43;
  v27 = v44;
  v26 = v45;
  v28 = v46;
  v29 = v47;
  v30 = v48 | (v49 << 16);
  v31 = v50;
  v32 = v46 >> 62;
  if (v46 >> 62 != 3 || (v30 & 0xFFFFFF) != 0 || v46 != 0xC000000000000000 || v47 | v45)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_23527E860;
    *(double *)(v35 + 32) = v23;
    *(double *)(v35 + 40) = v24;
    *(_OWORD *)(v35 + 48) = v25;
    *(_QWORD *)(v35 + 64) = v27;
    *(_QWORD *)(v35 + 72) = v26;
    *(_QWORD *)(v35 + 80) = v28;
    *(_QWORD *)(v35 + 88) = v29;
    *(_BYTE *)(v35 + 98) = BYTE2(v30);
    *(_WORD *)(v35 + 96) = v30;
    *(_DWORD *)(v35 + 100) = v31;
    __asm { BR              X10 }
  }
  *(_QWORD *)v37 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v37 + 8) = 0;
  *(_BYTE *)(v37 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v26, 0xC000000000000000);
}

uint64_t protocol witness for Rule.value.getter in conformance MaskDefaultForeground@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  v4 = one-time initialization token for black;
  swift_retain();
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = static Color.black;
  v6 = one-time initialization token for foreground;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (v5 == (void *)static Color.foreground || ((*(uint64_t (**)(void))(*(_QWORD *)v5 + 88))() & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    swift_retain();
    v7 = (uint64_t)v5;
  }
  specialized EnvironmentValues.subscript.setter(v7);
  swift_release();
  swift_release();
  v8 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v8);
  return swift_release();
}

uint64_t View.mask<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _MaskEffect(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a3);
  View.modifier<A>(_:)(v18, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t type metadata accessor for _MaskEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MaskEffect);
}

uint64_t _MaskEffect.init(mask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t _MaskEffect.mask.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _MaskEffect.mask.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_MaskEffect.mask.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _MaskEffect._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v8 = *a1;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)&v19 = *(_QWORD *)a2;
  DWORD2(v19) = v9;
  v20 = v10;
  v12 = *(_OWORD *)(a2 + 40);
  v21 = *(_OWORD *)(a2 + 24);
  v22 = v12;
  v23 = *(_OWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = v11;
  v15 = a4;
  v16 = a5;
  v17 = v8;
  swift_retain();
  v18 = 1;
  return specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(&v19, (void (*)(uint64_t *__return_ptr, __int128 *))partial apply for makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:), (uint64_t)v14, 0, 1, 0x100000000, a3, a6);
}

uint64_t makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t)@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int ShouldRecordTree;
  void (*v21)(int *, uint64_t *, uint64_t, uint64_t);
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = *((_DWORD *)a1 + 2);
  v12 = a1[2];
  v13 = *((_DWORD *)a1 + 6);
  v31 = *((_DWORD *)a1 + 9);
  v32 = *((_DWORD *)a1 + 8);
  v14 = a1[5];
  v15 = a1[6];
  v29 = *((_DWORD *)a1 + 15);
  v30 = *((_DWORD *)a1 + 14);
  v27 = *((_DWORD *)a1 + 17);
  v28 = *((_DWORD *)a1 + 16);
  v25 = *((_DWORD *)a1 + 19);
  v26 = *((_DWORD *)a1 + 18);
  v23 = *((_DWORD *)a1 + 7);
  v24 = *((_DWORD *)a1 + 20);
  v36 = a3;
  v37 = a4;
  LODWORD(v54) = a2;
  v16 = a5(255, a3, a4);
  type metadata accessor for _GraphValue(0, v16, v17, v18);
  _GraphValue.subscript.getter(a6, a3, &v35);
  v19 = v35;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v54 = v10;
  v55 = v11;
  v56 = v12;
  v57 = v13;
  v58 = v23;
  v60 = v31;
  v61 = v14;
  v62 = v15;
  v63 = v30;
  v64 = v29;
  v65 = v28;
  v66 = v27;
  v67 = v26;
  v68 = v25;
  v69 = v24;
  v34 = v19;
  v38 = v10;
  v39 = v11;
  v40 = v12;
  v41 = v13;
  v42 = v23;
  v43 = 0;
  v44 = v31;
  v45 = v14;
  v46 = v15;
  v47 = v30;
  v48 = v29;
  v49 = v28;
  v50 = v27;
  v51 = v26;
  v52 = v25;
  v53 = v24;
  v21 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(&v34, &v38, a3, a4);
  v59 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v54);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _MaskEffect, (void (*)(uint64_t))partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:), a2);
}

uint64_t closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _MaskEffect(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _MaskEffect<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return static _MaskEffect._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t type metadata completion function for _MaskAlignmentEffect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _MaskAlignmentEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 16) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CCAAE0 + 4 * byte_235296120[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for _MaskAlignmentEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t getEnumTagSinglePayload for _MaskEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CCADBC + 4 * byte_23529612E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _MaskEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_234CCAFBC(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _MaskAlignmentEffect, (uint64_t)&protocol witness table for _MaskAlignmentEffect<A>);
}

uint64_t sub_234CCAFD0(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _MaskEffect, (uint64_t)&protocol witness table for _MaskEffect<A>);
}

ValueMetadata *type metadata accessor for MaskDefaultForeground()
{
  return &type metadata for MaskDefaultForeground;
}

unint64_t instantiation function for generic protocol witness table for MaskDefaultForeground(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaskDefaultForeground and conformance MaskDefaultForeground;
  if (!lazy protocol witness table cache variable for type MaskDefaultForeground and conformance MaskDefaultForeground)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaskDefaultForeground, &type metadata for MaskDefaultForeground);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaskDefaultForeground and conformance MaskDefaultForeground);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaskDisplayList and conformance MaskDisplayList;
  if (!lazy protocol witness table cache variable for type MaskDisplayList and conformance MaskDisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaskDisplayList, &unk_25061E898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaskDisplayList and conformance MaskDisplayList);
  }
  return result;
}

uint64_t sub_234CCB0B4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #1 in static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_DWORD *)(result + 16) = *(_DWORD *)(*(_QWORD *)(v1 + 16) + 12);
  *(_DWORD *)(result + 20) = *(_DWORD *)(v2 + 12);
  return result;
}

__n128 __swift_memcpy25_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

void *type metadata accessor for MaskDisplayList()
{
  return &unk_25061E898;
}

unint64_t instantiation function for generic protocol witness table for MaskDisplayList(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of ContentTransitionProvidingFormatStyle.contentTransition<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ContainerBackgroundKind.Key(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

BOOL static ContainerBackgroundKind.Builtin.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ContainerBackgroundKind.Builtin.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void *static ContainerBackgroundKind.Builtin.allCases.getter()
{
  return &outlined read-only object #0 of static ContainerBackgroundKind.Builtin.allCases.getter;
}

Swift::Int ContainerBackgroundKind.Builtin.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContainerBackgroundKind.Builtin(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ContainerBackgroundKind.Builtin;
}

void ContainerBackgroundKind.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if (v1 == 5)
    v1 = 1;
  else
    Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
}

BOOL static ContainerBackgroundKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 5)
    return v3 == 5;
  if (v3 == 5)
    return 0;
  return v2 == v3;
}

Swift::Int ContainerBackgroundKind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5)
    v1 = 1;
  else
    Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContainerBackgroundKind()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5)
    v1 = 1;
  else
    Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContainerBackgroundKind()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if (v1 == 5)
    v1 = 1;
  else
    Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContainerBackgroundKind()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  Hasher.init(_seed:)();
  v1 = *v0;
  if (v1 == 5)
    v1 = 1;
  else
    Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ContainerBackgroundKind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == 5;
  v6 = v3 != 5 && v2 == v3;
  if (v2 == 5)
    return v4;
  else
    return v6;
}

uint64_t EnvironmentValues.containerBackgroundKind.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.containerBackgroundKind : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.containerBackgroundKind.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.containerBackgroundKind.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ContainerBackgroundKind.Key>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 6;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.containerBackgroundKind.modify;
}

uint64_t EnvironmentValues.containerBackgroundKind.modify(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<ContainerBackgroundKind.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerBackgroundKind.Builtin, &type metadata for ContainerBackgroundKind.Builtin);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContainerBackgroundKind.Builtin] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ContainerBackgroundKind.Builtin] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContainerBackgroundKind.Builtin] and conformance [A])
  {
    type metadata accessor for [ContainerBackgroundKind.Builtin]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContainerBackgroundKind.Builtin] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ContainerBackgroundKind.Builtin]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ContainerBackgroundKind.Builtin])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ContainerBackgroundKind.Builtin]);
  }
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundKind and conformance ContainerBackgroundKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerBackgroundKind and conformance ContainerBackgroundKind;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKind and conformance ContainerBackgroundKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerBackgroundKind, &type metadata for ContainerBackgroundKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKind and conformance ContainerBackgroundKind);
  }
  return result;
}

uint64_t sub_234CCB8EC(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.containerBackgroundKind.setter(&v2);
}

uint64_t getEnumTagSinglePayload for ContainerBackgroundKind(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    v7 = v6 >= 5;
    v8 = v6 - 5;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234CCB970 + 4 * asc_235296450[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ContainerBackgroundKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_234CCBA18 + 4 * byte_23529645A[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_234CCBA4C + 4 * byte_235296455[v5]))();
}

uint64_t sub_234CCBA4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CCBA54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CCBA5CLL);
  return result;
}

uint64_t sub_234CCBA68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CCBA70);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_234CCBA74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CCBA7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ContainerBackgroundKind(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 5)
    return v1 - 4;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for ContainerBackgroundKind(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 4;
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKind()
{
  return &type metadata for ContainerBackgroundKind;
}

uint64_t storeEnumTagSinglePayload for ContainerBackgroundKind.Builtin(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234CCBB08 + 4 * byte_235296464[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234CCBB3C + 4 * byte_23529645F[v4]))();
}

uint64_t sub_234CCBB3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CCBB44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CCBB4CLL);
  return result;
}

uint64_t sub_234CCBB58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CCBB60);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234CCBB64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CCBB6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKind.Builtin()
{
  return &type metadata for ContainerBackgroundKind.Builtin;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKind.Key()
{
  return &type metadata for ContainerBackgroundKind.Key;
}

void Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)()
{
  __asm { BR              X10 }
}

void sub_234CCBC18(__n128 a1, __n128 a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CFIndex v19;
  uint64_t v20;
  void *v21;
  CGFloat v22;
  CGFloat v23;
  CFIndex v24;
  const __CTLine *v25;
  void *v26;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  id v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  CGAffineTransform v52[6];
  CFRange v53;
  CGRect ImageBounds;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v15 = *MEMORY[0x24BDBF070];
  v16 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v17 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v18 = *(double *)(MEMORY[0x24BDBF070] + 24);
  v19 = v49;
  if (v49 != v9)
  {
    v41 = a3;
    v42 = a2;
    v43 = a1;
    if (v9 < v49)
    {
      __break(1u);
LABEL_14:
      __break(1u);
      JUMPOUT(0x234CCC538);
    }
    outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(v13, v14, v12, v11, v10, a9, v49, v9, v46, v48, v47);
    v45 = v12;
    do
    {
      if (v19 >= v9)
      {
        __break(1u);
        JUMPOUT(0x234CCC52CLL);
      }
      if ((v12 & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(v13, v14, 1);
        v39 = (id)_NSTextLineFragmentGetCTLine(v13);
        if (!v39)
          goto LABEL_14;
        v21 = v39;
        v40 = v12;
        v23 = *(double *)&v50;
        v22 = v51;
        outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v13, v14, v40, v50, LOBYTE(v51), a9, v49, v9, v46, v48, v47);
        v20 = v9;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v13, v14, 0);
        outlined copy of Text.Layout.Line.Line(v13, v14, 0);

        swift_release();
        v20 = v9;
        v21 = v13;
        v23 = *(double *)&v50;
        v22 = v51;
      }
      v24 = v19 + 1;
      swift_retain();
      v25 = v21;
      v26 = (id)_CTLineGetRunAtIndex(v25, v19);
      v53.location = 0;
      v53.length = 0;
      ImageBounds = CTRunGetImageBounds((CTRunRef)v26, 0, v53);
      x = ImageBounds.origin.x;
      y = ImageBounds.origin.y;
      width = ImageBounds.size.width;
      height = ImageBounds.size.height;

      v52[0].b = 0.0;
      v52[0].c = 0.0;
      v52[0].a = 1.0;
      v52[0].d = -1.0;
      v52[0].tx = v23;
      v52[0].ty = v22;
      v55.origin.x = x;
      v55.origin.y = y;
      v55.size.width = width;
      v55.size.height = height;
      v56 = CGRectApplyAffineTransform(v55, v52);
      v31 = v56.origin.x;
      v32 = v56.origin.y;
      v33 = v56.size.width;
      v34 = v56.size.height;
      swift_release();

      v57.origin.x = v31;
      v57.origin.y = v32;
      v57.size.width = v33;
      v57.size.height = v34;
      v58 = CGRectInset(v57, -1.0, -1.0);
      v35 = v58.origin.x;
      v36 = v58.origin.y;
      v37 = v58.size.width;
      v38 = v58.size.height;
      swift_release();

      v59.origin.x = v15;
      v59.origin.y = v16;
      v59.size.width = v17;
      v59.size.height = v18;
      v62.origin.x = v35;
      v62.origin.y = v36;
      v62.size.width = v37;
      v62.size.height = v38;
      v60 = CGRectUnion(v59, v62);
      v15 = v60.origin.x;
      v16 = v60.origin.y;
      v17 = v60.size.width;
      v18 = v60.size.height;
      v19 = v24;
      v12 = v45;
      v9 = v20;
    }
    while (v20 != v24);
    outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v13, v14, v45, v50, LOBYTE(v51), a9, v49, v20, v46, v48, v47);
    a2 = v42;
    a1 = v43;
    a3 = v41;
  }
  *(__n128 *)&v52[0].a = a1;
  *(__n128 *)&v52[0].c = a2;
  *(__n128 *)&v52[0].tx = a3;
  v61.origin.x = v15;
  v61.origin.y = v16;
  v61.size.width = v17;
  v61.size.height = v18;
  CGRectApplyAffineTransform(v61, v52);
}

void sub_234CCC53C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234CCC584);
}

void Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v8;
  double v9;
  __int128 v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  CGAffineTransform v15;

  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(double *)(v6 + 88);
  v10 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)&v15.a = *(_OWORD *)(v6 + 96);
  *(_OWORD *)&v15.c = v10;
  *(_OWORD *)&v15.tx = *(_OWORD *)(v6 + 128);
  RBDrawingStateGetCTM();
  GraphicsContext.concatenate(_:)(&v15);
  v11 = *(float *)(*(_QWORD *)a6 + 32);
  v12 = v9 * v11;
  if (v11 != v12)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v14 = swift_retain();
      *(_QWORD *)a6 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v14, v13, 1, 0);
      swift_release();
    }
    *(float *)(*(_QWORD *)a6 + 32) = v12;
  }
  __asm { BR              X10 }
}

uint64_t Text.Effect.DrawingContext.Storage.Shared.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t Text.Effect.DrawingContext.Storage.append(_:)(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _BYTE v29[7];

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = v1[5];
  v13 = v1[6];
  v14 = v1[7];
  v15 = v1[8];
  v16 = v1[9];
  v17 = *(_BYTE *)(a1 + 80);
  v24 = (_QWORD *)(v9 + 16);
  v25 = *(_QWORD *)(a1 + 32);
  swift_beginAccess();
  v18 = *(_QWORD **)(v9 + 16);
  swift_retain();
  v28 = v2;
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, v26, v27, v25, v4, v6, v5, v7, v8, v17);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v9 + 16) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *v24 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    *v24 = v18;
  }
  v18[2] = v21 + 1;
  v22 = &v18[18 * v21];
  v22[4] = v28;
  v22[5] = v3;
  v22[6] = v26;
  v22[7] = v27;
  v22[8] = v25;
  v22[9] = v4;
  v22[10] = v6;
  v22[11] = v5;
  v22[12] = v7;
  v22[13] = v8;
  *((_BYTE *)v22 + 112) = v17;
  *(_DWORD *)((char *)v22 + 113) = *(_DWORD *)v29;
  *((_DWORD *)v22 + 29) = *(_DWORD *)&v29[3];
  v22[15] = v16;
  v22[16] = v10;
  v22[17] = v11;
  v22[18] = v12;
  v22[19] = v13;
  v22[20] = v14;
  v22[21] = v15;
  swift_endAccess();
  return swift_release();
}

{
  uint64_t v1;
  __int128 v3;
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v25;
  double v26;
  _QWORD *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CGAffineTransform v42;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v3 = *(_OWORD *)(v1 + 40);
  v53 = *(_OWORD *)(v1 + 24);
  v54 = v3;
  v55 = *(_OWORD *)(v1 + 56);
  v56 = 0x3FF0000000000000;
  v57 = 0;
  v58 = 0;
  v59 = 0x3FF0000000000000;
  v60 = 0;
  v61 = 0;
  result = static CGAffineTransform.== infix(_:_:)();
  if ((result & 1) != 0 || (v5 = *(double *)(v1 + 72), v5 == 1.0))
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Array.append<A>(contentsOf:)(a1);
    swift_endAccess();
    return swift_release();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      v35 = v6 - 1;
      v7 = 32;
      v33 = a1;
      while (1)
      {
        v34 = v7;
        v8 = (_OWORD *)(a1 + v7);
        v9 = v8[8];
        v10 = v8[6];
        v51 = v8[7];
        v52 = v9;
        v11 = v8[3];
        v46 = v8[2];
        v47 = v11;
        v12 = v8[4];
        v49 = v8[5];
        v50 = v10;
        v48 = v12;
        v13 = v8[1];
        v45[0] = *v8;
        v45[1] = v13;
        v14 = *(_QWORD *)(v1 + 16);
        v15 = v45[0];
        v16 = *((_QWORD *)&v13 + 1);
        v17 = v46;
        v41 = v13;
        v39 = *((_QWORD *)&v47 + 1);
        v40 = v47;
        v37 = *((_QWORD *)&v12 + 1);
        v38 = v12;
        v36 = v49;
        *(_OWORD *)&t1.a = v10;
        *(_OWORD *)&t1.c = v51;
        *(_OWORD *)&t1.tx = v9;
        v18 = *(_OWORD *)(v1 + 40);
        *(_OWORD *)&t2.a = *(_OWORD *)(v1 + 24);
        *(_OWORD *)&t2.c = v18;
        *(_OWORD *)&t2.tx = *(_OWORD *)(v1 + 56);
        CGAffineTransformConcat(&v42, &t1, &t2);
        a = v42.a;
        b = v42.b;
        c = v42.c;
        d = v42.d;
        tx = v42.tx;
        ty = v42.ty;
        v25 = (_QWORD *)(v14 + 16);
        v26 = *((double *)&v49 + 1);
        swift_beginAccess();
        v27 = *(_QWORD **)(v14 + 16);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v14 + 16) = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          *v25 = v27;
        }
        v30 = v27[2];
        v29 = v27[3];
        if (v30 >= v29 >> 1)
        {
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v27);
          *v25 = v27;
        }
        v27[2] = v30 + 1;
        v31 = &v27[18 * v30];
        *((_OWORD *)v31 + 2) = v15;
        v31[6] = v41;
        v31[7] = v16;
        *((_OWORD *)v31 + 4) = v17;
        v31[10] = v40;
        v31[11] = v39;
        v31[12] = v38;
        v31[13] = v37;
        *((_BYTE *)v31 + 112) = v36;
        v32 = *(_DWORD *)((char *)&t2.a + 3);
        *(_DWORD *)((char *)v31 + 113) = LODWORD(t2.a);
        *((_DWORD *)v31 + 29) = v32;
        *((double *)v31 + 15) = v26 * v5;
        *((CGFloat *)v31 + 16) = a;
        *((CGFloat *)v31 + 17) = b;
        *((CGFloat *)v31 + 18) = c;
        *((CGFloat *)v31 + 19) = d;
        *((CGFloat *)v31 + 20) = tx;
        *((CGFloat *)v31 + 21) = ty;
        swift_endAccess();
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        swift_release();
        if (!v35)
          break;
        v5 = *(double *)(v1 + 72);
        --v35;
        a1 = v33;
        v7 = v34 + 144;
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t Text.Effect.DrawingContext.Storage.__deallocating_deinit()
{
  uint64_t *v0;

  swift_release();
  outlined consume of Text.Effect.StopCollector?(v0[23], v0[24], v0[25], v0[26]);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.DrawingContext.Storage()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Text.Effect.DrawingContext.Storage.Shared()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for Text.Effect.ResolvedDrawing()
{
  return &type metadata for Text.Effect.ResolvedDrawing;
}

uint64_t initializeWithCopy for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v4 = *(id *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_BYTE *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v14, v15, v16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;

  v4 = *(id *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_BYTE *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v25;
  *(_BYTE *)(a1 + 80) = v26;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t assignWithTake for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_BYTE *)(a2 + 80);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 80);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v4;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 80) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 80) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 80) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.ResolvedDrawing.Operation()
{
  return &type metadata for Text.Effect.ResolvedDrawing.Operation;
}

uint64_t assignWithCopy for Text.Effect.DrawingContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Text.Effect.DrawingContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingContext()
{
  return &type metadata for Text.Effect.DrawingContext;
}

double Text.Effect.DrawingContext.fragment<A>(for:key:fragment:)@<D0>(Swift::UInt64 a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  __int128 v10;
  double result;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 16) + 48);
  swift_retain();
  swift_retain();
  Text.Effect.DrawableFragment.init(keyframes:key:fragment:)(v9, a1, a2, a3, (uint64_t)v12);
  v10 = v12[1];
  *(_OWORD *)a4 = v12[0];
  *(_OWORD *)(a4 + 16) = v10;
  result = *(double *)&v13;
  *(_OWORD *)(a4 + 32) = v13;
  *(_QWORD *)(a4 + 48) = v14;
  return result;
}

uint64_t Text.Effect.DrawingContext.foregroundColor.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = a2;
  result = *v3;
  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(*v3 + 96) & 1) != 0)
      return result;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(*v3 + 96) & 1) != 0
    || (*(float *)&a1 == COERCE_FLOAT(*(_QWORD *)(result + 80))
      ? (_ZF = *((float *)&a1 + 1) == COERCE_FLOAT(HIDWORD(*(_QWORD *)(result + 80))))
      : (_ZF = 0),
        _ZF ? (v9 = *(float *)&a2 == COERCE_FLOAT(*(_QWORD *)(result + 88))) : (v9 = 0),
        v9 ? (v10 = *((float *)&a2 + 1) == COERCE_FLOAT(HIDWORD(*(_QWORD *)(result + 88)))) : (v10 = 0),
        !v10))
  {
LABEL_15:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      v11 = *v3;
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 104) = 0u;
      *(_OWORD *)(v12 + 120) = 0u;
      *(_OWORD *)(v12 + 136) = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v12 + 152) = _Q0;
      *(_QWORD *)(v12 + 168) = 0x3FF0000000000000;
      *(_BYTE *)(v12 + 176) = 0;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
      v17 = *(_OWORD *)(v11 + 40);
      v18 = *(_OWORD *)(v11 + 56);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v11 + 24);
      *(_OWORD *)(v12 + 40) = v17;
      *(_OWORD *)(v12 + 56) = v18;
      *(_QWORD *)(v12 + 72) = *(_QWORD *)(v11 + 72);
      v19 = *(_QWORD *)(v11 + 184);
      v20 = *(_QWORD *)(v11 + 192);
      v28 = a1;
      v29 = v5;
      v22 = *(_QWORD *)(v11 + 200);
      v21 = *(_QWORD *)(v11 + 208);
      v23 = *(_QWORD *)(v11 + 216);
      *(_QWORD *)(v12 + 184) = v19;
      *(_QWORD *)(v12 + 192) = v20;
      *(_QWORD *)(v12 + 200) = v22;
      *(_QWORD *)(v12 + 208) = v21;
      *(_QWORD *)(v12 + 216) = v23;
      swift_retain();
      swift_retain();
      outlined copy of Text.Effect.StopCollector?(v19, v20, v22, v21);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      v24 = *(_QWORD *)(v11 + 80);
      v25 = *(_QWORD *)(v11 + 88);
      v26 = *(_BYTE *)(v11 + 96);
      swift_release();
      *(_QWORD *)(v12 + 80) = v24;
      *(_QWORD *)(v12 + 88) = v25;
      a1 = v28;
      v5 = v29;
      *(_BYTE *)(v12 + 96) = v26;
      *v3 = v12;
      result = swift_release();
    }
    v27 = *v3;
    *(_QWORD *)(v27 + 80) = a1;
    *(_QWORD *)(v27 + 88) = v5;
    *(_BYTE *)(v27 + 96) = a3 & 1;
  }
  return result;
}

uint64_t specialized Text.Effect.DrawingContext.withStopCollector(prepare:perform:)(void (*a1)(_QWORD), double a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v44)(_QWORD);
  _BYTE v45[112];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double v57;
  __int128 v58;

  v47 = 0uLL;
  v48 = 0;
  v49 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(a5 + 16);
  if (v7)
  {
    v9 = (_OWORD *)(a5 + 32);
    do
    {
      v10 = v9[7];
      *(_OWORD *)&v45[96] = v9[6];
      v46 = v10;
      v11 = v9[5];
      *(_OWORD *)&v45[64] = v9[4];
      *(_OWORD *)&v45[80] = v11;
      v12 = v9[1];
      *(_OWORD *)v45 = *v9;
      *(_OWORD *)&v45[16] = v12;
      v13 = v9[3];
      *(_OWORD *)&v45[32] = v9[2];
      *(_OWORD *)&v45[48] = v13;
      v50 = *(_QWORD *)v45;
      v51 = *(_OWORD *)&v45[8];
      v52 = *(_OWORD *)&v45[24];
      v53 = *(_OWORD *)&v45[40];
      v54 = *(_OWORD *)&v45[56];
      v55 = *(_OWORD *)&v45[72];
      v56 = *(_OWORD *)&v45[88];
      v57 = *(double *)&v45[104] + a2;
      v58 = v46;
      outlined retain of Text.Effect.DisplayInfo((uint64_t)v45);
      Text.Effect.DisplayInfo.prepare(in:)();
      outlined release of Text.Effect.DisplayInfo((uint64_t)v45);
      v9 += 8;
      --v7;
    }
    while (v7);
  }
  Text.Effect.StopCollector.flushSegment()();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v14 = *a4;
    type metadata accessor for Text.Effect.DrawingContext.Storage();
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 120) = 0u;
    *(_OWORD *)(v15 + 136) = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v15 + 152) = _Q0;
    *(_QWORD *)(v15 + 168) = 0x3FF0000000000000;
    *(_BYTE *)(v15 + 176) = 0;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
    v21 = *(_OWORD *)(v14 + 40);
    v22 = *(_OWORD *)(v14 + 56);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v15 + 40) = v21;
    *(_OWORD *)(v15 + 56) = v22;
    *(_QWORD *)(v15 + 72) = *(_QWORD *)(v14 + 72);
    v23 = *(_QWORD *)(v14 + 184);
    v24 = *(_QWORD *)(v14 + 192);
    v44 = a1;
    v25 = *(_QWORD *)(v14 + 200);
    v26 = *(_QWORD *)(v14 + 208);
    v27 = *(_QWORD *)(v14 + 216);
    *(_QWORD *)(v15 + 184) = v23;
    *(_QWORD *)(v15 + 192) = v24;
    *(_QWORD *)(v15 + 200) = v25;
    *(_QWORD *)(v15 + 208) = v26;
    *(_QWORD *)(v15 + 216) = v27;
    swift_retain();
    swift_retain();
    v28 = v25;
    a1 = v44;
    outlined copy of Text.Effect.StopCollector?(v23, v24, v28, v26);
    outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
    v29 = *(_QWORD *)(v14 + 80);
    v30 = *(_QWORD *)(v14 + 88);
    LOBYTE(v23) = *(_BYTE *)(v14 + 96);
    swift_release();
    *(_QWORD *)(v15 + 80) = v29;
    *(_QWORD *)(v15 + 88) = v30;
    *(_BYTE *)(v15 + 96) = v23;
    *a4 = v15;
    swift_release();
  }
  v31 = *a4;
  v32 = *(_QWORD *)(*a4 + 184);
  v33 = *(_QWORD *)(*a4 + 192);
  v34 = *(_QWORD *)(*a4 + 200);
  v35 = *(_QWORD *)(*a4 + 208);
  v36 = *(_QWORD *)(*a4 + 216);
  v37 = v48;
  *(_OWORD *)(v31 + 184) = v47;
  *(_QWORD *)(v31 + 200) = v37;
  *(_OWORD *)(v31 + 208) = v49;
  outlined copy of Text.Effect.StopCollector?(v32, v33, v34, v35);
  outlined consume of Text.Effect.StopCollector?(v32, v33, v34, v35);
  a1(a4);
  v38 = (_QWORD *)*a4;
  v39 = *(_QWORD *)(*a4 + 184);
  v40 = *(_QWORD *)(*a4 + 192);
  v41 = *(_QWORD *)(*a4 + 200);
  v42 = *(_QWORD *)(*a4 + 208);
  v38[23] = v32;
  v38[24] = v33;
  v38[25] = v34;
  v38[26] = v35;
  v38[27] = v36;
  return outlined consume of Text.Effect.StopCollector?(v39, v40, v41, v42);
}

uint64_t outlined release of Text.Effect.DisplayInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of Text.Effect.StopCollector?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(result, a2);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Text.Effect.StopCollector?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(result, a2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void destroy for Text.Effect.ResolvedDrawing.Operation(uint64_t a1)
{
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v24;
  unsigned __int8 v25;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_BYTE *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 80) = v25;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_BYTE *)(a2 + 80);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v3;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 80) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 80) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 80) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80) >> 5;
}

uint64_t destructiveProjectEnumData for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t result)
{
  *(_BYTE *)(result + 80) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = *(_BYTE *)(result + 80) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.ResolvedDrawing.Operation.Kind()
{
  return &type metadata for Text.Effect.ResolvedDrawing.Operation.Kind;
}

double protocol witness for static View._makeView(view:inputs:) in conformance LinearGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

double static View._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 80);
  v19 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a2 + 40);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = v8;
  return static View.makeView(view:inputs:)(&v19, &v11, a3, a4, a5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LinearGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t static View._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_DWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_BYTE *)(a2 + 80);
  v21 = *a1;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = *(_OWORD *)(a2 + 24);
  v16 = v7;
  v17 = *(_OWORD *)(a2 + 48);
  v18 = v8;
  v19 = v9;
  v20 = v10;
  return static View.makeViewList(view:inputs:)(&v21, &v12, a3, a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LinearGradient()
{
  return 1;
}

uint64_t static View._viewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_DWORD *)a1 + 4);
  v4 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  v9 = v3;
  v10 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

double protocol witness for static View._makeView(view:inputs:) in conformance RadialGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RadialGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance EllipticalGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EllipticalGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance AngularGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AngularGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double static View.makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  void (*v33)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  int v43;
  uint64_t AssociatedTypeWitness;
  int v45;
  uint64_t v47;
  double v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = a2[6];
  v13 = *((_DWORD *)a2 + 20);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v81);
  v14 = v81;
  v15 = v82;
  v16 = v83;
  v17 = HIDWORD(v83);
  v81 = v8;
  LODWORD(v82) = v9;
  v84 = *(_OWORD *)(a2 + 3);
  v83 = v10;
  v85 = v11;
  v86 = v12;
  v87 = *(_OWORD *)(a2 + 7);
  v18 = a2[9];
  v19 = v7;
  v20 = v15;
  v88 = v18;
  v89 = v13;
  v21 = v14;
  v49 = v19;
  *(_QWORD *)&v66 = v14;
  *((_QWORD *)&v66 + 1) = v15;
  LOBYTE(v67) = v16;
  v43 = v17;
  HIDWORD(v67) = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static View.makeBody(view:inputs:fields:)(&v47, (uint64_t)&v50, &v49, (uint64_t)&v81, &v66, a3, a4);
  v45 = v47;
  if ((v52 & 1) == 0)
  {
    LODWORD(v47) = v19;
    *(_QWORD *)&v66 = v21;
    *((_QWORD *)&v66 + 1) = v20;
    LOBYTE(v67) = v16;
    HIDWORD(v67) = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v47, (uint64_t *)&v66, a3);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = v81;
  v23 = v83;
  v39 = v84;
  v40 = v82;
  v24 = *((_QWORD *)&v84 + 1);
  v38 = DWORD1(v84);
  v25 = v85;
  v26 = v86;
  v28 = v87;
  v27 = DWORD1(v87);
  v29 = HIDWORD(v87);
  v36 = v88;
  v37 = DWORD2(v87);
  v30 = v89;
  v35 = HIDWORD(v88);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41 = ShouldRecordTree;
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  *(_QWORD *)&v66 = v22;
  DWORD2(v66) = v40;
  v67 = v23;
  v68 = v39;
  v69 = v38;
  v72 = v25;
  v73 = v26;
  v74 = v28;
  v75 = v27;
  v76 = v37;
  v77 = v29;
  v78 = v36;
  v79 = v35;
  v80 = v30;
  v70 = 0;
  v71 = HIDWORD(v24);
  v49 = v45;
  v50 = v22;
  LODWORD(v51) = v40;
  v52 = v23;
  v53 = v39;
  v54 = v38;
  v55 = 0;
  v56 = HIDWORD(v24);
  v57 = v25;
  v58 = v26;
  v59 = v28;
  v60 = v27;
  v61 = v37;
  v62 = v29;
  v63 = v36;
  v64 = v35;
  v65 = v30;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v33 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(&v47, &v49, &v50, AssociatedTypeWitness, AssociatedConformanceWitness);
  v70 = v24;
  if ((v41 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v47, (uint64_t)&v66);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a5 = v47;
  result = v48;
  a5[1] = v48;
  return result;
}

uint64_t static View.makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v44;
  unsigned int v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v40 = a2[7];
  v41 = a2[6];
  v11 = *((_DWORD *)a2 + 16);
  v12 = a2[9];
  v13 = *((_BYTE *)a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v58);
  v15 = v58;
  v14 = v59;
  v16 = v60;
  v17 = HIDWORD(v60);
  v58 = v7;
  LODWORD(v59) = v8;
  v60 = v9;
  v61 = *(_OWORD *)(a2 + 3);
  v62 = v10;
  v63 = v41;
  v64 = v40;
  v65 = v11;
  v66 = v12;
  v67 = v13;
  v32 = v17;
  v33 = v6;
  v44 = v6;
  *(_QWORD *)&v39 = v15;
  *((_QWORD *)&v39 + 1) = v14;
  *(_QWORD *)&v46 = v15;
  *((_QWORD *)&v46 + 1) = v14;
  v42 = v16;
  LOBYTE(v47) = v16;
  HIDWORD(v47) = v17;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static View.makeBody(view:inputs:fields:)(&v45, (uint64_t)&v55, &v44, (uint64_t)&v58, &v46, a3, a4);
  v18 = v45;
  v30 = v55;
  v31 = v56;
  v37 = v57;
  v38 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = v58;
  v36 = v59;
  v21 = v60;
  v22 = v61;
  v24 = v62;
  v23 = v63;
  v35 = v64;
  v34 = v65;
  v25 = v66;
  v26 = v67;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  LODWORD(v55) = v18;
  *(_QWORD *)&v46 = v20;
  DWORD2(v46) = v36;
  v47 = v21;
  v48 = v22;
  v49 = v24;
  v50 = v23;
  v51 = v35;
  v52 = v34;
  v53 = v25;
  v54 = v26;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, __int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v55, &v46, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v37 & 1) == 0)
  {
    v55 = v30;
    v56 = v31;
    v45 = v33;
    v46 = v39;
    LOBYTE(v47) = v42;
    HIDWORD(v47) = v32;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v45, (uint64_t *)&v46, v38);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static View.makeBody(view:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  __int128 v23;
  char v24;
  int v25;
  int v26;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v20._object = (void *)0x80000002352E0FD0;
    v20._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v20);
    v21._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x6C63206120736920;
    v22._object = (void *)0xEC0000002E737361;
    String.append(_:)(v22);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v15 = *((_DWORD *)a5 + 5);
    v16 = *((_BYTE *)a5 + 16);
    v26 = *a3;
    v23 = *a5;
    v24 = v16;
    v25 = v15;
    v17 = type metadata accessor for ViewBodyAccessor(0, a6, a7, v14);
    v18 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v17);
    return BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)&v26, a4, (uint64_t)&v23, v17, v18);
  }
  return result;
}

void ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3)
{
  specialized ViewBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ViewBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  specialized ViewBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t ViewValuePredicate.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ViewValuePredicate.view.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ViewValuePredicate.view.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewValuePredicate.init(view:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a3, a1, v5);
}

BOOL ViewValuePredicate.apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v19;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - v11;
  v13 = *(_QWORD *)AGGraphGetAttributeInfo();
  v14 = swift_conformsToProtocol2();
  if (v14)
    v15 = v14;
  else
    v15 = 0;
  if (v14)
    v16 = v13;
  else
    v16 = 0;
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v5, a1, v5);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v3, v12, v6);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
  v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v9, 1, v5) != 1;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v17;
}

uint64_t ViewStatePredicate.state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Binding(255, *(_QWORD *)(a1 + 24), a2, a3);
  v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v4, v6);
}

uint64_t ViewStatePredicate.state.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Binding(255, *(_QWORD *)(a2 + 24), a3, a4);
  v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
}

uint64_t (*ViewStatePredicate.state.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewStatePredicate.init()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Binding(0, a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

BOOL ViewStatePredicate.apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v5 = v4;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for Binding(255, v8, a3, a4);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)AGGraphGetAttributeInfo();
  v18 = swift_conformsToProtocol2();
  if (v18)
    v19 = v18;
  else
    v19 = 0;
  if (v18)
    v20 = v17;
  else
    v20 = 0;
  if (v20)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(v19 + 24))(&v26, *(_QWORD *)(a2 + 16), a1, *(_QWORD *)(a2 + 16));
    if ((v27 & 1) == 0)
    {
      _DynamicPropertyBuffer.getState<A>(type:)(v8, v21, v22, (uint64_t)v16);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v5, v16, v10);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, v10);
  v23 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v13, 1, v9) != 1;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v23;
}

double protocol witness for static View._makeView(view:inputs:) in conformance _IntelligenceSupport.AnimatingText@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _IntelligenceSupport.AnimatingText@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _IntelligenceSupport.AnimatingSummarySymbol@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _IntelligenceSupport.AnimatingSummarySymbol@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Path@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Path@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Rectangle@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Rectangle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance RoundedRectangle@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RoundedRectangle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Capsule@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Capsule@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Ellipse@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Ellipse@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Circle@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Circle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Rectangle._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Rectangle._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance RoundedRectangle._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RoundedRectangle._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Capsule._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Capsule._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Ellipse._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Ellipse._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Circle._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Circle._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ContainerRelativeShape@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ContainerRelativeShape@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ContainerRelativeShape._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ContainerRelativeShape._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance MeshGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for static View._makeView(view:inputs:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[5];
  int v6;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  v6 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  specialized static View.makeView(view:inputs:)(v2, (uint64_t)v5);
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[5];
  char v6;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  v6 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  specialized static View.makeViewList(view:inputs:)(v2, (uint64_t)v5);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _TestApp.RootView@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _TestApp.RootView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance OffsetShape<A>(uint64_t *a1)
{
  return static View._viewListCount(inputs:)(a1);
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)&v37 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
  {
    v44 = a1;
    v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
      AGGraphSetUpdate();
      v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x24BDAC7A8](v33);
      v35 = type metadata accessor for ViewBodyAccessor(0, a3, a4, v34);
      *(&v37 - 2) = v35;
      *(&v37 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v35);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v37 - 4), AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v36);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    v39 = v17;
    v40 = v16;
    v41 = v14;
    v42 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v19 = AGTypeID.description.getter();
    v21 = v20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v19;
    v23 = (_QWORD *)(inited + 32);
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v21;
    v43 = a3;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v24 = inited + 72;
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v10, v46, v8);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_initStackObject();
    v47 = xmmword_235283260;
    *(_OWORD *)(v26 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v37 = inited;
        v38 = a4;
        LODWORD(inited) = v39 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v24, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(_QWORD *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v48);
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v48);
          swift_bridgeObjectRelease();
          v32 = *(void (**)(char *, uint64_t))(v45 + 8);
          v32(v46, v8);
          v32(v10, v8);
          a4 = v38;
          AssociatedTypeWitness = v42;
          a3 = v43;
          v16 = v40;
          v14 = v41;
          goto LABEL_15;
        }
        outlined destroy of CVarArg?((uint64_t)v48);
        v23 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 24);
          while (1)
          {
            v29(v10, v28, v8);
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v47;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v48);
            swift_bridgeObjectRelease();
            if (!v49)
              break;
            outlined destroy of CVarArg?((uint64_t)v48);
            if (v23[291] != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t type metadata accessor for ViewBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewBodyAccessor);
}

uint64_t getEnumTagSinglePayload for ViewValuePredicate(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ViewValuePredicate(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_234CD04AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234CD04B4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for ViewValuePredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewValuePredicate);
}

uint64_t type metadata completion function for ViewStatePredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for Binding(255, *(_QWORD *)(a1 + 24), a3, a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ViewStatePredicate(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v7 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v8 <= 0x18)
  {
    v12 = ~v7;
    v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
        return __dst;
      }
    }
    else
    {
      v14 = *v13;
      if ((unint64_t)*v13 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v16 = ((unint64_t)v15 + v7 + 8) & v12;
    v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(v16, ((unint64_t)v13 + v7 + 8) & v12, v5);
    return __dst;
  }
  v11 = *__src;
  *__dst = *__src;
  __dst = (_QWORD *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for ViewStatePredicate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ~v4;
  v6 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v4 + 8) & v5);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v6 + v4 + 8) & v5, v2);
  }
  v7 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  result = (v7 + 1);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  return result;
}

_QWORD *initializeWithCopy for ViewStatePredicate(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    if ((_DWORD)v11 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v13 = ((unint64_t)v12 + v7 + 8) & v8;
    v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v14(v13, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

_QWORD *assignWithCopy for ViewStatePredicate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ~v8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v20 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v19 = v15(((unint64_t)v11 + v8 + 8) & v9, v7, v5);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v4 = a1;
    v14 = v15(((unint64_t)v12 + v8 + 8) & v9, v7, v5);
    v10 = v20;
    if (!v19)
    {
LABEL_5:
      if (!v14)
      {
        *v4 = *a2;
        swift_retain();
        swift_release();
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *v4 = *a2;
    *v11 = *v12;
    v16 = ((unint64_t)v12 + v8 + 8) & v9;
    v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(((unint64_t)v11 + v8 + 8) & v9, v16, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, a2, v10);
  return v4;
}

_QWORD *initializeWithTake for ViewStatePredicate(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    if ((_DWORD)v11 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v12 + v7 + 8) & v8, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

_QWORD *assignWithTake for ViewStatePredicate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v16)(unint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  v3 = a2;
  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ~v8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v19 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
    v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v18 = v16(((unint64_t)v11 + v8 + 8) & v9, v7, v5);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a2;
    v4 = a1;
    v14 = v16(((unint64_t)v12 + v8 + 8) & v9, v7, v5);
    v10 = v19;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *v4 = *v3;
        swift_release();
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *v4 = *v3;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v10);
  return v4;
}

uint64_t getEnumTagSinglePayload for ViewStatePredicate(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_7;
  v12 = (((1 << v9) + a2 - v6) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_15;
LABEL_24:
    v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
    }
    else
    {
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = v16 + 1;
    }
    if (v17 >= 2)
      return v17 - 1;
    else
      return 0;
  }
  if (v12 > 0xFF)
  {
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v12 < 2)
    goto LABEL_24;
LABEL_7:
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64);
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return (v13 + v6);
}

void storeEnumTagSinglePayload for ViewStatePredicate(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  if (v6 - 1 >= a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 1u;
    if (v9 <= 3)
    {
      v11 = (((v10 << (8 * v9)) + a3 - v6) >> (8 * v9)) + 1;
      if (HIWORD(v11))
      {
        v10 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v11 >= 0x100)
          v10 = 2;
        else
          v10 = v11 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X14 }
      }
LABEL_14:
      v12 = a2 - v6;
      if (v9 < 4)
      {
        if ((_DWORD)v9)
        {
          v13 = v12 & ~(-1 << (8 * v9));
          bzero(a1, v9);
          if ((_DWORD)v9 == 3)
          {
            *a1 = v13;
            *((_BYTE *)a1 + 2) = BYTE2(v13);
          }
          else if ((_DWORD)v9 == 2)
          {
            *a1 = v13;
          }
          else
          {
            *(_BYTE *)a1 = v13;
          }
        }
      }
      else
      {
        bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64));
        *(_DWORD *)a1 = v12;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_234CD1078()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234CD10E4);
}

void sub_234CD1080()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234CD10E4);
}

void sub_234CD1088()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234CD10E4);
}

void sub_234CD10B8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x234CD10E4);
}

void sub_234CD10C8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x234CD10E4);
}

void sub_234CD10D0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x234CD10E4);
}

uint64_t type metadata accessor for ViewStatePredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewStatePredicate);
}

uint64_t static _SymbolEffect.BreatheConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static _SymbolEffect.BounceConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static _SymbolEffect.RotateConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static _SymbolEffect.ScaleConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 4) ^ *(unsigned __int8 *)(a1 + 4) ^ 1) & 1;
  else
    return 0;
}

BOOL static _SymbolEffect.HiddenConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)a1 != *(_DWORD *)a2) | ((*(_BYTE *)(a1 + 4) ^ *(_BYTE *)(a2 + 4)) | (*(_BYTE *)(a2 + 5) ^ *(_BYTE *)(a1 + 5))) & 1) == 0;
}

uint64_t _SymbolEffect.Trigger.activates(after:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  char v5;
  char v6;

  v2 = *a1;
  if ((~*a1 & 0xF000000000000006) == 0)
    goto LABEL_11;
  v3 = *v1;
  if (v2 < 0)
  {
    if (v3 < 0)
    {
      outlined consume of _SymbolEffect.Trigger(*a1);
      outlined consume of _SymbolEffect.Trigger(v3);
      v6 = ((v2 & 1) == 0) & v3;
      return v6 & 1;
    }
    swift_retain();
    goto LABEL_10;
  }
  if (v3 < 0)
  {
    outlined copy of _SymbolEffect.Trigger(*a1);
LABEL_10:
    outlined consume of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v3);
LABEL_11:
    v6 = 0;
    return v6 & 1;
  }
  if (v2 == v3)
  {
    outlined copy of _SymbolEffect.Trigger(*v1);
    outlined copy of _SymbolEffect.Trigger?(v2);
    goto LABEL_10;
  }
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80);
  outlined copy of _SymbolEffect.Trigger(*v1);
  outlined copy of _SymbolEffect.Trigger?(v2);
  outlined copy of _SymbolEffect.Trigger?(v2);
  outlined copy of _SymbolEffect.Trigger(v3);
  v5 = v4(v3);
  outlined consume of _SymbolEffect.Trigger(v2);
  outlined consume of _SymbolEffect.Trigger(v3);
  outlined consume of _SymbolEffect.Trigger(v3);
  outlined consume of _SymbolEffect.Trigger?(v2);
  v6 = v5 ^ 1;
  return v6 & 1;
}

float _SymbolEffect.Options.speed.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void _SymbolEffect.Options.speed.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*_SymbolEffect.Options.speed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t _SymbolEffect.Options.repeatCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t _SymbolEffect.Options.repeatCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_SymbolEffect.Options.repeatCount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t _SymbolEffect.Options.repeatDelay.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12) | ((unint64_t)*(unsigned __int8 *)(v0 + 16) << 32);
}

uint64_t _SymbolEffect.Options.repeatDelay.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  *(_BYTE *)(v1 + 16) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_SymbolEffect.Options.repeatDelay.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void __swiftcall _SymbolEffect.Options.init()(SwiftUI::_SymbolEffect::Options *__return_ptr retstr)
{
  *(_QWORD *)&retstr->speed = 1065353216;
  retstr->repeatCount.is_nil = 1;
  retstr->repeatDelay.value = 0.0;
  retstr->repeatDelay.is_nil = 1;
}

uint64_t _SymbolEffect.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_WORD *)(v1 + 24);
  *(_WORD *)(a1 + 24) = v5;
  return outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
}

__n128 _SymbolEffect.storage.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u16[4];
  outlined consume of _SymbolEffect.Storage(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_WORD *)(v1 + 24));
  result = v5;
  *(__n128 *)v1 = v5;
  *(_QWORD *)(v1 + 16) = v2;
  *(_WORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*_SymbolEffect.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.options.getter@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float result;
  int v3;
  char v4;
  int v5;
  char v6;

  result = *(float *)(v1 + 28);
  v3 = *(_DWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 36);
  v5 = *(_DWORD *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 44);
  *(float *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  return result;
}

float _SymbolEffect.options.setter(uint64_t a1)
{
  uint64_t v1;
  float result;
  int v3;
  char v4;
  int v5;
  char v6;

  result = *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v1 + 28) = *(_DWORD *)a1;
  *(_DWORD *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 36) = v4;
  *(_DWORD *)(v1 + 40) = v5;
  *(_BYTE *)(v1 + 44) = v6;
  return result;
}

uint64_t (*_SymbolEffect.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.init(_:options:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v4;
  float result;
  int v6;
  char v7;
  int v8;
  char v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_WORD *)(a1 + 24);
  result = *(float *)a2;
  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(_BYTE *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = v3;
  *(_WORD *)(a3 + 24) = v4;
  *(float *)(a3 + 28) = result;
  *(_DWORD *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 36) = v7;
  *(_DWORD *)(a3 + 40) = v8;
  *(_BYTE *)(a3 + 44) = v9;
  return result;
}

uint64_t _SymbolEffect.PulseConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.PulseConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.PulseConfiguration.trigger.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.PulseConfiguration.layered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t _SymbolEffect.PulseConfiguration.layered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.PulseConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.PulseConfiguration.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xF000000000000006;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t (*_SymbolEffect.BreatheConfiguration.trigger.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.BreatheConfiguration.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.BreatheConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.BounceConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.BounceConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.BounceConfiguration.trigger.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.BounceConfiguration.flags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t _SymbolEffect.BounceConfiguration.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.BounceConfiguration.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.BounceConfiguration.layered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t _SymbolEffect.BounceConfiguration.layered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = result;
  return result;
}

uint64_t (*_SymbolEffect.BounceConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.BounceConfiguration.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xF000000000000006;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
}

uint64_t _SymbolEffect.WiggleConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.WiggleConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.trigger.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.angle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _SymbolEffect.WiggleConfiguration.angle.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.angle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.flags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t _SymbolEffect.WiggleConfiguration.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.layered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t _SymbolEffect.WiggleConfiguration.layered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.appliesRTL.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t _SymbolEffect.WiggleConfiguration.appliesRTL.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.appliesRTL.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _SymbolEffect.WiggleConfiguration.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = -3.10503618e231;
  *(_OWORD *)a1 = xmmword_235296740;
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 24) = 1;
  return result;
}

uint64_t (*_SymbolEffect.RotateConfiguration.trigger.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.RotateConfiguration.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.RotateConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.VariableColorConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.VariableColorConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.VariableColorConfiguration.trigger.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.VariableColorConfiguration.flags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t _SymbolEffect.VariableColorConfiguration.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.VariableColorConfiguration.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.VariableColorConfiguration.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xF000000000000006;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t _SymbolEffect.ScaleConfiguration.level.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _SymbolEffect.ScaleConfiguration.level.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.ScaleConfiguration.level.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.ScaleConfiguration.layered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _SymbolEffect.ScaleConfiguration.layered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*_SymbolEffect.ScaleConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.ScaleConfiguration.init()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _SymbolEffect.ScaleConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 4) ^ *(unsigned __int8 *)(a1 + 4) ^ 1) & 1;
  else
    return 0;
}

uint64_t _SymbolEffect.HiddenConfiguration.flags.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _SymbolEffect.HiddenConfiguration.flags.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.HiddenConfiguration.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.HiddenConfiguration.layered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _SymbolEffect.HiddenConfiguration.layered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*_SymbolEffect.HiddenConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.HiddenConfiguration.isHidden.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t _SymbolEffect.HiddenConfiguration.isHidden.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*_SymbolEffect.HiddenConfiguration.isHidden.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.HiddenConfiguration.init()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 1;
}

uint64_t _SymbolEffect.HiddenConfiguration.transitionFlags.getter()
{
  unsigned __int8 *v0;

  if (((v0[4] | ((*(_DWORD *)v0 & 0x10u) >> 4)) & 1) != 0)
    return *(unsigned int *)v0;
  else
    return *(_DWORD *)v0 | 0x10u;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _SymbolEffect.HiddenConfiguration(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)a1 != *(_DWORD *)a2) | ((*(_BYTE *)(a1 + 4) ^ *(_BYTE *)(a2 + 4)) | (*(_BYTE *)(a2 + 5) ^ *(_BYTE *)(a1 + 5))) & 1) == 0;
}

uint64_t _SymbolEffect.ReplaceConfiguration.flags.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _SymbolEffect.ReplaceConfiguration.flags.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.ReplaceConfiguration.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.ReplaceConfiguration.layered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _SymbolEffect.ReplaceConfiguration.layered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*_SymbolEffect.ReplaceConfiguration.layered.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.ReplaceConfiguration.speed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void _SymbolEffect.ReplaceConfiguration.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*_SymbolEffect.ReplaceConfiguration.speed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.ReplaceConfiguration.init()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 1065353216;
}

uint64_t _SymbolEffect.ReplaceConfiguration.transitionFlags.getter()
{
  unsigned __int8 *v0;

  if (((v0[4] | ((*(_DWORD *)v0 & 0x10u) >> 4)) & 1) != 0)
    return *(unsigned int *)v0;
  else
    return *(_DWORD *)v0 | 0x10u;
}

BOOL static _SymbolEffect.ReplaceConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && ((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) == 0)
    return *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _SymbolEffect.ReplaceConfiguration(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && ((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) == 0)
    return *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

uint64_t _SymbolEffect.Identified.identifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _SymbolEffect.Identified.identifier.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.Identified.identifier.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.Identified.serial.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _SymbolEffect.Identified.serial.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.Identified.serial.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.Identified.effect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;
  char v9;
  unsigned __int16 v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_DWORD *)(v1 + 44);
  v6 = *(_DWORD *)(v1 + 48);
  v7 = *(_BYTE *)(v1 + 52);
  v8 = *(_DWORD *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 60);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v10 = *(_WORD *)(v1 + 40);
  *(_WORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 28) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 44) = v9;
  return outlined copy of _SymbolEffect.Storage(v2, v3, v4, v10);
}

__n128 _SymbolEffect.Identified.effect.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  unsigned __int32 v4;
  unsigned __int32 v5;
  unsigned __int8 v6;
  unsigned __int32 v7;
  unsigned __int8 v8;
  __n128 result;
  __n128 v10;

  v10 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u16[4];
  v4 = a1[1].n128_u32[3];
  v5 = a1[2].n128_u32[0];
  v6 = a1[2].n128_u8[4];
  v7 = a1[2].n128_u32[2];
  v8 = a1[2].n128_u8[12];
  outlined consume of _SymbolEffect.Storage(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_WORD *)(v1 + 40));
  result = v10;
  *(__n128 *)(v1 + 16) = v10;
  *(_QWORD *)(v1 + 32) = v2;
  *(_WORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 44) = v4;
  *(_DWORD *)(v1 + 48) = v5;
  *(_BYTE *)(v1 + 52) = v6;
  *(_DWORD *)(v1 + 56) = v7;
  *(_BYTE *)(v1 + 60) = v8;
  return result;
}

uint64_t (*_SymbolEffect.Identified.effect.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.Identified.init(identifier:serial:effect:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int16 v5;
  float result;
  int v7;
  char v8;
  int v9;
  char v10;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_WORD *)(a3 + 24);
  result = *(float *)(a3 + 28);
  v7 = *(_DWORD *)(a3 + 32);
  v8 = *(_BYTE *)(a3 + 36);
  v9 = *(_DWORD *)(a3 + 40);
  v10 = *(_BYTE *)(a3 + 44);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a4 + 32) = v4;
  *(_WORD *)(a4 + 40) = v5;
  *(float *)(a4 + 44) = result;
  *(_DWORD *)(a4 + 48) = v7;
  *(_BYTE *)(a4 + 52) = v8;
  *(_DWORD *)(a4 + 56) = v9;
  *(_BYTE *)(a4 + 60) = v10;
  return result;
}

void _SymbolEffect.Phase.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = 1065353216;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 44) = 1065353216;
  *(_BYTE *)(a1 + 52) = 1;
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 60) = 257;
}

uint64_t *_SymbolEffect.applyLayoutDirection(from:)(uint64_t *result)
{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;

  v2 = *(_WORD *)(v1 + 24);
  if ((v2 & 0xF000) == 0x3000 && (*(_WORD *)(v1 + 24) & 0x100) != 0)
  {
    v3 = v1;
    v5 = *result;
    v4 = result[1];
    v7 = *(_QWORD *)v3;
    v6 = *(_QWORD *)(v3 + 8);
    v8 = *(_QWORD *)(v3 + 16);
    outlined copy of _SymbolEffect.Storage(*(_QWORD *)v3, v6, v8, v2);
    if (v4)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v15);
      swift_release_n();
      swift_release_n();
      v9 = v15;
      result = (uint64_t *)outlined consume of _SymbolEffect.Storage(v7, v6, v8, v2);
      if ((v9 & 1) == 0)
        return result;
    }
    else
    {
      v10 = swift_retain_n();
      v11 = specialized find<A>(_:key:)(v10);
      if (!v11)
      {
        swift_release_n();
        return (uint64_t *)outlined consume of _SymbolEffect.Storage(v7, v6, v8, v2);
      }
      v12 = *(unsigned __int8 *)(v11 + 72);
      swift_release_n();
      result = (uint64_t *)outlined consume of _SymbolEffect.Storage(v7, v6, v8, v2);
      if (v12 != 1)
        return result;
    }
    v13 = HIDWORD(v8) & 0xFFFFFF0F;
    v14 = BYTE4(v8) & 0xF0;
    if ((v8 & 0xF000000000) == 0)
      goto LABEL_11;
    if (v14 == 32)
    {
      v13 = v13 | 0x10;
      goto LABEL_14;
    }
    if (v14 == 16)
LABEL_11:
      v13 = v13 | 0x20;
LABEL_14:
    *(_QWORD *)v3 = v7;
    *(_QWORD *)(v3 + 8) = v6;
    *(_QWORD *)(v3 + 16) = v8 & 1 | (v13 << 32);
    *(_WORD *)(v3 + 24) = v2 & 1 | 0x3000;
  }
  return result;
}

uint64_t EnvironmentValues.symbolEffects.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_bridgeObjectRetain();
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.symbolEffects : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
    swift_bridgeObjectRetain();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.symbolEffects.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.symbolEffects.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.symbolEffects.modify;
}

void EnvironmentValues.symbolEffects.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (uint64_t *)(*a1)[4];
  v5 = **a1;
  v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v7 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v8 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SymbolEffectsKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static EnvironmentValues.SymbolEffectsKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t EnvironmentValues.appendSymbolEffect(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  int v9;
  char v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int v28;
  char v29;
  int v30;
  uint64_t v32;
  uint64_t v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  int v38;
  int v39;
  char v40;
  int v41;
  char v42;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 36);
  v9 = *(_DWORD *)(a1 + 40);
  v10 = *(_BYTE *)(a1 + 44);
  v11 = *(_WORD *)(a1 + 24);
  v34 = *(_QWORD *)a1;
  v35 = v4;
  v36 = v5;
  v37 = v11;
  v38 = v6;
  v39 = v7;
  v40 = v8;
  v41 = v9;
  v42 = v10;
  v12 = *v2;
  v13 = v2[1];
  v33[0] = *v2;
  v33[1] = v13;
  outlined copy of _SymbolEffect.Storage(v34, v4, v5, v11);
  _SymbolEffect.applyLayoutDirection(from:)(v33);
  v14 = v34;
  v15 = v35;
  v16 = v36;
  v17 = v37;
  v18 = v38;
  v29 = v40;
  v30 = v39;
  v27 = v42;
  v28 = v41;
  v32 = v36;
  if (v13)
  {
    outlined copy of _SymbolEffect.Storage(v34, v35, v36, v37);
    swift_retain_n();
    swift_retain_n();
    v19 = (_QWORD *)specialized PropertyList.Tracker.value<A>(_:for:)(v12);
    swift_release_n();
  }
  else
  {
    swift_retain();
    outlined copy of _SymbolEffect.Storage(v14, v15, v16, v17);
    v20 = swift_retain_n();
    v19 = (_QWORD *)specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v21 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
  v23 = v19[2];
  v22 = v19[3];
  if (v23 >= v22 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v19);
  v19[2] = v23 + 1;
  v24 = &v19[8 * v23];
  v24[4] = a2;
  v24[5] = 0;
  v24[6] = v21;
  v24[7] = v15;
  v24[8] = v32;
  *((_WORD *)v24 + 36) = v17;
  *((_DWORD *)v24 + 19) = v18;
  *((_DWORD *)v24 + 20) = v30;
  *((_BYTE *)v24 + 84) = v29;
  *((_DWORD *)v24 + 22) = v28;
  *((_BYTE *)v24 + 92) = v27;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v3, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_release();
  if (v13)
  {
    v25 = *v3;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v12, v25);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  return outlined consume of _SymbolEffect.Storage(v21, v15, v32, v17);
}

void *GraphicsImage.updateSymbolEffects(_:environment:transaction:animationsDisabled:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  void *v5;
  _BYTE *v6;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  char v21;
  char v22;
  char v23;

  v5 = 0;
  if (v4[8] == 2)
  {
    v6 = v4;
    v10 = *a2;
    v11 = *(void **)v4;
    v5 = *(void **)(*(_QWORD *)v4 + 16);
    v12 = *(void **)(*(_QWORD *)v4 + 32);
    v21 = *(_BYTE *)(*(_QWORD *)v4 + 44);
    v22 = *(_BYTE *)(*(_QWORD *)v4 + 24);
    v23 = *(_BYTE *)(*(_QWORD *)v4 + 45);
    if (a2[1])
    {
      v13 = v5;
      outlined copy of Image.Location(v12);
      swift_retain_n();
      swift_retain_n();
      v14 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
      swift_release_n();
    }
    else
    {
      swift_retain_n();
      v15 = v5;
      outlined copy of Image.Location(v12);
      v16 = swift_retain_n();
      v14 = specialized closure #1 in PropertyList.subscript.getter(v16);
      swift_bridgeObjectRetain();
    }
    swift_release_n();
    RBSymbolAnimator.updateSymbolEffects(_:effects:transaction:animationsDisabled:)(a1, v14, a3, a4 & 1);
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v5, sel_version);
    v18 = v21 & ~*(_BYTE *)(a1 + 41);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v5;
    *(_BYTE *)(v19 + 24) = v22;
    *(_QWORD *)(v19 + 32) = v12;
    *(_DWORD *)(v19 + 40) = v17;
    *(_BYTE *)(v19 + 44) = v18;
    *(_BYTE *)(v19 + 45) = v23;
    outlined consume of GraphicsImage.Contents?(v11, 2);
    *(_QWORD *)v6 = v19;
    v6[8] = 2;
  }
  return v5;
}

uint64_t RBSymbolAnimator.updateSymbolEffects(_:effects:transaction:animationsDisabled:)(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  char v15;
  char v16;
  char v17;
  int v18;
  float v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  int v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  float v55;
  uint64_t v56;
  int v57;
  double v58;
  char v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  void *v65;
  id v66;
  uint64_t v67;
  char v68;
  void *v69;
  id v70;
  char v71;
  void *v72;
  id v73;
  uint64_t v74;
  char v75;
  void *v76;
  id v77;
  char v78;
  void *v79;
  id v80;
  uint64_t v81;
  char v82;
  void *v83;
  id v84;
  char v85;
  uint64_t v86;
  void *v87;
  id v88;
  char v89;
  void *v90;
  id v91;
  uint64_t v92;
  char v93;
  void *v94;
  id v95;
  char v96;
  void *v97;
  id v98;
  uint64_t v99;
  char v100;
  void *v101;
  id v102;
  char v103;
  void *v104;
  float v105;
  id v106;
  char v107;
  void *v108;
  id v109;
  char v110;
  void *v111;
  id v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _BOOL4 v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned __int8 v130;
  void *v131;
  id v132;
  uint64_t v133;
  char v134;
  void *v135;
  id v136;
  char v137;
  int v138;
  void *v139;
  id v140;
  uint64_t v141;
  char v142;
  void *v143;
  id v144;
  char v145;
  void *v146;
  id v147;
  char v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  unsigned __int8 v156;
  char v157;
  char v158;
  unint64_t v159;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  unsigned int v169;
  _QWORD *v170;
  int v171;
  int v172;
  unint64_t v173;
  int v174;
  unsigned __int16 v175;
  uint64_t v177;
  __int128 v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 v187;
  _QWORD *v188;
  __int128 v189;
  uint64_t v190;
  __int16 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  BOOL v195;
  char v196;
  char v197;
  char v198;
  unsigned __int8 v199;
  char v200;
  char v201;
  char v202;
  unsigned __int8 v203;

  v5 = v4;
  v6 = result;
  v7 = *(_QWORD *)result;
  if (!*(_QWORD *)(*(_QWORD *)result + 16)
    && !*(_DWORD *)(result + 8)
    && (*(_BYTE *)(result + 41) & 1) == 0
    && !*(_QWORD *)(a2 + 16))
  {
    return result;
  }
  AGGraphClearUpdate();
  AGGraphGetValue();
  v8 = swift_retain_n();
  v161 = specialized closure #1 in PropertyList.subscript.getter(v8);
  swift_release();
  v9 = swift_retain();
  v10 = specialized find<A>(_:key:)(v9);
  if (v10)
  {
    v167 = *(_QWORD *)(v10 + 72);
    swift_retain();
  }
  else
  {
    v167 = 0;
  }
  swift_release();
  v11 = swift_retain();
  v12 = specialized find<A>(_:key:)(v11);
  if (v12)
  {
    v166 = *(_QWORD *)(v12 + 72);
    swift_retain();
  }
  else
  {
    v166 = 0;
  }
  swift_release_n();
  AGGraphSetUpdate();
  v13 = *(_DWORD *)(v6 + 16);
  v14 = *(float *)(v6 + 20);
  v15 = *(_BYTE *)(v6 + 24);
  v16 = *(_BYTE *)(v6 + 32);
  v165 = *(_DWORD *)(v6 + 36);
  v17 = *(_BYTE *)(v6 + 40);
  v18 = *(_DWORD *)(v6 + 44);
  v19 = *(float *)(v6 + 48);
  v20 = *(_BYTE *)(v6 + 52);
  v163 = *(_DWORD *)(v6 + 28);
  v164 = *(_DWORD *)(v6 + 56);
  v21 = *(_BYTE *)(v6 + 60);
  v203 = *(_BYTE *)(v6 + 12);
  v202 = v15;
  v201 = v16;
  v200 = v17;
  v199 = 0;
  v198 = v20;
  v197 = v21;
  v196 = 0;
  v22 = *(_QWORD *)(v7 + 16);
  if (v22 < 0x41)
  {
    v23 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    if (__OFADD__(v22, 63))
      goto LABEL_136;
    v23 = specialized Array.init(repeating:count:)(0, (v22 + 63) >> 6);
  }
  v195 = v22 > 0x40;
  v24 = &selRef_bundleURL;
  v181 = *(_QWORD *)(a2 + 16);
  if (!v181)
  {
    v177 = 0;
    v169 = 0;
    v188 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v123 = v22;
    if (!v22)
      goto LABEL_113;
    goto LABEL_101;
  }
  v162 = v13;
  v170 = (_QWORD *)v23;
  v168 = v4;
  v180 = v6;
  swift_bridgeObjectRetain();
  v177 = 0;
  v169 = 0;
  v25 = 0;
  v188 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v26 = 0.0;
  v159 = v22;
  v173 = v22;
  do
  {
    v27 = a2 + 32 + (v25 << 6);
    v28 = *(_QWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    v31 = *(_QWORD *)(v27 + 16);
    v30 = *(_QWORD *)(v27 + 24);
    v32 = *(_QWORD *)(v27 + 32);
    v33 = *(unsigned __int16 *)(v27 + 40);
    v35 = *(_DWORD *)(v27 + 44);
    v34 = *(float *)(v27 + 48);
    v184 = *(unsigned __int8 *)(v27 + 52);
    v36 = *(_DWORD *)(v27 + 56);
    v37 = *(unsigned __int8 *)(v27 + 60);
    v38 = v33 >> 12;
    outlined copy of _SymbolEffect.Storage(v31, v30, v32, *(_WORD *)(v27 + 40));
    outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
    v39 = v31;
    while (2)
    {
      v40 = *(_QWORD *)(*(_QWORD *)v180 + 16);
      v185 = v32;
      v186 = v39;
      if (v40)
      {
        v182 = v37;
        v41 = 0;
        v42 = (_DWORD *)(*(_QWORD *)v180 + 80);
        while (*((_QWORD *)v42 - 6) != v28 || *((_QWORD *)v42 - 5) != v29)
        {
          ++v41;
          v42 += 14;
          if (v40 == v41)
          {
            v44 = 1;
            v37 = v182;
            if ((a4 & 1) == 0)
              goto LABEL_35;
            goto LABEL_56;
          }
        }
        if (v41 >= v40)
          goto LABEL_134;
        v172 = v36;
        v51 = *((_QWORD *)v42 - 4);
        v52 = *((_QWORD *)v42 - 3);
        v53 = *((_QWORD *)v42 - 2);
        v54 = *((unsigned __int16 *)v42 - 4);
        v174 = *(v42 - 1);
        v55 = *(float *)v42;
        *(_QWORD *)&v178 = v51;
        *((_QWORD *)&v178 + 1) = v52;
        if (v195)
        {
          outlined copy of _SymbolEffect.Storage(v51, v52, v53, v54);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v170 = specialized _ArrayBuffer._consumeAndCreateNew()(v170);
          if (v41 >> 6 >= v170[2])
            goto LABEL_135;
          v170[(v41 >> 6) + 4] |= 1 << (v41 & 0x3F);
        }
        else
        {
          v56 = 1 << v41;
          if (v41 >= 0x40)
            v56 = 0;
          v177 |= v56;
          outlined copy of _SymbolEffect.Storage(v51, v52, v53, v54);
        }
        --v173;
        v37 = v182;
        v175 = v33;
        if ((~v186 & 0xF000000000000006) != 0)
          __asm { BR              X8 }
        *(_QWORD *)&v192 = v31;
        *((_QWORD *)&v192 + 1) = v30;
        v193 = v185;
        LOWORD(v194) = v33;
        v189 = v178;
        v190 = v53;
        v191 = v54;
        specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)&v192);
        if ((v59 & 1) != 0)
        {
          if (v174)
          {
            v114 = *((_QWORD *)&v178 + 1);
            *(float *)&v58 = v26;
            objc_msgSend(v168, sel_setPriority_ofAnimationWithID_, v58);
            v55 = v26;
LABEL_82:
            v26 = v26 + 1.0;
          }
          else
          {
            v114 = *((_QWORD *)&v178 + 1);
          }
          v115 = v178;
          switch(v57)
          {
            case 0:
              outlined copy of _SymbolEffect.Trigger?(v186);
              outlined consume of _SymbolEffect.Storage(v178, v114, v53, v54);
              v53 = 0;
              LOWORD(v54) = 0;
              v115 = v186;
              v114 &= 1u;
              break;
            case 1:
              v116 = v186;
              outlined copy of _SymbolEffect.Trigger?(v186);
              outlined consume of _SymbolEffect.Storage(v178, v114, v53, v54);
              v53 = 0;
              v114 &= 0x1FFFFFFFFuLL;
              LOWORD(v54) = 4096;
              goto LABEL_91;
            case 2:
              v116 = v186;
              outlined copy of _SymbolEffect.Trigger?(v186);
              outlined consume of _SymbolEffect.Storage(v178, v114, v53, v54);
              v53 = 0;
              v114 &= 0x1FFFFFFFFuLL;
              LOWORD(v54) = 0x2000;
              goto LABEL_91;
            case 3:
              v116 = v186;
              outlined copy of _SymbolEffect.Trigger?(v186);
              outlined consume of _SymbolEffect.Storage(v178, v114, v53, v54);
              v53 &= 0xFFFFFFFF00000001;
              LOWORD(v54) = v54 & 0x101 | 0x3000;
              goto LABEL_91;
            case 4:
              v116 = v186;
              outlined copy of _SymbolEffect.Trigger?(v186);
              outlined consume of _SymbolEffect.Storage(v178, v114, v53, v54);
              v53 = 0;
              v114 &= 0x1FFFFFFFFuLL;
              LOWORD(v54) = 0x4000;
              goto LABEL_91;
            case 5:
              v116 = v186;
              outlined copy of _SymbolEffect.Trigger?(v186);
              outlined consume of _SymbolEffect.Storage(v178, v114, v53, v54);
              v53 = 0;
              v114 = v114;
              LOWORD(v54) = 20480;
LABEL_91:
              v115 = v116;
              break;
            case 6:
              break;
            default:
              goto LABEL_82;
          }
          outlined copy of _SymbolEffect.Storage(v115, v114, v53, v54);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v188 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v188[2] + 1, 1, v188);
          v118 = v188[2];
          v117 = v188[3];
          if (v118 >= v117 >> 1)
          {
            v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v117 > 1), v118 + 1, 1, v188);
            v119 = v115;
            v188 = v122;
          }
          else
          {
            v119 = v115;
          }
          v188[2] = v118 + 1;
          v120 = &v188[7 * v118];
          v120[4] = v28;
          v120[5] = v29;
          v120[6] = v119;
          v120[7] = v114;
          v120[8] = v53;
          *((_WORD *)v120 + 36) = v54;
          *((_DWORD *)v120 + 19) = v174;
          *((float *)v120 + 20) = v55;
          v121 = v119;
          outlined consume of _SymbolEffect.Trigger?(v186);
          outlined consume of _SymbolEffect.Storage(v31, v30, v185, v175);
          outlined consume of _SymbolEffect.Storage(v121, v114, v53, v54);
          break;
        }
        if (v174)
          objc_msgSend(v168, sel_cancelAnimationWithID_);
        outlined consume of _SymbolEffect.Storage(v178, *((uint64_t *)&v178 + 1), v53, v54);
        v44 = 0;
        v32 = v185;
        v39 = v186;
        v36 = v172;
        if ((a4 & 1) == 0)
          goto LABEL_35;
LABEL_56:
        outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
        v60 = 0;
        v61 = 2143289344;
LABEL_57:
        outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v188 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v188[2] + 1, 1, v188);
        v63 = v188[2];
        v62 = v188[3];
        if (v63 >= v62 >> 1)
          v188 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v188);
        v188[2] = v63 + 1;
        v64 = &v188[7 * v63];
        v64[4] = v28;
        v64[5] = v29;
        v64[6] = v31;
        v64[7] = v30;
        v64[8] = v185;
        *((_WORD *)v64 + 36) = v33;
        *((_DWORD *)v64 + 19) = v60;
        *((_DWORD *)v64 + 20) = v61;
        outlined consume of _SymbolEffect.Trigger?(v186);
        outlined consume of _SymbolEffect.Storage(v31, v30, v185, v33);
        outlined consume of _SymbolEffect.Storage(v31, v30, v185, v33);
        break;
      }
      v44 = 1;
      if ((a4 & 1) != 0)
        goto LABEL_56;
LABEL_35:
      if ((v39 & 0xF000000000000006) != 0xF000000000000006 && (v44 || (v161 & 1) != 0))
        goto LABEL_56;
      switch(v38)
      {
        case 0u:
          v179 = v39 & 0xF000000000000006;
          v183 = v37;
          v171 = v36;
          v45 = (void *)*MEMORY[0x24BE7F328];
          v194 = MEMORY[0x24BEE1328];
          LOBYTE(v192) = v30 & 1;
          outlined init with take of Any(&v192, &v189);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          v46 = v45;
          v47 = v32;
          v48 = MEMORY[0x24BEE4B00];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v46, isUniquelyReferenced_nonNull_native);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v47, v33);
          v50 = 2;
          goto LABEL_69;
        case 1u:
          v179 = v39 & 0xF000000000000006;
          v183 = v37;
          v171 = v36;
          v65 = (void *)*MEMORY[0x24BE7F328];
          v194 = MEMORY[0x24BEE1328];
          LOBYTE(v192) = BYTE4(v30) & 1;
          outlined init with take of Any(&v192, &v189);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          v66 = v65;
          v67 = v32;
          v48 = MEMORY[0x24BEE4B00];
          v68 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v66, v68);

          swift_bridgeObjectRelease();
          v69 = (void *)*MEMORY[0x24BE7F320];
          v194 = MEMORY[0x24BEE44F0];
          LODWORD(v192) = v30;
          outlined init with take of Any(&v192, &v189);
          v70 = v69;
          v71 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v70, v71);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v67, v33);
          v50 = 12;
          goto LABEL_69;
        case 2u:
          v179 = v39 & 0xF000000000000006;
          v183 = v37;
          v171 = v36;
          v72 = (void *)*MEMORY[0x24BE7F318];
          v194 = MEMORY[0x24BEE44F0];
          LODWORD(v192) = v30;
          outlined init with take of Any(&v192, &v189);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          v73 = v72;
          v74 = v32;
          v48 = MEMORY[0x24BEE4B00];
          v75 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v73, v75);

          swift_bridgeObjectRelease();
          v76 = (void *)*MEMORY[0x24BE7F328];
          v194 = MEMORY[0x24BEE1328];
          LOBYTE(v192) = BYTE4(v30) & 1;
          outlined init with take of Any(&v192, &v189);
          v77 = v76;
          v78 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v77, v78);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v74, v33);
          v50 = 3;
          goto LABEL_69;
        case 3u:
          v179 = v39 & 0xF000000000000006;
          v183 = v37;
          v171 = v36;
          v79 = (void *)*MEMORY[0x24BE7F388];
          v194 = MEMORY[0x24BEE44F0];
          LODWORD(v192) = HIDWORD(v32);
          outlined init with take of Any(&v192, &v189);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          v80 = v79;
          v81 = MEMORY[0x24BEE4B00];
          v82 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v80, v82);

          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0)
          {
            v83 = (void *)*MEMORY[0x24BE7F380];
            v194 = MEMORY[0x24BEE13C8];
            *(_QWORD *)&v192 = v30;
            outlined init with take of Any(&v192, &v189);
            v84 = v83;
            v85 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v84, v85);

            swift_bridgeObjectRelease();
          }
          v86 = MEMORY[0x24BEE14E8];
          v87 = (void *)*MEMORY[0x24BE7F328];
          v194 = MEMORY[0x24BEE1328];
          LOBYTE(v192) = v33 & 1;
          outlined init with take of Any(&v192, &v189);
          v88 = v87;
          v89 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v88, v89);
          v48 = v81;

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v185, v33);
          v50 = 10;
          goto LABEL_70;
        case 4u:
          v179 = v39 & 0xF000000000000006;
          v183 = v37;
          v171 = v36;
          v90 = (void *)*MEMORY[0x24BE7F360];
          v194 = MEMORY[0x24BEE44F0];
          LODWORD(v192) = v30;
          outlined init with take of Any(&v192, &v189);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          v91 = v90;
          v92 = v32;
          v48 = MEMORY[0x24BEE4B00];
          v93 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v91, v93);

          swift_bridgeObjectRelease();
          v94 = (void *)*MEMORY[0x24BE7F328];
          v194 = MEMORY[0x24BEE1328];
          LOBYTE(v192) = BYTE4(v30) & 1;
          outlined init with take of Any(&v192, &v189);
          v95 = v94;
          v96 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v95, v96);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v92, v33);
          v50 = 11;
          goto LABEL_69;
        case 5u:
          v179 = v39 & 0xF000000000000006;
          v183 = v37;
          v171 = v36;
          v97 = (void *)*MEMORY[0x24BE7F378];
          v194 = MEMORY[0x24BEE44F0];
          LODWORD(v192) = v30;
          outlined init with take of Any(&v192, &v189);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          v98 = v97;
          v99 = v32;
          v48 = MEMORY[0x24BEE4B00];
          v100 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v98, v100);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v99, v33);
          v50 = 1;
LABEL_69:
          v86 = MEMORY[0x24BEE14E8];
LABEL_70:
          v101 = (void *)*MEMORY[0x24BE7F368];
          v194 = v86;
          LODWORD(v192) = v35;
          outlined init with take of Any(&v192, &v189);
          v102 = v101;
          v103 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v102, v103);

          swift_bridgeObjectRelease();
          v104 = (void *)*MEMORY[0x24BE7F348];
          v194 = v86;
          v105 = INFINITY;
          if (v179 != 0xF000000000000006)
            v105 = 1.0;
          if (!v184)
            v105 = v34;
          *(float *)&v192 = v105;
          outlined init with take of Any(&v192, &v189);
          v106 = v104;
          v107 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v106, v107);

          swift_bridgeObjectRelease();
          if ((v183 & 1) == 0)
          {
            v108 = (void *)*MEMORY[0x24BE7F350];
            v194 = v86;
            LODWORD(v192) = v171;
            outlined init with take of Any(&v192, &v189);
            v109 = v108;
            v110 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v109, v110);

            swift_bridgeObjectRelease();
          }
          v111 = (void *)*MEMORY[0x24BE7F340];
          v194 = v86;
          *(float *)&v192 = v26;
          outlined init with take of Any(&v192, &v189);
          v112 = v111;
          v113 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v112, v113);

          swift_bridgeObjectRelease();
          v60 = RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(v50, v48, v167, v166);
          if (v60)
          {
            v61 = LODWORD(v26);
            v26 = v26 + 1.0;
          }
          else
          {
            v61 = 2143289344;
          }
          v32 = v185;
          goto LABEL_57;
        default:
          v39 = 0xF000000000000006;
          if (v38 == 8)
            continue;
          if (v38 == 7)
          {
            v200 = BYTE4(v31) & 1;
            v199 = BYTE5(v31) & 1;
            v198 = v184;
            v197 = v37;
            v164 = v36;
            v165 = v31;
            v18 = v35;
            v19 = v34;
          }
          else
          {
            v203 = BYTE4(v31) & 1;
            v202 = v184;
            v169 = v31;
            v162 = v35;
            v14 = v34;
            v163 = v36;
            v201 = v37;
          }
          break;
      }
      break;
    }
    ++v25;
  }
  while (v25 != v181);
  swift_bridgeObjectRelease();
  v6 = v180;
  v5 = v168;
  v23 = (uint64_t)v170;
  v13 = v162;
  v22 = v159;
  v24 = &selRef_bundleURL;
  v123 = v173;
  if (v159)
  {
LABEL_101:
    if (v123 < 1)
      goto LABEL_113;
    v124 = v22;
    v125 = 0;
    v126 = v195;
    v127 = 76;
    while (v126)
    {
      if (v125 >> 6 >= *(_QWORD *)(v23 + 16))
      {
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
        JUMPOUT(0x234CD401CLL);
      }
      if ((*(_QWORD *)(v23 + 32 + 8 * (v125 >> 6)) & (1 << v125)) == 0)
        goto LABEL_110;
LABEL_106:
      ++v125;
      v127 += 56;
      if (v124 == v125)
        goto LABEL_113;
    }
    v128 = 1 << v125;
    if (v125 >= 0x40)
      v128 = 0;
    if ((v128 & v177) != 0)
      goto LABEL_106;
LABEL_110:
    if (v125 >= *(_QWORD *)(*(_QWORD *)v6 + 16))
      goto LABEL_133;
    if (*(_DWORD *)(*(_QWORD *)v6 + v127))
      objc_msgSend(v5, v24[215]);
    goto LABEL_106;
  }
LABEL_113:
  v129 = *(_DWORD *)(v6 + 8);
  if (v169 == v129 && (v130 = v199, v199 == *(unsigned __int8 *)(v6 + 41)))
  {
    swift_release();
    swift_release();
    v156 = v203;
    v157 = v202;
    v158 = v201;
    v152 = v200;
    v153 = v198;
    v154 = v197;
    v155 = v196;
    swift_bridgeObjectRelease();
    *(_QWORD *)v6 = v188;
    *(_DWORD *)(v6 + 8) = v169;
    *(_BYTE *)(v6 + 12) = v156;
    *(_DWORD *)(v6 + 16) = v13;
    *(float *)(v6 + 20) = v14;
    *(_BYTE *)(v6 + 24) = v157;
    *(_DWORD *)(v6 + 28) = v163;
    *(_BYTE *)(v6 + 32) = v158;
  }
  else
  {
    if (((v161 | a4) & 1) != 0)
    {
      v187 = v203;
    }
    else
    {
      v187 = v203;
      if ((*(_BYTE *)(v6 + 61) & 1) == 0)
      {
        if (v169 != v129 || ((v203 ^ *(unsigned __int8 *)(v6 + 12)) & 1) != 0)
        {
          v131 = (void *)*MEMORY[0x24BE7F328];
          v194 = MEMORY[0x24BEE1328];
          LOBYTE(v192) = v203;
          outlined init with take of Any(&v192, &v189);
          v132 = v131;
          v133 = MEMORY[0x24BEE4B00];
          v134 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v132, v134);

          swift_bridgeObjectRelease();
          v135 = (void *)*MEMORY[0x24BE7F368];
          v194 = MEMORY[0x24BEE14E8];
          LODWORD(v192) = v13;
          outlined init with take of Any(&v192, &v189);
          v136 = v135;
          v137 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v136, v137);

          swift_bridgeObjectRelease();
          if (v169 || *(_DWORD *)(v6 + 8))
            RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(4, v133, v167, v166);
          else
            swift_bridgeObjectRelease();
        }
        v138 = v199;
        if (v199 != *(unsigned __int8 *)(v6 + 41))
        {
          v139 = (void *)*MEMORY[0x24BE7F328];
          v194 = MEMORY[0x24BEE1328];
          LOBYTE(v192) = v200;
          outlined init with take of Any(&v192, &v189);
          v140 = v139;
          v141 = MEMORY[0x24BEE4B00];
          v142 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v140, v142);

          swift_bridgeObjectRelease();
          v143 = (void *)*MEMORY[0x24BE7F310];
          v194 = MEMORY[0x24BEE44F0];
          LODWORD(v192) = v165;
          outlined init with take of Any(&v192, &v189);
          v144 = v143;
          v145 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v144, v145);

          swift_bridgeObjectRelease();
          v146 = (void *)*MEMORY[0x24BE7F368];
          v194 = MEMORY[0x24BEE14E8];
          LODWORD(v192) = v18;
          outlined init with take of Any(&v192, &v189);
          v147 = v146;
          v148 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v189, v147, v148);

          swift_bridgeObjectRelease();
          if (v138)
            v149 = 9;
          else
            v149 = 5;
          RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(v149, v141, v167, v166);
        }
      }
    }
    objc_msgSend(v5, sel_setScaleLevel_, v169);
    v130 = v199;
    objc_msgSend(v5, sel_setHidden_, v199);
    swift_release();
    swift_release();
    v150 = v202;
    v151 = v201;
    v152 = v200;
    v153 = v198;
    v154 = v197;
    v155 = v196;
    swift_bridgeObjectRelease();
    *(_QWORD *)v6 = v188;
    *(_DWORD *)(v6 + 8) = v169;
    *(_BYTE *)(v6 + 12) = v187;
    *(_DWORD *)(v6 + 16) = v13;
    *(float *)(v6 + 20) = v14;
    *(_BYTE *)(v6 + 24) = v150;
    *(_DWORD *)(v6 + 28) = v163;
    *(_BYTE *)(v6 + 32) = v151;
  }
  *(_DWORD *)(v6 + 36) = v165;
  *(_BYTE *)(v6 + 40) = v152;
  *(_BYTE *)(v6 + 41) = v130;
  *(_DWORD *)(v6 + 44) = v18;
  *(float *)(v6 + 48) = v19;
  *(_BYTE *)(v6 + 52) = v153;
  *(_DWORD *)(v6 + 56) = v164;
  *(_BYTE *)(v6 + 60) = v154;
  *(_BYTE *)(v6 + 61) = v155;
  return swift_bridgeObjectRelease();
}

id RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  id v14;
  uint64_t v15;
  _OWORD v17[2];
  __int128 aBlock;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  void *ObjectType;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;

  if (a3 | a4)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a3;
    *(_QWORD *)(v8 + 24) = a4;
    v21 = partial apply for closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:);
    v22 = v8;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v19 = thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ();
    ObjectType = &block_descriptor_7;
    v9 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    v10 = (void *)*MEMORY[0x24BE7F338];
    ObjectType = (void *)swift_getObjectType();
    *(_QWORD *)&aBlock = v9;
    outlined init with take of Any(&aBlock, v17);
    v11 = v10;
    _Block_copy(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v11, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    _Block_release(v9);
  }
  type metadata accessor for RBSymbolAnimationOptionKey(0);
  lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v4, sel_addAnimation_options_, a1, isa);

  if ((_DWORD)v14)
  {
    if (a3)
      v15 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 88))();
    if (a4)
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 88))(v15);
  }
  return v14;
}

uint64_t closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  swift_retain();
  specialized static Update.begin()();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:);
  *(_QWORD *)(v7 + 24) = v6;
  v8 = one-time initialization token for actions;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[2 * v11];
  v12[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v12[5] = v7;
  static Update.actions = v9;
  swift_bridgeObjectRelease();
  static Update.end()();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t ImageResolutionContext.willUpdateVectorGlyph(to:variableValue:)(id a1, double a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v6;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  id v19;
  void *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void *v54;
  id v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  void *v58;
  id v59;
  char v60;
  void *v61;
  id v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  int v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;

  v3 = (void *)v2[2];
  if (!v3)
    return 1;
  v6 = type metadata accessor for ImageResolutionContext();
  if ((*((_BYTE *)v2 + *(int *)(v6 + 40)) & 8) != 0
    || *(_DWORD *)((char *)v2 + *(int *)(v6 + 28)) == *MEMORY[0x24BE096C0])
  {
    return 1;
  }
  v8 = v3;
  v9 = objc_msgSend(v8, sel_glyph);
  if (!v9 || (v10 = v9, v9, v10 != a1))
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v11 = swift_retain();
    v12 = specialized closure #1 in PropertyList.subscript.getter(v11);
    swift_release();
    if ((v12 & 1) != 0)
      goto LABEL_8;
    v13 = 0x302000000;
    v14 = *v2;
    if (v2[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v14, (uint64_t)&v103);
      swift_release_n();
      swift_release_n();
      v15 = v103;
      v13 = DWORD2(v103) | ((unint64_t)BYTE12(v103) << 32);
      v16 = BYTE13(v103);
      v17 = BYTE14(v103);
      v18 = v104;
      if (BYTE13(v103))
        goto LABEL_11;
    }
    else
    {
      v22 = swift_retain_n();
      v23 = specialized find<A>(_:key:)(v22);
      if (v23)
      {
        v15 = *(_QWORD *)(v23 + 72);
        v13 = *(unsigned int *)(v23 + 80) | ((unint64_t)*(unsigned __int8 *)(v23 + 84) << 32);
        v17 = *(_BYTE *)(v23 + 86);
        v18 = *(_QWORD *)(v23 + 88);
        v16 = *(unsigned __int8 *)(v23 + 85);
        outlined copy of ContentTransition.Storage(v15, v13, v16);
        swift_retain();
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v15 = 0x8000000000;
      }
      swift_release_n();
      if (v16)
      {
LABEL_11:
        outlined copy of ContentTransition.Storage(v15, v13, v16);
        if (v16 == 2)
        {
          outlined copy of ContentTransition.Storage(v15, v13, 2);
          v19 = objc_msgSend(v8, sel_glyph);
          if (v19)
          {
            v20 = v19;
            if ((objc_msgSend(v19, sel_canBeInterpolatedWith_, a1) & 1) != 0)
            {

              goto LABEL_27;
            }
            outlined consume of ContentTransition.Storage(v15, v13, 2);
            v54 = (void *)*MEMORY[0x24BE7F358];
            v105 = MEMORY[0x24BEE44F0];
            LODWORD(v103) = v15;
            outlined init with take of Any(&v103, &v98);
            v55 = v54;
            v56 = MEMORY[0x24BEE4B00];
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v98, v55, isUniquelyReferenced_nonNull_native);

            swift_bridgeObjectRelease();
            v58 = (void *)*MEMORY[0x24BE7F328];
            v105 = MEMORY[0x24BEE1328];
            LOBYTE(v103) = BYTE4(v15) & 1;
            outlined init with take of Any(&v103, &v98);
            v59 = v58;
            v60 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v98, v59, v60);

            swift_bridgeObjectRelease();
            v61 = (void *)*MEMORY[0x24BE7F368];
            v105 = MEMORY[0x24BEE14E8];
            LODWORD(v103) = v13;
            outlined init with take of Any(&v103, &v98);
            v62 = v61;
            v63 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v98, v62, v63);
            v64 = v56;

            swift_bridgeObjectRelease();
            v97 = v13;
            v94 = v20;
            if (v18)
            {
              v93 = v56;
              v65 = v18;
            }
            else
            {
              v81 = swift_retain();
              v82 = specialized find<A>(_:key:)(v81);
              if (!v82)
              {
                swift_release();
                goto LABEL_45;
              }
              v65 = *(_QWORD *)(v82 + 72);
              swift_retain();
              swift_release();
              if (!v65)
              {
LABEL_45:
                v75 = swift_retain();
                v76 = specialized find<A>(_:key:)(v75);
                if (v76)
                {
                  v77 = *(_QWORD *)(v76 + 72);
                  swift_retain();
                }
                else
                {
                  v77 = 0;
                }
                swift_release();
                v83 = swift_retain();
                v84 = specialized find<A>(_:key:)(v83);
                if (v84)
                {
                  v85 = *(_QWORD *)(v84 + 72);
                  swift_retain();
                }
                else
                {
                  v85 = 0;
                }
                swift_release();
                RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(6, v64, v77, v85);
                swift_release();

                outlined consume of ContentTransition.Storage(v15, v97, 2);
                swift_release();
                swift_release();
                swift_release();
                return 0;
              }
              v93 = v64;
            }
            v66 = (void *)*MEMORY[0x24BE7F370];
            v67 = objc_allocWithZone(MEMORY[0x24BE7EEE8]);
            swift_retain();
            v91 = v66;
            v68 = objc_msgSend(v67, sel_init);
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v65 + 96))(&v103);
            v69 = v103;
            v70 = v104;
            v71 = v105;
            v72 = v106;
            v73 = v107;
            v98 = v103;
            v99 = v104;
            v100 = v105;
            v101 = v106;
            v102 = v107;
            Animation.Function.apply(to:)();
            outlined consume of Animation.Function(v69, *((uint64_t *)&v69 + 1), v70, v71, v72, v73);
            v105 = type metadata accessor for RBAnimation();
            *(_QWORD *)&v103 = v68;
            outlined init with take of Any(&v103, &v98);
            v74 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v98, v91, v74);
            v64 = v93;
            swift_release();

            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
        }
LABEL_27:
        if (v18)
          goto LABEL_28;
        v86 = swift_retain();
        v87 = specialized find<A>(_:key:)(v86);
        if (v87)
        {
          v18 = *(_QWORD *)(v87 + 72);
          swift_retain();
          swift_release();
          if (v18)
          {
LABEL_28:
            v89 = v15;
            v90 = v13;
            v88 = v17;
            v92 = v16;
            v95 = v15;
            v96 = v13;
            v30 = (void *)*MEMORY[0x24BE7F370];
            v31 = objc_allocWithZone(MEMORY[0x24BE7EEE8]);
            v32 = v30;
            swift_retain();
            v33 = objc_msgSend(v31, sel_init);
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v18 + 96))(&v103);
            v34 = v103;
            v35 = v104;
            v36 = v105;
            v37 = v106;
            v38 = v107;
            v98 = v103;
            v99 = v104;
            v100 = v105;
            v101 = v106;
            v102 = v107;
            Animation.Function.apply(to:)();
            outlined consume of Animation.Function(v34, *((uint64_t *)&v34 + 1), v35, v36, v37, v38);
            v105 = type metadata accessor for RBAnimation();
            *(_QWORD *)&v103 = v33;
            outlined init with take of Any(&v103, &v98);
            v39 = MEMORY[0x24BEE4B00];
            v40 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v98, v32, v40);
            v41 = v39;

            swift_bridgeObjectRelease();
            if (v92)
            {
              if (v92 == 1)
                swift_bridgeObjectRetain();
              outlined consume of ContentTransition.Storage(v89, v90, v92);
              outlined consume of ContentTransition.Storage(0x8000000003, 0x302000000, 0);
              outlined consume of ContentTransition.Storage(v89, v90, v92);
              v42 = v8;
              v43 = v95;
            }
            else
            {
              *(_QWORD *)&v103 = v89;
              DWORD2(v103) = v90;
              BYTE12(v103) = BYTE4(v90);
              *(_QWORD *)&v98 = 0x8000000003;
              BYTE10(v98) = 0;
              WORD4(v98) = 0;
              *(_WORD *)((char *)&v98 + 11) = 770;
              v53 = specialized static ContentTransition.NamedTransition.== infix(_:_:)((uint64_t *)&v103, (uint64_t *)&v98);
              outlined consume of ContentTransition.Storage(v89, v90, 0);
              outlined consume of ContentTransition.Storage(0x8000000003, 0x302000000, 0);
              outlined consume of ContentTransition.Storage(v89, v90, 0);
              v42 = v8;
              v43 = v95;
              if (!(v88 & 1 | ((v53 & 1) == 0)))
                goto LABEL_33;
            }
            v44 = (void *)*MEMORY[0x24BE7F330];
            v105 = MEMORY[0x24BEE44F0];
            LODWORD(v103) = 1;
            outlined init with take of Any(&v103, &v98);
            v45 = v44;
            v46 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v98, v45, v46);

            swift_bridgeObjectRelease();
LABEL_33:
            v47 = swift_retain();
            v48 = specialized find<A>(_:key:)(v47);
            if (v48)
            {
              v49 = *(_QWORD *)(v48 + 72);
              swift_retain();
            }
            else
            {
              v49 = 0;
            }
            swift_release();
            v50 = swift_retain();
            v51 = specialized find<A>(_:key:)(v50);
            if (v51)
            {
              v52 = *(_QWORD *)(v51 + 72);
              swift_retain();
            }
            else
            {
              v52 = 0;
            }
            swift_release();
            RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(7, v41, v49, v52);
            swift_release();

            swift_release();
            outlined consume of ContentTransition.Storage(v43, v96, v92);
            swift_release();
            swift_release();
            swift_release();
            return 0;
          }
        }
        else
        {
          swift_release();
        }
        outlined consume of ContentTransition.Storage(v15, v13, v16);
        swift_release();

        outlined consume of ContentTransition.Storage(v15, v13, v16);
        return 0;
      }
    }
    if (((v15 >> 38) & 3) >= 2)
      __asm { BR              X10 }
    outlined copy of ContentTransition.Storage(v15, v13, 0);
    goto LABEL_27;
  }
  objc_msgSend(v8, sel_variableValue);
  if (v21 == a2)
    goto LABEL_16;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v24 = swift_retain();
  v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
  swift_release();
  if ((v25 & 1) == 0)
  {
    v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v27 = swift_retain();
    v28 = specialized find<A>(_:key:)(v27);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 72);
      swift_retain();
    }
    else
    {
      v29 = 0;
    }
    swift_release();
    v78 = swift_retain();
    v79 = specialized find<A>(_:key:)(v78);
    if (v79)
    {
      v80 = *(_QWORD *)(v79 + 72);
      swift_retain();
    }
    else
    {
      v80 = 0;
    }
    swift_release();
    RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(0, v26, v29, v80);
    swift_release();

    swift_release();
    swift_release();
    return 0;
  }
LABEL_8:
  swift_release();
LABEL_16:

  return 0;
}

uint64_t _SymbolEffect.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int16 v9;
  uint64_t result;
  int v11;

  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(float *)(v0 + 28);
  v6 = *(_DWORD *)(v0 + 32);
  v11 = *(unsigned __int8 *)(v0 + 36);
  v7 = *(unsigned int *)(v0 + 40);
  v8 = *(unsigned __int8 *)(v0 + 44);
  v9 = *(_WORD *)(v0 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)v0, v3, v4, v9);
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = outlined consume of _SymbolEffect.Storage(v2, v3, v4, v9);
  if (!v1 && (v5 != 1.0 || ((v11 ^ 1) & 1) != 0 || ((v8 ^ 1) & 1) != 0))
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    return specialized ProtobufEncoder.encodeMessage<A>(_:)(v6, v11 | (unint64_t)(v7 << 32), v8, v5);
  }
  return result;
}

unint64_t _SymbolEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  char v8;
  char v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int16 v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v6 = 2;
  v7 = 1.0;
  v8 = 1;
  v43 = 4294967294;
  v9 = 1;
  while (1)
  {
    result = a1[3];
    if (result)
    {
      v12 = a1[4];
      if (v4 < v12)
        goto LABEL_14;
      if (v12 < v4)
        goto LABEL_53;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_54;
    if (result < 8)
      goto LABEL_53;
LABEL_14:
    if (result >> 3 != 2)
      break;
    if ((result & 7) != 2)
      goto LABEL_53;
    v22 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    v24 = v22[2];
    v23 = v22[3];
    if (v24 >= v23 >> 1)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
    v22[2] = v24 + 1;
    v22[v24 + 4] = v5;
    a1[5] = v22;
    v25 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_54;
    if (v25 < 0)
      goto LABEL_66;
    v26 = a1[1] + v25;
    if (v5 < v26)
      goto LABEL_53;
    a1[2] = v26;
    _SymbolEffect.Options.init(from:)((unint64_t)a1, (uint64_t)&v44);
    v27 = (_QWORD *)a1[5];
    if (!v27[2])
      goto LABEL_68;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v28 = v27[2];
      if (!v28)
        goto LABEL_52;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      v27 = (_QWORD *)result;
      v28 = *(_QWORD *)(result + 16);
      if (!v28)
      {
LABEL_52:
        __break(1u);
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_54:
        v31 = v41;
        v32 = v42;
        v33 = v43;
        v34 = v6;
        return outlined consume of _SymbolEffect.Storage?(v31, v32, v33, v34);
      }
    }
    v29 = v28 - 1;
    v30 = v27[v29 + 4];
    v27[2] = v29;
    a1[5] = v27;
    a1[2] = v30;
    v7 = *(float *)&v44;
    v9 = v45;
    v40 = __PAIR64__(HIDWORD(v44), HIDWORD(v45));
    v8 = v46;
LABEL_7:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if ((~(_DWORD)v43 & 0xFFFFFFFE) != 0 || (v6 & 0xFEFE) != 2)
      {
        *(_QWORD *)a2 = v41;
        *(_QWORD *)(a2 + 8) = v42;
        *(_QWORD *)(a2 + 16) = v43;
        *(_WORD *)(a2 + 24) = v6;
        *(float *)(a2 + 28) = v7;
        *(_DWORD *)(a2 + 32) = HIDWORD(v40);
        *(_BYTE *)(a2 + 36) = v9 & 1;
        *(_DWORD *)(a2 + 40) = v40;
        *(_BYTE *)(a2 + 44) = v8 & 1;
        return result;
      }
LABEL_4:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  if (result >> 3 != 1)
  {
    switch(result & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_54;
        goto LABEL_7;
      case 1uLL:
        v11 = a1[1] + 8;
        if (v5 >= v11)
          goto LABEL_6;
        goto LABEL_53;
      case 2uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_54;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_70;
        v11 = a1[1] + result;
        if (v5 < v11)
          goto LABEL_53;
LABEL_6:
        a1[1] = v11;
        break;
      case 5uLL:
        v11 = a1[1] + 4;
        if (v5 < v11)
          goto LABEL_53;
        goto LABEL_6;
      default:
        goto LABEL_53;
    }
    goto LABEL_7;
  }
  if ((result & 7) != 2)
    goto LABEL_53;
  v13 = (_QWORD *)a1[5];
  v14 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v6 = v13[2];
  v15 = v13[3];
  if (v6 >= v15 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v6 + 1, 1, v13);
  v13[2] = v6 + 1;
  v13[v6 + 4] = v5;
  a1[5] = v13;
  v16 = ProtobufDecoder.decodeVarint()();
  if (v2)
    goto LABEL_60;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = a1[1] + v16;
    if (v5 >= v17)
    {
      a1[2] = v17;
      _SymbolEffect.Storage.init(from:)((unint64_t)a1, &v44);
      v18 = (_QWORD *)a1[5];
      if (!v18[2])
        goto LABEL_67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v19 = v18[2];
        if (!v19)
          goto LABEL_69;
      }
      else
      {
        v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        v19 = v18[2];
        if (!v19)
          goto LABEL_69;
      }
      v20 = v19 - 1;
      v21 = v18[v20 + 4];
      v18[2] = v20;
      result = outlined consume of _SymbolEffect.Storage?(v41, v42, v43, v14);
      a1[5] = v18;
      a1[2] = v21;
      v41 = v44;
      v42 = v45;
      v43 = v46;
      v6 = v47;
      goto LABEL_7;
    }
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
LABEL_60:
    v31 = v41;
    v32 = v42;
    v33 = v43;
    v34 = v14;
    return outlined consume of _SymbolEffect.Storage?(v31, v32, v33, v34);
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  __break(1u);
  v35 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v6);
  v36 = v35[2];
  if (!v36)
  {
    __break(1u);
    LOWORD(v5) = (_WORD)v35;
    v35 = (_QWORD *)a1[5];
    if (v35[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v36 = v35[2];
        if (v36)
          goto LABEL_64;
LABEL_74:
        __break(1u);
        JUMPOUT(0x234CD5618);
      }
    }
    else
    {
      __break(1u);
    }
    v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    v36 = v35[2];
    if (!v36)
      goto LABEL_74;
  }
LABEL_64:
  v37 = v36 - 1;
  v38 = v35[v37 + 4];
  v35[2] = v37;
  result = outlined consume of _SymbolEffect.Storage?(v41, v42, v43, v5);
  a1[5] = v35;
  a1[2] = v38;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int16 v9;
  uint64_t result;
  int v11;

  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(float *)(v0 + 28);
  v6 = *(_DWORD *)(v0 + 32);
  v11 = *(unsigned __int8 *)(v0 + 36);
  v7 = *(unsigned int *)(v0 + 40);
  v8 = *(unsigned __int8 *)(v0 + 44);
  v9 = *(_WORD *)(v0 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)v0, v3, v4, v9);
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = outlined consume of _SymbolEffect.Storage(v2, v3, v4, v9);
  if (!v1 && (v5 != 1.0 || ((v11 ^ 1) & 1) != 0 || v8 != 1))
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    return specialized ProtobufEncoder.encodeMessage<A>(_:)(v6, v11 | (unint64_t)(v7 << 32), v8, v5);
  }
  return result;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.init(from:)(a1, a2);
}

void _SymbolEffect.Storage.encode(to:)()
{
  __asm { BR              X10 }
}

uint64_t sub_234CD57AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  outlined copy of _SymbolEffect.Trigger?(v2);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_12;
  while (1)
  {
    v8 = v7[2];
    v9 = v7[3];
    v10 = v8 + 1;
    if (v8 >= v9 >> 1)
    {
      v15 = v8 + 1;
      v12 = v7;
      v13 = v7[2];
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v8 + 1, 1, v12);
      v8 = v13;
      v10 = v15;
      v7 = v14;
    }
    v7[2] = v10;
    v7[v8 + 4] = v6;
    *(_QWORD *)(v1 + 24) = v7;
    if (!__OFADD__(v6, 1))
      break;
    __break(1u);
LABEL_12:
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  *(_QWORD *)(v1 + 8) = v6 + 1;
  if ((~v2 & 0xF000000000000006) == 0
    || (outlined copy of _SymbolEffect.Trigger?(v2),
        specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2),
        outlined consume of _SymbolEffect.Storage(v2, v5, v4, v3),
        !v0))
  {
    if ((v5 & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
    ProtobufEncoder.endLengthDelimited()();
  }
  return outlined consume of _SymbolEffect.Storage(v2, v5, v4, v3);
}

unint64_t _SymbolEffect.Storage.init(from:)@<X0>(unint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  _QWORD *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;
  unsigned int v101;
  unsigned __int8 v102;
  char v103;
  uint64_t *v104;

  v104 = a2;
  v4 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0x8000;
LABEL_4:
    v4[3] = 0;
    v11 = v104;
    *v104 = v7;
    v11[1] = v8;
    v11[2] = v9;
    *((_WORD *)v11 + 12) = v10;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0x8000;
  while (2)
  {
    result = v4[3];
    if (result)
    {
      v13 = v4[4];
      if (v5 < v13)
        goto LABEL_14;
      if (v13 < v5)
        goto LABEL_151;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
    if (result < 8)
      goto LABEL_151;
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v14 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v3 = v14[2];
        v15 = v14[3];
        v16 = (char *)(v3 + 1);
        if (v3 >= v15 >> 1)
        {
          v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v3 + 1, 1, v14);
          v16 = (char *)(v3 + 1);
          v14 = v86;
        }
        v14[2] = v16;
        v14[v3 + 4] = v6;
        v4[5] = v14;
        v17 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = v4[1] + v17;
          if (v6 < v18)
            goto LABEL_151;
          v4[2] = v18;
          _SymbolEffect.PulseConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
          v19 = (_QWORD *)v4[5];
          if (!v19[2])
            goto LABEL_183;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v20 = v19[2];
            if (!v20)
              goto LABEL_191;
          }
          else
          {
            v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
            v20 = v19[2];
            if (!v20)
              goto LABEL_191;
          }
          v21 = v20 - 1;
          v3 = v19[v21 + 4];
          v19[2] = v21;
          result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
          v9 = 0;
          v10 = 0;
          v4[5] = v19;
          v4[2] = v3;
          v7 = v98;
          v8 = v99;
LABEL_7:
          v5 = v4[1];
          v6 = v4[2];
          if (v5 >= v6)
            goto LABEL_4;
          continue;
        }
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        __break(1u);
        v94 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
        v95 = v94[2];
        if (v95)
          goto LABEL_174;
        __break(1u);
        v94 = (_QWORD *)v4[5];
        if (!v94[2])
        {
          __break(1u);
LABEL_201:
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          v95 = v94[2];
          if (v95)
            goto LABEL_174;
LABEL_156:
          __break(1u);
          v94 = (_QWORD *)v4[5];
          if (v94[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v95 = v94[2];
              if (v95)
                goto LABEL_174;
              goto LABEL_159;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          v95 = v94[2];
          if (v95)
            goto LABEL_174;
LABEL_159:
          __break(1u);
          v94 = (_QWORD *)v4[5];
          if (v94[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v95 = v94[2];
              if (v95)
                goto LABEL_174;
              goto LABEL_162;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          v95 = v94[2];
          if (v95)
            goto LABEL_174;
LABEL_162:
          __break(1u);
          v94 = (_QWORD *)v4[5];
          if (v94[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v95 = v94[2];
              if (v95)
                goto LABEL_174;
              goto LABEL_165;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          v95 = v94[2];
          if (v95)
            goto LABEL_174;
LABEL_165:
          __break(1u);
          v94 = (_QWORD *)v4[5];
          if (v94[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v95 = v94[2];
              if (v95)
                goto LABEL_174;
              goto LABEL_168;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          v95 = v94[2];
          if (v95)
            goto LABEL_174;
LABEL_168:
          __break(1u);
          v94 = (_QWORD *)v4[5];
          if (v94[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v95 = v94[2];
              if (v95)
                goto LABEL_174;
              goto LABEL_171;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          v95 = v94[2];
          if (v95)
            goto LABEL_174;
LABEL_171:
          __break(1u);
          v94 = (_QWORD *)v4[5];
          if (v94[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v95 = v94[2];
              if (v95)
                goto LABEL_174;
              goto LABEL_220;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          v95 = v94[2];
          if (v95)
            goto LABEL_174;
LABEL_220:
          __break(1u);
          JUMPOUT(0x234CD68B4);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_201;
        v95 = v94[2];
        if (!v95)
          goto LABEL_156;
LABEL_174:
        v96 = v95 - 1;
        v97 = v94[v96 + 4];
        v94[2] = v96;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v4[5] = v94;
        v4[2] = v97;
        return result;
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v22 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        v3 = v22[2];
        v23 = v22[3];
        v24 = (char *)(v3 + 1);
        if (v3 >= v23 >> 1)
        {
          v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v3 + 1, 1, v22);
          v24 = (char *)(v3 + 1);
          v22 = v87;
        }
        v22[2] = v24;
        v22[v3 + 4] = v6;
        v4[5] = v22;
        v25 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if (v25 < 0)
          goto LABEL_176;
        v26 = v4[1] + v25;
        if (v6 < v26)
          goto LABEL_151;
        v4[2] = v26;
        _SymbolEffect.BounceConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v27 = (_QWORD *)v4[5];
        if (!v27[2])
          goto LABEL_184;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v28 = v27[2];
          if (!v28)
            goto LABEL_192;
        }
        else
        {
          v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          v28 = v27[2];
          if (!v28)
            goto LABEL_192;
        }
        v29 = v28 - 1;
        v3 = v27[v29 + 4];
        v27[2] = v29;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v9 = 0;
        v4[5] = v27;
        v4[2] = v3;
        v7 = v98;
        v30 = 0x100000000;
        if (!BYTE4(v99))
          v30 = 0;
        v8 = v30 | v99;
        v10 = 0x2000;
        goto LABEL_7;
      case 3uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v31 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v3 = v31[2];
        v32 = v31[3];
        v33 = (char *)(v3 + 1);
        if (v3 >= v32 >> 1)
        {
          v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v3 + 1, 1, v31);
          v33 = (char *)(v3 + 1);
          v31 = v88;
        }
        v31[2] = v33;
        v31[v3 + 4] = v6;
        v4[5] = v31;
        v34 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if (v34 < 0)
          goto LABEL_177;
        v35 = v4[1] + v34;
        if (v6 < v35)
          goto LABEL_151;
        v4[2] = v35;
        _SymbolEffect.WiggleConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v36 = (_QWORD *)v4[5];
        if (!v36[2])
          goto LABEL_185;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v37 = v36[2];
          if (!v37)
            goto LABEL_193;
        }
        else
        {
          v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
          v37 = v36[2];
          if (!v37)
            goto LABEL_193;
        }
        v38 = v37 - 1;
        v3 = v36[v38 + 4];
        v36[2] = v38;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v4[5] = v36;
        v4[2] = v3;
        v7 = v98;
        v8 = v99;
        v9 = v100 | ((unint64_t)v101 << 32);
        if (v103)
          v39 = 256;
        else
          v39 = 0;
        v10 = v39 | v102 | 0x3000;
        goto LABEL_7;
      case 4uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v40 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
        v3 = v40[2];
        v41 = v40[3];
        v42 = (char *)(v3 + 1);
        if (v3 >= v41 >> 1)
        {
          v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v3 + 1, 1, v40);
          v42 = (char *)(v3 + 1);
          v40 = v89;
        }
        v40[2] = v42;
        v40[v3 + 4] = v6;
        v4[5] = v40;
        v43 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if (v43 < 0)
          goto LABEL_178;
        v44 = v4[1] + v43;
        if (v6 < v44)
          goto LABEL_151;
        v4[2] = v44;
        _SymbolEffect.BounceConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v45 = (_QWORD *)v4[5];
        if (!v45[2])
          goto LABEL_186;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v46 = v45[2];
          if (!v46)
            goto LABEL_194;
        }
        else
        {
          v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
          v46 = v45[2];
          if (!v46)
            goto LABEL_194;
        }
        v47 = v46 - 1;
        v3 = v45[v47 + 4];
        v45[2] = v47;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v9 = 0;
        v4[5] = v45;
        v4[2] = v3;
        v7 = v98;
        v48 = 0x100000000;
        if (!BYTE4(v99))
          v48 = 0;
        v8 = v48 | v99;
        v10 = 0x4000;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v49 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        v3 = v49[2];
        v50 = v49[3];
        v51 = (char *)(v3 + 1);
        if (v3 >= v50 >> 1)
        {
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v3 + 1, 1, v49);
          v51 = (char *)(v3 + 1);
          v49 = v90;
        }
        v49[2] = v51;
        v49[v3 + 4] = v6;
        v4[5] = v49;
        v52 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if (v52 < 0)
          goto LABEL_179;
        v53 = v4[1] + v52;
        if (v6 < v53)
          goto LABEL_151;
        v4[2] = v53;
        _SymbolEffect.VariableColorConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v54 = (_QWORD *)v4[5];
        if (!v54[2])
          goto LABEL_187;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v55 = v54[2];
          if (!v55)
            goto LABEL_195;
        }
        else
        {
          v54 = specialized _ArrayBuffer._consumeAndCreateNew()(v54);
          v55 = v54[2];
          if (!v55)
            goto LABEL_195;
        }
        v56 = v55 - 1;
        v3 = v54[v56 + 4];
        v54[2] = v56;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v9 = 0;
        v4[5] = v54;
        v4[2] = v3;
        v7 = v98;
        v10 = 20480;
        v8 = v99;
        goto LABEL_7;
      case 6uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v57 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
        v3 = v57[2];
        v58 = v57[3];
        v59 = (char *)(v3 + 1);
        if (v3 >= v58 >> 1)
        {
          v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v3 + 1, 1, v57);
          v59 = (char *)(v3 + 1);
          v57 = v91;
        }
        v57[2] = v59;
        v57[v3 + 4] = v6;
        v4[5] = v57;
        v60 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if (v60 < 0)
          goto LABEL_180;
        v61 = v4[1] + v60;
        if (v6 < v61)
          goto LABEL_151;
        v4[2] = v61;
        _SymbolEffect.ScaleConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v62 = (_QWORD *)v4[5];
        if (!v62[2])
          goto LABEL_188;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v63 = v62[2];
          if (!v63)
            goto LABEL_196;
        }
        else
        {
          v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v62);
          v63 = v62[2];
          if (!v63)
            goto LABEL_196;
        }
        v64 = v63 - 1;
        v3 = v62[v64 + 4];
        v62[2] = v64;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v8 = 0;
        v9 = 0;
        v4[5] = v62;
        v4[2] = v3;
        v65 = 0x100000000;
        if (!BYTE4(v98))
          v65 = 0;
        v7 = v65 | v98;
        v10 = 24576;
        goto LABEL_7;
      case 7uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v66 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
        v3 = v66[2];
        v67 = v66[3];
        v68 = (char *)(v3 + 1);
        if (v3 >= v67 >> 1)
        {
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v3 + 1, 1, v66);
          v68 = (char *)(v3 + 1);
          v66 = v92;
        }
        v66[2] = v68;
        v66[v3 + 4] = v6;
        v4[5] = v66;
        v69 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if (v69 < 0)
          goto LABEL_181;
        v70 = v4[1] + v69;
        if (v6 < v70)
          goto LABEL_151;
        v4[2] = v70;
        _SymbolEffect.HiddenConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v71 = (_QWORD *)v4[5];
        if (!v71[2])
          goto LABEL_189;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v72 = v71[2];
          if (!v72)
            goto LABEL_197;
        }
        else
        {
          v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
          v72 = v71[2];
          if (!v72)
            goto LABEL_197;
        }
        v73 = v72 - 1;
        v3 = v71[v73 + 4];
        v71[2] = v73;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v8 = 0;
        v9 = 0;
        v4[5] = v71;
        v4[2] = v3;
        v74 = 0x100000000;
        if (!BYTE4(v98))
          v74 = 0;
        v75 = v74 | v98;
        v76 = 0x10000000000;
        if (!BYTE5(v98))
          v76 = 0;
        v7 = v75 | v76;
        v10 = 28672;
        goto LABEL_7;
      case 8uLL:
        if ((result & 7) != 2)
          goto LABEL_151;
        v77 = (_QWORD *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
        v3 = v77[2];
        v78 = v77[3];
        v79 = (char *)(v3 + 1);
        if (v3 >= v78 >> 1)
        {
          v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), v3 + 1, 1, v77);
          v79 = (char *)(v3 + 1);
          v77 = v93;
        }
        v77[2] = v79;
        v77[v3 + 4] = v6;
        v4[5] = v77;
        v80 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        if (v80 < 0)
          goto LABEL_182;
        v81 = v4[1] + v80;
        if (v6 < v81)
          goto LABEL_151;
        v4[2] = v81;
        _SymbolEffect.BreatheConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v82 = (_QWORD *)v4[5];
        if (!v82[2])
          goto LABEL_190;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v83 = v82[2];
          if (!v83)
            goto LABEL_150;
        }
        else
        {
          v82 = specialized _ArrayBuffer._consumeAndCreateNew()(v82);
          v83 = v82[2];
          if (!v83)
          {
LABEL_150:
            __break(1u);
LABEL_151:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
          }
        }
        v84 = v83 - 1;
        v3 = v82[v84 + 4];
        v82[2] = v84;
        result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v9 = 0;
        v4[5] = v82;
        v4[2] = v3;
        v7 = v98;
        v85 = 0x100000000;
        if (!BYTE4(v99))
          v85 = 0;
        v8 = v85 | v99;
        v10 = 4096;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
            goto LABEL_7;
          case 1uLL:
            v12 = v4[1] + 8;
            if (v6 >= v12)
              goto LABEL_6;
            goto LABEL_151;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_198;
            v12 = v4[1] + result;
            if (v6 < v12)
              goto LABEL_151;
LABEL_6:
            v4[1] = v12;
            break;
          case 5uLL:
            v12 = v4[1] + 4;
            if (v6 < v12)
              goto LABEL_151;
            goto LABEL_6;
          default:
            goto LABEL_151;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.Storage()
{
  _SymbolEffect.Storage.encode(to:)();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.Storage@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _SymbolEffect.Storage.init(from:)(a1, a2);
}

_DWORD *_SymbolEffect.Options.encode(to:)(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  float v4;
  float v5;
  char v6;
  float v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int64_t v12;
  char v13;
  uint64_t v14;
  int64_t v15;

  v2 = v1;
  v3 = result;
  v5 = *(float *)v2;
  v4 = *(float *)(v2 + 4);
  v6 = *(_BYTE *)(v2 + 8);
  v7 = *(float *)(v2 + 12);
  v8 = *(_BYTE *)(v2 + 16);
  if (*(float *)v2 == 1.0)
    goto LABEL_5;
  ProtobufEncoder.encodeVarint(_:)(0xDuLL);
  v9 = v3[1];
  result = (_DWORD *)(v9 + 4);
  if (__OFADD__(v9, 4))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(float *)(*v3 + v9) = v5;
    goto LABEL_5;
  }
  result = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(float *)result = v5;
LABEL_5:
  if (v4 == 0.0)
    v10 = 1;
  else
    v10 = v6;
  if ((v10 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v11 = v3[1];
    v12 = v11 + 4;
    if (__OFADD__(v11, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v12)
    {
      v3[1] = v12;
      result = (_DWORD *)(*v3 + v11);
LABEL_12:
      *(float *)result = v4;
      goto LABEL_13;
    }
    result = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v12);
    goto LABEL_12;
  }
LABEL_13:
  if (v7 == 0.0)
    v13 = 1;
  else
    v13 = v8;
  if ((v13 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v14 = v3[1];
    v15 = v14 + 4;
    if (__OFADD__(v14, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v15)
    {
      v3[1] = v15;
      result = (_DWORD *)(*v3 + v14);
LABEL_20:
      *(float *)result = v7;
      return result;
    }
    result = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v15);
    goto LABEL_20;
  }
  return result;
}

unint64_t _SymbolEffect.Options.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  float v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  int *v15;
  int *v16;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 1.0;
    v10 = 1;
    v11 = 1;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v12 = v3[4];
        if (v5 < v12)
          goto LABEL_9;
        if (v12 < v5)
          goto LABEL_53;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_9:
      v13 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_56;
          v15 = (int *)v3[1];
          if (v6 < (unint64_t)v15 + result)
            goto LABEL_53;
          v3[3] = 29;
          v3[4] = (char *)v15 + result;
        }
        else
        {
          if ((result & 7) != 5)
            goto LABEL_53;
          v15 = (int *)v3[1];
        }
        v5 = (unint64_t)(v15 + 1);
        if (v6 < (unint64_t)(v15 + 1))
          goto LABEL_53;
        v11 = 0;
        v7 = *v15;
      }
      else if (v13 == 2)
      {
        if ((result & 7) == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_57;
          v16 = (int *)v3[1];
          if (v6 < (unint64_t)v16 + result)
            goto LABEL_53;
          v3[3] = 21;
          v3[4] = (char *)v16 + result;
        }
        else
        {
          if ((result & 7) != 5)
            goto LABEL_53;
          v16 = (int *)v3[1];
        }
        v5 = (unint64_t)(v16 + 1);
        if (v6 < (unint64_t)(v16 + 1))
          goto LABEL_53;
        v10 = 0;
        v8 = *v16;
      }
      else
      {
        if (v13 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v5 = v3[1];
              goto LABEL_49;
            case 1uLL:
              v5 = v3[1] + 8;
              goto LABEL_47;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_58;
              v5 = v3[1] + result;
LABEL_47:
              if (v6 >= v5)
                goto LABEL_48;
              goto LABEL_53;
            case 5uLL:
              v5 = v3[1] + 4;
              goto LABEL_47;
            default:
              goto LABEL_53;
          }
        }
        if ((result & 7) == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            JUMPOUT(0x234CD6D1CLL);
          }
          v14 = (float *)v3[1];
          if (v6 < (unint64_t)v14 + result)
            goto LABEL_53;
          v3[3] = 13;
          v3[4] = (char *)v14 + result;
        }
        else
        {
          if ((result & 7) != 5)
            goto LABEL_53;
          v14 = (float *)v3[1];
        }
        v5 = (unint64_t)(v14 + 1);
        if (v6 < (unint64_t)(v14 + 1))
          goto LABEL_53;
        v9 = *v14;
      }
LABEL_48:
      v3[1] = v5;
LABEL_49:
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_52;
    }
  }
  v7 = 0;
  v8 = 0;
  v9 = 1.0;
  v11 = 1;
  v10 = 1;
LABEL_52:
  v3[3] = 0;
  *(float *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v8;
  *(_BYTE *)(a2 + 8) = v10 & 1;
  *(_DWORD *)(a2 + 12) = v7;
  *(_BYTE *)(a2 + 16) = v11 & 1;
  return result;
}

_DWORD *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.Options(_DWORD *a1)
{
  return _SymbolEffect.Options.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.Options@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.Options.init(from:)(a1, a2);
}

void _SymbolEffect.Trigger.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(unint64_t *__return_ptr, uint64_t);
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD v19[5];
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  if (*v1 < 0)
  {
    if ((v6 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
  else
  {
    v7 = *(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 88);
    v8 = swift_retain();
    v7(&v20, v8);
    if ((v24 & 1) != 0)
    {
      UUID.init()();
      specialized StrongHash.init<A>(of:)(v5, (uint64_t)v19);
      v9 = v19[0];
      v10 = v19[1];
      v11 = v19[2];
      v12 = v19[3];
      v13 = v19[4];
    }
    else
    {
      v12 = v22;
      v13 = v23;
      v10 = HIDWORD(v20);
      v11 = v21;
      v9 = v20;
    }
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    v20 = __PAIR64__(v10, v9);
    v21 = v11;
    v22 = v12;
    v23 = v13;
    v14 = a1[1];
    v15 = (_QWORD *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    v17 = v15[2];
    v16 = v15[3];
    if (v17 >= v16 >> 1)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
    v15[2] = v17 + 1;
    v15[v17 + 4] = v14;
    a1[3] = v15;
    if (__OFADD__(v14, 1))
      __break(1u);
    a1[1] = v14 + 1;
    StrongHash.encode(to:)(a1);
    ProtobufEncoder.endLengthDelimited()();
    outlined consume of _SymbolEffect.Trigger(v6);
  }
}

unint64_t _SymbolEffect.Trigger.init(from:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  int v29;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = 0x8000000000000000;
  if (v5 >= v6)
  {
LABEL_45:
    v3[3] = 0;
    *a2 = v7;
    return result;
  }
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v9 = v3[4];
      if (v5 < v9)
        goto LABEL_12;
      if (v9 < v5)
        goto LABEL_46;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger(v7);
    if (result < 8)
      goto LABEL_46;
LABEL_12:
    if (result >> 3 != 2)
      break;
    if ((result & 7) != 0)
    {
      if ((result & 7) != 2)
        goto LABEL_46;
      v20 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger(v7);
      if (v20 < 0)
        goto LABEL_51;
      v21 = v3[1] + v20;
      if (v6 < v21)
      {
LABEL_46:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger(v7);
      }
      v3[3] = 16;
      v3[4] = v21;
    }
    v22 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger(v7);
    v23 = v22;
    result = outlined consume of _SymbolEffect.Trigger(v7);
    v7 = (v23 != 0) | 0x8000000000000000;
LABEL_5:
    v5 = v3[1];
    v6 = v3[2];
    if (v5 >= v6)
      goto LABEL_45;
  }
  if (result >> 3 != 1)
  {
    switch(result & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger(v7);
        goto LABEL_5;
      case 1uLL:
        v8 = v3[1] + 8;
        if (v6 < v8)
          goto LABEL_46;
        goto LABEL_4;
      case 2uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger(v7);
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_52;
        v8 = v3[1] + result;
        if (v6 < v8)
          goto LABEL_46;
LABEL_4:
        v3[1] = v8;
        break;
      case 5uLL:
        v8 = v3[1] + 4;
        if (v6 < v8)
          goto LABEL_46;
        goto LABEL_4;
      default:
        goto LABEL_46;
    }
    goto LABEL_5;
  }
  if ((result & 7) != 2)
    goto LABEL_46;
  v10 = (_QWORD *)v3[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v10[v12 + 4] = v6;
  v3[5] = v10;
  v13 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return outlined consume of _SymbolEffect.Trigger(v7);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v14 = v3[1] + v13;
    if (v6 < v14)
      goto LABEL_46;
    v3[2] = v14;
    StrongHash.init(from:)((unint64_t)v3, &v28);
    v15 = (_QWORD *)v3[5];
    if (!v15[2])
      goto LABEL_50;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v16 = v15[2];
      if (!v16)
        goto LABEL_44;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      v15 = (_QWORD *)result;
      v16 = *(_QWORD *)(result + 16);
      if (!v16)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    v17 = v16 - 1;
    v18 = v15[v17 + 4];
    v15[2] = v17;
    outlined consume of _SymbolEffect.Trigger(v7);
    v3[5] = v15;
    v3[2] = v18;
    v19 = v29;
    type metadata accessor for HashEquatableBox();
    result = swift_allocObject();
    v7 = result;
    *(_OWORD *)(result + 16) = v28;
    *(_DWORD *)(result + 32) = v19;
    goto LABEL_5;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  __break(1u);
  v26 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  v27 = v26[2];
  if (!v27)
  {
    __break(1u);
    JUMPOUT(0x234CD72D0);
  }
  v24 = v27 - 1;
  v25 = v26[v24 + 4];
  v26[2] = v24;
  result = outlined consume of _SymbolEffect.Trigger(v7);
  v3[5] = v26;
  v3[2] = v25;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.Trigger(_QWORD *a1)
{
  _SymbolEffect.Trigger.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.Trigger@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return _SymbolEffect.Trigger.init(from:)(a1, a2);
}

void _SymbolEffect.PulseConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned __int8 *)(v0 + 8);
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0)
  {
    if ((v3 & 1) != 0)
      return;
LABEL_8:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
    return;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1)
    v4 = 1;
  else
    v4 = v3;
  if (v4 != 1)
    goto LABEL_8;
}

unint64_t _SymbolEffect.PulseConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;

  v3 = (_QWORD *)result;
  v5 = 0xF000000000000006;
  v6 = 1;
  v28 = 1;
  v7 = *(_QWORD *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  if (v7 >= v8)
    goto LABEL_48;
  do
  {
    result = v3[3];
    if (result)
    {
      v10 = v3[4];
      if (v7 < v10)
        goto LABEL_12;
      if (v10 < v7)
        goto LABEL_45;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (result <= 7)
      goto LABEL_45;
LABEL_12:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_45;
        v21 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v21 < 0)
          goto LABEL_52;
        v22 = v3[1] + v21;
        if (v8 < v22)
          goto LABEL_45;
        v3[3] = 16;
        v3[4] = v22;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger?(v5);
      v28 = result != 0;
    }
    else if (result >> 3 == 3)
    {
      if ((result & 7) != 2)
        goto LABEL_45;
      v11 = (_QWORD *)v3[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      v13 = v11[2];
      v12 = v11[3];
      if (v13 >= v12 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
      v11[2] = v13 + 1;
      v11[v13 + 4] = v8;
      v3[5] = v11;
      v14 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger?(v5);
      if (v14 < 0)
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        __break(1u);
        v25 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
        v26 = v25[2];
        if (!v26)
        {
          __break(1u);
          JUMPOUT(0x234CD771CLL);
        }
        v23 = v26 - 1;
        v24 = v25[v23 + 4];
        v25[2] = v23;
        v3[5] = v25;
        v3[2] = v24;
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      v15 = v3[1] + v14;
      if (v8 < v15)
        goto LABEL_45;
      v3[2] = v15;
      _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v27);
      v16 = (_QWORD *)v3[5];
      if (!v16[2])
        goto LABEL_51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v17 = v16[2];
        if (!v17)
          goto LABEL_44;
      }
      else
      {
        v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        v17 = v16[2];
        if (!v17)
        {
LABEL_44:
          __break(1u);
LABEL_45:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
      }
      v18 = v17 - 1;
      v19 = v16[v18 + 4];
      v16[2] = v18;
      v3[5] = v16;
      v3[2] = v19;
      v20 = v27;
      result = outlined consume of _SymbolEffect.Trigger?(v5);
      v5 = v20;
    }
    else
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          break;
        case 1uLL:
          v9 = v3[1] + 8;
          if (v8 < v9)
            goto LABEL_45;
          goto LABEL_4;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_53;
          v9 = v3[1] + result;
          if (v8 < v9)
            goto LABEL_45;
LABEL_4:
          v3[1] = v9;
          break;
        case 5uLL:
          v9 = v3[1] + 4;
          if (v8 < v9)
            goto LABEL_45;
          goto LABEL_4;
        default:
          goto LABEL_45;
      }
    }
    v7 = v3[1];
    v8 = v3[2];
  }
  while (v7 < v8);
  v6 = v28;
LABEL_48:
  v3[3] = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v6;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.PulseConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned __int8 *)(v0 + 8);
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0)
  {
    if ((v3 & 1) != 0)
      return;
LABEL_8:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
    return;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1)
    v4 = 1;
  else
    v4 = v3;
  if (v4 != 1)
    goto LABEL_8;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.PulseConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.PulseConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.BreatheConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  char v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned int *)(v0 + 8);
  v4 = *(_BYTE *)(v0 + 12);
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0
    || (outlined copy of _SymbolEffect.Trigger(v2),
        specialized ProtobufEncoder.messageField<A>(_:_:)(1, v2),
        outlined consume of _SymbolEffect.Trigger?(v2),
        !v1))
  {
    if ((_DWORD)v3)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v3);
    }
    if ((v4 & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t _SymbolEffect.BreatheConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v3 = (_QWORD *)result;
  v5 = 0xF000000000000006;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (v6 >= v7)
  {
    LODWORD(v8) = 0;
    LOBYTE(v9) = 1;
LABEL_4:
    v3[3] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 12) = v9;
    return result;
  }
  v8 = 0;
  v9 = 1;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v11 = v3[4];
      if (v6 < v11)
        goto LABEL_14;
      if (v11 < v6)
        goto LABEL_56;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (result <= 7)
      goto LABEL_56;
LABEL_14:
    v12 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_56;
        v24 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v24 < 0)
          goto LABEL_61;
        v25 = v3[1] + v24;
        if (v7 < v25)
          goto LABEL_56;
        v3[3] = 24;
        v3[4] = v25;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger?(v5);
      v9 = result != 0;
      goto LABEL_7;
    }
    if (v12 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_56;
        v26 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v26 < 0)
          goto LABEL_62;
        v27 = v3[1] + v26;
        if (v7 < v27)
          goto LABEL_56;
        v3[3] = 16;
        v3[4] = v27;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger?(v5);
      v8 = result;
      goto LABEL_7;
    }
    if (v12 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          goto LABEL_7;
        case 1uLL:
          v10 = v3[1] + 8;
          if (v7 < v10)
            goto LABEL_56;
          goto LABEL_6;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_63;
          v10 = v3[1] + result;
          if (v7 < v10)
            goto LABEL_56;
LABEL_6:
          v3[1] = v10;
          break;
        case 5uLL:
          v10 = v3[1] + 4;
          if (v7 < v10)
            goto LABEL_56;
          goto LABEL_6;
        default:
          goto LABEL_56;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_56;
    v32 = v8;
    v13 = a2;
    v14 = (_QWORD *)v3[5];
    a2 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v14[2] = v16 + 1;
    v14[v16 + 4] = v7;
    v3[5] = v14;
    v17 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (v17 < 0)
      break;
    v18 = v3[1] + v17;
    if (v7 < v18)
      goto LABEL_56;
    v3[2] = v18;
    _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v33);
    v19 = (_QWORD *)v3[5];
    if (!v19[2])
      goto LABEL_60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v20 = v19[2];
      if (!v20)
        goto LABEL_55;
    }
    else
    {
      v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      v20 = v19[2];
      if (!v20)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
    }
    v21 = v20 - 1;
    v22 = v19[v21 + 4];
    v19[2] = v21;
    v3[5] = v19;
    v3[2] = v22;
    v23 = v33;
    result = outlined consume of _SymbolEffect.Trigger?(v5);
    v5 = v23;
    v9 = a2;
    a2 = v13;
    v8 = v32;
LABEL_7:
    v6 = v3[1];
    v7 = v3[2];
    if (v6 >= v7)
      goto LABEL_4;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  __break(1u);
  v30 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v31 = v30[2];
  if (!v31)
  {
    __break(1u);
    JUMPOUT(0x234CD7C78);
  }
  v28 = v31 - 1;
  v29 = v30[v28 + 4];
  v30[2] = v28;
  v3[5] = v30;
  v3[2] = v29;
  return outlined consume of _SymbolEffect.Trigger?(v5);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.BreatheConfiguration()
{
  _SymbolEffect.BreatheConfiguration.encode(to:)();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.BreatheConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BreatheConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.BounceConfiguration.encode(to:)()
{
  _SymbolEffect.BounceConfiguration.encode(to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  char v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned int *)(v0 + 8);
  v4 = *(_BYTE *)(v0 + 12);
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0
    || (outlined copy of _SymbolEffect.Trigger(v2),
        specialized ProtobufEncoder.messageField<A>(_:_:)(4, v2),
        outlined consume of _SymbolEffect.Trigger?(v2),
        !v1))
  {
    if ((_DWORD)v3)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v3);
    }
    if ((v4 & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t _SymbolEffect.BounceConfiguration.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BounceConfiguration.init(from:)(a1, a2);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.BounceConfiguration()
{
  _SymbolEffect.BounceConfiguration.encode(to:)();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.BounceConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BounceConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.WiggleConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  char v7;
  Swift::UInt v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  int64_t v13;
  double *v14;

  v3 = v1;
  v5 = *(_QWORD *)v3;
  v6 = *(double *)(v3 + 8);
  v7 = *(_BYTE *)(v3 + 16);
  v8 = *(unsigned int *)(v3 + 20);
  v9 = *(_BYTE *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 25);
  if ((~*(_QWORD *)v3 & 0xF000000000000006) != 0)
  {
    outlined copy of _SymbolEffect.Trigger(v5);
    specialized ProtobufEncoder.messageField<A>(_:_:)(5, v5);
    outlined consume of _SymbolEffect.Trigger?(v5);
    if (v2)
      return;
  }
  if (v6 == 0.0)
    v11 = 1;
  else
    v11 = v7;
  if ((v11 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x11uLL);
    v12 = a1[1];
    v13 = v12 + 8;
    if (__OFADD__(v12, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v13)
    {
      a1[1] = v13;
      v14 = (double *)(*a1 + v12);
LABEL_10:
      *v14 = v6;
      goto LABEL_11;
    }
    v14 = (double *)ProtobufEncoder.growBufferSlow(to:)(v13);
    goto LABEL_10;
  }
LABEL_11:
  if ((_DWORD)v8)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v8);
  }
  if ((v9 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if ((v10 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x30uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t _SymbolEffect.WiggleConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  double v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  float *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  char v45;

  v4 = (_QWORD *)result;
  v5 = 0xF000000000000006;
  v6 = 1;
  v45 = 1;
  v44 = 1;
  v7 = *(_QWORD *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  if (v7 >= v8)
  {
    LOBYTE(v9) = 0;
    LODWORD(v10) = 0;
    v11 = 0.0;
    v12 = 1;
    goto LABEL_4;
  }
  v41 = a2;
  v9 = 0;
  v10 = 0;
  v11 = 0.0;
  while (2)
  {
    result = v4[3];
    if (result)
    {
      v14 = v4[4];
      if (v7 < v14)
        goto LABEL_14;
      if (v14 < v7)
        goto LABEL_72;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (result <= 7)
    {
LABEL_72:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
LABEL_14:
    switch(result >> 3)
    {
      case 2uLL:
        v15 = result & 7;
        switch(v15)
        {
          case 5uLL:
            v35 = (float *)v4[1];
            if (v8 < (unint64_t)(v35 + 1))
              goto LABEL_72;
            v36 = *v35;
            v4[1] = v35 + 1;
            v11 = v36;
            v45 = 0;
            goto LABEL_7;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return outlined consume of _SymbolEffect.Trigger?(v5);
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_83;
            v16 = (double *)v4[1];
            if (v8 < (unint64_t)v16 + result)
              goto LABEL_72;
            v4[3] = 17;
            v4[4] = (char *)v16 + result;
            break;
          case 1uLL:
            v16 = (double *)v4[1];
            break;
          default:
            goto LABEL_72;
        }
        if (v8 < (unint64_t)(v16 + 1))
          goto LABEL_72;
        v11 = *v16;
        v4[1] = v16 + 1;
        v45 = 0;
        goto LABEL_7;
      case 3uLL:
        if ((result & 7) == 0)
          goto LABEL_28;
        if ((result & 7) != 2)
          goto LABEL_72;
        v17 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v17 < 0)
          goto LABEL_80;
        v18 = v4[1] + v17;
        if (v8 < v18)
          goto LABEL_72;
        v4[3] = 24;
        v4[4] = v18;
LABEL_28:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        v10 = result;
        goto LABEL_7;
      case 4uLL:
        if ((result & 7) == 0)
          goto LABEL_36;
        if ((result & 7) != 2)
          goto LABEL_72;
        v19 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v19 < 0)
          goto LABEL_81;
        v20 = v4[1] + v19;
        if (v8 < v20)
          goto LABEL_72;
        v4[3] = 32;
        v4[4] = v20;
LABEL_36:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        v44 = result != 0;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) != 2)
          goto LABEL_72;
        v42 = v10;
        v21 = (_QWORD *)v4[5];
        v22 = v9;
        v23 = v5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        v25 = v21[2];
        v24 = v21[3];
        v5 = v25 + 1;
        if (v25 >= v24 >> 1)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v21);
        v21[2] = v5;
        v21[v25 + 4] = v8;
        v4[5] = v21;
        v26 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
          v5 = v23;
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v26 < 0)
        {
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          __break(1u);
          v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          v40 = v39[2];
          if (!v40)
          {
            __break(1u);
            JUMPOUT(0x234CD8364);
          }
          v37 = v40 - 1;
          v38 = v39[v37 + 4];
          v39[2] = v37;
          v4[5] = v39;
          v4[2] = v38;
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        v5 = v23;
        v27 = v4[1] + v26;
        if (v8 < v27)
          goto LABEL_72;
        v4[2] = v27;
        _SymbolEffect.Trigger.init(from:)((unint64_t)v4, &v43);
        v28 = (_QWORD *)v4[5];
        if (!v28[2])
          goto LABEL_78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
        v9 = v22;
        v29 = v28[2];
        if (!v29)
          goto LABEL_79;
        v30 = v29 - 1;
        v31 = v28[v30 + 4];
        v28[2] = v30;
        v4[5] = v28;
        v4[2] = v31;
        v32 = v43;
        result = outlined consume of _SymbolEffect.Trigger?(v23);
        v5 = v32;
        v10 = v42;
LABEL_7:
        v7 = v4[1];
        v8 = v4[2];
        if (v7 < v8)
          continue;
        v12 = v45;
        v6 = v44;
        a2 = v41;
LABEL_4:
        v4[3] = 0;
        *(_QWORD *)a2 = v5;
        *(double *)(a2 + 8) = v11;
        *(_BYTE *)(a2 + 16) = v12;
        *(_DWORD *)(a2 + 20) = v10;
        *(_BYTE *)(a2 + 24) = v6;
        *(_BYTE *)(a2 + 25) = v9;
        return result;
      case 6uLL:
        if ((result & 7) == 0)
          goto LABEL_57;
        if ((result & 7) != 2)
          goto LABEL_72;
        v33 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v33 < 0)
          goto LABEL_82;
        v34 = v4[1] + v33;
        if (v8 < v34)
          goto LABEL_72;
        v4[3] = 48;
        v4[4] = v34;
LABEL_57:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        v9 = result != 0;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return outlined consume of _SymbolEffect.Trigger?(v5);
            goto LABEL_7;
          case 1uLL:
            v13 = v4[1] + 8;
            if (v8 < v13)
              goto LABEL_72;
            goto LABEL_6;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return outlined consume of _SymbolEffect.Trigger?(v5);
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_84;
            v13 = v4[1] + result;
            if (v8 < v13)
              goto LABEL_72;
LABEL_6:
            v4[1] = v13;
            break;
          case 5uLL:
            v13 = v4[1] + 4;
            if (v8 < v13)
              goto LABEL_72;
            goto LABEL_6;
          default:
            goto LABEL_72;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.WiggleConfiguration(_QWORD *a1)
{
  _SymbolEffect.WiggleConfiguration.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.WiggleConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.WiggleConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.RotateConfiguration.encode(to:)()
{
  _SymbolEffect.BounceConfiguration.encode(to:)();
}

unint64_t _SymbolEffect.RotateConfiguration.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BounceConfiguration.init(from:)(a1, a2);
}

unint64_t _SymbolEffect.BounceConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v3 = (_QWORD *)result;
  v5 = 0xF000000000000006;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (v6 >= v7)
  {
    LODWORD(v8) = 0;
    LOBYTE(v9) = 1;
LABEL_4:
    v3[3] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 12) = v9;
    return result;
  }
  v8 = 0;
  v9 = 1;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v11 = v3[4];
      if (v6 < v11)
        goto LABEL_14;
      if (v11 < v6)
        goto LABEL_56;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (result <= 7)
      goto LABEL_56;
LABEL_14:
    v12 = result >> 3;
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_56;
        v24 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v24 < 0)
          goto LABEL_61;
        v25 = v3[1] + v24;
        if (v7 < v25)
          goto LABEL_56;
        v3[3] = 16;
        v3[4] = v25;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger?(v5);
      v8 = result;
      goto LABEL_7;
    }
    if (v12 == 3)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_56;
        v26 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v26 < 0)
          goto LABEL_62;
        v27 = v3[1] + v26;
        if (v7 < v27)
          goto LABEL_56;
        v3[3] = 24;
        v3[4] = v27;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger?(v5);
      v9 = result != 0;
      goto LABEL_7;
    }
    if (v12 != 4)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          goto LABEL_7;
        case 1uLL:
          v10 = v3[1] + 8;
          if (v7 < v10)
            goto LABEL_56;
          goto LABEL_6;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_63;
          v10 = v3[1] + result;
          if (v7 < v10)
            goto LABEL_56;
LABEL_6:
          v3[1] = v10;
          break;
        case 5uLL:
          v10 = v3[1] + 4;
          if (v7 < v10)
            goto LABEL_56;
          goto LABEL_6;
        default:
          goto LABEL_56;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_56;
    v32 = v8;
    v13 = a2;
    v14 = (_QWORD *)v3[5];
    a2 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v14[2] = v16 + 1;
    v14[v16 + 4] = v7;
    v3[5] = v14;
    v17 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (v17 < 0)
      break;
    v18 = v3[1] + v17;
    if (v7 < v18)
      goto LABEL_56;
    v3[2] = v18;
    _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v33);
    v19 = (_QWORD *)v3[5];
    if (!v19[2])
      goto LABEL_60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v20 = v19[2];
      if (!v20)
        goto LABEL_55;
    }
    else
    {
      v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      v20 = v19[2];
      if (!v20)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
    }
    v21 = v20 - 1;
    v22 = v19[v21 + 4];
    v19[2] = v21;
    v3[5] = v19;
    v3[2] = v22;
    v23 = v33;
    result = outlined consume of _SymbolEffect.Trigger?(v5);
    v5 = v23;
    v9 = a2;
    a2 = v13;
    v8 = v32;
LABEL_7:
    v6 = v3[1];
    v7 = v3[2];
    if (v6 >= v7)
      goto LABEL_4;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  __break(1u);
  v30 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v31 = v30[2];
  if (!v31)
  {
    __break(1u);
    JUMPOUT(0x234CD887CLL);
  }
  v28 = v31 - 1;
  v29 = v30[v28 + 4];
  v30[2] = v28;
  v3[5] = v30;
  v3[2] = v29;
  return outlined consume of _SymbolEffect.Trigger?(v5);
}

void _SymbolEffect.VariableColorConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  BOOL v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned int *)(v0 + 8);
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0)
  {
    if (!(_DWORD)v3)
      return;
    goto LABEL_3;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1)
    v4 = 1;
  else
    v4 = (_DWORD)v3 == 0;
  if (!v4)
  {
LABEL_3:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v3);
  }
}

unint64_t _SymbolEffect.VariableColorConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;

  v3 = (_QWORD *)result;
  v5 = 0xF000000000000006;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (v6 >= v7)
  {
    v8 = 0;
LABEL_4:
    v3[3] = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v8;
    return result;
  }
  v8 = 0;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v10 = v3[4];
      if (v6 < v10)
        goto LABEL_14;
      if (v10 < v6)
        goto LABEL_47;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (result <= 7)
      goto LABEL_47;
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_47;
        v21 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of _SymbolEffect.Trigger?(v5);
        if (v21 < 0)
          goto LABEL_52;
        v22 = v3[1] + v21;
        if (v7 < v22)
          goto LABEL_47;
        v3[3] = 16;
        v3[4] = v22;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of _SymbolEffect.Trigger?(v5);
      v8 = result;
      goto LABEL_7;
    }
    if (result >> 3 != 3)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          goto LABEL_7;
        case 1uLL:
          v9 = v3[1] + 8;
          if (v7 < v9)
            goto LABEL_47;
          goto LABEL_6;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of _SymbolEffect.Trigger?(v5);
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_53;
          v9 = v3[1] + result;
          if (v7 < v9)
            goto LABEL_47;
LABEL_6:
          v3[1] = v9;
          break;
        case 5uLL:
          v9 = v3[1] + 4;
          if (v7 < v9)
            goto LABEL_47;
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_47;
    v11 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
    v11[2] = v13 + 1;
    v11[v13 + 4] = v7;
    v3[5] = v11;
    v14 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of _SymbolEffect.Trigger?(v5);
    if (v14 < 0)
      break;
    v15 = v3[1] + v14;
    if (v7 < v15)
      goto LABEL_47;
    v3[2] = v15;
    _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v27);
    v16 = (_QWORD *)v3[5];
    if (!v16[2])
      goto LABEL_51;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v17 = v16[2];
      if (!v17)
        goto LABEL_46;
    }
    else
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      v17 = v16[2];
      if (!v17)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
    }
    v18 = v17 - 1;
    v19 = v16[v18 + 4];
    v16[2] = v18;
    v3[5] = v16;
    v3[2] = v19;
    v20 = v27;
    result = outlined consume of _SymbolEffect.Trigger?(v5);
    v5 = v20;
LABEL_7:
    v6 = v3[1];
    v7 = v3[2];
    if (v6 >= v7)
      goto LABEL_4;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  __break(1u);
  v25 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v26 = v25[2];
  if (!v26)
  {
    __break(1u);
    JUMPOUT(0x234CD8C88);
  }
  v23 = v26 - 1;
  v24 = v25[v23 + 4];
  v25[2] = v23;
  v3[5] = v25;
  v3[2] = v24;
  return outlined consume of _SymbolEffect.Trigger?(v5);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.VariableColorConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  BOOL v4;

  v2 = *(_QWORD *)v0;
  v3 = *(unsigned int *)(v0 + 8);
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0)
  {
    if (!(_DWORD)v3)
      return;
    goto LABEL_3;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1)
    v4 = 1;
  else
    v4 = (_DWORD)v3 == 0;
  if (!v4)
  {
LABEL_3:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v3);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.VariableColorConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.VariableColorConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.ScaleConfiguration.encode(to:)()
{
  unsigned int *v0;
  Swift::UInt v1;
  int v2;

  v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v2 = *((unsigned __int8 *)v0 + 4);
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
    if (v2 != 1)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t _SymbolEffect.ScaleConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 1;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v10 = v3[4];
        if (v5 < v10)
          goto LABEL_14;
        if (v10 < v5)
          goto LABEL_42;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_42;
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_42;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_45;
          v12 = v3[1] + result;
          if (v6 < v12)
          {
LABEL_42:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v12;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v8 = result != 0;
      }
      else if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_42;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
            JUMPOUT(0x234CD9038);
          }
          v11 = v3[1] + result;
          if (v6 < v11)
            goto LABEL_42;
          v3[3] = 8;
          v3[4] = v11;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if (result >> 31)
          v7 = 0;
        else
          v7 = result;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            break;
          case 1uLL:
            v9 = v3[1] + 8;
            if (v6 >= v9)
              goto LABEL_6;
            goto LABEL_42;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_46;
            v9 = v3[1] + result;
            if (v6 < v9)
              goto LABEL_42;
LABEL_6:
            v3[1] = v9;
            break;
          case 5uLL:
            v9 = v3[1] + 4;
            if (v6 < v9)
              goto LABEL_42;
            goto LABEL_6;
          default:
            goto LABEL_42;
        }
      }
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
  v8 = 1;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v7;
  *(_BYTE *)(a2 + 4) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.ScaleConfiguration()
{
  unsigned int *v0;
  Swift::UInt v1;
  char v2;

  v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v2 = *((_BYTE *)v0 + 4);
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
    if ((v2 & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.ScaleConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.ScaleConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.HiddenConfiguration.encode(to:)()
{
  unsigned int *v0;
  Swift::UInt v1;
  char v2;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 4);
  if ((*((_BYTE *)v0 + 5) & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((_DWORD)v1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
  }
  if ((v2 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t _SymbolEffect.HiddenConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 1;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v11 = v3[4];
        if (v5 < v11)
          goto LABEL_14;
        if (v11 < v5)
          goto LABEL_49;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_49;
LABEL_14:
      v12 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_49;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_52;
          v14 = v3[1] + result;
          if (v6 < v14)
            goto LABEL_49;
          v3[3] = 24;
          v3[4] = v14;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v9 = result != 0;
      }
      else if (v12 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_49;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_53;
          v15 = v3[1] + result;
          if (v6 < v15)
          {
LABEL_49:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v15;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v8 = result;
      }
      else if (v12 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_49;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            JUMPOUT(0x234CD9438);
          }
          v13 = v3[1] + result;
          if (v6 < v13)
            goto LABEL_49;
          v3[3] = 8;
          v3[4] = v13;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result != 0;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            break;
          case 1uLL:
            v10 = v3[1] + 8;
            if (v6 >= v10)
              goto LABEL_6;
            goto LABEL_49;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_54;
            v10 = v3[1] + result;
            if (v6 < v10)
              goto LABEL_49;
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            v10 = v3[1] + 4;
            if (v6 < v10)
              goto LABEL_49;
            goto LABEL_6;
          default:
            goto LABEL_49;
        }
      }
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
  v8 = 0;
  v9 = 1;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v8;
  *(_BYTE *)(a2 + 4) = v9;
  *(_BYTE *)(a2 + 5) = v7;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.HiddenConfiguration()
{
  unsigned int *v0;
  Swift::UInt v1;
  char v2;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 4);
  if (*((_BYTE *)v0 + 5) == 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((_DWORD)v1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
  }
  if ((v2 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.HiddenConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.HiddenConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.ReplaceConfiguration.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  Swift::UInt v4;
  char v5;
  float v6;
  uint64_t v7;
  int64_t v8;

  v2 = v1;
  v4 = *v2;
  v5 = *((_BYTE *)v2 + 4);
  v6 = *((float *)v2 + 2);
  if ((_DWORD)v4)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v4);
  }
  if ((v5 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if (v6 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v7 = a1[1];
    v8 = v7 + 4;
    if (__OFADD__(v7, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v8)
    {
      a1[1] = v8;
      *(float *)(*a1 + v7) = v6;
      return;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v8) = v6;
  }
}

unint64_t _SymbolEffect.ReplaceConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  float v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  unint64_t v15;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 1.0;
    v9 = 1;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v11 = v3[4];
        if (v5 < v11)
          goto LABEL_14;
        if (v11 < v5)
          goto LABEL_50;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_50;
LABEL_14:
      v12 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_54;
          v14 = (float *)v3[1];
          if (v6 < (unint64_t)v14 + result)
            goto LABEL_50;
          v3[3] = 29;
          v3[4] = (char *)v14 + result;
        }
        else
        {
          if ((result & 7) != 5)
            goto LABEL_50;
          v14 = (float *)v3[1];
        }
        if (v6 < (unint64_t)(v14 + 1))
          goto LABEL_50;
        v8 = *v14;
        v3[1] = v14 + 1;
      }
      else if (v12 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_50;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_53;
          v15 = v3[1] + result;
          if (v6 < v15)
          {
LABEL_50:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v15;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v9 = result != 0;
      }
      else if (v12 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_50;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            JUMPOUT(0x234CD9850);
          }
          v13 = v3[1] + result;
          if (v6 < v13)
            goto LABEL_50;
          v3[3] = 8;
          v3[4] = v13;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            break;
          case 1uLL:
            v10 = v3[1] + 8;
            if (v6 >= v10)
              goto LABEL_6;
            goto LABEL_50;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_55;
            v10 = v3[1] + result;
            if (v6 < v10)
              goto LABEL_50;
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            v10 = v3[1] + 4;
            if (v6 < v10)
              goto LABEL_50;
            goto LABEL_6;
          default:
            goto LABEL_50;
        }
      }
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
  v8 = 1.0;
  v9 = 1;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v7;
  *(_BYTE *)(a2 + 4) = v9;
  *(float *)(a2 + 8) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.ReplaceConfiguration(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  Swift::UInt v4;
  char v5;
  float v6;
  uint64_t v7;
  int64_t v8;
  float *v9;

  v2 = v1;
  v4 = *v2;
  v5 = *((_BYTE *)v2 + 4);
  v6 = *((float *)v2 + 2);
  if ((_DWORD)v4)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v4);
  }
  if ((v5 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if (v6 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v7 = a1[1];
    v8 = v7 + 4;
    if (__OFADD__(v7, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v8)
    {
      a1[1] = v8;
      v9 = (float *)(*a1 + v7);
LABEL_9:
      *v9 = v6;
      return;
    }
    v9 = (float *)ProtobufEncoder.growBufferSlow(to:)(v8);
    goto LABEL_9;
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.ReplaceConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.ReplaceConfiguration.init(from:)(a1, a2);
}

BOOL _SymbolEffect.isIndefinite.getter()
{
  uint64_t v0;
  unsigned int v1;

  if ((*(_BYTE *)(v0 + 36) & 1) == 0)
    return (~*(_DWORD *)(v0 + 32) & 0x7F800000) == 0;
  v1 = *(unsigned __int16 *)(v0 + 24);
  if (v1 >> 12 > 5)
    return 1;
  if ((~*(_QWORD *)v0 & 0xF000000000000006) == 0)
  {
    outlined consume of _SymbolEffect.Storage(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), v1);
    return 1;
  }
  return 0;
}

BOOL specialized static _SymbolEffect.Options.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    if (*(float *)(a1 + 12) != *(float *)(a2 + 12))
      v3 = 1;
    return (v3 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 16) & 1) != 0;
}

uint64_t specialized static _SymbolEffect.== infix(_:_:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  float v4;
  float v5;
  char v6;
  float v7;
  char v8;
  float v9;
  float v10;
  int v11;
  float v12;
  char v13;
  char v14;
  char v15;
  uint64_t result;
  char v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int16 v21;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_WORD *)a1 + 12);
  v5 = *((float *)a1 + 7);
  v4 = *((float *)a1 + 8);
  v6 = *((_BYTE *)a1 + 36);
  v7 = *((float *)a1 + 10);
  v8 = *((_BYTE *)a1 + 44);
  v10 = *(float *)(a2 + 28);
  v9 = *(float *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a2 + 36);
  v12 = *(float *)(a2 + 40);
  v13 = *(_BYTE *)(a2 + 44);
  v19 = *a1;
  v20 = v2;
  v21 = v3;
  specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)&v19);
  v15 = v14;
  result = 0;
  if ((v15 & 1) != 0 && v5 == v10)
  {
    if ((v6 & 1) != 0)
    {
      if (!v11)
        return 0;
    }
    else
    {
      if (v4 == v9)
        v17 = v11;
      else
        v17 = 1;
      if ((v17 & 1) != 0)
        return 0;
    }
    if ((v8 & 1) != 0)
    {
      if ((v13 & 1) == 0)
        return 0;
    }
    else
    {
      if (v7 == v12)
        v18 = v13;
      else
        v18 = 1;
      if ((v18 & 1) != 0)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t specialized static _SymbolEffect.Phase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float v4;
  float v5;
  char v6;
  float v7;
  char v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  int v14;
  float v15;
  char v16;
  int v17;
  int v18;
  float v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  float v26;
  int v27;
  float v28;
  int v29;
  float v30;
  int v31;
  float v32;
  char v33;
  int v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = *(float *)(a1 + 16);
  v5 = *(float *)(a1 + 20);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *(float *)(a1 + 28);
  v8 = *(_BYTE *)(a1 + 32);
  v38 = *(unsigned __int8 *)(a1 + 40);
  v39 = *(_DWORD *)(a1 + 36);
  v37 = *(unsigned __int8 *)(a1 + 41);
  v9 = *(float *)(a1 + 44);
  v32 = *(float *)(a1 + 48);
  v28 = *(float *)(a1 + 56);
  v33 = *(_BYTE *)(a1 + 60);
  v29 = *(unsigned __int8 *)(a1 + 61);
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 12);
  v13 = *(float *)(a2 + 16);
  v12 = *(float *)(a2 + 20);
  v14 = *(unsigned __int8 *)(a2 + 24);
  v15 = *(float *)(a2 + 28);
  v16 = *(_BYTE *)(a2 + 32);
  v17 = *(_DWORD *)(a2 + 36);
  v18 = *(unsigned __int8 *)(a2 + 40);
  v35 = *(_BYTE *)(a1 + 52);
  v36 = *(unsigned __int8 *)(a2 + 41);
  v19 = *(float *)(a2 + 44);
  v30 = *(float *)(a2 + 48);
  v34 = *(unsigned __int8 *)(a2 + 52);
  v26 = *(float *)(a2 + 56);
  v31 = *(unsigned __int8 *)(a2 + 60);
  v27 = *(unsigned __int8 *)(a2 + 61);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  result = 0;
  if (v2 != v10 || ((v3 ^ v11) & 1) != 0)
    return result;
  if (v4 != v13)
    goto LABEL_19;
  if ((v6 & 1) != 0)
  {
    if (!v14)
      goto LABEL_19;
  }
  else
  {
    if (v5 == v12)
      v21 = v14;
    else
      v21 = 1;
    if ((v21 & 1) != 0)
      goto LABEL_19;
  }
  if ((v8 & 1) != 0)
  {
    if ((v16 & 1) == 0)
    {
LABEL_19:
      v22 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    if (v7 == v15)
      v23 = v16;
    else
      v23 = 1;
    if ((v23 & 1) != 0)
      goto LABEL_19;
  }
  v22 = 0;
LABEL_20:
  result = 0;
  if ((v22 & 1) == 0 && v39 == v17 && ((v38 ^ v18) & 1) == 0 && ((v37 ^ v36) & 1) == 0 && v9 == v19)
  {
    if ((v35 & 1) != 0)
    {
      if (!v34)
        return 0;
    }
    else
    {
      v24 = v34;
      if (v32 != v30)
        v24 = 1;
      if ((v24 & 1) != 0)
        return 0;
    }
    if ((v33 & 1) != 0)
    {
      if (!v31)
        return 0;
    }
    else
    {
      v25 = v31;
      if (v28 != v26)
        v25 = 1;
      if ((v25 & 1) != 0)
        return 0;
    }
    return v29 ^ v27 ^ 1u;
  }
  return result;
}

uint64_t specialized static _SymbolEffect.Added.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v4 = *(float *)(a2 + 48);
  v5 = *(float *)(a1 + 48);
  v6 = *(_DWORD *)(a2 + 44);
  v7 = *(_DWORD *)(a1 + 44);
  v8 = *(_WORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 16);
  v12 = v9;
  v13 = v8;
  specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)&v11);
  if (v5 == v4)
    return v10 & (v7 == v6);
  else
    return 0;
}

BOOL specialized static _SymbolEffect.VariableColorConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  if ((~*(_QWORD *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v4 & 0xF000000000000006) == 0)
      return v3 == v5;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  if ((~v4 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  v8 = v4;
  outlined copy of _SymbolEffect.Trigger(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  v6 = specialized static PlaybackMode.== infix(_:_:)(&v9, &v8);
  outlined consume of _SymbolEffect.Trigger(v9);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if ((v6 & 1) != 0)
    return v3 == v5;
  return 0;
}

uint64_t specialized static _SymbolEffect.WiggleConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  char v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(unsigned __int8 *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a1 + 25);
  v8 = *(_QWORD *)a2;
  v9 = *(double *)(a2 + 8);
  v10 = *(unsigned __int8 *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 20);
  v12 = *(unsigned __int8 *)(a2 + 24);
  v13 = *(unsigned __int8 *)(a2 + 25);
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    v18 = *(_QWORD *)a1;
    if ((~v8 & 0xF000000000000006) != 0)
    {
      v17 = v8;
      outlined copy of _SymbolEffect.Trigger(v2);
      outlined copy of _SymbolEffect.Trigger(v2);
      v15 = specialized static PlaybackMode.== infix(_:_:)(&v18, &v17);
      outlined consume of _SymbolEffect.Trigger(v18);
      outlined consume of _SymbolEffect.Trigger?(v2);
      if ((v15 & 1) != 0)
        goto LABEL_10;
      return 0;
    }
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v8);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v8);
    return 0;
  }
  if ((~v8 & 0xF000000000000006) != 0)
    goto LABEL_6;
LABEL_10:
  result = 0;
  if ((v4 & 1) != 0)
  {
    if (!v10 || v5 != v11)
      return result;
LABEL_20:
    if (((v6 ^ v12) & 1) == 0)
      return v7 ^ v13 ^ 1u;
    return result;
  }
  if ((v10 & 1) == 0 && v3 == v9 && v5 == v11)
    goto LABEL_20;
  return result;
}

uint64_t specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 12);
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  if ((~*(_QWORD *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v5 & 0xF000000000000006) == 0)
    {
      if (v3 == v6)
        return v4 ^ v7 ^ 1u;
      return 0;
    }
LABEL_7:
    outlined copy of _SymbolEffect.Trigger?(v5);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v5);
    return 0;
  }
  v11 = *(_QWORD *)a1;
  if ((~v5 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
    goto LABEL_7;
  }
  v10 = v5;
  outlined copy of _SymbolEffect.Trigger(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  v9 = specialized static PlaybackMode.== infix(_:_:)(&v11, &v10);
  outlined consume of _SymbolEffect.Trigger(v11);
  outlined consume of _SymbolEffect.Trigger?(v2);
  result = 0;
  if ((v9 & 1) != 0 && v3 == v6)
    return v4 ^ v7 ^ 1u;
  return result;
}

uint64_t specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if ((~*(_QWORD *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v4 & 0xF000000000000006) == 0)
      return v3 ^ v5 ^ 1u;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  if ((~v4 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  v8 = v4;
  outlined copy of _SymbolEffect.Trigger?(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  v6 = specialized static PlaybackMode.== infix(_:_:)(&v9, &v8);
  outlined consume of _SymbolEffect.Trigger(v9);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if ((v6 & 1) != 0)
    return v3 ^ v5 ^ 1u;
  return 0;
}

void specialized static _SymbolEffect.Storage.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_234CDA1F0()
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  if (v4 >= 0x1000)
  {
    outlined copy of _SymbolEffect.Trigger?(v0);
    outlined copy of _SymbolEffect.Storage(v6, v7, v5, v4);
    outlined consume of _SymbolEffect.Storage(v0, v3, v2, v1);
    outlined consume of _SymbolEffect.Storage(v6, v7, v5, v4);
    v8 = 0;
  }
  else
  {
    v12 = v0;
    v13 = v3 & 1;
    v10 = v6;
    v11 = v7 & 1;
    outlined copy of _SymbolEffect.Storage(v6, v7, v5, v4);
    outlined copy of _SymbolEffect.Storage(v0, v3, v2, v1);
    outlined copy of _SymbolEffect.Storage(v6, v7, v5, v4);
    outlined copy of _SymbolEffect.Storage(v0, v3, v2, v1);
    v8 = specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)((uint64_t)&v12, (uint64_t)&v10);
    outlined consume of _SymbolEffect.Storage(v0, v3, v2, v1);
    outlined consume of _SymbolEffect.Storage(v6, v7, v5, v4);
    outlined consume of _SymbolEffect.Storage(v6, v7, v5, v4);
    outlined consume of _SymbolEffect.Storage(v0, v3, v2, v1);
  }
  return v8 & 1;
}

uint64_t outlined copy of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0)
    return outlined copy of _SymbolEffect.Trigger(result);
  return result;
}

uint64_t outlined copy of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u)
    return outlined copy of _SymbolEffect.Trigger?(result);
  return result;
}

uint64_t outlined consume of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u)
    return outlined consume of _SymbolEffect.Trigger?(result);
  return result;
}

uint64_t specialized static _SymbolEffect.Identified.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  float v7;
  float v8;
  char v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  float v15;
  float v16;
  int v17;
  float v18;
  char v19;
  char v20;
  char v21;
  char v23;
  char v24;
  _QWORD v25[3];
  unsigned __int16 v26;

  v2 = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_WORD *)(a1 + 40);
    v8 = *(float *)(a1 + 44);
    v7 = *(float *)(a1 + 48);
    v9 = *(_BYTE *)(a1 + 52);
    v10 = *(float *)(a1 + 56);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 32);
    v14 = *(_WORD *)(a2 + 40);
    v16 = *(float *)(a2 + 44);
    v15 = *(float *)(a2 + 48);
    v17 = *(unsigned __int8 *)(a2 + 52);
    v18 = *(float *)(a2 + 56);
    v23 = *(_BYTE *)(a2 + 60);
    v24 = *(_BYTE *)(a1 + 60);
    v25[0] = v3;
    v25[1] = v4;
    v25[2] = v5;
    v26 = v6;
    outlined copy of _SymbolEffect.Storage(v3, v4, v5, v6);
    outlined copy of _SymbolEffect.Storage(v11, v12, v13, v14);
    specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)v25);
    if ((v19 & 1) == 0 || v8 != v16)
      goto LABEL_18;
    if ((v9 & 1) != 0)
    {
      if (!v17)
        goto LABEL_18;
    }
    else
    {
      if (v7 == v15)
        v20 = v17;
      else
        v20 = 1;
      if ((v20 & 1) != 0)
        goto LABEL_18;
    }
    if ((v24 & 1) != 0)
    {
      if ((v23 & 1) == 0)
      {
LABEL_18:
        v2 = 0;
        goto LABEL_19;
      }
    }
    else
    {
      v21 = v23;
      if (v10 != v18)
        v21 = 1;
      if ((v21 & 1) != 0)
        goto LABEL_18;
    }
    v2 = 1;
LABEL_19:
    outlined consume of _SymbolEffect.Storage(v11, v12, v13, v14);
    outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
  }
  return v2;
}

uint64_t outlined consume of _SymbolEffect.Storage?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((~(_DWORD)a3 & 0xFFFFFFFE) != 0 || (a4 & 0xFEFE) != 2)
    return outlined consume of _SymbolEffect.Storage(result, a2, a3, a4);
  return result;
}

uint64_t sub_234CDA80C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  int v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v12;
  v13 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v13;
  return a1;
}

uint64_t assignWithTake for _SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_WORD *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 45))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (-2 * a2);
      *(_WORD *)(result + 24) = 2;
      return result;
    }
    *(_BYTE *)(result + 45) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect()
{
  return &type metadata for _SymbolEffect;
}

uint64_t destroy for _SymbolEffect.Storage(uint64_t a1)
{
  return outlined consume of _SymbolEffect.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD *)(a1 + 24));
}

uint64_t initializeWithCopy for _SymbolEffect.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v6;
  outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v4;
  outlined consume of _SymbolEffect.Storage(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Storage(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (-2 * a2);
      *(_WORD *)(result + 24) = 2;
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for _SymbolEffect.Storage(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int16 *)(a1 + 24);
  v2 = (__int16)v1;
  v3 = v1 >> 12;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 8);
}

uint64_t destructiveProjectEnumData for _SymbolEffect.Storage(uint64_t result)
{
  *(_WORD *)(result + 24) &= 0xFFFu;
  return result;
}

uint64_t destructiveInjectEnumTag for _SymbolEffect.Storage(uint64_t result, unsigned int a2)
{
  __int16 v2;

  if (a2 < 8)
  {
    v2 = *(_WORD *)(result + 24) & 0x101 | ((_WORD)a2 << 12);
    *(_QWORD *)(result + 16) &= 0xFFFFFFFF00000001;
    *(_WORD *)(result + 24) = v2;
  }
  else
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 8;
    *(_WORD *)(result + 24) = 0x8000;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Storage()
{
  return &type metadata for _SymbolEffect.Storage;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Trigger()
{
  return &type metadata for _SymbolEffect.Trigger;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Options()
{
  return &type metadata for _SymbolEffect.Options;
}

uint64_t destroy for _SymbolEffect.PulseConfiguration(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if ((~result & 0xF000000000000006) != 0)
    return outlined consume of _SymbolEffect.Trigger(result);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t *outlined destroy of _SymbolEffect.Trigger(uint64_t *a1)
{
  outlined consume of _SymbolEffect.Trigger(*a1);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for _SymbolEffect.PulseConfiguration()
{
  return &type metadata for _SymbolEffect.PulseConfiguration;
}

ValueMetadata *type metadata accessor for _SymbolEffect.BreatheConfiguration()
{
  return &type metadata for _SymbolEffect.BreatheConfiguration;
}

ValueMetadata *type metadata accessor for _SymbolEffect.BounceConfiguration()
{
  return &type metadata for _SymbolEffect.BounceConfiguration;
}

uint64_t initializeWithCopy for _SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  v7 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.WiggleConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.WiggleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.WiggleConfiguration()
{
  return &type metadata for _SymbolEffect.WiggleConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for _SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  return a1;
}

ValueMetadata *type metadata accessor for _SymbolEffect.RotateConfiguration()
{
  return &type metadata for _SymbolEffect.RotateConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for _SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
    outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 0xF000000000000006;
  if ((~*(_QWORD *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006)
      outlined copy of _SymbolEffect.Trigger(*(_QWORD *)a2);
    *(_QWORD *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(_QWORD *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.VariableColorConfiguration(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x3E && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 62);
  v3 = *(_QWORD *)a1 >> 58;
  v4 = *(_QWORD *)a1 & 6 | (8 * ((v3 >> 2) & 7));
  v5 = 62 - (v4 | (v3 >> 5));
  if (v4)
    v6 = v5;
  else
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.VariableColorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x3D)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 62;
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0x3E)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
    {
      v3 = (32 * (a2 ^ 0x3F)) | ((a2 ^ 0x3F) >> 1);
      *(_QWORD *)result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.VariableColorConfiguration()
{
  return &type metadata for _SymbolEffect.VariableColorConfiguration;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.ScaleConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.ScaleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.ScaleConfiguration()
{
  return &type metadata for _SymbolEffect.ScaleConfiguration;
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.HiddenConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 6))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.HiddenConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.HiddenConfiguration()
{
  return &type metadata for _SymbolEffect.HiddenConfiguration;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.ReplaceConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.ReplaceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.ReplaceConfiguration()
{
  return &type metadata for _SymbolEffect.ReplaceConfiguration;
}

uint64_t destroy for _SymbolEffect.Identified(uint64_t a1)
{
  return outlined consume of _SymbolEffect.Storage(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_WORD *)(a1 + 40));
}

uint64_t initializeWithCopy for _SymbolEffect.Identified(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Identified(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  int v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v11 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v12 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v12;
  v13 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v13;
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.Identified(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int16 v10;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_WORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = v4;
  v10 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v10);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Identified(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 61))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_DWORD *)(a1 + 32) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 40) >> 1) << 31);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Identified(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 61) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = (-2 * a2);
      *(_WORD *)(result + 40) = 2;
      return result;
    }
    *(_BYTE *)(result + 61) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Identified()
{
  return &type metadata for _SymbolEffect.Identified;
}

uint64_t initializeWithCopy for _SymbolEffect.Phase(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Phase(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v4;
  v5 = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v5;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  v7 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  return a1;
}

__n128 __swift_memcpy62_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 46) = *(_OWORD *)(a2 + 46);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _SymbolEffect.Phase(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Phase(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 62))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Phase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 62) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 62) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Phase()
{
  return &type metadata for _SymbolEffect.Phase;
}

uint64_t initializeWithCopy for _SymbolEffect.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v11 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int16 v10;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_WORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = v4;
  v10 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v10);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Added(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 52))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_DWORD *)(a1 + 32) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 40) >> 1) << 31);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Added(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 52) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = (-2 * a2);
      *(_WORD *)(result + 40) = 2;
      return result;
    }
    *(_BYTE *)(result + 52) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Added()
{
  return &type metadata for _SymbolEffect.Added;
}

unint64_t type metadata accessor for RBAnimation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RBAnimation;
  if (!lazy cache variable for type metadata for RBAnimation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBAnimation);
  }
  return result;
}

uint64_t partial apply for closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  if (v2)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 96))();
  if (v3)
    return (*(uint64_t (**)(void))(*(_QWORD *)v3 + 96))();
  return result;
}

uint64_t sub_234CDBF10()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for EnvironmentValues.SymbolEffectsKey()
{
  return &type metadata for EnvironmentValues.SymbolEffectsKey;
}

uint64_t sub_234CDBF44()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  if ((unint64_t)v1 >= 2)

  return swift_deallocObject();
}

void NSDateFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  id v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v2 = type metadata accessor for TimeZone();
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Calendar();
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = a1[1];
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v11);
  }
  else
  {
    v14 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v11);
  }
  swift_release_n();
  swift_release_n();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v16 = v24;
  objc_msgSend(v24, sel_setLocale_, isa);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v7);
  }
  else
  {
    v17 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  v18 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  objc_msgSend(v16, sel_setCalendar_, v18);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v4);
  }
  else
  {
    v19 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v4);
  }
  swift_release_n();
  swift_release_n();
  v20 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v23);
  objc_msgSend(v16, sel_setTimeZone_, v20);

}

void NSISO8601DateFormatter.configure(in:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v11[16];

  v2 = v1;
  v4 = type metadata accessor for TimeZone();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
  }
  else
  {
    v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v2, sel_setTimeZone_, isa);

}

void NSDateComponentsFormatter.configure(in:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v11[16];

  v2 = v1;
  v4 = type metadata accessor for Calendar();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
  }
  else
  {
    v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v2, sel_setCalendar_, isa);

}

void NSDateIntervalFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  id v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v2 = type metadata accessor for TimeZone();
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = a1[1];
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v11);
  }
  else
  {
    v14 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v11);
  }
  swift_release_n();
  swift_release_n();
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v16 = v24;
  objc_msgSend(v24, sel_setCalendar_, isa);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v7);
  }
  else
  {
    v17 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  v18 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  objc_msgSend(v16, sel_setLocale_, v18);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v4);
  }
  else
  {
    v19 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v4);
  }
  swift_release_n();
  swift_release_n();
  v20 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v23);
  objc_msgSend(v16, sel_setTimeZone_, v20);

}

void NSNumberFormatter.configure(in:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v11[16];

  v2 = v1;
  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
  }
  else
  {
    v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v2, sel_setLocale_, isa);

}

void protocol witness for EnvironmentConfigurableFormatter.configure(in:) in conformance NSMassFormatter(uint64_t *a1)
{
  NSMassFormatter.configure(in:)(a1);
}

void NSMeasurementFormatter.configure(in:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  void (*v15)(char *, uint64_t);
  id v16;
  void *v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - v9;
  v11 = *a1;
  v12 = a1[1];
  if (v12)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v11, (uint64_t)v10);
  }
  else
  {
    v13 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v10);
  }
  swift_release_n();
  swift_release_n();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  objc_msgSend(v2, sel_setLocale_, isa);

  v16 = objc_msgSend(v2, sel_numberFormatter);
  if (v16)
  {
    v17 = v16;
    if (v12)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v11, (uint64_t)v7);
    }
    else
    {
      v18 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v7);
    }
    swift_release_n();
    swift_release_n();
    v19 = Locale._bridgeToObjectiveC()().super.isa;
    v15(v7, v4);
    objc_msgSend(v17, sel_setLocale_, v19);

  }
  else
  {
    __break(1u);
  }
}

void NSMassFormatter.configure(in:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  Class isa;
  _BYTE v15[16];

  v2 = v1;
  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *a1;
  v9 = a1[1];
  v11 = objc_msgSend(v2, sel_numberFormatter, v6);
  if (v11)
  {
    v12 = v11;
    if (v9)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v10, (uint64_t)v8);
    }
    else
    {
      v13 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v8);
    }
    swift_release_n();
    swift_release_n();
    isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
    objc_msgSend(v12, sel_setLocale_, isa);

  }
  else
  {
    __break(1u);
  }
}

SwiftUI::ToggleState __swiftcall ToggleState.init(_:)(SwiftUI::ToggleState result)
{
  _BYTE *v1;

  *v1 = result ^ 1;
  return result;
}

Swift::Void __swiftcall ToggleState.toggle()()
{
  BOOL *v0;

  *v0 = !*v0;
}

uint64_t static ToggleState.stateFor<A, B>(item:in:)@<X0>(char *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Sequence.allSatisfy(_:)();
  if ((result & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    MEMORY[0x24BDAC7A8](result);
    result = Sequence.allSatisfy(_:)();
    if ((result & 1) != 0)
      v3 = 1;
    else
      v3 = 2;
  }
  *a1 = v3;
  return result;
}

uint64_t closure #1 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Binding(0, v7, v7, v8);
  Binding.wrappedValue.getter(v9);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v10 & 1;
}

uint64_t partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1)
{
  return partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in static ToggleState.stateFor<A, B>(item:in:)) & 1;
}

BOOL closure #2 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Binding(0, v7, v7, v8);
  Binding.wrappedValue.getter(v9);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return (v10 & 1) == 0;
}

uint64_t partial apply for closure #2 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1)
{
  return partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in static ToggleState.stateFor<A, B>(item:in:)) & 1;
}

uint64_t partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]) & 1;
}

SwiftUI::ToggleState_optional __swiftcall ToggleState.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if (rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::ToggleState_optional)rawValue;
}

uint64_t ToggleState.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::ToggleState_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ToggleState(Swift::UInt *a1)
{
  return ToggleState.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToggleState()
{
  lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToggleState()
{
  lazy protocol witness table accessor for type ToggleState and conformance ToggleState();
  return RawRepresentable<>.encode(to:)();
}

void *static ToggleState.allCases.getter()
{
  return &outlined read-only object #0 of static ToggleState.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ToggleState(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ToggleState;
}

uint64_t ToggleState.debugDescription.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 6710895;
  if (*v0 != 1)
    v1 = 0x646578696DLL;
  if (*v0)
    return v1;
  else
    return 28271;
}

unint64_t lazy protocol witness table accessor for type ToggleState and conformance ToggleState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ToggleState, &type metadata for ToggleState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ToggleState, &type metadata for ToggleState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ToggleState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ToggleState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToggleState] and conformance [A])
  {
    type metadata accessor for [ToggleState]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToggleState] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ToggleState]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ToggleState])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ToggleState]);
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToggleState()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 6710895;
  if (*v0 != 1)
    v1 = 0x646578696DLL;
  if (*v0)
    return v1;
  else
    return 28271;
}

uint64_t storeEnumTagSinglePayload for ToggleState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234CDD154 + 4 * byte_235296FA9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234CDD188 + 4 * asc_235296FA4[v4]))();
}

uint64_t sub_234CDD188(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CDD190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CDD198);
  return result;
}

uint64_t sub_234CDD1A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CDD1ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234CDD1B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CDD1B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToggleState()
{
  return &type metadata for ToggleState;
}

void AccessibilityNullableOptionSet.init()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v23 = a7;
  v24 = a8;
  v21 = a10;
  v22 = a6;
  v16 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v20 - v18;
  dispatch thunk of SetAlgebra.init()();
  dispatch thunk of SetAlgebra.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9, v19, a1);
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = v22;
  v31 = v23;
  v32 = v24;
  v33 = v21;
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDD308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v1 + *(int *)(a1 + 92), v4, v2);
}

uint64_t AccessibilityNullableOptionSet.subscript.getter()
{
  if ((dispatch thunk of SetAlgebra.contains(_:)() & 1) != 0)
    return 1;
  if ((dispatch thunk of SetAlgebra.contains(_:)() & 1) != 0)
    return 0;
  return 2;
}

uint64_t AccessibilityNullableOptionSet.subscript.setter(unsigned __int8 a1, char *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  char v21;
  void (*v22)(char *, char *, uint64_t, double);
  void (*v23)(char *, uint64_t);
  char *v24;
  char *v25;
  _QWORD v26[2];
  char *v27;

  v27 = a2;
  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16);
  v26[0] = *(_QWORD *)(a3 + 16);
  v26[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v26 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v26 - v16;
  if (v3 == 2)
  {
    v18 = v27;
    dispatch thunk of SetAlgebra.remove(_:)();
    v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v9, v6);
    dispatch thunk of SetAlgebra.remove(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v19)(v9, v6);
  }
  else
  {
    v21 = v3;
    v22 = *(void (**)(char *, char *, uint64_t, double))(v10 + 16);
    v22(v13, v27, AssociatedTypeWitness, v15);
    dispatch thunk of SetAlgebra.insert(_:)();
    v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v17, AssociatedTypeWitness);
    if ((v21 & 1) != 0)
    {
      v25 = v27;
      ((void (*)(char *, char *, uint64_t))v22)(v13, v27, AssociatedTypeWitness);
      dispatch thunk of SetAlgebra.insert(_:)();
      v23(v25, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v23)(v17, AssociatedTypeWitness);
    }
    else
    {
      v24 = v27;
      dispatch thunk of SetAlgebra.remove(_:)();
      v23(v24, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
}

uint64_t AccessibilityNullableOptionSet.subscript.getter(uint64_t a1, char a2)
{
  char v3;
  char v4;

  v3 = AccessibilityNullableOptionSet.subscript.getter();
  if (v3 == 2)
    v4 = a2;
  else
    v4 = v3;
  return v4 & 1;
}

uint64_t AccessibilityNullableOptionSet.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AccessibilityNullableOptionSet.mask.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 92));
}

void AccessibilityNullableOptionSet.init(implying:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v25 = a7;
  v26 = a8;
  v23 = a11;
  v24 = a5;
  v22 = a10;
  v16 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v22 - v18;
  v27 = v20;
  swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v21);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of SetAlgebra.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9, v19, a2);
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = v24;
  v31 = a6;
  v32 = v25;
  v33 = v26;
  v34 = v22;
  v35 = v23;
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDD790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v1 + *(int *)(a1 + 92), v4, v2);
}

void AccessibilityNullableOptionSet.init(adding:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v27 = a7;
  v28 = a8;
  v25 = a11;
  v26 = a5;
  v24 = a10;
  v16 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v24 - v20;
  v29 = v22;
  swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v23);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9, v18, a2);
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v32 = v26;
  v33 = a6;
  v34 = v27;
  v35 = v28;
  v36 = v24;
  v37 = v25;
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDD914(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v1 + *(int *)(a1 + 92), v4, v2);
}

void AccessibilityNullableOptionSet.init(removing:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v25 = a7;
  v26 = a8;
  v23 = a11;
  v24 = a5;
  v22 = a10;
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v22 - v19;
  dispatch thunk of SetAlgebra.init()();
  v27 = a1;
  swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v21);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9, v20, a2);
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = v24;
  v31 = a6;
  v32 = v25;
  v33 = v26;
  v34 = v22;
  v35 = v23;
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDDA98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v1 + *(int *)(a1 + 92), v4, v2);
}

void AccessibilityNullableOptionSet.init(adding:removing:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  _QWORD v30[6];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v34 = a6;
  v35 = a8;
  v38 = a5;
  v30[1] = a4;
  v31 = a9;
  v32 = a11;
  v33 = a12;
  v30[3] = a10;
  v15 = *(_QWORD *)(a3 - 8);
  v36 = a2;
  v37 = v15;
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[0] = v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v30 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v30 - v22;
  v39 = v24;
  v26 = *(_QWORD *)(v25 + 16);
  v30[2] = v25;
  v30[4] = v26;
  swift_getAssociatedTypeWitness();
  v27 = type metadata accessor for Array();
  v30[5] = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v27);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v28 = v37;
  v29 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v29(v20, v23, a3);
  v29(v17, v23, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v31, v20, a3);
  v39 = a3;
  v40 = a4;
  v41 = v38;
  v42 = v34;
  v43 = a7;
  v44 = v35;
  v45 = a10;
  v46 = v32;
  v47 = v33;
  type metadata accessor for AccessibilityNullableOptionSet();
}

void sub_234CDDC68(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2(v5 + *(int *)(a1 + 92), *(_QWORD *)(v8 - 272), v1);
  *(_QWORD *)(v8 - 160) = *(_QWORD *)(v8 - 184);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v9 = *(_QWORD *)(v8 - 264);
  *(_QWORD *)(v8 - 160) = v1;
  *(_QWORD *)(v8 - 152) = v9;
  *(_QWORD *)(v8 - 144) = *(_QWORD *)(v8 - 168);
  *(_QWORD *)(v8 - 136) = v6;
  *(_QWORD *)(v8 - 128) = *(_QWORD *)(v8 - 256);
  *(_QWORD *)(v8 - 120) = v3;
  *(_QWORD *)(v8 - 112) = *(_QWORD *)(v8 - 248);
  *(_QWORD *)(v8 - 104) = v4;
  *(_QWORD *)(v8 - 96) = v7;
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDDCDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  dispatch thunk of SetAlgebra.formUnion(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 176) + 8))(v1, v0);
}

void type metadata accessor for AccessibilityNullableOptionSet()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void key path getter for AccessibilityNullableOptionSet.subscript(_:) : <A>AccessibilityNullableOptionSet<A>A()
{
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDDD84()
{
  _BYTE *v0;
  uint64_t result;

  result = AccessibilityNullableOptionSet.subscript.getter();
  *v0 = result;
  return result;
}

void key path setter for AccessibilityNullableOptionSet.subscript(_:) : <A>AccessibilityNullableOptionSet<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v5 = a4 + a3;
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v15 = *(_OWORD *)(a4 + a3 - 72);
  v14 = *(_OWORD *)(a4 + a3 - 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = *(void (**)(char *, uint64_t))(v8 + 16);
  v10 = *(_OWORD *)(v5 - 24);
  v12 = *(_OWORD *)(v5 - 56);
  v13 = v10;
  v9((char *)&v12 - v11, a3);
  v16 = v15;
  v17 = v12;
  v18 = v14;
  v19 = v13;
  v20 = v6;
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDDE7C(uint64_t a1)
{
  unsigned __int8 v1;
  char *v2;

  return AccessibilityNullableOptionSet.subscript.setter(v1, v2, a1);
}

void (*AccessibilityNullableOptionSet.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  size_t v9;

  v6 = malloc(0x38uLL);
  *a1 = v6;
  *v6 = a3;
  v6[1] = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[2] = AssociatedTypeWitness;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[3] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[4] = malloc(v9);
  v6[5] = malloc(v9);
  (*(void (**)(void))(v8 + 16))();
  *((_BYTE *)v6 + 48) = AccessibilityNullableOptionSet.subscript.getter();
  return AccessibilityNullableOptionSet.subscript.modify;
}

void AccessibilityNullableOptionSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  unsigned __int8 v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unsigned __int8 v7;
  char *v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *((_BYTE *)*a1 + 48);
  v4 = (char *)(*a1)[4];
  v5 = (char *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v6 = *v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v2[3] + 32))((*a1)[4], v5, v2[2]);
    v7 = v3;
    v8 = v4;
    v9 = v6;
  }
  else
  {
    v9 = *v2;
    v7 = *((_BYTE *)*a1 + 48);
    v8 = v5;
  }
  AccessibilityNullableOptionSet.subscript.setter(v7, v8, v9);
  free(v5);
  free(v4);
  free(v2);
}

uint64_t AccessibilityNullableOptionSet.isDefault.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = dispatch thunk of SetAlgebra.isEmpty.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if ((v7 & 1) != 0)
    v8 = dispatch thunk of SetAlgebra.isEmpty.getter();
  else
    v8 = 0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  return v8 & 1;
}

uint64_t AccessibilityNullableOptionSet.isSet(_:)()
{
  return dispatch thunk of SetAlgebra.contains(_:)() & 1;
}

uint64_t static AccessibilityNullableOptionSet.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for AccessibilityNullableOptionSet();
  return 0;
}

uint64_t AccessibilityNullableOptionSet.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t AccessibilityNullableOptionSet.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1802723693 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AccessibilityNullableOptionSet.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1802723693;
  else
    return 0x65756C6176;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys()
{
  char *v0;

  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys(uint64_t a1)
{
  char *v1;

  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys()
{
  char *v0;

  return AccessibilityNullableOptionSet.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AccessibilityNullableOptionSet.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNullableOptionSet<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNullableOptionSet<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void AccessibilityNullableOptionSet.encode(to:)()
{
  type metadata accessor for AccessibilityNullableOptionSet.CodingKeys();
}

uint64_t sub_234CDE5D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNullableOptionSet<A>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v2 - 160) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v7)
  {
    *(_BYTE *)(v2 - 160) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void type metadata accessor for AccessibilityNullableOptionSet.CodingKeys()
{
  JUMPOUT(0x23B7C9B5CLL);
}

Swift::Int AccessibilityNullableOptionSet.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void AccessibilityNullableOptionSet.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[24];

  v18[10] = a5;
  v18[8] = a3;
  v18[9] = a4;
  v18[23] = a1;
  v18[0] = a6;
  v18[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v18[2] = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v18[5] = (char *)v18 - v10;
  v18[12] = v11;
  v18[13] = v12;
  v18[14] = v13;
  v18[15] = v14;
  v18[16] = v15;
  v18[17] = v16;
  v18[18] = v17;
  v18[19] = a7;
  v18[20] = a8;
  type metadata accessor for AccessibilityNullableOptionSet.CodingKeys();
}

void sub_234CDE82C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNullableOptionSet<A>.CodingKeys, a1);
  v8 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v7 - 200) = v8;
  *(_QWORD *)(v7 - 248) = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v7 - 224) = v1;
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 152) = v3;
  *(_QWORD *)(v7 - 208) = v3;
  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 136) = v6;
  v9 = *(_QWORD *)(v7 - 184);
  *(_QWORD *)(v7 - 128) = *(_QWORD *)(v7 - 192);
  *(_QWORD *)(v7 - 120) = v9;
  *(_QWORD *)(v7 - 112) = *(_QWORD *)(v7 - 176);
  *(_QWORD *)(v7 - 104) = v4;
  *(_QWORD *)(v7 - 96) = v2;
  type metadata accessor for AccessibilityNullableOptionSet();
}

uint64_t sub_234CDE8BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v17 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v3 - 176) = v2;
  v8 = *(_QWORD *)(v3 - 168);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
  *(_QWORD *)(v3 - 168) = v5;
  v9 = v7;
  v10 = *(_QWORD *)(v3 - 248);
  v11 = *(_QWORD *)(v3 - 240);
  v13 = *(_QWORD *)(v3 - 232);
  v12 = *(_QWORD *)(v3 - 224);
  *(_BYTE *)(v3 - 160) = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  v14(v9, *(_QWORD *)(v3 - 216), v12);
  *(_BYTE *)(v3 - 160) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v3 - 176), *(_QWORD *)(v3 - 200));
  v14(&v9[*(int *)(a1 + 92)], v11, v12);
  v15 = *(_QWORD *)(v3 - 168);
  (*(void (**)(_QWORD, char *, uint64_t))(v15 + 16))(*(_QWORD *)(v3 - 256), v9, a1);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v9, a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNullableOptionSet<A>()
{
  return static AccessibilityNullableOptionSet.== infix(_:_:)() & 1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityNullableOptionSet<A>()
{
  Hasher.init(_seed:)();
  AccessibilityNullableOptionSet.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance AccessibilityNullableOptionSet<A>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  AccessibilityNullableOptionSet.init(from:)(a1, a2[2], a2[6], a2[7], a2[8], a3, a2[9], a2[10]);
}

void protocol witness for Encodable.encode(to:) in conformance AccessibilityNullableOptionSet<A>()
{
  AccessibilityNullableOptionSet.encode(to:)();
}

unint64_t AccessibilityNullableOptionSet.description.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNullableOptionSet<A>()
{
  return 0xD00000000000001ELL;
}

uint64_t AccessibilityNullableOptionSet.merge(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v28 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - v11;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - v15;
  v29 = v17;
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16);
  v18(v12, a1, v5, v14);
  v19 = v2 + *(int *)(a2 + 92);
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16);
  MEMORY[0x23B7C6B50](v19, v5, v20);
  v21 = a1 + *(int *)(a2 + 92);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v12, v21, v5);
  MEMORY[0x23B7C6B50](v19, v5, v20);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v12, v21, v5);
  dispatch thunk of SetAlgebra.formUnion(_:)();
  dispatch thunk of SetAlgebra.subtract(_:)();
  ((void (*)(char *, char *, uint64_t))v18)(v12, v16, v5);
  v22 = v28;
  dispatch thunk of SetAlgebra.formUnion(_:)();
  v23 = dispatch thunk of SetAlgebra.isEmpty.getter();
  ((void (*)(char *, char *, uint64_t))v18)(v22, v9, v5);
  if ((v23 & 1) != 0)
    v24 = 1;
  else
    v24 = dispatch thunk of SetAlgebra.isEmpty.getter();
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v22, v5);
  v25(v9, v5);
  v25(v16, v5);
  return v24 & 1;
}

void AccessibilityNullableOptionSet.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(uint64_t, uint64_t);
  char *v42;
  unint64_t v43;
  char v44;
  Swift::UInt v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  BOOL v63;
  char *v64;
  char v65;
  Swift::UInt v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t AssociatedTypeWitness;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v3 = v2;
  v80 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[9] + 8) + 24) + 16);
  v5 = *(_QWORD *)(a2[6] + 8);
  v72 = a2;
  v6 = a2[2];
  swift_getAssociatedTypeWitness();
  v79 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v77 = (char *)&v67 - v7;
  v8 = swift_checkMetadataState();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v71 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v75 = (char *)&v67 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v76 = (char *)&v67 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v70 = (char *)&v67 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v67 - v18;
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v67 - v22;
  v73 = v6;
  v74 = v5;
  v25 = v24;
  dispatch thunk of RawRepresentable.rawValue.getter();
  v26 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v81 = v9;
  if ((v26 & 1) != 0)
  {
    v27 = AssociatedTypeWitness;
    v28 = v79;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v30 = v3;
    v31 = v77;
    MEMORY[0x23B7C7558](&unk_235260F38, 256, v27, AssociatedConformanceWitness);
    v32 = v31;
    v3 = v30;
    v33 = v28;
    v9 = v81;
    MEMORY[0x23B7C742C](v32, v8, v33);
    LOBYTE(v27) = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v8);
    if ((v27 & 1) == 0)
      goto LABEL_34;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    v69 = v3;
    v34 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v34(v19, v23, v8);
    v82 = -1;
    v35 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v35 & 1) != 0)
    {
      if (v36 <= 64)
      {
        v37 = AssociatedTypeWitness;
        v38 = v79;
        v39 = swift_getAssociatedConformanceWitness();
        v40 = v77;
        MEMORY[0x23B7C7558](&unk_235260F38, 256, v37, v39);
        MEMORY[0x23B7C742C](v40, v8, v38);
        LOBYTE(v37) = dispatch thunk of static Comparable.> infix(_:_:)();
        v41 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
        v41((uint64_t)v25, v8);
        v68 = v82;
        v42 = v70;
        v34(v70, v19, v8);
        if ((v37 & 1) != 0)
        {
          v43 = dispatch thunk of BinaryInteger._lowWord.getter();
          v41((uint64_t)v42, v8);
          v9 = v81;
          if (v68 < v43)
          {
LABEL_34:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
        }
        else
        {
          v41((uint64_t)v42, v8);
          v9 = v81;
        }
        goto LABEL_14;
      }
    }
    else if (v36 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      v9 = v81;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v19, v8);
      goto LABEL_15;
    }
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v44 = dispatch thunk of static Comparable.< infix(_:_:)();
    v9 = v81;
    v41 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v41((uint64_t)v25, v8);
    if ((v44 & 1) != 0)
      goto LABEL_34;
LABEL_14:
    v41((uint64_t)v19, v8);
  }
LABEL_15:
  v45 = dispatch thunk of BinaryInteger._lowWord.getter();
  v46 = *(void (**)(char *, uint64_t))(v9 + 8);
  v46(v23, v8);
  if (v45)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v45);
  }
  v47 = v76;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v49 = AssociatedTypeWitness;
    v48 = v79;
    v50 = swift_getAssociatedConformanceWitness();
    v51 = v77;
    MEMORY[0x23B7C7558](&unk_235260F38, 256, v49, v50);
    MEMORY[0x23B7C742C](v51, v8, v48);
    LOBYTE(v48) = dispatch thunk of static Comparable.>= infix(_:_:)();
    v46(v25, v8);
    if ((v48 & 1) == 0)
      goto LABEL_34;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    v52 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    v52(v75, v47, v8);
    v82 = -1;
    v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v53 & 1) != 0)
    {
      if (v54 <= 64)
      {
        v56 = AssociatedTypeWitness;
        v55 = v79;
        v57 = swift_getAssociatedConformanceWitness();
        v58 = v77;
        MEMORY[0x23B7C7558](&unk_235260F38, 256, v56, v57);
        MEMORY[0x23B7C742C](v58, v8, v55);
        v59 = v75;
        LOBYTE(v55) = dispatch thunk of static Comparable.> infix(_:_:)();
        v46(v25, v8);
        v60 = v82;
        v61 = v71;
        v52(v71, v59, v8);
        if ((v55 & 1) != 0)
        {
          v62 = dispatch thunk of BinaryInteger._lowWord.getter();
          v46(v61, v8);
          v63 = v60 >= v62;
          v64 = v75;
          v47 = v76;
          if (!v63)
            goto LABEL_34;
        }
        else
        {
          v46(v61, v8);
          v64 = v75;
          v47 = v76;
        }
        goto LABEL_30;
      }
    }
    else if (v54 < 65)
    {
      v64 = v75;
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_30:
      v46(v64, v8);
      goto LABEL_31;
    }
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v64 = v75;
    v65 = dispatch thunk of static Comparable.< infix(_:_:)();
    v46(v25, v8);
    if ((v65 & 1) != 0)
      goto LABEL_34;
    goto LABEL_30;
  }
LABEL_31:
  v66 = dispatch thunk of BinaryInteger._lowWord.getter();
  v46(v47, v8);
  if (v66)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v66);
  }
}

void AccessibilityNullableOptionSet.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a6;
  v34 = a7;
  v24 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v28 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v27 = (char *)v23 - v18;
  v31 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v26 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v23 - v22;
  v30 = a10;
  v36 = a8;
  v35 = a1;
  v29 = a2;
  v23[1] = a3;
  AccessibilityNullableOptionSet.init()(a1, a2, a3, a4, a5, v33, v34, v24, a8, a10);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AccessibilityNullableOptionSet<A>(uint64_t a1, _QWORD *a2)
{
  AccessibilityNullableOptionSet.encode(to:)(a1, a2);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance AccessibilityNullableOptionSet<A>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  AccessibilityNullableOptionSet.init(from:)(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a2, a1[9], a1[10]);
}

void base witness table accessor for Equatable in AccessibilityNullableOptionSet<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234CDFB38()
{
  return 72;
}

__n128 sub_234CDFB44(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t type metadata instantiation function for AccessibilityNullableOptionSet()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for AccessibilityNullableOptionSet()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityNullableOptionSet(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CDFC9C + 4 * byte_235297130[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityNullableOptionSet(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t storeEnumTagSinglePayload for AccessibilityNullableOptionSet.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234CDFEF8 + 4 * byte_235297143[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234CDFF2C + 4 * byte_23529713E[v4]))();
}

uint64_t sub_234CDFF2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CDFF34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CDFF3CLL);
  return result;
}

uint64_t sub_234CDFF48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CDFF50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234CDFF54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CDFF5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in AccessibilityNullableOptionSet<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in AccessibilityNullableOptionSet<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in AccessibilityNullableOptionSet<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t Comparable.clamp(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClosedRange();
  Comparable.clamp(min:max:)(a1, a1 + *(int *)(v8 + 36), a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v2, v7, a2);
}

uint64_t Comparable.clamp(min:max:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  max<A>(_:_:)();
  min<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t Comparable.clamped(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  return Comparable.clamp(to:)(a1, a2);
}

uint64_t Comparable.formMin(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Comparable.formMin(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t Comparable.formMax(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Comparable.formMin(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE07D8]);
}

uint64_t Comparable.formMin(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;

  v5 = v4;
  result = a4(a1, v5, a2, a3);
  if ((result & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 - 8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v5, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, a1, a2);
  }
  return result;
}

uint64_t Collection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  char v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD v35[4];
  uint64_t v36;
  char *v37;
  char v38[32];

  v36 = a4;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v35 - v15;
  v17 = v4;
  dispatch thunk of Collection.startIndex.getter();
  v35[3] = a3;
  v35[2] = swift_getAssociatedConformanceWitness();
  v18 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v16, AssociatedTypeWitness);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v21 = v17;
  v22 = a1;
  v20(v13, a1, AssociatedTypeWitness);
  v23 = v8;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v25 = v37;
  v24(v37, v21, a2);
  if ((v18 & 1) != 0)
  {
    v35[0] = v22;
    v35[1] = v21;
    dispatch thunk of Collection.endIndex.getter();
    v26 = dispatch thunk of static Comparable.< infix(_:_:)();
    v19(v16, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, a2);
    v19(v13, AssociatedTypeWitness);
    v27 = v36;
    if ((v26 & 1) != 0)
    {
      v28 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v30 = v29;
      v31 = swift_getAssociatedTypeWitness();
      v32 = *(_QWORD *)(v31 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v27, v30, v31);
      v28(v38, 0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v27, 0, 1, v31);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, a2);
    v19(v13, AssociatedTypeWitness);
    v27 = v36;
  }
  v34 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v27, 1, 1, v34);
}

uint64_t Collection.index(atOffset:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v3 = (char *)&v5 - v2;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t Collection.index(atOffset:limitedBy:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v3 = (char *)&v5 - v2;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:limitedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t Collection.offset(of:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v3 = (char *)&v6 - v2;
  dispatch thunk of Collection.startIndex.getter();
  v4 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4;
}

uint64_t Collection.withContiguousStorage<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  _QWORD v28[4];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a6;
  v31 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v30 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v15 = (char *)v28 - v14;
  v34 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a5 + 8);
  v28[2] = a1;
  v28[3] = a2;
  v32 = a4;
  v20 = v35;
  result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (!v20)
  {
    v22 = v18;
    v23 = v29;
    v24 = v30;
    v35 = v6;
    v28[1] = v19;
    v26 = v31;
    v25 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v15, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v23);
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, v35, a3);
      swift_getAssociatedTypeWitness();
      Array.init<A>(_:)();
      ContiguousArray.withUnsafeBufferPointer<A>(_:)();
      return swift_release();
    }
    else
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v27(v22, v15, v25);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v33, v22, v25);
    }
  }
  return result;
}

uint64_t _ViewInputs.textAlwaysOnProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.textAlwaysOnProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.textAlwaysOnProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.textAlwaysOnProvider : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _ViewInputs.textAlwaysOnProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t _GraphInputs.textAlwaysOnProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.textAlwaysOnProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.textAlwaysOnProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textAlwaysOnProvider.modify;
}

void _ViewInputs.textAlwaysOnProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

uint64_t key path getter for _GraphInputs.textAlwaysOnProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.textAlwaysOnProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.textAlwaysOnProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textAlwaysOnProvider.modify;
}

uint64_t dispatch thunk of static TextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

ValueMetadata *type metadata accessor for _GraphInputs.TextAlwaysOnProviderKey()
{
  return &type metadata for _GraphInputs.TextAlwaysOnProviderKey;
}

double static CGPoint.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 + a2;
  v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

double static CGPoint.-= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 - a2;
  v4 = a1[1] - a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

double static CGPoint.- infix(_:_:)(double a1, double a2, double a3)
{
  return a1 - a3;
}

{
  return a1 - a3;
}

double distance(_:_:)(double a1, double a2, double a3, double a4)
{
  return sqrt((a3 - a1) * (a3 - a1) + (a4 - a2) * (a4 - a2));
}

double static CGPoint.+ infix(_:_:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

CGPoint __swiftcall CGPoint.unapplying(_:)(CGAffineTransform *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double b;
  double c;
  double d;
  double tx;
  double ty;
  BOOL v10;
  double x;
  double y;
  CGPoint v13;
  CGPoint result;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGPoint v17;

  v3 = v2;
  v4 = v1;
  b = a1->b;
  c = a1->c;
  d = a1->d;
  tx = a1->tx;
  ty = a1->ty;
  if (a1->a == 1.0 && b == 0.0 && (c == 0.0 ? (v10 = d == 1.0) : (v10 = 0), v10))
  {
    x = v4 - tx;
    y = v3 - ty;
  }
  else
  {
    v16.a = a1->a;
    v16.b = b;
    v16.c = c;
    v16.d = d;
    v16.tx = tx;
    v16.ty = ty;
    CGAffineTransformInvert(&v15, &v16);
    v16 = v15;
    v17.x = v4;
    v17.y = v3;
    v13 = CGPointApplyAffineTransform(v17, &v16);
    y = v13.y;
    x = v13.x;
  }
  result.y = y;
  result.x = x;
  return result;
}

CGPoint __swiftcall CGPoint.clamp(min:max:)(CGPoint min, CGPoint max)
{
  double v2;
  double v3;

  if (min.x <= v2)
    min.x = v2;
  if (min.x > max.x)
    min.x = max.x;
  if (min.y <= v3)
    min.y = v3;
  if (min.y > max.y)
    min.y = max.y;
  return min;
}

double static CGPoint.- prefix(_:)(double a1)
{
  return -a1;
}

double static CGPoint.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

float64x2_t static CGPoint.*= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result;

  result = vmulq_n_f64(*a1, a2);
  *a1 = result;
  return result;
}

double static CGSize.+ infix(_:_:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

{
  return a1 + a3;
}

uint64_t one-time initialization function for list()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.SystemProvider>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x4034000000000000;
  *(_QWORD *)(result + 24) = 0x3FD3333333333333;
  *(_BYTE *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 1;
  static SystemStyleMetrics.list = result;
  byte_2561B41A8 = 1;
  qword_2561B41B0 = 0;
  return result;
}

uint64_t SystemListStyleMetrics.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  type metadata accessor for FontBox<Font.SystemProvider>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x4034000000000000;
  *(_QWORD *)(result + 24) = 0x3FD3333333333333;
  *(_BYTE *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 1;
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t static SystemStyleMetrics.list.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;

  if (one-time initialization token for list != -1)
    swift_once();
  swift_beginAccess();
  v2 = byte_2561B41A8;
  v3 = qword_2561B41B0;
  *(_QWORD *)a1 = static SystemStyleMetrics.list;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return swift_retain();
}

uint64_t static SystemStyleMetrics.list.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (one-time initialization token for list != -1)
    swift_once();
  swift_beginAccess();
  static SystemStyleMetrics.list = v1;
  byte_2561B41A8 = v2;
  qword_2561B41B0 = v3;
  swift_release();
  return swift_release();
}

uint64_t (*static SystemStyleMetrics.list.modify())()
{
  if (one-time initialization token for list != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void SystemShadowStyleMetrics.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SystemStyleMetrics.shadows.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemHoverEffectStyleMetrics.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SystemStyleMetrics.hoverEffect.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SystemStyleMetrics.hoverEffect.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SystemStyleMetrics.hoverEffect.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void type metadata accessor for FontBox<Font.SystemProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for FontBox<Font.SystemProvider>)
  {
    v2 = lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider();
    v4 = type metadata accessor for FontBox(a1, (uint64_t)&type metadata for Font.SystemProvider, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>);
  }
}

uint64_t SystemListStyleMetrics.Sidebar.headerFont.getter()
{
  return swift_retain();
}

uint64_t SystemListStyleMetrics.Sidebar.headerFont.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*SystemListStyleMetrics.Sidebar.headerFont.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureFont.getter()
{
  return swift_retain();
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureFont.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SystemListStyleMetrics.Sidebar.outlineDisclosureFont.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemListStyleMetrics.sidebar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for SystemListStyleMetrics.sidebar : SystemListStyleMetrics(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[2];
  swift_retain();
  swift_retain();
  swift_release();
  result = swift_release();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t SystemListStyleMetrics.sidebar.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  swift_release();
  result = swift_release();
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v4;
  return result;
}

uint64_t (*SystemListStyleMetrics.sidebar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  char v3;
  uint64_t v4;

  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v1;
  swift_retain();
  swift_retain();
  return SystemListStyleMetrics.sidebar.modify;
}

uint64_t SystemListStyleMetrics.sidebar.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    *(_QWORD *)v5 = v2;
    *(_BYTE *)(v5 + 8) = v3;
    *(_QWORD *)(v5 + 16) = v4;
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    result = swift_release();
    *(_QWORD *)v5 = v2;
    *(_BYTE *)(v5 + 8) = v3;
    *(_QWORD *)(v5 + 16) = v4;
  }
  return result;
}

void SystemShadowStyleMetrics.Grounding.intensity.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Grounding.decayRate.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Grounding.decayRate.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Grounding.decayRate.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.radius.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.offsetX.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.offsetY.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.opacity.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.cgColor.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.cgColor.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.grounding.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.grounding.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.separated.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemHoverEffectStyleMetrics.highlightOpacity.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemHoverEffectStyleMetrics.increaseFocusStateOpacity.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemHoverEffectStyleMetrics.defaultBrightnessMultiplier.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_234CE1640@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  swift_retain();
  return swift_retain();
}

ValueMetadata *type metadata accessor for SystemStyleMetrics()
{
  return &type metadata for SystemStyleMetrics;
}

ValueMetadata *type metadata accessor for SystemListStyleMetrics()
{
  return &type metadata for SystemListStyleMetrics;
}

uint64_t destroy for SystemListStyleMetrics.Sidebar()
{
  swift_release();
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for SystemListStyleMetrics(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemListStyleMetrics(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SystemListStyleMetrics(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SystemListStyleMetrics.Sidebar()
{
  return &type metadata for SystemListStyleMetrics.Sidebar;
}

void destroy for SystemShadowStyleMetrics(uint64_t a1)
{

}

uint64_t initializeWithCopy for SystemShadowStyleMetrics(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  id v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for SystemShadowStyleMetrics(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v3 = (void *)a2[6];
  v4 = (void *)a1[6];
  a1[6] = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for SystemShadowStyleMetrics(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  return a1;
}

ValueMetadata *type metadata accessor for SystemShadowStyleMetrics()
{
  return &type metadata for SystemShadowStyleMetrics;
}

ValueMetadata *type metadata accessor for SystemShadowStyleMetrics.Grounding()
{
  return &type metadata for SystemShadowStyleMetrics.Grounding;
}

void destroy for SystemShadowStyleMetrics.Separated(uint64_t a1)
{

}

uint64_t initializeWithCopy for SystemShadowStyleMetrics.Separated(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  id v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for SystemShadowStyleMetrics.Separated(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v3 = (void *)a2[4];
  v4 = (void *)a1[4];
  a1[4] = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for SystemShadowStyleMetrics.Separated(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for SystemShadowStyleMetrics.Separated()
{
  return &type metadata for SystemShadowStyleMetrics.Separated;
}

ValueMetadata *type metadata accessor for SystemHoverEffectStyleMetrics()
{
  return &type metadata for SystemHoverEffectStyleMetrics;
}

void static SystemStyleMetrics.shadows.setter()
{
  static SystemStyleMetrics.hoverEffect.setter();
}

void SystemShadowStyleMetrics.Grounding.intensity.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemShadowStyleMetrics.Separated.radius.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemShadowStyleMetrics.Separated.offsetX.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemShadowStyleMetrics.Separated.offsetY.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemShadowStyleMetrics.Separated.opacity.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemHoverEffectStyleMetrics.highlightOpacity.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemHoverEffectStyleMetrics.increaseFocusStateOpacity.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemHoverEffectStyleMetrics.defaultBrightnessMultiplier.setter()
{
  SystemShadowStyleMetrics.Grounding.decayRate.setter();
}

void SystemShadowStyleMetrics.separated.setter()
{
  SystemShadowStyleMetrics.grounding.setter();
}

unsigned __int8 *AccessibilityTraitSet.init(trait:)@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *result;
  if (v2 >= 0x40)
    v3 = 0;
  else
    v3 = 1 << v2;
  *a2 = v3;
  return result;
}

void static AccessibilityTraits.isButton.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityTraits.isHeader.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityTraits.isSelected.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityTraits.isLink.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static AccessibilityTraits.isSearchField.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static AccessibilityTraits.isImage.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static AccessibilityTraits.playsSound.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static AccessibilityTraits.isKeyboardKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static AccessibilityTraits.isStaticText.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static AccessibilityTraits.isSummaryElement.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static AccessibilityTraits.updatesFrequently.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static AccessibilityTraits.startsMediaSession.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static AccessibilityTraits.allowsDirectInteraction.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static AccessibilityTraits.causesPageTurn.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static AccessibilityTraits.isModal.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static AccessibilityTraits.isToggle.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000000;
}

void static AccessibilityTraits.isTabBar.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x400000;
}

void static AccessibilityTraits.isTabButton.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x800000;
}

void static AccessibilityTraits.isBackButton.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x1000000;
}

void static AccessibilityTraits.excludeFromItemChooser.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000000;
}

void static AccessibilityTraits.isSwitch.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000;
}

void static AccessibilityTraits.isMathEquation.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x20000000;
}

void AccessibilityTraits.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *AccessibilityTraits.union(_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *AccessibilityTraits.formUnion(_:)(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *AccessibilityTraits.intersection(_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *AccessibilityTraits.formIntersection(_:)(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *AccessibilityTraits.symmetricDifference(_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *AccessibilityTraits.formSymmetricDifference(_:)(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

BOOL AccessibilityTraits.contains(_:)(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL AccessibilityTraits.insert(_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *v2;
  v5 = *v2 & *a2;
  if (v5 != *a2)
  {
    v4 |= v3;
    *v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

_QWORD *AccessibilityTraits.remove(_:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & ~*result;
  *v2 = v3;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

_QWORD *AccessibilityTraits.update(with:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  *v2 = v3;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

BOOL static AccessibilityTraits.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityTraits(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *v2;
  v5 = *v2 & *a2;
  if (v5 != *a2)
  {
    v4 |= v3;
    *v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityTraits@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & ~*result;
  *v2 = v3;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityTraits@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  *v2 = v3;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AccessibilityTraits(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t AccessibilityTrait.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AccessibilityTrait.displayDescription.getter()
{
  _BYTE *v0;
  uint64_t result;
  Swift::String v2;

  result = 0;
  if (((1 << *v0) & 0x13C07FFF) != 0)
  {
    v2._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    return 46;
  }
  return result;
}

uint64_t AccessibilityTrait.uiTrait.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(_QWORD, uint64_t))((char *)nullsub_11 + 4 * byte_235297510[*v0]))(0, 1);
}

uint64_t sub_234CE1DDC()
{
  return 1;
}

uint64_t sub_234CE1DF0()
{
  return 0x10000;
}

uint64_t sub_234CE1E04()
{
  return 8;
}

uint64_t sub_234CE1E18()
{
  return 2;
}

uint64_t sub_234CE1E2C()
{
  return 1024;
}

uint64_t sub_234CE1E40()
{
  return 4;
}

uint64_t sub_234CE1E54()
{
  return 16;
}

uint64_t sub_234CE1E68()
{
  return 32;
}

uint64_t sub_234CE1E7C()
{
  return 64;
}

uint64_t sub_234CE1E90()
{
  return 128;
}

uint64_t sub_234CE1EA4()
{
  return 512;
}

uint64_t sub_234CE1EB8()
{
  return 2048;
}

uint64_t sub_234CE1ECC()
{
  return 0x2000;
}

uint64_t sub_234CE1EE0()
{
  return 0x4000;
}

uint64_t sub_234CE1EF4()
{
  return 0x100000;
}

uint64_t sub_234CE1F08()
{
  return 0x8000;
}

uint64_t sub_234CE1F1C()
{
  return 0x10000000;
}

uint64_t sub_234CE1F30()
{
  return 0x8000000;
}

uint64_t sub_234CE1F44()
{
  return 0x10000000000;
}

uint64_t sub_234CE1F58()
{
  return 0x20000000000000;
}

uint64_t sub_234CE1F6C()
{
  return 0x40000000000;
}

uint64_t AccessibilityTrait.isElementUITrait.getter()
{
  _BYTE *v0;

  return (*v0 < 0x1EuLL) & (0x39822BFBu >> *v0);
}

uint64_t AccessibilityTrait.isContainerUITrait.getter()
{
  _BYTE *v0;

  return (*v0 < 0x17uLL) & (0x401404u >> *v0);
}

uint64_t AccessibilityTrait.isInteractionUITrait.getter()
{
  _BYTE *v0;

  return (*v0 < 0xEuLL) & (0x2844u >> *v0);
}

SwiftUI::AccessibilityTrait_optional __swiftcall AccessibilityTrait.init(rawValue:)(Swift::UInt64 rawValue)
{
  char *v1;
  char v2;
  char v3;

  v2 = 0;
  v3 = 12;
  switch(rawValue)
  {
    case 0uLL:
      goto LABEL_14;
    case 1uLL:
      v2 = 1;
      goto LABEL_14;
    case 2uLL:
      v2 = 2;
      goto LABEL_14;
    case 3uLL:
      v2 = 3;
      goto LABEL_14;
    case 4uLL:
      v2 = 4;
      goto LABEL_14;
    case 5uLL:
      v2 = 5;
      goto LABEL_14;
    case 6uLL:
      v2 = 6;
      goto LABEL_14;
    case 7uLL:
      v2 = 7;
      goto LABEL_14;
    case 8uLL:
      v2 = 8;
      goto LABEL_14;
    case 9uLL:
      v2 = 9;
      goto LABEL_14;
    case 0xAuLL:
      v2 = 10;
      goto LABEL_14;
    case 0xBuLL:
      v2 = 11;
LABEL_14:
      v3 = v2;
      goto LABEL_15;
    case 0xCuLL:
LABEL_15:
      *v1 = v3;
      break;
    case 0xDuLL:
      *v1 = 13;
      break;
    case 0xEuLL:
      *v1 = 14;
      break;
    case 0xFuLL:
      *v1 = 15;
      break;
    case 0x10uLL:
      *v1 = 16;
      break;
    case 0x11uLL:
      *v1 = 17;
      break;
    case 0x12uLL:
      *v1 = 18;
      break;
    case 0x13uLL:
      *v1 = 19;
      break;
    case 0x14uLL:
      *v1 = 20;
      break;
    case 0x15uLL:
      *v1 = 21;
      break;
    case 0x16uLL:
      *v1 = 22;
      break;
    case 0x17uLL:
      *v1 = 23;
      break;
    case 0x18uLL:
      *v1 = 24;
      break;
    case 0x19uLL:
      *v1 = 25;
      break;
    case 0x1AuLL:
      *v1 = 26;
      break;
    case 0x1BuLL:
      *v1 = 27;
      break;
    case 0x1CuLL:
      *v1 = 28;
      break;
    case 0x1DuLL:
      *v1 = 29;
      break;
    default:
      *v1 = 30;
      break;
  }
  return (SwiftUI::AccessibilityTrait_optional)rawValue;
}

void *static AccessibilityTrait.allCases.getter()
{
  return &outlined read-only object #0 of static AccessibilityTrait.allCases.getter;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTrait()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTrait()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTrait()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

SwiftUI::AccessibilityTrait_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTrait(Swift::UInt64 *a1)
{
  return AccessibilityTrait.init(rawValue:)(*a1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityTrait(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AccessibilityTrait.allCases.getter;
}

uint64_t AccessibilityTraitSet.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AccessibilityTraitSet.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t AccessibilityTraitSet.init(traits:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      v6 = *v5++;
      v7 = 1 << v6;
      v8 = v6 >= 0x40 ? 0 : v7;
      v9 = __CFADD__(v4, v8);
      v4 += v8;
      if (v9)
        break;
      if (!--v3)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    v4 = 0;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *a2 = v4;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTraitSet()
{
  Swift::UInt64 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTraitSet()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTraitSet()
{
  Swift::UInt64 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityTraitSet()
{
  lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityTraitSet()
{
  lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
  return RawRepresentable<>.encode(to:)();
}

uint64_t *AccessibilityNullableOptionSet<>.init(adding:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t *AccessibilityNullableOptionSet<>.init(removing:)@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *a2 = 0;
  a2[1] = v2;
  return result;
}

unsigned __int8 *AccessibilityNullableOptionSet<>.init(adding:)@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *result;
  if (v2 >= 0x40)
    v3 = 0;
  else
    v3 = 1 << v2;
  *a2 = v3;
  a2[1] = v3;
  return result;
}

uint64_t AccessibilityNullableOptionSet<>.init(adding:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      v6 = *v5++;
      v7 = 1 << v6;
      v8 = v6 >= 0x40 ? 0 : v7;
      v9 = __CFADD__(v4, v8);
      v4 += v8;
      if (v9)
        break;
      if (!--v3)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    v4 = 0;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *a2 = v4;
    a2[1] = v4;
  }
  return result;
}

unsigned __int8 *AccessibilityNullableOptionSet<>.init(removing:)@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *result;
  if (v2 >= 0x40)
    v3 = 0;
  else
    v3 = 1 << v2;
  *a2 = 0;
  a2[1] = v3;
  return result;
}

uint64_t AccessibilityNullableOptionSet<>.init(removing:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      v6 = *v5++;
      v7 = 1 << v6;
      v8 = v6 >= 0x40 ? 0 : v7;
      v9 = __CFADD__(v4, v8);
      v4 += v8;
      if (v9)
        break;
      if (!--v3)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    v4 = 0;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *a2 = 0;
    a2[1] = v4;
  }
  return result;
}

BOOL AccessibilityNullableOptionSet<>.isSet(_:)(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  v2 = *a1;
  if (v2 >= 0x40)
    v3 = 0;
  else
    v3 = 1 << v2;
  return (v3 & ~*(_QWORD *)(v1 + 8)) == 0;
}

uint64_t AccessibilityNullableOptionSet<>.subscript.getter(unsigned __int8 *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v4;

  v2 = *a1;
  if (v2 > 0x3F)
    return 1;
  v4 = 1 << v2;
  if ((*v1 & v4) != 0)
    return 1;
  else
    return 2 * ((v4 & v1[1]) == 0);
}

uint64_t AccessibilityNullableOptionSet<>.subscript.setter(uint64_t result, unsigned __int8 *a2)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  if (v3 >= 0x40)
    v4 = 0;
  else
    v4 = 1 << v3;
  if (result != 2)
  {
    v7 = v2[1];
    if ((v4 & ~v7) != 0)
      v2[1] = v7 | v4;
    v8 = *v2;
    v9 = *v2 & v4;
    if ((result & 1) != 0)
    {
      if (v9 == v4)
        return result;
      v6 = v8 | v4;
    }
    else
    {
      if (!v9)
        return result;
      v6 = v8 & ~v4;
    }
    goto LABEL_16;
  }
  v5 = v2[1];
  if ((v5 & v4) != 0)
    v2[1] = v5 & ~v4;
  if ((*v2 & v4) != 0)
  {
    v6 = *v2 & ~v4;
LABEL_16:
    *v2 = v6;
  }
  return result;
}

uint64_t (*AccessibilityNullableOptionSet<>.subscript.modify(uint64_t a1, unsigned __int8 *a2))(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  *(_QWORD *)a1 = v2;
  v3 = *a2;
  *(_BYTE *)(a1 + 9) = v3;
  if (v3 <= 0x3F)
  {
    v5 = 1 << v3;
    if ((*v2 & v5) != 0)
      v4 = 1;
    else
      v4 = 2 * ((v2[1] & v5) == 0);
  }
  else
  {
    v4 = 1;
  }
  *(_BYTE *)(a1 + 8) = v4;
  return AccessibilityNullableOptionSet<>.subscript.modify;
}

uint64_t AccessibilityNullableOptionSet<>.subscript.modify(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 9);
  if (v1 >= 0x40)
    v2 = 0;
  else
    v2 = 1 << v1;
  return specialized AccessibilityNullableOptionSet.subscript.setter(*(unsigned __int8 *)(a1 + 8), v2);
}

uint64_t AccessibilityNullableOptionSet<>.subscript.getter(unsigned __int8 *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;

  v3 = *a1;
  if (v3 > 0x3F)
    return 1;
  v5 = 1 << v3;
  if ((*v2 & v5) != 0)
    return 1;
  else
    return ((v5 & v2[1]) == 0) & a2;
}

uint64_t AccessibilityProperties.isTabBar.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x16u);
}

uint64_t AccessibilityProperties.isTabBar.setter(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = 22;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.isTabBar.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  unsigned __int8 v3;
  uint64_t v4;

  *(_QWORD *)a1 = v1;
  v4 = *v1;
  v3 = 22;
  *(_BYTE *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.isTabBar.modify;
}

uint64_t AccessibilityProperties.isTabBar.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 22);
}

uint64_t AccessibilityProperties.isTabButton.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x17u);
}

uint64_t AccessibilityProperties.isTabButton.setter(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = 23;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.isTabButton.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  unsigned __int8 v3;
  uint64_t v4;

  *(_QWORD *)a1 = v1;
  v4 = *v1;
  v3 = 23;
  *(_BYTE *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.isTabButton.modify;
}

uint64_t AccessibilityProperties.isTabButton.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 23);
}

uint64_t AccessibilityProperties.isBackButton.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x18u);
}

uint64_t AccessibilityProperties.isBackButton.setter(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = 24;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.isBackButton.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  unsigned __int8 v3;
  uint64_t v4;

  *(_QWORD *)a1 = v1;
  v4 = *v1;
  v3 = 24;
  *(_BYTE *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.isBackButton.modify;
}

uint64_t AccessibilityProperties.isBackButton.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 24);
}

uint64_t AccessibilityProperties.excludeFromItemChooser.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x19u);
}

uint64_t AccessibilityProperties.isTabBar.getter(unsigned __int8 a1)
{
  uint64_t *v1;
  unsigned __int8 v3;
  uint64_t v4;

  v4 = *v1;
  v3 = a1;
  return AccessibilityProperties.subscript.getter(&v3);
}

uint64_t AccessibilityProperties.excludeFromItemChooser.setter(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = 25;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.excludeFromItemChooser.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  unsigned __int8 v3;
  uint64_t v4;

  *(_QWORD *)a1 = v1;
  v4 = *v1;
  v3 = 25;
  *(_BYTE *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.excludeFromItemChooser.modify;
}

uint64_t AccessibilityProperties.excludeFromItemChooser.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 25);
}

uint64_t AccessibilityProperties.isTabBar.modify(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  char v6;
  char v7;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v6 = a3;
    v4 = (unsigned __int8 *)&v6;
  }
  else
  {
    v7 = a3;
    v4 = (unsigned __int8 *)&v7;
  }
  return AccessibilityProperties.subscript.setter(v3, v4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraits and conformance AccessibilityTraits()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits;
  if (!lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraits, &type metadata for AccessibilityTraits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits;
  if (!lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTraits, &type metadata for AccessibilityTraits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTrait and conformance AccessibilityTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTrait and conformance AccessibilityTrait;
  if (!lazy protocol witness table cache variable for type AccessibilityTrait and conformance AccessibilityTrait)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityTrait, &type metadata for AccessibilityTrait);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTrait and conformance AccessibilityTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityTrait] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AccessibilityTrait] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityTrait] and conformance [A])
  {
    type metadata accessor for [AccessibilityTrait]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityTrait] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AccessibilityTrait]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [AccessibilityTrait])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityTrait]);
  }
}

uint64_t sub_234CE2BCC@<X0>(__int128 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v4;
  uint64_t result;
  unsigned __int8 v6;
  __int128 v7;

  v4 = *a2;
  v7 = *a1;
  v6 = v4;
  result = AccessibilityNullableOptionSet<>.subscript.getter(&v6);
  *a3 = result;
  return result;
}

uint64_t sub_234CE2C10(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned __int8 v5;

  v3 = *a1;
  v5 = *a3;
  return AccessibilityNullableOptionSet<>.subscript.setter(v3, &v5);
}

uint64_t sub_234CE2C48()
{
  return 0;
}

uint64_t sub_234CE2C58@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, 0x16u, a2);
}

uint64_t sub_234CE2C60(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *a1;
  v3 = 22;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

uint64_t sub_234CE2C98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, 0x17u, a2);
}

uint64_t sub_234CE2CA0(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *a1;
  v3 = 23;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

uint64_t sub_234CE2CD8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, 0x18u, a2);
}

uint64_t sub_234CE2CE0(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *a1;
  v3 = 24;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

uint64_t sub_234CE2D18@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, 0x19u, a2);
}

uint64_t keypath_get_1Tm@<X0>(uint64_t *a1@<X0>, unsigned __int8 a2@<W3>, _BYTE *a3@<X8>)
{
  uint64_t result;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *a1;
  v5 = a2;
  result = AccessibilityProperties.subscript.getter(&v5);
  *a3 = result;
  return result;
}

uint64_t sub_234CE2D60(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *a1;
  v3 = 25;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

ValueMetadata *type metadata accessor for AccessibilityTraits()
{
  return &type metadata for AccessibilityTraits;
}

uint64_t getEnumTagSinglePayload for AccessibilityTrait(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE3)
    goto LABEL_17;
  if (a2 + 29 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 29) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 29;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 29;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 29;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1E;
  v8 = v6 - 30;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityTrait(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 29 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 29) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE2)
    return ((uint64_t (*)(void))((char *)&loc_234CE2E84 + 4 * byte_235297551[v4]))();
  *a1 = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_234CE2EB8 + 4 * byte_23529754C[v4]))();
}

uint64_t sub_234CE2EB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CE2EC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234CE2EC8);
  return result;
}

uint64_t sub_234CE2ED4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234CE2EDCLL);
  *(_BYTE *)result = a2 + 29;
  return result;
}

uint64_t sub_234CE2EE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234CE2EE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTrait()
{
  return &type metadata for AccessibilityTrait;
}

ValueMetadata *type metadata accessor for AccessibilityTraitSet()
{
  return &type metadata for AccessibilityTraitSet;
}

BOOL specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v28 - v2;
  type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>)();
  v5 = v4;
  v31 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>)?, v8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v28 - v10;
  type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>, MEMORY[0x24BDCC450]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v28 - v15;
  type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>.Iterator, MEMORY[0x24BDCC440]);
  v18 = v17;
  v30 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v28 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v29, v13, v19);
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>, MEMORY[0x24BDCC450], MEMORY[0x24BDCC458]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice2<A, B>.Iterator, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>.Iterator, MEMORY[0x24BDCC440], MEMORY[0x24BDCC448]);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v11, 1, v5);
    if (v24 == 1)
      break;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
    v25 = (uint64_t)&v7[*(int *)(v5 + 48)];
    if ((v7[8] & 1) != 0)
    {
      outlined init with copy of URL?(v25, (uint64_t)v3);
    }
    else
    {
      v26 = *(_QWORD *)v7 & 0x27;
      outlined init with copy of URL?(v25, (uint64_t)v3);
      if (v26)
      {
        outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
        break;
      }
    }
    v22 = type metadata accessor for URL();
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v3, 1, v22);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
  }
  while (v23 == 1);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v18);
  return v24 != 1;
}

uint64_t Text.init(_:tableName:bundle:comment:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  type metadata accessor for LocalizedTextStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = a5;
  *(_QWORD *)(result + 56) = a6;
  *(_QWORD *)(result + 64) = a7;
  return result;
}

uint64_t type metadata accessor for LocalizedTextStorage()
{
  return objc_opt_self();
}

SwiftUI::LocalizedStringKey __swiftcall LocalizedStringKey.init(stringLiteral:)(SwiftUI::LocalizedStringKey stringLiteral)
{
  void *v1;
  Swift::Bool v2;

  v1 = (void *)MEMORY[0x24BEE4AF8];
  v2 = 0;
  stringLiteral.arguments._rawValue = v1;
  stringLiteral.hasFormatting = v2;
  return stringLiteral;
}

SwiftUI::LocalizedStringKey __swiftcall LocalizedStringKey.init(stringInterpolation:)(SwiftUI::LocalizedStringKey::StringInterpolation stringInterpolation)
{
  void *v1;
  void *v2;
  uint64_t v3;
  Swift::Bool v4;
  SwiftUI::LocalizedStringKey result;

  v1 = *(void **)(stringInterpolation.key._countAndFlagsBits + 8);
  v2 = *(void **)(stringInterpolation.key._countAndFlagsBits + 16);
  v3 = *(_QWORD *)stringInterpolation.key._countAndFlagsBits;
  v4 = 1;
  result.arguments._rawValue = v2;
  result.key._object = v1;
  result.key._countAndFlagsBits = v3;
  result.hasFormatting = v4;
  return result;
}

BOOL LocalizedStringKey.isStyled.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void (*v46)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char *v51;
  char *v52;
  _QWORD v53[4];
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;

  v68 = a2;
  v67 = a1;
  v81 = 0;
  type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>, MEMORY[0x24BDCC450]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v53 - v8;
  v55 = type metadata accessor for AttributedString.Runs();
  v57 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v56 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v11);
  v66 = (char *)v53 - v12;
  v63 = type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v64 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v60 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AttributedString.MarkdownParsingOptions();
  MEMORY[0x24BDAC7A8](v15);
  v62 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for AttributedString?, (void (*)(uint64_t))MEMORY[0x24BDCC5A8]);
  MEMORY[0x24BDAC7A8](v17);
  v65 = (char *)v53 - v18;
  v19 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v19);
  v79 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource();
  v77 = *(_QWORD *)(v21 - 8);
  v78 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v73 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v76 = (char *)v53 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v53 - v26;
  v28 = type metadata accessor for AttributedString();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v54 = (char *)v53 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v72 = (char *)v53 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v71 = (char *)v53 - v34;
  v35 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v53 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)(a4 + 16);
  v80 = v28;
  if (v39)
  {
    v53[1] = v9;
    v53[2] = v7;
    v53[3] = v6;
    v40 = *(_QWORD *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    v41 = a4 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    v82 = *(_QWORD *)(v40 + 72);
    v83 = v41;
    swift_bridgeObjectRetain();
    v75 = v29;
    v84 = v27;
    v70 = v35;
    v74 = v39;
    v69 = a4;
    outlined init with copy of TypesettingLanguage(v83, (uint64_t)v38, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    v42 = (char *)&loc_234CE3710 + 4 * byte_235297A50[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  (*(void (**)(char *, _QWORD, uint64_t, double))(v58 + 104))(v60, *MEMORY[0x24BDCC3D0], v59, v36);
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v64, *MEMORY[0x24BDCC3C0], v63);
  swift_bridgeObjectRetain();
  AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)();
  v43 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v66, 1, 1, v43);
  v44 = (uint64_t)v65;
  v45 = v81;
  AttributedString.init(markdown:options:baseURL:)();
  if (v45)
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v44, 1, 1, v80);
  }
  else
  {
    v46 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56);
    v47 = v29;
    v48 = v80;
    v46(v44, 0, 1, v80);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v44, 1, v48) != 1)
    {
      v51 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v54, v44, v48);
      v52 = v56;
      AttributedString.runs.getter();
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
      AttributedString.Runs.subscript.getter();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v52, v55);
      v49 = specialized Sequence.contains(where:)((uint64_t)v9);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v48);
      return v49;
    }
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v44, &lazy cache variable for type metadata for AttributedString?, (void (*)(uint64_t))MEMORY[0x24BDCC5A8]);
  return 0;
}

uint64_t LocalizedStringKey.resolve(in:table:bundle:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8)
{
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;

  v23 = a4;
  v24 = a5;
  v14 = (int *)type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = a1[1];
  Text.Style.init()((uint64_t)v16);
  v19 = &v16[v14[5]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v20 = &v16[v14[6]];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0xE000000000000000;
  v16[v14[7]] = 0;
  specialized LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)((uint64_t)v16, v17, v18, 0, a2, a3, v23, v24, a6, a7, a8);
  v21 = *(_QWORD *)v20;
  swift_bridgeObjectRetain();
  outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for Text.ResolvedString);
  return v21;
}

void specialized LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  Class isa;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD);
  uint64_t v45;
  uint64_t v46;
  Class v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  id v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  char v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  Class v74;
  id v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110[2];
  uint64_t v111;

  v104 = a8;
  v100 = a4;
  v106 = a2;
  v107 = a3;
  v103 = a1;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v14);
  v99 = (uint64_t *)((char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v98 - v17;
  v19 = type metadata accessor for Locale();
  v105 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v98 - v23;
  if (one-time initialization token for introduced != -1)
    swift_once();
  v101 = a11;
  v25 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  v102 = a10;
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_7;
  }
  else if (static Semantics.forced < v25)
  {
LABEL_7:
    v26 = v106;
    if (a7)
      v27 = a7;
    else
      v27 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v30 = a7;
    v31 = (void *)MEMORY[0x23B7C5DAC](v104, a9);
    if (a6)
    {
      v32 = (void *)MEMORY[0x23B7C5DAC](a5, a6);
      v33 = v107;
      if (v107)
      {
LABEL_15:
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t)v21);
        goto LABEL_22;
      }
    }
    else
    {
      v32 = 0;
      v33 = v107;
      if (v107)
        goto LABEL_15;
    }
    v37 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v37, (uint64_t)v21);
LABEL_22:
    swift_release_n();
    swift_release_n();
    isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v21, v19);
    v39 = (void *)_LocalizeString(v27, v31, v32, isa);

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    if ((v102 & 1) != 0)
    {
      v104 = v40;
      if (v33)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t *)v110);
        swift_release_n();
        swift_release_n();
        v43 = *(_QWORD *)&v110[0];
        swift_retain_n();
        swift_retain_n();
        v44 = (void (*)(_QWORD, _QWORD))v99;
        specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t)v99);
        v45 = v101;
      }
      else
      {
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
        BloomFilter.init(hashValue:)(v54);
        v55 = v109;
        v56 = swift_retain_n();
        v57 = specialized find1<A>(_:key:filter:)(v56, v55);
        v45 = v101;
        v44 = (void (*)(_QWORD, _QWORD))v99;
        if (v57)
          v43 = *(_QWORD *)(v57 + 72);
        else
          v43 = 0;
        swift_release_n();
        v83 = swift_retain_n();
        specialized closure #1 in PropertyList.subscript.getter(v83, (uint64_t)v44);
      }
      swift_release_n();
      swift_release_n();
      v84 = v43 == 0;
      (*(void (**)(void (*)(_QWORD, _QWORD), _QWORD, uint64_t, uint64_t))(v105 + 56))(v44, 0, 1, v19);
      v85 = *(_QWORD *)(v45 + 16);
      if (v85)
      {
        v105 = v42;
        v111 = MEMORY[0x24BEE4AF8];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85, 0);
        v86 = v111;
        v87 = *(_QWORD *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
        v88 = v45 + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
        v89 = *(_QWORD *)(v87 + 72);
        do
        {
          *(_QWORD *)&v109 = v106;
          *((_QWORD *)&v109 + 1) = v33;
          LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v110, &v109);
          v91 = v90;
          v111 = v86;
          v93 = *(_QWORD *)(v86 + 16);
          v92 = *(_QWORD *)(v86 + 24);
          if (v93 >= v92 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1);
            v86 = v111;
          }
          v84 |= v91;
          *(_QWORD *)(v86 + 16) = v93 + 1;
          outlined init with take of ScrollStateRequest(v110, v86 + 40 * v93 + 32);
          v88 += v89;
          --v85;
          v33 = v107;
        }
        while (v85);
        swift_bridgeObjectRelease();
        swift_release();
        v26 = v106;
        swift_release();
        v94 = v103;
        v44 = (void (*)(_QWORD, _QWORD))v99;
      }
      else
      {
        v94 = v103;
      }
      v95 = String.init(format:locale:arguments:)();
      v97 = v96;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v44, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
      specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v95, v97, v94, v26, v33, v100, v84 & 1);
      goto LABEL_61;
    }
    if (v33)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t *)v110);
      swift_release_n();
    }
    else
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v58);
      v59 = *(_QWORD *)&v110[0];
      v60 = swift_retain_n();
      specialized find1<A>(_:key:filter:)(v60, v59);
    }
    swift_release_n();
    *(_QWORD *)&v110[0] = v40;
    *((_QWORD *)&v110[0] + 1) = v42;
    swift_bridgeObjectRetain();
    v61 = String.init<A>(_:)();
    *(_QWORD *)&v110[0] = v26;
    *((_QWORD *)&v110[0] + 1) = v33;
    v63 = String.caseConvertedIfNeeded(_:)((uint64_t *)v110, v61, v62);
    v65 = v64;
    swift_bridgeObjectRelease();
    if (v33)
    {
      swift_retain_n();
      swift_retain_n();
      v66 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v26);
      swift_release_n();
      swift_release_n();
      if ((v66 & 1) == 0)
      {
LABEL_40:
        type metadata accessor for Text.ResolvedString(0);
        v70._countAndFlagsBits = v63;
        v70._object = v65;
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
LABEL_61:
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      v110[0] = (unint64_t)v26;
      swift_retain();
      v82 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)v110, v79, v80, v81);
      swift_release();
      if ((v82 & 1) == 0)
        goto LABEL_40;
    }
    v67 = String.count.getter();
    v63 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v67);
    v69 = v68;
    swift_bridgeObjectRelease();
    v65 = v69;
    goto LABEL_40;
  }
  v28 = v106;
  if (a7)
    v29 = a7;
  else
    v29 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v34 = a7;
  v35 = (void *)MEMORY[0x23B7C5DAC](v104, a9);
  if (!a6)
  {
    v36 = 0;
    if (v107)
      goto LABEL_19;
LABEL_28:
    v46 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v46, (uint64_t)v24);
    goto LABEL_29;
  }
  v36 = (void *)MEMORY[0x23B7C5DAC](a5, a6);
  if (!v107)
    goto LABEL_28;
LABEL_19:
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v28, (uint64_t)v24);
LABEL_29:
  swift_release_n();
  swift_release_n();
  v47 = Locale._bridgeToObjectiveC()().super.isa;
  v99 = *(uint64_t **)(v105 + 8);
  ((void (*)(char *, uint64_t))v99)(v24, v19);
  v48 = (void *)_LocalizeAttributedString(v29, v35, v36, v47);

  if ((v102 & 1) != 0)
  {
    v49 = v107;
    *(_QWORD *)&v110[0] = v28;
    *((_QWORD *)&v110[0] + 1) = v107;
    v109 = *(_OWORD *)(v103 + *(int *)(type metadata accessor for Text.ResolvedString(0) + 20));
    v50 = v100;
    v108 = v100;
    LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)((uint64_t)v48, (uint64_t *)v110, &v109, &v108, v103, v104, a9, 1, v101);
    v52 = v51;
    swift_retain_n();
    if (v49)
    {
      swift_retain_n();
      v53 = v48;
      specialized PropertyList.Tracker.value<A>(_:for:)(v28, (uint64_t)v18);
    }
    else
    {
      v71 = v48;
      specialized closure #1 in PropertyList.subscript.getter(v28, (uint64_t)v18);
    }
    swift_release_n();
    swift_release_n();
    v72 = v105;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v18, 0, 1, v19);
    v73 = getVaList(_:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v18, 1, v19) == 1)
    {
      v74 = 0;
    }
    else
    {
      v74 = Locale._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v99)(v18, v19);
    }
    v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1458]), sel_initSwiftUIAttributedStringWithFormat_options_locale_arguments_, v48, 0, v74, v73);

    specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v75, v103, v28, v49, v50, v52 & 1);
  }
  else
  {
    *(_QWORD *)&v110[0] = v28;
    *((_QWORD *)&v110[0] + 1) = v107;
    if (v107)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v28, (uint64_t *)&v109);
      swift_release_n();
    }
    else
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v76);
      v77 = v109;
      v78 = swift_retain_n();
      specialized find1<A>(_:key:filter:)(v78, v77);
    }
    swift_release_n();
    specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(v48, (uint64_t *)v110);
  }

}

void LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Class isa;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Class v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  unint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Class v64;
  id v65;
  Swift::Int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;

  v87 = a8;
  v86 = a7;
  v82 = a1;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v17);
  v80 = (void (*)(char *, uint64_t))((char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v19);
  v79 = (uint64_t)&v79 - v20;
  v21 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Locale();
  v89 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v79 - v27;
  v30 = *a2;
  v29 = a2[1];
  v88 = *a3;
  if (one-time initialization token for introduced != -1)
    swift_once();
  v84 = a12;
  v31 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  v90 = a11;
  v81 = a10;
  v83 = a9;
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v31)
      goto LABEL_7;
LABEL_10:
    if (a6)
      v33 = a6;
    else
      v33 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v37 = a6;
    v38 = (void *)MEMORY[0x23B7C5DAC](v86, v87);
    if (a5)
    {
      v39 = (void *)MEMORY[0x23B7C5DAC](a4, a5);
      if (v29)
      {
LABEL_18:
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v30, (uint64_t)v28);
        goto LABEL_24;
      }
    }
    else
    {
      v39 = 0;
      if (v29)
        goto LABEL_18;
    }
    v42 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v42, (uint64_t)v28);
LABEL_24:
    swift_release_n();
    swift_release_n();
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v80 = *(void (**)(char *, uint64_t))(v89 + 8);
    v80(v28, v85);
    v44 = (void *)_LocalizeAttributedString(v33, v38, v39, isa);

    if ((v83 & 1) != 0)
    {
      v94 = v30;
      v95 = v29;
      v45 = v84;
      v46 = v82;
      v47 = v90;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v84 + 32))(&v93, v90, v84);
      v92 = v93;
      v91 = v88;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v45);
      LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)((uint64_t)v44, &v94, &v92, &v91, (uint64_t)v23, v86, v87, 1, v81);
      LODWORD(v87) = v48;
      outlined destroy of TypesettingConfiguration((uint64_t)v23, type metadata accessor for Text.Style);
      swift_retain_n();
      if (v29)
      {
        swift_retain_n();
        v49 = v44;
        v50 = v79;
        specialized PropertyList.Tracker.value<A>(_:for:)(v30, v79);
      }
      else
      {
        v60 = v44;
        v50 = v79;
        specialized closure #1 in PropertyList.subscript.getter(v30, v79);
      }
      swift_release_n();
      swift_release_n();
      v61 = v89;
      v62 = v85;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56))(v50, 0, 1, v85);
      v63 = getVaList(_:)();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v50, 1, v62) == 1)
      {
        v64 = 0;
      }
      else
      {
        v64 = Locale._bridgeToObjectiveC()().super.isa;
        v80((char *)v50, v62);
      }
      v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1458]), sel_initSwiftUIAttributedStringWithFormat_options_locale_arguments_, v44, 0, v64, v63);

      v94 = v30;
      v95 = v29;
      *(_QWORD *)&v93 = v88;
      specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v65, v46, &v94, (uint64_t *)&v93, v87 & 1, v81, v90, v45);

    }
    else
    {
      v94 = v30;
      v95 = v29;
      *(_QWORD *)&v93 = v88;
      ResolvedTextContainer.append(_:in:with:)((uint64_t)v44, &v94, (uint64_t *)&v93, v90, v84);

    }
    return;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_10;
LABEL_7:
  if (a6)
    v32 = a6;
  else
    v32 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v34 = a6;
  v35 = (void *)MEMORY[0x23B7C5DAC](v86, v87);
  if (a5)
    v36 = (void *)MEMORY[0x23B7C5DAC](a4, a5);
  else
    v36 = 0;
  v40 = v82;
  v41 = v85;
  if (v29)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v30, (uint64_t)v25);
  }
  else
  {
    v51 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v51, (uint64_t)v25);
  }
  swift_release_n();
  swift_release_n();
  v52 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v25, v41);
  v53 = (void *)_LocalizeString(v32, v35, v36, v52);

  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v56 = v55;

  if ((v83 & 1) != 0)
  {
    v87 = v56;
    v86 = v54;
    if (v29)
    {
      v57 = v40;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v30, &v94);
      swift_release_n();
      swift_release_n();
      LOBYTE(v92) = v94 == 0;
      swift_retain_n();
      swift_retain_n();
      v58 = v80;
      specialized PropertyList.Tracker.value<A>(_:for:)(v30, (uint64_t)v80);
    }
    else
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v66);
      v67 = v93;
      v68 = swift_retain_n();
      v69 = specialized find1<A>(_:key:filter:)(v68, v67);
      v58 = v80;
      if (v69)
        v70 = *(_QWORD *)(v69 + 72) == 0;
      else
        v70 = 1;
      v57 = v40;
      swift_release_n();
      LOBYTE(v92) = v70;
      v71 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v71, (uint64_t)v58);
    }
    swift_release_n();
    swift_release_n();
    v72 = (*(uint64_t (**)(void (*)(char *, uint64_t), _QWORD, uint64_t, uint64_t))(v89 + 56))(v58, 0, 1, v41);
    MEMORY[0x24BDAC7A8](v72);
    v73 = v84;
    *(&v79 - 6) = v90;
    *(&v79 - 5) = v73;
    *(&v79 - 4) = v30;
    *(&v79 - 3) = v29;
    v78 = &v92;
    v74 = v81;
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg5((void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:), (uint64_t)(&v79 - 8), v74);
    swift_bridgeObjectRelease();
    v75 = String.init(format:locale:arguments:)();
    v77 = v76;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v58, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    v94 = v30;
    v95 = v29;
    *(_QWORD *)&v93 = v88;
    specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v75, v77, v57, &v94, (uint64_t *)&v93, v92, v74, v90, v73);
  }
  else
  {
    v94 = v54;
    v95 = v56;
    *(_QWORD *)&v93 = v30;
    *((_QWORD *)&v93 + 1) = v29;
    *(_QWORD *)&v92 = v88;
    v59 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v94, (uint64_t *)&v93, (uint64_t *)&v92, v90, MEMORY[0x24BEE0D00], v84, v59);
  }
  swift_bridgeObjectRelease();
}

uint64_t LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[4];
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  v34 = a8;
  v14 = *a2;
  v13 = a2[1];
  v33 = *a3;
  v15 = *a4;
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v14, &v35);
    swift_release_n();
    v16 = swift_release_n();
    v17 = v35;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v18);
    v19 = swift_retain_n();
    v20 = specialized find1<A>(_:key:filter:)(v19, v35);
    if (v20)
      v17 = *(_QWORD *)(v20 + 72);
    else
      v17 = 0;
    v16 = swift_release_n();
  }
  LOBYTE(v35) = v17 == 0;
  MEMORY[0x24BDAC7A8](v16);
  v23[2] = v14;
  v23[3] = v13;
  v24 = v33;
  v25 = &v35;
  v26 = a1;
  v27 = a6;
  v28 = a7;
  v29 = v34 & 1;
  v30 = a9;
  v31 = a5;
  v32 = v15;
  swift_bridgeObjectRetain();
  v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg5((void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:), (uint64_t)v23, a9);
  swift_bridgeObjectRelease();
  return v21;
}

void closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[16];
  _QWORD v21[2];
  uint64_t v22;

  v13 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v13 + 16))(v16, v17, v18, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 32))(&v22, a5, a6);
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, a5);
  v21[0] = a2;
  v21[1] = a3;
  LocalizedStringKey.FormatArgument.resolve(in:idiom:)(a7, v21);
  *a4 = (*a4 | v19) & 1;
}

uint64_t closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X5>, void *a5@<X6>, _QWORD *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  void (*v50)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(_QWORD, _QWORD, _QWORD);
  void (*v59)(_QWORD, _QWORD, _QWORD, _QWORD);
  int v60;
  id v61;
  Class isa;
  id v63;
  void (**v64)(char *, _QWORD);
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  _BYTE *v96;
  char v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v107;
  uint64_t v108;
  id v109;
  Class v110;
  id v111;
  id v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  id v131;
  char *v132;
  void (**v133)(char *, _QWORD);
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD v140[2];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149[2];
  __int16 v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v137 = a4;
  v131 = a5;
  v136 = a6;
  v14 = type metadata accessor for AttributedString();
  v129 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v128 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v16);
  v127 = (uint64_t)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v160 = (uint64_t)&v120 - v19;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v20);
  v132 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v130 = (uint64_t *)((char *)&v120 - v23);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Morphology?, (void (*)(uint64_t))MEMORY[0x24BDCAF18]);
  MEMORY[0x24BDAC7A8](v24);
  v134 = (uint64_t)&v120 - v25;
  type metadata accessor for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>();
  v27 = v26;
  v133 = *(void (***)(char *, _QWORD))(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = a1;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v32, v33);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v32, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    goto LABEL_10;
  }
  v125 = (_BYTE *)v14;
  v35 = *(_QWORD *)v32;
  v34 = *((_QWORD *)v32 + 1);
  v36 = (_QWORD *)*((_QWORD *)v32 + 3);
  if (v32[16] != 1)
  {
    v45 = *(_QWORD *)v32;
    v46 = 0;
LABEL_9:
    outlined consume of Text.Storage(v45, v34, v46);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v126 = *((_QWORD *)v32 + 1);
  v37 = *((_QWORD *)v32 + 4);
  type metadata accessor for AttributedStringTextStorage(0);
  v38 = swift_dynamicCastClass();
  if (!v38)
  {
    v45 = v35;
    v34 = v126;
    v46 = 1;
    goto LABEL_9;
  }
  v123 = v37;
  v124 = v36;
  v121 = v38;
  v39 = v38 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.FoundationAttributes();
  swift_retain_n();
  v122 = v39;
  AttributedString.subscript.getter();
  swift_release();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute();
  v40 = v134;
  ScopedAttributeContainer.subscript.getter();
  swift_release();
  v133[1](v29, v27);
  v41 = type metadata accessor for Morphology();
  v42 = (void (*)(uint64_t))MEMORY[0x24BDCAF18];
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v40, &lazy cache variable for type metadata for Morphology?, v42);
  if (v43 == 1)
  {
    v44 = v126;
    outlined consume of Text.Storage(v35, v126, 1);
    outlined consume of Text.Storage(v35, v44, 1);
    swift_bridgeObjectRelease();
    swift_release();
LABEL_10:
    v47 = (uint64_t)v136;
    *(_QWORD *)&v141 = a2;
    *((_QWORD *)&v141 + 1) = a3;
    LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v149, &v141);
    *v137 = (*v137 | v48) & 1;
    return outlined init with take of ScrollStateRequest(v149, v47);
  }
  v134 = v35;
  if (a3)
  {
    swift_retain_n();
    swift_retain_n();
    v50 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v130;
    specialized PropertyList.Tracker.value<A>(_:for:)(a2, (uint64_t)v130);
    swift_release_n();
    swift_release_n();
    v51 = v138;
  }
  else
  {
    v52 = swift_retain_n();
    v50 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v130;
    v53 = v138;
    specialized closure #1 in PropertyList.subscript.getter(v52, (uint64_t)v130);
    v51 = v53;
    swift_release_n();
  }
  v54 = type metadata accessor for Locale();
  v55 = *(_QWORD *)(v54 - 8);
  v130 = *(_QWORD **)(v55 + 56);
  ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v130)(v50, 0, 1, v54);
  swift_retain();
  swift_retain();
  v56 = swift_bridgeObjectRetain();
  v57 = v51;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh61V25getArgumentsForInflection3for2in5idiom4with9includingSays7kl150_pG9arguments_Sb19isUniqueSizeVarianttSo012NSAttributedD0C_AA17EnvironmentValuesVAA17AnyInterfaceIdiomVSgAA4TextV14ResolveOptionsVAV5StyleVtFsAJ_pAC14iJ19VXEfU_sAJ_pA0_XEfU_AF17EnvironmentValuesVAF17AnyInterfaceIdiomVSgSbTf1cn_nTf4ngdn_n(v56, a2, a3, v137);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v133 = (void (**)(char *, _QWORD))getVaList(_:)();
  swift_bridgeObjectRelease();
  v58 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v55 + 48);
  v138 = v54;
  v59 = v50;
  v60 = v58(v50, 1, v54);
  v61 = v131;
  isa = 0;
  if (v60 != 1)
  {
    isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))(v55 + 8))(v59, v138);
  }
  v63 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  v64 = (void (**)(char *, _QWORD))objc_msgSend(v63, sel_initSwiftUIAttributedStringWithFormat_options_locale_arguments_, v61, 0, isa, v133);

  v133 = v64;
  v65 = objc_msgSend(v64, sel_string);
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v68 = v67;

  *(_QWORD *)&v149[0] = v66;
  *((_QWORD *)&v149[0] + 1) = v68;
  *(_QWORD *)&v141 = 0;
  *((_QWORD *)&v141 + 1) = 0xE000000000000000;
  Character.write<A>(to:)();
  *(_QWORD *)&v140[0] = v123;
  v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  Character.write<A>(to:)();
  v70 = (uint64_t)v132;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v130)(v132, 1, 1, v138);
  lazy protocol witness table accessor for type String and conformance String();
  v71 = StringProtocol.range<A>(of:options:range:locale:)();
  v73 = v72;
  LOBYTE(v65) = v74;
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v70, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) != 0)
  {
    *(_QWORD *)&v141 = a2;
    *((_QWORD *)&v141 + 1) = a3;
    LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v149, &v141);
    v100 = (uint64_t)v136;
    *v137 = (*v137 | v101) & 1;
    outlined init with take of ScrollStateRequest(v149, v100);
    v102 = v134;
    v103 = v126;
    outlined consume of Text.Storage(v134, v126, 1);

    outlined consume of Text.Storage(v102, v103, 1);
    outlined consume of Text.Storage(v102, v103, 1);
    return swift_bridgeObjectRelease();
  }
  v138 = v57;
  *(_QWORD *)&v149[0] = v71;
  *((_QWORD *)&v149[0] + 1) = v73;
  v75 = v133;
  v76 = objc_msgSend(v133, sel_string);
  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v79 = v78;

  *(_QWORD *)&v141 = v77;
  *((_QWORD *)&v141 + 1) = v79;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x24BEE0B58], MEMORY[0x24BEE0B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  v80 = _NSRange.init<A, B>(_:in:)();
  v82 = objc_msgSend(v75, sel_attributesAtIndex_longestEffectiveRange_inRange_, v80, 0, v80, v81);
  type metadata accessor for NSAttributedStringKey(0);
  v84 = v83;
  v85 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v135 = v84;
  v132 = (char *)v85;
  v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with copy of TypesettingLanguage(a10, v160, type metadata accessor for Text.Style);
  v87 = Text.withInlinePresentationIntent(from:)(v86, v134, v126, 1, v124);
  v89 = v88;
  LOBYTE(v77) = v90;
  v92 = v91;
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v87, (uint64_t)v89, v77 & 1);
  v94 = *(_QWORD *)(v92 + 16);
  if (v94)
  {
    v95 = 0;
    v96 = (_BYTE *)(v92 + 16 * v94 + 24);
    while (v94 <= *(_QWORD *)(v92 + 16))
    {
      --v94;
      v89 = (void *)*((_QWORD *)v96 - 1);
      v97 = *v96;
      v96 -= 16;
      v95 |= (v97 & 0xE0) == 128;
      *(_QWORD *)&v149[0] = a2;
      *((_QWORD *)&v149[0] + 1) = a3;
      outlined copy of Text.Modifier((uint64_t)v89, v97);
      Text.Modifier.modify(style:environment:)(v160, (uint64_t)v149, (uint64_t)v89, v97);
      outlined consume of Text.Modifier((uint64_t)v89, v97);
      if (!v94)
        goto LABEL_21;
    }
    __break(1u);
LABEL_28:
    v104 = *(_QWORD *)(v93 + 64);
    *((_QWORD *)&v142 + 1) = MEMORY[0x24BEE50B0];
    *(_QWORD *)&v141 = v104;
    outlined init with take of Any(&v141, v140);
    v105 = v89;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v139 = v92;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v140, v105, isUniquelyReferenced_nonNull_native);
    v148 = v139;

    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v95 = 0;
LABEL_21:
  v94 = (uint64_t)&v141;
  swift_bridgeObjectRelease();
  v150 = 0;
  memset(v149, 0, sizeof(v149));
  v151 = MEMORY[0x24BEE4AF8];
  v152 = MEMORY[0x24BEE4AF8];
  v153 = 0u;
  v154 = 0u;
  v156 = xmmword_235260F00;
  v155 = 0;
  v157 = MEMORY[0x24BEE4AF8];
  v158 = 0;
  v159 = 0;
  v98 = v127;
  outlined init with copy of TypesettingLanguage(v160, v127, type metadata accessor for Text.Style);
  *(_QWORD *)&v141 = a2;
  *((_QWORD *)&v141 + 1) = a3;
  *(_QWORD *)&v140[0] = a11;
  outlined copy of Text.Storage(v134, v126, 1);
  v92 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:), v121, (uint64_t *)&v141, 1, (uint64_t *)v140, (uint64_t)v149);
  swift_release();
  outlined destroy of TypesettingConfiguration(v98, type metadata accessor for Text.Style);
  v148 = v92;
  v96 = v125;
  if ((v95 & 1) == 0)
    goto LABEL_29;
  if (one-time initialization token for kitTracking != -1)
    swift_once();
  v89 = (void *)static NSAttributedStringKey.kitTracking;
  v93 = v160;
  if ((*(_BYTE *)(v160 + 72) & 1) == 0)
    goto LABEL_28;
  v99 = (id)static NSAttributedStringKey.kitTracking;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v99, &v141);

  outlined destroy of TypesettingConfiguration((uint64_t)&v141, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_29:
  v107 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  v108 = (uint64_t)v128;
  (*(void (**)(char *, uint64_t, _BYTE *))(v129 + 16))(v128, v122, v96);
  v109 = NSAttributedString.init(swiftUIAttributedString:)(v108);
  v110 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v111 = v109;
  v112 = objc_msgSend(v111, sel_length);

  objc_msgSend(v111, sel_addAttributes_range_, v110, 0, v112);
  v113 = v136;
  *v137 = (*v137 | HIBYTE(v150)) & 1;
  v113[3] = v107;
  v113[4] = lazy protocol witness table accessor for type NSObject and conformance NSObject(&lazy protocol witness table cache variable for type NSMutableAttributedString and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);

  v114 = v134;
  v115 = v126;
  outlined consume of Text.Storage(v134, v126, 1);
  *v113 = v111;
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v114, v115, 1);
  outlined consume of Text.Storage(v114, v115, 1);
  v116 = *(_OWORD *)(v94 + 256);
  *(_OWORD *)(v94 + 96) = *(_OWORD *)(v94 + 240);
  *(_OWORD *)(v94 + 112) = v116;
  v147 = v159;
  v117 = *(_OWORD *)(v94 + 192);
  v143 = *(_OWORD *)(v94 + 176);
  v144 = v117;
  v118 = *(_OWORD *)(v94 + 224);
  v145 = *(_OWORD *)(v94 + 208);
  v146 = v118;
  v119 = *(_OWORD *)(v94 + 160);
  v141 = *(_OWORD *)(v94 + 144);
  v142 = v119;
  outlined release of Text.ResolvedProperties(&v141);
  return outlined destroy of TypesettingConfiguration(v160, type metadata accessor for Text.Style);
}

uint64_t Text.withInlinePresentationIntent(from:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  id v10;
  uint64_t v11;
  char v12;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;

  if (!*(_QWORD *)(a1 + 16))
  {
    v40 = 0u;
    v41 = 0u;
    goto LABEL_12;
  }
  v10 = (id)*MEMORY[0x24BDD0DF0];
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) == 0)
  {
    v40 = 0u;
    v41 = 0u;

    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v40);

  if (!*((_QWORD *)&v41 + 1))
  {
LABEL_12:
    outlined destroy of TypesettingConfiguration((uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    return a2;
  }
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  if ((v39 & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    v15 = a5[2];
    v14 = a5[3];
    if (v15 >= v14 >> 1)
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, a5);
    a5[2] = v15 + 1;
    v16 = &a5[2 * v15];
    v16[4] = 0;
    *((_BYTE *)v16 + 40) = -32;
    if ((v39 & 2) == 0)
    {
LABEL_7:
      if ((v39 & 4) == 0)
        goto LABEL_8;
LABEL_25:
      type metadata accessor for MonospacedTextModifier();
      v23 = swift_allocObject();
      *(_BYTE *)(v23 + 16) = 1;
      outlined copy of Text.Storage(a2, a3, a4 & 1);
      swift_bridgeObjectRetain();
      swift_retain();
      v24 = a5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
      v25 = v24[2];
      v26 = v24[3];
      v27 = v25 + 1;
      if (v25 >= v26 >> 1)
      {
        v38 = v25 + 1;
        v34 = v24;
        v35 = v24[2];
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v25 + 1, 1, v34);
        v25 = v35;
        v27 = v38;
        v24 = v36;
      }
      v24[2] = v27;
      v28 = &v24[2 * v25];
      v28[4] = v23;
      *((_BYTE *)v28 + 40) = -64;
      swift_release();
      outlined consume of Text.Storage(a2, a3, a4 & 1);
      swift_bridgeObjectRelease();
      a5 = v24;
      if ((v39 & 0x20) != 0)
        goto LABEL_30;
      return a2;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_7;
  }
  type metadata accessor for BoldTextModifier();
  v17 = swift_allocObject();
  *(_BYTE *)(v17 + 16) = 1;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  v18 = a5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v19 = v18[2];
  v20 = v18[3];
  v21 = v19 + 1;
  if (v19 >= v20 >> 1)
  {
    v37 = v19 + 1;
    v31 = v18;
    v32 = v18[2];
    v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v19 + 1, 1, v31);
    v19 = v32;
    v21 = v37;
    v18 = v33;
  }
  v18[2] = v21;
  v22 = &v18[2 * v19];
  v22[4] = v17;
  *((_BYTE *)v22 + 40) = -64;
  swift_release();
  outlined consume of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRelease();
  a5 = v18;
  if ((v39 & 4) != 0)
    goto LABEL_25;
LABEL_8:
  if ((v39 & 0x20) != 0)
  {
LABEL_30:
    v29 = a4 & 1;
    v30 = Text.strikethrough(_:color:)(1, 0, a2, a3, a4 & 1, a5);
    outlined consume of Text.Storage(a2, a3, v29);
    swift_bridgeObjectRelease();
    return v30;
  }
  return a2;
}

uint64_t closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = type metadata accessor for AttributedString.CharacterView();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290];
  MEMORY[0x24BDAC7A8](v0);
  AttributedString.characters.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, v1, MEMORY[0x24BDCC2A8]);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_bridgeObjectRetain();
  v9 = String.init<A>(_:)();
  v24 = a6;
  v25 = a7;
  v11 = String.caseConvertedIfNeeded(_:)(&v24, v9, v10);
  v13 = v12;
  swift_bridgeObjectRelease();
  if (!a7)
  {
    v24 = a6;
    v25 = 0;
    swift_retain();
    v23 = specialized static ShouldRedactContentKey.value(in:)(&v24, v20, v21, v22);
    swift_release();
    if ((v23 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  swift_retain_n();
  swift_retain_n();
  v14 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a6);
  swift_release_n();
  swift_release_n();
  if ((v14 & 1) != 0)
  {
LABEL_3:
    v15 = String.count.getter();
    v11 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v15);
    v17 = v16;
    swift_bridgeObjectRelease();
    v13 = v17;
  }
LABEL_4:
  type metadata accessor for Text.ResolvedString(0);
  v18._countAndFlagsBits = v11;
  v18._object = v13;
  String.append(_:)(v18);
  return swift_bridgeObjectRelease();
}

void specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4, id a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18[2];

  v11 = objc_msgSend(a5, sel_string);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x24BEE0B58], MEMORY[0x24BEE0B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  v15 = _NSRange.init<A, B>(_:in:)();
  v17 = objc_msgSend(a5, sel_attributedSubstringFromRange_, v15, v16, v12, v14);
  v18[0] = a7;
  v18[1] = a8;
  specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(v17, v18);

}

void closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4, id a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v13 = objc_msgSend(a5, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x24BEE0B58], MEMORY[0x24BEE0B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  v14 = _NSRange.init<A, B>(_:in:)();
  v16 = objc_msgSend(a5, sel_attributedSubstringFromRange_, v14, v15);
  (*(void (**)(void))(a12 + 48))();

}

uint64_t specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, int a5, int a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11)
{
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v15 = objc_msgSend(a9, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x24BEE0B58], MEMORY[0x24BEE0B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  v16 = _NSRange.init<A, B>(_:in:)();
  v18 = objc_msgSend(a9, sel_attributesAtIndex_longestEffectiveRange_inRange_, v16, 0, v16, v17);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v20 = Text.withInlinePresentationIntent(from:)(v19, a1, a2, a3 & 1, a4);
  v22 = v21;
  LOBYTE(a2) = v23;
  v25 = v24;
  swift_bridgeObjectRelease();
  specialized Text.resolve<A>(into:in:with:)(a10, a7, a8, a11, v20, v22, a2 & 1, v25);
  outlined consume of Text.Storage(v20, v22, a2 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, int a5, int a6, uint64_t *a7, id a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33[2];
  uint64_t v34[2];

  v17 = *a7;
  v18 = a7[1];
  v19 = objc_msgSend(a8, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v33[1] = v21;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x24BEE0B58], MEMORY[0x24BEE0B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  v22 = _NSRange.init<A, B>(_:in:)();
  v24 = objc_msgSend(a8, sel_attributesAtIndex_longestEffectiveRange_inRange_, v22, 0, v22, v23);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v26 = Text.withInlinePresentationIntent(from:)(v25, a1, a2, a3 & 1, a4);
  v28 = v27;
  LOBYTE(a1) = v29;
  v31 = v30;
  swift_bridgeObjectRelease();
  LOBYTE(a1) = a1 & 1;
  v34[0] = v17;
  v34[1] = v18;
  v33[0] = a10;
  Text.resolve<A>(into:in:with:)(a9, v34, v33, v26, v28, a1, v31, a11, a12);
  outlined consume of Text.Storage(v26, v28, a1);
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(58);
  v4._object = (void *)0x80000002352E1EA0;
  v4._countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x3A6469202020200ALL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  _QWORD v15[2];

  v4 = type metadata accessor for FormatStyleCapitalizationContext();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCD6D8];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v15 - v10;
  v15[0] = a1;
  v15[1] = a2;
  EnvironmentValues.capitalizationContext.getter((uint64_t)v15 - v10);
  static FormatStyleCapitalizationContext.middleOfSentence.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, v5, MEMORY[0x24BDCD6F8]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v4);
  v13 = ((uint64_t (*)(char *, uint64_t))v12)(v11, v4);
  if ((a2 & 1) != 0)
    return static FormatStyleCapitalizationContext.middleOfSentence.getter();
  else
    return MEMORY[0x23B7C4840](v13);
}

uint64_t closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  __CFString *v19;
  const __CFLocale *isa;
  _BOOL4 isBeginningOfSentence;
  uint64_t v22;
  _QWORD v24[2];

  v24[1] = a5;
  v9 = type metadata accessor for Locale();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = String.subscript.getter();
  v14 = MEMORY[0x23B7C5E78](v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  if (a4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(a3, (uint64_t)v12);
  }
  else
  {
    v17 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v12);
  }
  swift_release_n();
  swift_release_n();
  v18 = (__CFString *)MEMORY[0x23B7C5DAC](a1, a2);
  v19 = (__CFString *)MEMORY[0x23B7C5DAC](v14, v16);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  isBeginningOfSentence = _isBeginningOfSentence(v18, v19, isa);
  swift_bridgeObjectRelease();

  v22 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (isBeginningOfSentence)
    return MEMORY[0x23B7C4840](v22);
  else
    return static FormatStyleCapitalizationContext.middleOfSentence.getter();
}

BOOL LocalizedStringKey.resolvesToEmpty(in:options:table:bundle:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  Class isa;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a8;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v39 - v15;
  v17 = type metadata accessor for Locale();
  v41 = *(_QWORD *)(v17 - 8);
  v42 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  v21 = a1[1];
  if (a5)
    v22 = a5;
  else
    v22 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v23 = a5;
  v24 = (void *)MEMORY[0x23B7C5DAC](a6, a7);
  if (a4)
    v25 = (void *)MEMORY[0x23B7C5DAC](a3, a4);
  else
    v25 = 0;
  v39 = v16;
  if (v21)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)v19);
  }
  else
  {
    v26 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v26, (uint64_t)v19);
  }
  swift_release_n();
  swift_release_n();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
  v28 = (void *)_LocalizeString(v22, v24, v25, isa);

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;

  if ((v40 & 1) != 0)
  {
    if (v21)
    {
      swift_retain_n();
      swift_retain_n();
      v32 = (uint64_t)v39;
      specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)v39);
    }
    else
    {
      v33 = swift_retain_n();
      v32 = (uint64_t)v39;
      specialized closure #1 in PropertyList.subscript.getter(v33, (uint64_t)v39);
    }
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v32, 0, 1, v42);
    swift_retain();
    swift_retain();
    v34 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh114V15resolvesToEmpty2in7options5table6bundleSbAA17EnvironmentValuesV_AA4TextV14ResolveOptionsVSSSgSo8NSBundleCSgtFs7kl6_pAC14iJ6VXEfU_AF0uV0VTf1cn_nTf4ng_n(v34, v20, v21);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v29 = String.init(format:locale:arguments:)();
    v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v32, &lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
    v31 = v36;
  }
  swift_bridgeObjectRelease();
  v37 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0)
    v37 = v29 & 0xFFFFFFFFFFFFLL;
  return v37 == 0;
}

uint64_t LocalizedStringKey.FormatArgument.init(value:formatter:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v8);
  if (a2)
  {
    objc_msgSend(a2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSFormatter);
    swift_dynamicCast();
    v9 = v11[5];
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)v8 + 5) = v9;
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_storeEnumTagMultiPayload();
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v8, a3, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
}

void LocalizedStringKey.FormatArgument.resolve(in:idiom:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  _QWORD v11[12];

  v11[1] = a1;
  v4 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for AttributedString();
  v11[0] = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x24BDAC7A8](v7);
  v11[2] = *a2;
  outlined init with copy of TypesettingLanguage(v2, (uint64_t)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v10 = (char *)&loc_234CE77C8 + *((int *)qword_234CE8000 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

BOOL sub_234CE77D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  _QWORD *v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(void **)(v1 + 40);
  outlined init with take of ScrollStateRequest((__int128 *)v1, v2 - 136);
  if (v3)
  {
    swift_getObjectType();
    v4 = swift_conformsToProtocol2();
    if (v4)
      v5 = v4;
    else
      v5 = 0;
    if (v4)
      v6 = v3;
    else
      v6 = 0;
    v7 = *(_QWORD *)(v2 - 160);
    if (v6)
    {
      ObjectType = swift_getObjectType();
      *(_QWORD *)(v2 - 152) = v7;
      *(_QWORD *)(v2 - 144) = v0;
      v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8);
      v10 = v3;
      v9(v2 - 152, ObjectType, v5);
    }
    else
    {
      v12 = v3;
    }
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 136), *(_QWORD *)(v2 - 112));
    v13 = objc_msgSend(v3, sel_stringForObjectValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if (v13)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

      v17 = *(uint64_t **)(v2 - 168);
      v17[3] = MEMORY[0x24BEE0D00];
      v17[4] = lazy protocol witness table accessor for type String and conformance String();
      *v17 = v14;
      v17[1] = v16;
      if (v0)
      {
LABEL_15:
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v7, (uint64_t *)(v2 - 152));
        swift_unknownObjectRelease();

        swift_release_n();
        goto LABEL_23;
      }
    }
    else
    {
      *(_QWORD *)(v2 - 152) = 0;
      *(_QWORD *)(v2 - 144) = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v18 = *(_QWORD *)(v2 - 144);
      *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 152);
      *(_QWORD *)(v2 - 144) = v18;
      v19._object = (void *)0x80000002352E1E00;
      v19._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v19);
      v20 = objc_msgSend(v3, sel_description);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

      v24._countAndFlagsBits = v21;
      v24._object = v23;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 0xD000000000000022;
      v25._object = (void *)0x80000002352E1E20;
      String.append(_:)(v25);
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
      _print_unlocked<A, B>(_:_:)();
      v26._countAndFlagsBits = 0xD000000000000027;
      v26._object = (void *)0x80000002352E1E50;
      String.append(_:)(v26);
      specialized static Log.externalWarning(_:)(*(_QWORD *)(v2 - 152), *(_QWORD *)(v2 - 144));
      swift_bridgeObjectRelease();
      v27 = *(_QWORD **)(v2 - 168);
      v27[3] = MEMORY[0x24BEE0D00];
      v27[4] = lazy protocol witness table accessor for type String and conformance String();
      *v27 = 0;
      v27[1] = 0xE000000000000000;
      if (v0)
        goto LABEL_15;
    }
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v28);
    v29 = *(_QWORD *)(v2 - 152);
    v30 = swift_retain_n();
    v31 = specialized find1<A>(_:key:filter:)(v30, v29);
    if (v31)
      v32 = *(_QWORD *)(v31 + 72);
    else
      v32 = 0;
    *(_QWORD *)(v2 - 152) = v32;
    swift_unknownObjectRelease();

    goto LABEL_23;
  }
  outlined init with copy of AnyTrackedValue(v2 - 136, *(_QWORD *)(v2 - 168));
  v11 = *(_QWORD *)(v2 - 160);
  if (v0)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v11, (uint64_t *)(v2 - 152));
    swift_release_n();
LABEL_23:
    swift_release_n();
    v37 = *(_QWORD *)(v2 - 152);
    goto LABEL_24;
  }
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v33);
  v34 = *(_QWORD *)(v2 - 152);
  v35 = swift_retain_n();
  v36 = specialized find1<A>(_:key:filter:)(v35, v34);
  if (v36)
    v37 = *(_QWORD *)(v36 + 72);
  else
    v37 = 0;
  swift_release_n();
LABEL_24:
  __swift_destroy_boxed_opaque_existential_1(v2 - 136);
  return v37 == 0;
}

SwiftUI::LocalizedStringKey::StringInterpolation __swiftcall LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(Swift::Int literalCapacity, Swift::Int interpolationCount)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v5;
  void *v6;
  Swift::Int v7;
  SwiftUI::LocalizedStringKey::StringInterpolation result;

  v3 = v2;
  *v2 = 0;
  v2[1] = 0xE000000000000000;
  v2[3] = 0;
  if (interpolationCount + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v5 = __OFADD__(literalCapacity, 2 * interpolationCount);
  literalCapacity += 2 * interpolationCount;
  if (v5)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  MEMORY[0x23B7C5E90](literalCapacity);
  literalCapacity = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, interpolationCount & ~(interpolationCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  v3[2] = literalCapacity;
LABEL_6:
  result.seed.nextID = v7;
  result.arguments._rawValue = v6;
  result.key._object = (void *)interpolationCount;
  result.key._countAndFlagsBits = literalCapacity;
  return result;
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  Swift::String v1;

  lazy protocol witness table accessor for type String and conformance String();
  v1._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  Swift::String v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v16 - v9);
  *(uint64_t *)((char *)&v16 - v9 + 24) = MEMORY[0x24BEE0D00];
  v11 = lazy protocol witness table accessor for type String and conformance String();
  *v10 = countAndFlagsBits;
  v10[1] = (uint64_t)object;
  v10[4] = v11;
  v10[5] = 0;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 16421;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  outlined init with copy of TypesettingLanguage((uint64_t)v10, (uint64_t)v7, type metadata accessor for LocalizedStringKey.FormatArgument);
  v13 = *(_QWORD *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  if (v15 >= v14 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1, v13);
  *(_QWORD *)(v13 + 16) = v15 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(_QWORD *)(v1 + 16) = v13;
  outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:formatter:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v23 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v24[-v15 - 8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v14);
  v25 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v26 = lazy protocol witness table accessor for type NSObject and conformance NSObject(&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  v17 = a2;
  LocalizedStringKey.FormatArgument.init(value:formatter:)((uint64_t)v24, a2, (uint64_t)v16);
  v18._countAndFlagsBits = 16421;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  outlined init with copy of TypesettingLanguage((uint64_t)v16, (uint64_t)v12, type metadata accessor for LocalizedStringKey.FormatArgument);
  v19 = *(_QWORD *)(v3 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
  v21 = *(_QWORD *)(v19 + 16);
  v20 = *(_QWORD *)(v19 + 24);
  if (v21 >= v20 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v19);
  *(_QWORD *)(v19 + 16) = v21 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, v19+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v21, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(_QWORD *)(v3 + 16) = v19;
  return outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for LocalizedStringKey.FormatArgument);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:formatter:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v23[5];

  v7 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23[-1] - v13;
  v23[3] = a3;
  v23[4] = MEMORY[0x23B7C9C04](MEMORY[0x24BEE5BE8], a3, v12);
  v23[0] = a1;
  v15 = a2;
  v16 = a1;
  LocalizedStringKey.FormatArgument.init(value:formatter:)((uint64_t)v23, a2, (uint64_t)v14);
  v17._countAndFlagsBits = 16421;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  outlined init with copy of TypesettingLanguage((uint64_t)v14, (uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
  v18 = *(_QWORD *)(v3 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v18);
  *(_QWORD *)(v18 + 16) = v20 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v18+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v20, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(_QWORD *)(v3 + 16) = v18;
  return outlined destroy of TypesettingConfiguration((uint64_t)v14, type metadata accessor for LocalizedStringKey.FormatArgument);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(a1, a2, a3, a4, a5, (uint64_t (*)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))Text.init<A>(_:format:));
}

{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(a1, a2, a3, a4, a5, (uint64_t (*)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))Text.init<A>(_:format:));
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v9 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v16 + 1;
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  a3 &= 1u;
  v15[16] = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = v16;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  outlined copy of Text.Storage(a1, a2, a3);
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 16421;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  outlined init with copy of TypesettingLanguage((uint64_t)v15, (uint64_t)v12, type metadata accessor for LocalizedStringKey.FormatArgument);
  v18 = *(_QWORD *)(v4 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v18);
  *(_QWORD *)(v18 + 16) = v20 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, v18+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v20, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(_QWORD *)(v4 + 16) = v18;
  return outlined destroy of TypesettingConfiguration((uint64_t)v15, type metadata accessor for LocalizedStringKey.FormatArgument);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _BYTE v26[16];

  v9 = a3;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18 = &v26[-v17];
  (*(void (**)(_BYTE *, uint64_t, double))(v19 + 16))(&v26[-v17], a1, v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v9);
  v20 = a6(v18, v14, v9, a4, a5);
  v22 = v21;
  LOBYTE(v9) = v23 & 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v20, v21, v23 & 1, v24);
  outlined consume of Text.Storage(v20, v22, v9);
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;

  v6 = formatSpecifier<A>(_:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(a1, v6, v7, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t formatSpecifier<A>(_:)()
{
  uint64_t v0;

  v0 = 1684827173;
  if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
      return 25637;
    }
    else
    {
      v0 = 1970039845;
      if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
      {
        if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
        {
          return 29989;
        }
        else if (swift_dynamicCastMetatype())
        {
          return 26149;
        }
        else
        {
          v0 = 6712357;
          if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
            return 16421;
        }
      }
    }
  }
  return v0;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  Swift::String v15;
  void (*v16)(uint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;

  v6 = v5;
  v11 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  v16 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
  v14[3] = swift_getAssociatedTypeWitness();
  v14[4] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v14);
  v16(a4, a5);
  v14[5] = 0;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  v17 = *(_QWORD *)(v6 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
  v19 = *(_QWORD *)(v17 + 16);
  v18 = *(_QWORD *)(v17 + 24);
  if (v19 >= v18 >> 1)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v17);
  *(_QWORD *)(v17 + 16) = v19 + 1;
  result = outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v14, v17+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v19, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(_QWORD *)(v6 + 16) = v17;
  return result;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v3 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - v8;
  v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a1, v10);
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  v11._countAndFlagsBits = 16421;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  outlined init with copy of TypesettingLanguage((uint64_t)v9, (uint64_t)v6, type metadata accessor for LocalizedStringKey.FormatArgument);
  v12 = *(_QWORD *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v12);
  *(_QWORD *)(v12 + 16) = v14 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(_QWORD *)(v1 + 16) = v12;
  return outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for LocalizedStringKey.FormatArgument);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v3 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - v8;
  v10 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a1, v10);
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  v11._countAndFlagsBits = 16421;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v6);
  v12 = *(_QWORD *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v12);
  *(_QWORD *)(v12 + 16) = v14 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14);
  *(_QWORD *)(v1 + 16) = v12;
  return outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v9);
}

{
  uint64_t v2;

  type metadata accessor for AttachmentTextStorage();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v2, 0, 1, MEMORY[0x24BEE4AF8]);
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  uint64_t (*v19)(_QWORD);
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  _QWORD v23[2];

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v23 - v7;
  v9 = type metadata accessor for DateInterval();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v14 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1;
  v19 = v18;
  outlined init with copy of TypesettingLanguage(v17, (uint64_t)v16, v18);
  v20 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v20(v8, v16, v2);
  v20(v5, &v16[*(int *)(v14 + 36)], v2);
  DateInterval.init(start:end:)();
  outlined destroy of TypesettingConfiguration((uint64_t)v16, v19);
  type metadata accessor for DateTextStorage(0);
  v21 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, v12, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v21, 0, 1, MEMORY[0x24BEE4AF8]);
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for DateInterval();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  type metadata accessor for DateTextStorage(0);
  v7 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, v6, v2);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v7, 0, 1, MEMORY[0x24BEE4AF8]);
  return swift_release();
}

void LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance LocalizedStringKey.StringInterpolation@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL v5;

  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[3] = 0;
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = __OFADD__(result, 2 * a2);
    result += 2 * a2;
    if (!v5)
    {
      MEMORY[0x23B7C5E90](result);
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x24BEE4AF8]);
      a3[2] = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance LocalizedStringKey.StringInterpolation()
{
  Swift::String v0;

  lazy protocol witness table accessor for type String and conformance String();
  v0._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t static LocalizedStringKey.== infix(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  if ((a1 == a5 && a2 == a6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && ((a3 ^ a7) & 1) == 0)
    return specialized static Array<A>.== infix(_:_:)(a4, a8);
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 == v4)
      return specialized static Array<A>.== infix(_:_:)(v3, v5);
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v2 ^ v4) & 1) == 0)
  {
    return specialized static Array<A>.== infix(_:_:)(v3, v5);
  }
  return 0;
}

_QWORD *protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance LocalizedStringKey@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = result[2];
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

_QWORD *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance LocalizedStringKey@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = MEMORY[0x24BEE4AF8];
  return result;
}

void LocalizedTextStorage.resolve<A>(into:in:with:)(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;

  v6 = *a3;
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(_BYTE *)(v5 + 32);
  v11 = *a2;
  v10 = v6;
  LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(a1, (uint64_t *)&v11, &v10, *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(void **)(v5 + 64), v7, v8, v9, *(_QWORD *)(v5 + 40), a4, a5);
}

BOOL LocalizedTextStorage.resolvesToEmpty(in:with:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v7;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(unsigned __int8 *)(v2 + 32);
  v7 = *a1;
  return LocalizedStringKey.resolvesToEmpty(in:options:table:bundle:)((uint64_t *)&v7, a2, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void **)(v2 + 64), v3, v4, v5);
}

uint64_t LocalizedTextStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  char v16;
  id v17;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = (_QWORD *)result;
    v3 = *(unsigned __int8 *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(unsigned __int8 *)(result + 32);
    v6 = *(_QWORD *)(result + 40);
    if (*(_QWORD *)(v0 + 16) == *(_QWORD *)(result + 16) && *(_QWORD *)(v0 + 24) == *(_QWORD *)(result + 24))
    {
      if (v3 != v5)
        return 0;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v8 & 1) == 0 || ((v3 ^ v5) & 1) != 0)
        return result;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = specialized static Array<A>.== infix(_:_:)(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v0 + 56);
      v11 = v2[7];
      if (v10)
      {
        if (!v11
          || (*(_QWORD *)(v0 + 48) != v2[6] || v10 != v11) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_21;
        }
LABEL_18:
        v12 = *(void **)(v0 + 64);
        v13 = (void *)v2[8];
        if (!v12)
        {
          v17 = v13;
          swift_release();
          if (!v13)
            return 1;

          return 0;
        }
        if (v13)
        {
          type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
          v14 = v13;
          v15 = v12;
          v16 = static NSObject.== infix(_:_:)();

          swift_release();
          return v16 & 1;
        }
        goto LABEL_21;
      }
      if (!v11)
        goto LABEL_18;
    }
LABEL_21:
    swift_release();
    return 0;
  }
  return result;
}

BOOL LocalizedTextStorage.isStyled(options:)()
{
  uint64_t *v0;

  return LocalizedStringKey.isStyled.getter(v0[2], v0[3], 0, v0[5]);
}

uint64_t LocalizedTextStorage.localizationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  id v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(void **)(v1 + 64);
  v6 = *(_BYTE *)(v1 + 32) | 0x40;
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  v7 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void LocalizedTextStorage.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t LocalizedTextStorage.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Int._specifier.getter()
{
  return 1684827173;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Int()
{
  return 1684827173;
}

uint64_t Int8._arg.getter(char a1)
{
  return a1;
}

uint64_t Int8._specifier.getter()
{
  return 25637;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int8(_DWORD *a1@<X8>)
{
  char *v1;

  *a1 = *v1;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Int8()
{
  return 25637;
}

uint64_t Int16._arg.getter(__int16 a1)
{
  return a1;
}

uint64_t Int16._specifier.getter()
{
  return 25637;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int16(_DWORD *a1@<X8>)
{
  __int16 *v1;

  *a1 = *v1;
}

uint64_t Int32._specifier.getter()
{
  return 25637;
}

uint64_t Int64._specifier.getter()
{
  return 1684827173;
}

uint64_t UInt._specifier.getter()
{
  return 1970039845;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance UInt()
{
  return 1970039845;
}

uint64_t UInt8._arg.getter(uint64_t result)
{
  return result;
}

uint64_t UInt8._specifier.getter()
{
  return 29989;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt8(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance UInt8()
{
  return 29989;
}

uint64_t UInt16._arg.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t UInt16._specifier.getter()
{
  return 29989;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt16(_DWORD *a1@<X8>)
{
  unsigned __int16 *v1;

  *a1 = *v1;
}

uint64_t UInt32._specifier.getter()
{
  return 29989;
}

uint64_t UInt64._specifier.getter()
{
  return 29989;
}

uint64_t Float._specifier.getter()
{
  return 26149;
}

float protocol witness for _FormatSpecifiable._arg.getter in conformance Float@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Float()
{
  return 26149;
}

uint64_t Double._specifier.getter()
{
  return 6712357;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Double()
{
  return 6712357;
}

uint64_t CGFloat._specifier.getter()
{
  return 6712357;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  uint64_t v63;

  v7 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Int, LocalizedStringKey.FormatArgument)();
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v56 = a1;
  v57 = v8;
  v17 = a2;
  v55 = v3;
  v18 = (uint64_t)v15 + *(int *)(v12 + 48);
  v54 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = a1 + v54;
  v59 = *(_QWORD *)(v13 + 72);
  swift_bridgeObjectRetain();
  outlined init with copy of TypesettingLanguage(v19, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
  v63 = *v15;
  v20 = v63;
  v58 = v18;
  outlined init with take of LocalizedStringKey.FormatArgument(v18, (uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
  v21 = (_QWORD *)*a3;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_23;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v17 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v32 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(_QWORD *)(v32[6] + 8 * v23) = v20;
    v33 = v32[7];
    v57 = *(_QWORD *)(v57 + 72);
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v33 + v57 * v23, type metadata accessor for LocalizedStringKey.FormatArgument);
    v34 = v32[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v32[2] = v36;
    v37 = v16 - 1;
    if (v16 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v38 = v56 + v59 + v54;
    while (1)
    {
      outlined init with copy of TypesettingLanguage(v38, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
      v63 = *v15;
      v39 = v63;
      outlined init with take of LocalizedStringKey.FormatArgument(v58, (uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
      v40 = (_QWORD *)*a3;
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
      v43 = v40[2];
      v44 = (v42 & 1) == 0;
      v35 = __OFADD__(v43, v44);
      v45 = v43 + v44;
      if (v35)
        break;
      v46 = v42;
      if (v40[3] < v45)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, 1);
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
        if ((v46 & 1) != (v47 & 1))
          goto LABEL_25;
      }
      if ((v46 & 1) != 0)
        goto LABEL_10;
      v48 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v41 >> 6) + 64) |= 1 << v41;
      *(_QWORD *)(v48[6] + 8 * v41) = v39;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v48[7] + v57 * v41, type metadata accessor for LocalizedStringKey.FormatArgument);
      v49 = v48[2];
      v35 = __OFADD__(v49, 1);
      v50 = v49 + 1;
      if (v35)
        goto LABEL_24;
      v48[2] = v50;
      v38 += v59;
      if (!--v37)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v17 & 1);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = (void *)swift_allocError();
    swift_willThrow();
    v62 = v30;
    v31 = v30;
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  v60 = 0;
  v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v51._object = (void *)0x80000002352E1EF0;
  v51._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v51);
  _print_unlocked<A, B>(_:_:)();
  v52._countAndFlagsBits = 39;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static LocalizedStringKey.FormatArgument.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = a1;
  v19 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for LocalizedStringResource();
  v17[4] = *(_QWORD *)(v2 - 8);
  v17[5] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v17[1] = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v17[0] = (char *)v17 - v5;
  v6 = type metadata accessor for AttributedString();
  v17[2] = *(_QWORD *)(v6 - 8);
  v17[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  type metadata accessor for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage)();
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v17 + *(int *)(v14 + 48) - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(v18, (uint64_t)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
  outlined init with copy of TypesettingLanguage(v19, (uint64_t)v15, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
  v16 = (char *)sub_234CE9BA0 + 4 * byte_235297A54[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234CE9BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  outlined init with copy of TypesettingLanguage(v0, v1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
  v4 = *(void **)(v1 + 40);
  if (!swift_getEnumCaseMultiPayload())
  {
    v8 = v0;
    v9 = *(id *)(v2 + 40);
    outlined init with take of ScrollStateRequest((__int128 *)v1, v3 - 136);
    outlined init with take of ScrollStateRequest((__int128 *)v2, v3 - 176);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
    if (AGCompareValues())
    {
      if (v4)
      {
        if (v9)
        {
          type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSFormatter);
          v10 = v9;
          v11 = v4;
          v5 = static NSObject.== infix(_:_:)();

          __swift_destroy_boxed_opaque_existential_1(v3 - 176);
          __swift_destroy_boxed_opaque_existential_1(v3 - 136);

LABEL_14:
          v6 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage;
          v0 = v8;
          goto LABEL_3;
        }
        v9 = v4;
        __swift_destroy_boxed_opaque_existential_1(v3 - 176);
        __swift_destroy_boxed_opaque_existential_1(v3 - 136);

      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1(v3 - 176);
        __swift_destroy_boxed_opaque_existential_1(v3 - 136);
        if (!v9)
        {
          v5 = 1;
          goto LABEL_14;
        }
      }

    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1(v3 - 176);
      __swift_destroy_boxed_opaque_existential_1(v3 - 136);
    }
    v5 = 0;
    goto LABEL_14;
  }

  __swift_destroy_boxed_opaque_existential_1(v1);
  v5 = 0;
  v6 = (uint64_t (*)(_QWORD))type metadata accessor for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage);
LABEL_3:
  outlined destroy of TypesettingConfiguration(v0, v6);
  return v5 & 1;
}

uint64_t type metadata accessor for LocalizedStringKey.FormatArgument(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LocalizedStringKey.FormatArgument);
}

uint64_t type metadata accessor for LocalizedStringKey.FormatArgument.Storage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LocalizedStringKey.FormatArgument.Storage);
}

uint64_t associated type witness table accessor for StringInterpolationProtocol.StringLiteralType : _ExpressibleByBuiltinStringLiteral in LocalizedStringKey.StringInterpolation()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t lazy protocol witness table accessor for type LocalizedStringKey and conformance LocalizedStringKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LocalizedStringKey, &type metadata for LocalizedStringKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LocalizedStringKey, &type metadata for LocalizedStringKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LocalizedStringKey, &type metadata for LocalizedStringKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LocalizedStringKey.StringInterpolation, &type metadata for LocalizedStringKey.StringInterpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in LocalizedStringKey()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in LocalizedStringKey()
{
  return MEMORY[0x24BEE0D88];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int()
{
  return MEMORY[0x24BEE4060];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int8()
{
  return MEMORY[0x24BEE3FF0];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt()
{
  return MEMORY[0x24BEE45B8];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt8()
{
  return MEMORY[0x24BEE4558];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Float()
{
  return MEMORY[0x24BEE1568];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Double()
{
  return MEMORY[0x24BEE1448];
}

unint64_t instantiation function for generic protocol witness table for CGFloat(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for LocalizedStringKey()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LocalizedStringKey()
{
  return &type metadata for LocalizedStringKey;
}

uint64_t initializeBufferWithCopyOfBuffer for LocalizedStringKey.FormatArgument(uint64_t *a1, uint64_t *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0) - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_234CEA4B4 + 4 * byte_235297A58[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void destroy for LocalizedStringKey.FormatArgument(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1(a1);

      break;
    case 1u:
      outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
      break;
    case 2u:
      v2 = type metadata accessor for AttributedString();
      goto LABEL_6;
    case 3u:
      v2 = type metadata accessor for LocalizedStringResource();
LABEL_6:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    default:
      return;
  }
}

void initializeWithCopy for LocalizedStringKey.FormatArgument()
{
  char *v0;

  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  v0 = (char *)sub_234CEA6CC + 4 * byte_235297A60[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234CEA6CC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  void *v3;
  id v4;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(v0 + 24) = v2;
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(v0, v1);
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v0 + 40) = v3;
  v4 = v3;
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for LocalizedStringKey.FormatArgument(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of TypesettingConfiguration(result, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
    v2 = (char *)&loc_234CEA824 + 4 * byte_235297A64[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *initializeWithTake for LocalizedStringKey.FormatArgument(void *a1, const void *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v6 = type metadata accessor for AttributedString();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for LocalizedStringKey.FormatArgument(void *a1, const void *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v6 = type metadata accessor for AttributedString();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalizedStringKey.FormatArgument()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234CEAAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LocalizedStringKey.FormatArgument()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234CEAB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for LocalizedStringKey.FormatArgument()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for LocalizedStringKey.StringInterpolation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LocalizedStringKey.StringInterpolation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LocalizedStringKey.StringInterpolation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for LocalizedStringKey.StringInterpolation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalizedStringKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalizedStringKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return &type metadata for LocalizedStringKey.StringInterpolation;
}

uint64_t dispatch thunk of _FormatSpecifiable._arg.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _FormatSpecifiable._specifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t initializeBufferWithCopyOfBuffer for LocalizedStringKey.FormatArgument.Storage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_234CEADEC + 4 * byte_235297A68[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void destroy for LocalizedStringKey.FormatArgument.Storage(uint64_t a1)
{
  uint64_t v2;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1(a1);

      break;
    case 1u:
      outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
      break;
    case 2u:
      v2 = type metadata accessor for AttributedString();
      goto LABEL_6;
    case 3u:
      v2 = type metadata accessor for LocalizedStringResource();
LABEL_6:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    default:
      return;
  }
}

void initializeWithCopy for LocalizedStringKey.FormatArgument.Storage()
{
  char *v0;

  v0 = (char *)sub_234CEAFEC + 4 * byte_235297A70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234CEAFEC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  void *v3;
  id v4;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(v0 + 24) = v2;
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(v0, v1);
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v0 + 40) = v3;
  v4 = v3;
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for LocalizedStringKey.FormatArgument.Storage(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of TypesettingConfiguration(result, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    v2 = (char *)&loc_234CEB13C + 4 * byte_235297A74[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *initializeWithTake for LocalizedStringKey.FormatArgument.Storage(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v8 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for AttributedString();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for LocalizedStringKey.FormatArgument.Storage(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v8 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for AttributedString();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for LocalizedStringKey.FormatArgument.Storage()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for LocalizedStringResource();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCC078], MEMORY[0x24BDCC088]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCC090], MEMORY[0x24BDCC0A0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute);
  }
  return result;
}

void type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>))
  {
    type metadata accessor for Date?(255, &lazy cache variable for type metadata for NSInlinePresentationIntent?, type metadata accessor for NSInlinePresentationIntent);
    type metadata accessor for Date?(255, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    type metadata accessor for Range<AttributedString.Index>(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
  }
}

void type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
    v7 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
    v10[0] = MEMORY[0x24BDCC088];
    v10[1] = MEMORY[0x24BDCC0A0];
    v10[2] = v6;
    v10[3] = v7;
    v8 = a3(a1, v10);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v3 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  MEMORY[0x24BDAC7A8](v6);
  v18 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - v10;
  result = MEMORY[0x24BEE4AF8];
  v19 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(a1 + 16))
  {
    v13 = *(unsigned __int8 *)(v9 + 80);
    v15 = v1;
    v16 = (v13 + 32) & ~v13;
    v17 = v3;
    outlined init with copy of TypesettingLanguage(a1 + v16, (uint64_t)&v15 - v10, type metadata accessor for LocalizedStringKey.FormatArgument);
    outlined init with copy of TypesettingLanguage((uint64_t)v11, (uint64_t)v5, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    v14 = (char *)&loc_234CEB7B0 + 4 * byte_235297A78[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  return result;
}

uint64_t specialized LocalizedStringKey.getTextArguments()()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x24BDAC7A8](v25);
  v1 = (char *)v21 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Int, LocalizedStringKey.FormatArgument)();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_QWORD *)((char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = swift_bridgeObjectRetain();
  v10 = specialized _ArrayProtocol.filter(_:)(v9);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v26 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = v26;
    v13 = v10 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v21[1] = v10;
    v22 = v14;
    while (1)
    {
      outlined init with copy of TypesettingLanguage(v13, (uint64_t)v5, type metadata accessor for LocalizedStringKey.FormatArgument);
      outlined init with copy of TypesettingLanguage((uint64_t)v5, (uint64_t)v1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      if (swift_getEnumCaseMultiPayload() != 1)
        break;
      v15 = (uint64_t)v8 + *(int *)(v24 + 48);
      v16 = *((_QWORD *)v1 + 4);
      outlined consume of Text.Storage(*(_QWORD *)v1, *((_QWORD *)v1 + 1), v1[16]);
      swift_bridgeObjectRelease();
      *v8 = v16;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v5, v15, type metadata accessor for LocalizedStringKey.FormatArgument);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v26 = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v26;
      }
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v12 = v26;
      }
      *(_QWORD *)(v12 + 16) = v19 + 1;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v8, v12+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v19, (uint64_t (*)(_QWORD))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
      v13 += v22;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    result = outlined destroy of TypesettingConfiguration((uint64_t)v1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

void specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a7, void (*a8)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *), uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t (*v33)(uint64_t);
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String_optional v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  Swift::String_optional v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t (**v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)@<X0>(uint64_t@<X8>);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t (**v75)@<X0>(uint64_t@<X8>);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _QWORD v84[2];
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (**v92)();
  uint64_t (**v93)@<X0>(uint64_t@<X8>);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *);
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  void (*v114)(uint64_t, uint64_t, unint64_t, unint64_t);
  uint64_t v115;
  char *v116;
  _QWORD v117[2];
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;

  v97 = a8;
  v114 = a6;
  v115 = a7;
  v110 = a1;
  v111 = a2;
  v120 = *MEMORY[0x24BDAC8D0];
  v94 = type metadata accessor for EnvironmentValues.Key.Value();
  MEMORY[0x24BDAC7A8](v94);
  v90 = (uint64_t)v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v93 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v84 - v13);
  MEMORY[0x24BDAC7A8](v14);
  v89 = (uint64_t)v84 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v92 = (uint64_t (**)())((char *)v84 - v17);
  v108 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x24BDAC7A8](v108);
  v107 = (uint64_t)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v106 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v105 = (uint64_t)v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v109 = (uint64_t)v84 - v22;
  v23 = type metadata accessor for NSScanner.NumberRepresentation();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for CharacterSet();
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x24BDAC7A8](v101);
  v116 = (char *)v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = *a3;
  v99 = a3[1];
  if (*(_QWORD *)(a5 + 16))
  {
    type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>();
    v28 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v28 = MEMORY[0x24BEE4B00];
  }
  v118 = v28;
  swift_bridgeObjectRetain_n();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a5, 1, &v118);
  v96 = 0;
  v95 = a9;
  swift_bridgeObjectRelease();
  v112 = v118;
  v29 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v30 = v111;
  swift_bridgeObjectRetain();
  v31 = (void *)MEMORY[0x23B7C5DAC](v110, v30);
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v29, sel_initWithString_, v31);

  objc_msgSend(v32, sel_setCharactersToBeSkipped_, 0);
  v118 = 0;
  v119 = 0xE000000000000000;
  Character.write<A>(to:)();
  CharacterSet.init(charactersIn:)();
  swift_bridgeObjectRelease();
  v113 = *MEMORY[0x24BDD0458];
  v33 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage;
  v104 = v24;
  v103 = v23;
  do
  {
    v36 = v33;
    v37 = NSScanner.currentIndex.getter();
    v38 = NSScanner.scanUpToCharacters(from:)();
    if (v39)
    {
      v40 = v38;
      v41 = v39;
      v42 = NSScanner.currentIndex.getter();
      if (v42 >> 14 < v37 >> 14)
      {
        __break(1u);
LABEL_40:
        __break(1u);
      }
      v114(v40, v41, v37, v42);
      swift_bridgeObjectRelease();
    }
    v43 = NSScanner.currentIndex.getter();
    v44 = NSScanner.scanCharacter()();
    if (!v44.value._object)
      goto LABEL_7;
    if (v44.value._countAndFlagsBits == 12369903 && v44.value._object == (void *)0xA300000000000000)
    {
      swift_bridgeObjectRelease();
      v33 = v36;
    }
    else
    {
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v33 = v36;
      if ((v45 & 1) == 0)
        continue;
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, v113, v23);
    v46 = NSScanner.scanInt(representation:)();
    v48 = v47;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    if ((v48 & 1) == 0)
    {
      v49 = NSScanner.scanCharacter()();
      if (v49.value._object)
      {
        if (v49.value._countAndFlagsBits == 12369903 && v49.value._object == (void *)0xA300000000000000)
        {
          v34 = swift_bridgeObjectRelease();
        }
        else
        {
          v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v34 = swift_bridgeObjectRelease();
          if ((v50 & 1) == 0)
            goto LABEL_7;
        }
        if (!*(_QWORD *)(v112 + 16))
          goto LABEL_6;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
        if ((v51 & 1) == 0)
          goto LABEL_6;
        v52 = v105;
        outlined init with copy of TypesettingLanguage(*(_QWORD *)(v112 + 56) + *(_QWORD *)(v106 + 72) * v34, v105, type metadata accessor for LocalizedStringKey.FormatArgument);
        v53 = v109;
        outlined init with take of LocalizedStringKey.FormatArgument(v52, v109, type metadata accessor for LocalizedStringKey.FormatArgument);
        v54 = v107;
        outlined init with copy of TypesettingLanguage(v53, v107, v36);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          outlined destroy of TypesettingConfiguration(v53, type metadata accessor for LocalizedStringKey.FormatArgument);
          v34 = outlined destroy of TypesettingConfiguration(v54, v36);
          v24 = v104;
          v23 = v103;
LABEL_6:
          MEMORY[0x24BDAC7A8](v34);
          v35 = v111;
          v84[-4] = v110;
          v84[-3] = v35;
          v84[-2] = v46;
          specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:));
LABEL_7:
          v33 = v36;
          continue;
        }
        v55 = *(_QWORD *)v54;
        v56 = *(_QWORD *)(v54 + 8);
        v57 = *(unsigned __int8 *)(v54 + 16);
        v58 = *(_QWORD *)(v54 + 24);
        v59 = NSScanner.currentIndex.getter();
        if (v59 >> 14 < v43 >> 14)
          goto LABEL_40;
        v86 = v57;
        v87 = v56;
        v88 = v55;
        v98 = v58;
        v60 = v59;
        v118 = v102;
        v119 = v99;
        swift_retain();
        swift_retain();
        v91 = v60;
        String.subscript.getter();
        v61 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v61 == String.count.getter())
        {
          v62 = v119;
        }
        else
        {
          if (!(v43 >> 14))
          {
            v63 = swift_allocObject();
            v64 = v99;
            *(_QWORD *)(v63 + 16) = v102;
            *(_QWORD *)(v63 + 24) = v64;
            v65 = v92;
            *v92 = partial apply for closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:);
            v65[1] = (uint64_t (*)())v63;
            swift_storeEnumTagMultiPayload();
            v66 = v118;
            v67 = (uint64_t)v65;
            v68 = v89;
            outlined init with copy of TypesettingLanguage(v67, v89, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
            swift_retain_n();
            swift_retain();
            swift_retain();
            v84[1] = v63;
            swift_retain();
            v69 = v96;
            specialized closure #1 in PropertyList.subscript.setter(&v118, v68);
            v96 = v69;
            v85 = v66;
            swift_release();
            outlined destroy of TypesettingConfiguration(v68, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
            v62 = v119;
            v24 = v104;
            if (v119)
            {
              v70 = v118;
              swift_retain();
              swift_retain();
              specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v85, v70);
              swift_release();
              swift_release();
            }
            swift_release();
            outlined destroy of TypesettingConfiguration((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
            swift_release();
            goto LABEL_37;
          }
          v71 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
          v72 = v111;
          *((_QWORD *)v71 + 2) = v110;
          *((_QWORD *)v71 + 3) = v72;
          v73 = v91;
          *((_QWORD *)v71 + 4) = v43;
          *((_QWORD *)v71 + 5) = v73;
          v74 = v99;
          *((_QWORD *)v71 + 6) = v102;
          *((_QWORD *)v71 + 7) = v74;
          v75 = v93;
          *v93 = partial apply for closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:);
          v75[1] = v71;
          swift_storeEnumTagMultiPayload();
          v76 = v118;
          v77 = v90;
          outlined init with copy of TypesettingLanguage((uint64_t)v75, v90, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
          swift_retain_n();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          v78 = v96;
          specialized closure #1 in PropertyList.subscript.setter(&v118, v77);
          v96 = v78;
          swift_release();
          outlined destroy of TypesettingConfiguration(v77, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
          v62 = v119;
          if (v119)
          {
            v79 = v118;
            swift_retain();
            swift_retain();
            specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v76, v79);
            swift_release();
            swift_release();
          }
          swift_release();
          outlined destroy of TypesettingConfiguration((uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
          swift_release();
        }
        v24 = v104;
LABEL_37:
        v80 = v91;
        v85 = v62;
        v91 = v118;
        v117[0] = v118;
        v117[1] = v62;
        swift_retain();
        swift_retain();
        v81 = v88;
        v82 = v87;
        v83 = v86;
        v97(v88, v87, v86, v98, v43, v80, v117);
        outlined consume of Text.Storage(v81, v82, v83);
        swift_release_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        outlined destroy of TypesettingConfiguration(v109, type metadata accessor for LocalizedStringKey.FormatArgument);
        v33 = v36;
        v23 = v103;
      }
    }
  }
  while (!objc_msgSend(v32, sel_isAtEnd));
  (*(void (**)(char *, uint64_t))(v100 + 8))(v116, v101);
  swift_release();

}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[17];
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = specialized LocalizedStringKey.getTextArguments()();
  if (*(_QWORD *)(v16 + 16))
  {
    v17 = objc_msgSend(a1, sel_string);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v19;
    v27 = v18;

    v29 = v13;
    v30 = v14;
    v28 = v15;
    MEMORY[0x24BDAC7A8](v20);
    v24[10] = a7;
    v24[11] = a8;
    v24[12] = a1;
    v24[13] = a2;
    v24[14] = v13;
    v24[15] = v14;
    v24[16] = v15;
    v25 = a5 & 1;
    MEMORY[0x24BDAC7A8](v21);
    v24[2] = a7;
    v24[3] = a8;
    v24[4] = a1;
    v24[5] = a2;
    v24[6] = v15;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(v27, v26, &v29, (uint64_t)&v28, v16, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v22, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *))partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v24);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = v13;
    v30 = v14;
    v28 = v15;
    return (*(uint64_t (**)(void *, uint64_t *, uint64_t *, _QWORD, uint64_t, uint64_t))(a8 + 48))(a1, &v29, &v28, a5 & 1, a7, a8);
  }
}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  _QWORD v23[14];
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;

  v15 = *a4;
  v14 = a4[1];
  v16 = *a5;
  v17 = specialized LocalizedStringKey.getTextArguments()();
  v18 = v17;
  if (*(_QWORD *)(v17 + 16))
  {
    v25 = (uint64_t)&v25;
    v28 = v15;
    v29 = v14;
    v27[0] = v16;
    MEMORY[0x24BDAC7A8](v17);
    v23[8] = a8;
    v23[9] = a9;
    v23[10] = a3;
    v23[11] = v15;
    v23[12] = v14;
    v23[13] = v16;
    v24 = a6 & 1;
    MEMORY[0x24BDAC7A8](v19);
    v23[2] = a8;
    v23[3] = a9;
    v23[4] = a3;
    v23[5] = v16;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(a1, a2, &v28, (uint64_t)v27, v18, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v20, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *))partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v23);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = a1;
    v29 = a2;
    v27[0] = v15;
    v27[1] = v14;
    v26 = v16;
    v22 = lazy protocol witness table accessor for type String and conformance String();
    return ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v28, v27, &v26, a8, MEMORY[0x24BEE0D00], a9, v22);
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh114V15resolvesToEmpty2in7options5table6bundleSbAA17EnvironmentValuesV_AA4TextV14ResolveOptionsVSSSgSo8NSBundleCSgtFs7kl6_pAC14iJ6VXEfU_AF0uV0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  __int128 v15[2];
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v16;
    v8 = *(_QWORD *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    do
    {
      v14[0] = a2;
      v14[1] = a3;
      LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v15, v14);
      v16 = v4;
      v12 = *(_QWORD *)(v4 + 16);
      v11 = *(_QWORD *)(v4 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v12 + 1;
      outlined init with take of ScrollStateRequest(v15, v4 + 40 * v12 + 32);
      v9 += v10;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for CAPresentationModifier(255, a2);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE5BE8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE **)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4)
{
  uint64_t v4;

  closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3, a4, *(id *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_BYTE *)(v4 + 72), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, int a5, int a6, uint64_t *a7)
{
  uint64_t v7;

  return closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3 & 1, a4, a5, a6, a7, *(id *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
}

void type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>)
  {
    type metadata accessor for LocalizedStringKey.FormatArgument(255);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>);
  }
}

uint64_t partial apply for implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)()
{
  uint64_t v0;

  return implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_234CECBA0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(v1[2], v1[3], v1[6], v1[7], a1);
}

uint64_t sub_234CECBE4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)()
{
  uint64_t v0;

  return closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x24BEE0B58], MEMORY[0x24BEE0B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE1BC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  LOBYTE(v4) = *(_BYTE *)(v2 + 80);
  return closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE **)(v2 + 48), *(void **)(v2 + 56), a2, *(_QWORD *)(v2 + 72), v4, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

void type metadata accessor for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>)
  {
    type metadata accessor for AttributeScopes.FoundationAttributes();
    v0 = type metadata accessor for ScopedAttributeContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>);
  }
}

uint64_t sub_234CECD28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  AttributeScopes.foundation.getter();
  result = type metadata accessor for AttributeScopes.FoundationAttributes();
  *a1 = result;
  return result;
}

void sub_234CECD54()
{
  AttributeScopes.FoundationAttributes.morphology.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCBF48], MEMORY[0x24BDCBF58]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh61V25getArgumentsForInflection3for2in5idiom4with9includingSays7kl150_pG9arguments_Sb19isUniqueSizeVarianttSo012NSAttributedD0C_AA17EnvironmentValuesVAA17AnyInterfaceIdiomVSgAA4TextV14ResolveOptionsVAV5StyleVtFsAJ_pAC14iJ19VXEfU_sAJ_pA0_XEfU_AF17EnvironmentValuesVAF17AnyInterfaceIdiomVSgSbTf1cn_nTf4ngdn_n(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v17[2];
  __int128 v18[2];
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v19 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v19;
    v9 = *(_QWORD *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    do
    {
      v17[0] = a2;
      v17[1] = a3;
      LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v18, v17);
      *a4 = (*a4 | v12) & 1;
      v19 = v5;
      v14 = *(_QWORD *)(v5 + 16);
      v13 = *(_QWORD *)(v5 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v5 = v19;
      }
      *(_QWORD *)(v5 + 16) = v14 + 1;
      outlined init with take of ScrollStateRequest(v18, v5 + 40 * v14 + 32);
      v10 += v11;
      --v4;
    }
    while (v4);
  }
  return v5;
}

uint64_t partial apply for closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)()
{
  return closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)();
}

_QWORD *outlined release of Text.ResolvedProperties(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;

  v2 = (void *)a1[7];
  v3 = a1[8];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v9 = (void *)a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, __int128 *, uint64_t *, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(unsigned __int8 *)(v2 + 64);
  v12[0] = a1;
  v12[1] = a2;
  v11 = *(_OWORD *)(v2 + 40);
  v10 = v5;
  v7 = *(uint64_t (**)(_QWORD *, __int128 *, uint64_t *, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t))(v4 + 40);
  v8 = lazy protocol witness table accessor for type String and conformance String();
  return v7(v12, &v11, &v10, v6, MEMORY[0x24BEE0D00], v8, v3, v4);
}

uint64_t partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v10 = v7[2];
  v11 = v7[3];
  v12 = v7[4];
  v13 = v7[5];
  v16 = *a7;
  v15 = v13;
  return Text.resolve<A>(into:in:with:)(v12, (uint64_t *)&v16, &v15, a1, a2, a3 & 1, a4, v10, v11);
}

void type metadata accessor for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage))
  {
    type metadata accessor for LocalizedStringKey.FormatArgument.Storage(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage));
  }
}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[13];
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v12 = specialized LocalizedStringKey.getTextArguments()();
  if (*(_QWORD *)(v12 + 16))
  {
    v13 = objc_msgSend(a1, sel_string);
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

    v24 = a3;
    v25 = a4;
    v23 = a5;
    MEMORY[0x24BDAC7A8](v17);
    v21[8] = a1;
    v21[9] = a2;
    v21[10] = a3;
    v21[11] = a4;
    v21[12] = a5;
    v22 = a6 & 1;
    MEMORY[0x24BDAC7A8](v18);
    v21[2] = a1;
    v21[3] = a2;
    v21[4] = a5;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(v14, v16, &v24, (uint64_t)&v23, v12, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v19, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *))partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v21);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = a3;
    v25 = a4;
    return specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(a1, &v24);
  }
}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[10];
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v14 = specialized LocalizedStringKey.getTextArguments()();
  v15 = v14;
  if (*(_QWORD *)(v14 + 16))
  {
    v38 = a4;
    v39 = a5;
    v37 = a6;
    MEMORY[0x24BDAC7A8](v14);
    v35[6] = a3;
    v35[7] = a4;
    v35[8] = a5;
    v35[9] = a6;
    v36 = a7 & 1;
    MEMORY[0x24BDAC7A8](v16);
    v35[2] = a3;
    v35[3] = a6;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(a1, a2, &v38, (uint64_t)&v37, v15, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v17, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *))partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v35);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a5)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(a4, &v38);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v19);
    v20 = swift_retain_n();
    specialized find1<A>(_:key:filter:)(v20, v38);
  }
  swift_release_n();
  v38 = a1;
  v39 = a2;
  swift_bridgeObjectRetain();
  v21 = String.init<A>(_:)();
  v38 = a4;
  v39 = a5;
  v23 = String.caseConvertedIfNeeded(_:)(&v38, v21, v22);
  v25 = v24;
  swift_bridgeObjectRelease();
  if (!a5)
  {
    v38 = a4;
    v39 = 0;
    swift_retain();
    v34 = specialized static ShouldRedactContentKey.value(in:)(&v38, v31, v32, v33);
    swift_release();
    if ((v34 & 1) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  swift_retain_n();
  swift_retain_n();
  v26 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a4);
  swift_release_n();
  swift_release_n();
  if ((v26 & 1) != 0)
  {
LABEL_8:
    v27 = String.count.getter();
    v23 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v27);
    v29 = v28;
    swift_bridgeObjectRelease();
    v25 = v29;
  }
LABEL_9:
  type metadata accessor for Text.ResolvedString(0);
  v30._countAndFlagsBits = v23;
  v30._object = v25;
  String.append(_:)(v30);
  return swift_bridgeObjectRelease();
}

void partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4)
{
  uint64_t v4;

  specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3, a4, *(id *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, int a5, int a6, uint64_t *a7)
{
  uint64_t v7;

  return specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3 & 1, a4, a5, a6, *a7, a7[1], *(id *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32));
}

uint64_t partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;

  return specialized Text.resolve<A>(into:in:with:)(*(_QWORD *)(v7 + 16), *a7, a7[1], *(_QWORD *)(v7 + 24), a1, a2, a3 & 1, a4);
}

ValueMetadata *type metadata accessor for LocalizedStringKey.FormatArgument.Token()
{
  return &type metadata for LocalizedStringKey.FormatArgument.Token;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in LocalizedStringKey.FormatArgument.Token()
{
  return MEMORY[0x24BEE1778];
}

unint64_t lazy protocol witness table accessor for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LocalizedStringKey.FormatArgument.Token, &type metadata for LocalizedStringKey.FormatArgument.Token);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token);
  }
  return result;
}

id PlatformTextRepresentableContext.text.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void PlatformTextRepresentableContext.text.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*PlatformTextRepresentableContext.text.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformTextRepresentationOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::PlatformTextRepresentationOptions __swiftcall PlatformTextRepresentationOptions.init(rawValue:)(SwiftUI::PlatformTextRepresentationOptions rawValue)
{
  SwiftUI::PlatformTextRepresentationOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static PlatformTextRepresentationOptions.includeStyledText.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _ViewInputs.requestedTextRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.requestedTextRepresentation : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.requestedTextRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.requestedTextRepresentation : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _ViewInputs.requestedTextRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t _GraphInputs.requestedTextRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.requestedTextRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.requestedTextRepresentation.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedTextRepresentation.modify;
}

void _ViewInputs.requestedTextRepresentation.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

uint64_t key path getter for _GraphInputs.requestedTextRepresentation : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.requestedTextRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.requestedTextRepresentation.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedTextRepresentation.modify;
}

unint64_t lazy protocol witness table accessor for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PlatformTextRepresentationOptions, &type metadata for PlatformTextRepresentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PlatformTextRepresentationOptions, &type metadata for PlatformTextRepresentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PlatformTextRepresentationOptions, &type metadata for PlatformTextRepresentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PlatformTextRepresentationOptions, &type metadata for PlatformTextRepresentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

uint64_t dispatch thunk of static PlatformTextRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformTextRepresentable.representationOptions(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static PlatformTextRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

void **initializeBufferWithCopyOfBuffer for PlatformTextRepresentableContext(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for PlatformTextRepresentableContext(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for PlatformTextRepresentableContext(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for PlatformTextRepresentableContext()
{
  return &type metadata for PlatformTextRepresentableContext;
}

ValueMetadata *type metadata accessor for PlatformTextRepresentationOptions()
{
  return &type metadata for PlatformTextRepresentationOptions;
}

ValueMetadata *type metadata accessor for _GraphInputs.TextRepresentationKey()
{
  return &type metadata for _GraphInputs.TextRepresentationKey;
}

uint64_t static EnabledTextSelectability.allowsSelection.getter()
{
  return 1;
}

uint64_t static DisabledTextSelectability.allowsSelection.getter()
{
  return 0;
}

uint64_t static TextAllowsSelection.defaultValue.getter()
{
  return 0;
}

uint64_t _ViewInputs.textSelectionRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.textSelectionRepresentation : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.textSelectionRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.textSelectionRepresentation : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _ViewInputs.textSelectionRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t _GraphInputs.textSelectionRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(_QWORD *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.textSelectionRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.textSelectionRepresentation.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textSelectionRepresentation.modify;
}

void _ViewInputs.textSelectionRepresentation.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

uint64_t key path getter for _GraphInputs.textSelectionRepresentation : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.textSelectionRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.textSelectionRepresentation.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textSelectionRepresentation.modify;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in TextSelectionForbidden()
{
  return &protocol witness table for TextSelectionForbidden;
}

uint64_t dispatch thunk of static TextSelectability.allowsSelection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for EnabledTextSelectability()
{
  return &type metadata for EnabledTextSelectability;
}

ValueMetadata *type metadata accessor for DisabledTextSelectability()
{
  return &type metadata for DisabledTextSelectability;
}

ValueMetadata *type metadata accessor for TextAllowsSelection()
{
  return &type metadata for TextAllowsSelection;
}

ValueMetadata *type metadata accessor for TextSelectionForbidden()
{
  return &type metadata for TextSelectionForbidden;
}

uint64_t dispatch thunk of static PlatformTextSelectionRepresentation.makeSelectableText(resolvedText:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for _GraphInputs.TextSelectionRepresentationKey()
{
  return &type metadata for _GraphInputs.TextSelectionRepresentationKey;
}

uint64_t LocalizedStringResource.isStyled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t *);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - v10;
  v12 = type metadata accessor for AttributedString();
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = 0;
  v27 = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v15 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v16 = static CoreGlue2.shared;
  v15(&v26);

  v18 = v26;
  v17 = v27;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v19(v11, v1, v5);
  if (v17)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v18, (uint64_t)v4);
  }
  else
  {
    v20 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v20, (uint64_t)v4);
  }
  swift_release_n();
  swift_release_n();
  LocalizedStringResource.locale.setter();
  v19(v8, (uint64_t)v11, v5);
  AttributedString.init(localized:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  swift_release();
  swift_release();
  v21 = AttributedString.isStyled.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  return v21 & 1;
}

uint64_t LocalizedStringResource.resolve(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v18;
  _BYTE v20[16];

  v2 = v1;
  v4 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for LocalizedStringResource();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v20[-v13];
  v16 = *a1;
  v15 = a1[1];
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v8 + 16);
  v17(&v20[-v13], v2, v7, v12);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v6);
  }
  else
  {
    v18 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v6);
  }
  swift_release_n();
  swift_release_n();
  LocalizedStringResource.locale.setter();
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v17)(v10, v14, v7);
  AttributedString.init(localized:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v14, v7);
}

uint64_t Text.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for LocalizedStringResourceStorage();
  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
  v4 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

{
  uint64_t result;

  type metadata accessor for AttachmentTextStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v18[-v7];
  v9 = type metadata accessor for DateInterval();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v3 + 16);
  v14(v8, a1, v2, v11);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(_BYTE *, uint64_t, uint64_t))v14)(v5, a1 + *(int *)(v15 + 36), v2);
  DateInterval.init(start:end:)();
  outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  type metadata accessor for DateTextStorage(0);
  v16 = swift_allocObject();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(v16 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, v13, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v16;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for DateTextStorage(0);
  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for AttributedStringTextStorage(0);
  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

uint64_t type metadata accessor for LocalizedStringResourceStorage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LocalizedStringResourceStorage;
  if (!type metadata singleton initialization cache for LocalizedStringResourceStorage)
    return swift_getSingletonMetadata();
  return result;
}

void LocalizedStringResourceStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = type metadata accessor for AttributedString();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a2;
  v12 = a2[1];
  v14 = *a3;
  type metadata accessor for NSAttributedString();
  v18 = v13;
  v19 = v12;
  LocalizedStringResource.resolve(in:)(&v18);
  v15 = NSAttributedString.init(swiftUIAttributedString:)((uint64_t)v11);
  v18 = v13;
  v19 = v12;
  v17 = v14;
  ResolvedTextContainer.append(_:in:with:)((uint64_t)v15, &v18, &v17, a4, a5);

}

uint64_t LocalizedStringResourceStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
    v3 = result + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
    swift_retain();
    LOBYTE(v2) = MEMORY[0x23B7C4714](v2, v3);
    swift_release();
    return v2 & 1;
  }
  return result;
}

uint64_t LocalizedStringResourceStorage.isStyled(options:)()
{
  return LocalizedStringResource.isStyled.getter() & 1;
}

uint64_t LocalizedStringResourceStorage.localizationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;

  v2 = type metadata accessor for LocalizedStringResource.BundleDescription();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = LocalizedStringResource.key.getter();
  v8 = v7;
  v9 = LocalizedStringResource.table.getter();
  v11 = v10;
  LocalizedStringResource.bundle.getter();
  v12 = LocalizedStringResource.BundleDescription.swiftUI_resolvedBundle.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = 64;
  return result;
}

id LocalizedStringResource.BundleDescription.swiftUI_resolvedBundle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t ObjCClassFromMetadata;
  id v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource.BundleDescription();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v1, v6, v8);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == *MEMORY[0x24BDCD338])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v13 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    return v13;
  }
  if (v11 != *MEMORY[0x24BDCD330])
  {
    if (v11 != *MEMORY[0x24BDCD328])
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      return 0;
    }
    v13 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    return v13;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
  v14 = objc_allocWithZone(MEMORY[0x24BDD1488]);
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v18 = objc_msgSend(v14, sel_initWithURL_, v16);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v18;
}

uint64_t LocalizedStringResourceStorage.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
  v2 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t LocalizedStringResourceStorage.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
  v2 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t outlined init with take of LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ObjC metadata update function for LocalizedStringResourceStorage()
{
  return type metadata accessor for LocalizedStringResourceStorage();
}

uint64_t type metadata completion function for LocalizedStringResourceStorage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void *Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)(uint64_t *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;

  v44 = a8;
  v42 = a7;
  v41 = a5;
  v13 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for Text.Resolved(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v20 = a1[1];
  v43 = *a3;
  v22 = *a4;
  v21 = a4[1];
  Text.Style.init()((uint64_t)v18);
  v23 = v16[5];
  *(_QWORD *)&v18[v23] = 0;
  v24 = v16[6];
  v25 = &v18[v16[7]];
  v26 = v16[8];
  v27 = a6;
  v28 = &v18[v26];
  *((_WORD *)v28 + 16) = 0;
  *(_OWORD *)v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  v29 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v28 + 5) = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v28 + 6) = v29;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 72) = 0u;
  *((_QWORD *)v28 + 11) = 0;
  *((_OWORD *)v28 + 6) = xmmword_235260F00;
  *((_QWORD *)v28 + 15) = 0;
  *((_QWORD *)v28 + 16) = 0;
  *((_QWORD *)v28 + 14) = v29;
  v18[v24] = a2;
  *(_QWORD *)v25 = v22;
  *((_QWORD *)v25 + 1) = v21;
  v30 = v42;
  v31 = v41;
  swift_retain();
  v32 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v32, v20, (uint64_t)v15);
  swift_release();
  swift_release();
  if ((v30 & 1) != 0)
  {
    v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 112);
    v34 = swift_retain();
    LOBYTE(v33) = v33(v34);
    outlined consume of Text.Storage(v31, v27, 1);
    if ((v33 & 1) == 0)
    {
      if (one-time initialization token for automatic != -1)
        swift_once();
      v35 = type metadata accessor for TypesettingLanguage(0);
      v36 = __swift_project_value_buffer(v35, (uint64_t)static TypesettingLanguage.automatic);
      outlined assign with copy of TypesettingLanguage(v36, (uint64_t)v15, type metadata accessor for TypesettingLanguage);
    }
  }
  v37 = type metadata accessor for Text.Style(0);
  outlined assign with copy of TypesettingLanguage((uint64_t)v15, (uint64_t)&v18[*(int *)(v37 + 84)], (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  specialized Text.resolve<A>(into:in:with:)((uint64_t)v18, v19, v20, v43, v31, v27, v30 & 1, v44);
  v38 = *(void **)&v18[v23];
  if (v38)
  {
    v39 = v38;
    NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)v45);

  }
  else
  {
    v46 = 0;
    memset(v45, 0, sizeof(v45));
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v45, &lazy cache variable for type metadata for TimelineSchedule?, (void (*)(uint64_t))type metadata accessor for TimelineSchedule);
  outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  outlined destroy of TypesettingConfiguration((uint64_t)v18, type metadata accessor for Text.Resolved);
  return v38;
}

uint64_t NSMutableAttributedString.resolveAttributes(in:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = type metadata accessor for ResolvableStringResolutionContext();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  v6 = static NSAttributedStringKey.resolvableTextSegment;
  v7 = objc_msgSend(v1, sel_length);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:);
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_8;
  v11 = _Block_copy(aBlock);
  v12 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateAttribute_inRange_options_usingBlock_, v6, 0, v7, 2, v11);
  _Block_release(v11);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t *NSAttributedStringKey._textScale.unsafeMutableAddressor()
{
  if (one-time initialization token for _textScale != -1)
    swift_once();
  return &static NSAttributedStringKey._textScale;
}

uint64_t NSAttributedString.maxFontMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unsigned int v11;
  char v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  uint64_t aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  double v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v38 = 0;
  v39 = 0;
  v37 = 0.0;
  v35 = 0.0;
  v36 = 1;
  v33 = 0u;
  v34 = 0u;
  v4 = objc_msgSend(v1, sel_string);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  aBlock = v5;
  v28 = v7;
  if (one-time initialization token for oversizedScalars != -1)
    swift_once();
  v8 = type metadata accessor for CharacterSet();
  __swift_project_value_buffer(v8, (uint64_t)static NSAttributedString.oversizedScalars);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  if (one-time initialization token for introduced != -1)
    swift_once();
  v11 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    v12 = dyld_program_sdk_at_least();
  else
    v12 = static Semantics.forced >= v11;
  v13 = v10 & 1;
  if (one-time initialization token for kitFont != -1)
    swift_once();
  v14 = static NSAttributedStringKey.kitFont;
  v15 = objc_msgSend(v2, sel_length);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = &v39;
  *(_QWORD *)(v16 + 24) = &v38;
  *(_QWORD *)(v16 + 32) = &v37;
  *(_QWORD *)(v16 + 40) = &v35;
  *(_BYTE *)(v16 + 48) = v13 ^ 1;
  *(_BYTE *)(v16 + 49) = v12;
  *(_QWORD *)(v16 + 56) = &v33;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #1 in NSAttributedString.maxFontMetrics.getter;
  *(_QWORD *)(v17 + 24) = v16;
  v31 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v32 = v17;
  aBlock = MEMORY[0x24BDAC760];
  v28 = 1107296256;
  v29 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v30 = &block_descriptor_13_0;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_enumerateAttribute_inRange_options_usingBlock_, v14, 0, v15, 0x100000, v18);
  _Block_release(v18);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v22 = v38;
    v21 = v39;
    if (v36)
      v23 = 0.0;
    else
      v23 = v35;
    v24 = -v37;
    v26 = v33;
    v25 = v34;
    result = swift_release();
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(double *)(a1 + 16) = v24;
    *(double *)(a1 + 24) = v23;
    *(_OWORD *)(a1 + 32) = v26;
    *(_OWORD *)(a1 + 48) = v25;
  }
  return result;
}

uint64_t Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  id v57;
  char isUniquelyReferenced_nonNull_native;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  float v73;
  float v74;
  char v75;
  unint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  char v82;
  __int16 v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  char v95;
  __int16 v96;
  double v97;
  void *v98;
  id v99;
  char v100;
  double v101;
  void *v102;
  id v103;
  char v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  char v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  char v124;
  __int16 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  void *v133;
  id v134;
  id v135;
  id v136;
  char v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  char v141;
  __int16 v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  id v157;
  void *v158;
  char v159;
  uint64_t v160;
  char v161;
  unint64_t v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  Swift::Int v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  id v175;
  __CFString *v176;
  char v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  void *v184;
  void *v185;
  int v186;
  id v187;
  id v188;
  char v189;
  char *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  double v194;
  double v195;
  double v196;
  uint64_t v197;
  float (*v198)(__int128 *);
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  double v206;
  double v207;
  double v208;
  double *v209;
  double v210;
  double v211;
  double v212;
  objc_class *v213;
  objc_class *v214;
  id v215;
  void *v216;
  int v217;
  void *v218;
  id v219;
  char v220;
  uint64_t v221;
  double v222;
  id v223;
  id v224;
  void *v225;
  id v226;
  char v227;
  int v228;
  uint64_t v229;
  char v230;
  char v231;
  _QWORD *v232;
  unint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  id v236;
  id v237;
  char v238;
  unint64_t v239;
  void *v240;
  id v241;
  char v242;
  uint64_t v243;
  id v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  id v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  double v254;
  const __CTFont *v255;
  const __CTFont *v256;
  double CapHeight;
  double v258;
  void *v259;
  id v260;
  const __CTFont *v261;
  char v262;
  void *v263;
  id v264;
  char v265;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t (*v273)(uint64_t, uint64_t);
  uint64_t v274;
  char *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  int *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  __int128 v303[2];
  const __CTFont *v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  _QWORD v308[2];

  v7 = v6;
  v287 = a6;
  v283 = a4;
  v273 = (uint64_t (*)(uint64_t, uint64_t))a1;
  v274 = a2;
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
  MEMORY[0x24BDAC7A8](v10);
  v279 = (uint64_t)&v271 - v11;
  v12 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v280 = *(_QWORD *)(v12 - 8);
  v281 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v275 = (char *)&v271 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = type metadata accessor for Locale();
  v14 = *(_QWORD *)(v272 - 8);
  MEMORY[0x24BDAC7A8](v272);
  v271 = (uint64_t)&v271 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x24BDAC7A8](v16);
  v278 = (uint64_t)&v271 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v271 - v19;
  v277 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v277);
  v22 = (char *)&v271 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v271 - v24;
  v27 = *a3;
  v26 = a3[1];
  v284 = *a5;
  v308[0] = MEMORY[0x24BEE4B00];
  v286 = v27;
  if (v26)
  {
    swift_retain_n();
    swift_retain_n();
    v282 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v27);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v290 = (unint64_t)v27;
    swift_retain();
    v282 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v290, v28, v29, v30);
    swift_release();
  }
  v285 = (int *)type metadata accessor for Text.Style(0);
  v31 = *(_QWORD *)(*(_QWORD *)(v7 + v285[24]) + 16);
  v288 = v26;
  if (v31)
  {
    if (v26)
    {
      v32 = v286;
      swift_retain_n();
      swift_retain_n();
      v33 = specialized PropertyList.Tracker.value<A>(_:for:)(v32);
      swift_release_n();
    }
    else
    {
      v37 = swift_retain_n();
      v33 = specialized closure #1 in PropertyList.subscript.getter(v37);
      swift_bridgeObjectRetain();
    }
    v34 = swift_release_n();
    MEMORY[0x24BDAC7A8](v34);
    v270 = v7;
    v36 = (uint64_t)specialized _ArrayProtocol.filter(_:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:), &v268, v33);
  }
  else
  {
    if (v26)
    {
      v35 = v286;
      swift_retain_n();
      swift_retain_n();
      v36 = specialized PropertyList.Tracker.value<A>(_:for:)(v35);
      swift_release_n();
    }
    else
    {
      v253 = swift_retain_n();
      v36 = specialized closure #1 in PropertyList.subscript.getter(v253);
      swift_bridgeObjectRetain();
    }
    swift_release_n();
  }
  *(_QWORD *)&v290 = v36;
  v38 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v38);
  v307 = v290;
  v39 = v287;
  *(_QWORD *)(v287 + 120) = 0;
  v276 = (_QWORD *)(v39 + 120);
  v40 = v285[21];
  v289 = v7;
  v41 = v7 + v40;
  outlined init with copy of TypesettingLanguage(v41, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  if (one-time initialization token for automatic != -1)
    swift_once();
  v42 = __swift_project_value_buffer(v16, (uint64_t)static TypesettingLanguage.automatic);
  outlined init with copy of TypesettingLanguage(v42, (uint64_t)v20, type metadata accessor for TypesettingLanguage);
  v43 = specialized static TypesettingLanguage.Storage.== infix(_:_:)((uint64_t)v25, (uint64_t)v20);
  outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for TypesettingLanguage);
  outlined destroy of TypesettingConfiguration((uint64_t)v25, type metadata accessor for TypesettingLanguage);
  if (v43)
  {
    v44 = v283;
  }
  else
  {
    outlined init with copy of TypesettingLanguage(v41, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v22, v278, type metadata accessor for TypesettingLanguage);
    v44 = v283;
    if (v288)
    {
      v45 = v286;
      swift_retain_n();
      swift_retain_n();
      v46 = v271;
      specialized PropertyList.Tracker.value<A>(_:for:)(v45, v271);
    }
    else
    {
      v47 = swift_retain_n();
      v46 = v271;
      specialized closure #1 in PropertyList.subscript.getter(v47, v271);
    }
    v49 = v273;
    v48 = v274;
    v50 = v272;
    swift_release_n();
    swift_release_n();
    v51 = v48;
    v52 = v278;
    TypesettingLanguage.resolve(with:locale:)(v49, v51, v46, (uint64_t)&v290);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v46, v50);
    outlined destroy of TypesettingConfiguration(v52, type metadata accessor for TypesettingLanguage);
    v53 = BYTE1(v291);
    if (BYTE1(v291) != 2)
    {
      v54 = v290;
      v55 = v291;
      if (BYTE1(v291) == 1)
        goto LABEL_23;
      v56 = (void *)*MEMORY[0x24BDD0E98];
      v292 = MEMORY[0x24BEE0D00];
      outlined init with take of Any(&v290, &v305);
      outlined copy of TypesettingLanguage.Resolved(v54, *((uint64_t *)&v54 + 1), v55, 0);
      outlined copy of TypesettingLanguage.Resolved(v54, *((uint64_t *)&v54 + 1), v55, 0);
      v57 = v56;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v303[0] = v308[0];
      v308[0] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v57, isUniquelyReferenced_nonNull_native);
      v308[0] = *(_QWORD *)&v303[0];

      swift_bridgeObjectRelease();
      v59 = (void *)MEMORY[0x23B7C5DAC](v54, *((_QWORD *)&v54 + 1));
      outlined consume of TypesettingLanguage.Resolved(v54, *((uint64_t *)&v54 + 1), v55, 0);
      LODWORD(v57) = CTParagraphStyleGetCompositionLanguageForLanguage();

      *v276 = v57;
      if ((v55 & 1) != 0)
      {
LABEL_23:
        specialized static AnyFontModifier.languageModifier(_:)(v54, *((uint64_t *)&v54 + 1));
        outlined consume of TypesettingLanguage.Resolved(v54, *((uint64_t *)&v54 + 1), v55, v53);
        v60 = swift_retain();
        MEMORY[0x23B7C61A8](v60);
        if (*(_QWORD *)((v307 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v307 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      else
      {
        outlined consume of TypesettingLanguage.Resolved(v54, *((uint64_t *)&v54 + 1), v55, 0);
      }
    }
  }
  v61 = v41 + *(int *)(v277 + 20);
  v62 = *(_QWORD *)v61;
  if (*(_BYTE *)(v61 + 8) == 1)
  {
    v63 = v288;
    v64 = v289;
    v65 = v286;
    if (!v62)
      goto LABEL_35;
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier, (uint64_t)&type metadata for LanguageAwareLineHeightRatioFontModifier);
    if (v62 == 1)
      *(_QWORD *)(swift_allocObject() + 16) = 0;
    else
      *(_QWORD *)(swift_allocObject() + 16) = 0x3FD51EB851EB851FLL;
  }
  else
  {
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier, (uint64_t)&type metadata for LanguageAwareLineHeightRatioFontModifier);
    *(_QWORD *)(swift_allocObject() + 16) = v62;
    v63 = v288;
    v64 = v289;
    v65 = v286;
  }
  v66 = swift_retain();
  MEMORY[0x23B7C61A8](v66);
  if (*(_QWORD *)((v307 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v307 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
LABEL_35:
  if (one-time initialization token for kitFont != -1)
    swift_once();
  *(_QWORD *)&v305 = *(_QWORD *)v64;
  *(_QWORD *)&v290 = v65;
  *((_QWORD *)&v290 + 1) = v63;
  v67 = (id)static NSAttributedStringKey.kitFont;
  v68 = Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)((unint64_t *)&v290, v44 & 1);
  if (v68)
  {
    *(_QWORD *)&v290 = v65;
    *((_QWORD *)&v290 + 1) = v63;
    v69 = Font.platformFont(in:modifiers:)((uint64_t *)&v290, v307, v68);
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for CTFontRef(0);
    v292 = v70;
    *(_QWORD *)&v290 = v69;
    v63 = v288;
    outlined init with take of Any(&v290, &v305);
    v71 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v67, v71);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v67, &v290);

    outlined destroy of TypesettingConfiguration((uint64_t)&v290, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  }
  *(_QWORD *)&v305 = *(_QWORD *)(v64 + 16);
  *(_QWORD *)&v290 = v65;
  *((_QWORD *)&v290 + 1) = v63;
  *(_QWORD *)&v303[0] = v284;
  v72 = Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)((uint64_t *)&v290, (uint64_t *)v303, v287, v44 & ((v284 & 4) == 0));
  if ((v75 & 1) == 0)
  {
    v76 = v72;
    v77 = v73;
    if ((v282 & 1) != 0)
      v78 = v74 * 0.16;
    else
      v78 = v74;
    if (one-time initialization token for kitForegroundColor != -1)
      swift_once();
    v79 = one-time initialization token for cache;
    v80 = (id)static NSAttributedStringKey.kitForegroundColor;
    if (v79 != -1)
      swift_once();
    v81 = specialized ObjectCache.subscript.getter(*(float *)&v76, *((float *)&v76 + 1), v77, v78);
    v292 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    *(_QWORD *)&v290 = v81;
    outlined init with take of Any(&v290, &v305);
    v82 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v80, v82);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
    v83 = *(_WORD *)(v287 + 32);
    if ((v83 & 1) == 0 && *(float *)&v76 == -1.0 && *((float *)&v76 + 1) == -1.0)
      *(_WORD *)(v287 + 32) = v83 | 1;
  }
  v84 = *(_QWORD *)(v64 + 24);
  if (v84)
  {
    *(_QWORD *)&v290 = v65;
    *((_QWORD *)&v290 + 1) = v63;
    v85 = (*(float (**)(__int128 *))(*(_QWORD *)v84 + 104))(&v290);
    v87 = v86;
    v89 = v88;
    v91 = v90;
    if (one-time initialization token for kitBackgroundColor != -1)
      swift_once();
    v92 = one-time initialization token for cache;
    v93 = (id)static NSAttributedStringKey.kitBackgroundColor;
    if (v92 != -1)
      swift_once();
    v94 = specialized ObjectCache.subscript.getter(v85, v87, v89, v91);
    v292 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    *(_QWORD *)&v290 = v94;
    outlined init with take of Any(&v290, &v305);
    v95 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v93, v95);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
    v96 = *(_WORD *)(v287 + 32);
    if ((v96 & 1) == 0 && v85 == -1.0 && v87 == -1.0)
      *(_WORD *)(v287 + 32) = v96 | 1;
  }
  if ((*(_BYTE *)(v64 + 40) & 1) != 0)
  {
    if (v63)
    {
      swift_retain_n();
      swift_retain_n();
      v97 = specialized PropertyList.Tracker.value<A>(_:for:)(v65);
    }
    else
    {
      v106 = swift_retain_n();
      v97 = specialized closure #1 in PropertyList.subscript.getter(v106);
    }
    swift_release_n();
    swift_release_n();
    if (v97 == 0.0)
    {
LABEL_76:
      if ((*(_BYTE *)(v64 + 56) & 1) != 0)
        goto LABEL_77;
LABEL_68:
      v101 = *(double *)(v64 + 48);
      if (v101 == 0.0)
        goto LABEL_81;
      goto LABEL_69;
    }
  }
  else
  {
    v97 = *(double *)(v64 + 32);
    if (v97 == 0.0)
      goto LABEL_76;
  }
  if (one-time initialization token for kitBaselineOffset != -1)
    swift_once();
  v98 = (void *)static NSAttributedStringKey.kitBaselineOffset;
  v292 = MEMORY[0x24BEE50B0];
  *(double *)&v290 = v97;
  outlined init with take of Any(&v290, &v305);
  v99 = v98;
  v100 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v303[0] = v308[0];
  v308[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v99, v100);
  v308[0] = *(_QWORD *)&v303[0];

  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v64 + 56) & 1) == 0)
    goto LABEL_68;
LABEL_77:
  if (v63)
  {
    swift_retain_n();
    swift_retain_n();
    v101 = specialized PropertyList.Tracker.value<A>(_:for:)(v65);
  }
  else
  {
    v107 = swift_retain_n();
    v101 = specialized closure #1 in PropertyList.subscript.getter(v107);
  }
  swift_release_n();
  swift_release_n();
  if (v101 == 0.0)
  {
LABEL_81:
    if ((*(_BYTE *)(v64 + 72) & 1) != 0)
      goto LABEL_82;
    goto LABEL_72;
  }
LABEL_69:
  if (one-time initialization token for kitKern != -1)
    swift_once();
  v102 = (void *)static NSAttributedStringKey.kitKern;
  v292 = MEMORY[0x24BEE50B0];
  *(double *)&v290 = v101;
  outlined init with take of Any(&v290, &v305);
  v103 = v102;
  v104 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v303[0] = v308[0];
  v308[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v103, v104);
  v308[0] = *(_QWORD *)&v303[0];

  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v64 + 72) & 1) != 0)
  {
LABEL_82:
    if (v63)
    {
      swift_retain_n();
      swift_retain_n();
      v105 = specialized PropertyList.Tracker.value<A>(_:for:)(v65);
    }
    else
    {
      v108 = swift_retain_n();
      v105 = specialized closure #1 in PropertyList.subscript.getter(v108);
    }
    swift_release_n();
    swift_release_n();
    if (v105 == 0.0)
      goto LABEL_89;
    goto LABEL_86;
  }
LABEL_72:
  v105 = *(double *)(v64 + 64);
  if (v105 == 0.0)
    goto LABEL_89;
LABEL_86:
  if (one-time initialization token for kitTracking != -1)
    swift_once();
  v109 = (void *)static NSAttributedStringKey.kitTracking;
  v292 = MEMORY[0x24BEE50B0];
  *(double *)&v290 = v105;
  outlined init with take of Any(&v290, &v305);
  v110 = v109;
  v111 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v303[0] = v308[0];
  v308[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v110, v111);
  v308[0] = *(_QWORD *)&v303[0];

  swift_bridgeObjectRelease();
LABEL_89:
  v305 = *(_OWORD *)(v64 + 80);
  *(_QWORD *)&v303[0] = v65;
  *((_QWORD *)&v303[0] + 1) = v63;
  swift_retain();
  swift_retain();
  specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(v303, (uint64_t *)&v305, v65, v63, (uint64_t)&v290);
  if ((v292 & 0x100) == 0)
  {
    v113 = *((_QWORD *)&v290 + 1);
    v112 = v290;
    v114 = v291;
    v115 = v292;
    if (one-time initialization token for kitStrikethroughStyle != -1)
      swift_once();
    v116 = (void *)static NSAttributedStringKey.kitStrikethroughStyle;
    v117 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
    v118 = v116;
    v119 = objc_msgSend(v117, sel_initWithInteger_, v112);
    v292 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)&v290 = v119;
    outlined init with take of Any(&v290, &v305);
    v120 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v118, v120);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
    if ((v115 & 1) == 0)
    {
      if (one-time initialization token for kitStrikethroughColor != -1)
        swift_once();
      v121 = one-time initialization token for cache;
      v122 = (id)static NSAttributedStringKey.kitStrikethroughColor;
      if (v121 != -1)
        swift_once();
      v123 = specialized ObjectCache.subscript.getter(*(float *)&v113, *((float *)&v113 + 1), *(float *)&v114, *((float *)&v114 + 1));
      v292 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      *(_QWORD *)&v290 = v123;
      outlined init with take of Any(&v290, &v305);
      v124 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v303[0] = v308[0];
      v308[0] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v122, v124);
      v308[0] = *(_QWORD *)&v303[0];

      swift_bridgeObjectRelease();
      v125 = *(_WORD *)(v287 + 32);
      if ((v125 & 1) == 0 && *(float *)&v113 == -1.0 && *((float *)&v113 + 1) == -1.0)
        *(_WORD *)(v287 + 32) = v125 | 1;
    }
  }
  v126 = v288;
  v305 = *(_OWORD *)(v289 + 96);
  v127 = v286;
  *(_QWORD *)&v303[0] = v286;
  *((_QWORD *)&v303[0] + 1) = v288;
  swift_retain();
  swift_retain();
  specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(v303, (uint64_t *)&v305, v127, v126, (uint64_t)&v290);
  if ((v292 & 0x100) != 0)
  {
    v128 = v289;
  }
  else
  {
    v130 = *((_QWORD *)&v290 + 1);
    v129 = v290;
    v131 = v291;
    v132 = v292;
    if (one-time initialization token for kitUnderlineStyle != -1)
      swift_once();
    v133 = (void *)static NSAttributedStringKey.kitUnderlineStyle;
    v134 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
    v135 = v133;
    v136 = objc_msgSend(v134, sel_initWithInteger_, v129);
    v292 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)&v290 = v136;
    outlined init with take of Any(&v290, &v305);
    v137 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v135, v137);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
    v128 = v289;
    if ((v132 & 1) == 0)
    {
      if (one-time initialization token for kitUnderlineColor != -1)
        swift_once();
      v138 = one-time initialization token for cache;
      v139 = (id)static NSAttributedStringKey.kitUnderlineColor;
      if (v138 != -1)
        swift_once();
      v140 = specialized ObjectCache.subscript.getter(*(float *)&v130, *((float *)&v130 + 1), *(float *)&v131, *((float *)&v131 + 1));
      v292 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      *(_QWORD *)&v290 = v140;
      outlined init with take of Any(&v290, &v305);
      v141 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v303[0] = v308[0];
      v308[0] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v139, v141);
      v308[0] = *(_QWORD *)&v303[0];

      swift_bridgeObjectRelease();
      v142 = *(_WORD *)(v287 + 32);
      if ((v142 & 1) == 0 && *(float *)&v130 == -1.0 && *((float *)&v130 + 1) == -1.0)
        *(_WORD *)(v287 + 32) = v142 | 1;
    }
  }
  v143 = *(_QWORD *)(v128 + 176);
  if (v143 != 1)
  {
    v144 = *(_BYTE *)(v128 + 208);
    v145 = *(_QWORD *)(v289 + 200);
    v146 = *(_QWORD *)(v289 + 192);
    v147 = *(_QWORD *)(v289 + 184);
    v148 = *(_QWORD *)(v289 + 168);
    v149 = *(_QWORD *)(v289 + 160);
    v150 = *(_QWORD *)(v289 + 152);
    v151 = *(_QWORD *)(v289 + 144);
    v152 = *(_QWORD *)(v289 + 136);
    v153 = *(_QWORD *)(v289 + 128);
    v154 = *(_QWORD *)(v289 + 120);
    v155 = *(_QWORD *)(v289 + 112);
    v156 = (void *)*MEMORY[0x24BDC4BE8];
    *(_QWORD *)&v290 = v155;
    BYTE8(v290) = v154 & 1;
    v291 = v153;
    LOBYTE(v292) = v152 & 1;
    v293 = v151;
    v273 = (uint64_t (*)(uint64_t, uint64_t))v150;
    v274 = v151;
    v294 = v150 & 1;
    v295 = v149;
    v271 = v148;
    v272 = v149;
    v296 = v148 & 1;
    v297 = v143;
    v298 = v147;
    v277 = v147;
    v278 = v146;
    v299 = v146 & 1;
    v300 = v145;
    v301 = v144 & 1;
    *(_QWORD *)&v305 = v286;
    *((_QWORD *)&v305 + 1) = v288;
    LOBYTE(v270) = v144;
    v268 = v146;
    v269 = v145;
    outlined copy of Text.Encapsulation?(v155, v154, v153, v152, v151, v150, v149, v148, v143);
    v157 = v156;
    v158 = Text.Encapsulation.resolve(in:)((uint64_t *)&v305);
    v292 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSTextEncapsulation);
    *(_QWORD *)&v290 = v158;
    outlined init with take of Any(&v290, &v305);
    v159 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v157, v159);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
    LOBYTE(v270) = v144;
    v269 = v145;
    v128 = v289;
    v268 = v278;
    outlined consume of Text.Encapsulation?(v155, v154, v153, v152, v274, (uint64_t)v273, v272, v271, v143);
  }
  if (!v288)
  {
    v160 = v286;
    v290 = (unint64_t)v286;
    swift_retain();
    v169 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v290, v166, v167, v168);
    swift_release();
    swift_release();
    v163 = v282;
    LODWORD(v162) = v283;
    if ((v169 & 1) != 0)
      goto LABEL_129;
    v164 = *(unsigned __int8 *)(v128 + 320);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v170);
    v171 = v290;
    v165 = 2;
    swift_retain_n();
    swift_retain();
    v172 = specialized find1<A>(_:key:filter:)(v160, v171);
    if (v172)
      v165 = *(unsigned __int8 *)(v172 + 72);
    swift_release();
    swift_release_n();
    if (v164 != 2)
      goto LABEL_125;
LABEL_124:
    LOBYTE(v164) = v165;
    if (v165 == 2)
      goto LABEL_129;
    goto LABEL_125;
  }
  v160 = v286;
  swift_retain_n();
  swift_retain_n();
  v161 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v160);
  swift_release_n();
  swift_release_n();
  v163 = v282;
  LODWORD(v162) = v283;
  if ((v161 & 1) != 0)
    goto LABEL_129;
  v164 = *(unsigned __int8 *)(v128 + 320);
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v160, (char *)&v305);
  swift_release_n();
  swift_release_n();
  v165 = v305;
  if (v164 == 2)
    goto LABEL_124;
LABEL_125:
  if ((v164 & 1) != 0)
  {
    if (one-time initialization token for _textScale != -1)
      swift_once();
    v173 = (void *)static NSAttributedStringKey._textScale;
    type metadata accessor for CFStringRef(0);
    v292 = v174;
    *(_QWORD *)&v290 = CFSTR("NSTextScaleSecondary");
    outlined init with take of Any(&v290, &v305);
    v175 = v173;
    v176 = CFSTR("NSTextScaleSecondary");
    v177 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v175, v177);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
  }
LABEL_129:
  v178 = v163;
  v179 = v279;
  outlined init with copy of AttributedString.AdaptiveImageGlyph?(v128 + v285[23], v279);
  v180 = v280;
  v181 = v281;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v280 + 48))(v179, 1, v281) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v179, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
  }
  else
  {
    v183 = v275;
    (*(void (**)(char *, uint64_t, uint64_t))(v180 + 32))(v275, v179, v181);
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CTAdaptiveImageGlyph);
    v184 = (void *)static CTAdaptiveImageGlyph._adaptiveImageGlyph(convertingFrom:)();
    v185 = (void *)*MEMORY[0x24BEBB310];
    v186 = v162;
    v187 = objc_allocWithZone(MEMORY[0x24BEBB458]);
    v188 = v185;
    v162 = (unint64_t)objc_msgSend(v187, sel_initWithCTAdaptiveImageGlyph_, v184);
    v292 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSAdaptiveImageGlyph);
    *(_QWORD *)&v290 = v162;
    LODWORD(v162) = v186;
    outlined init with take of Any(&v290, &v305);
    v189 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v188, v189);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
    v190 = v183;
    v128 = v289;
    (*(void (**)(char *, uint64_t))(v180 + 8))(v190, v281);
  }
  v191 = *(_QWORD *)(v128 + 304);
  v192 = v178;
  if (!v191)
  {
    v197 = v288;
    if ((v284 & 8) != 0)
    {
      v221 = *(_QWORD *)(v128 + 312);
      if (v221)
      {
        v222 = (double)*(uint64_t *)(*(_QWORD *)(v287 + 48) + 16);
        swift_retain();
        v223 = CoreMakeNSShadowWithCustomStyleIndex(0, v222);
        if (v223)
        {
          v224 = v223;
          if (one-time initialization token for kitShadow != -1)
            swift_once();
          v225 = (void *)static NSAttributedStringKey.kitShadow;
          v292 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          *(_QWORD *)&v290 = v224;
          outlined init with take of Any(&v290, &v305);
          v226 = v225;
          v227 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v303[0] = v308[0];
          v308[0] = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v226, v227);
          v308[0] = *(_QWORD *)&v303[0];

          swift_bridgeObjectRelease();
        }
        v228 = v162;
        v229 = *(_QWORD *)(v221 + 16);
        v162 = *(unsigned int *)(v221 + 24) | ((unint64_t)*(unsigned __int8 *)(v221 + 28) << 32);
        v230 = *(_BYTE *)(v221 + 29);
        v231 = *(_BYTE *)(v221 + 30);
        v232 = *(_QWORD **)(v287 + 48);
        outlined copy of ContentTransition.Storage(v229, v162, v230);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v232 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v232[2] + 1, 1, v232);
        v234 = v232[2];
        v233 = v232[3];
        if (v234 >= v233 >> 1)
          v232 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v233 > 1), v234 + 1, 1, v232);
        v232[2] = v234 + 1;
        v235 = &v232[2 * v234];
        v235[4] = v229;
        *((_DWORD *)v235 + 10) = v162;
        *((_BYTE *)v235 + 44) = BYTE4(v162);
        *((_BYTE *)v235 + 45) = v230;
        *((_BYTE *)v235 + 46) = v231;
        swift_release();
        v160 = v286;
        *(_QWORD *)(v287 + 48) = v232;
        v197 = v288;
        v128 = v289;
        LODWORD(v162) = v228;
        v192 = v282;
      }
    }
LABEL_158:
    if (((v162 | v192) & 1) == 0)
      goto LABEL_162;
    goto LABEL_159;
  }
  v193 = *(_QWORD *)(v191 + 16);
  v195 = *(double *)(v191 + 24);
  v194 = *(double *)(v191 + 32);
  v196 = *(double *)(v191 + 40);
  v197 = v288;
  *(_QWORD *)&v290 = v160;
  *((_QWORD *)&v290 + 1) = v288;
  v198 = *(float (**)(__int128 *))(*(_QWORD *)v193 + 104);
  swift_retain();
  v199 = v198(&v290);
  v201 = v200;
  v203 = v202;
  v205 = v204;
  swift_release();
  v206 = v195 * -2.8;
  v207 = v195 * -2.8 + v196;
  v208 = v195 * -2.8 + v194;
  v209 = (double *)v287;
  if (v207 >= *(double *)v287)
    v207 = *(double *)v287;
  v210 = v206 - v196;
  v211 = v206 - v194;
  if (v208 >= *(double *)(v287 + 8))
    v208 = *(double *)(v287 + 8);
  *(double *)v287 = v207;
  v209[1] = v208;
  v212 = v209[2];
  if (v210 < v212)
    v212 = v210;
  if (v211 >= v209[3])
    v211 = v209[3];
  v209[2] = v212;
  v209[3] = v211;
  v213 = specialized static CoreColor.platformColor(resolvedColor:)(v199, v201, v203, v205);
  if (!v213)
    goto LABEL_158;
  v214 = v213;
  v215 = CoreMakeNSShadow(v213, v194, v196, v195 + v195);
  if (!v215)
  {

    if (((v162 | v192) & 1) == 0)
      goto LABEL_162;
    goto LABEL_159;
  }
  v216 = v215;
  v217 = v162;
  if (one-time initialization token for kitShadow != -1)
    swift_once();
  v218 = (void *)static NSAttributedStringKey.kitShadow;
  v292 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  *(_QWORD *)&v290 = v216;
  outlined init with take of Any(&v290, &v305);
  v219 = v218;
  v162 = v216;
  v220 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v303[0] = v308[0];
  v308[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v219, v220);
  v308[0] = *(_QWORD *)&v303[0];

  swift_bridgeObjectRelease();
  LOBYTE(v162) = v217;
  if (((v217 | v192) & 1) != 0)
  {
LABEL_159:
    if (one-time initialization token for kitParagraphStyle != -1)
      swift_once();
    *(_QWORD *)&v290 = v160;
    *((_QWORD *)&v290 + 1) = v197;
    v236 = (id)static NSAttributedStringKey.kitParagraphStyle;
    v237 = Text.ResolvedProperties.Paragraph.style(environment:)((uint64_t *)&v290);
    v292 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
    *(_QWORD *)&v290 = v237;
    outlined init with take of Any(&v290, &v305);
    v238 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v303[0] = v308[0];
    v308[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v236, v238);
    v308[0] = *(_QWORD *)&v303[0];

    swift_bridgeObjectRelease();
  }
LABEL_162:
  if (!(((v284 & 1) == 0) | v192 & 1))
  {
    *(_QWORD *)&v290 = v160;
    *((_QWORD *)&v290 + 1) = v197;
    Text.Style.resolveAccessibilitySpeechAttributes(into:environment:includeDefaultAttributes:)((uint64_t)v308, (uint64_t *)&v290, v162 & 1, v182);
    *(_QWORD *)&v290 = v160;
    *((_QWORD *)&v290 + 1) = v197;
    Text.Style.resolveAccessibilityTextAttributes(into:environment:)((uint64_t)v308, (uint64_t *)&v290);
  }
  v239 = *(_QWORD *)(v128 + v285[22]);
  if (v239 >> 62)
  {
    swift_bridgeObjectRetain();
    v267 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v267)
      goto LABEL_169;
  }
  else if (!*(_QWORD *)((v239 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_169;
  }
  if (one-time initialization token for customAttributes != -1)
    swift_once();
  v240 = (void *)static NSAttributedStringKey.customAttributes;
  v292 = (uint64_t)&type metadata for Text.CustomAttributes;
  *(_QWORD *)&v290 = v239;
  outlined init with take of Any(&v290, &v305);
  swift_bridgeObjectRetain();
  v241 = v240;
  v242 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v303[0] = v308[0];
  v308[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v305, v241, v242);
  v308[0] = *(_QWORD *)&v303[0];

  swift_bridgeObjectRelease();
LABEL_169:
  if ((*(_BYTE *)(v128 + 321) & 1) == 0)
  {
    v243 = v308[0];
    if (*(_QWORD *)(v308[0] + 16))
    {
      v244 = (id)static NSAttributedStringKey.kitFont;
      v245 = specialized __RawDictionaryStorage.find<A>(_:)(v244);
      if ((v246 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v243 + 56) + 32 * v245, (uint64_t)&v305);
      }
      else
      {
        v305 = 0u;
        v306 = 0u;
      }

      if (*((_QWORD *)&v306 + 1))
      {
        outlined init with take of Any(&v305, &v290);
        outlined init with copy of Any((uint64_t)&v290, (uint64_t)&v305);
        type metadata accessor for CTFontRef(0);
        v248 = v247;
        swift_dynamicCast();
        if (one-time initialization token for kitBaselineOffset != -1)
          swift_once();
        v249 = v308[0];
        if (*(_QWORD *)(v308[0] + 16))
        {
          v250 = (id)static NSAttributedStringKey.kitBaselineOffset;
          v251 = specialized __RawDictionaryStorage.find<A>(_:)(v250);
          if ((v252 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v249 + 56) + 32 * v251, (uint64_t)&v305);
          }
          else
          {
            v305 = 0u;
            v306 = 0u;
          }

          if (*((_QWORD *)&v306 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              v254 = *(double *)v303;
LABEL_192:
              v255 = v304;
              v256 = CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)(0x3FD0000000000000, 0, 1, 0.65);
              CapHeight = CTFontGetCapHeight(v255);

              v258 = v254 + CapHeight - CTFontGetCapHeight(v256);
              v304 = v256;
              v259 = (void *)static NSAttributedStringKey.kitFont;
              *((_QWORD *)&v306 + 1) = v248;
              *(_QWORD *)&v305 = v256;
              outlined init with take of Any(&v305, v303);
              v260 = v259;
              v261 = v256;
              v262 = swift_isUniquelyReferenced_nonNull_native();
              v302 = v308[0];
              v308[0] = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v303, v260, v262);
              v308[0] = v302;

              swift_bridgeObjectRelease();
              v263 = (void *)static NSAttributedStringKey.kitBaselineOffset;
              *((_QWORD *)&v306 + 1) = MEMORY[0x24BEE50B0];
              *(double *)&v305 = v258;
              outlined init with take of Any(&v305, v303);
              v264 = v263;
              v265 = swift_isUniquelyReferenced_nonNull_native();
              v302 = v308[0];
              v308[0] = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v303, v264, v265);
              v308[0] = v302;

              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v290);

              return v308[0];
            }
LABEL_191:
            v254 = 0.0;
            goto LABEL_192;
          }
        }
        else
        {
          v305 = 0u;
          v306 = 0u;
        }
        outlined destroy of TypesettingConfiguration((uint64_t)&v305, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
        goto LABEL_191;
      }
    }
    else
    {
      v305 = 0u;
      v306 = 0u;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)&v305, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  }
  return v308[0];
}

void *makeParagraphStyle(environment:)(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int16 v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double v16;
  double v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  _BYTE v30[22];
  __int16 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[6];
  _OWORD v41[2];

  v1 = *a1;
  v2 = a1[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1, v40);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v33 = v1;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)&v33, (uint64_t)v40);
  }
  v37 = v40[4];
  v38 = v40[5];
  v39[0] = v41[0];
  *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v41 + 9);
  v33 = v40[0];
  v34 = v40[1];
  v35 = v40[2];
  v36 = v40[3];
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB490]), sel_init);
  v4 = v3;
  v5 = BYTE11(v34);
  if ((v38 & 1) != 0)
  {
    v6 = qword_235298388[SBYTE10(v34)];
    goto LABEL_13;
  }
  if (BYTE10(v34))
  {
    if (BYTE10(v34) == 1)
    {
      v6 = 4;
      goto LABEL_13;
    }
    if ((BYTE11(v34) & 1) == 0)
      goto LABEL_12;
LABEL_10:
    v6 = 2;
    goto LABEL_13;
  }
  if ((BYTE11(v34) & 1) == 0)
    goto LABEL_10;
LABEL_12:
  v6 = 3;
LABEL_13:
  objc_msgSend(v3, sel_setHorizontalAlignment_, v6);
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v31);
    swift_release_n();
    swift_release_n();
    v7 = v31;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v31);
    swift_release_n();
    swift_release_n();
    LOBYTE(v8) = v31;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v9);
    v10 = swift_retain_n();
    v11 = specialized find1<A>(_:key:filter:)(v10, v32);
    if (v11)
      v7 = *(_BYTE *)(v11 + 72);
    else
      v7 = 0;
    LOBYTE(v8) = 2;
    swift_release_n();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v12);
    v13 = swift_retain_n();
    v14 = specialized find1<A>(_:key:filter:)(v13, v32);
    if (v14)
      v8 = *(_WORD *)(v14 + 72);
    swift_release_n();
  }
  if (v8 == 2)
  {
    objc_msgSend(v4, sel_setFullyJustified_, 0);
  }
  else
  {
    objc_msgSend(v4, sel_setFullyJustified_, 1);
    v7 |= v8;
  }
  objc_msgSend(v4, sel_setSpansAllLines_, v7 & 1);
  objc_msgSend(v4, sel_setLineBreakMode_, BYTE9(v34) + 3);
  objc_msgSend(v4, sel_setLineSpacing_, *((double *)&v35 + 1));
  objc_msgSend(v4, sel_setLineBreakStrategy_, 0xFFFFLL);
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if ((v15 & 1) != 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  v18 = swift_retain_n();
  v19 = specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v30);
  swift_release_n();
  if ((v19 & 1) == 0)
LABEL_26:
    objc_msgSend(v4, sel_setLineBreakStrategy_, (unint64_t)objc_msgSend(v4, sel_lineBreakStrategy) & 0xFFFFFFFFFFFFFFFELL);
LABEL_27:
  objc_msgSend(v4, sel_setLineHeightMultiple_, *(double *)&v36);
  objc_msgSend(v4, sel_setMaximumLineHeight_, *((double *)&v36 + 1));
  objc_msgSend(v4, sel_setMinimumLineHeight_, *(double *)&v37);
  HIDWORD(v16) = HIDWORD(v37);
  *(float *)&v16 = *((double *)&v37 + 1);
  objc_msgSend(v4, sel_setHyphenationFactor_, v16);
  objc_msgSend(v4, sel_setFirstLineHeadIndent_, *((double *)&v38 + 1));
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    v17 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (v17 > 0.0)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v31);
      swift_release_n();
      swift_release_n();
      outlined release of TextLayoutProperties((uint64_t)&v33);
      if ((v31 & 1) == 0)
        goto LABEL_40;
LABEL_36:
      objc_msgSend(v4, sel_setBaseWritingDirection_, 0);
      goto LABEL_41;
    }
  }
  else
  {
    v20 = swift_retain_n();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release_n();
    if (v21 > 0.0)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v22);
      v23 = v32;
      v24 = swift_retain_n();
      v25 = specialized find1<A>(_:key:filter:)(v24, v23);
      if (v25)
      {
        v26 = *(_BYTE *)(v25 + 72);
        swift_release_n();
        outlined release of TextLayoutProperties((uint64_t)&v33);
        if ((v26 & 1) != 0)
          goto LABEL_36;
      }
      else
      {
        swift_release_n();
        outlined release of TextLayoutProperties((uint64_t)&v33);
      }
LABEL_40:
      objc_msgSend(v4, sel_setBaseWritingDirection_, v5);
LABEL_41:
      if (v2)
        goto LABEL_42;
      goto LABEL_38;
    }
  }
  outlined release of TextLayoutProperties((uint64_t)&v33);
  if (v2)
  {
LABEL_42:
    swift_retain_n();
    swift_retain_n();
    v28 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    goto LABEL_43;
  }
LABEL_38:
  v27 = swift_retain_n();
  v28 = specialized closure #1 in PropertyList.subscript.getter(v27);
LABEL_43:
  swift_release_n();
  swift_release_n();
  objc_msgSend(v4, sel_setAllowsDefaultTighteningForTruncation_, v28 & 1);
  return v4;
}

uint64_t one-time initialization function for resolvableAttributeConfiguration()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000028, 0x80000002352E1F70);
  static NSAttributedStringKey.resolvableAttributeConfiguration = result;
  return result;
}

id static NSAttributedStringKey.resolvableAttributeConfiguration.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for resolvableAttributeConfiguration, (id *)&static NSAttributedStringKey.resolvableAttributeConfiguration);
}

__CFString *one-time initialization function for _textScale()
{
  static NSAttributedStringKey._textScale = (uint64_t)CFSTR("NSTextScale");
  return CFSTR("NSTextScale");
}

id static NSAttributedStringKey._textScale.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for _textScale, (id *)&static NSAttributedStringKey._textScale);
}

id one-time initialization function for _textScaleRatio()
{
  static NSAttributedStringKey._textScaleRatio = *MEMORY[0x24BDC4F50];
  return (id)static NSAttributedStringKey._textScaleRatio;
}

id static NSAttributedStringKey._textScaleRatio.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for _textScaleRatio, (id *)&static NSAttributedStringKey._textScaleRatio);
}

id static NSAttributedStringKey.resolvableAttributeConfiguration.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

void NSAttributedString.firstAttribute<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v4;

  v4 = (id)static ResolvableStringAttributeRepresentation.attribute.getter();
  NSAttributedString.firstAttribute<A>(_:name:)((uint64_t)v4, a1, a2);

}

void NSMutableAttributedString.addResolvableAttributes(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v2 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v7 - v4, v5);
  v6 = (char *)sub_234CF2010 + 4 * byte_235298350[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234CF2010()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  if (one-time initialization token for resolvableAttributeConfiguration != -1)
    swift_once();
  v5 = static NSAttributedStringKey.resolvableAttributeConfiguration;
  outlined init with copy of TypesettingLanguage(v1, v2, type metadata accessor for ResolvableAttributeConfiguration);
  objc_msgSend(v0, sel_addAttribute_value_range_, v5, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), 0, objc_msgSend(v0, sel_length));
  return swift_unknownObjectRelease();
}

void *Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)(uint64_t a1, uint64_t *a2, char a3, float64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, int a8, void *a9)
{
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int16 v48;
  char v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float64x2_t v75;
  void *v76;
  id v77;
  id v78;
  Swift::OpaquePointer v79;
  id v80;
  Class isa;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  float64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _BYTE v102[12];
  int v103;
  uint64_t v104;
  uint64_t v105;
  float64x2_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  float64x2_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  float64x2_t v126[2];
  uint64_t v127;
  uint64_t v128;

  v111 = a7;
  v109 = a1;
  v108 = a9;
  v15 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v102[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = (int *)type metadata accessor for Text.Resolved(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v102[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = *a2;
  v21 = a2[1];
  v112.f64[0] = *a4;
  v24 = *a5;
  v23 = a5[1];
  Text.Style.init()((uint64_t)v20);
  v105 = v18[5];
  *(_QWORD *)&v20[v105] = 0;
  v25 = v18[6];
  v26 = &v20[v18[7]];
  v27 = v18[8];
  v28 = (uint64_t)v20;
  v29 = &v20[v27];
  *((_WORD *)v29 + 16) = 0;
  v30 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)v29 = 0u;
  *((_OWORD *)v29 + 1) = 0u;
  *((_QWORD *)v29 + 5) = v30;
  *((_QWORD *)v29 + 6) = v30;
  *(_OWORD *)(v29 + 56) = 0u;
  v107 = (uint64_t)(v29 + 56);
  *(_OWORD *)(v29 + 72) = 0u;
  *((_QWORD *)v29 + 11) = 0;
  v106 = (float64x2_t)xmmword_235260F00;
  *((_OWORD *)v29 + 6) = xmmword_235260F00;
  *((_QWORD *)v29 + 15) = 0;
  *((_QWORD *)v29 + 16) = 0;
  *((_QWORD *)v29 + 14) = v30;
  *(_BYTE *)(v28 + v25) = a3;
  *v26 = v24;
  v26[1] = v23;
  swift_retain();
  v31 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v31, v21, (uint64_t)v17);
  swift_release();
  swift_release();
  if ((a8 & 1) != 0)
  {
    v32 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 112);
    v33 = swift_retain();
    v34 = v32(v33);
    outlined consume of Text.Storage(a6, v111, 1);
    if ((v34 & 1) == 0)
    {
      if (one-time initialization token for automatic != -1)
        swift_once();
      v35 = type metadata accessor for TypesettingLanguage(0);
      v36 = __swift_project_value_buffer(v35, (uint64_t)static TypesettingLanguage.automatic);
      outlined assign with copy of TypesettingLanguage(v36, (uint64_t)v17, type metadata accessor for TypesettingLanguage);
    }
  }
  v37 = type metadata accessor for Text.Style(0);
  outlined assign with copy of TypesettingLanguage((uint64_t)v17, v28 + *(int *)(v37 + 84), (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  if ((~*(_QWORD *)&v112.f64[0] & 0x60) == 0)
  {
    swift_retain();
    v103 = a8;
    if (v21)
    {
      swift_retain_n();
      v38 = swift_retain();
      specialized PropertyList.Tracker.value<A>(_:for:)(v38, &v117);
      swift_release_n();
      swift_release_n();
      if ((*((_QWORD *)&v119 + 1) & 0x8000000000000000) != 0)
        goto LABEL_18;
      v40 = *((_QWORD *)&v117 + 1);
      v39 = (void *)v117;
      LOBYTE(v41) = v118;
      v42 = v120;
    }
    else
    {
      swift_retain_n();
      swift_retain();
      v43 = (_QWORD *)specialized find<A>(_:key:)(v22);
      if (v43)
      {
        v40 = v43[10];
        v41 = v43[11];
        v44 = v43[12];
        v45 = v43[13];
        v46 = v43[14];
        v42 = v43[15];
        v110 = (void *)v43[9];
        v47 = v46;
        outlined copy of ResolvedTextSuffix(v110, v40, v41, v44, v45, v46);
      }
      else
      {
        v110 = 0;
        v40 = 0;
        LOBYTE(v41) = 0;
        v42 = 0;
        v47 = 0x8000000000000000;
      }
      swift_release();
      swift_release_n();
      v39 = v110;
      if ((v47 & 0x8000000000000000) != 0)
        goto LABEL_18;
    }
    outlined consume of Text.Layout.Line.Line(v39, v40, v41 & 1);
    if (*(_QWORD *)(v42 + 16))
    {
      swift_bridgeObjectRelease();
      *((_QWORD *)v29 + 5) = v42;
      v48 = *((_WORD *)v29 + 16);
      LOBYTE(a8) = v103;
      if ((v48 & 1) == 0)
        *((_WORD *)v29 + 16) = v48 | 1;
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
LABEL_18:
    LOBYTE(a8) = v103;
  }
LABEL_19:
  v110 = v17;
  v49 = LOBYTE(v112.f64[0]);
  specialized Text.resolve<A>(into:in:with:)(v28, v22, v21, *(uint64_t *)&v112.f64[0], a6, v111, a8 & 1, (uint64_t)v108);
  v111 = v28;
  v50 = *(void **)(v28 + v105);
  v51 = (void *)*((_QWORD *)v29 + 7);
  v52 = *((_QWORD *)v29 + 8);
  v53 = *((_QWORD *)v29 + 9);
  v54 = *((_QWORD *)v29 + 10);
  v104 = v22;
  v105 = v21;
  v55 = *((_QWORD *)v29 + 11);
  v56 = *((_QWORD *)v29 + 12);
  v108 = v50;
  outlined consume of ResolvedTextSuffix(v51, v52, v53, v54, v55, v56);
  v57 = (_OWORD *)v107;
  *(_QWORD *)(v107 + 32) = 0;
  *v57 = 0u;
  v57[1] = 0u;
  *((float64x2_t *)v29 + 6) = v106;
  if ((v49 & 0x40) == 0)
    goto LABEL_30;
  v58 = v104;
  swift_retain();
  if (v105)
  {
    swift_retain_n();
    v59 = swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v59, &v117);
    swift_release_n();
    swift_release_n();
    v61 = *((_QWORD *)&v117 + 1);
    v60 = (void *)v117;
    v63 = *((_QWORD *)&v118 + 1);
    v62 = v118;
    v65 = *((_QWORD *)&v119 + 1);
    v64 = v119;
    v66 = v120;
    v67 = *((_QWORD *)&v119 + 1) >> 62;
    if (*((_QWORD *)&v119 + 1) >> 62)
      goto LABEL_22;
LABEL_29:
    *((_QWORD *)v29 + 7) = v60;
    *((_QWORD *)v29 + 8) = v61;
    *((_QWORD *)v29 + 9) = v62;
    *((_QWORD *)v29 + 10) = v63;
    *((_QWORD *)v29 + 11) = v64;
    *((_QWORD *)v29 + 12) = v65;
    *((_QWORD *)v29 + 13) = v66;
    goto LABEL_30;
  }
  swift_retain_n();
  swift_retain();
  v70 = (_QWORD *)specialized find<A>(_:key:)(v58);
  if (v70)
  {
    v60 = (void *)v70[9];
    v61 = v70[10];
    v62 = v70[11];
    v63 = v70[12];
    v64 = v70[13];
    v65 = v70[14];
    v66 = v70[15];
    outlined copy of ResolvedTextSuffix(v60, v61, v62, v63, v64, v65);
  }
  else
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v66 = 0;
    v65 = 0x8000000000000000;
  }
  *(_QWORD *)&v117 = v60;
  *((_QWORD *)&v117 + 1) = v61;
  *(_QWORD *)&v118 = v62;
  *((_QWORD *)&v118 + 1) = v63;
  *(_QWORD *)&v119 = v64;
  *((_QWORD *)&v119 + 1) = v65;
  *(_QWORD *)&v120 = v66;
  swift_release();
  swift_release_n();
  v67 = v65 >> 62;
  if (!(v65 >> 62))
    goto LABEL_29;
LABEL_22:
  if ((_DWORD)v67 == 1)
  {
    v105 = v66;
    v68 = v62 & 1;
    if (v50)
      v69 = (uint64_t)objc_msgSend(v108, sel_length);
    else
      v69 = 0;
    *(_QWORD *)&v113 = v60;
    *((_QWORD *)&v113 + 1) = v61;
    LOBYTE(v114) = v68 != 0;
    *((_QWORD *)&v114 + 1) = v63;
    v115 = v64;
    v116 = v65;
    v104 = v68;
    outlined copy of Text.Layout.Line.Line(v60, v61, v68);
    Text.Layout.Line.typographicBounds.getter(v126);
    v112 = v126[0];
    v106 = v126[1];
    v72 = v127;
    v73 = v128;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ConcreteCustomTextAttachment<LineAttachment>, (uint64_t)&type metadata for LineAttachment, (uint64_t)&protocol witness table for LineAttachment, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ConcreteCustomTextAttachment);
    v74 = swift_allocObject();
    *(_QWORD *)(v74 + 16) = v60;
    *(_QWORD *)(v74 + 24) = v61;
    *(_BYTE *)(v74 + 32) = v68 != 0;
    v107 = v63;
    *(_QWORD *)(v74 + 40) = v63;
    *(_QWORD *)(v74 + 48) = v64;
    *(_DWORD *)(v74 + 56) = v65;
    v75 = v106;
    *(float64x2_t *)(v74 + 64) = v112;
    *(float64x2_t *)(v74 + 80) = v75;
    *(_QWORD *)(v74 + 96) = v72;
    *(_QWORD *)(v74 + 104) = v73;
    *(_QWORD *)&v112.f64[0] = v69;
    *(_QWORD *)&v106.f64[0] = v64;
    if (v69 < 1)
    {
      v79._rawValue = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      if (!v50)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        v82 = (_QWORD *)*((_QWORD *)v29 + 14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82[2] + 1, 1, v82);
        v84 = v82[2];
        v83 = v82[3];
        v85 = v112.f64[0];
        if (v84 >= v83 >> 1)
        {
          v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v83 > 1), v84 + 1, 1, v82);
          v85 = v112.f64[0];
        }
        v82[2] = v84 + 1;
        *(float64_t *)&v82[v84 + 4] = v85;
        swift_release();
        *((_QWORD *)v29 + 7) = v60;
        *((_QWORD *)v29 + 8) = v61;
        v86 = v107;
        *((_QWORD *)v29 + 9) = v104;
        *((_QWORD *)v29 + 10) = v86;
        *((_QWORD *)v29 + 11) = *(_QWORD *)&v106.f64[0];
        *((_QWORD *)v29 + 12) = v65 | 0x4000000000000000;
        *((_QWORD *)v29 + 13) = v105;
        *((_QWORD *)v29 + 14) = v82;
        if (!v50)
          goto LABEL_44;
        goto LABEL_31;
      }
      v76 = v50;
      v77 = v108;
    }
    else
    {
      if (!v50)
        goto LABEL_39;
      v76 = v50;
      v77 = v108;
      v78 = objc_msgSend(v108, sel_attributesAtIndex_effectiveRange_, v69 - 1, 0);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      v79._rawValue = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    }
    v80 = v77;
    isa = AnyCustomTextAttachment.nsAttributedString(with:)(v79).super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v80, sel_appendAttributedString_, isa);

    v50 = v76;
    goto LABEL_39;
  }
LABEL_30:
  if (!v50)
  {
LABEL_44:
    v115 = 0;
    v114 = 0u;
    v113 = 0u;
    goto LABEL_45;
  }
LABEL_31:
  v71 = v108;
  NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)&v113);

LABEL_45:
  v87 = (uint64_t)v110;
  v88 = v111;
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v113, &lazy cache variable for type metadata for TimelineSchedule?, (void (*)(uint64_t))type metadata accessor for TimelineSchedule);
  v89 = *((_OWORD *)v29 + 5);
  v90 = *((_OWORD *)v29 + 7);
  v123 = *((_OWORD *)v29 + 6);
  v124 = v90;
  v91 = *((_OWORD *)v29 + 1);
  v92 = *((_OWORD *)v29 + 3);
  v119 = *((_OWORD *)v29 + 2);
  v93 = v119;
  v120 = v92;
  v94 = *((_OWORD *)v29 + 3);
  v95 = *((_OWORD *)v29 + 5);
  v121 = *((_OWORD *)v29 + 4);
  v96 = v121;
  v122 = v95;
  v97 = *(_OWORD *)v29;
  v98 = *(_OWORD *)v29;
  v118 = *((_OWORD *)v29 + 1);
  v117 = v97;
  v99 = *((_OWORD *)v29 + 7);
  v100 = v109;
  *(_OWORD *)(v109 + 96) = v123;
  *(_OWORD *)(v100 + 112) = v99;
  *(_OWORD *)(v100 + 32) = v93;
  *(_OWORD *)(v100 + 48) = v94;
  *(_OWORD *)(v100 + 64) = v96;
  *(_OWORD *)(v100 + 80) = v89;
  v125 = *((_QWORD *)v29 + 16);
  *(_QWORD *)(v100 + 128) = *((_QWORD *)v29 + 16);
  *(_OWORD *)v100 = v98;
  *(_OWORD *)(v100 + 16) = v91;
  outlined retain of Text.ResolvedProperties(&v117);
  outlined destroy of TypesettingConfiguration(v87, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  outlined destroy of TypesettingConfiguration(v88, type metadata accessor for Text.Resolved);
  return v50;
}

uint64_t EnvironmentValues.resolveNSAttributes(includeDefaultAttributes:options:)(int a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[8];
  uint64_t v24;

  v5 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a2;
  v10 = *v2;
  v9 = v2[1];
  LOWORD(v18) = 0;
  v16 = 0u;
  v17 = 0u;
  *((_QWORD *)&v18 + 1) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v19[0] = MEMORY[0x24BEE4AF8];
  *(_OWORD *)((char *)v19 + 8) = 0u;
  *(_OWORD *)((char *)&v19[1] + 8) = 0u;
  *((_QWORD *)&v19[2] + 1) = 0;
  v20 = xmmword_235260F00;
  v22 = 0;
  v21 = MEMORY[0x24BEE4AF8];
  Text.Style.init()((uint64_t)v7);
  v15[0] = v10;
  v15[1] = v9;
  v14 = v8;
  v11 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(0, 0, v15, a1, &v14, (uint64_t)&v16);
  outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Text.Style);
  v23[6] = v20;
  v23[7] = v21;
  v24 = v22;
  v23[2] = v18;
  v23[3] = v19[0];
  v23[4] = v19[1];
  v23[5] = v19[2];
  v23[0] = v16;
  v23[1] = v17;
  outlined release of Text.ResolvedProperties(v23);
  return v11;
}

id NSAttributedString.scaled(by:)(double a1)
{
  void *v1;

  if (a1 == 1.0)
    return v1;
  else
    return objc_msgSend(v1, sel__ui_attributedSubstringFromRange_scaledByScaleFactor_, 0, objc_msgSend(v1, sel_length), a1);
}

double NSAttributedString.EncodedFontMetrics.capHeight.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void NSAttributedString.EncodedFontMetrics.capHeight.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.capHeight.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.ascender.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void NSAttributedString.EncodedFontMetrics.ascender.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.ascender.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.descender.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void NSAttributedString.EncodedFontMetrics.descender.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.descender.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.leading.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void NSAttributedString.EncodedFontMetrics.leading.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.leading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.outsets.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void NSAttributedString.EncodedFontMetrics.outsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.outsets.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t closure #1 in NSAttributedString.maxFontMetrics.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6, double *a7, uint64_t a8, char a9, char a10, uint64_t a11)
{
  double Ascent;
  double Descent;
  double v17;
  double CapHeight;
  double v19;
  double v20;
  double Leading;
  uint64_t result;
  double v23;
  CTFontSymbolicTraits SymbolicTraits;
  CTFontSymbolicTraits v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  int ClippingMetrics;
  double v34;
  double v35;
  double v36;
  const __CTFont *font;
  double v38[3];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  if (!v39)
    return outlined destroy of TypesettingConfiguration((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  outlined init with take of Any(v38, v40);
  outlined init with copy of Any((uint64_t)v40, (uint64_t)v38);
  type metadata accessor for CTFontRef(0);
  swift_dynamicCast();
  Ascent = CTFontGetAscent(font);
  Descent = CTFontGetDescent(font);
  v17 = *a5;
  CapHeight = CTFontGetCapHeight(font);
  if (v17 > CapHeight)
    CapHeight = v17;
  *a5 = CapHeight;
  v19 = *a6;
  if (*a6 <= Ascent)
    v19 = Ascent;
  *a6 = v19;
  v20 = *a7;
  if (*a7 <= Descent)
    v20 = Descent;
  *a7 = v20;
  if ((*(_BYTE *)(a8 + 8) & 1) != 0)
  {
    Leading = CTFontGetLeading(font);
  }
  else
  {
    v23 = *(double *)a8;
    Leading = CTFontGetLeading(font);
    if (v23 > Leading)
      Leading = v23;
  }
  *(double *)a8 = Leading;
  *(_BYTE *)(a8 + 8) = 0;
  v38[0] = 0.0;
  if ((a9 & 1) != 0
    || (SymbolicTraits = CTFontGetSymbolicTraits(font), (SymbolicTraits & 1) != 0)
    || (v25 = SymbolicTraits, CTFontGetWeight(), *MEMORY[0x24BDC4E68] < v26)
    || (v25 & 0xF0000000) == 0xA0000000
    || (v25 & 0xF0000000) == 0x90000000)
  {
    if (CTFontGetLanguageAwareOutsets())
    {

      v27 = 0;
      v28 = *(double *)a11;
      if (*(double *)(a11 + 8) > 0.0)
        v27 = *(_QWORD *)(a11 + 8);
      v29 = 0;
      v30 = *(double *)(a11 + 16);
      if (*(double *)(a11 + 24) > 0.0)
        v29 = *(_QWORD *)(a11 + 24);
      *(_QWORD *)(a11 + 24) = v29;
      v31 = v38[0];
      if (v28 > v38[0])
        v31 = v28;
      *(double *)a11 = v31;
      *(_QWORD *)(a11 + 8) = v27;
      if (v30 > 0.0)
        v32 = v30;
      else
        v32 = 0.0;
LABEL_28:
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      *(double *)(a11 + 16) = v32;
      return result;
    }
  }
  if ((a10 & 1) != 0 && (CTFontIsSystemUIFont() & 1) == 0)
  {
    ClippingMetrics = CTFontGetClippingMetrics();

    if (ClippingMetrics)
    {
      v34 = *(double *)a11;
      v35 = Ascent - Ascent;
      if (Ascent - Ascent < 0.0)
        v35 = 0.0;
      if (v34 <= v35)
        v34 = v35;
      *(double *)a11 = v34;
      v36 = Descent - Descent;
      if (Descent - Descent < 0.0)
        v36 = 0.0;
      if (*(double *)(a11 + 16) > v36)
        v32 = *(double *)(a11 + 16);
      else
        v32 = v36;
      goto LABEL_28;
    }
  }
  else
  {

  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

BOOL closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  _QWORD v18[2];

  v4 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - v9;
  v12 = *(_QWORD *)(a2 + *(int *)(v11 + 96));
  v13 = (*(uint64_t (**)(double))(**(_QWORD **)a1 + 112))(v8);
  LOBYTE(v12) = specialized Set.contains(_:)(v13, v12);
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)v10, type metadata accessor for Text.Style);
  if ((v12 & 1) == 0)
  {
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier);
    v15 = swift_dynamicCastClass();
    if (v15)
    {
      v16 = *(double *)(v15 + 16);
      outlined init with copy of TypesettingLanguage((uint64_t)v10, (uint64_t)v6, type metadata accessor for Text.Style);
      if (v16 >= 0.3)
      {
        v14 = !specialized Set.contains(_:)((uint64_t)&type metadata for Font.BoldModifier, *(_QWORD *)&v6[*(int *)(v4 + 96)]);
LABEL_8:
        outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for Text.Style);
        goto LABEL_9;
      }
    }
    else
    {
      outlined init with copy of TypesettingLanguage((uint64_t)v10, (uint64_t)v6, type metadata accessor for Text.Style);
    }
    v14 = 1;
    goto LABEL_8;
  }
  v14 = 0;
  v6 = v10;
LABEL_9:
  outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for Text.Style);
  return v14;
}

uint64_t specialized EnvironmentValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _BYTE v15[16];

  if (a2)
  {
    swift_retain_n();
    swift_retain_n();
    v6 = specialized PropertyList.Tracker.value<A>(_:for:)(a1);
    v8 = v7;
    swift_release_n();
    swift_release_n();
    if (!v6)
    {
      swift_retain();
      v9 = swift_retain();
      specialized PropertyList.Tracker.value<A>(_:for:)(v9, a3);
      swift_release();
      return swift_release();
    }
  }
  else
  {
    v11 = swift_retain_n();
    v6 = specialized closure #1 in PropertyList.subscript.getter(v11, (uint64_t)v15);
    v8 = v12;
    swift_release_n();
    if (!v6)
    {
      v13 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v13, a3);
      return swift_release_n();
    }
  }
  v14[0] = a1;
  v14[1] = a2;
  return (*(uint64_t (**)(ValueMetadata *, _QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 8))(&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, v14, &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, &protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, v6, v8);
}

uint64_t outlined assign with copy of TypesettingLanguage(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

unint64_t type metadata accessor for TimelineSchedule()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TimelineSchedule;
  if (!lazy cache variable for type metadata for TimelineSchedule)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  }
  return result;
}

uint64_t sub_234CF3474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ResolvableStringResolutionContext() - 8) + 80);
  v2 = (v1 + 24) & ~v1;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234CF3534()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_234CF355C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.maxFontMetrics.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in NSAttributedString.maxFontMetrics.getter(a1, a2, a3, a4, *(double **)(v4 + 16), *(double **)(v4 + 24), *(double **)(v4 + 32), *(_QWORD *)(v4 + 40), *(_BYTE *)(v4 + 48), *(_BYTE *)(v4 + 49), *(_QWORD *)(v4 + 56));
}

uint64_t sub_234CF35A8()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LanguageAwareLineHeightRatioFontModifier, &type metadata for LanguageAwareLineHeightRatioFontModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LanguageAwareLineHeightRatioFontModifier, &type metadata for LanguageAwareLineHeightRatioFontModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LanguageAwareLineHeightRatioFontModifier, &type metadata for LanguageAwareLineHeightRatioFontModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
  }
  return result;
}

uint64_t outlined init with copy of AttributedString.AdaptiveImageGlyph?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (void (*)(uint64_t))MEMORY[0x24BDC46B0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Text.Encapsulation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  result = a9;
  if (a9 != 1)
    return swift_retain();
  return result;
}

uint64_t outlined consume of Text.Encapsulation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  result = a9;
  if (a9 != 1)
    return swift_release();
  return result;
}

uint64_t outlined consume of TypesettingLanguage.Resolved(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of TypesettingLanguage.Resolved(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined release of TextLayoutProperties(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *outlined retain of Text.ResolvedProperties(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)a1[7];
  v3 = a1[8];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v8 = (void *)a1[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
  v9 = v8;
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for NSAttributedString.EncodedFontMetrics()
{
  return &type metadata for NSAttributedString.EncodedFontMetrics;
}

void type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for AnyDynamicFontModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier;
  if (!lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.WeightModifier, &type metadata for Font.WeightModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier;
  if (!lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier)
  {
    result = MEMORY[0x23B7C9C04]("a>;\x1Bl5\n", &type metadata for Font.WeightModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier;
  if (!lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.WeightModifier, &type metadata for Font.WeightModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier);
  }
  return result;
}

uint64_t EnvironmentValues.textJustification.getter@<X0>(__int16 *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextJustification.Full(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextJustification.Storage(__int16 *a1, _WORD *a2)
{
  __int16 v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a1;
  result = *a2 == 2 && v3 == 2;
  if (v3 != 2 && *a2 != 2)
    return (((v2 & 1) == 0) ^ (unsigned __int16)*a2) & (((v2 & 0x100) == 0) ^ ((unsigned __int16)(*a2 & 0x100) >> 8));
  return result;
}

void static TextJustification.none.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static TextJustification.full.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static TextJustification.stretched.getter(_WORD *a1@<X8>)
{
  *a1 = 257;
}

uint64_t static TextJustification.stretched(_:)@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  __int16 v2;

  if ((result & 1) != 0)
    v2 = 257;
  else
    v2 = 1;
  *a2 = v2;
  return result;
}

uint64_t static TextJustification.full(allLines:flexible:)@<X0>(uint64_t result@<X0>, char a2@<W1>, _WORD *a3@<X8>)
{
  __int16 v3;

  if ((a2 & 1) != 0)
    v3 = 256;
  else
    v3 = 0;
  *a3 = v3 & 0xFFFE | result & 1;
  return result;
}

uint64_t static TextJustification.== infix(_:_:)(__int16 *a1, __int16 *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;

  v2 = *a1;
  v3 = *a2;
  v4 = *a2;
  if (*a1 == 2)
  {
    if (v4 == 2)
      return 1;
  }
  else if (v4 != 2
         && ((v2 & 1) == 0) != (v3 & 1)
         && ((((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8)) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextJustification(__int16 *a1, _WORD *a2)
{
  __int16 v2;
  int v3;

  v2 = *a1;
  v3 = (unsigned __int16)*a2;
  if (*a1 == 2)
    return *a2 == 2;
  if (*a2 == 2 || ((((v2 & 1) == 0) ^ v3) & 1) == 0)
    return 0;
  return ((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextJustificationKey(_WORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EnvironmentValues.textJustification.setter(__int16 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.justification(_:)(__int16 *a1, uint64_t a2, uint64_t a3)
{
  __int16 v5;
  uint64_t *KeyPath;
  __int16 v8;

  v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.textJustification : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int16 v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t sub_234CF3C1C(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return EnvironmentValues.textJustification.setter(&v2);
}

uint64_t getEnumTagSinglePayload for TextJustification(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for TextJustification(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234CF3D4C + 4 * byte_2352983A5[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_234CF3D80 + 4 * byte_2352983A0[v4]))();
}

uint64_t sub_234CF3D80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234CF3D88(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234CF3D90);
  return result;
}

uint64_t sub_234CF3D9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234CF3DA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234CF3DA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234CF3DB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextJustification()
{
  return &type metadata for TextJustification;
}

uint64_t sub_234CF3DCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<TextJustification>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextJustification>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextJustification>)
  {
    v4 = type metadata accessor for _EnvironmentKeyWritingModifier(0, (uint64_t)&type metadata for TextJustification, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextJustification>);
  }
}

uint64_t getEnumTagSinglePayload for TextJustification.Storage(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 65282;
    if (a2 + 65282 <= 0xFFFEFFFF)
      v3 = 2;
    else
      v3 = 4;
    if (v2 < 0xFF0000)
      v3 = 1;
    if (v2 >= 0x10000)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234CF3ECC + 4 * byte_2352983AA[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for TextJustification.Storage(_WORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 65282;
  if (a3 + 65282 <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234CF3F88 + 4 * byte_2352983B4[v5]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_234CF3FBC + 4 * byte_2352983AF[v5]))();
}

uint64_t sub_234CF3FBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234CF3FC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234CF3FCCLL);
  return result;
}

uint64_t sub_234CF3FD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234CF3FE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234CF3FE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234CF3FEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

_WORD *destructiveInjectEnumTag for TextJustification.Storage(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextJustification.Storage()
{
  return &type metadata for TextJustification.Storage;
}

ValueMetadata *type metadata accessor for TextJustificationKey()
{
  return &type metadata for TextJustificationKey;
}

uint64_t storeEnumTagSinglePayload for TextJustification.Full(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234CF4088 + 4 * byte_2352983BE[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_234CF40BC + 4 * byte_2352983B9[v4]))();
}

uint64_t sub_234CF40BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234CF40C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234CF40CCLL);
  return result;
}

uint64_t sub_234CF40D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234CF40E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234CF40E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234CF40EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextJustification.Full()
{
  return &type metadata for TextJustification.Full;
}

uint64_t HStack._tree.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _HStackLayout, *(_QWORD *)(a1 + 16), (uint64_t)&protocol witness table for _HStackLayout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t HStack._tree.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _HStackLayout, *(_QWORD *)(a2 + 16), (uint64_t)&protocol witness table for _HStackLayout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
}

uint64_t (*HStack._tree.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t HStack.init(alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  _QWORD v6[2];
  char v7;

  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return _VariadicView.Tree.init(_:content:)((uint64_t)v6, (void (*)(uint64_t))partial apply for closure #1 in ZStack.init(alignment:content:), (uint64_t)&type metadata for _HStackLayout, a4, (uint64_t)&protocol witness table for _HStackLayout, a5);
}

double static HStack._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int ShouldRecordTree;
  double result;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v32;
  uint64_t v33;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v28 = *((_DWORD *)a2 + 9);
  v29 = *((_DWORD *)a2 + 8);
  v11 = a2[5];
  v12 = a2[6];
  v26 = *((_DWORD *)a2 + 15);
  v27 = *((_DWORD *)a2 + 14);
  v24 = *((_DWORD *)a2 + 17);
  v25 = *((_DWORD *)a2 + 16);
  v22 = *((_DWORD *)a2 + 19);
  v23 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 7);
  v21 = *((_DWORD *)a2 + 20);
  v36 = a3;
  v37 = a4;
  LODWORD(v54) = v6;
  v13 = type metadata accessor for HStack(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v13, v14, v15);
  v16 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _HStackLayout, a3, (uint64_t)&protocol witness table for _HStackLayout);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static HStack._makeView(view:inputs:), v16, &v35);
  v17 = v35;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v54 = v7;
  v56 = v9;
  v55 = v8;
  v57 = v10;
  v58 = v20;
  v60 = v28;
  v61 = v11;
  v62 = v12;
  v63 = v27;
  v64 = v26;
  v65 = v25;
  v66 = v24;
  v67 = v23;
  v68 = v22;
  v69 = v21;
  v32 = v17;
  v38 = v7;
  v39 = v8;
  v40 = v9;
  v41 = v10;
  v42 = v20;
  v43 = 0;
  v44 = v28;
  v45 = v11;
  v46 = v12;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v51 = v23;
  v52 = v22;
  v53 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v32, (uint64_t)&v38, (uint64_t)&type metadata for _HStackLayout, a3, (uint64_t)protocol witness table for _HStackLayout, a4, (uint64_t)&v33);
  v59 = v29;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v33, (uint64_t)&v54);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a5 = v33;
  result = v34;
  a5[1] = v34;
  return result;
}

uint64_t closure #1 in static HStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v9[2] = type metadata accessor for HStack(0, a2, a3, a4);
  v10 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _HStackLayout, a2, (uint64_t)&protocol witness table for _HStackLayout);
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, v10, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v11;
}

uint64_t partial apply for closure #1 in static HStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static HStack._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for HStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HStack);
}

double protocol witness for static View._makeView(view:inputs:) in conformance HStack<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static HStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t _HStackLayout.alignment.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HStackLayout.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_HStackLayout.spacing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _HStackLayout.majorAxis.getter()
{
  return 0;
}

uint64_t static _HStackLayout.implicitRoot.getter()
{
  if (one-time initialization token for center != -1)
    swift_once();
  return static VerticalAlignment.center;
}

uint64_t protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _HStackLayout@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for center != -1)
    result = swift_once();
  *(_QWORD *)a1 = static VerticalAlignment.center;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t HStackLayout.alignment.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*HStackLayout.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t HStackLayout.spacing.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t HStackLayout.spacing.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*HStackLayout.spacing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t instantiation function for generic protocol witness table for <> HStack<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type HStack<EmptyView> and conformance <> HStack<A>(&lazy protocol witness table cache variable for type HStack<EmptyView> and conformance <> HStack<A>, (uint64_t)&protocol conformance descriptor for <> HStack<A>, a3, a4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type HStack<EmptyView> and conformance <> HStack<A>(&lazy protocol witness table cache variable for type HStack<EmptyView> and conformance <> HStack<A>, (uint64_t)&protocol conformance descriptor for <> HStack<A>, a3, a4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for HStack<EmptyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for HStack<EmptyView>)
  {
    v4 = type metadata accessor for HStack(0, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for HStack<EmptyView>);
  }
}

uint64_t lazy protocol witness table accessor for type HStack<EmptyView> and conformance <> HStack<A>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for HStack<EmptyView>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](a2, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment;
  if (!lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalAlignment, &type metadata for VerticalAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment;
  if (!lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalAlignment, &type metadata for VerticalAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _HStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for HStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout;
  if (!lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HStackLayout, &type metadata for HStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout;
  if (!lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HStackLayout, &type metadata for HStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout);
  }
  return result;
}

uint64_t type metadata completion function for HStack(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for _VariadicView.Tree(319, (uint64_t)&type metadata for _HStackLayout, *(_QWORD *)(a1 + 16), (uint64_t)&protocol witness table for _HStackLayout);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 17) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CF4A44 + 4 * byte_2352984C0[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for HStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 17) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 17) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for _HStackLayout()
{
  return &type metadata for _HStackLayout;
}

ValueMetadata *type metadata accessor for HStackLayout()
{
  return &type metadata for HStackLayout;
}

double UnitRect.x.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void UnitRect.x.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*UnitRect.x.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double UnitRect.y.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void UnitRect.y.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*UnitRect.y.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double UnitRect.width.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void UnitRect.width.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*UnitRect.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double UnitRect.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void UnitRect.height.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*UnitRect.height.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void UnitRect.init(x:y:width:height:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

void UnitRect.init(point:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

__C::CGRect __swiftcall UnitRect.in(_:)(CGSize a1)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  __C::CGRect result;

  v2 = v1[2] * a1.width;
  v3 = v1[3] * a1.height;
  v4 = *v1 * a1.width;
  v5 = v1[1] * a1.height;
  result.size.height = v3;
  result.size.width = v2;
  result.origin.y = v5;
  result.origin.x = v4;
  return result;
}

__C::CGRect __swiftcall UnitRect.in(_:)(__C::CGRect a1)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  __C::CGRect result;

  v2 = *v1 * a1.size.width + a1.origin.x;
  v3 = v1[1] * a1.size.height + a1.origin.y;
  v4 = v1[2] * a1.size.width;
  v5 = v1[3] * a1.size.height;
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

__n128 one-time initialization function for one()
{
  __n128 result;

  static UnitRect.one = 0uLL;
  __asm { FMOV            V0.2D, #1.0 }
  xmmword_254264F20 = (__int128)result;
  return result;
}

double static UnitRect.one.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (one-time initialization token for one != -1)
    swift_once();
  result = *(double *)&static UnitRect.one;
  v3 = xmmword_254264F20;
  *a1 = static UnitRect.one;
  a1[1] = v3;
  return result;
}

void UnitRect.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v0;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
}

Swift::Int UnitRect.hashValue.getter()
{
  Hasher.init(_seed:)();
  UnitRect.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitRect()
{
  Hasher.init(_seed:)();
  UnitRect.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitRect()
{
  Hasher.init(_seed:)();
  UnitRect.hash(into:)();
  return Hasher._finalize()();
}

double UnitRect.animatableData.getter()
{
  double *v0;

  return *v0 * 128.0;
}

double UnitRect.animatableData.setter(double a1, double a2, double a3, double a4)
{
  double *v4;
  double result;

  *v4 = a1 * 0.0078125;
  v4[1] = a2 * 0.0078125;
  result = a4 * 0.0078125;
  v4[2] = a3 * 0.0078125;
  v4[3] = a4 * 0.0078125;
  return result;
}

__n128 (*UnitRect.animatableData.modify(float64x2_t **a1))(uint64_t *a1)
{
  float64x2_t *v1;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  v3 = (float64x2_t *)malloc(0x28uLL);
  *a1 = v3;
  *(_QWORD *)&v3[2].f64[0] = v1;
  v4 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v5 = vmulq_f64(*v1, v4);
  v6 = vmulq_f64(v1[1], v4);
  *v3 = v5;
  v3[1] = v6;
  return UnitRect.animatableData.modify;
}

__n128 UnitRect.animatableData.modify(uint64_t *a1)
{
  uint64_t v1;
  float64x2_t *v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  __n128 result;

  v1 = *a1;
  v2 = *(float64x2_t **)(v1 + 32);
  v3 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v4 = vmulq_f64(*(float64x2_t *)v1, v3);
  v5 = vmulq_f64(*(float64x2_t *)(v1 + 16), v3);
  *v2 = v4;
  v2[1] = v5;
  free((void *)v1);
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.getter in conformance UnitRect@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t *v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v3 = vmulq_f64(*v1, v2);
  result = vmulq_f64(v1[1], v2);
  *a1 = v3;
  a1[1] = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.setter in conformance UnitRect(float64x2_t *a1)
{
  float64x2_t *v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v3 = vmulq_f64(*a1, v2);
  result = vmulq_f64(a1[1], v2);
  *v1 = v3;
  v1[1] = result;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance UnitRect(float64x2_t ***a1))(_QWORD *a1)
{
  float64x2_t **v2;

  v2 = (float64x2_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float64x2_t *)UnitRect.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

BOOL specialized static UnitRect.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

float64x2_t sub_234CF50EC@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v3 = vmulq_f64(*a1, v2);
  result = vmulq_f64(a1[1], v2);
  *a2 = v3;
  a2[1] = result;
  return result;
}

float64x2_t sub_234CF5108(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v3 = vmulq_f64(*a1, v2);
  result = vmulq_f64(a1[1], v2);
  *a2 = v3;
  a2[1] = result;
  return result;
}

ValueMetadata *type metadata accessor for UnitRect()
{
  return &type metadata for UnitRect;
}

uint64_t key path getter for _ViewInputs.transform : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 60);
  return result;
}

uint64_t CoordinateSpaceGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CoordinateSpace(v1, a1);
}

uint64_t CoordinateSpaceGesture.coordinateSpace.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of CoordinateSpace(a1, v1);
}

uint64_t outlined assign with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  assignWithTake for CoordinateSpace(a2, a1);
  return a2;
}

uint64_t (*CoordinateSpaceGesture.coordinateSpace.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoordinateSpaceGesture.init(coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of CoordinateSpace(a1, a2);
}

uint64_t outlined init with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t static CoordinateSpaceGesture._makeGesture(modifier:inputs:body:)(unsigned int *a1, __int128 *a2, void (*a3)(_OWORD *), uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  id v19;
  unsigned int IndirectAttribute2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v41;
  unsigned int v42;
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[6];
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[28];
  _BYTE v56[32];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[28];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v38 = *a1;
  *(_OWORD *)v64 = a2[6];
  *(_OWORD *)&v64[12] = *(__int128 *)((char *)a2 + 108);
  v5 = a2[1];
  v58 = *a2;
  v59 = v5;
  v6 = a2[3];
  v60 = a2[2];
  v61 = v6;
  v7 = a2[5];
  v62 = a2[4];
  v63 = v7;
  v30 = *(_DWORD *)&v64[12];
  v8 = v58;
  v9 = DWORD2(v58);
  v10 = v59;
  v11 = DWORD2(v59);
  v12 = HIDWORD(v59);
  v36 = DWORD2(v59);
  v37 = DWORD2(v58);
  v13 = v60;
  v14 = DWORD1(v60);
  v34 = v60;
  v35 = HIDWORD(v59);
  v28 = *((_QWORD *)&v60 + 1);
  v26 = v61;
  v15 = DWORD2(v61);
  v32 = DWORD2(v61);
  v33 = DWORD1(v60);
  v16 = v62;
  v31 = v62;
  v27 = HIDWORD(v61);
  v17 = *((_QWORD *)&v62 + 1);
  v42 = DWORD1(v62);
  v43 = v7;
  v41 = *((_QWORD *)&v7 + 1);
  outlined retain of _GestureInputs((uint64_t)&v58);
  AGGraphClearUpdate();
  v29 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  *(_QWORD *)&v49 = v8;
  DWORD2(v49) = v9;
  *(_QWORD *)&v50 = v10;
  *((_QWORD *)&v50 + 1) = __PAIR64__(v12, v11);
  *(_QWORD *)&v51 = __PAIR64__(v14, v13);
  *((_QWORD *)&v51 + 1) = v28;
  *(_QWORD *)&v52 = v26;
  *((_QWORD *)&v52 + 1) = __PAIR64__(v27, v15);
  *(_QWORD *)&v53 = __PAIR64__(v42, v16);
  *((_QWORD *)&v53 + 1) = v17;
  LODWORD(v54) = v43;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v49);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v57 = 0;
  memset(v56, 0, sizeof(v56));
  outlined retain of _GestureInputs((uint64_t)&v58);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v56, 0);
  AGGraphClearUpdate();
  v19 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)&v58);
  *(_QWORD *)&v47[0] = __PAIR64__(v30, v38);
  *((_QWORD *)&v47[0] + 1) = __PAIR64__(IndirectAttribute2, v18);
  v45 = type metadata accessor for CoordinateSpaceEvents(0, a5, v21, v22);
  v46 = MEMORY[0x23B7C9C04]("с<\x1B$<\v", v45);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Attribute<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v47, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)v44, v45, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
  *(_QWORD *)&v49 = v8;
  DWORD2(v49) = v37;
  *(_QWORD *)&v50 = v10;
  *((_QWORD *)&v50 + 1) = __PAIR64__(v35, v36);
  *(_QWORD *)&v51 = __PAIR64__(v33, v34);
  *((_QWORD *)&v51 + 1) = v28;
  *(_QWORD *)&v52 = v26;
  *((_QWORD *)&v52 + 1) = __PAIR64__(v27, v32);
  *(_QWORD *)&v53 = __PAIR64__(v42, v31);
  *((_QWORD *)&v53 + 1) = v17;
  LODWORD(v54) = v43;
  *((_QWORD *)&v54 + 1) = v41;
  *(_QWORD *)v55 = *(_QWORD *)v64;
  *(_DWORD *)&v55[8] = *(_DWORD *)&v64[8];
  *(_QWORD *)&v55[16] = *(_QWORD *)&v64[16];
  *(_DWORD *)&v55[24] = *(_DWORD *)&v64[24] | 1;
  v47[4] = v53;
  v47[5] = v54;
  v48[0] = *(_OWORD *)v55;
  *(_OWORD *)((char *)v48 + 12) = *(_OWORD *)&v55[12];
  v47[0] = v49;
  v47[1] = v50;
  v47[2] = v51;
  v47[3] = v52;
  outlined retain of _GestureInputs((uint64_t)&v49);
  a3(v47);
  outlined release of _GestureInputs((uint64_t)&v49);
  return outlined release of _GestureInputs((uint64_t)&v49);
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance CoordinateSpaceGesture<A>(unsigned int *a1, __int128 *a2, void (*a3)(_OWORD *), uint64_t a4, uint64_t a5)
{
  return static CoordinateSpaceGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

void Gesture.coordinateSpace(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[48];
  _BYTE v13[48];

  outlined init with copy of CoordinateSpace(a1, (uint64_t)v12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  outlined init with take of CoordinateSpace((uint64_t)v12, (uint64_t)v13);
  v10 = type metadata accessor for CoordinateSpaceGesture(0, AssociatedTypeWitness, v8, v9);
  v11 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CoordinateSpaceGesture<A>, v10);
  Gesture.modifier<A>(_:)((uint64_t)v13, a2, v10, a3, v11, a4);
}

uint64_t sub_234CF5690()
{
  uint64_t v0;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(&v2, v0);
}

uint64_t CoordinateSpaceEvents.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Value;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  char v23;
  _BYTE v24[48];
  uint64_t v25;

  type metadata accessor for [EventID : EventType]();
  v25 = *(_QWORD *)AGGraphGetValue();
  v6 = type metadata accessor for CoordinateSpaceGesture(0, a3, v4, v5);
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(&v18, Value, v6);
  outlined init with take of CoordinateSpace((uint64_t)&v18, (uint64_t)v24);
  outlined init with copy of CoordinateSpace((uint64_t)v24, (uint64_t)&v18);
  if (v23)
  {
    if (v23 != 1 && !(*(_QWORD *)&v21 | *(_QWORD *)&v22 | v18 | *(_QWORD *)&v20 | *(_QWORD *)&v19))
    {
      swift_bridgeObjectRetain();
      specialized defaultConvertEventLocations<A>(_:converter:)(&v25);
      outlined destroy of CoordinateSpace((uint64_t)v24);
      return v25;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of CoordinateSpace((uint64_t)&v18);
  }
  AGGraphClearUpdate();
  v8 = AGGraphGetValue();
  v9 = *(double *)(v8 + 8);
  v10 = *(double *)(v8 + 16);
  v11 = *(double *)(v8 + 24);
  v12 = *(double *)(v8 + 32);
  v18 = *(_QWORD *)v8;
  swift_retain();
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  v13 = (double *)AGGraphGetValue();
  v14 = *v13;
  v15 = v13[1];
  v16 = AGGraphSetUpdate();
  v21 = v11 - (v14 - v9);
  v22 = v12 - (v15 - v10);
  v19 = v14;
  v20 = v15;
  MEMORY[0x24BDAC7A8](v16);
  specialized defaultConvertEventLocations<A>(_:converter:)(&v25, (void (*)(_QWORD **))partial apply for closure #4 in CoordinateSpaceEvents.value.getter);
  outlined destroy of CoordinateSpace((uint64_t)v24);
  swift_release();
  return v25;
}

uint64_t specialized defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1, void (*a2)(_QWORD **))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  double v39;
  double v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  Swift::UInt *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v66[2];
  uint64_t v67;
  __int128 v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD v73[2];
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;

  v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v76 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = *a1;
  v62 = *a1 + 64;
  v3 = 1 << *(_BYTE *)(*a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
LABEL_6:
      v10 = *(_QWORD *)(v2 + 56);
      v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
      v13 = *v11;
      v12 = v11[1];
      *(_QWORD *)&v69 = v13;
      *((_QWORD *)&v69 + 1) = v12;
      outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v70);
      goto LABEL_13;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v14 >= v6)
    {
      v16 = v7;
    }
    else
    {
      v15 = *(_QWORD *)(v62 + 8 * v14);
      if (v15)
        goto LABEL_10;
      v16 = v7 + 1;
      if (v7 + 2 < v6)
      {
        v15 = *(_QWORD *)(v62 + 8 * (v7 + 2));
        if (v15)
        {
          v14 = v7 + 2;
LABEL_10:
          v5 = (v15 - 1) & v15;
          v9 = __clz(__rbit64(v15)) + (v14 << 6);
          v7 = v14;
          goto LABEL_6;
        }
        v16 = v7 + 2;
        if (v7 + 3 < v6)
        {
          v15 = *(_QWORD *)(v62 + 8 * (v7 + 3));
          if (v15)
          {
            v14 = v7 + 3;
            goto LABEL_10;
          }
          v14 = v7 + 4;
          v16 = v7 + 3;
          if (v7 + 4 < v6)
          {
            v15 = *(_QWORD *)(v62 + 8 * v14);
            if (v15)
              goto LABEL_10;
            while (v6 - 5 != v7)
            {
              v15 = *(_QWORD *)(v2 + 104 + 8 * v7++);
              if (v15)
              {
                v14 = v7 + 4;
                goto LABEL_10;
              }
            }
            v16 = v6 - 1;
          }
        }
      }
    }
    v5 = 0;
    v72 = 0;
    v70 = 0u;
    v71 = 0u;
    v7 = v16;
    v69 = 0u;
LABEL_13:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v69, (uint64_t)v73);
    v17 = v73[0];
    if (!v73[0])
      break;
    v18 = v73[1];
    outlined init with take of ScrollStateRequest(&v74, (uint64_t)v68);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest(v66, (uint64_t)&v69);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v19 = v64;
      else
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
      v21 = v19[2];
      v20 = v19[3];
      if (v21 >= v20 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
      v19[2] = v21 + 1;
      v64 = v19;
      v22 = &v19[2 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v23 = *((_QWORD *)&v70 + 1);
      v24 = v71;
      __swift_project_boxed_opaque_existential_1(&v69, *((uint64_t *)&v70 + 1));
      v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
      v27 = v26;
      v28 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
      v30 = v28[2];
      v29 = v28[3];
      if (v30 >= v29 >> 1)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
      v28[2] = v30 + 1;
      v31 = (double *)&v28[2 * v30];
      v31[4] = v25;
      *((_QWORD *)v31 + 5) = v27;
      v76 = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    }
    else
    {
      v67 = 0;
      memset(v66, 0, sizeof(v66));
      outlined destroy of SpatialEventType?((uint64_t)v66);
    }
  }
  swift_release();
  if (v76[2])
  {
    a2(&v76);
    v63 = v64[2];
    if (v63)
    {
      v32 = v76;
      v61 = v76[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = 0;
      v34 = 0;
      while (1)
      {
        if (v61 == v34)
        {
LABEL_58:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        }
        if (v34 >= v32[2])
          goto LABEL_61;
        v36 = *a1;
        if (!*(_QWORD *)(*a1 + 16))
          goto LABEL_62;
        v37 = v64[v33 + 4];
        v38 = v64[v33 + 5];
        v39 = *(double *)&v32[v33 + 4];
        v40 = *(double *)&v32[v33 + 5];
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        if ((v42 & 1) == 0)
          goto LABEL_63;
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v36 + 56) + 40 * v41, (uint64_t)v68);
        outlined init with take of ScrollStateRequest(v68, (uint64_t)&v69);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        v43 = *((_QWORD *)&v74 + 1);
        v44 = v75;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v73, *((uint64_t *)&v74 + 1));
        (*(void (**)(uint64_t, uint64_t, double, double))(v44 + 48))(v43, v44, v39, v40);
        outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v68);
        swift_dynamicCast();
        outlined init with take of ScrollStateRequest(&v69, (uint64_t)v66);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46 = (_QWORD *)*a1;
        *a1 = 0x8000000000000000;
        v48 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        v49 = v46[2];
        v50 = (v47 & 1) == 0;
        v51 = v49 + v50;
        if (__OFADD__(v49, v50))
          goto LABEL_64;
        v52 = v47;
        if (v46[3] >= v51)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v47 & 1) == 0)
              goto LABEL_54;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v52 & 1) == 0)
              goto LABEL_54;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
          v53 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
          if ((v52 & 1) != (v54 & 1))
            goto LABEL_66;
          v48 = v53;
          if ((v52 & 1) == 0)
          {
LABEL_54:
            v46[(v48 >> 6) + 8] |= 1 << v48;
            v55 = (Swift::UInt *)(v46[6] + 16 * v48);
            *v55 = v37;
            v55[1] = v38;
            outlined init with take of ScrollStateRequest(v66, v46[7] + 40 * v48);
            v56 = v46[2];
            v57 = __OFADD__(v56, 1);
            v58 = v56 + 1;
            if (v57)
              goto LABEL_65;
            v46[2] = v58;
            goto LABEL_42;
          }
        }
        v35 = v46[7] + 40 * v48;
        __swift_destroy_boxed_opaque_existential_1(v35);
        outlined init with take of ScrollStateRequest(v66, v35);
LABEL_42:
        ++v34;
        *a1 = (uint64_t)v46;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        v33 += 2;
        if (v63 == v34)
          goto LABEL_58;
      }
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in CoordinateSpaceEvents.value.getter(uint64_t a1, double *a2, uint64_t a3)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _QWORD v9[5];
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[3];
  v7 = a2[4];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v12 = 2;
  outlined init with copy of CoordinateSpace(a3, (uint64_t)v13);
  v13[41] = 4;
  if (v3 != 0.0 || v6 != 0.0 || v7 != 0.0)
  {
    *(double *)v9 = v3;
    v9[1] = v4;
    v9[2] = v5;
    *(double *)&v9[3] = v6;
    *(double *)&v9[4] = v7;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v10, (uint64_t)v9);
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v10);
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance CoordinateSpaceEvents<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = CoordinateSpaceEvents.value.getter(*v2, v2[1], *(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CoordinateSpaceEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoordinateSpaceEvents);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for [EventID : EventType]();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata accessor for CoordinateSpaceGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoordinateSpaceGesture);
}

uint64_t destroy for CoordinateSpaceGesture(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40))
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for CoordinateSpaceGesture(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for CoordinateSpaceGesture(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    if (*((_BYTE *)a2 + 40))
    {
      v4 = *a2;
      v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

_OWORD *assignWithTake for CoordinateSpaceGesture(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace((uint64_t)a1);
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CoordinateSpaceGesture(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoordinateSpaceGesture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

void base witness table accessor for _AttributeBody in CoordinateSpaceEvents<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #4 in CoordinateSpaceEvents.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #4 in CoordinateSpaceEvents.value.getter(a1, *(double **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined destroy of SpatialEventType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for SpatialEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for SpatialEventType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SpatialEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for SpatialEventType);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpatialEventType?);
  }
}

void _CompositingGroupEffect.effectValue(size:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 19;
}

uint64_t static _CompositingGroupEffect.== infix(_:_:)()
{
  return 1;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _CompositingGroupEffect(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 19;
}

uint64_t View.compositingGroup()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _CompositingGroupEffect, a2);
}

unint64_t instantiation function for generic protocol witness table for _CompositingGroupEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _CompositingGroupEffect and conformance _CompositingGroupEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _CompositingGroupEffect and conformance _CompositingGroupEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CompositingGroupEffect and conformance _CompositingGroupEffect;
  if (!lazy protocol witness table cache variable for type _CompositingGroupEffect and conformance _CompositingGroupEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _CompositingGroupEffect, &type metadata for _CompositingGroupEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CompositingGroupEffect and conformance _CompositingGroupEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for _CompositingGroupEffect()
{
  return &type metadata for _CompositingGroupEffect;
}

uint64_t sub_234CF6400(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _CompositingGroupEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _CompositingGroupEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void Gesture.modifier<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a3;
  v24 = a2;
  v25 = v22;
  v26 = a4;
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234CF6538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void static ModifierGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for ModifierGesture();
}

double sub_234CF65F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD v36[2];
  int v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;

  type metadata accessor for _GraphValue(0, a1, a3, a4);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifierGesture._makeGesture(gesture:inputs:), v5, v36);
  v31 = v5;
  v32 = v8;
  v33 = v6;
  v34 = v7;
  v35 = v10;
  v12 = *(_OWORD *)(v11 - 128);
  v43 = *(_OWORD *)(v11 - 144);
  v44 = v12;
  v45 = *(_OWORD *)(v11 - 112);
  v46 = *(_QWORD *)(v11 - 96);
  v13 = *(_OWORD *)(v11 - 192);
  v39 = *(_OWORD *)(v11 - 208);
  v40 = v13;
  v14 = *(_OWORD *)(v11 - 160);
  v41 = *(_OWORD *)(v11 - 176);
  v42 = v14;
  v47 = v9;
  (*(void (**)(_QWORD *, __int128 *, void (*)(), uint64_t *, uint64_t, uint64_t))(v6 + 24))(v36, &v39, partial apply for closure #2 in static ModifierGesture._makeGesture(gesture:inputs:), &v30, v5, v6);
  if ((v9 & 8) != 0 && !(swift_conformsToProtocol2() ? v5 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v16 = 2;
    else
      v16 = 1;
    v38 = v16;
    v17 = *(_OWORD *)(v11 - 128);
    v43 = *(_OWORD *)(v11 - 144);
    v44 = v17;
    v45 = *(_OWORD *)(v11 - 112);
    v46 = *(_QWORD *)(v11 - 96);
    v18 = *(_OWORD *)(v11 - 192);
    v39 = *(_OWORD *)(v11 - 208);
    v40 = v18;
    v19 = *(_OWORD *)(v11 - 160);
    v41 = *(_OWORD *)(v11 - 176);
    v42 = v19;
    v47 = v9;
    v20 = *(_QWORD *)(v11 - 224);
    v21 = *(_DWORD *)(v11 - 216);
    v36[0] = *(_QWORD *)(v11 - 232);
    v36[1] = v20;
    v37 = v21;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v25 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v23, v24);
    v26 = _GestureOutputs.debugData.getter();
    LOBYTE(v36[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v5, &v38, 0x100000000, &v39, v26 | ((HIDWORD(v26) & 1) << 32), 0x100000000, v25);
  }
  v27 = *(_QWORD *)(v11 - 224);
  v28 = *(_DWORD *)(v11 - 216);
  result = *(double *)(v11 - 232);
  *(double *)v4 = result;
  *(_QWORD *)(v4 + 8) = v27;
  *(_DWORD *)(v4 + 16) = v28;
  return result;
}

void closure #1 in static ModifierGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234CF67E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 52);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v9;
}

void closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for ModifierGesture();
}

double sub_234CF68C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  _QWORD v25[2];
  int v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  double v37;
  uint64_t v38;
  int v39;

  type metadata accessor for _GraphValue(0, a1, a3, a4);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:), v5, v25);
  v9 = *(_OWORD *)(v8 - 112);
  v32 = *(_OWORD *)(v8 - 128);
  v33 = v9;
  v34 = *(_OWORD *)(v8 - 96);
  v35 = *(_QWORD *)(v8 - 80);
  v10 = *(_OWORD *)(v8 - 176);
  v28 = *(_OWORD *)(v8 - 192);
  v29 = v10;
  v11 = *(_OWORD *)(v8 - 144);
  v30 = *(_OWORD *)(v8 - 160);
  v31 = v11;
  v36 = v7;
  (*(void (**)(double *__return_ptr, _QWORD *, __int128 *, uint64_t, uint64_t))(v6 + 32))(&v37, v25, &v28, v5, v6);
  if ((v7 & 8) != 0 && !(swift_conformsToProtocol2() ? v5 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v13 = 2;
    else
      v13 = 1;
    v27 = v13;
    v14 = *(_OWORD *)(v8 - 112);
    v32 = *(_OWORD *)(v8 - 128);
    v33 = v14;
    v34 = *(_OWORD *)(v8 - 96);
    v35 = *(_QWORD *)(v8 - 80);
    v15 = *(_OWORD *)(v8 - 176);
    v28 = *(_OWORD *)(v8 - 192);
    v29 = v15;
    v16 = *(_OWORD *)(v8 - 144);
    v30 = *(_OWORD *)(v8 - 160);
    v31 = v16;
    v36 = v7;
    *(double *)v25 = v37;
    v25[1] = v38;
    v26 = v39;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v20 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v18, v19);
    v21 = _GestureOutputs.debugData.getter();
    LOBYTE(v25[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v5, &v27, 0x100000000, &v28, v21 | ((HIDWORD(v21) & 1) << 32), 0x100000000, v20);
  }
  v22 = v38;
  v23 = v39;
  result = v37;
  *(double *)v4 = v37;
  *(_QWORD *)(v4 + 8) = v22;
  *(_DWORD *)(v4 + 16) = v23;
  return result;
}

void closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234CF6AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, v1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v8;
}

void partial apply for closure #1 in static ModifierGesture._makeGesture(gesture:inputs:)()
{
  closure #1 in static ModifierGesture._makeGesture(gesture:inputs:)();
}

void type metadata accessor for ModifierGesture()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void partial apply for closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)()
{
  closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)();
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance ModifierGesture<A, B>()
{
  static ModifierGesture._makeGesture(gesture:inputs:)();
}

uint64_t instantiation function for generic protocol witness table for ModifierGesture<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static GestureModifier._makeGesture(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t type metadata completion function for ModifierGesture()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModifierGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t destroy for ModifierGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifierGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CF6FAC + 4 * byte_235298958[v17 - 1]))();
}

void storeEnumTagSinglePayload for ModifierGesture(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void partial apply for closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)()
{
  closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)();
}

uint64_t _ResolvedKeyframes.append<A>(keyPath:path:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  AnimationPath.duration.getter(a2, *(_QWORD *)(*MEMORY[0x24BEE2B70] + *a1 + 8), a4, a4);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a1;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a4;
  v9[3] = a2;
  v9[4] = a1;
  type metadata accessor for _ResolvedKeyframes.Track(255, *(_QWORD *)(a3 + 16), v10, v11);
  type metadata accessor for Array();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  return Array.append(_:)();
}

void protocol witness for Keyframes.body.getter in conformance KeyframeTrack<A, B, C>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for KeyframeTrack<A, B, C>, a1);
  specialized PrimitiveKeyframes.body.getter();
}

void PrimitiveKeyframes.body.getter()
{
  specialized PrimitiveKeyframes.body.getter();
}

void protocol witness for Keyframes.body.getter in conformance EmptyKeyframes<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyKeyframes<A>, a1);
  specialized PrimitiveKeyframes.body.getter();
}

void protocol witness for Keyframes.body.getter in conformance CombinedKeyframes<A, B, C>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedKeyframes<A, B, C>, a1);
  specialized PrimitiveKeyframes.body.getter();
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t Keyframes<>._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t, double))(a5 + 32))(a4, a5, v12);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
}

void protocol witness for Keyframes.body.getter in conformance Never()
{
  Never.body.getter();
  __break(1u);
}

uint64_t AnyKeyframes.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnyKeyframes._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, a2, a3, v7, v8);
}

void protocol witness for Keyframes.body.getter in conformance AnyKeyframes<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyKeyframes<A>, a1);
  specialized PrimitiveKeyframes.body.getter();
}

uint64_t closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(double a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, _QWORD, uint64_t, double))
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t *, _QWORD);
  uint64_t v12;
  uint64_t v14;

  v10 = *a4;
  v11 = (uint64_t (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  a6(v12, a3, *(_QWORD *)(*MEMORY[0x24BEE2B70] + v10 + 8), a5, a1);
  return v11(&v14, 0);
}

double _ResolvedKeyframes.duration.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;

  v1 = *(_QWORD *)(a1 + 16);
  KeyPath = swift_getKeyPath();
  type metadata accessor for _ResolvedKeyframes.Track(255, v1, v3, v4);
  v5 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v5);
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in _ResolvedKeyframes.duration.getter, KeyPath, v5, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  swift_release();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = *(double *)(v8 + 32);
    v11 = v9 - 1;
    if (v11)
    {
      v12 = (double *)(v8 + 40);
      do
      {
        v13 = *v12++;
        v14 = v13;
        if (v10 < v13)
          v10 = v14;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v10 = 0.0;
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t implicit closure #1 in _ResolvedKeyframes.duration.getter()
{
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return swift_release();
}

uint64_t _ResolvedKeyframes.update(value:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  Swift::Bool IsNativeType;
  uint64_t result;
  uint64_t v15;
  void (*v16)(uint64_t, double);

  v8 = *v5;
  v9 = type metadata accessor for _ResolvedKeyframes.Track(0, *(_QWORD *)(a2 + 16), a3, a4);
  v10 = swift_bridgeObjectRetain();
  if (!MEMORY[0x23B7C6298](v10, v9))
    return swift_bridgeObjectRelease();
  v11 = 0;
  for (i = v8 + 64; ; i += 40)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    result = Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType)
      break;
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_8;
    v16 = *(void (**)(uint64_t, double))(i - 24);
    swift_retain();
    swift_retain();
    v16(a1, a5);
    swift_release();
    swift_release();
    ++v11;
    if (v15 == MEMORY[0x23B7C6298](v8, v9))
      return swift_bridgeObjectRelease();
  }
  result = _ArrayBuffer._getElementSlowPath(_:)();
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _ResolvedKeyframes.update(velocity:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  Swift::Bool IsNativeType;
  uint64_t result;
  uint64_t v15;
  void (*v16)(uint64_t, double);

  v8 = *v5;
  v9 = type metadata accessor for _ResolvedKeyframes.Track(0, *(_QWORD *)(a2 + 16), a3, a4);
  v10 = swift_bridgeObjectRetain();
  if (!MEMORY[0x23B7C6298](v10, v9))
    return swift_bridgeObjectRelease();
  v11 = 0;
  for (i = v8 + 64; ; i += 40)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    result = Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType)
      break;
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_8;
    v16 = *(void (**)(uint64_t, double))(i - 8);
    swift_retain();
    swift_retain();
    v16(a1, a5);
    swift_release();
    swift_release();
    ++v11;
    if (v15 == MEMORY[0x23B7C6298](v8, v9))
      return swift_bridgeObjectRelease();
  }
  result = _ArrayBuffer._getElementSlowPath(_:)();
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

void specialized Keyframes.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000002352E1FC0;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveKeyframes.body.getter()
{
  specialized Keyframes.bodyError()();
}

_UNKNOWN **associated type witness table accessor for Keyframes.Body : Keyframes in Never()
{
  return &protocol witness table for Never;
}

uint64_t instantiation function for generic protocol witness table for AnyKeyframes<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyKeyframes<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of Keyframes.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Keyframes._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t type metadata accessor for AnyKeyframes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyKeyframes);
}

uint64_t type metadata accessor for _ResolvedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ResolvedKeyframes);
}

uint64_t destroy for _ResolvedKeyframes.Track()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for _ResolvedKeyframes.Track(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _ResolvedKeyframes.Track(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ResolvedKeyframes.Track(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for _ResolvedKeyframes.Track(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ResolvedKeyframes.Track);
}

uint64_t partial apply for implicit closure #1 in _ResolvedKeyframes.duration.getter()
{
  return implicit closure #1 in _ResolvedKeyframes.duration.getter();
}

uint64_t partial apply for closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(uint64_t a1, double a2)
{
  uint64_t v2;

  return closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(a2, a1, *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, double))AnimationPath.update(value:time:));
}

uint64_t objectdestroyTm_5()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in _ResolvedKeyframes.append<A>(keyPath:path:)(uint64_t a1, double a2)
{
  uint64_t v2;

  return closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(a2, a1, *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, double))AnimationPath.update(velocity:time:));
}

void VisualEffect.rendererEffect<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  VisualEffect.rendererEffect<A>(_:)(a1, a2, a3, a4, (uint64_t)&protocol conformance descriptor for RendererVisualEffect<A>, a5);
}

uint64_t type metadata accessor for RendererVisualEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RendererVisualEffect);
}

void VisualEffect.concat<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234CF7E5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void VisualEffect.geometryEffect<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  VisualEffect.rendererEffect<A>(_:)(a1, a2, a3, a4, (uint64_t)&protocol conformance descriptor for GeometryVisualEffect<A>, a5);
}

void VisualEffect.rendererEffect<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, uint64_t, uint64_t, double);
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a4;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v17(0, v15, v16, v12);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a1, a3, v19);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v21, v14, a3);
  v22 = MEMORY[0x23B7C9C04](a5, v18);
  VisualEffect.concat<A>(_:)((uint64_t)v21, a2, v18, v23, v22, a6);
}

uint64_t sub_234CF7F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t type metadata accessor for GeometryVisualEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeometryVisualEffect);
}

void sub_234CF7FD4()
{
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234CF7FF4(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedVisualEffect<A, B>, a1);
}

void type metadata accessor for CombinedVisualEffect()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void sub_234CF801C(uint64_t a1)
{
  get_witness_table_7SwiftUI12VisualEffectRzs8SendableRd__AA08RendererD0Rd__r__lAA08CombinedcD033_9FFF1526AA410727EB04F8ADBE7663C7LLVyxAA0fcD0AFLLVyqd__GGAaBHPyHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for RendererVisualEffect, (uint64_t)&protocol conformance descriptor for RendererVisualEffect<A>);
}

void sub_234CF8030(uint64_t a1)
{
  get_witness_table_7SwiftUI12VisualEffectRzs8SendableRd__AA08RendererD0Rd__r__lAA08CombinedcD033_9FFF1526AA410727EB04F8ADBE7663C7LLVyxAA0fcD0AFLLVyqd__GGAaBHPyHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for GeometryVisualEffect, (uint64_t)&protocol conformance descriptor for GeometryVisualEffect<A>);
}

void get_witness_table_7SwiftUI12VisualEffectRzs8SendableRd__AA08RendererD0Rd__r__lAA08CombinedcD033_9FFF1526AA410727EB04F8ADBE7663C7LLVyxAA0fcD0AFLLVyqd__GGAaBHPyHCTm(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;

  v4 = a2(255, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24));
  MEMORY[0x23B7C9C04](a3, v4);
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234CF8094(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedVisualEffect<A, B>, a1);
}

uint64_t getEnumTagSinglePayload for CombinedVisualEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CF8194 + 4 * byte_235298B70[v17 - 1]))();
}

void storeEnumTagSinglePayload for CombinedVisualEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t getEnumTagSinglePayload for GeometryVisualEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CF84CC + 4 * byte_235298B7E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for GeometryVisualEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)()
{
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234CF8748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t *, void (*)(), uint64_t, uint64_t, uint64_t);
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;

  type metadata accessor for _GraphValue(0, a1, a3, a4);
  v15 = *(_QWORD *)(v5 + 24);
  v16 = *(_QWORD *)(v5 + 32);
  v21 = *(_OWORD *)(v5 + 56);
  v22 = *(_OWORD *)(v5 + 40);
  v17 = *(_QWORD *)(v5 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:), v6, (_DWORD *)(v14 - 128));
  v25 = v12;
  v26 = v7;
  v27 = v10;
  v28 = v15;
  v29 = v16;
  v30 = v22;
  v31 = v21;
  v32 = v17;
  v33 = v23;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v11;
  *(_QWORD *)(v18 + 24) = v6;
  *(_QWORD *)(v18 + 32) = v9;
  *(_QWORD *)(v18 + 40) = v4;
  *(_DWORD *)(v18 + 48) = v13;
  *(_QWORD *)(v18 + 56) = v24;
  *(_QWORD *)(v18 + 64) = v8;
  v19 = *(void (**)(uint64_t, uint64_t *, void (*)(), uint64_t, uint64_t, uint64_t))(v4 + 16);
  swift_retain();
  v19(v14 - 128, &v25, partial apply for closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:), v18, v6, v4);
  return swift_release();
}

void closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)()
{
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234CF8870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 52);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  return v9;
}

void closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)()
{
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234CF894C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  type metadata accessor for _GraphValue(0, a1, a3, a4);
  v14 = *(_QWORD *)(v5 + 24);
  v15 = *(_QWORD *)(v5 + 32);
  v18 = *(_OWORD *)(v5 + 56);
  v19 = *(_OWORD *)(v5 + 40);
  v16 = *(_QWORD *)(v5 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:), v6, (_DWORD *)(v13 - 128));
  v20 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v14;
  v24 = v15;
  v25 = v19;
  v26 = v18;
  v27 = v16;
  v28 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(v13 - 128, &v20, v8, v7, v6, v4);
}

void closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)()
{
  type metadata accessor for CombinedVisualEffect();
}

uint64_t sub_234CF8A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v8;
}

void CombinedVisualEffect.animatableData.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = *(_QWORD *)(a1[4] + 8);
  v7 = a1[2];
  v8 = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v12 - v10;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v7, v6, v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v4, v3);
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  AnimatablePair.init(_:_:)((uint64_t)v11, v8, v13);
}

void protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance CombinedVisualEffect<A, B>()
{
  static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)();
}

void protocol witness for Animatable.animatableData.setter in conformance CombinedVisualEffect<A, B>(uint64_t a1, _QWORD *a2)
{
  specialized CombinedVisualEffect.animatableData.setter(a1, a2);
}

void sub_234CF8C5C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234CF8D0C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void protocol witness for Animatable.animatableData.modify in conformance CombinedVisualEffect<A, B>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234CF8E30(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  CombinedVisualEffect.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_234CF8E6C())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance CombinedVisualEffect<A, B>;
}

void protocol witness for Animatable.animatableData.modify in conformance CombinedVisualEffect<A, B>(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(_QWORD **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized CombinedVisualEffect.animatableData.setter(v2, v3);
  }
  specialized CombinedVisualEffect.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 72), v3);
}

uint64_t protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance GeometryVisualEffect<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryVisualEffect, (void (*)(uint64_t))partial apply for closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:), (uint64_t (*)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static GeometryEffect.makeGeometryEffect(modifier:inputs:body:));
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance GeometryVisualEffect<A>(uint64_t a1)
{
  return GeometryVisualEffect.animatableData.getter(a1);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = v2;
  v5[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  GeometryVisualEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>;
}

uint64_t static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), void (*a8)(uint64_t), uint64_t (*a9)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _DWORD v37[3];

  v14 = *a2;
  v15 = *((_DWORD *)a2 + 2);
  v16 = a2[2];
  v17 = *((_DWORD *)a2 + 20);
  LODWORD(v28) = *a1;
  v18 = a7(255, a5, a6);
  type metadata accessor for _GraphValue(0, v18, v19, v20);
  v21 = a2[3];
  v22 = a2[4];
  v25 = *(_OWORD *)(a2 + 7);
  v26 = *(_OWORD *)(a2 + 5);
  v23 = a2[9];
  _GraphValue.subscript.getter(a8, a5, v37);
  v28 = v14;
  v29 = v15;
  v30 = v16;
  v31 = v21;
  v32 = v22;
  v33 = v26;
  v34 = v25;
  v35 = v23;
  v36 = v17;
  return a9(v37, &v28, a3, a4, a5, a6);
}

uint64_t closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[2] = a4(0);
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  return v11[5];
}

uint64_t GeometryVisualEffect.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance RendererVisualEffect<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RendererVisualEffect, (void (*)(uint64_t))partial apply for closure #1 in static RendererVisualEffect._makeVisualEffect(effect:inputs:body:), (uint64_t (*)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance GeometryVisualEffect<A>(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  specialized RendererVisualEffect.animatableData.setter(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v4, v5);
    specialized RendererVisualEffect.animatableData.setter((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    specialized RendererVisualEffect.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 40), v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in GeometryVisualEffect<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in CombinedVisualEffect<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for CombinedVisualEffect<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombinedVisualEffect<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for GeometryVisualEffect<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryVisualEffect<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RendererVisualEffect<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RendererVisualEffect<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in static RendererVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for RendererVisualEffect, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t partial apply for closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for GeometryVisualEffect, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

void partial apply for closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)()
{
  closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)();
}

uint64_t sub_234CF944C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)()
{
  closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)();
}

void partial apply for closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)()
{
  closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)();
}

uint64_t specialized RendererVisualEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v8, v3, v4);
}

void specialized CombinedVisualEffect.animatableData.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  _QWORD v15[8];

  v15[2] = a2[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15[1] = (char *)v15 - v5;
  v6 = *(_QWORD *)(a2[4] + 8);
  v7 = a2[2];
  v8 = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v15 - v10, a1, v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v11, v7, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedConformanceWitness();
  v15[4] = v8;
  v15[5] = AssociatedTypeWitness;
  v15[6] = AssociatedConformanceWitness;
  v15[7] = v14;
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234CF96B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v2 + *(int *)(a1 + 52);
  v7 = *(_QWORD *)(v5 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 120) + 16))(v7, v6, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v7, v4, v1);
}

double static _VariadicView.Tree<>.makePlatformSubstitutableView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double result;
  int v18;
  int v19;
  int ShouldRecordTree;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v30;
  int v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v30 = *a1;
  v7 = *((_DWORD *)a2 + 2);
  v24 = a2[2];
  v25 = *a2;
  v8 = *((_DWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 7);
  v21 = *((_DWORD *)a2 + 8);
  v10 = a2[6];
  v22 = a2[5];
  v11 = *((_DWORD *)a2 + 14);
  v12 = *((_DWORD *)a2 + 15);
  v13 = *((_DWORD *)a2 + 16);
  v18 = *((_DWORD *)a2 + 17);
  v19 = *((_DWORD *)a2 + 9);
  v15 = *((_DWORD *)a2 + 18);
  v14 = *((_DWORD *)a2 + 19);
  v16 = *((_DWORD *)a2 + 20);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _VariadicView.Tree(0, a3, a4, *(_QWORD *)(a5 + 8));
    AGSubgraphBeginTreeElement();
  }
  v50 = v25;
  v51 = v7;
  v52 = v24;
  v53 = v8;
  v54 = v9;
  v57 = v22;
  v58 = v10;
  v56 = v19;
  v59 = v11;
  v60 = v12;
  v61 = v13;
  v62 = v18;
  v63 = v15;
  v64 = v14;
  v65 = v16;
  v31 = v30;
  v34 = v25;
  v35 = v7;
  v36 = v24;
  v37 = v8;
  v38 = v9;
  v39 = 0;
  v40 = v19;
  v41 = v22;
  v42 = v10;
  v43 = v11;
  v44 = v12;
  v45 = v13;
  v46 = v18;
  v47 = v15;
  v48 = v14;
  v49 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v31, (uint64_t)&v34, a3, a4, a5, a6, (uint64_t)&v32);
  v55 = v21;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v32, (uint64_t)&v50);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a7 = v32;
  result = v33;
  a7[1] = v33;
  return result;
}

uint64_t makePlatformSecondaryView(primaryInputs:primaryOutputs:secondaryInputs:flipOrder:body:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *))
{
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v5 = *((_DWORD *)a3 + 2);
  v6 = a3[2];
  v7 = *((_DWORD *)a3 + 20);
  v10 = *a3;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a3 + 5);
  v13 = *(_OWORD *)(a3 + 3);
  v14 = v8;
  v15 = *(_OWORD *)(a3 + 7);
  v16 = a3[9];
  v17 = v7;
  return a5(a1, &v10);
}

uint64_t static _ViewOutputs.makePlatformRootGeometryTransform(inputs:body:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  int v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v2 = *((_DWORD *)a1 + 2);
  v3 = a1[2];
  v4 = *((_DWORD *)a1 + 20);
  v7 = *a1;
  v8 = v2;
  v9 = v3;
  v5 = *(_OWORD *)(a1 + 5);
  v10 = *(_OWORD *)(a1 + 3);
  v11 = v5;
  v12 = *(_OWORD *)(a1 + 7);
  v13 = a1[9];
  v14 = v4;
  return a2(&v7);
}

uint64_t *NSAttributedStringKey.kitStrikethroughStyle.unsafeMutableAddressor()
{
  if (one-time initialization token for kitStrikethroughStyle != -1)
    swift_once();
  return &static NSAttributedStringKey.kitStrikethroughStyle;
}

uint64_t *NSAttributedStringKey.kitUnderlineStyle.unsafeMutableAddressor()
{
  if (one-time initialization token for kitUnderlineStyle != -1)
    swift_once();
  return &static NSAttributedStringKey.kitUnderlineStyle;
}

uint64_t *NSAttributedStringKey.kitUnderlineColor.unsafeMutableAddressor()
{
  if (one-time initialization token for kitUnderlineColor != -1)
    swift_once();
  return &static NSAttributedStringKey.kitUnderlineColor;
}

uint64_t static Character.nsAttachment.getter()
{
  uint64_t v1;

  v1 = 12369903;
  return MEMORY[0x23B7C5EC0](&v1, 3);
}

uint64_t String.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for AttributedString.CharacterView();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290];
  MEMORY[0x24BDAC7A8](v2);
  AttributedString.characters.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, v3, MEMORY[0x24BDCC2A8]);
  v4 = String.init<A>(_:)();
  v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

uint64_t AttributedString.isEmpty.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v0 = type metadata accessor for AttributedString.Index();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - v6;
  v8 = type metadata accessor for AttributedString.CharacterView();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.characters.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, v9, MEMORY[0x24BDCC2B0]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, v1, MEMORY[0x24BDCC508]);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v4, v0);
  v14(v7, v0);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
  return v13 & 1;
}

uint64_t one-time initialization function for kitFont()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x746E6F46534ELL, 0xE600000000000000);
  static NSAttributedStringKey.kitFont = result;
  return result;
}

uint64_t one-time initialization function for kitParagraphStyle()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000010, 0x80000002352E2040);
  static NSAttributedStringKey.kitParagraphStyle = result;
  return result;
}

uint64_t one-time initialization function for kitForegroundColor()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x726F6C6F43534ELL, 0xE700000000000000);
  static NSAttributedStringKey.kitForegroundColor = result;
  return result;
}

uint64_t one-time initialization function for kitBackgroundColor()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000011, 0x80000002352E1FE0);
  static NSAttributedStringKey.kitBackgroundColor = result;
  return result;
}

uint64_t one-time initialization function for kitKern()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x6E72654B534ELL, 0xE600000000000000);
  static NSAttributedStringKey.kitKern = result;
  return result;
}

uint64_t one-time initialization function for kitTracking()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x696B636172545443, 0xEA0000000000676ELL);
  static NSAttributedStringKey.kitTracking = result;
  return result;
}

uint64_t one-time initialization function for kitStrikethroughStyle()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x656B69727453534ELL, 0xEF6867756F726874);
  static NSAttributedStringKey.kitStrikethroughStyle = result;
  return result;
}

uint64_t one-time initialization function for kitUnderlineStyle()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x6C7265646E55534ELL, 0xEB00000000656E69);
  static NSAttributedStringKey.kitUnderlineStyle = result;
  return result;
}

uint64_t one-time initialization function for kitShadow()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x776F64616853534ELL, 0xE800000000000000);
  static NSAttributedStringKey.kitShadow = result;
  return result;
}

uint64_t one-time initialization function for kitAttachment()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x686361747441534ELL, 0xEC000000746E656DLL);
  static NSAttributedStringKey.kitAttachment = result;
  return result;
}

uint64_t one-time initialization function for kitLink()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0x6B6E694C534ELL, 0xE600000000000000);
  static NSAttributedStringKey.kitLink = result;
  return result;
}

uint64_t one-time initialization function for kitBaselineOffset()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000010, 0x80000002352E2060);
  static NSAttributedStringKey.kitBaselineOffset = result;
  return result;
}

uint64_t one-time initialization function for kitUnderlineColor()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000010, 0x80000002352E2020);
  static NSAttributedStringKey.kitUnderlineColor = result;
  return result;
}

uint64_t one-time initialization function for kitStrikethroughColor()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000014, 0x80000002352E2000);
  static NSAttributedStringKey.kitStrikethroughColor = result;
  return result;
}

CTFontRef_optional __swiftcall NSAttributedString.kitFont(at:)(Swift::Int at)
{
  void *v1;
  CTFontRef_optional v3;
  _BYTE v5[32];
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;
  const __CTFont *v9;
  _OWORD v10[2];

  if (one-time initialization token for kitFont != -1)
    swift_once();
  if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, static NSAttributedStringKey.kitFont, at, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with copy of Any?((uint64_t)v10, (uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, v6);
    outlined init with copy of Any((uint64_t)v6, (uint64_t)v5);
    type metadata accessor for CTFontRef(0);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v3.value = v9;
  }
  else
  {
    v3.value = 0;
  }
  outlined destroy of Any?((uint64_t)v10);
  return v3;
}

uint64_t ResolvableStringAttribute.reduceSchedule<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a5;
  v26 = a3;
  v27 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v24 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(a2, a4, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v28 = v26;
    v29 = AssociatedTypeWitness;
    v30 = v25;
    v31 = AssociatedConformanceWitness;
    type metadata accessor for ReducedTimelineSchedule();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v19 = v25;
  v20 = v26;
  a6[3] = v26;
  a6[4] = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_1, v27, v20);
}

void TimelineSchedule.reduced<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for ReducedTimelineSchedule();
}

uint64_t sub_234CFA3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void type metadata accessor for ReducedTimelineSchedule()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void associated type witness table accessor for TimelineSchedule.Entries : Sequence in ReducedTimelineSchedule<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void ReducedTimelineSchedule.entries(from:mode:)(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v25 = a4;
  v6 = a3[5];
  v7 = a3[3];
  v20 = a2;
  v21 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v19 - v8;
  v10 = a3[4];
  v11 = a3[2];
  v12 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v27 = *v20;
  v14 = v27;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(v10 + 24))(a1, &v27, v11, v10, v13);
  v26 = v14;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v6 + 24))(a1, &v26, v21, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = AssociatedTypeWitness;
  v17 = swift_getAssociatedConformanceWitness();
  v18 = lazy protocol witness table accessor for type Date and conformance Date();
  Sequence<>.reduced<A>(with:)((uint64_t)v9, v12, v16, AssociatedConformanceWitness, v17, v18, v25);
}

uint64_t sub_234CFA5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v3, v2);
}

void Sequence<>.reduced<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23 = a5;
  v24 = a6;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v22 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v21, v7, a2, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a7, v21, a2);
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v28 = v23;
  v29 = v24;
  type metadata accessor for ReducedSequence();
}

uint64_t sub_234CFA724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3 + *(int *)(a1 + 60), v4, v1);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ReducedSequence<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void ReducedSequence.Iterator.init(s1:s2:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  type metadata accessor for ReducedSequence.Iterator();
}

uint64_t sub_234CFA804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 60);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, v1, AssociatedTypeWitness);
}

uint64_t ReducedSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t TupleTypeMetadata2;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;

  v88 = a2;
  v82 = *(char **)(a1 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v97 = AssociatedTypeWitness;
  v92 = v4;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v77 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v78 = (char *)&v73 - v7;
  v8 = type metadata accessor for Optional();
  v90 = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v80 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v96 = (char *)&v73 - v9;
  v93 = *(_QWORD **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v85 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v84 = (char *)&v73 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v79 = (char *)&v73 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v94 = (char *)&v73 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v73 - v19;
  v83 = *(char **)(a1 + 40);
  v87 = *(char **)(a1 + 24);
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v73 - v23;
  v25 = swift_getAssociatedTypeWitness();
  v89 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v73 - v27;
  v30 = v95;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)&v73 - v27, v95, v25, v26);
  v76 = a1;
  v31 = v30 + *(int *)(a1 + 60);
  v86 = v22;
  v32 = *(void (**)(char *))(v22 + 16);
  v81 = v31;
  v32(v24);
  swift_getAssociatedConformanceWitness();
  v33 = v20;
  dispatch thunk of IteratorProtocol.next()();
  v34 = v96;
  swift_getAssociatedConformanceWitness();
  v35 = v94;
  dispatch thunk of IteratorProtocol.next()();
  v36 = v90;
  v37 = &v34[*(int *)(TupleTypeMetadata2 + 48)];
  v38 = (void (*)(char *, char *, uint64_t))v93[2];
  v87 = v33;
  v38(v34, v33, v90);
  v83 = v37;
  v38(v37, v35, v36);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  v40 = v84;
  v41 = v85;
  v42 = v39(v34, 1, v97);
  v43 = v89;
  v44 = v95;
  if (v42 == 1)
  {
LABEL_4:
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 40))(v44, v28, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v86 + 40))(v81, v24, v21);
    v48 = v93;
    v49 = (void (*)(char *, char *, uint64_t))v93[4];
    v49(v40, v87, v36);
    v49(v41, v94, v36);
    if (v39(v40, 1, v97) == 1)
    {
      v49(v88, v41, v36);
      ((void (*)(char *, uint64_t))v48[1])(v40, v36);
    }
    else
    {
      ((void (*)(char *, uint64_t))v48[1])(v41, v36);
      v50 = v92;
      v51 = v88;
      v52 = v40;
      v53 = v97;
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v88, v52, v97);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v51, 0, 1, v53);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v96, TupleTypeMetadata2);
  }
  v75 = v28;
  v82 = v24;
  v45 = v94;
  v74 = v21;
  v46 = v79;
  v38(v79, v96, v36);
  v47 = v83;
  if (v39(v83, 1, v97) == 1)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v46, v97);
    v44 = v95;
    v21 = v74;
    v43 = v89;
    v36 = v90;
    v24 = v82;
    v28 = v75;
    goto LABEL_4;
  }
  v55 = v92;
  v56 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
  v57 = v78;
  v58 = v97;
  v56(v78, v46, v97);
  v59 = v77;
  v56(v77, v47, v58);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    v60 = v55;
    v61 = v97;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v97);
    v62 = (void (*)(char *, uint64_t))v93[1];
    v63 = v90;
    v62(v45, v90);
    v62(v87, v63);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v75, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v86 + 40))(v81, v82, v74);
    v64 = v88;
    v56(v88, v59, v61);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v64, 0, 1, v61);
    return ((uint64_t (*)(char *, uint64_t))v62)(v96, v63);
  }
  else
  {
    TupleTypeMetadata2 = (uint64_t)v56;
    v65 = v75;
    v66 = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 24))(v95, v75, v25);
    v67 = v97;
    LODWORD(v95) = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v67);
    v68 = (void (*)(char *, uint64_t))v93[1];
    v69 = v90;
    v68(v45, v90);
    v68(v87, v69);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v65, v66);
    v70 = v55;
    if ((v95 & 1) != 0)
      (*(void (**)(uint64_t, char *, uint64_t))(v86 + 40))(v81, v82, v74);
    else
      (*(void (**)(char *, uint64_t))(v86 + 8))(v82, v74);
    v71 = v88;
    v72 = v97;
    ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v88, v57, v97);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v72);
    return ((uint64_t (*)(char *, uint64_t))v68)(v96, v90);
  }
}

void ReducedSequence.makeIterator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v17 = v19;
  v16(v11, v19, v7, v13);
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v5, v17 + *(int *)(a1 + 60), v3);
  dispatch thunk of Sequence.makeIterator()();
  ReducedSequence.Iterator.init(s1:s2:)((uint64_t)v15, v21);
}

void protocol witness for Sequence.makeIterator() in conformance ReducedSequence<A, B>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ReducedSequence.makeIterator()(a1, a2);
}

uint64_t sub_234CFB154()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ReducedSequence<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

void type metadata accessor for ReducedSequence.Iterator()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for ReducedSequence()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata completion function for ReducedSequence.Iterator()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReducedSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & (unint64_t)~v9) + *(_QWORD *)(v8 + 64) > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = v7;
    v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t destroy for ReducedSequence.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64) + a1;
  v5 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80), v5);
}

uint64_t initializeWithCopy for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t assignWithCopy for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t initializeWithTake for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t assignWithTake for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReducedSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v5 + 64) + v11;
  if (a2 <= v10)
    goto LABEL_23;
  v13 = (v12 & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_23:
      if (v10)
      {
        if (v6 >= v9)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v12 + a1) & ~v11, v9, v7);
      }
      return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_23;
LABEL_14:
  v17 = (v15 - 1) << v14;
  if (v13 > 3)
    v17 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v18 = v13;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  return v10 + v17 + 1;
}

void storeEnumTagSinglePayload for ReducedSequence.Iterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v9)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (v9 < a2)
  {
    v12 = ~v9 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for ReducedSequence()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReducedTimelineSchedule(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234CFBCEC + 4 * byte_235298CDE[v17 - 1]))();
}

void storeEnumTagSinglePayload for ReducedTimelineSchedule(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

BOOL NSAttributedString.isDynamic.getter()
{
  void *v0;
  uint64_t v1;
  id v2;
  _BOOL8 v3;
  _OWORD v5[2];

  if ((uint64_t)objc_msgSend(v0, sel_length) < 1)
    return 0;
  if (one-time initialization token for updateSchedule != -1)
    swift_once();
  v1 = static NSAttributedStringKey.updateSchedule;
  objc_msgSend(v0, sel_length);
  v2 = objc_msgSend(v0, sel_attribute_atIndex_effectiveRange_, v1, 0, 0);
  v3 = v2 != 0;
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  return v3;
}

uint64_t NSMutableAttributedString.resolveUpdateSchedule(recalculate:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD aBlock[3];
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = v2;
  result = (uint64_t)objc_msgSend(v3, sel_length);
  if (result < 1)
    goto LABEL_18;
  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for updateSchedule == -1)
      goto LABEL_11;
    goto LABEL_24;
  }
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  v7 = static NSAttributedStringKey.resolvableTextSegment;
  v8 = objc_msgSend(v3, sel_length);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = &v20;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:);
  *(_QWORD *)(v10 + 24) = v9;
  v18 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v19 = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v17 = &block_descriptor_9;
  v11 = _Block_copy(aBlock);
  v3 = v3;
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttribute_inRange_options_usingBlock_, v7, 0, v8, 0, v11);
  _Block_release(v11);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v7 & 1) != 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
LABEL_11:
    v13 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v3, sel_length);
    if (objc_msgSend(v3, sel_attribute_atIndex_effectiveRange_, v13, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
    }
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v20, (uint64_t)aBlock, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    if (v17)
    {
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
      result = swift_dynamicCast();
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      result = outlined destroy of TypesettingConfiguration((uint64_t)aBlock, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    }
LABEL_18:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  outlined init with copy of TimelineSchedule?((uint64_t)&v20, (uint64_t)&v14);
  if (v15)
  {
    outlined init with take of ScrollStateRequest(&v14, (uint64_t)aBlock);
    if (one-time initialization token for updateSchedule != -1)
      swift_once();
    v12 = static NSAttributedStringKey.updateSchedule;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v17);
    objc_msgSend(v3, sel_addAttribute_value_range_, v12, _bridgeAnythingToObjectiveC<A>(_:)(), 0, objc_msgSend(v3, sel_length));
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    if (one-time initialization token for updateSchedule != -1)
      swift_once();
    objc_msgSend(v3, sel_removeAttribute_range_, static NSAttributedStringKey.updateSchedule, 0, objc_msgSend(v3, sel_length));
  }
  outlined init with take of TimelineSchedule?((uint64_t)&v20, a2);
  return swift_release();
}

uint64_t closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  unint64_t *v18;
  uint64_t (*v19)(uint64_t);
  ProtocolDescriptor *v20;
  uint64_t (*v21)(_QWORD);
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  void (*v39)(uint64_t, uint64_t, double);
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  uint64_t AssociatedConformanceWitness;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v39 - v11;
  v13 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v46);
  if (!v47)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_6;
  }
  v17 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, v17 ^ 1u, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
LABEL_6:
    v18 = &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?;
    v19 = type metadata accessor for ResolvableTextSegmentAttribute.Value;
    v20 = (ProtocolDescriptor *)MEMORY[0x24BEE1C68];
    v21 = (uint64_t (*)(_QWORD))type metadata accessor for [(_:)];
    v22 = (__int128 *)v12;
    return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v22, (uint64_t)v18, (uint64_t)v19, (uint64_t)v20, v21);
  }
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, (uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if (objc_msgSend(a5, sel_attribute_atIndex_effectiveRange_, *(_QWORD *)&v16[*(int *)(v13 + 20)], a2, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v42, 0, sizeof(v42));
  }
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v42, (uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  if (!v41)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    v43 = 0u;
    v44 = 0u;
    AssociatedConformanceWitness = 0;
    goto LABEL_15;
  }
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
  if ((swift_dynamicCast() & 1) == 0)
  {
    AssociatedConformanceWitness = 0;
    v43 = 0u;
    v44 = 0u;
    goto LABEL_15;
  }
  if (!*((_QWORD *)&v44 + 1))
  {
LABEL_15:
    outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    v18 = (unint64_t *)&lazy cache variable for type metadata for ResolvableStringAttribute?;
    v19 = (uint64_t (*)(uint64_t))&lazy cache variable for type metadata for ResolvableStringAttribute;
    v20 = &protocol descriptor for ResolvableStringAttribute;
    v21 = (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?;
    v22 = &v43;
    return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v22, (uint64_t)v18, (uint64_t)v19, (uint64_t)v20, v21);
  }
  outlined init with take of ScrollStateRequest(&v43, (uint64_t)v46);
  outlined init with copy of TimelineSchedule?(a6, (uint64_t)&v40);
  if (v41)
  {
    outlined init with take of ScrollStateRequest(&v40, (uint64_t)&v43);
    v23 = v47;
    v24 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    v25 = *((_QWORD *)&v44 + 1);
    v26 = AssociatedConformanceWitness;
    v27 = __swift_project_boxed_opaque_existential_1(&v43, *((uint64_t *)&v44 + 1));
    ResolvableStringAttribute.reduceSchedule<A>(with:)((uint64_t)v27, v23, v25, v24, v26, (uint64_t *)&v40);
    outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    outlined assign with take of TimelineSchedule?((uint64_t)&v40, a6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v40, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    v29 = v47;
    v30 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    v39 = *(void (**)(uint64_t, uint64_t, double))(v30 + 48);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v32 = type metadata accessor for Optional();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = MEMORY[0x24BDAC7A8](v32);
    v36 = (char *)&v39 - v35;
    v39(v29, v30, v34);
    v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v36, 1, AssociatedTypeWitness) == 1)
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
      AssociatedConformanceWitness = 0;
      v43 = 0u;
      v44 = 0u;
    }
    else
    {
      *((_QWORD *)&v44 + 1) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
      (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(boxed_opaque_existential_1, v36, AssociatedTypeWitness);
      outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    }
    outlined assign with take of TimelineSchedule?((uint64_t)&v43, a6);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

unint64_t NSAttributedString.updateSchedule.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if ((uint64_t)objc_msgSend(v1, sel_length) < 1)
  {
    type metadata accessor for ExplicitTimelineSchedule<[Date]>(0);
    a1[3] = v4;
    result = lazy protocol witness table accessor for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>();
    a1[4] = result;
    *a1 = MEMORY[0x24BEE4AF8];
    return result;
  }
  if (one-time initialization token for updateSchedule != -1)
    swift_once();
  v3 = static NSAttributedStringKey.updateSchedule;
  objc_msgSend(v1, sel_length);
  if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v3, 0, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  if (v9)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v11 + 1))
        return outlined init with take of ScrollStateRequest(&v10, (uint64_t)a1);
    }
    else
    {
      v12 = 0;
      v10 = 0u;
      v11 = 0u;
    }
  }
  else
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    v10 = 0u;
    v11 = 0u;
    v12 = 0;
  }
  type metadata accessor for ExplicitTimelineSchedule<[Date]>(0);
  a1[3] = v6;
  a1[4] = lazy protocol witness table accessor for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>();
  *a1 = MEMORY[0x24BEE4AF8];
  return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v10, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
}

uint64_t one-time initialization function for updateSchedule()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000016, 0x80000002352E2080);
  static NSAttributedStringKey.updateSchedule = result;
  return result;
}

void type metadata accessor for ExplicitTimelineSchedule<[Date]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ExplicitTimelineSchedule<[Date]>)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for [Date], (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type [Date] and conformance [A]();
    v6 = type metadata accessor for ExplicitTimelineSchedule(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ExplicitTimelineSchedule<[Date]>);
  }
}

unint64_t lazy protocol witness table accessor for type [Date] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Date] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Date] and conformance [A])
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for [Date], (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Date] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>;
  if (!lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>)
  {
    type metadata accessor for ExplicitTimelineSchedule<[Date]>(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExplicitTimelineSchedule<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>);
  }
  return result;
}

uint64_t sub_234CFCC1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_234CFCC48()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t outlined init with copy of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t AnyShapeStyleBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyShapeStyleBox.isEqual(to:)()
{
  return 0;
}

uint64_t AnyShapeStyle.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  void (*v14)(char *, uint64_t, uint64_t, double);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v19 - v10;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v14((char *)v19 - v15, a1, a2, v13);
  if ((swift_dynamicCast() & 1) != 0
    || (((void (*)(char *, uint64_t, uint64_t))v14)(v11, a1, a2), (swift_dynamicCast() & 1) != 0)
    || (((void (*)(char *, uint64_t, uint64_t))v14)(v8, a1, a2), (swift_dynamicCast() & 1) != 0))
  {
    v17 = v19[1];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for ShapeStyleBox(0, a2, a3, v16);
    v17 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 104) - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)v17 + 120), a1);
  }
  return v17;
}

uint64_t type metadata accessor for ShapeStyleBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShapeStyleBox);
}

uint64_t AnyShapeStyle.Storage.box.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AnyShapeStyle.Storage.box.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static AnyShapeStyle.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a2) & 1;
}

uint64_t (*AnyShapeStyle.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnyShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 80))();
}

_BYTE *static AnyShapeStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t AnyShapeStyle.as<A>(type:)@<X0>(ValueMetadata *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  ValueMetadata *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  if (a1 == &type metadata for Color)
  {
    type metadata accessor for AnyColorBox();
    result = swift_dynamicCastClass();
    if (result)
    {
      v12 = result;
      if (MEMORY[0x1E0EAFAA0] == 8)
      {
        v7 = &type metadata for Color;
        MEMORY[0x1E0EAFA70](a3, &v12, &type metadata for Color);
        return MEMORY[0x1E0EAFA98](a3, 0, 1, v7);
      }
      __break(1u);
      goto LABEL_15;
    }
  }
  else if (a1 == &type metadata for AnyGradient)
  {
    type metadata accessor for AnyGradientBox();
    result = swift_dynamicCastClass();
    if (result)
    {
      v12 = result;
      if (MEMORY[0x1E0EAFAA0] == 8)
      {
        v7 = &type metadata for AnyGradient;
        MEMORY[0x1E0EAFA70](a3, &v12, &type metadata for AnyGradient);
        return MEMORY[0x1E0EAFA98](a3, 0, 1, v7);
      }
LABEL_15:
      __break(1u);
      return result;
    }
  }
  type metadata accessor for ShapeStyleBox(0, (uint64_t)a1, a2, a2);
  v8 = swift_dynamicCastClass();
  v9 = v8;
  if (v8)
    v8 = swift_retain();
  v12 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11[2] = a1;
  v11[3] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnyShapeStyle.as<A>(type:), (uint64_t)v11, MEMORY[0x24BEE4078], (uint64_t)a1, v10, a3);
  return swift_release();
}

uint64_t partial apply for closure #1 in AnyShapeStyle.as<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 120));
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance AnyShapeStyle()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

_BYTE *protocol witness for static ShapeStyle._apply(to:) in conformance AnyShapeStyle(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t AnyShapeStyleBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AnyShapeStyle()
{
  return &type metadata for AnyShapeStyle;
}

ValueMetadata *type metadata accessor for AnyShapeStyle.Storage()
{
  return &type metadata for AnyShapeStyle.Storage;
}

uint64_t type metadata accessor for AnyShapeStyleBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyShapeStyleBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyShapeStyleBox.apply(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of AnyShapeStyleBox.isEqual(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t ShapeStyleBox.apply(to:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 112) + 32))(a1, *(_QWORD *)(*(_QWORD *)v1 + 104));
}

uint64_t ShapeStyleBox.isEqual(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[7];
  char v7;

  v1 = *v0;
  v2 = swift_dynamicCastClass();
  v3 = v2;
  if (v2)
    v2 = swift_retain();
  v6[6] = v3;
  MEMORY[0x24BDAC7A8](v2);
  v6[2] = v0;
  v6[3] = v1;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ShapeStyleBox.isEqual(to:), (uint64_t)v6, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v4, (uint64_t)&v7);
  swift_release();
  return v7 & 1;
}

uint64_t closure #1 in ShapeStyleBox.isEqual(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X7>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;

  v5 = *a1;
  v6 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 120);
  v7 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 120);
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v11 = v7;
  v12 = 3;
  result = _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v9, v10, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], a3);
  *a4 = v13;
  return result;
}

uint64_t partial apply for closure #1 in ShapeStyleBox.isEqual(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X7>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in ShapeStyleBox.isEqual(to:)(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

void Text.Effect.DisplayInfo.DrawOperation.resolve(_:fragment:displacement:in:)()
{
  uint64_t v0;
  int v1;
  _BYTE v7[304];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  outlined init with take of Text.Effect.DisplayInfo.DrawOperation(v0, (uint64_t)v7);
  v1 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg((uint64_t)v7);
  __asm
  {
    FMOV            V0.2D, #1.0
    BR              X10
  }
}

uint64_t sub_234CFD500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const __CTLine *v33;
  uint64_t v34;
  void *v35;
  CGFloat v36;
  CGFloat v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  const __CTLine *v41;
  id v42;
  Class isa;
  uint64_t v44;
  Class v45;
  const __CTLine *v46;
  CFRange StringRange;
  CFRange *v48;
  uint64_t v49;
  void *v50;
  objc_class *v51;
  void *CopyWithAttributeOverrides;
  const __CTLine *v53;
  void *v54;
  const __CTLine *v55;
  void *v56;
  const __CTFont *v57;
  const __CTLine *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CGFloat v64;
  uint64_t v65;
  const __CTLine *v66;
  CGFloat tx;
  CGFloat ty;
  const __CTLine *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  CGFloat v90;
  CGFloat v91;
  double v92;
  double v93;
  double v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  __double2 v99;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v104;
  CGFloat v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  CGFloat v121;
  CGFloat v122;
  __double2 v123;
  CGFloat v124;
  CGFloat v125;
  CGFloat v126;
  CGFloat v127;
  CGFloat v128;
  CGFloat v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  CGFloat v145;
  CGFloat v146;
  CGFloat v147;
  uint64_t tx_low;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD **v158;
  _QWORD *v159;
  id v160;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  int a_low;
  unint64_t v166;
  Swift::String v168;
  Swift::String v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  const __CTLine *v175;
  __int128 v176;
  double v177;
  double v178;
  CGFloat v179;
  CGFloat v180;
  double v181;
  uint64_t v182;
  double v183;
  double v184;
  uint64_t v185;
  __int128 v186;
  void *v187;
  unint64_t v188;
  double Size;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  CGPoint *v193;
  double v194;
  double v195;
  double v196;
  double v197;
  uint64_t v198;
  __int128 v199;
  double v200;
  __int128 v201;
  __int128 v202;
  CGFloat v203;
  uint64_t v204;
  float64x2_t v205;
  __int128 v206;
  __int128 v207;
  CGFloat v208;
  uint64_t v209;
  uint64_t v210;
  const __CTLine *v211;
  CGAffineTransform v212;
  CGAffineTransform v213;
  uint64_t v214;
  uint64_t v215;
  CGAffineTransform v216;
  uint64_t v217;
  uint64_t v218;

  v7 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)&v218);
  v8 = *(double *)(v7 + 8);
  v9 = *(double *)(v7 + 16);
  v183 = *(double *)(v7 + 40);
  v184 = *(double *)(v7 + 32);
  v180 = *(double *)(v7 + 48);
  v181 = *(double *)(v7 + 24);
  v179 = *(double *)(v7 + 56);
  v10 = *(_QWORD *)(v7 + 76);
  v11 = *(_QWORD *)(v7 + 84);
  v173 = *(_BYTE *)(v7 + 92);
  v12 = *(double *)(v0 + 72);
  v13 = *(double *)(v7 + 64) * v12;
  swift_retain();
  v182 = v3;
  if (v13 != v12)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      v210 = v11;
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 88) = 0;
      *(_BYTE *)(v14 + 96) = 1;
      *(_OWORD *)(v14 + 104) = 0u;
      *(_OWORD *)(v14 + 120) = 0u;
      *(_OWORD *)(v14 + 136) = 0u;
      *(_OWORD *)(v14 + 152) = v176;
      *(_QWORD *)(v14 + 168) = 0x3FF0000000000000;
      *(_BYTE *)(v14 + 176) = 0;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v0 + 16);
      v15 = *(_OWORD *)(v0 + 40);
      v16 = *(_OWORD *)(v0 + 56);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v0 + 24);
      *(_OWORD *)(v14 + 40) = v15;
      *(_OWORD *)(v14 + 56) = v16;
      *(_QWORD *)(v14 + 72) = *(_QWORD *)(v0 + 72);
      v17 = *(_QWORD *)(v0 + 184);
      v18 = *(_QWORD *)(v0 + 192);
      v19 = *(_QWORD *)(v0 + 200);
      v20 = *(_QWORD *)(v0 + 208);
      v21 = *(_QWORD *)(v0 + 216);
      *(_QWORD *)(v14 + 184) = v17;
      *(_QWORD *)(v14 + 192) = v18;
      *(_QWORD *)(v14 + 200) = v19;
      *(_QWORD *)(v14 + 208) = v20;
      *(_QWORD *)(v14 + 216) = v21;
      swift_retain();
      swift_retain();
      v22 = v19;
      v3 = v182;
      outlined copy of Text.Effect.StopCollector?(v17, v18, v22, v20);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      v23 = *(_QWORD *)(v0 + 80);
      v24 = *(_QWORD *)(v0 + 88);
      LOBYTE(v18) = *(_BYTE *)(v0 + 96);
      swift_release();
      *(_QWORD *)(v14 + 80) = v23;
      *(_QWORD *)(v14 + 88) = v24;
      *(_BYTE *)(v14 + 96) = v18;
      v217 = v14;
      swift_release();
      v0 = v14;
      v11 = v210;
    }
    *(double *)(v0 + 72) = v13;
  }
  v25 = *(_QWORD *)(v2 + 48);
  v26 = __OFSUB__(v1, v25);
  v27 = v1 - v25;
  if (v26)
    goto LABEL_78;
  if ((v27 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_80;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 96);
  if (v27 >= *(_QWORD *)(v28 + 16))
  {
LABEL_80:
    __break(1u);
    JUMPOUT(0x234CFF038);
  }
  v29 = *(_QWORD *)(v28 + 24 * v27 + 48);
  v172 = *(_QWORD *)(v29 + 16);
  if (v172)
  {
    v177 = v9 + v5;
    v178 = v8 + v6;
    v171 = v29 + 32;
    v30 = v10;
    v31 = v11;
    v170 = (void *)*MEMORY[0x24BDC4EE0];
    v174 = *(_QWORD *)(v28 + 24 * v27 + 48);
    swift_bridgeObjectRetain();
    v32 = 0;
    do
    {
      if (v32 >= *(_QWORD *)(v174 + 16))
        goto LABEL_76;
      v34 = v171 + (v32 << 6);
      v35 = *(void **)v34;
      v36 = *(double *)(v34 + 8);
      v196 = *(double *)(v34 + 24);
      v197 = *(double *)(v34 + 16);
      v37 = *(double *)(v34 + 40);
      v191 = *(_QWORD *)(v34 + 56);
      v192 = *(_QWORD *)(v34 + 48);
      v187 = *(void **)v34;
      v188 = v32;
      if ((v173 & 1) != 0)
      {
        v190 = *(unsigned int *)(v34 + 32);
        swift_retain_n();
        v38 = v35;
      }
      else
      {
        type metadata accessor for _ContiguousArrayStorage<(CFStringRef, CGColorRef)>();
        v39 = swift_allocObject();
        *(_OWORD *)(v39 + 16) = xmmword_23527E860;
        *(_QWORD *)(v39 + 32) = v170;
        v40 = one-time initialization token for cache;
        v41 = v35;
        swift_retain();
        v42 = v170;
        if (v40 != -1)
          swift_once();
        *(_QWORD *)(v39 + 40) = specialized ObjectCache.subscript.getter(*(float *)&v30, *((float *)&v30 + 1), *(float *)&v31, *((float *)&v31 + 1));
        specialized Dictionary.init(dictionaryLiteral:)(v39);
        type metadata accessor for CFStringRef(0);
        type metadata accessor for CGColorRef(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
        v44 = swift_allocObject();
        *(_OWORD *)(v44 + 16) = xmmword_235283250;
        *(_QWORD *)(v44 + 32) = (id)_CTLineGetRunAtIndex(v41, *(CFIndex *)&v36);
        *(_QWORD *)&v213.a = v44;
        specialized Array._endMutation()();
        type metadata accessor for CTRunRef(0);
        v45 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v46 = (const __CTLine *)CTLineCreateWithRunArray();

        StringRange = CTLineGetStringRange(v46);
        v48 = (CFRange *)swift_allocObject();
        v48[1] = StringRange;
        v48[2].location = (CFIndex)isa;
        v49 = swift_allocObject();
        *(_QWORD *)(v49 + 16) = partial apply for closure #1 in Text.Layout.Run.foregroundColor(_:);
        *(_QWORD *)(v49 + 24) = v48;
        *(_QWORD *)&v213.tx = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
        *(_QWORD *)&v213.ty = v49;
        *(_QWORD *)&v213.a = MEMORY[0x24BDAC760];
        *(_QWORD *)&v213.b = 1107296256;
        *(_QWORD *)&v213.c = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
        *(_QWORD *)&v213.d = &block_descriptor_10;
        v50 = _Block_copy(&v213);
        v51 = isa;
        swift_retain();
        swift_release();
        CopyWithAttributeOverrides = (void *)CTLineCreateCopyWithAttributeOverrides();
        _Block_release(v50);
        LOBYTE(v50) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v50 & 1) != 0)
          goto LABEL_77;
        v53 = v41;
        swift_retain();
        v38 = CopyWithAttributeOverrides;
        v54 = (id)_CTLineGetRunAtIndex(v53, *(CFIndex *)&v36);
        specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v54, (CFRange)0, (CGFloat *)(v4 - 256));
        swift_release();

        v196 = v196 + *(double *)(v4 - 248);
        v197 = v197 + *(double *)(v4 - 256);
        outlined copy of Text.Layout.Line.Line(v38, 0, 0);
        swift_release();

        v36 = 0.0;
        v190 = 0;
        v37 = 0.0;
        v35 = v187;
        v32 = v188;
      }
      swift_retain_n();
      v55 = (const __CTLine *)v38;
      v56 = (id)_CTLineGetRunAtIndex(v55, *(CFIndex *)&v36);
      v57 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      if (v57)
      {
        Size = CTFontGetSize(v57);
        swift_release_n();

      }
      else
      {
        swift_release_n();
        Size = 15.0;
        v57 = v55;
      }
      v58 = v55;

      *(_QWORD *)&v213.a = v55;
      v213.b = v36;
      v213.c = v197;
      v213.d = v196;
      LODWORD(v213.tx) = v190;
      v213.ty = v37;
      v214 = v192;
      v215 = v191;
      v193 = Text.Layout.RunSlice.positions.getter();
      if (!*(_QWORD *)&v193[1].x || (v175 = v55, v192 == v191))
      {
        v33 = v55;
        swift_retain();
      }
      else
      {
        v205 = (float64x2_t)v193[2];
        v59 = __OFADD__(v192, 1);
        v211 = v55;
        swift_retain();
        v60 = v191;
        v61 = v192;
        if (v192 + 1 < v192)
        {
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          JUMPOUT(0x234CFF018);
        }
        v62 = 0;
        if (v191 <= v192)
          v63 = v192;
        else
          v63 = v191;
        v185 = v192 - v63;
        v194 = v36;
        v195 = v37;
        while (1)
        {
          *(_QWORD *)&v64 = v61 + v62;
          v209 = v61 + v62 + 1;
          if (v60 < v209)
          {
            v213.a = 0.0;
            v213.b = -2.68156159e154;
            _StringGuts.grow(_:)(19);
            swift_bridgeObjectRelease();
            v213.a = -2.31584178e77;
            *(_QWORD *)&v213.b = 0x80000002352E1630;
            v212.a = v64;
            v216.a = 0.0;
            v216.b = -2.68156159e154;
            _print_unlocked<A, B>(_:_:)();
            v168._countAndFlagsBits = 3943982;
            v168._object = (void *)0xE300000000000000;
            String.append(_:)(v168);
            _print_unlocked<A, B>(_:_:)();
            v169._countAndFlagsBits = *(_QWORD *)&v216.a;
            v169._object = *(void **)&v216.b;
            String.append(_:)(v169);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x234CFF160);
          }
          if (!(v185 + v62))
            goto LABEL_73;
          if (v59)
            goto LABEL_74;
          v204 = v61 + v62;
          v198 = v62;
          v65 = v217;
          if ((*(_BYTE *)(v3 + 32) & 1) != 0 || *(double *)(v3 + 8) != Size)
          {
            CGAffineTransformMakeScale(&v213, Size * *(double *)(v3 + 40), -(Size * *(double *)(v3 + 40)));
            v199 = *(_OWORD *)&v213.a;
            v186 = *(_OWORD *)&v213.c;
            tx = v213.tx;
            ty = v213.ty;
            v69 = v211;
            swift_retain();
            swift_retain();
            *(_OWORD *)&v213.a = v199;
            *(_OWORD *)&v213.c = v186;
            v213.tx = tx;
            v213.ty = ty;
            RBShapeGetFontQuantizationLevel();
            *(double *)(v3 + 8) = Size;
            *(_QWORD *)(v3 + 16) = v70;
            *(_QWORD *)(v3 + 24) = v71;
            *(_BYTE *)(v3 + 32) = 0;
          }
          else
          {
            v66 = v211;
            swift_retain();
            swift_retain();
          }
          v200 = *(double *)(v3 + 40);
          v213.b = 0.0;
          v213.c = 0.0;
          v213.a = v200;
          v213.d = -v200;
          *(float64x2_t *)&v213.tx = vmulq_n_f64(v205, v200);
          RBShapeGetPredictedFontQuantizationError();
          v73 = v72 / v200;
          v75 = v74 / v200;
          if (v72 / v200 != 0.0 || v75 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Text.Effect.DrawingContext.Storage();
              v76 = swift_allocObject();
              *(_QWORD *)(v76 + 24) = 0x3FF0000000000000;
              *(_QWORD *)(v76 + 32) = 0;
              *(_QWORD *)(v76 + 40) = 0;
              *(_QWORD *)(v76 + 48) = 0x3FF0000000000000;
              *(_QWORD *)(v76 + 56) = 0;
              *(_QWORD *)(v76 + 64) = 0;
              *(_QWORD *)(v76 + 80) = 0;
              *(_QWORD *)(v76 + 88) = 0;
              *(_QWORD *)(v76 + 72) = 0x3FF0000000000000;
              *(_BYTE *)(v76 + 96) = 1;
              *(_OWORD *)(v76 + 104) = 0u;
              *(_OWORD *)(v76 + 120) = 0u;
              *(_OWORD *)(v76 + 136) = 0u;
              *(_OWORD *)(v76 + 152) = v176;
              *(_QWORD *)(v76 + 168) = 0x3FF0000000000000;
              *(_BYTE *)(v76 + 176) = 0;
              *(_OWORD *)(v76 + 184) = 0u;
              *(_OWORD *)(v76 + 200) = 0u;
              *(_QWORD *)(v76 + 216) = 0;
              *(_QWORD *)(v76 + 16) = *(_QWORD *)(v65 + 16);
              v77 = *(_OWORD *)(v65 + 40);
              v78 = *(_OWORD *)(v65 + 56);
              *(_OWORD *)(v76 + 24) = *(_OWORD *)(v65 + 24);
              *(_OWORD *)(v76 + 40) = v77;
              *(_OWORD *)(v76 + 56) = v78;
              *(_QWORD *)(v76 + 72) = *(_QWORD *)(v65 + 72);
              v79 = *(_QWORD *)(v65 + 184);
              v80 = *(_QWORD *)(v65 + 192);
              v81 = *(_QWORD *)(v65 + 200);
              v82 = *(_QWORD *)(v65 + 208);
              v83 = *(_QWORD *)(v65 + 216);
              *(_QWORD *)(v76 + 184) = v79;
              *(_QWORD *)(v76 + 192) = v80;
              *(_QWORD *)(v76 + 200) = v81;
              *(_QWORD *)(v76 + 208) = v82;
              *(_QWORD *)(v76 + 216) = v83;
              swift_retain();
              swift_retain();
              v84 = v80;
              v36 = v194;
              v37 = v195;
              outlined copy of Text.Effect.StopCollector?(v79, v84, v81, v82);
              outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
              v85 = *(_QWORD *)(v65 + 80);
              v86 = *(_QWORD *)(v65 + 88);
              LOBYTE(v79) = *(_BYTE *)(v65 + 96);
              swift_release();
              *(_QWORD *)(v76 + 80) = v85;
              *(_QWORD *)(v76 + 88) = v86;
              *(_BYTE *)(v76 + 96) = v79;
              swift_release();
              v65 = v76;
            }
            v87 = *(_OWORD *)(v65 + 40);
            *(_OWORD *)&v213.a = *(_OWORD *)(v65 + 24);
            *(_OWORD *)&v213.c = v87;
            *(_OWORD *)&v213.tx = *(_OWORD *)(v65 + 56);
            CGAffineTransformTranslate(&v216, &v213, v73, v75);
            v88 = *(_OWORD *)&v216.c;
            v89 = *(_OWORD *)&v216.tx;
            *(_OWORD *)(v65 + 24) = *(_OWORD *)&v216.a;
            *(_OWORD *)(v65 + 40) = v88;
            *(_OWORD *)(v65 + 56) = v89;
          }
          v90 = *(double *)(*(_QWORD *)v3 + 112);
          v91 = *(double *)(*(_QWORD *)v3 + 120);
          v92 = *(double *)(*(_QWORD *)v3 + 128);
          v93 = *(double *)(*(_QWORD *)v3 + 136);
          v94 = *(double *)(*(_QWORD *)v3 + 144);
          v95 = *(double *)(*(_QWORD *)v3 + 152);
          v96 = *(double *)(*(_QWORD *)v3 + 160);
          CGAffineTransformMakeTranslation(&v213, v93, v94);
          CGAffineTransformScale(&v216, &v213, v95, v96);
          v206 = *(_OWORD *)&v216.a;
          v201 = *(_OWORD *)&v216.c;
          v97 = v216.tx;
          v98 = v216.ty;
          v99 = __sincos_stret(v92);
          v213.a = v99.__cosval;
          v213.b = v99.__sinval;
          v213.c = -v99.__sinval;
          v213.d = v99.__cosval;
          v213.tx = 0.0;
          v213.ty = 0.0;
          *(_OWORD *)&v216.a = v206;
          *(_OWORD *)&v216.c = v201;
          v216.tx = v97;
          v216.ty = v98;
          CGAffineTransformConcat(&v212, &v213, &v216);
          v213 = v212;
          CGAffineTransformTranslate(&v216, &v213, -v93, -v94);
          v213 = v216;
          CGAffineTransformTranslate(&v216, &v213, v90, v91);
          a = v216.a;
          b = v216.b;
          c = v216.c;
          d = v216.d;
          v104 = v216.tx;
          v105 = v216.ty;
          v213 = v216;
          if (!CGAffineTransformIsIdentity(&v213))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Text.Effect.DrawingContext.Storage();
              v106 = swift_allocObject();
              *(_QWORD *)(v106 + 24) = 0x3FF0000000000000;
              *(_QWORD *)(v106 + 32) = 0;
              *(_QWORD *)(v106 + 40) = 0;
              *(_QWORD *)(v106 + 48) = 0x3FF0000000000000;
              *(_QWORD *)(v106 + 56) = 0;
              *(_QWORD *)(v106 + 64) = 0;
              *(_QWORD *)(v106 + 80) = 0;
              *(_QWORD *)(v106 + 88) = 0;
              *(_QWORD *)(v106 + 72) = 0x3FF0000000000000;
              *(_BYTE *)(v106 + 96) = 1;
              *(_OWORD *)(v106 + 104) = 0u;
              *(_OWORD *)(v106 + 120) = 0u;
              *(_OWORD *)(v106 + 136) = 0u;
              *(_OWORD *)(v106 + 152) = v176;
              *(_QWORD *)(v106 + 168) = 0x3FF0000000000000;
              *(_BYTE *)(v106 + 176) = 0;
              *(_OWORD *)(v106 + 184) = 0u;
              *(_OWORD *)(v106 + 200) = 0u;
              *(_QWORD *)(v106 + 216) = 0;
              *(_QWORD *)(v106 + 16) = *(_QWORD *)(v65 + 16);
              v107 = *(_OWORD *)(v65 + 40);
              v108 = *(_OWORD *)(v65 + 56);
              *(_OWORD *)(v106 + 24) = *(_OWORD *)(v65 + 24);
              *(_OWORD *)(v106 + 40) = v107;
              *(_OWORD *)(v106 + 56) = v108;
              *(_QWORD *)(v106 + 72) = *(_QWORD *)(v65 + 72);
              v109 = *(_QWORD *)(v65 + 184);
              v110 = *(_QWORD *)(v65 + 192);
              v111 = *(_QWORD *)(v65 + 200);
              v112 = *(_QWORD *)(v65 + 208);
              v113 = *(_QWORD *)(v65 + 216);
              *(_QWORD *)(v106 + 184) = v109;
              *(_QWORD *)(v106 + 192) = v110;
              *(_QWORD *)(v106 + 200) = v111;
              *(_QWORD *)(v106 + 208) = v112;
              *(_QWORD *)(v106 + 216) = v113;
              swift_retain();
              swift_retain();
              v114 = v110;
              v36 = v194;
              v37 = v195;
              outlined copy of Text.Effect.StopCollector?(v109, v114, v111, v112);
              outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
              v115 = *(_QWORD *)(v65 + 80);
              v116 = *(_QWORD *)(v65 + 88);
              LOBYTE(v109) = *(_BYTE *)(v65 + 96);
              swift_release();
              *(_QWORD *)(v106 + 80) = v115;
              *(_QWORD *)(v106 + 88) = v116;
              *(_BYTE *)(v106 + 96) = v109;
              swift_release();
              v65 = v106;
            }
            v213.a = a;
            v213.b = b;
            v213.c = c;
            v213.d = d;
            v213.tx = v104;
            v213.ty = v105;
            if (!CGAffineTransformIsIdentity(&v213))
            {
              v117 = *(_OWORD *)(v65 + 24);
              v118 = *(_OWORD *)(v65 + 40);
              v213.a = a;
              v213.b = b;
              v213.c = c;
              v213.d = d;
              v213.tx = v104;
              v213.ty = v105;
              *(_OWORD *)&v216.a = v117;
              *(_OWORD *)&v216.c = v118;
              *(_OWORD *)&v216.tx = *(_OWORD *)(v65 + 56);
              CGAffineTransformConcat(&v212, &v213, &v216);
              v119 = *(_OWORD *)&v212.c;
              v120 = *(_OWORD *)&v212.tx;
              *(_OWORD *)(v65 + 24) = *(_OWORD *)&v212.a;
              *(_OWORD *)(v65 + 40) = v119;
              *(_OWORD *)(v65 + 56) = v120;
            }
          }
          CGAffineTransformMakeTranslation(&v213, v184, v183);
          CGAffineTransformScale(&v216, &v213, v180, v179);
          v207 = *(_OWORD *)&v216.a;
          v202 = *(_OWORD *)&v216.c;
          v121 = v216.tx;
          v122 = v216.ty;
          v123 = __sincos_stret(v181);
          v213.a = v123.__cosval;
          v213.b = v123.__sinval;
          v213.c = -v123.__sinval;
          v213.d = v123.__cosval;
          v213.tx = 0.0;
          v213.ty = 0.0;
          *(_OWORD *)&v216.a = v207;
          *(_OWORD *)&v216.c = v202;
          v216.tx = v121;
          v216.ty = v122;
          CGAffineTransformConcat(&v212, &v213, &v216);
          v213 = v212;
          CGAffineTransformTranslate(&v216, &v213, -v184, -v183);
          v213 = v216;
          CGAffineTransformTranslate(&v216, &v213, v178, v177);
          v124 = v216.a;
          v125 = v216.b;
          v126 = v216.c;
          v127 = v216.d;
          v128 = v216.tx;
          v129 = v216.ty;
          v213 = v216;
          if (!CGAffineTransformIsIdentity(&v213))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Text.Effect.DrawingContext.Storage();
              v130 = swift_allocObject();
              *(_QWORD *)(v130 + 24) = 0x3FF0000000000000;
              *(_QWORD *)(v130 + 32) = 0;
              *(_QWORD *)(v130 + 40) = 0;
              *(_QWORD *)(v130 + 48) = 0x3FF0000000000000;
              *(_QWORD *)(v130 + 56) = 0;
              *(_QWORD *)(v130 + 64) = 0;
              *(_QWORD *)(v130 + 80) = 0;
              *(_QWORD *)(v130 + 88) = 0;
              *(_QWORD *)(v130 + 72) = 0x3FF0000000000000;
              *(_BYTE *)(v130 + 96) = 1;
              *(_OWORD *)(v130 + 104) = 0u;
              *(_OWORD *)(v130 + 120) = 0u;
              *(_OWORD *)(v130 + 136) = 0u;
              *(_OWORD *)(v130 + 152) = v176;
              *(_QWORD *)(v130 + 168) = 0x3FF0000000000000;
              *(_BYTE *)(v130 + 176) = 0;
              *(_OWORD *)(v130 + 184) = 0u;
              *(_OWORD *)(v130 + 200) = 0u;
              *(_QWORD *)(v130 + 216) = 0;
              *(_QWORD *)(v130 + 16) = *(_QWORD *)(v65 + 16);
              v131 = *(_OWORD *)(v65 + 40);
              v132 = *(_OWORD *)(v65 + 56);
              *(_OWORD *)(v130 + 24) = *(_OWORD *)(v65 + 24);
              *(_OWORD *)(v130 + 40) = v131;
              *(_OWORD *)(v130 + 56) = v132;
              *(_QWORD *)(v130 + 72) = *(_QWORD *)(v65 + 72);
              v133 = *(_QWORD *)(v65 + 184);
              v134 = *(_QWORD *)(v65 + 192);
              v135 = *(_QWORD *)(v65 + 200);
              v136 = *(_QWORD *)(v65 + 208);
              v137 = *(_QWORD *)(v65 + 216);
              *(_QWORD *)(v130 + 184) = v133;
              *(_QWORD *)(v130 + 192) = v134;
              *(_QWORD *)(v130 + 200) = v135;
              *(_QWORD *)(v130 + 208) = v136;
              *(_QWORD *)(v130 + 216) = v137;
              swift_retain();
              swift_retain();
              v138 = v134;
              v36 = v194;
              v37 = v195;
              outlined copy of Text.Effect.StopCollector?(v133, v138, v135, v136);
              outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
              v139 = *(_QWORD *)(v65 + 80);
              v140 = *(_QWORD *)(v65 + 88);
              LOBYTE(v133) = *(_BYTE *)(v65 + 96);
              swift_release();
              *(_QWORD *)(v130 + 80) = v139;
              *(_QWORD *)(v130 + 88) = v140;
              *(_BYTE *)(v130 + 96) = v133;
              swift_release();
              v65 = v130;
            }
            v213.a = v124;
            v213.b = v125;
            v213.c = v126;
            v213.d = v127;
            v213.tx = v128;
            v213.ty = v129;
            if (!CGAffineTransformIsIdentity(&v213))
            {
              v141 = *(_OWORD *)(v65 + 24);
              v142 = *(_OWORD *)(v65 + 40);
              v213.a = v124;
              v213.b = v125;
              v213.c = v126;
              v213.d = v127;
              v213.tx = v128;
              v213.ty = v129;
              *(_OWORD *)&v216.a = v141;
              *(_OWORD *)&v216.c = v142;
              *(_OWORD *)&v216.tx = *(_OWORD *)(v65 + 56);
              CGAffineTransformConcat(&v212, &v213, &v216);
              v143 = *(_OWORD *)&v212.c;
              v144 = *(_OWORD *)&v212.tx;
              *(_OWORD *)(v65 + 24) = *(_OWORD *)&v212.a;
              *(_OWORD *)(v65 + 40) = v143;
              *(_OWORD *)(v65 + 56) = v144;
            }
          }
          if ((*(_BYTE *)(v65 + 96) & 1) != 0)
          {
            v145 = COERCE_DOUBLE(v211);
            swift_retain();
            v146 = v37;
            v208 = v36;
            v147 = v196;
            v203 = v197;
            tx_low = v190;
          }
          else
          {
            v149 = *(_QWORD *)(v65 + 80);
            v150 = *(_QWORD *)(v65 + 88);
            *(_QWORD *)&v216.a = v211;
            v216.b = v36;
            v216.c = v197;
            v216.d = v196;
            LODWORD(v216.tx) = v190;
            v216.ty = v37;
            Text.Layout.Run.foregroundColor(_:)(v149, v150, 0, (uint64_t)&v213);
            v145 = v213.a;
            v208 = v213.b;
            v203 = v213.c;
            v147 = v213.d;
            tx_low = LODWORD(v213.tx);
            v146 = v213.ty;
          }
          v151 = *(_QWORD *)(v65 + 24);
          v152 = *(_QWORD *)(v65 + 32);
          v153 = *(_QWORD *)(v65 + 40);
          v154 = *(_QWORD *)(v65 + 48);
          v156 = *(_QWORD *)(v65 + 56);
          v155 = *(_QWORD *)(v65 + 64);
          v157 = *(_QWORD *)(v65 + 72);
          v158 = (_QWORD **)(*(_QWORD *)(v65 + 16) + 16);
          swift_beginAccess();
          v159 = *v158;
          swift_retain();
          v160 = *(id *)&v145;
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v158 = v159;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v159[2] + 1, 1, v159);
            *v158 = v159;
          }
          v163 = v159[2];
          v162 = v159[3];
          if (v163 >= v162 >> 1)
          {
            v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v162 > 1), v163 + 1, 1, v159);
            *v158 = v159;
          }
          v159[2] = v163 + 1;
          v164 = &v159[18 * v163];
          *((CGFloat *)v164 + 4) = v145;
          *((CGFloat *)v164 + 5) = v208;
          *((CGFloat *)v164 + 6) = v203;
          *((CGFloat *)v164 + 7) = v147;
          v164[8] = tx_low;
          *((CGFloat *)v164 + 9) = v146;
          v164[10] = v204;
          v164[11] = v209;
          v164[12] = 0;
          v164[13] = 0;
          *((_BYTE *)v164 + 112) = 32;
          a_low = LODWORD(v216.a);
          *((_DWORD *)v164 + 29) = *(_DWORD *)((char *)&v216.a + 3);
          *(_DWORD *)((char *)v164 + 113) = a_low;
          v164[15] = v157;
          v164[16] = v151;
          v164[17] = v152;
          v164[18] = v153;
          v164[19] = v154;
          v164[20] = v156;
          v164[21] = v155;
          swift_endAccess();
          v37 = v195;
          swift_release();

          swift_release();
          swift_release();

          swift_release();
          v166 = *(_QWORD *)&v193[1].x;
          v3 = v182;
          v35 = v187;
          v32 = v188;
          if (v198 + 1 == v166)
            break;
          if (v198 + 1 >= v166)
            goto LABEL_75;
          if (!(v192 - v191 + 1 + v198))
            break;
          v205 = (float64x2_t)v193[v198 + 3];
          v59 = __OFADD__(v209, 1);
          v62 = v198 + 1;
          v61 = v192;
          v60 = v191;
          v36 = v194;
          if (v209 + 1 < v192 + v198 + 1)
            goto LABEL_72;
        }
        v58 = v175;
      }
      ++v32;

      swift_release_n();
      swift_bridgeObjectRelease();
      swift_release();
    }
    while (v32 != v172);
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void Text.Effect.DisplayInfo.prepare(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BYTE v4[216];
  _BYTE v5[224];

  v1 = *(_QWORD *)(v0 + 120);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = v1 + 32;
    outlined retain of Text.Effect.DisplayInfo(v0);
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation(v2, (uint64_t)v4);
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v4, (uint64_t)v5);
    v3 = (char *)&loc_234CFF22C
       + *((int *)qword_234CFF688
         + _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg((uint64_t)v5));
    __asm { BR              X9 }
  }
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208) >> 6;
}

unint64_t outlined copy of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int8 a27)
{
  int v27;
  unint64_t result;

  v27 = a27 >> 6;
  if (v27 == 3)
    return swift_retain();
  if (v27 == 2 || v27 == 1)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return outlined copy of Text.Effect.PathInterpolator.MapKeys(a11);
  }
  return result;
}

uint64_t outlined retain of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4);
  return a1;
}

unint64_t outlined consume of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int8 a27)
{
  int v27;
  unint64_t result;

  v27 = a27 >> 6;
  if (v27 == 3)
    return swift_release();
  if (v27 == 2 || v27 == 1)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return outlined consume of Text.Effect.PathInterpolator.MapKeys(a11);
  }
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_(uint64_t result)
{
  *(_BYTE *)(result + 208) &= 0x3Fu;
  return result;
}

uint64_t outlined retain of Text.Effect.PathInterpolator.Cluster(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Text.Effect.PathInterpolator.Cluster(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

id outlined copy of Text.Effect.PathInterpolator.Glyph(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  id v15;

  switch(a15)
  {
    case 0:
      v15 = result;
      swift_retain();
      return v15;
    case 1:
    case 5:
      goto LABEL_4;
    case 2:
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 3:
    case 4:
LABEL_5:
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void *outlined consume of Text.Effect.PathInterpolator.Glyph(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  switch(a15)
  {
    case 0:

      return (void *)swift_release();
    case 1:
    case 5:
      goto LABEL_4;
    case 2:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3:
    case 4:
LABEL_5:
      result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(CFStringRef, CGColorRef)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CGColorRef)>)
  {
    type metadata accessor for (CFStringRef, CGColorRef)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CGColorRef)>);
  }
}

void type metadata accessor for (CFStringRef, CGColorRef)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CFStringRef, CGColorRef))
  {
    type metadata accessor for CFStringRef(255);
    type metadata accessor for CGColorRef(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, CGColorRef));
  }
}

uint64_t sub_234CFFAE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for closure #1 in Text.Layout.Run.foregroundColor(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return closure #1 in Text.Layout.Run.foregroundColor(_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_234CFFB14()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unint64_t destroy for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1)
{
  return outlined consume of Text.Effect.DisplayInfo.DrawOperation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           *(_BYTE *)(a1 + 208));
}

uint64_t initializeWithCopy for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;

  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v30 = *(_BYTE *)(a2 + 208);
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  outlined copy of Text.Effect.DisplayInfo.DrawOperation(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  *(_BYTE *)(a1 + 208) = v30;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;

  v32 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(a2 + 80);
  v34 = *(_QWORD *)(a2 + 88);
  v35 = *(_QWORD *)(a2 + 96);
  v36 = *(_QWORD *)(a2 + 104);
  v37 = *(_QWORD *)(a2 + 112);
  v38 = *(_QWORD *)(a2 + 120);
  v39 = *(_QWORD *)(a2 + 128);
  v40 = *(_QWORD *)(a2 + 136);
  v41 = *(_QWORD *)(a2 + 144);
  v42 = *(_QWORD *)(a2 + 152);
  v43 = *(_QWORD *)(a2 + 160);
  v44 = *(_QWORD *)(a2 + 168);
  v45 = *(_QWORD *)(a2 + 176);
  v46 = *(_QWORD *)(a2 + 184);
  v47 = *(_QWORD *)(a2 + 192);
  v48 = *(_QWORD *)(a2 + 200);
  v49 = *(_BYTE *)(a2 + 208);
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  outlined copy of Text.Effect.DisplayInfo.DrawOperation(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)(a1 + 88) = v34;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v35;
  *(_QWORD *)(a1 + 104) = v36;
  *(_QWORD *)(a1 + 112) = v37;
  *(_QWORD *)(a1 + 120) = v38;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v39;
  *(_QWORD *)(a1 + 136) = v40;
  *(_QWORD *)(a1 + 144) = v41;
  *(_QWORD *)(a1 + 152) = v42;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v43;
  *(_QWORD *)(a1 + 168) = v44;
  *(_QWORD *)(a1 + 176) = v45;
  *(_QWORD *)(a1 + 184) = v46;
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v47;
  *(_QWORD *)(a1 + 200) = v48;
  v30 = *(_BYTE *)(a1 + 208);
  *(_BYTE *)(a1 + 208) = v49;
  outlined consume of Text.Effect.DisplayInfo.DrawOperation(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    v29,
    v30);
  return a1;
}

__n128 __swift_memcpy209_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *(_BYTE *)(a2 + 208);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_QWORD *)(a1 + 192);
  v22 = *(_QWORD *)(a1 + 200);
  v23 = *(_BYTE *)(a1 + 208);
  v24 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v24;
  v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v25;
  v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v26;
  v27 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v27;
  v28 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v28;
  v29 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v29;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = v4;
  outlined consume of Text.Effect.DisplayInfo.DrawOperation(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    v22,
    v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 209))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 176) >> 9) & 0xFF000000 | (*(_DWORD *)(a1 + 160) >> 8);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 200) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 208) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 209) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 160) = (-256 * a2);
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = ((unint64_t)-a2 << 9) & 0x1FE00000000;
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_BYTE *)(a1 + 208) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 209) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.DisplayInfo.DrawOperation(uint64_t result, char a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(result + 176) & 0x1FFFFFFFFLL;
  v3 = *(_BYTE *)(result + 208) & 1 | (a2 << 6);
  *(_QWORD *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(_QWORD *)(result + 176) = v2;
  *(_BYTE *)(result + 208) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DisplayInfo.DrawOperation()
{
  return &type metadata for Text.Effect.DisplayInfo.DrawOperation;
}

uint64_t destroy for Text.Effect.DisplayInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.DisplayInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.DisplayInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.DisplayInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DisplayInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.DisplayInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 120) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DisplayInfo()
{
  return &type metadata for Text.Effect.DisplayInfo;
}

double _PreferenceReadingView.value.getter@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double _PreferenceReadingView.value.setter(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t (*_PreferenceReadingView.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceReadingView.transform.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t _PreferenceReadingView.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_PreferenceReadingView.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _PreferenceReadingView.init(value:transform:)@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  double result;

  result = *a1;
  *a4 = *(_QWORD *)a1;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void static _PreferenceReadingView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)(a3, a3, a5, v7);
  type metadata accessor for PreferenceReadingChild();
}

uint64_t sub_234D004DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int ShouldRecordTree;
  void (*v14)(_QWORD *__return_ptr, int *, uint64_t *);
  uint64_t result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceReadingChild<A, B>, a1);
  _GraphValue.init<A>(_:)((uint64_t)&v31, v2, a1, v5, &v30);
  v27 = v30;
  v6 = v1[11];
  v7 = v1[13];
  v23 = *(_DWORD *)(v3 - 160);
  v21 = *(_DWORD *)(v3 - 176);
  v22 = *(_DWORD *)(v3 - 156);
  v8 = *(_DWORD *)(v3 - 148);
  v24 = *(_DWORD *)(v3 - 152);
  v9 = v1[16];
  v10 = v1[17];
  v11 = *(_DWORD *)(v3 - 124);
  v19 = *(_DWORD *)(v3 - 120);
  v20 = *(_DWORD *)(v3 - 128);
  v12 = *(_DWORD *)(v3 - 108);
  v17 = *(_DWORD *)(v3 - 112);
  v18 = *(_DWORD *)(v3 - 116);
  v16 = *(_DWORD *)(v3 - 104);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v47 = v6;
  v1[2] = v7;
  v48 = v21;
  v49 = v23;
  v50 = v22;
  v52 = v8;
  v1[5] = v9;
  v1[6] = v10;
  v53 = v20;
  v54 = v11;
  v55 = v19;
  v56 = v18;
  v57 = v17;
  v58 = v12;
  v59 = v16;
  v28 = v27;
  v31 = v6;
  v32 = v21;
  v33 = v7;
  v34 = v23;
  v35 = v22;
  v36 = 0;
  v37 = v8;
  v38 = v9;
  v39 = v10;
  v40 = v20;
  v41 = v11;
  v42 = v19;
  v43 = v18;
  v44 = v17;
  v45 = v12;
  v46 = v16;
  v14 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *))(v25 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v29, &v28, &v31);
  v51 = v24;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v29, (uint64_t)&v47);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  result = swift_release();
  *v26 = v29[0];
  v26[1] = v29[1];
  return result;
}

void type metadata accessor for PreferenceReadingChild()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void PreferenceReadingChild.view.getter()
{
  type metadata accessor for _PreferenceReadingView();
}

uint64_t sub_234D0079C()
{
  _QWORD *v0;
  _QWORD *Value;
  uint64_t v2;
  uint64_t v3;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  v2 = Value[2];
  *v0 = *Value;
  v0[1] = v3;
  v0[2] = v2;
  return swift_retain();
}

void protocol witness for static View._makeView(view:inputs:) in conformance _PreferenceReadingView<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static _PreferenceReadingView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t PreferenceReadingChild.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t CurrentAttribute;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  char *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int v60;
  char v61[24];
  uint64_t v62;

  v52 = a6;
  v53 = a5;
  v62 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for ObservationTracking._AccessList();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v51 = (char *)&v46 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v48 = (char *)&v46 - v17;
  type metadata accessor for ObservationTracking._AccessList?();
  v19 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v46 - v23;
  v50 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v54 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v49 = (char *)&v46 - v28;
  v56 = a2;
  v57 = a3;
  v58 = a4;
  v59 = v53;
  v60 = a1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    a4 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v53 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v24, 1, 1, v10);
  MEMORY[0x24BDAC7A8](v30);
  *(&v46 - 4) = a3;
  *(&v46 - 3) = (uint64_t)partial apply for closure #1 in PreferenceReadingChild.value.getter;
  *(&v46 - 2) = (uint64_t)&v55;
  v31 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v24, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v46 - 6), v19, v31, a3, MEMORY[0x24BEE3F20], (uint64_t)v61);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v24, (uint64_t)v21);
  v32 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v21, 1, v10) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  }
  else
  {
    v33 = v48;
    v47 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v47(v48, v21, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v51, v33, v10);
    swift_beginAccess();
    v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((_QWORD *)v34 + 2) = v37 + 1;
    v47(&v34[((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v37], v51, v10);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v33, v10);
    v32 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v38 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v39 = v49;
  v38(v49, v54, a3);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v24);
  v38(v52, v39, a3);
  v40 = v32[463];
  v41 = *(_QWORD *)(v40 + 16);
  if (v41)
  {
    v42 = v40 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v43 = *(_QWORD *)(v11 + 72);
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v44(v13, v42, v10);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v13, a4, a3);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v42 += v43;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
    v32 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v32[463] = v53;
  return swift_bridgeObjectRelease();
}

void closure #1 in PreferenceReadingChild.value.getter()
{
  type metadata accessor for _PreferenceReadingView();
}

uint64_t sub_234D00D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in PreferenceReadingChild.value.getter, (uint64_t)&v4, a1, v1, v2);
}

void closure #1 in closure #1 in PreferenceReadingChild.value.getter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  PreferenceReadingChild.view.getter();
}

uint64_t sub_234D00DDC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  *(_QWORD *)(v6 - 112) = *(_QWORD *)(v6 - 104);
  v8 = type metadata accessor for _PreferenceValue(0, v1, v0, v7);
  _PreferenceValue.wrappedValue.getter(v8, v4);
  v2(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PreferenceReadingChild<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceReadingChild<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  int *v2;

  return PreferenceReadingChild.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(void **)(a1 + 40), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceReadingChild<A, B>()
{
  return specialized PreferenceReadingChild.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceReadingChild<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceReadingChild<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t _PreferenceValue._force<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;

  *a3 = *v3;
  a3[1] = a1;
  a3[2] = a2;
  return swift_retain();
}

uint64_t assignWithCopy for _PreferenceReadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

void type metadata accessor for _PreferenceReadingView()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t instantiation function for generic protocol witness table for PreferenceReadingChild<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceReadingChild<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in PreferenceReadingChild<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void partial apply for closure #1 in PreferenceReadingChild.value.getter()
{
  closure #1 in PreferenceReadingChild.value.getter();
}

void partial apply for closure #1 in closure #1 in PreferenceReadingChild.value.getter()
{
  closure #1 in closure #1 in PreferenceReadingChild.value.getter();
}

uint64_t specialized PreferenceReadingChild.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x203A64616552;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityCustomContentKey.Identifier(uint64_t *a1, uint64_t *a2)
{
  return specialized static AccessibilityCustomContentKey.Identifier.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t AccessibilityCustomContentKey.init(_:id:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = a5;
  *(_QWORD *)(a7 + 8) = a6;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = result;
  *(_QWORD *)(a7 + 40) = a2;
  *(_BYTE *)(a7 + 48) = a3 & 1;
  *(_QWORD *)(a7 + 56) = a4;
  return result;
}

uint64_t AccessibilityCustomContentKey.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  type metadata accessor for LocalizedTextStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)a7 = a5;
  *(_QWORD *)(a7 + 8) = a6;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = result;
  *(_QWORD *)(a7 + 40) = 0;
  *(_BYTE *)(a7 + 48) = 1;
  *(_QWORD *)(a7 + 56) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t AccessibilityCustomContentKey.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for LocalizedTextStorage();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)a5 = v10;
  *(_OWORD *)(a5 + 8) = xmmword_235299080;
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a5 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a5 + 32) = v10;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 1;
  *(_QWORD *)(a5 + 56) = v11;
  return swift_retain();
}

{
  char v5;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3 & 1 | 0x8000000000000000;
  *(_QWORD *)(a5 + 24) = a4;
  *(_QWORD *)(a5 + 32) = a1;
  *(_QWORD *)(a5 + 40) = a2;
  v5 = a3 & 1;
  *(_BYTE *)(a5 + 48) = v5;
  *(_QWORD *)(a5 + 56) = a4;
  outlined copy of Text.Storage(a1, a2, v5);
  return swift_bridgeObjectRetain();
}

__n128 AccessibilityCustomContentEntry.init(_:value:importance:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;

  v7 = *(_BYTE *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_OWORD *)(a7 + 16) = v9;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a7 + 32) = result;
  *(_BYTE *)(a7 + 48) = v7;
  *(_QWORD *)(a7 + 56) = v8;
  *(_QWORD *)(a7 + 64) = a2;
  *(_QWORD *)(a7 + 72) = a3;
  *(_BYTE *)(a7 + 80) = a4 & 1;
  *(_QWORD *)(a7 + 88) = a5;
  *(_QWORD *)(a7 + 96) = a6;
  *(_BYTE *)(a7 + 112) = 0;
  return result;
}

void AccessibilityCustomContentEntry.init<A>(_:value:importance:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_BYTE *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 56) = v4;
  AnyAccessibilityValue.init<A>(_:)();
}

void sub_234D01214()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = v0;
  *(_BYTE *)(v1 + 112) = 1;
}

double AccessibilityCustomContentEntry.init(clearing:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  __int128 v4;
  double result;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 48) = v2;
  *(_QWORD *)(a2 + 56) = v3;
  result = 0.0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_BYTE *)(a2 + 112) = 2;
  return result;
}

uint64_t Array<A>.resolve(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t result;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;

  v86 = type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x24BDAC7A8](v86);
  v85 = (uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BEE4AF8];
  v6 = *a1;
  v83 = a1[1];
  v84 = v6;
  v106 = MEMORY[0x24BEE4AF8];
  v105 = MEMORY[0x24BEE4B08];
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    return v5;
  }
  v87 = &v104;
  v88 = a2 + 32;
  v76 = a2;
  swift_bridgeObjectRetain();
  v8 = 0;
  v78 = v7;
  while (1)
  {
    outlined init with copy of AccessibilityCustomContentEntry(v88 + 120 * v8, (uint64_t)&v96);
    v9 = v96;
    v10 = v97;
    if (v98 < 0)
    {
      v11 = v99;
      if ((v98 & 1) != 0)
      {
        outlined copy of Text.Storage(v96, v97, 1);
        swift_bridgeObjectRetain();
        v12 = v85;
        Text.Style.init()(v85);
        v13 = v86;
        v14 = (_QWORD *)(v12 + *(int *)(v86 + 20));
        v15 = (uint64_t *)(v12 + *(int *)(v86 + 24));
        *v15 = 0;
        v15[1] = 0xE000000000000000;
        *(_BYTE *)(v12 + *(int *)(v13 + 28)) = 0;
        *v14 = 0;
        v14[1] = 0;
        specialized Text.resolve<A>(into:in:with:)(v12, v84, v83, 0, v9, v10, 1, v11);
        v17 = *v15;
        v16 = v15[1];
        swift_bridgeObjectRetain();
        outlined destroy of TypesettingConfiguration(v12, type metadata accessor for Text.ResolvedString);
        outlined consume of Text.Storage(v9, v10, 1);
        v9 = v17;
        v10 = v16;
      }
      else
      {
        outlined copy of Text.Storage(v96, v97, 0);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    if (String.count.getter() < 1)
      goto LABEL_4;
    v18 = v105;
    if (!*(_QWORD *)(v105 + 16))
      goto LABEL_29;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v19 = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v18 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_28;
    v22 = *(_QWORD *)(v18 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v9 && v23[1] == v10;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      break;
LABEL_3:
    swift_bridgeObjectRelease();
LABEL_4:
    outlined destroy of AccessibilityCustomContentEntry((uint64_t)&v96);
    swift_bridgeObjectRelease();
LABEL_5:
    if (++v8 == v7)
      goto LABEL_57;
  }
  v25 = ~v20;
  while (1)
  {
    v21 = (v21 + 1) & v25;
    if (((*(_QWORD *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      break;
    v26 = (_QWORD *)(v22 + 16 * v21);
    v27 = *v26 == v9 && v26[1] == v10;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_3;
  }
LABEL_28:
  swift_bridgeObjectRelease();
LABEL_29:
  specialized Set._Variant.insert(_:)((Swift::Int *)&v91, v9, v10);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityCustomContentEntry.Value(v87, (uint64_t)&v91);
  if (!v95)
  {
    v47 = *((_QWORD *)&v91 + 1);
    v46 = v91;
    v48 = *((_QWORD *)&v92 + 1);
    v82 = v93;
    v79 = v92;
    v80 = *((_QWORD *)&v91 + 1);
    if ((v92 & 1) != 0)
    {
      v49 = v85;
      Text.Style.init()(v85);
      v50 = v86;
      v51 = (_QWORD *)(v49 + *(int *)(v86 + 20));
      v52 = (uint64_t *)(v49 + *(int *)(v86 + 24));
      *v52 = 0;
      v52[1] = 0xE000000000000000;
      *(_BYTE *)(v49 + *(int *)(v50 + 28)) = 0;
      *v51 = 0;
      v51[1] = 0;
      specialized Text.resolve<A>(into:in:with:)(v49, v84, v83, 0, v46, v47, 1, v48);
      v47 = v52[1];
      v81 = *v52;
      swift_bridgeObjectRetain();
      outlined destroy of TypesettingConfiguration(v49, type metadata accessor for Text.ResolvedString);
    }
    else
    {
      swift_bridgeObjectRetain();
      v81 = v46;
    }
    v57 = v100;
    v58 = v101;
    if ((v102 & 1) != 0)
    {
      v59 = v103;
      outlined copy of Text.Storage(v100, v101, 1);
      swift_bridgeObjectRetain();
      v77 = v46;
      v60 = v85;
      Text.Style.init()(v85);
      v61 = v86;
      v62 = (_QWORD *)(v60 + *(int *)(v86 + 20));
      v63 = (uint64_t *)(v60 + *(int *)(v86 + 24));
      *v63 = 0;
      v63[1] = 0xE000000000000000;
      *(_BYTE *)(v60 + *(int *)(v61 + 28)) = 0;
      *v62 = 0;
      v62[1] = 0;
      specialized Text.resolve<A>(into:in:with:)(v60, v84, v83, 0, v57, v58, 1, v59);
      v64 = *v63;
      v65 = v63[1];
      swift_bridgeObjectRetain();
      v66 = v60;
      v46 = v77;
      outlined destroy of TypesettingConfiguration(v66, type metadata accessor for Text.ResolvedString);
      outlined consume of Text.Storage(v57, v58, 1);
      swift_bridgeObjectRelease();
      v57 = v64;
      v58 = v65;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v67 = (void *)MEMORY[0x23B7C5DAC](v57, v58);
    swift_bridgeObjectRelease();
    v68 = (void *)MEMORY[0x23B7C5DAC](v81, v47);
    swift_bridgeObjectRelease();
    v69 = objc_msgSend((id)objc_opt_self(), sel_customContentWithLabel_value_, v67, v68);

    objc_msgSend(v69, sel_setImportance_, v82);
    if (v106 >> 62)
    {
      v74 = v69;
      swift_bridgeObjectRetain();
      v75 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v7 = v78;
      if (v75 < 0)
      {
        __break(1u);
LABEL_57:
        swift_bridgeObjectRelease();
        v5 = v106;
        goto LABEL_58;
      }
    }
    else
    {
      v70 = v69;
      v7 = v78;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v69);
    outlined consume of Text.Storage(v46, v80, v79);

    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  if (v95 != 1)
  {
LABEL_52:
    outlined destroy of AccessibilityCustomContentEntry((uint64_t)&v96);
    goto LABEL_5;
  }
  v89[0] = v91;
  v89[1] = v92;
  v29 = v93;
  v28 = v94;
  v90 = v93;
  v30 = *((_QWORD *)&v92 + 1);
  __swift_project_boxed_opaque_existential_1(v89, *((uint64_t *)&v92 + 1));
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(v30, v29);
  if (v32)
    v33 = v31;
  else
    v33 = 0;
  if (v32)
    v34 = v32;
  else
    v34 = 0xE000000000000000;
  v36 = v100;
  v35 = v101;
  if ((v102 & 1) != 0)
  {
    v37 = v103;
    outlined copy of Text.Storage(v100, v101, 1);
    swift_bridgeObjectRetain();
    v82 = v33;
    v38 = v28;
    v39 = v85;
    Text.Style.init()(v85);
    v40 = v86;
    v41 = (_QWORD *)(v39 + *(int *)(v86 + 20));
    v42 = (uint64_t *)(v39 + *(int *)(v86 + 24));
    *v42 = 0;
    v42[1] = 0xE000000000000000;
    *(_BYTE *)(v39 + *(int *)(v40 + 28)) = 0;
    *v41 = 0;
    v41[1] = 0;
    specialized Text.resolve<A>(into:in:with:)(v39, v84, v83, 0, v36, v35, 1, v37);
    v44 = *v42;
    v43 = v42[1];
    swift_bridgeObjectRetain();
    v45 = v39;
    v28 = v38;
    v33 = v82;
    outlined destroy of TypesettingConfiguration(v45, type metadata accessor for Text.ResolvedString);
    outlined consume of Text.Storage(v36, v35, 1);
    v7 = v78;
    swift_bridgeObjectRelease();
    v36 = v44;
    v35 = v43;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v53 = (void *)MEMORY[0x23B7C5DAC](v36, v35);
  swift_bridgeObjectRelease();
  v54 = (void *)MEMORY[0x23B7C5DAC](v33, v34);
  swift_bridgeObjectRelease();
  v55 = objc_msgSend((id)objc_opt_self(), sel_customContentWithLabel_value_, v53, v54);

  objc_msgSend(v55, sel_setImportance_, v28);
  if (!(v106 >> 62))
  {
    v56 = v55;
    goto LABEL_44;
  }
  v71 = v55;
  swift_bridgeObjectRetain();
  v72 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if ((v72 & 0x8000000000000000) == 0)
  {
LABEL_44:
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v55);

    outlined destroy of AnyAccessibilityValue((uint64_t)v89);
    goto LABEL_52;
  }
  __break(1u);
  return result;
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableKey.init(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int16 v20;
  uint64_t v21;
  uint64_t result;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned __int8 v35;
  char v36;
  char v37;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_BYTE *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *a2;
  v13 = a2[1];
  v29 = v6;
  v30 = *(_QWORD *)a1;
  if (v6 < 0)
  {
    v24 = *(_QWORD *)(a1 + 56);
    v15 = v6 & 1;
    v28 = v6 & 1;
    v31 = *a2;
    v32 = v13;
    v34 = 0uLL;
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v5, v6);
    swift_retain();
    swift_retain();
    v37 = v15;
    v11 = v24;
    v16 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v4, v5, v37, v7, &v31, 1, 1, 0, 0, &v34);
    v17 = v5;
    v18 = v16;
    outlined consume of Text.Storage(v4, v17, v28);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v26 = 0;
    v27 = v18;
    v19 = v18 == 0;
    v5 = v17;
    if (v19)
      v20 = 255;
    else
      v20 = 1;
    v25 = v20;
  }
  else
  {
    v33 = MEMORY[0x24BEE0D00];
    v31 = v4;
    v32 = v5;
    swift_bridgeObjectRetain();
    AccessibilityText.init(_:)(&v31, (uint64_t)&v34);
    v26 = *((_QWORD *)&v34 + 1);
    v27 = v34;
    if (v36)
      v14 = 256;
    else
      v14 = 0;
    v25 = v14 | v35;
  }
  v31 = v12;
  v32 = v13;
  v34 = 0uLL;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v8, v9, v10);
  v21 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v8, v9, v10, v11, &v31, 1, 1, 0, 0, &v34);
  outlined consume of Text.Storage(v8, v9, v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityCustomContentKey.Identifier(v30, v5, v29);
  outlined consume of Text.Storage(v8, v9, v10);
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v21)
    v23 = 1;
  else
    v23 = 255;
  *(_QWORD *)a3 = v27;
  *(_QWORD *)(a3 + 8) = v26;
  *(_WORD *)(a3 + 16) = v25;
  *(_QWORD *)(a3 + 24) = v21;
  *(_QWORD *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = v23;
  return result;
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableKey.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys, (uint64_t)&unk_250642E60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v17 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - v5;
  v7 = *v1;
  v8 = v1[1];
  v9 = *((_WORD *)v1 + 8);
  v10 = v1[3];
  v15 = v1[4];
  v16 = v10;
  v22 = *((unsigned __int16 *)v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v23 = 0;
  lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  v11 = v18;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  v13 = v17;
  v19 = v16;
  v20 = v15;
  v21 = v22;
  v23 = 1;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v4);
}

void CodableAccessibilityCustomContentList.CodableEntry.CodableKey.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  __int16 v11;
  id v12;
  uint64_t v13;
  __int16 v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  __int16 v22;
  char v23;

  v19 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys, (uint64_t)&unk_250642E60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of AccessibilityText?(0, 0, 255);
    v16 = 0;
    v17 = 0;
    v18 = -1;
  }
  else
  {
    v23 = 0;
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10 = v20;
    v9 = v21;
    v11 = v22;
    v23 = 1;
    outlined copy of AccessibilityText?(v20, v21, v22);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v20;
    v13 = v21;
    v14 = v22;
    outlined copy of AccessibilityText?(v20, v21, v22);
    outlined consume of AccessibilityText?(0, 0, 255);
    outlined copy of AccessibilityText?(v10, v9, v11);
    outlined copy of AccessibilityText?(v12, v13, v14);
    outlined consume of AccessibilityText?(v12, v13, v14);
    outlined consume of AccessibilityText?(v10, v9, v11);
    v15 = v19;
    *v19 = v10;
    v15[1] = v9;
    *((_WORD *)v15 + 8) = v11;
    v15[3] = v12;
    v15[4] = v13;
    *((_WORD *)v15 + 20) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of AccessibilityText?(v10, v9, v11);
    v16 = v12;
    v17 = v13;
    v18 = v14;
  }
  outlined consume of AccessibilityText?(v16, v17, v18);
}

void CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, (uint64_t)&unk_250642F70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - v4;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys, (uint64_t)&unk_250643090, v2);
  v7 = v6;
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - v8;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys, (uint64_t)&unk_250643000, v2);
  v11 = v10;
  v22 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v21, (uint64_t)&v26);
  if ((v29 & 1) != 0)
  {
    v23 = v26;
    v24 = v27;
    v25 = v28;
    v30 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    v14 = v20;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v14);
    outlined destroy of AnyAccessibilityValue((uint64_t)&v23);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  }
  else
  {
    v15 = v26;
    v16 = v27;
    v17 = BYTE1(v27);
    LOBYTE(v23) = 0;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v23 = v15;
    LOBYTE(v24) = v16;
    BYTE1(v24) = v17;
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
    outlined consume of AccessibilityText.Storage((void *)v15, *((uint64_t *)&v15 + 1), v16);
  }
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  char v36;
  char v37;
  __int128 v38;
  char v39;
  char v40;
  char v41;
  __int128 v42[3];
  uint64_t v43;

  v29 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, (uint64_t)&unk_250642F70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v30 = v4;
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v27 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys, (uint64_t)&unk_250643090, v3);
  v33 = v6;
  v31 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys, (uint64_t)&unk_250643000, v3);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();
  v14 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    goto LABEL_7;
  v15 = v33;
  v16 = v34;
  v43 = v11;
  v28 = a1;
  v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v23 = &type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v10);
    a1 = v28;
LABEL_7:
    v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  if ((*(_BYTE *)(v17 + 32) & 1) != 0)
  {
    LOBYTE(v38) = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();
    v18 = v16;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    v19 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = v43;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v19);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v10);
    v41 = 1;
  }
  else
  {
    LOBYTE(v38) = 0;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = v43;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v15);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v10);
    v38 = v35;
    v39 = v36;
    v40 = v37;
    v41 = 0;
  }
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(&v38, v42);
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v42, v29);
  v25 = (uint64_t)v28;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6562616CLL;
  else
    return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  CodableAccessibilityCustomContentList.CodableEntry.CodableKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey(_QWORD *a1)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableKey.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 1954047348;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(_QWORD *a1)
{
  CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.encode(to:)(a1);
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.init(_:in:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v6 = *a2;
  v5 = a2[1];
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  v7 = a3 + 8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = -1;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 1;
  outlined init with copy of AccessibilityCustomContentEntry.Value(a1, (uint64_t)&v18);
  if (!v22)
  {
    v11 = v18;
    v12 = v19;
    v13 = *((_QWORD *)&v19 + 1);
    v15 = v20;
    v17[0] = v6;
    v17[1] = v5;
    v16 = 0uLL;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
    swift_retain();
    swift_retain();
    v14 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v11, *((uint64_t *)&v11 + 1), v12, v13, v17, 1, 1, 0, 0, &v16);
    outlined consume of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)a1);
    swift_release();
    result = swift_release();
    if (!v14)
      return result;
    result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(v7, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
    *(_QWORD *)(a3 + 8) = v14;
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 1;
    *(_BYTE *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = v15;
    goto LABEL_6;
  }
  if (v22 == 1)
  {
    outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)a1);
    swift_release();
    swift_release();
    v8 = v21;
    result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(v7, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
    v10 = v19;
    *(_OWORD *)v7 = v18;
    *(_OWORD *)(v7 + 16) = v10;
    *(_QWORD *)(v7 + 32) = v20;
    *(_BYTE *)(a3 + 48) = 1;
    *(_QWORD *)(a3 + 56) = v8;
LABEL_6:
    *(_BYTE *)(a3 + 64) = 0;
    return result;
  }
  outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)a1);
  swift_release();
  result = swift_release();
  *(_BYTE *)a3 = 1;
  return result;
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = v1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, (uint64_t)&unk_2506431B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v15 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v10 = *(_BYTE *)(v3 + 64);
    v12 = *(_QWORD *)(v3 + 56);
    v13 = v10;
    v14 = 2;
    type metadata accessor for ProxyCodable<AXCustomContentImportance?>(0);
    lazy protocol witness table accessor for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>(&lazy protocol witness table cache variable for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>, (uint64_t)&protocol conformance descriptor for ProxyCodable<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14[8];
  _OWORD v15[2];
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;

  v11 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, (uint64_t)&unk_2506431B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  v14[0] = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v17 = -1;
  v18 = 0;
  v19 = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v11;
    LOBYTE(v12) = 0;
    v14[0] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v20 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v12, (uint64_t)v15);
    type metadata accessor for ProxyCodable<AXCustomContentImportance?>(0);
    v20 = 2;
    lazy protocol witness table accessor for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>(&lazy protocol witness table cache variable for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>, (uint64_t)&protocol conformance descriptor for ProxyCodable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = v12;
    v19 = v13;
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue(v14, v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue((uint64_t)v14);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E65746E6F63;
  if (*v0 != 1)
    v1 = 0x6E6174726F706D69;
  if (*v0)
    return v1;
  else
    return 0x7261656C63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue(_QWORD *a1)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableValue.encode(to:)(a1);
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  __int16 v11;
  __int128 v13;
  __int16 v14;
  __int128 v15;
  __int16 v16;
  char v17;

  v3 = v1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys, (uint64_t)&unk_2506432C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = *((_WORD *)v3 + 8);
  v11 = *((_WORD *)v3 + 20);
  v13 = *v3;
  v14 = v10;
  v15 = *(__int128 *)((char *)v3 + 24);
  v16 = v11;
  v17 = 0;
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void CodableAccessibilityCustomContentList.CodableEntry.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[32];
  __int128 v14;
  char v15;
  __int128 v16;
  __int16 v17;
  __int128 v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;

  v11 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys, (uint64_t)&unk_2506432C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v9 = v11;
    v25 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v16 = v12;
    v17 = *(_WORD *)v13;
    v18 = *(_OWORD *)&v13[8];
    v19 = *(_WORD *)&v13[24];
    v25 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = *(_OWORD *)&v13[16];
    v23 = v14;
    v24 = v15;
    v20 = v12;
    v21 = *(_OWORD *)v13;
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry((uint64_t *)&v16, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry((uint64_t)&v16);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x56656C6261646F63;
  else
    return 0x4B656C6261646F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  CodableAccessibilityCustomContentList.CodableEntry.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry(_QWORD *a1)
{
  return CodableAccessibilityCustomContentList.CodableEntry.encode(to:)(a1);
}

uint64_t CodableAccessibilityCustomContentList.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys, (uint64_t)&unk_2506433D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = a2;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList.CodableEntry], (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodingKeys()
{
  return 0x45656C6261646F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x45656C6261646F63 && a2 == 0xEE0073656972746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized CodableAccessibilityCustomContentList.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList(_QWORD *a1)
{
  uint64_t *v1;

  return CodableAccessibilityCustomContentList.encode(to:)(a1, *v1);
}

uint64_t specialized AnyAccessibilityValue.isEqual(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[40];
  _OWORD v12[2];
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = &type metadata for AnyAccessibilityValue;
  v14[4] = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  v14[0] = swift_allocObject();
  outlined init with copy of AnyAccessibilityValue(a1, v14[0] + 16);
  outlined init with copy of AnyTrackedValue((uint64_t)v14, (uint64_t)v11);
  type metadata accessor for AbstractAnyAccessibilityValue();
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    v13 = v10;
    v4 = a2[3];
    v5 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v4);
    v6 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v5 + 88))(v12, v4, v5);
    outlined destroy of AnyAccessibilityValue((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v8, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v6 & 1;
}

uint64_t specialized static AccessibilityCustomContentEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t (*v22)(uint64_t);
  char v23;
  uint64_t (*v24)(uint64_t);
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)a1;
  v39 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v34 = *(_QWORD *)(a1 + 32);
  v36 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v37 = *(_QWORD *)(a2 + 40);
  v38 = *(_QWORD *)(a2 + 32);
  v32 = *(_BYTE *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56);
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v10 < 0)
      return 0;
    if (v4 != v9 || v39 != v8)
    {
      v10 = *(_QWORD *)(a2 + 16);
      v4 = *(_QWORD *)a1;
      v7 = *(_BYTE *)(a1 + 48);
      v5 = *(_QWORD *)(a1 + 16);
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        return 0;
    }
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    v31 = v6;
    outlined copy of Text.Storage(v34, v6, v7);
    swift_bridgeObjectRetain();
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    v11 = v32;
    outlined copy of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if ((v10 & 0x8000000000000000) == 0)
    return 0;
  if ((v5 & 1) != 0)
  {
    if ((v10 & 1) == 0)
      return 0;
    v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96);
    v29 = *(_QWORD *)(a2 + 24);
    v15 = *(_QWORD *)(a1 + 24);
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    v31 = v6;
    v16 = v6;
    v17 = v29;
    outlined copy of Text.Storage(v34, v16, v7);
    swift_bridgeObjectRetain();
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined copy of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRetain();
    v28 = v15;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v9, v8, 1);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v4, v39, 1);
    v27 = v7;
    if ((v24(v9) & 1) == 0)
    {
LABEL_35:
      outlined consume of Text.Storage(v9, v8, v10 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v4, v39, v5 & 1);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
      outlined consume of Text.Storage(v38, v37, v32);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
      outlined consume of Text.Storage(v34, v31, v27);
      goto LABEL_33;
    }
  }
  else
  {
    if ((v10 & 1) != 0)
      return 0;
    v30 = *(_QWORD *)(a2 + 24);
    v31 = *(_QWORD *)(a1 + 40);
    v28 = *(_QWORD *)(a1 + 24);
    v27 = *(_BYTE *)(a1 + 48);
    if (v4 == v9 && v39 == v8)
    {
      outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
      outlined copy of Text.Storage(v34, v6, v7);
      swift_bridgeObjectRetain();
      v17 = v30;
      outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v10);
      outlined copy of Text.Storage(v38, v37, v32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v4, v39, 0);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v4, v39, 0);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
      outlined copy of Text.Storage(v34, v6, v7);
      swift_bridgeObjectRetain();
      v17 = v30;
      outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
      outlined copy of Text.Storage(v38, v37, v32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v9, v8, 0);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v4, v39, 0);
      if ((v23 & 1) == 0)
        goto LABEL_35;
    }
  }
  v25 = specialized static Array<A>.== infix(_:_:)(v28, v17);
  outlined consume of Text.Storage(v9, v8, v10 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v4, v39, v5 & 1);
  swift_bridgeObjectRelease();
  v7 = v27;
  v11 = v32;
  if ((v25 & 1) == 0)
  {
    outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined consume of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    v18 = v34;
    v19 = v31;
    v20 = v27;
    goto LABEL_32;
  }
LABEL_7:
  if ((v7 & 1) != 0)
  {
    if ((v11 & 1) != 0)
    {
      v26 = v7;
      v12 = v34;
      v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 96);
      outlined copy of Text.Storage(v34, v31, 1);
      outlined copy of Text.Storage(v38, v37, 1);
      v13 = v22(v38);
      v14 = v31;
      outlined consume of Text.Storage(v38, v37, 1);
      outlined consume of Text.Storage(v34, v31, 1);
      if ((v13 & 1) == 0)
      {
LABEL_28:
        outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
        outlined consume of Text.Storage(v38, v37, v32);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
        v18 = v12;
        v19 = v14;
        v20 = v26;
        goto LABEL_32;
      }
      goto LABEL_22;
    }
    outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined consume of Text.Storage(v38, v37, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    v18 = v34;
    v19 = v31;
    v20 = 1;
LABEL_32:
    outlined consume of Text.Storage(v18, v19, v20);
LABEL_33:
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v11 & 1) != 0)
  {
    outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined consume of Text.Storage(v38, v37, 1);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    v18 = v34;
    v19 = v31;
    v20 = 0;
    goto LABEL_32;
  }
  v26 = v7;
  v12 = v34;
  v14 = v31;
  if ((v34 != v38 || v31 != v37) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_28;
LABEL_22:
  v35 = specialized static Array<A>.== infix(_:_:)(v36, v33);
  outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
  outlined consume of Text.Storage(v38, v37, v32);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
  outlined consume of Text.Storage(v12, v14, v26);
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
    return specialized static AccessibilityCustomContentEntry.Value.== infix(_:_:)((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  return 0;
}

uint64_t specialized static AccessibilityCustomContentEntry.Value.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _BOOL8 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  int8x16_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  char v16;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[6];
  char v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  char v31;

  outlined init with copy of AccessibilityCustomContentEntry.Value(a1, (uint64_t)v26);
  outlined init with copy of AccessibilityCustomContentEntry.Value(a2, (uint64_t)&v28);
  if (!v27)
  {
    outlined init with copy of AccessibilityCustomContentEntry.Value(v26, (uint64_t)&v21);
    v7 = v21;
    v8 = v22;
    v9 = v23;
    if (v31)
    {
      outlined consume of Text.Storage(v21, *((uint64_t *)&v21 + 1), v22);
      swift_bridgeObjectRelease();
LABEL_13:
      outlined destroy of TypesettingConfiguration((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value));
      return 0;
    }
    v11 = v28;
    v12 = v29.i8[0];
    v13 = v29.i64[1];
    v14 = v30.i64[0];
    if ((v22 & 1) != 0)
    {
      if ((v29.i8[0] & 1) != 0)
      {
        v18 = v24;
        v15 = *(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 96);
        outlined copy of Text.Storage(v21, *((uint64_t *)&v21 + 1), 1);
        outlined copy of Text.Storage(v11, *((uint64_t *)&v11 + 1), 1);
        LOBYTE(v15) = v15(v11);
        outlined consume of Text.Storage(v11, *((uint64_t *)&v11 + 1), 1);
        outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), 1);
        if ((v15 & 1) == 0)
          goto LABEL_26;
LABEL_24:
        v16 = specialized static Array<A>.== infix(_:_:)(v9, v13);
        outlined consume of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), v8);
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {
          v6 = v18 == v14;
          goto LABEL_6;
        }
        goto LABEL_27;
      }
      v12 = 0;
      v8 = 1;
    }
    else
    {
      if ((v29.i8[0] & 1) == 0)
      {
        v18 = v24;
        if (v21 != v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_26;
        goto LABEL_24;
      }
      v8 = 0;
      v12 = 1;
    }
LABEL_26:
    outlined consume of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), v8);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (v27 != 1)
  {
    if (v31 == 2)
    {
      v10 = vorrq_s8(v29, v30);
      if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | *((_QWORD *)&v28 + 1) | (unint64_t)v28))
      {
        outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)v26);
        return 1;
      }
    }
    goto LABEL_13;
  }
  outlined init with copy of AccessibilityCustomContentEntry.Value(v26, (uint64_t)&v21);
  if (v31 != 1)
  {
    outlined destroy of AnyAccessibilityValue((uint64_t)&v21);
    goto LABEL_13;
  }
  v3 = v25;
  v4 = v30.i64[1];
  v19[0] = v28;
  v19[1] = v29;
  v20 = v30.i64[0];
  v5 = specialized AnyAccessibilityValue.isEqual(to:)((uint64_t)v19, &v21);
  outlined destroy of AnyAccessibilityValue((uint64_t)&v21);
  if ((v5 & 1) == 0)
  {
    outlined destroy of AnyAccessibilityValue((uint64_t)v19);
LABEL_27:
    outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)v26);
    return 0;
  }
  v6 = v3 == v4;
  outlined destroy of AnyAccessibilityValue((uint64_t)v19);
LABEL_6:
  outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)v26);
  return v6;
}

BOOL specialized static AccessibilityCustomContentKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  _BOOL8 result;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t (*v28)(uint64_t);
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v9 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v13 = *(_BYTE *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  if (v4 < 0)
  {
    if ((v10 & 0x8000000000000000) == 0)
      return 0;
    if ((v4 & 1) != 0)
    {
      if ((v10 & 1) == 0)
        return 0;
      v31 = *(_QWORD *)(a2 + 40);
      v32 = *(_QWORD *)(a1 + 40);
      v33 = *(_QWORD *)(a2 + 56);
      v34 = *(_QWORD *)(a1 + 24);
      v35 = *(_QWORD *)(a2 + 24);
      v36 = *(_QWORD *)(a1 + 56);
      v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v9, v8, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v2, v3, 1);
      if ((v28(v9) & 1) == 0)
      {
LABEL_28:
        outlined consume of Text.Storage(v9, v8, v10 & 1);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v2, v3, v4 & 1);
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      if ((v10 & 1) != 0)
        return 0;
      v35 = *(_QWORD *)(a2 + 24);
      v36 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(a2 + 40);
      v32 = *(_QWORD *)(a1 + 40);
      v33 = *(_QWORD *)(a2 + 56);
      v34 = *(_QWORD *)(a1 + 24);
      if (v2 == v9 && v3 == v8)
      {
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
      }
      else
      {
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v9, v8, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        if ((v29 & 1) == 0)
          goto LABEL_28;
      }
    }
    v30 = specialized static Array<A>.== infix(_:_:)(v34, v35);
    outlined consume of Text.Storage(v9, v8, v10 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v2, v3, v4 & 1);
    swift_bridgeObjectRelease();
    v5 = v32;
    v14 = v33;
    v11 = v31;
    if ((v30 & 1) != 0)
      goto LABEL_6;
    return 0;
  }
  if (v10 < 0)
    return 0;
  v36 = *(_QWORD *)(a1 + 56);
  if (v2 == v9 && v3 == v8)
    goto LABEL_6;
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v11 = v15;
  v5 = v17;
  v14 = v16;
  v19 = v18;
  result = 0;
  if ((v19 & 1) != 0)
  {
LABEL_6:
    if ((v7 & 1) != 0)
    {
      if ((v13 & 1) == 0)
        return 0;
      v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96);
      v22 = v14;
      v23 = v5;
      v24 = v11;
      outlined copy of Text.Storage(v6, v5, 1);
      outlined copy of Text.Storage(v12, v24, 1);
      v25 = v21(v12);
      outlined consume of Text.Storage(v12, v24, 1);
      outlined consume of Text.Storage(v6, v23, 1);
      v14 = v22;
      if ((v25 & 1) == 0)
        return 0;
    }
    else
    {
      if ((v13 & 1) != 0)
        return 0;
      if (v6 != v12 || v5 != v11)
      {
        v26 = v14;
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v14 = v26;
        if ((v27 & 1) == 0)
          return 0;
      }
    }
    return (specialized static Array<A>.== infix(_:_:)(v36, v14) & 1) != 0;
  }
  return result;
}

uint64_t outlined init with copy of AccessibilityCustomContentEntry.Value(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityCustomContentEntry.Value(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyAccessibilityValue(uint64_t a1)
{
  destroy for ScrollPosition.ViewID();
  return a1;
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in AXCustomContentImportance()
{
  return MEMORY[0x24BEE1EB8];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in AXCustomContentImportance()
{
  return MEMORY[0x24BEE1E90];
}

uint64_t outlined copy of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AccessibilityCustomContentKey(uint64_t a1)
{
  outlined consume of AccessibilityCustomContentKey.Identifier(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityCustomContentKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  LOBYTE(v6) = *(_BYTE *)(a2 + 48);
  outlined copy of Text.Storage(v8, v9, v6);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityCustomContentKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(_QWORD *)a2, v5, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v8, v9, v10);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  LOBYTE(v6) = *(_BYTE *)(a2 + 48);
  outlined copy of Text.Storage(v11, v12, v6);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = v6;
  outlined consume of Text.Storage(v13, v14, v15);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityCustomContentKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v4, v5, v6);
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentKey(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentKey()
{
  return &type metadata for AccessibilityCustomContentKey;
}

uint64_t destroy for AccessibilityCustomContentEntry(uint64_t a1)
{
  uint64_t result;

  outlined consume of AccessibilityCustomContentKey.Identifier(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  result = swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 112) == 1)
    return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  if (!*(_BYTE *)(a1 + 112))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  LOBYTE(v6) = *(_BYTE *)(a2 + 48);
  outlined copy of Text.Storage(v8, v9, v6);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(unsigned __int8 *)(a2 + 112);
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 88) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 64, a2 + 64);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = 1;
  }
  else if (v10)
  {
    v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v16;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 72);
    v13 = *(unsigned __int8 *)(a2 + 80);
    outlined copy of Text.Storage(v11, v12, *(_BYTE *)(a2 + 80));
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 80) = v13;
    v14 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v14;
    *(_BYTE *)(a1 + 112) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(_QWORD *)a2, v5, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v8, v9, v10);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  LOBYTE(v6) = *(_BYTE *)(a2 + 48);
  outlined copy of Text.Storage(v11, v12, v6);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = v6;
  outlined consume of Text.Storage(v13, v14, v15);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of AccessibilityCustomContentEntry.Value(a1 + 64);
    if (*(_BYTE *)(a2 + 112) == 1)
    {
      v19 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v19;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 64, a2 + 64);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = 1;
    }
    else if (*(_BYTE *)(a2 + 112))
    {
      v20 = *(_OWORD *)(a2 + 64);
      v21 = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v21;
      *(_OWORD *)(a1 + 96) = v22;
      *(_OWORD *)(a1 + 64) = v20;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 64);
      v17 = *(_QWORD *)(a2 + 72);
      v18 = *(_BYTE *)(a2 + 80);
      outlined copy of Text.Storage(v16, v17, v18);
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = v17;
      *(_BYTE *)(a1 + 80) = v18;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 112) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t outlined destroy of AccessibilityCustomContentEntry.Value(uint64_t a1)
{
  destroy for AccessibilityCustomContentEntry.Value(a1);
  return a1;
}

uint64_t assignWithTake for AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v4, v5, v6);
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of AccessibilityCustomContentEntry.Value(a1 + 64);
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentEntry(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentEntry()
{
  return &type metadata for AccessibilityCustomContentEntry;
}

uint64_t destroy for AccessibilityCustomContentKey.Identifier(uint64_t *a1)
{
  return outlined consume of AccessibilityCustomContentKey.Identifier(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for AccessibilityCustomContentKey.Identifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of AccessibilityCustomContentKey.Identifier(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessibilityCustomContentKey.Identifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of AccessibilityCustomContentKey.Identifier(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of AccessibilityCustomContentKey.Identifier(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for AccessibilityCustomContentKey.Identifier(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of AccessibilityCustomContentKey.Identifier(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentKey.Identifier(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentKey.Identifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for AccessibilityCustomContentKey.Identifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 63;
}

uint64_t destructiveProjectEnumData for AccessibilityCustomContentKey.Identifier(uint64_t result)
{
  *(_QWORD *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityCustomContentKey.Identifier(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentKey.Identifier()
{
  return &type metadata for AccessibilityCustomContentKey.Identifier;
}

ValueMetadata *type metadata accessor for CodableAccessibilityCustomContentList()
{
  return &type metadata for CodableAccessibilityCustomContentList;
}

uint64_t destroy for AccessibilityCustomContentEntry.Value(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 48);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    return __swift_destroy_boxed_opaque_existential_1(result);
  if (!v1)
  {
    outlined consume of Text.Storage(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityCustomContentEntry.Value(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  __int128 v11;

  v4 = *((unsigned __int8 *)a2 + 48);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v9 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v9;
    (**(void (***)(uint64_t, uint64_t *))(v9 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = a2[5];
    v10 = 1;
LABEL_8:
    *(_BYTE *)(a1 + 48) = v10;
    return a1;
  }
  if (v4)
  {
    v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v10 = *((_BYTE *)a2 + 48);
    goto LABEL_8;
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *((_BYTE *)a2 + 16);
  outlined copy of Text.Storage(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 48) = 0;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityCustomContentEntry.Value(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
    }
    v5 = *((unsigned __int8 *)a2 + 48);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v9 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else if (v5)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = a2[2];
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)a1 = v10;
    }
    else
    {
      v6 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_BYTE *)a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v7, v8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_BYTE *)(a1 + 48) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityCustomContentEntry.Value(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a2 + 48);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    else
    {
      if (!v5)
      {
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 48) = 0;
        return a1;
      }
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      LOBYTE(v5) = *(_BYTE *)(a2 + 48);
    }
    *(_BYTE *)(a1 + 48) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentEntry.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentEntry.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AccessibilityCustomContentEntry.Value(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 48);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityCustomContentEntry.Value(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentEntry.Value()
{
  return &type metadata for AccessibilityCustomContentEntry.Value;
}

uint64_t specialized static AccessibilityCustomContentKey.Identifier.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v16;
  uint64_t (*v17)(uint64_t);
  char v18;
  char v19;

  v8 = a7;
  if (a3 < 0)
  {
    if ((a7 & 0x8000000000000000) == 0)
      return 0;
    v16 = a3;
    if ((a3 & 1) != 0)
    {
      if ((a7 & 1) == 0)
        return 0;
      v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(a5, a6, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(a1, a2, 1);
      if ((v17(a5) & 1) == 0)
      {
LABEL_20:
        outlined consume of Text.Storage(a5, a6, v8 & 1);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(a1, a2, v16 & 1);
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      if ((a7 & 1) != 0)
        return 0;
      if (a1 == a5 && a2 == a6)
      {
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a1, a2, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a1, a2, 0);
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a5, a6, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a1, a2, 0);
        if ((v18 & 1) == 0)
          goto LABEL_20;
      }
    }
    v19 = specialized static Array<A>.== infix(_:_:)(a4, a8);
    outlined consume of Text.Storage(a5, a6, v8 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(a1, a2, v16 & 1);
    swift_bridgeObjectRelease();
    return (v19 & 1) != 0;
  }
  if (a7 < 0)
    return 0;
  if (a1 == a5 && a2 == a6)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7261656C63 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6174726F706D69 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4B656C6261646F63 && a2 == 0xEA00000000007965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x56656C6261646F63 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *specialized CodableAccessibilityCustomContentList.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v11[2];

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys, (uint64_t)&unk_2506433D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - v6;
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();
  v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList.CodableEntry], (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v9 = (_QWORD *)v11[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodingKeys, &unk_2506433D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodingKeys, &unk_2506433D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodingKeys, &unk_2506433D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodingKeys, &unk_2506433D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry, &type metadata for CodableAccessibilityCustomContentList.CodableEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry, &type metadata for CodableAccessibilityCustomContentList.CodableEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList.CodableEntry], (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value));
  }
}

unint64_t lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue, &type metadata for AnyAccessibilityValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue, &type metadata for AnyAccessibilityValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue, &type metadata for AnyAccessibilityValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue);
  }
  return result;
}

uint64_t sub_234D05F38()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined init with copy of AnyAccessibilityValue(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TimeDataFormattingContainer(a2, a1);
  return a2;
}

unint64_t type metadata accessor for AbstractAnyAccessibilityValue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AbstractAnyAccessibilityValue;
  if (!lazy cache variable for type metadata for AbstractAnyAccessibilityValue)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  }
  return result;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    __swift_destroy_boxed_opaque_existential_1(a1);
  else
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *((unsigned __int8 *)a2 + 40);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t *))(v5 - 8))(a1, a2);
    v6 = 1;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v9);
    v6 = 0;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  }
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    else
      outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = a2[3];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      v7 = 1;
    }
    else
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = *((_BYTE *)a2 + 16);
      outlined copy of AccessibilityText.Storage((void *)*a2, v9, v10);
      v7 = 0;
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v9;
      *(_BYTE *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    else
      outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content()
{
  return &type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodingKeys()
{
  return &unk_2506433D8;
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1)
{
  __int16 v2;
  int v3;

  if (*(_BYTE *)(a1 + 16) != 0xFF)
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_WORD *)(a1 + 16) & 1);
  v2 = *(_WORD *)(a1 + 40);
  if ((_BYTE)v2 != 0xFF)
    outlined consume of AccessibilityText.Storage(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), v2 & 1);
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 != 255)
  {
    if ((v3 & 1) != 0)
      __swift_destroy_boxed_opaque_existential_1(a1 + 56);
    else
      outlined consume of AccessibilityText.Storage(*(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  }
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  void *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  int v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  v4 = *((unsigned __int16 *)a2 + 8);
  if (*((_BYTE *)a2 + 16) == 0xFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    v5 = v4 >> 8;
    v6 = v4 & 1;
    v7 = *a2;
    v8 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v4 & 1);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 17) = v5;
  }
  v9 = *((unsigned __int16 *)a2 + 20);
  if (*((_BYTE *)a2 + 40) == 0xFF)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  }
  else
  {
    v10 = v9 >> 8;
    v11 = v9 & 1;
    v12 = (void *)a2[3];
    v13 = a2[4];
    outlined copy of AccessibilityText.Storage(v12, v13, v9 & 1);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v13;
    *(_BYTE *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 41) = v10;
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v14 = (_OWORD *)(a1 + 56);
  v15 = a2 + 7;
  v16 = *((unsigned __int8 *)a2 + 96);
  if (v16 == 255)
  {
    v17 = *(_OWORD *)(a2 + 9);
    *v14 = *v15;
    *(_OWORD *)(a1 + 72) = v17;
    *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)a2 + 81);
  }
  else if ((v16 & 1) != 0)
  {
    v21 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 80) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v14, v15);
    *(_BYTE *)(a1 + 96) = 1;
  }
  else
  {
    v18 = (void *)a2[7];
    v19 = a2[8];
    v20 = *((_BYTE *)a2 + 72);
    outlined copy of AccessibilityText.Storage(v18, v19, v20);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v19;
    *(_BYTE *)(a1 + 72) = v20;
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 96) = 0;
  }
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, uint64_t *a2)
{
  __int16 v4;
  __int128 v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  _OWORD *v17;
  __int16 v18;
  __int128 v19;
  __int16 v20;
  char v21;
  void *v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  __int128 *v30;
  __int128 *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v4 = *((_WORD *)a2 + 8);
  if (*(unsigned __int8 *)(a1 + 16) != 0xFF)
  {
    if (v4 == 255)
    {
      outlined destroy of AccessibilityText(a1);
      v6 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v6;
      goto LABEL_9;
    }
    v10 = v4 & 1;
    v11 = *a2;
    v12 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v12, v4 & 1);
    v13 = *(void **)a1;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v10;
    outlined consume of AccessibilityText.Storage(v13, v14, v15);
  }
  else
  {
    if (v4 == 255)
    {
      v5 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = v5;
      goto LABEL_9;
    }
    v7 = v4 & 1;
    v8 = *a2;
    v9 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v9, v4 & 1);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
  }
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
LABEL_9:
  v16 = (_OWORD *)(a1 + 24);
  v17 = a2 + 3;
  v18 = *((_WORD *)a2 + 20);
  if (*(unsigned __int8 *)(a1 + 40) != 0xFF)
  {
    if (v18 == 255)
    {
      outlined destroy of AccessibilityText(a1 + 24);
      v20 = *((_WORD *)a2 + 20);
      *v16 = *v17;
      *(_WORD *)(a1 + 40) = v20;
      goto LABEL_17;
    }
    v24 = v18 & 1;
    v25 = (void *)a2[3];
    v26 = a2[4];
    outlined copy of AccessibilityText.Storage(v25, v26, v18 & 1);
    v27 = *(void **)(a1 + 24);
    v28 = *(_QWORD *)(a1 + 32);
    v29 = *(_BYTE *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 32) = v26;
    *(_BYTE *)(a1 + 40) = v24;
    outlined consume of AccessibilityText.Storage(v27, v28, v29);
  }
  else
  {
    if (v18 == 255)
    {
      v19 = *v17;
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      *v16 = v19;
      goto LABEL_17;
    }
    v21 = v18 & 1;
    v22 = (void *)a2[3];
    v23 = a2[4];
    outlined copy of AccessibilityText.Storage(v22, v23, v18 & 1);
    *(_QWORD *)(a1 + 24) = v22;
    *(_QWORD *)(a1 + 32) = v23;
    *(_BYTE *)(a1 + 40) = v21;
  }
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
LABEL_17:
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v30 = (__int128 *)(a1 + 56);
  v31 = (__int128 *)(a2 + 7);
  v32 = *((unsigned __int8 *)a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v32 == 255)
    {
      v35 = *v31;
      v36 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)a2 + 81);
      *v30 = v35;
      *(_OWORD *)(a1 + 72) = v36;
      goto LABEL_27;
    }
    if ((v32 & 1) != 0)
    {
LABEL_24:
      v37 = a2[10];
      *(_QWORD *)(a1 + 80) = v37;
      *(_QWORD *)(a1 + 88) = a2[11];
      (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1 + 56, (uint64_t)(a2 + 7));
      *(_BYTE *)(a1 + 96) = 1;
      goto LABEL_27;
    }
LABEL_26:
    v38 = (void *)a2[7];
    v39 = a2[8];
    v40 = *((_BYTE *)a2 + 72);
    outlined copy of AccessibilityText.Storage(v38, v39, v40);
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v39;
    *(_BYTE *)(a1 + 72) = v40;
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 96) = 0;
    goto LABEL_27;
  }
  if (v32 != 255)
  {
    if ((uint64_t *)a1 == a2)
      goto LABEL_27;
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 56);
    if ((a2[12] & 1) != 0)
      goto LABEL_24;
    goto LABEL_26;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 56);
  v33 = *(_OWORD *)((char *)a2 + 81);
  v34 = *(_OWORD *)(a2 + 9);
  *v30 = *v31;
  *(_OWORD *)(a1 + 72) = v34;
  *(_OWORD *)(a1 + 81) = v33;
LABEL_27:
  v41 = a2[13];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v41;
  return a1;
}

uint64_t outlined destroy of AccessibilityText(uint64_t a1)
{
  destroy for AccessibilityText();
  return a1;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1)
{
  destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  void *v6;
  uint64_t v7;
  _OWORD *v8;
  __int16 v9;
  __int16 v10;
  void *v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(_WORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16) == 0xFF)
    goto LABEL_4;
  v5 = *(_WORD *)(a2 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    goto LABEL_6;
  }
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  outlined consume of AccessibilityText.Storage(v6, v7, v4 & 1);
  *(_BYTE *)(a1 + 17) = HIBYTE(v5) & 1;
LABEL_6:
  v8 = (_OWORD *)(a2 + 24);
  v9 = *(_WORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40) == 0xFF)
  {
LABEL_9:
    *(_OWORD *)(a1 + 24) = *v8;
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    goto LABEL_11;
  }
  v10 = *(_WORD *)(a2 + 40);
  if ((_BYTE)v10 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1 + 24);
    goto LABEL_9;
  }
  v11 = *(void **)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *v8;
  *(_BYTE *)(a1 + 40) = v10 & 1;
  outlined consume of AccessibilityText.Storage(v11, v12, v9 & 1);
  *(_BYTE *)(a1 + 41) = HIBYTE(v10) & 1;
LABEL_11:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
LABEL_15:
    v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a2 + 96) == 255 || a1 != a2)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 56);
    goto LABEL_15;
  }
LABEL_16:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry()
{
  return &type metadata for CodableAccessibilityCustomContentList.CodableEntry;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodingKeys, &unk_2506432C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodingKeys, &unk_2506432C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodingKeys, &unk_2506432C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](")y<\x1BX9\v", &unk_2506432C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey, &unk_250642EF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey, &unk_250642EF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue, &unk_250643240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue)
  {
    result = MEMORY[0x23B7C9C04]("Qu<\x1B@5\v", &unk_250643240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue);
  }
  return result;
}

void outlined consume of AccessibilityText?(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    outlined consume of AccessibilityText.Storage(a1, a2, a3 & 1);
}

uint64_t outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry(a2, a1);
  return a2;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1)
{
  destroy for CodableAccessibilityCustomContentList.CodableEntry(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, &unk_250642F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, &unk_250642F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, &unk_250642F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, &unk_250642F70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys, &unk_250643090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("\tw<\x1BH7\v", &unk_250643090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys, &unk_250643090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys, &unk_250643090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys, &unk_250643000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("Qv<\x1Bt6\v", &unk_250643000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys, &unk_250643000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys, &unk_250643000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

_OWORD *outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityText, &type metadata for AccessibilityText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityText, &type metadata for AccessibilityText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

uint64_t outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a2, a1);
  return a2;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  return &unk_250643000;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  return &unk_250643090;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234D06F94 + 4 * byte_235299090[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234D06FB4 + 4 * byte_235299095[v4]))();
}

_BYTE *sub_234D06F94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234D06FB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234D06FBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234D06FC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234D06FCC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234D06FD4(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys()
{
  return &unk_250642F70;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  return &unk_2506432C8;
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1)
{
  __int16 v2;

  if (*(_BYTE *)(a1 + 16) != 0xFF)
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_WORD *)(a1 + 16) & 1);
  v2 = *(_WORD *)(a1 + 40);
  if ((_BYTE)v2 != 0xFF)
    outlined consume of AccessibilityText.Storage(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), v2 & 1);
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  void *v13;

  v4 = *((unsigned __int16 *)a2 + 8);
  if (*((_BYTE *)a2 + 16) == 0xFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    v5 = v4 >> 8;
    v6 = v4 & 1;
    v7 = *a2;
    v8 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v4 & 1);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 17) = v5;
  }
  v9 = *((unsigned __int16 *)a2 + 20);
  if (*((_BYTE *)a2 + 40) == 0xFF)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  }
  else
  {
    v10 = v9 >> 8;
    v11 = v9 & 1;
    v13 = (void *)a2[3];
    v12 = a2[4];
    outlined copy of AccessibilityText.Storage(v13, v12, v9 & 1);
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 41) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, uint64_t *a2)
{
  __int16 v4;
  __int128 v5;
  __int16 v6;
  char v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  _OWORD *v17;
  __int16 v18;
  __int128 v19;
  __int16 v20;
  char v21;
  void *v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;

  v4 = *((_WORD *)a2 + 8);
  if (*(unsigned __int8 *)(a1 + 16) != 0xFF)
  {
    if (v4 == 255)
    {
      outlined destroy of AccessibilityText(a1);
      v6 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v6;
      goto LABEL_9;
    }
    v10 = v4 & 1;
    v11 = *a2;
    v12 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v12, v4 & 1);
    v13 = *(void **)a1;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v10;
    outlined consume of AccessibilityText.Storage(v13, v14, v15);
  }
  else
  {
    if (v4 == 255)
    {
      v5 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = v5;
      goto LABEL_9;
    }
    v7 = v4 & 1;
    v8 = (void *)*a2;
    v9 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v9, v4 & 1);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
  }
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
LABEL_9:
  v16 = (_OWORD *)(a1 + 24);
  v17 = a2 + 3;
  v18 = *((_WORD *)a2 + 20);
  if (*(unsigned __int8 *)(a1 + 40) != 0xFF)
  {
    if (v18 != 255)
    {
      v24 = v18 & 1;
      v25 = (void *)a2[3];
      v26 = a2[4];
      outlined copy of AccessibilityText.Storage(v25, v26, v18 & 1);
      v27 = *(void **)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v29 = *(_BYTE *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 32) = v26;
      *(_BYTE *)(a1 + 40) = v24;
      outlined consume of AccessibilityText.Storage(v27, v28, v29);
      goto LABEL_16;
    }
    outlined destroy of AccessibilityText(a1 + 24);
    v20 = *((_WORD *)a2 + 20);
    *v16 = *v17;
    *(_WORD *)(a1 + 40) = v20;
  }
  else
  {
    if (v18 != 255)
    {
      v21 = v18 & 1;
      v22 = (void *)a2[3];
      v23 = a2[4];
      outlined copy of AccessibilityText.Storage(v22, v23, v18 & 1);
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 32) = v23;
      *(_BYTE *)(a1 + 40) = v21;
LABEL_16:
      *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
      return a1;
    }
    v19 = *v17;
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    *v16 = v19;
  }
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v4 = *(_WORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16) == 0xFF)
    goto LABEL_4;
  v5 = *(_WORD *)(a2 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    goto LABEL_6;
  }
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  outlined consume of AccessibilityText.Storage(v6, v7, v4 & 1);
  *(_BYTE *)(a1 + 17) = HIBYTE(v5) & 1;
LABEL_6:
  v8 = a2 + 24;
  v9 = *(_WORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40) != 0xFF)
  {
    v10 = *(_WORD *)(a2 + 40);
    if ((_BYTE)v10 != 0xFF)
    {
      v11 = *(void **)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v8;
      *(_BYTE *)(a1 + 40) = v10 & 1;
      outlined consume of AccessibilityText.Storage(v11, v12, v9 & 1);
      *(_BYTE *)(a1 + 41) = HIBYTE(v10) & 1;
      return a1;
    }
    outlined destroy of AccessibilityText(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v8;
  *(_WORD *)(a1 + 40) = *(_WORD *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey()
{
  return &unk_250642EF0;
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 48);
  if (v1 != 255)
  {
    if ((v1 & 1) != 0)
      __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    else
      outlined consume of AccessibilityText.Storage(*(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  }
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1, char *a2)
{
  _OWORD *v4;
  char v5;
  _OWORD *v6;
  int v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  v5 = *a2;
  v4 = a2 + 8;
  *(_BYTE *)a1 = v5;
  v6 = (_OWORD *)(a1 + 8);
  v7 = a2[48];
  if (v7 == 255)
  {
    v8 = v4[1];
    *v6 = *v4;
    v6[1] = v8;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
  }
  else if ((v7 & 1) != 0)
  {
    v12 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v6, v4);
    *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    v9 = (void *)*((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    v11 = a2[24];
    outlined copy of AccessibilityText.Storage(v9, v10, v11);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 25) = a2[25];
    *(_BYTE *)(a1 + 48) = 0;
  }
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_BYTE *)(a1 + 64) = a2[64];
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (__int128 *)(a1 + 8);
  v5 = (__int128 *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) == 255)
  {
    if (v6 == 255)
    {
      v9 = *v5;
      v10 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
      *v4 = v9;
      *(_OWORD *)(a1 + 24) = v10;
      goto LABEL_11;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(__int128 *, __int128 *))(v11 - 8))(v4, v5);
      *(_BYTE *)(a1 + 48) = 1;
      goto LABEL_11;
    }
LABEL_10:
    v12 = *(void **)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_BYTE *)(a2 + 24);
    outlined copy of AccessibilityText.Storage(v12, v13, v14);
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v13;
    *(_BYTE *)(a1 + 24) = v14;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
    *(_BYTE *)(a1 + 48) = 0;
    goto LABEL_11;
  }
  if (v6 != 255)
  {
    if (a1 == a2)
      goto LABEL_11;
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 8);
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
      goto LABEL_8;
    goto LABEL_10;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 8);
  v7 = *(__int128 *)((char *)v5 + 25);
  v8 = v5[1];
  *v4 = *v5;
  v4[1] = v8;
  *(__int128 *)((char *)v4 + 25) = v7;
LABEL_11:
  v15 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  if (*(unsigned __int8 *)(a1 + 48) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 48) == 255 || a1 != a2)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 8);
LABEL_7:
    v6 = *(_OWORD *)(a2 + 24);
    *v4 = *(_OWORD *)(a2 + 8);
    v4[1] = v6;
    *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)(a2 + 33);
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[65])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue()
{
  return &unk_250643240;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("\ts<\x1BT3\v", &unk_250642E60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys, &unk_250642E60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys, &unk_250642E60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys, &unk_250642E60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

id outlined copy of AccessibilityText?(id result, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined copy of AccessibilityText.Storage(result, a2, a3 & 1);
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, &unk_2506431B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, &unk_2506431B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, &unk_2506431B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, &unk_2506431B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1)
{
  destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content, &type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content, &type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
  }
  return result;
}

uint64_t outlined assign with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ProxyCodable<AXCustomContentImportance?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ProxyCodable<AXCustomContentImportance?>)
  {
    type metadata accessor for AXCustomContentImportance?();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AXCustomContentImportance? and conformance <A> A?();
    v6 = type metadata accessor for ProxyCodable(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ProxyCodable<AXCustomContentImportance?>);
  }
}

void type metadata accessor for AXCustomContentImportance?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AXCustomContentImportance?)
  {
    type metadata accessor for AXCustomContentImportance(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AXCustomContentImportance?);
  }
}

unint64_t lazy protocol witness table accessor for type AXCustomContentImportance? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type AXCustomContentImportance? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AXCustomContentImportance? and conformance <A> A?)
  {
    type metadata accessor for AXCustomContentImportance?();
    v2 = &protocol witness table for AXCustomContentImportance;
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AXCustomContentImportance? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue(char *a1, uint64_t a2)
{
  initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(a2, a1);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ProxyCodable<AXCustomContentImportance?>(255);
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234D07E74 + 4 * byte_23529909F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234D07EA8 + 4 * byte_23529909A[v4]))();
}

uint64_t sub_234D07EA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D07EB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D07EB8);
  return result;
}

uint64_t sub_234D07EC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D07ECCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234D07ED0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D07ED8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  return &unk_2506431B0;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234D07F40 + 4 * byte_2352990A9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234D07F74 + 4 * byte_2352990A4[v4]))();
}

uint64_t sub_234D07F74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D07F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D07F84);
  return result;
}

uint64_t sub_234D07F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D07F98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234D07F9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D07FA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  return &unk_250642E60;
}

uint64_t AccessibilityHeadingLevel.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityHeadingLevel@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AccessibilityHeadingLevel.init(protobufValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t AccessibilityHeadingLevel.codingProxy.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance AccessibilityHeadingLevel@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized static AccessibilityHeadingLevel.unwrap(codingProxy:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance AccessibilityHeadingLevel@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AccessibilityHeadingLevel.init(protobufValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t specialized AccessibilityHeadingLevel.init(protobufValue:)(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

unint64_t specialized static AccessibilityHeadingLevel.unwrap(codingProxy:)(unint64_t result)
{
  if (result >= 7)
    return 0;
  else
    return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel;
  if (!lazy protocol witness table cache variable for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityHeadingLevel, &type metadata for AccessibilityHeadingLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessibilityHeadingLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_234D082B4 + 4 * byte_235299B15[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_234D082E8 + 4 * byte_235299B10[v4]))();
}

uint64_t sub_234D082E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D082F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D082F8);
  return result;
}

uint64_t sub_234D08304(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D0830CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_234D08310(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D08318(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityHeadingLevel()
{
  return &type metadata for AccessibilityHeadingLevel;
}

uint64_t _TrimmedShape.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _TrimmedShape.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_TrimmedShape.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _TrimmedShape.startFraction.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t _TrimmedShape.startFraction.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t (*_TrimmedShape.startFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _TrimmedShape.endFraction.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t _TrimmedShape.endFraction.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + *(int *)(result + 40)) = a2;
  return result;
}

uint64_t (*_TrimmedShape.endFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _TrimmedShape.init(shape:startFraction:endFraction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  result = type metadata accessor for _TrimmedShape(0, a2, a3, v11);
  *(double *)(a4 + *(int *)(result + 36)) = a5;
  *(double *)(a4 + *(int *)(result + 40)) = a6;
  return result;
}

uint64_t type metadata accessor for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TrimmedShape);
}

double _TrimmedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;
  char v8;

  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 24) + 24))(v5, *(_QWORD *)(a1 + 16));
  Path.trimmedPath(from:to:)();
  outlined release of Path((uint64_t)v5);
  result = *(double *)&v6;
  v4 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

uint64_t static _TrimmedShape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t _TrimmedShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

void _TrimmedShape.animatableData.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  v11 = *(double *)(v2 + *(int *)(a1 + 40));
  v12[0] = *(double *)(v2 + *(int *)(a1 + 36)) * 128.0;
  v12[1] = v11 * 128.0;
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  AnimatablePair.init(_:_:)((uint64_t)v10, AssociatedTypeWitness, a2);
}

void _TrimmedShape.animatableData.setter()
{
  specialized _TrimmedShape.animatableData.setter();
}

void sub_234D08638()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234D086AC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void _TrimmedShape.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  unint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234D08780(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  _TrimmedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_234D087B8())(uint64_t a1, char a2)
{
  return _TrimmedShape.animatableData.modify;
}

void _TrimmedShape.animatableData.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _TrimmedShape.animatableData.setter();
  }
  specialized _TrimmedShape.animatableData.setter();
}

uint64_t _TrimmedShape.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a5 + 24) + 48))();
}

double protocol witness for Shape.path(in:) in conformance _TrimmedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  _TrimmedShape.path(in:)(a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance _TrimmedShape<A>(uint64_t a1)
{
  return static _TrimmedShape.role.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _TrimmedShape<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return _TrimmedShape.sizeThatFits(_:)(a1, a2 & 1, a3, a4 & 1, a5);
}

void protocol witness for Animatable.animatableData.setter in conformance _TrimmedShape<A>()
{
  specialized _TrimmedShape.animatableData.setter();
}

void sub_234D08934()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234D089A8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void protocol witness for Animatable.animatableData.modify in conformance _TrimmedShape<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  unint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234D08A7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  _TrimmedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_234D08AB4())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance _TrimmedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _TrimmedShape<A>(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _TrimmedShape.animatableData.setter();
  }
  specialized _TrimmedShape.animatableData.setter();
}

uint64_t Shape.trim(from:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v5, a1, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v14, a1);
  result = type metadata accessor for _TrimmedShape(0, a1, a2, v15);
  *(double *)(a3 + *(int *)(result + 36)) = a4;
  *(double *)(a3 + *(int *)(result + 40)) = a5;
  return result;
}

void specialized _TrimmedShape.animatableData.setter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

double sub_234D08D04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v10;
  uint64_t v11;
  double result;

  AnimatablePair.subscript.getter(v6, v8 - 112, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v5, v4);
  AnimatablePair.subscript.getter(v6, v8 - 112, a1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  v10 = *(double *)(v8 - 104);
  v11 = *(int *)(v2 + 40);
  *(double *)(v1 + *(int *)(v2 + 36)) = *(double *)(v8 - 112) * 0.0078125;
  result = v10 * 0.0078125;
  *(double *)(v1 + v11) = v10 * 0.0078125;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _TrimmedShape<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x23B7C9C04]("er<\x1B 2\v");
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _TrimmedShape<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_234D08DDC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for _TrimmedShape(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  _TrimmedShape.animatableData.getter(v5, a4);
}

void sub_234D08E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _TrimmedShape(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  specialized _TrimmedShape.animatableData.setter();
}

uint64_t sub_234D08E50()
{
  return 16;
}

__n128 sub_234D08E5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _TrimmedShape()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TrimmedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TrimmedShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234D091D4 + 4 * byte_235299C00[v8]))();
}

void storeEnumTagSinglePayload for _TrimmedShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234D0931C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234D09324(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234D0932CLL);
}

void sub_234D09348()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234D09350()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234D09358(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234D09360);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

void sub_234D09378(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _TrimmedShape(255, *a1, a1[1], a4);
  JUMPOUT(0x23B7C9C04);
}

double static Gesture.makeDebuggableGesture(gesture:inputs:)@<D0>(_DWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  _QWORD v24[2];
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  double v36;
  uint64_t v37;
  int v38;

  v7 = *((_DWORD *)a2 + 30);
  LODWORD(v24[0]) = *a1;
  v8 = a2[5];
  v31 = a2[4];
  v32 = v8;
  v33 = a2[6];
  v34 = *((_QWORD *)a2 + 14);
  v9 = a2[1];
  v27 = *a2;
  v28 = v9;
  v10 = a2[3];
  v29 = a2[2];
  v30 = v10;
  v35 = v7;
  (*(void (**)(double *__return_ptr, _QWORD *, __int128 *))(a3 + 32))(&v36, v24, &v27);
  if ((v7 & 8) != 0 && !(swift_conformsToProtocol2() ? v4 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v12 = 2;
    else
      v12 = 1;
    v26 = v12;
    v13 = a2[5];
    v31 = a2[4];
    v32 = v13;
    v33 = a2[6];
    v34 = *((_QWORD *)a2 + 14);
    v14 = a2[1];
    v27 = *a2;
    v28 = v14;
    v15 = a2[3];
    v29 = a2[2];
    v30 = v15;
    v35 = v7;
    *(double *)v24 = v36;
    v24[1] = v37;
    v25 = v38;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v19 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v17, v18);
    v20 = _GestureOutputs.debugData.getter();
    LOBYTE(v24[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v4, &v26, 0x100000000, &v27, v20 | ((HIDWORD(v20) & 1) << 32), 0x100000000, v19);
  }
  v21 = v37;
  v22 = v38;
  result = v36;
  *(double *)a4 = v36;
  *(_QWORD *)(a4 + 8) = v21;
  *(_DWORD *)(a4 + 16) = v22;
  return result;
}

uint64_t _GestureOutputs.wrapDebugOutputs<A, B, C>(_:kind:properties:inputs:combiningOutputs:)(uint64_t result, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD v23[7];
  uint64_t v24;
  int v25;
  char v26[17];

  v10 = *(_DWORD *)(a4 + 120);
  if ((v10 & 8) != 0)
  {
    v12 = result;
    v26[0] = *a2;
    v13 = *(_OWORD *)(a4 + 80);
    v23[4] = *(_OWORD *)(a4 + 64);
    v23[5] = v13;
    v23[6] = *(_OWORD *)(a4 + 96);
    v24 = *(_QWORD *)(a4 + 112);
    v14 = *(_OWORD *)(a4 + 16);
    v23[0] = *(_OWORD *)a4;
    v23[1] = v14;
    v15 = *(_OWORD *)(a4 + 48);
    v23[2] = *(_OWORD *)(a4 + 32);
    v23[3] = v15;
    v25 = v10;
    swift_bridgeObjectRetain();
    type metadata accessor for _GestureOutputs(0, a9, v16, v17);
    v18 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    type metadata accessor for _GestureOutputs(0, a10, v19, v20);
    v21 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    return _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v12, v26, a3 | ((HIDWORD(a3) & 1) << 32), v23, v18 | ((HIDWORD(v18) & 1) << 32), v21 | ((HIDWORD(v21) & 1) << 32), a7);
  }
  return result;
}

double static GestureModifier.makeDebuggableGesture(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  _QWORD v24[2];
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  double v36;
  uint64_t v37;
  int v38;

  v7 = *((_DWORD *)a2 + 30);
  LODWORD(v24[0]) = *a1;
  v8 = a2[5];
  v31 = a2[4];
  v32 = v8;
  v33 = a2[6];
  v34 = *((_QWORD *)a2 + 14);
  v9 = a2[1];
  v27 = *a2;
  v28 = v9;
  v10 = a2[3];
  v29 = a2[2];
  v30 = v10;
  v35 = v7;
  (*(void (**)(double *__return_ptr, _QWORD *, __int128 *))(a3 + 24))(&v36, v24, &v27);
  if ((v7 & 8) != 0 && !(swift_conformsToProtocol2() ? v4 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v12 = 2;
    else
      v12 = 1;
    v26 = v12;
    v13 = a2[5];
    v31 = a2[4];
    v32 = v13;
    v33 = a2[6];
    v34 = *((_QWORD *)a2 + 14);
    v14 = a2[1];
    v27 = *a2;
    v28 = v14;
    v15 = a2[3];
    v29 = a2[2];
    v30 = v15;
    v35 = v7;
    *(double *)v24 = v36;
    v24[1] = v37;
    v25 = v38;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v19 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v17, v18);
    v20 = _GestureOutputs.debugData.getter();
    LOBYTE(v24[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v4, &v26, 0x100000000, &v27, v20 | ((HIDWORD(v20) & 1) << 32), 0x100000000, v19);
  }
  v21 = v37;
  v22 = v38;
  result = v36;
  *(double *)a4 = v36;
  *(_QWORD *)(a4 + 8) = v21;
  *(_DWORD *)(a4 + 16) = v22;
  return result;
}

BOOL static GestureDebug.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GestureDebug.Kind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int GestureDebug.Kind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void GestureDebug.Data.kind.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *GestureDebug.Data.kind.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*GestureDebug.Data.kind.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t GestureDebug.Data.type.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*GestureDebug.Data.type.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void GestureDebug.Data.phase.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 16);
}

_WORD *GestureDebug.Data.phase.setter(_WORD *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*GestureDebug.Data.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.attribute.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t GestureDebug.Data.attribute.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*GestureDebug.Data.attribute.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.resetSeed.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t GestureDebug.Data.resetSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*GestureDebug.Data.resetSeed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double GestureDebug.Data.frame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void GestureDebug.Data.frame.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*GestureDebug.Data.frame.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.properties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 112);
  v9 = *(_QWORD *)(v1 + 120);
  v10 = *(_BYTE *)(v1 + 128);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  return outlined copy of ArrayWith2Inline<(String, String)>.Storage(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

__n128 GestureDebug.Data.properties.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;

  v7 = a1[1];
  v8 = *a1;
  v6 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  v4 = *((_BYTE *)a1 + 64);
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_BYTE *)(v1 + 128));
  *(_OWORD *)(v1 + 64) = v8;
  *(_OWORD *)(v1 + 80) = v7;
  result = v6;
  *(__n128 *)(v1 + 96) = v6;
  *(_QWORD *)(v1 + 112) = v2;
  *(_QWORD *)(v1 + 120) = v3;
  *(_BYTE *)(v1 + 128) = v4;
  return result;
}

uint64_t (*GestureDebug.Data.properties.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.children.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE __dst[296];

  v3 = (const void *)(*(_QWORD *)(v1 + 136) + 16);
  memcpy(__dst, v3, 0x121uLL);
  memcpy(a1, v3, 0x121uLL);
  return outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
}

void *key path setter for GestureDebug.Data.children : GestureDebug.Data(void *__src, uint64_t a2)
{
  uint64_t v3;
  void *result;
  _BYTE __dst[296];

  memcpy(__dst, __src, 0x121uLL);
  outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
  swift_release();
  v3 = swift_allocObject();
  result = memcpy((void *)(v3 + 16), __dst, 0x121uLL);
  *(_QWORD *)(a2 + 136) = v3;
  return result;
}

void *GestureDebug.Data.children.setter(const void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *result;

  swift_release();
  v3 = swift_allocObject();
  result = memcpy((void *)(v3 + 16), a1, 0x121uLL);
  *(_QWORD *)(v1 + 136) = v3;
  return result;
}

void (*GestureDebug.Data.children.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  const void *v4;

  v3 = malloc(0x4A8uLL);
  *a1 = v3;
  v3[148] = v1;
  v4 = (const void *)(*(_QWORD *)(v1 + 136) + 16);
  memcpy(v3, v4, 0x121uLL);
  memmove(v3 + 37, v4, 0x121uLL);
  outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
  return GestureDebug.Data.children.modify;
}

void GestureDebug.Data.children.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE __dst[289];

  v2 = *a1;
  v3 = *a1 + 37;
  if ((a2 & 1) != 0)
  {
    v4 = v2[148];
    memcpy(v2 + 111, v3, 0x121uLL);
    outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)(v2 + 111), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
    swift_release();
    v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), v2 + 111, 0x121uLL);
    *(_QWORD *)(v4 + 136) = v5;
    memcpy(v2 + 74, v3, 0x121uLL);
    outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)(v2 + 74), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage);
  }
  else
  {
    v6 = v2[148];
    memcpy(__dst, v3, sizeof(__dst));
    swift_release();
    v7 = swift_allocObject();
    memcpy((void *)(v7 + 16), __dst, 0x121uLL);
    *(_QWORD *)(v6 + 136) = v7;
  }
  free(v2);
}

double GestureDebug.Data.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double result;
  _BYTE v7[296];
  _BYTE __src[296];

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EmptyGesture);
  v3 = v2;
  _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v7);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v7, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  v4 = swift_allocObject();
  memcpy((void *)(v4 + 16), __src, 0x121uLL);
  v5 = *MEMORY[0x24BE096C0];
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = 768;
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = 3;
  *(_QWORD *)(a1 + 136) = v4;
  return result;
}

__n128 GestureDebug.Data.init(kind:type:children:phase:attribute:resetSeed:frame:properties:)@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, __int16 *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, __int128 *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  char v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  __n128 result;
  __n128 v28;
  __int128 v29;
  __int128 v30;

  v20 = *a1;
  v21 = *a4;
  v29 = a7[1];
  v30 = *a7;
  v28 = (__n128)a7[2];
  v22 = *((_QWORD *)a7 + 6);
  v23 = *((_QWORD *)a7 + 7);
  v24 = *((_BYTE *)a7 + 64);
  v25 = swift_allocObject();
  memcpy((void *)(v25 + 16), a3, 0x121uLL);
  if ((a5 & 0x100000000) != 0)
    v26 = *MEMORY[0x24BE096C0];
  else
    v26 = a5;
  *(_BYTE *)a8 = v20;
  *(_QWORD *)(a8 + 8) = a2;
  *(_WORD *)(a8 + 16) = v21;
  *(_DWORD *)(a8 + 20) = v26;
  *(_DWORD *)(a8 + 24) = a6;
  *(double *)(a8 + 32) = a9;
  *(double *)(a8 + 40) = a10;
  *(double *)(a8 + 48) = a11;
  *(double *)(a8 + 56) = a12;
  *(_OWORD *)(a8 + 64) = v30;
  *(_OWORD *)(a8 + 80) = v29;
  result = v28;
  *(__n128 *)(a8 + 96) = v28;
  *(_QWORD *)(a8 + 112) = v22;
  *(_QWORD *)(a8 + 120) = v23;
  *(_BYTE *)(a8 + 128) = v24;
  *(_QWORD *)(a8 + 136) = v25;
  return result;
}

uint64_t static GestureDebug.Data.defaultValue.getter@<X0>(__int128 *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[9];

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = xmmword_2561B4800;
  v10[6] = xmmword_2561B4810;
  v10[7] = xmmword_2561B4820;
  v3 = xmmword_2561B4820;
  v10[8] = xmmword_2561B4830;
  v4 = xmmword_2561B47C0;
  v5 = xmmword_2561B47D0;
  v10[2] = xmmword_2561B47D0;
  v10[3] = xmmword_2561B47E0;
  v6 = xmmword_2561B47E0;
  v7 = xmmword_2561B47F0;
  v10[4] = xmmword_2561B47F0;
  v10[5] = xmmword_2561B4800;
  v8 = static GestureDebug.Data.defaultValue;
  v10[0] = static GestureDebug.Data.defaultValue;
  v10[1] = xmmword_2561B47C0;
  a1[6] = xmmword_2561B4810;
  a1[7] = v3;
  a1[8] = xmmword_2561B4830;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v2;
  *a1 = v8;
  a1[1] = v4;
  return outlined retain of GestureDebug.Data((uint64_t)v10);
}

uint64_t protocol witness for static Defaultable.defaultValue.getter in conformance GestureDebug.Data@<X0>(__int128 *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[9];

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = xmmword_2561B4800;
  v10[6] = xmmword_2561B4810;
  v10[7] = xmmword_2561B4820;
  v3 = xmmword_2561B4820;
  v10[8] = xmmword_2561B4830;
  v4 = xmmword_2561B47C0;
  v5 = xmmword_2561B47D0;
  v10[2] = xmmword_2561B47D0;
  v10[3] = xmmword_2561B47E0;
  v6 = xmmword_2561B47E0;
  v7 = xmmword_2561B47F0;
  v10[4] = xmmword_2561B47F0;
  v10[5] = xmmword_2561B4800;
  v8 = static GestureDebug.Data.defaultValue;
  v10[0] = static GestureDebug.Data.defaultValue;
  v10[1] = xmmword_2561B47C0;
  a1[6] = xmmword_2561B4810;
  a1[7] = v3;
  a1[8] = xmmword_2561B4830;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v2;
  *a1 = v8;
  a1[1] = v4;
  return outlined retain of GestureDebug.Data((uint64_t)v10);
}

uint64_t Attribute<A>.phase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v6, v7) - 8) + 64))
    closure #1 in Attribute<A>.phase()(1, a2, a3);
  return AGGraphCreateOffsetAttribute2();
}

uint64_t closure #1 in Attribute<A>.phase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(_BYTE *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];

  v4 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(a3 + 32))(v17);
  v6 = v5;
  v14[2] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v8, v9);
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v14, v15, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  v12 = v16;
  v4(v17, 0);
  return v12;
}

uint64_t _GestureOutputs.wrapDebugOutputs<A>(_:properties:inputs:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  _OWORD v14[7];
  uint64_t v15;
  int v16;
  char v17;

  v4 = *(_DWORD *)(a3 + 120);
  if ((v4 & 8) != 0)
  {
    v8 = result;
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v9 = 2;
    else
      v9 = 1;
    v17 = v9;
    v10 = *(_OWORD *)(a3 + 80);
    v14[4] = *(_OWORD *)(a3 + 64);
    v14[5] = v10;
    v14[6] = *(_OWORD *)(a3 + 96);
    v15 = *(_QWORD *)(a3 + 112);
    v11 = *(_OWORD *)(a3 + 16);
    v14[0] = *(_OWORD *)a3;
    v14[1] = v11;
    v12 = *(_OWORD *)(a3 + 48);
    v14[2] = *(_OWORD *)(a3 + 32);
    v14[3] = v12;
    v16 = v4;
    v13 = _GestureOutputs.debugData.getter();
    return _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v8, &v17, a2 | ((HIDWORD(a2) & 1) << 32), v14, v13 | ((HIDWORD(v13) & 1) << 32), 0x100000000, a4);
  }
  return result;
}

uint64_t _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, char *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  id v14;
  int IndirectAttribute2;
  id v16;
  int v17;
  id v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  char v30;
  unsigned int v34;
  _BYTE v35[8];
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _OWORD v50[6];
  _BYTE v51[28];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v30 = *a2;
  v9 = a4[5];
  v50[4] = a4[4];
  v50[5] = v9;
  *(_OWORD *)v51 = a4[6];
  *(_OWORD *)&v51[12] = *(_OWORD *)((char *)a4 + 108);
  v10 = a4[1];
  v50[0] = *a4;
  v50[1] = v10;
  v11 = a4[3];
  v50[2] = a4[2];
  v50[3] = v11;
  v12 = *MEMORY[0x24BE096C0];
  if ((a3 & 0x100000000) != 0)
    v13 = *MEMORY[0x24BE096C0];
  else
    v13 = a3;
  v28 = *v7;
  v29 = v13;
  outlined retain of _GestureInputs((uint64_t)v50);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v14 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v16 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v17 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v48, 0);
  AGGraphClearUpdate();
  v18 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v19 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)v50);
  v35[0] = v30;
  if ((a5 & 0x100000000) != 0)
    v22 = v12;
  else
    v22 = a5;
  if ((a6 & 0x100000000) != 0)
    v23 = v12;
  else
    v23 = a6;
  v24 = *(_QWORD *)(a7 + 16);
  v36 = a1;
  v37 = v29;
  v38 = v28;
  v39 = *(_DWORD *)&v51[16];
  v40 = IndirectAttribute2;
  v41 = v17;
  v42 = v19;
  v43 = v22;
  v44 = v23;
  v46 = type metadata accessor for GestureDebug.Value(0, v24, v20, v21);
  v47 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDebug.Value<A>, v46);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v35, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)v45, v46, MEMORY[0x24BEE4078], v25, MEMORY[0x24BEE40A8], v26);
  v35[0] = 0;
  return _GestureOutputs.debugData.setter(v34);
}

void GestureDebug.Value.properties.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (*(_DWORD *)(v1 + 16) == *MEMORY[0x24BE096C0])
  {
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 64) = -1;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>(0);
    Value = AGGraphGetValue();
    v5 = *(_QWORD *)Value;
    v4 = *(_QWORD *)(Value + 8);
    v6 = *(_QWORD *)(Value + 16);
    v7 = *(_QWORD *)(Value + 24);
    v8 = *(_QWORD *)(Value + 32);
    v9 = *(_QWORD *)(Value + 40);
    v10 = *(_QWORD *)(Value + 48);
    v11 = *(_QWORD *)(Value + 56);
    v12 = *(_BYTE *)(Value + 64);
    *(_QWORD *)a1 = *(_QWORD *)Value;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_BYTE *)(a1 + 64) = v12;
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(v5, v4, v6, v7, v8, v9, v10, v11, v12);
  }
}

uint64_t GestureDebug.Value.phase.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t Value;

  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 16), a2, a3);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a4, Value, v5);
}

uint64_t GestureDebug.Value.debugData1.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _OWORD *Value;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[9];

  if (*(_DWORD *)(v1 + 40) == *MEMORY[0x24BE096C0])
  {
    _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v12);
    return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v12, (uint64_t)a1, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  }
  else
  {
    Value = (_OWORD *)AGGraphGetValue();
    v12[0] = *Value;
    v5 = Value[4];
    v7 = Value[1];
    v6 = Value[2];
    v12[3] = Value[3];
    v12[4] = v5;
    v12[1] = v7;
    v12[2] = v6;
    v8 = Value[8];
    v10 = Value[5];
    v9 = Value[6];
    v12[7] = Value[7];
    v12[8] = v8;
    v12[5] = v10;
    v12[6] = v9;
    memmove(a1, Value, 0x90uLL);
    _ViewInputs.base.modify(a1, v11);
    return outlined retain of GestureDebug.Data((uint64_t)v12);
  }
}

uint64_t GestureDebug.Value.debugData2.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _OWORD *Value;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[9];

  if (*(_DWORD *)(v1 + 44) == *MEMORY[0x24BE096C0])
  {
    _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v12);
    return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v12, (uint64_t)a1, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  }
  else
  {
    Value = (_OWORD *)AGGraphGetValue();
    v12[0] = *Value;
    v5 = Value[4];
    v7 = Value[1];
    v6 = Value[2];
    v12[3] = Value[3];
    v12[4] = v5;
    v12[1] = v7;
    v12[2] = v6;
    v8 = Value[8];
    v10 = Value[5];
    v9 = Value[6];
    v12[7] = Value[7];
    v12[8] = v8;
    v12[5] = v10;
    v12[6] = v9;
    memmove(a1, Value, 0x90uLL);
    _ViewInputs.base.modify(a1, v11);
    return outlined retain of GestureDebug.Data((uint64_t)v12);
  }
}

void *GestureDebug.Value.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *result;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  _BYTE v86[289];
  _OWORD v87[2];
  uint64_t v88;
  char v89;
  char v90;

  v7 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 16), a2, a3);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v55 = (uint64_t)&v53 - v8;
  v9 = *v4;
  v63 = *((_QWORD *)v4 + 1);
  v59 = *((_DWORD *)v4 + 4);
  LODWORD(v8) = *((_DWORD *)v4 + 5);
  v10 = *((_DWORD *)v4 + 6);
  v64 = v9;
  v65 = v8;
  v11 = *((_DWORD *)v4 + 7);
  v12 = *((_DWORD *)v4 + 8);
  v14 = *((_DWORD *)v4 + 9);
  v13 = *((_DWORD *)v4 + 10);
  v15 = *((_DWORD *)v4 + 11);
  Value = AGGraphGetValue();
  v17 = *(_QWORD *)Value;
  v18 = *(_QWORD *)(Value + 8);
  v19 = *(_QWORD *)(Value + 16);
  v20 = *(double *)(Value + 24);
  v21 = *(double *)(Value + 32);
  swift_retain();
  v88 = 0;
  memset(v87, 0, sizeof(v87));
  v89 = 2;
  v90 = 2;
  v22 = (uint64_t *)AGGraphGetValue();
  v23 = *v22;
  v24 = v22[1];
  v62 = a1;
  v58 = v13;
  LODWORD(v61) = v15;
  v60 = __PAIR64__(v14, v12);
  if (!v17 && v20 == 0.0 && v21 == 0.0)
  {
    v25 = v59;
    v26 = v11;
  }
  else
  {
    v25 = v59;
    v26 = v11;
    v75 = v23;
    v76 = v24;
    *(_QWORD *)v86 = v17;
    *(_QWORD *)&v86[8] = v18;
    *(_QWORD *)&v86[16] = v19;
    *(double *)&v86[24] = v20;
    *(double *)&v86[32] = v21;
    specialized ViewTransform.convert(_:_:)((uint64_t)v87, (uint64_t)v86);
    v23 = v75;
    v24 = v76;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v87);
  swift_release();
  LOBYTE(v75) = v64;
  v27 = v64;
  v28 = v63;
  v76 = v63;
  v77 = __PAIR64__(v65, v25);
  v29 = v65;
  v53 = v10;
  v54 = v26;
  v78 = __PAIR64__(v26, v10);
  v30 = v26;
  v31 = HIDWORD(v60);
  v79 = v60;
  v32 = v58;
  v80 = __PAIR64__(v61, v58);
  GestureDebug.Value.childData.getter(v86);
  LOBYTE(v75) = v27;
  v76 = v28;
  v77 = __PAIR64__(v29, v25);
  v33 = v53;
  v78 = __PAIR64__(v30, v53);
  LODWORD(v28) = v60;
  v79 = __PAIR64__(v31, v60);
  v34 = v61;
  v80 = __PAIR64__(v61, v32);
  v35 = v55;
  GestureDebug.Value.phase.getter(v62, v36, v37, v55);
  v38 = v57;
  GesturePhase.withValue<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v35, v38);
  LODWORD(v57) = v84;
  LODWORD(v56) = v85;
  LODWORD(v55) = *(_DWORD *)AGGraphGetValue();
  v39 = (uint64_t *)AGGraphGetValue();
  v40 = *v39;
  v41 = v39[1];
  v66 = v64;
  v67 = v63;
  v68 = v59;
  v69 = v65;
  v70 = v33;
  v71 = v54;
  v72 = __PAIR64__(HIDWORD(v60), v28);
  v73 = v32;
  v74 = v34;
  GestureDebug.Value.properties.getter((uint64_t)&v75);
  v42 = v83;
  if (v83 == 255)
  {
    v61 = 0;
    v62 = 0;
    v43 = 0;
    v45 = 0;
    v44 = 0;
    v47 = 0;
    v46 = 0;
    v48 = 0;
    v42 = 3;
  }
  else
  {
    v43 = v77;
    v61 = v76;
    v62 = v75;
    v45 = v78;
    v44 = v79;
    v47 = v80;
    v46 = v81;
    v48 = v82;
  }
  v49 = swift_allocObject();
  result = memcpy((void *)(v49 + 16), v86, 0x121uLL);
  *(_BYTE *)a4 = v64;
  *(_QWORD *)(a4 + 8) = v63;
  *(_BYTE *)(a4 + 16) = v57;
  *(_BYTE *)(a4 + 17) = v56;
  v51 = v55;
  *(_DWORD *)(a4 + 20) = v65;
  *(_DWORD *)(a4 + 24) = v51;
  *(_QWORD *)(a4 + 32) = v23;
  *(_QWORD *)(a4 + 40) = v24;
  *(_QWORD *)(a4 + 48) = v40;
  *(_QWORD *)(a4 + 56) = v41;
  v52 = v61;
  *(_QWORD *)(a4 + 64) = v62;
  *(_QWORD *)(a4 + 72) = v52;
  *(_QWORD *)(a4 + 80) = v43;
  *(_QWORD *)(a4 + 88) = v45;
  *(_QWORD *)(a4 + 96) = v44;
  *(_QWORD *)(a4 + 104) = v47;
  *(_QWORD *)(a4 + 112) = v46;
  *(_QWORD *)(a4 + 120) = v48;
  *(_BYTE *)(a4 + 128) = v42;
  *(_QWORD *)(a4 + 136) = v49;
  return result;
}

uint64_t GestureDebug.Value.childData.getter@<X0>(_OWORD *a1@<X8>)
{
  char *v1;
  char v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t (*v11)(void);
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[144];
  _BYTE v47[144];
  _BYTE v48[144];
  _BYTE v49[144];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v4 = *((_DWORD *)v1 + 4);
  v5 = *((_DWORD *)v1 + 5);
  v7 = *((_DWORD *)v1 + 6);
  v6 = *((_DWORD *)v1 + 7);
  v8 = *((_DWORD *)v1 + 8);
  v9 = *((_DWORD *)v1 + 9);
  v10 = *((_DWORD *)v1 + 10);
  v26 = *((_DWORD *)v1 + 11);
  GestureDebug.Value.debugData1.getter(v47);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v47, (uint64_t)v48, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  LOBYTE(v28) = v2;
  *((_QWORD *)&v28 + 1) = v3;
  *(_QWORD *)&v29 = __PAIR64__(v5, v4);
  *((_QWORD *)&v29 + 1) = __PAIR64__(v6, v7);
  *(_QWORD *)&v30 = __PAIR64__(v9, v8);
  *((_QWORD *)&v30 + 1) = __PAIR64__(v26, v10);
  GestureDebug.Value.debugData2.getter(v46);
  v11 = MEMORY[0x24BEE1C68];
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v46, (uint64_t)v49, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v48, (uint64_t)&v50, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))v11);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v50) == 1)
  {
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v49, (uint64_t)&v37, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v37) == 1)
    {
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)&v28);
      return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)&v28, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    }
    v34 = v43;
    v35 = v44;
    v36 = v45;
    v30 = v39;
    v31 = v40;
    v32 = v41;
    v33 = v42;
    v12 = v38;
    v13 = v37;
LABEL_7:
    v28 = v13;
    v29 = v12;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)&v28);
    return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)&v28, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  }
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v49, (uint64_t)&v37, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v37) == 1)
  {
    v34 = v56;
    v35 = v57;
    v36 = v58;
    v30 = v52;
    v31 = v53;
    v32 = v54;
    v33 = v55;
    v12 = v51;
    v13 = v50;
    goto LABEL_7;
  }
  v15 = v57;
  a1[6] = v56;
  a1[7] = v15;
  v16 = v53;
  a1[2] = v52;
  a1[3] = v16;
  v17 = v55;
  a1[4] = v54;
  a1[5] = v17;
  v18 = v51;
  *a1 = v50;
  a1[1] = v18;
  v19 = v43;
  v20 = v44;
  v21 = v41;
  a1[14] = v42;
  a1[15] = v19;
  v22 = v45;
  a1[16] = v20;
  a1[17] = v22;
  v23 = v39;
  v24 = v40;
  v25 = v37;
  a1[10] = v38;
  a1[11] = v23;
  a1[12] = v24;
  a1[13] = v21;
  a1[8] = v58;
  a1[9] = v25;
  return _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_((uint64_t)a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance GestureDebug.Value<A>@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[9];

  _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v3);
  return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v3, a1, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
}

void GesturePhase.descriptionWithoutValue.getter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 - 8);
  v2 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v1 + 16))((char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  v4 = (char *)sub_234D0B0A0 + 4 * byte_235299CA0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234D0B0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 48))(v0, 1, *(_QWORD *)(v1 + 16)) == 1)return 0;
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0, v3);
  return 0x656C626973736F70;
}

Swift::Void __swiftcall GestureDebug.Data.printTree()()
{
  char *v0;
  char v1;
  _QWORD v2[2];
  char v3;
  _BYTE v4[144];
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[31];
  _OWORD v14[9];

  v5 = *v0;
  v1 = v5;
  v11 = *(_OWORD *)(v0 + 81);
  v12 = *(_OWORD *)(v0 + 97);
  *(_OWORD *)v13 = *(_OWORD *)(v0 + 113);
  *(_OWORD *)&v13[15] = *((_OWORD *)v0 + 8);
  v7 = *(_OWORD *)(v0 + 17);
  v8 = *(_OWORD *)(v0 + 33);
  v9 = *(_OWORD *)(v0 + 49);
  v10 = *(_OWORD *)(v0 + 65);
  v6 = *(_OWORD *)(v0 + 1);
  _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v14);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v14, (uint64_t)v4, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v2[0] = 0;
  v2[1] = 0xE000000000000000;
  v3 = v1;
  GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v4, (uint64_t)v2);
}

void GestureDebug.Data.printSubtree(parent:indent:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v10[144];
  _DWORD v11[2];
  __int128 v12;
  __int128 v13;
  int v14;
  _DWORD v15[6];

  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage(a1, (uint64_t)v10, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = *(unsigned __int8 *)(a2 + 16);
  v9 = *v2;
  v15[0] = *(_DWORD *)(v2 + 1);
  *(_DWORD *)((char *)v15 + 3) = *((_DWORD *)v2 + 1);
  v5 = *(_OWORD *)(v2 + 28);
  v6 = *(_OWORD *)(v2 + 44);
  v14 = *((_DWORD *)v2 + 15);
  v13 = v6;
  v12 = v5;
  v11[0] = *(_DWORD *)(v2 + 129);
  *(_DWORD *)((char *)v11 + 3) = *((_DWORD *)v2 + 33);
  if (v4 == 4)
  {
    swift_bridgeObjectRetain();
    v7 = 8235;
  }
  else
  {
    if (v4 != 3)
    {
      swift_bridgeObjectRetain();
LABEL_7:
      AGTypeID.description.getter();
      __asm { BR              X9 }
    }
    swift_bridgeObjectRetain();
    v7 = 8234;
  }
  v8 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v7);
  goto LABEL_7;
}

uint64_t sub_234D0B3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23)
{
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x297974706D6528;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  if (a23 != *MEMORY[0x24BE096C0])
  {
    STACK[0x7A0] = 32;
    STACK[0x7A8] = 0xE100000000000000;
    v24._countAndFlagsBits = AGAttribute.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = STACK[0x7A0];
    v25._object = (void *)STACK[0x7A8];
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
  }
  STACK[0x7A0] = 10272;
  STACK[0x7A8] = 0xE200000000000000;
  return ((uint64_t (*)(uint64_t))((char *)&loc_234D0B4C0 + dword_234D0C234[a18]))(0x657669746361);
}

uint64_t sub_234D0B4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16, __int16 a17, char a18, unint64_t a19, char a20,unint64_t a21,char a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unint64_t a41,unint64_t a42,unint64_t a43,unint64_t a44,unint64_t a45,unint64_t a46,unint64_t a47)
{
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;

  if ((a18 & 1) != 0)
    v52 = 0;
  else
    v52 = 0x656C626973736F70;
  if ((a18 & 1) != 0)
    v53 = 0xE000000000000000;
  else
    v53 = 0xEE0029656D6F7328;
  v54 = v53;
  String.append(_:)(*(Swift::String *)&v52);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 41;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56._countAndFlagsBits = STACK[0x7A0];
  v56._object = (void *)STACK[0x7A8];
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  if (v49)
  {
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)&STACK[0x8D8], (uint64_t)&STACK[0x7A0], &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&STACK[0x7A0]) == 1 || v49 != LODWORD(STACK[0x7B8]))
    {
      STACK[0x678] = 0x3A746573657220;
      STACK[0x680] = 0xE700000000000000;
      LODWORD(STACK[0x550]) = v49;
      v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58._countAndFlagsBits = STACK[0x678];
      v58._object = (void *)STACK[0x680];
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
    }
  }
  LOBYTE(STACK[0x7A0]) = a22;
  *(_DWORD *)(v47 + 1) = *(_DWORD *)(v51 - 120);
  LODWORD(STACK[0x7A4]) = *(_DWORD *)(v51 - 117);
  STACK[0x7A8] = a21;
  LOBYTE(STACK[0x7B0]) = a18;
  LOBYTE(STACK[0x7B1]) = a20;
  LOWORD(STACK[0x7B2]) = a16;
  LODWORD(STACK[0x7B4]) = a25;
  LODWORD(STACK[0x7B8]) = v49;
  *(_OWORD *)(v47 + 28) = *(_OWORD *)(v51 - 160);
  *(_OWORD *)(v47 + 44) = *(_OWORD *)(v51 - 144);
  LODWORD(STACK[0x7DC]) = *(_DWORD *)(v51 - 128);
  STACK[0x7E0] = v50;
  STACK[0x7E8] = a47;
  STACK[0x7F0] = a46;
  STACK[0x7F8] = a45;
  STACK[0x800] = a44;
  STACK[0x808] = a43;
  STACK[0x810] = a42;
  STACK[0x818] = a41;
  LOBYTE(STACK[0x820]) = v48;
  LODWORD(STACK[0x824]) = *(_DWORD *)(v51 - 165);
  *(_DWORD *)(v47 + 129) = *(_DWORD *)(v51 - 168);
  STACK[0x828] = a19;
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)&STACK[0x8D8], (uint64_t)&STACK[0x678], &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v59._countAndFlagsBits = GestureDebug.Data.frameDescription(relativeTo:)((uint64_t)&STACK[0x678]);
  String.append(_:)(v59);
  v60 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t))((char *)&loc_234D0B70C + dword_234D0C244[v48]))(v60);
}

void sub_234D0B728()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[37];
  _QWORD v39[80];

  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v0, v35, v34, v33, v32, v31, v30, v29, 1);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v0, v35, v34, v33, v32, v31, v30, v29, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v0, v35, v34, v33, v32, v31, v30, v29, 1);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v0, v35, v34, v33, v32, v31, v30, v29, 1);
  v1 = v27;
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v0, v35, v34, v33, v32, v31, v30, v29, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38[0] = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2, 0);
  v2 = 0;
  v3 = v38[0];
  v4 = (void **)(v0 + 56);
  do
  {
    if (v1)
    {
      if (v1 == 1)
      {
        if (v2)
        {
          if (v2 != 1)
          {
LABEL_24:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x234D0C220);
          }
          v8 = v0;
          v0 = v32;
          outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v35, v34, v33, v32, v31, v30, v29, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v5 = v31;
          v6 = v30;
          v7 = (void *)v29;
        }
        else
        {
          v6 = v34;
          v5 = v35;
          v7 = (void *)v33;
          outlined copy of ArrayWith2Inline<(String, String)>.Storage(v0, v35, v34, v33, v32, v31, v30, v29, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v1 = v27;
      }
      else
      {
        if (v2 >= *(_QWORD *)(v0 + 16))
        {
          __break(1u);
          JUMPOUT(0x234D0C184);
        }
        v0 = (uint64_t)*(v4 - 3);
        v5 = (uint64_t)*(v4 - 2);
        v6 = (uint64_t)*(v4 - 1);
        v7 = *v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (v2)
        goto LABEL_24;
      v6 = v34;
      v5 = v35;
      v7 = (void *)v33;
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(v0, v35, v34, v33, v32, v31, v30, v29, 0);
    }
    v39[0] = v0;
    v39[1] = v5;
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = v6;
    v10._object = v7;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v5;
    v38[0] = v3;
    v13 = *(_QWORD *)(v3 + 16);
    v12 = *(_QWORD *)(v3 + 24);
    if (v13 >= v12 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v3 = v38[0];
    }
    ++v2;
    *(_QWORD *)(v3 + 16) = v13 + 1;
    v14 = v3 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v0;
    *(_QWORD *)(v14 + 40) = v11;
    v4 += 4;
    v0 = v36;
  }
  while (v2 != 2);
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v36, v35, v34, v33, v32, v31, v30, v29, v1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v15 = BidirectionalCollection<>.joined(separator:)();
  v17 = v16;
  swift_bridgeObjectRelease();
  v39[0] = 23328;
  v39[1] = 0xE200000000000000;
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 93;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 23328;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  specialized static Log.eventDebug(_:)(v39[37], v39[38]);
  swift_bridgeObjectRelease();
  if (v28 == 4)
  {
    v39[0] = v25;
    v39[1] = v26;
    swift_bridgeObjectRetain();
    v21 = 8316;
  }
  else
  {
    if (v28 != 3)
    {
      swift_bridgeObjectRetain();
LABEL_22:
      memcpy(v39, (const void *)(v24 + 16), 0x121uLL);
      outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
      outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v39, (uint64_t)&v37, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
      outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v39, (uint64_t)v38, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
      v23 = (char *)&loc_234D0BE88
          + dword_234D0C254[_s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOg((uint64_t)v38)];
      __asm { BR              X9 }
    }
    v39[0] = v25;
    v39[1] = v26;
    swift_bridgeObjectRetain();
    v21 = 8234;
  }
  v22 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v21);
  goto LABEL_22;
}

uint64_t GestureDebug.Data.frameDescription(relativeTo:)(uint64_t a1)
{
  double *v1;
  uint64_t (*v2)(void);
  double v3;
  double v4;
  double v5;
  double v6;
  _QWORD *v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  double v14;
  double v15;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  _BYTE v34[144];
  _BYTE v35[48];
  double v36;
  double v37;

  v2 = MEMORY[0x24BEE1C68];
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage(a1, (uint64_t)v34, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v34, (uint64_t)v35, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))v2);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)v35) != 1 && v36 == v5 && v37 == v6)
  {
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v34, (uint64_t)&v28, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v14 = v30;
    v15 = v31;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_15:
    if (v14 == v3 && v15 == v4)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (v5 == 0.0 && v6 == 0.0)
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v28 = 0;
    v29 = 0xE000000000000000;
    v9._countAndFlagsBits = 123;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v32 = v5;
    v33 = v6;
    type metadata accessor for (CGFloat, CGFloat)(0, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
    _print_unlocked<A, B>(_:_:)();
    v10._countAndFlagsBits = 125;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v12 = v8[2];
    v11 = v8[3];
    if (v12 >= v11 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v8);
    v8[2] = v12 + 1;
    v13 = &v8[2 * v12];
    v13[4] = 0;
    v13[5] = 0xE000000000000000;
  }
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v34, (uint64_t)&v28, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v28) != 1)
  {
    v14 = v30;
    v15 = v31;
    goto LABEL_15;
  }
LABEL_19:
  if (v3 != 0.0 || v4 != 0.0)
  {
    v28 = 0;
    v29 = 0xE000000000000000;
    v22._countAndFlagsBits = 64;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v32 = v3;
    v33 = v4;
    type metadata accessor for (CGFloat, CGFloat)(0, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
    _print_unlocked<A, B>(_:_:)();
    v23 = v28;
    v24 = v29;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v26 = v8[2];
    v25 = v8[3];
    if (v26 >= v25 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v8);
    v8[2] = v26 + 1;
    v27 = &v8[2 * v26];
    v27[4] = v23;
    v27[5] = v24;
    if (v8[2])
      goto LABEL_22;
    goto LABEL_28;
  }
LABEL_21:
  if (v8[2])
  {
LABEL_22:
    v28 = (uint64_t)v8;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v17 = BidirectionalCollection<>.joined(separator:)();
    v19 = v18;
    swift_bridgeObjectRelease();
    v28 = 32;
    v29 = 0xE100000000000000;
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    return v28;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t result;

  if (a37 != 2)
  {
    result = a9;
    if (a37 == 1)
    {
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
      swift_retain();
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(a27, a28, a29, a30, a31, a32, a33, a34, a35);
    }
    else
    {
      if (a37)
        return result;
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    }
  }
  return swift_retain();
}

uint64_t sub_234D0C6C4()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(v0 + 256);
  v4 = *(_OWORD *)(v0 + 272);
  v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_OWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 240),
    *(_QWORD *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(v0 + 288),
    *(_QWORD *)(v0 + 296),
    *(_BYTE *)(v0 + 304));
  return swift_deallocObject();
}

uint64_t outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t result;

  if (a37 != 2)
  {
    result = a9;
    if (a37 == 1)
    {
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
      swift_release();
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(a27, a28, a29, a30, a31, a32, a33, a34, a35);
    }
    else
    {
      if (a37)
        return result;
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    }
  }
  return swift_release();
}

uint64_t outlined retain of ArrayWith2Inline<GestureDebug.Data>(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;

  v7 = *(_BYTE *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280),
    v7);
  return a1;
}

double _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 288) = 3;
  return result;
}

uint64_t outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v6;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, (uint64_t)&type metadata for GestureDebug.Data, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Kind and conformance GestureDebug.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureDebug.Kind and conformance GestureDebug.Kind;
  if (!lazy protocol witness table cache variable for type GestureDebug.Kind and conformance GestureDebug.Kind)
  {
    result = MEMORY[0x23B7C9C04](")r<\x1Bl2\v", &type metadata for GestureDebug.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Kind and conformance GestureDebug.Kind);
  }
  return result;
}

uint64_t sub_234D0C9A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  const void *v3;
  _BYTE __dst[296];

  v3 = (const void *)(*(_QWORD *)(a1 + 136) + 16);
  memcpy(__dst, v3, 0x121uLL);
  memcpy(a2, v3, 0x121uLL);
  return outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
}

ValueMetadata *type metadata accessor for GestureDebug()
{
  return &type metadata for GestureDebug;
}

uint64_t storeEnumTagSinglePayload for GestureDebug.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234D0CA64 + 4 * byte_235299CA9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234D0CA98 + 4 * byte_235299CA4[v4]))();
}

uint64_t sub_234D0CA98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D0CAA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D0CAA8);
  return result;
}

uint64_t sub_234D0CAB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D0CABCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234D0CAC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D0CAC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GestureDebug.Kind()
{
  return &type metadata for GestureDebug.Kind;
}

uint64_t destroy for GestureDebug.Data(uint64_t a1)
{
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  return swift_release();
}

uint64_t initializeWithCopy for GestureDebug.Data(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a2 + 120);
  v14 = *(_BYTE *)(a2 + 128);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GestureDebug.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 120);
  v22 = *(_BYTE *)(a2 + 128);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v22);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 120);
  v20 = *(_BYTE *)(a1 + 128);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v11;
  *(_BYTE *)(a1 + 128) = v22;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GestureDebug.Data(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_BYTE *)(a2 + 128);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_BYTE *)(a1 + 128);
  v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
  v16 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v16;
  *(_BYTE *)(a1 + 128) = v5;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureDebug.Data(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GestureDebug.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureDebug.Data()
{
  return &type metadata for GestureDebug.Data;
}

uint64_t dispatch thunk of DebuggableGesturePhase.phase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DebuggableGesturePhase.phase.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DebuggableGesturePhase.phase.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DebuggableGesturePhase.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void *type metadata accessor for GestureDebug.ChildrenBox()
{
  return &unk_250613768;
}

uint64_t type metadata accessor for GestureDebug.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureDebug.Value);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s7SwiftUI12GestureDebugO4DataVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOg(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 288) <= 2u)
    return *(unsigned __int8 *)(a1 + 288);
  else
    return (*(_DWORD *)a1 + 3);
}

void base witness table accessor for _AttributeBody in GestureDebug.Value<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for ArrayWith2Inline<(String, String)>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for ArrayWith2Inline<(String, String)>)
  {
    type metadata accessor for (CGFloat, CGFloat)(255, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    v5 = type metadata accessor for ArrayWith2Inline(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for ArrayWith2Inline<(String, String)>);
  }
}

void type metadata accessor for (CGFloat, CGFloat)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_(uint64_t result)
{
  *(_BYTE *)(result + 288) = 0;
  return result;
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 288) = 1;
  return result;
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI7EventIDV_s5NeverOytTB503_s7c4UI18E82ListenerPhase33_D4E5D14C6252B45A30FB249B3DBDFD35LLV11descriptionSSvgyAA0C2IDVXEfU_SSTf1cn_n(uint64_t a1)
{
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v7;

  if (a1)
  {
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    v7._object = v2;
    v3._countAndFlagsBits = 35;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
  }
  return a1 == 0;
}

void specialized ArrayWith2Inline.append(_:)()
{
  __asm { BR              X11 }
}

uint64_t sub_234D0D120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v0;
  *(_BYTE *)(v1 + 64) = 1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t EventListener.ignoresOtherEvents.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t EventListener.ignoresOtherEvents.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*EventListener.ignoresOtherEvents.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t EventListener.init(ignoresOtherEvents:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static EventListener._makeGesture(gesture:inputs:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  id v11;
  unsigned int v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v40;
  char v41[9];
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[48];
  _OWORD v55[2];
  _BYTE v56[32];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[48];
  _BYTE v62[28];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  *(_OWORD *)v62 = a2[6];
  *(_OWORD *)&v62[12] = *(__int128 *)((char *)a2 + 108);
  v6 = a2[1];
  v58 = *a2;
  v59 = v6;
  v7 = a2[3];
  v60 = a2[2];
  *(_OWORD *)v61 = v7;
  v8 = a2[5];
  *(_OWORD *)&v61[16] = a2[4];
  *(_OWORD *)&v61[32] = v8;
  v35 = *(_DWORD *)&v62[12];
  v36 = v5;
  v9 = v7;
  v10 = DWORD2(v7);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  *(_QWORD *)&v51 = v58;
  v52 = v59;
  v53 = v60;
  *(_QWORD *)v54 = v9;
  DWORD2(v51) = DWORD2(v58);
  *(_DWORD *)&v54[8] = v10;
  *(_QWORD *)&v54[12] = *(_QWORD *)&v61[12];
  *(_QWORD *)&v54[20] = *(_QWORD *)&v61[20];
  *(_QWORD *)&v54[28] = *(_QWORD *)&v61[28];
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v51);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v57 = 0;
  memset(v56, 0, sizeof(v56));
  outlined retain of _GestureInputs((uint64_t)&v58);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v56, 0);
  AGGraphClearUpdate();
  v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  LODWORD(v9) = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)&v58);
  v14 = v62[24];
  *(_QWORD *)&v51 = __PAIR64__(v35, v36);
  *((_QWORD *)&v51 + 1) = __PAIR64__(v9, v12);
  LODWORD(v52) = *(_DWORD *)&v62[16];
  BYTE4(v52) = v62[24] & 1;
  BYTE5(v52) = (v62[24] & 2) != 0;
  *((_QWORD *)&v52 + 1) = 0;
  *(_QWORD *)&v53 = 0;
  DWORD2(v53) = 0;
  v16 = type metadata accessor for EventListenerPhase.Value(0, a3, a4, v15);
  v48 = v16;
  v49 = type metadata accessor for EventListenerPhase(0, a3, a4, v17);
  v50 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListenerPhase<A>, v49);
  v18 = type metadata accessor for Attribute();
  v19 = MEMORY[0x24BEE4078];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v47, v49, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v20);
  v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListenerPhase<A>.Value, v16);
  v22 = Attribute<A>.phase()(v40, v16, v21);
  _GestureOutputs.init(phase:)(v22, a5);
  v45 = a3;
  v46 = a4;
  KeyPath = swift_getKeyPath();
  LODWORD(v51) = v40;
  *((_QWORD *)&v51 + 1) = KeyPath;
  type metadata accessor for ArrayWith2Inline<(String, String)>(255);
  v43 = type metadata accessor for Focus();
  v44 = MEMORY[0x23B7C9C04](MEMORY[0x24BE09660], v43);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Attribute<ArrayWith2Inline<(String, String)>>, (uint64_t (*)(uint64_t))type metadata accessor for ArrayWith2Inline<(String, String)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
  v25 = v24;
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v42, v43, v19, v25, MEMORY[0x24BEE40A8], v26);
  swift_release();
  result = swift_release();
  if ((v14 & 8) != 0)
  {
    v29 = type metadata accessor for EventListener(0, a3, a4, v28);
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v32 = 2;
    else
      v32 = 1;
    v41[0] = v32;
    *(_OWORD *)&v54[16] = *(_OWORD *)&v61[16];
    *(_OWORD *)&v54[32] = *(_OWORD *)&v61[32];
    v55[0] = *(_OWORD *)v62;
    *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)&v62[12];
    v51 = v58;
    v52 = v59;
    v53 = v60;
    *(_OWORD *)v54 = *(_OWORD *)v61;
    v33 = type metadata accessor for _GestureOutputs(0, a3, v30, v31);
    v34 = _GestureOutputs.debugData.getter();
    return _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v29, v41, v40, &v51, v34 | ((HIDWORD(v34) & 1) << 32), 0x100000000, v33);
  }
  return result;
}

double EventListenerPhase.Value.properties.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  Swift::String v6;
  Swift::String v7;
  double result;

  if (*(_BYTE *)(v3 + *(int *)(a1 + 40)) != 5)
  {
    type metadata accessor for EventListenerPhase.FailureReason(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
    String.init<A>(describing:)();
    specialized ArrayWith2Inline.append(_:)();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v3 + *(int *)(a1 + 36)))
  {
    _typeName(_:qualified:)();
    v6._countAndFlagsBits = 35;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    specialized ArrayWith2Inline.append(_:)();
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_BYTE *)(a3 + 64) = 3;
  return result;
}

double key path getter for EventListenerPhase.Value.properties : <A>EventListenerPhase<A>.Value@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  char v14;

  v5 = type metadata accessor for EventListenerPhase.Value(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  EventListenerPhase.Value.properties.getter(v5, v6, (uint64_t)v11);
  v7 = v14;
  v8 = v11[1];
  *(_OWORD *)a4 = v11[0];
  *(_OWORD *)(a4 + 16) = v8;
  result = *(double *)&v12;
  v10 = v13;
  *(_OWORD *)(a4 + 32) = v12;
  *(_OWORD *)(a4 + 48) = v10;
  *(_BYTE *)(a4 + 64) = v7;
  return result;
}

uint64_t EventListenerPhase.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  return swift_retain();
}

uint64_t EventListenerPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance EventListener<A>@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static EventListener._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t EventListenerPhase.Value.init(phase:trackingID:failureReason:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  v8 = a3;
  v11 = *a2;
  v12 = a2[1];
  v13 = type metadata accessor for GesturePhase(0, a4, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a6, a1, v13);
  result = type metadata accessor for EventListenerPhase.Value(0, a4, a5, v14);
  v16 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v16 = v11;
  v16[1] = v12;
  *(_BYTE *)(a6 + *(int *)(result + 40)) = v8;
  return result;
}

BOOL static EventListenerPhase.FailureReason.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void EventListenerPhase.FailureReason.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int EventListenerPhase.FailureReason.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for DebuggableGesturePhase.phase.getter in conformance EventListenerPhase<A>.Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v4, v6);
}

uint64_t protocol witness for DebuggableGesturePhase.phase.setter in conformance EventListenerPhase<A>.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a2 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
}

uint64_t (*protocol witness for DebuggableGesturePhase.phase.modify in conformance EventListenerPhase<A>.Value())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EventListenerPhase<A>.FailureReason(char *a1, char *a2)
{
  return static EventListenerPhase.FailureReason.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EventListenerPhase<A>.FailureReason()
{
  unsigned __int8 *v0;

  return EventListenerPhase.FailureReason.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance EventListenerPhase<A>.FailureReason(uint64_t a1)
{
  unsigned __int8 *v1;

  EventListenerPhase.FailureReason.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EventListenerPhase<A>.FailureReason()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  EventListenerPhase.FailureReason.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t EventListenerPhase.resetPhase()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v19[16];
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for GesturePhase(0, v6, a3, a4);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v19[-v8];
  v10 = *(_QWORD *)(a1 + 24);
  v12 = type metadata accessor for EventListenerPhase.Value(0, v6, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = &v19[-v15];
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v6 - 8) + 56))(v9, 1, 1, v6, v14);
  swift_storeEnumTagMultiPayload();
  v23[0] = 0;
  v23[1] = 0;
  EventListenerPhase.Value.init(phase:trackingID:failureReason:)((uint64_t)v9, v23, 5, v6, v10, (uint64_t)v16);
  v21 = a1;
  v22 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListenerPhase<A>, a1);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)v20, v12, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t EventListenerPhase.updateValue()(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  Swift::UInt v70;
  Swift::UInt v71;
  uint64_t inited;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  int v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t, uint64_t);
  char *v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  int64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  uint64_t v125;
  __int128 *v126;
  int64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130[13];
  __int128 v131[2];
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  _OWORD v140[2];
  uint64_t v141;
  uint64_t v142;

  v5 = v4;
  v142 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 16);
  v129 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for EventListenerPhase.Value(0, v7, v129, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v104 - v10;
  v14 = type metadata accessor for GesturePhase(0, v7, v12, v13);
  v117 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v110 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v111 = (char *)&v104 - v17;
  v123 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Optional();
  v114 = *(_QWORD *)(v21 - 8);
  v115 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v113 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v116 = (char *)&v104 - v24;
  v25 = type metadata accessor for Optional();
  v121 = *(_QWORD *)(v25 - 8);
  v122 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v120 = (char *)&v104 - v30;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListenerPhase<A>, a1, v29);
  v112 = a1;
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0)
    return result;
  v108 = v8;
  v109 = v14;
  v106 = v11;
  v107 = v9;
  v141 = 0;
  memset(v140, 0, sizeof(v140));
  type metadata accessor for [EventID : EventType]();
  v32 = *(_QWORD *)AGGraphGetValue();
  v33 = *(_QWORD *)(v32 + 64);
  v118 = v32 + 64;
  v34 = 1 << *(_BYTE *)(v32 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & v33;
  v124 = &v134;
  v125 = v32;
  v126 = &v138;
  v119 = (unint64_t)(v34 + 63) >> 6;
  v104 = v119 - 1;
  swift_bridgeObjectRetain();
  v37 = 0;
  v128 = v5;
  v105 = v27;
  if (!v36)
    goto LABEL_9;
LABEL_7:
  while (2)
  {
    v38 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    v39 = v38 | (v37 << 6);
LABEL_8:
    v40 = *(_QWORD *)(v125 + 56);
    v41 = (uint64_t *)(*(_QWORD *)(v125 + 48) + 16 * v39);
    v43 = *v41;
    v42 = v41[1];
    *(_QWORD *)&v133 = v43;
    *((_QWORD *)&v133 + 1) = v42;
    outlined init with copy of AnyTrackedValue(v40 + 40 * v39, (uint64_t)v124);
    while (1)
    {
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v133, (uint64_t)&v137, (uint64_t (*)(_QWORD))type metadata accessor for (key: EventID, value: EventType)?);
      v47 = v137;
      if (!(_QWORD)v137)
      {
        swift_release();
        v66 = v116;
        v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56);
        v68 = v109;
        v67(v116, 1, 1, v109);
        outlined init with copy of EventType?((uint64_t)v140, (uint64_t)&v137);
        if (*((_QWORD *)&v138 + 1))
        {
          outlined init with take of ScrollStateRequest(&v137, (uint64_t)&v133);
          if ((*(_BYTE *)(v5 + 20) & 1) == 0)
          {
            AGGraphClearUpdate();
            closure #1 in EventListenerPhase.updateValue()(v7, v129, v69, (uint64_t)v131);
            result = AGGraphSetUpdate();
            v137 = v131[0];
            v138 = v131[1];
            v139 = v132;
            v70 = *(_QWORD *)(v5 + 24);
            if (!v70)
            {
              __break(1u);
              return result;
            }
            v71 = *(_QWORD *)(v5 + 32);
            type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_23527E860;
            *(_QWORD *)(inited + 32) = v70;
            *(_QWORD *)(inited + 40) = v71;
            outlined init with copy of AnyTrackedValue((uint64_t)&v133, inited + 48);
            v73 = specialized Dictionary.init(dictionaryLiteral:)(inited);
            swift_setDeallocating();
            type metadata accessor for (EventID, EventType)();
            swift_arrayDestroy();
            v130[0] = v73;
            outlined retain of ViewTransform((uint64_t)&v137);
            specialized defaultConvertEventLocations<A>(_:converter:)((uint64_t *)v130, (uint64_t)&v137);
            outlined release of ViewTransform((uint64_t)&v137);
            v74 = v130[0];
            if (!*(_QWORD *)(v130[0] + 16))
              goto LABEL_79;
            v75 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
            v68 = v109;
            if ((v76 & 1) == 0)
            {
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
            }
            outlined init with copy of AnyTrackedValue(*(_QWORD *)(v74 + 56) + 40 * v75, (uint64_t)v131);
            outlined release of ViewTransform((uint64_t)&v137);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
            outlined init with take of ScrollStateRequest(v131, (uint64_t)&v133);
            swift_bridgeObjectRelease();
            v5 = v128;
            v66 = v116;
          }
          outlined init with copy of AnyTrackedValue((uint64_t)&v133, (uint64_t)v131);
          v77 = v105;
          (*(void (**)(__int128 *, uint64_t))(v129 + 48))(v131, v7);
          v78 = v123;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v77, 1, v7) == 1)
          {
            (*(void (**)(char *, uint64_t))(v114 + 8))(v66, v115);
            outlined destroy of EventType?((uint64_t)v140);
            (*(void (**)(char *, uint64_t))(v121 + 8))(v77, v122);
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
          }
          v80 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
          v80(v20, v77, v7);
          v81 = *((_QWORD *)&v134 + 1);
          v82 = v135;
          __swift_project_boxed_opaque_existential_1(&v133, *((uint64_t *)&v134 + 1));
          v83 = v81;
          v84 = v116;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v82 + 8))(v131, v83, v82);
          (*(void (**)(char *, uint64_t))(v114 + 8))(v84, v115);
          if (LOBYTE(v131[0]) > 2u)
          {
            (*(void (**)(char *, uint64_t))(v123 + 8))(v20, v7);
            swift_storeEnumTagMultiPayload();
            v67(v84, 0, 1, v68);
            v85 = 4;
          }
          else
          {
            v80(v84, v20, v7);
            swift_storeEnumTagMultiPayload();
            v67(v84, 0, 1, v68);
            v85 = 5;
          }
          LODWORD(v127) = v85;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
        }
        else
        {
          outlined destroy of EventType?((uint64_t)&v137);
          if (!AGGraphGetOutputValue())
          {
            v87 = v114;
            v86 = v115;
            v88 = v116;
            (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v115);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v88, 1, 1, v7);
            swift_storeEnumTagMultiPayload();
            v67(v88, 0, 1, v68);
            v89 = v86;
            LODWORD(v127) = 5;
            v90 = v117;
            goto LABEL_74;
          }
          LODWORD(v127) = 5;
        }
        v88 = v116;
        v90 = v117;
        v87 = v114;
        v89 = v115;
        goto LABEL_74;
      }
      v48 = v20;
      v49 = v7;
      v50 = *((_QWORD *)&v137 + 1);
      outlined init with take of ScrollStateRequest(v126, (uint64_t)&v133);
      v51 = *((_QWORD *)&v134 + 1);
      v52 = v135;
      __swift_project_boxed_opaque_existential_1(&v133, *((uint64_t *)&v134 + 1));
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v52 + 24))(v131, v51, v52);
      v53 = *(_QWORD *)&v131[0];
      swift_release();
      if (v53)
        break;
      v5 = v128;
      v65 = *(_QWORD *)(v128 + 24);
      v7 = v49;
      if (v65 && *(_QWORD *)(v128 + 32) == v50 && v47 == v65)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
        LODWORD(v127) = 0;
        goto LABEL_71;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
      v20 = v48;
      if (v36)
        goto LABEL_7;
LABEL_9:
      v44 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      if (v44 >= v119)
        goto LABEL_26;
      v45 = *(_QWORD *)(v118 + 8 * v44);
      if (v45)
        goto LABEL_12;
      v46 = v37 + 2;
      ++v37;
      if (v44 + 1 >= v119)
        goto LABEL_26;
      v45 = *(_QWORD *)(v118 + 8 * v46);
      if (v45)
        goto LABEL_15;
      v37 = v44 + 1;
      if (v44 + 2 >= v119)
        goto LABEL_26;
      v45 = *(_QWORD *)(v118 + 8 * (v44 + 2));
      if (v45)
      {
        v44 += 2;
LABEL_12:
        v36 = (v45 - 1) & v45;
        v39 = __clz(__rbit64(v45)) + (v44 << 6);
        v37 = v44;
        goto LABEL_8;
      }
      v46 = v44 + 3;
      v37 = v44 + 2;
      if (v44 + 3 < v119)
      {
        v45 = *(_QWORD *)(v118 + 8 * v46);
        if (v45)
        {
LABEL_15:
          v44 = v46;
          goto LABEL_12;
        }
        while (1)
        {
          v44 = v46 + 1;
          if (__OFADD__(v46, 1))
            goto LABEL_81;
          if (v44 >= v119)
            break;
          v45 = *(_QWORD *)(v118 + 8 * v44);
          ++v46;
          if (v45)
            goto LABEL_12;
        }
        v37 = v104;
      }
LABEL_26:
      v36 = 0;
      v136 = 0;
      v134 = 0u;
      v135 = 0u;
      v133 = 0u;
    }
    v127 = v37;
    v5 = v128;
    v7 = v49;
    if ((*(_BYTE *)(v128 + 21) & 1) == 0)
    {
      v54 = *(_QWORD *)(v128 + 24);
      if (!v54 || *(_QWORD *)(v128 + 32) != v50 || v47 != v54)
      {
        v55 = *((_QWORD *)&v134 + 1);
        v56 = v135;
        __swift_project_boxed_opaque_existential_1(&v133, *((uint64_t *)&v134 + 1));
        v57 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v56 + 8);
        v58 = v55;
        v5 = v128;
        v59 = v56;
        v7 = v49;
        v57(v131, v58, v59);
        if (LOBYTE(v131[0]))
        {
          if (!v54
            || (type metadata accessor for EventListener(0, v49, v129, v60), (*(_BYTE *)AGGraphGetValue() & 1) == 0))
          {
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
            v79 = 1;
            goto LABEL_70;
          }
        }
      }
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v133, (uint64_t)v131);
    v61 = v120;
    (*(void (**)(__int128 *, uint64_t))(v129 + 48))(v131, v7);
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v123 + 48))(v61, 1, v7);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v61, v122);
    v64 = *(_QWORD *)(v5 + 24);
    if (v62 == 1)
    {
      v37 = v127;
      if (!v64
        || (v20 = v48,
            type metadata accessor for EventListener(0, v7, v129, v63),
            (*(_BYTE *)AGGraphGetValue() & 1) == 0))
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
        v79 = 3;
        goto LABEL_70;
      }
      goto LABEL_51;
    }
    v20 = v48;
    v37 = v127;
    if (!v64)
    {
      outlined destroy of EventType?((uint64_t)v140);
      *(_QWORD *)(v5 + 24) = v47;
      *(_QWORD *)(v5 + 32) = v50;
      goto LABEL_50;
    }
    if (*(_QWORD *)(v5 + 32) == v50 && v47 == v64
      || (type metadata accessor for EventListener(0, v7, v129, v63), *(_BYTE *)AGGraphGetValue() == 1))
    {
      outlined destroy of EventType?((uint64_t)v140);
LABEL_50:
      outlined init with copy of AnyTrackedValue((uint64_t)&v133, (uint64_t)v140);
LABEL_51:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
      if (v36)
        continue;
      goto LABEL_9;
    }
    break;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
  v79 = 2;
LABEL_70:
  LODWORD(v127) = v79;
LABEL_71:
  v88 = v116;
  v90 = v117;
  v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56);
  v68 = v109;
  v91(v116, 1, 1, v109);
  v87 = v114;
  v89 = v115;
  (*(void (**)(char *, uint64_t))(v114 + 8))(v88, v115);
  swift_storeEnumTagMultiPayload();
  v91(v88, 0, 1, v68);
LABEL_74:
  v92 = v113;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v113, v88, v89);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v92, 1, v68) == 1)
  {
    v93 = *(void (**)(char *, uint64_t))(v87 + 8);
    v93(v88, v89);
    outlined destroy of EventType?((uint64_t)v140);
    return ((uint64_t (*)(char *, uint64_t))v93)(v92, v89);
  }
  else
  {
    v94 = v92;
    v95 = v7;
    v96 = v111;
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v111, v94, v68);
    v97 = (uint64_t)v110;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v110, v96, v68);
    v133 = *(_OWORD *)(v5 + 24);
    v98 = v68;
    v99 = (uint64_t)v106;
    v100 = EventListenerPhase.Value.init(phase:trackingID:failureReason:)(v97, (uint64_t *)&v133, v127, v95, v129, (uint64_t)v106);
    v101 = MEMORY[0x24BDAC7A8](v100);
    *(&v104 - 2) = v112;
    *(&v104 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListenerPhase<A>, v101);
    v102 = v108;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v99, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v104 - 4), v108, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v103);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v99, v102);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v96, v98);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
    return outlined destroy of EventType?((uint64_t)v140);
  }
}

__n128 closure #1 in EventListenerPhase.updateValue()@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  float64x2_t *Value;
  __n128 result;

  type metadata accessor for EventListenerPhase(0, a1, a2, a3);
  EventListenerPhase.transform.getter(a4);
  Value = (float64x2_t *)AGGraphGetValue();
  result = *(__n128 *)Value;
  *(float64x2_t *)(a4 + 24) = vsubq_f64(*(float64x2_t *)(a4 + 24), vsubq_f64(*Value, *(float64x2_t *)(a4 + 8)));
  *(__n128 *)(a4 + 8) = result;
  return result;
}

uint64_t closure #2 in EventListenerPhase.updateValue()(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _BYTE v5[40];
  char v6;
  _OWORD v7[2];
  uint64_t v8;
  char v9;
  _BYTE v10[48];
  _BYTE v11[8];
  uint64_t v12;

  *(_QWORD *)v5 = 1;
  memset(&v5[8], 0, 32);
  v6 = 2;
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v9 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v5, (uint64_t)v10);
  v10[41] = 4;
  outlined destroy of CoordinateSpace((uint64_t)v5);
  outlined init with take of LocalizedStringKey.FormatArgument(a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for AnyElement?);
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, (uint64_t)&v12, (uint64_t (*)(_QWORD))type metadata accessor for AnyElement?);
  if (v12 || *(double *)(a2 + 24) != 0.0 || *(double *)(a2 + 32) != 0.0)
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)&v5[16] = v3;
    *(_QWORD *)&v5[32] = *(_QWORD *)(a2 + 32);
    specialized ViewTransform.convert(_:_:)((uint64_t)v7, (uint64_t)v5);
  }
  return outlined destroy of ViewTransform.Conversion((uint64_t)v7);
}

uint64_t EventListenerPhase.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 93;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI7EventIDV_s5NeverOytTB503_s7c4UI18E82ListenerPhase33_D4E5D14C6252B45A30FB249B3DBDFD35LLV11descriptionSSvgyAA0C2IDVXEfU_SSTf1cn_n(v1);
  return 0x72656E657473694CLL;
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance EventListenerPhase<A>()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance EventListenerPhase<A>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance EventListenerPhase<A>())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance EventListenerPhase<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for EventListenerPhase.Value(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t type metadata accessor for EventListenerPhase.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventListenerPhase.Value);
}

uint64_t type metadata accessor for EventListenerPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventListenerPhase);
}

uint64_t type metadata accessor for EventListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventListener);
}

uint64_t sub_234D0EC7C()
{
  return 16;
}

__n128 sub_234D0EC88(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for (String, String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, String));
  }
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t instantiation function for generic protocol witness table for EventListener<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListener<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for EventListener(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234D0ED8C + 4 * byte_235299EA9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234D0EDC0 + 4 * byte_235299EA4[v4]))();
}

uint64_t sub_234D0EDC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D0EDC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D0EDD0);
  return result;
}

uint64_t sub_234D0EDDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D0EDE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234D0EDE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D0EDF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for EventListenerPhase(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventListenerPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t type metadata completion function for EventListenerPhase.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for GesturePhase(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for EventListenerPhase.Value(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  size_t v9;
  size_t v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;

  v4 = __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  if (v7 <= v9)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v6 + 64);
  if ((v8 & 0x1000F8) == 0 && (v10 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    v13 = __src[v10];
    if (v13 >= 3)
      v13 = *(_DWORD *)__src + 3;
    if (v13 == 2)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v4 + v10) = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v4 + v10) = 1;
    }
    else if (v13)
    {
      memcpy(__dst, __src, v10 + 1);
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(__src, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v4, __src, v9);
      }
      else
      {
        (*(void (**)(_QWORD *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, __src, v5);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((_BYTE *)v4 + v10) = 0;
    }
    v14 = ((unint64_t)v4 + v10 + 8) & 0xFFFFFFFFFFFFFFF8;
    v15 = (unint64_t)&__src[v10 + 8] & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  }
  else
  {
    v12 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v12 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for EventListenerPhase.Value(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = v5 + 1;
  if (v5 > v6)
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(result + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 - 1 < 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (!*(_BYTE *)(result + v6))
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(result, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

_BYTE *initializeWithCopy for EventListenerPhase.Value(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(__src, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  v12 = (unint64_t)&__dst[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  v13 = (unint64_t)&__src[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return __dst;
}

unsigned __int8 *assignWithCopy for EventListenerPhase.Value(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    if (v7)
      v9 = *(_QWORD *)(v6 + 64);
    else
      v9 = v8 + 1;
    if (v8 <= v9)
      v10 = v9;
    else
      v10 = *(_QWORD *)(v6 + 64);
    v11 = a1[v10];
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 - 1 < 2
      || !a1[v10]
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    v13 = a2[v10];
    if (v13 >= 3)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v10] = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v10] = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v9);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v10] = 0;
    }
  }
  if (v7)
    v15 = v8;
  else
    v15 = v8 + 1;
  if (v8 > v15)
    v15 = v8;
  v16 = v15 + 8;
  v17 = (unint64_t)&a1[v16] & 0xFFFFFFFFFFFFFFF8;
  v18 = (unint64_t)&a2[v16] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  return a1;
}

_BYTE *initializeWithTake for EventListenerPhase.Value(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(__src, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  v12 = (unint64_t)&__dst[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  v13 = (unint64_t)&__src[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return __dst;
}

unsigned __int8 *assignWithTake for EventListenerPhase.Value(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    if (v7)
      v9 = *(_QWORD *)(v6 + 64);
    else
      v9 = v8 + 1;
    if (v8 <= v9)
      v10 = v9;
    else
      v10 = *(_QWORD *)(v6 + 64);
    v11 = a1[v10];
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 - 1 < 2
      || !a1[v10]
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    v13 = a2[v10];
    if (v13 >= 3)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      a1[v10] = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      a1[v10] = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v9);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v10] = 0;
    }
  }
  if (v7)
    v15 = v8;
  else
    v15 = v8 + 1;
  if (v8 > v15)
    v15 = v8;
  v16 = v15 + 8;
  v17 = (unint64_t)&a1[v16] & 0xFFFFFFFFFFFFFFF8;
  v18 = (unint64_t)&a2[v16] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventListenerPhase.Value(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  if (v4)
    v6 = v5;
  else
    v6 = v5 + 1;
  if (v5 <= v6)
    v5 = v6;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
  {
    v12 = *(_QWORD *)((a1 + v5 + 8) & 0xFFFFFFFFFFFFF8);
    if (v12 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    if ((v12 + 1) >= 2)
      return v12;
    else
      return 0;
  }
  else
  {
    v7 = (v5 & 0xFFFFFFF8) + 25;
    if (v7 < 4)
      v8 = ((a2 - 2147483391) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234D0FAC8 + 4 * byte_235299ED1[v10]))();
  }
}

void storeEnumTagSinglePayload for EventListenerPhase.Value(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v7 <= v8)
    v7 = v8;
  v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 25;
  if (a3 < 0x7FFFFFFF)
  {
    v12 = 0;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - 2147483391) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X11 }
  if (v9 >= 4)
    v13 = a2 - 0x7FFFFFFF;
  else
    v13 = (a2 + 1);
  bzero(a1, v9);
  if ((_DWORD)v9 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_234D0FC70()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234D0FC78(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234D0FC80);
}

void sub_234D0FC98(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a1)
    *(_QWORD *)((v2 + a2 + 8) & 0xFFFFFFFFFFFFF8) = a1;
}

void sub_234D0FCA4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t instantiation function for generic protocol witness table for EventListenerPhase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListenerPhase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in EventListenerPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t outlined init with copy of EventType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for EventType?, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of EventType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for EventType?, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyElement?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for AnyElement?, (uint64_t (*)(uint64_t))type metadata accessor for AnyElement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t type metadata accessor for EventListenerPhase.FailureReason(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventListenerPhase.FailureReason);
}

uint64_t storeEnumTagSinglePayload for EventListenerPhase.FailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234D0FE28 + 4 * byte_235299EE5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234D0FE5C + 4 * byte_235299EE0[v4]))();
}

uint64_t sub_234D0FE5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D0FE64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D0FE6CLL);
  return result;
}

uint64_t sub_234D0FE78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D0FE80);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234D0FE84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D0FE8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in EventListenerPhase<A>.FailureReason()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t GestureCallbacks.cancel(state:)()
{
  return 0;
}

uint64_t static GestureCallbacks<>.initialState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t CallbacksGesture.callbacks.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CallbacksGesture.callbacks.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CallbacksGesture.callbacks.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CallbacksGesture.init(callbacks:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static CallbacksGesture._makeGesture(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _DWORD *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  int v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  __int128 v33;
  uint64_t v34;
  _DWORD *v35;
  _QWORD v36[2];
  int v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[7];
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;

  v35 = a6;
  v45 = *MEMORY[0x24BDAC8D0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v33 - v12;
  v15 = type metadata accessor for CallbacksPhase(0, a4, a5, v14);
  v34 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - v16;
  LODWORD(a1) = *a1;
  v18 = *(_OWORD *)(a2 + 80);
  v42[4] = *(_OWORD *)(a2 + 64);
  v42[5] = v18;
  v42[6] = *(_OWORD *)(a2 + 96);
  v19 = *(_OWORD *)(a2 + 16);
  v42[0] = *(_OWORD *)a2;
  v42[1] = v19;
  v20 = *(_OWORD *)(a2 + 48);
  v42[2] = *(_OWORD *)(a2 + 32);
  v42[3] = v20;
  v21 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)&v20 = *(_QWORD *)(a2 + 112);
  v33 = v20;
  v43 = v20;
  v44 = v21;
  a3(v36, v42);
  LODWORD(a3) = v36[0];
  (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  CallbacksPhase.init(modifier:phase:resetSeed:useGestureGraph:state:cancel:lastResetSeed:)((int)a1, (int)a3, v33, (v21 >> 4) & 1, (uint64_t)v13, 0, 0, 0, (uint64_t)v17, a4, a5);
  v22 = swift_getAssociatedTypeWitness();
  v39 = type metadata accessor for GesturePhase(0, v22, v23, v24);
  v40 = v15;
  v41 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CallbacksPhase<A>, v15);
  v25 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v38, v15, MEMORY[0x24BEE4078], v25, MEMORY[0x24BEE40A8], v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v15);
  v27 = v42[0];
  AGGraphGetFlags();
  result = AGGraphSetFlags();
  v29 = HIDWORD(v36[0]);
  v30 = v36[1];
  v31 = v37;
  v32 = v35;
  *v35 = v27;
  v32[1] = v29;
  *((_QWORD *)v32 + 1) = v30;
  v32[4] = v31;
  return result;
}

uint64_t type metadata accessor for CallbacksPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CallbacksPhase);
}

uint64_t CallbacksPhase.init(modifier:phase:resetSeed:useGestureGraph:state:cancel:lastResetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int *v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v20;

  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_BYTE *)(a9 + 12) = a4;
  v16 = (int *)type metadata accessor for CallbacksPhase(0, a10, a11, a4);
  v17 = a9 + v16[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v17, a5, AssociatedTypeWitness);
  v20 = (_QWORD *)(a9 + v16[13]);
  *v20 = a6;
  v20[1] = a7;
  *(_DWORD *)(a9 + v16[14]) = a8;
  return result;
}

uint64_t CallbacksPhase.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for CallbacksGesture(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t CallbacksPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance CallbacksGesture<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, _DWORD *a5@<X8>)
{
  return static CallbacksGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t CallbacksPhase.resetPhase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7.n128_f64[0] = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v25 - v8;
  v10 = (uint64_t *)(v1 + *(int *)(a1 + 52));
  if (*v10)
  {
    v11 = ((uint64_t (*)(uint64_t, double))*v10)(v1 + *(int *)(a1 + 48), v7.n128_f64[0]);
    if (v11)
    {
      v13 = v11;
      v14 = v12;
      v26 = AssociatedTypeWitness;
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v13;
      *(_QWORD *)(v15 + 24) = v14;
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      *(_QWORD *)(v16 + 24) = v15;
      v25[1] = v15;
      swift_retain();
      specialized static Update.begin()();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      *(_QWORD *)(v17 + 24) = v16;
      v25[0] = v17;
      v18 = one-time initialization token for actions;
      swift_retain();
      if (v18 != -1)
        swift_once();
      v19 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      v21 = v19[2];
      v20 = v19[3];
      if (v21 >= v20 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
      v19[2] = v21 + 1;
      v22 = &v19[2 * v21];
      v23 = v25[0];
      v22[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v22[5] = v23;
      static Update.actions = v19;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
      swift_release();
      AssociatedTypeWitness = v26;
    }
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 24))(v5, v4, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 40))(v2 + *(int *)(a1 + 48), v9, AssociatedTypeWitness);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v10);
  *v10 = 0;
  v10[1] = 0;
  return result;
}

uint64_t CallbacksPhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t Value;
  char v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[4];

  v78[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for CallbacksGesture(0, v6, v7, a4);
  MEMORY[0x24BDAC7A8](v8);
  v75 = (uint64_t)&v66 - v9;
  v10 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for GesturePhase(255, AssociatedTypeWitness, v15, v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v76 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v66 - v23;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CallbacksPhase<A>, a1, v22);
  v77 = a1;
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    v72 = v13;
    v73 = v10;
    v70 = v7;
    v74 = v6;
    v26 = *(int *)(TupleTypeMetadata2 + 48);
    Value = AGGraphGetValue();
    v29 = v28;
    v30 = *(_QWORD *)(v17 - 8);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    v31(v24, Value, v17);
    v68 = v26;
    v69 = v31;
    v24[v26] = v29 & 1;
    v71 = TupleTypeMetadata2;
    v32 = *(int *)(TupleTypeMetadata2 + 48);
    v31(v20, (uint64_t)v24, v17);
    v20[v32] = v29 & 1;
    v33 = *(void (**)(char *, uint64_t))(v30 + 8);
    v33(v20, v17);
    if ((v29 & 1) != 0)
    {
      v67 = v33;
      v35 = v75;
      v36 = v77;
      v37 = v4;
      CallbacksPhase.modifier.getter(v77, v34, v75);
      v38 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v72, v35, v74);
      v39 = v70;
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 32))(v24, v4 + *(int *)(v36 + 48), v38, v70);
      v66 = v4;
      if (v40)
      {
        v42 = v40;
        v43 = v41;
        v44 = swift_allocObject();
        *(_QWORD *)(v44 + 16) = v42;
        *(_QWORD *)(v44 + 24) = v43;
        v78[0] = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ();
        v78[1] = v44;
        closure #1 in CallbacksPhase.updateValue()(v78, v37, v38, v39);
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ());
      }
      v50 = v71;
      v51 = *(int *)(v71 + 48);
      v52 = (void (*)(char *, char *, uint64_t))v69;
      v53 = ((uint64_t (*)(char *, char *, uint64_t))v69)(v20, v24, v17);
      v54 = v68;
      v20[v51] = v24[v68];
      v55 = MEMORY[0x24BDAC7A8](v53);
      *(&v66 - 2) = v77;
      *(&v66 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CallbacksPhase<A>, v55);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v20, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v66 - 4), v17, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v56);
      v57 = v67;
      v67(v20, v17);
      v58 = *(int *)(v50 + 48);
      v52(v20, v24, v17);
      v20[v58] = v24[v54];
      LOBYTE(v58) = GesturePhase.isTerminal.getter(v17);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v24, v50);
      v57(v20, v17);
      if ((v58 & 1) != 0)
      {
        v59 = 0;
        v60 = 0;
        v61 = (uint64_t)v72;
        v62 = v66;
        v63 = v74;
      }
      else
      {
        v61 = (uint64_t)v72;
        v63 = v74;
        v59 = implicit closure #1 in CallbacksPhase.updateValue()((uint64_t)v72, v74, v70);
        v60 = v64;
        v62 = v66;
      }
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v61, v63);
      v65 = (uint64_t *)(v62 + *(int *)(v77 + 52));
      result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v65);
      *v65 = (uint64_t)v59;
      v65[1] = v60;
    }
    else if (AGGraphGetOutputValue())
    {
      return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v24, v71);
    }
    else
    {
      v45 = v71;
      v46 = *(int *)(v71 + 48);
      v47 = ((uint64_t (*)(char *, char *, uint64_t))v69)(v20, v24, v17);
      v20[v46] = 0;
      v48 = MEMORY[0x24BDAC7A8](v47);
      *(&v66 - 2) = v77;
      *(&v66 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CallbacksPhase<A>, v48);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v20, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v66 - 4), v17, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v49);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v24, v45);
      return ((uint64_t (*)(char *, uint64_t))v33)(v20, v17);
    }
  }
  return result;
}

uint64_t closure #1 in CallbacksPhase.updateValue()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD v26[2];

  v5 = v4;
  v8 = type metadata accessor for CallbacksPhase(0, a3, a4, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v26 - v10;
  v12 = *a1;
  v13 = a1[1];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = v11[12];
  swift_retain();
  if (v15 == 1)
  {
    v16 = specialized static GestureGraph.current.getter();
    if (MEMORY[0x23B7C9E44](v16 + 192))
    {
      v17 = *(_QWORD *)(v16 + 200);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v17 + 8))(partial apply for thunk for @escaping @callee_guaranteed () -> (), v14, ObjectType, v17);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  else
  {
    v26[1] = v5;
    specialized static Update.begin()();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    *(_QWORD *)(v19 + 24) = v14;
    v20 = one-time initialization token for actions;
    swift_retain();
    if (v20 != -1)
      swift_once();
    v21 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v23 = v21[2];
    v22 = v21[3];
    if (v23 >= v22 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
    v21[2] = v23 + 1;
    v24 = &v21[2 * v23];
    v24[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    v24[5] = v19;
    static Update.actions = v21;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t (*implicit closure #1 in CallbacksPhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in CallbacksPhase.updateValue();
}

uint64_t static CallbacksPhase.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  AGGraphGetAttributeInfo();
  v6 = type metadata accessor for CallbacksPhase(0, a2, a3, v5);
  return CallbacksPhase.resetPhase()(v6);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance CallbacksPhase<A>(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 56));
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance CallbacksPhase<A>(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(a2 + 56)) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance CallbacksPhase<A>())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance CallbacksPhase<A>(uint64_t a1, uint64_t a2)
{
  return static CallbacksPhase.willRemove(attribute:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance CallbacksPhase<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v3, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
}

uint64_t FullGestureCallbacks.StateType.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a4 = 0;
  v5 = &a4[*(int *)(type metadata accessor for FullGestureCallbacks.StateType(0, a1, a2, a3) + 36)];
  v8 = type metadata accessor for GesturePhase(0, a1, v6, v7);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance FullGestureCallbacks<A>.StateType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  return FullGestureCallbacks.StateType.init()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t key path getter for FullGestureCallbacks.possible : <A>FullGestureCallbacks<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = a3 + a2;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ());
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a4 = v9;
  a4[1] = (uint64_t (*)())v8;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t key path setter for FullGestureCallbacks.possible : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = a4 + a3;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ());
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  *a2 = (uint64_t)v9;
  a2[1] = v8;
  return result;
}

uint64_t FullGestureCallbacks.possible.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v0);
  return v1;
}

uint64_t FullGestureCallbacks.possible.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.possible.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for FullGestureCallbacks.changed : <A>FullGestureCallbacks<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v7 = a3 + a2;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())partial apply;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a4 = v9;
  a4[1] = (uint64_t (*)())v8;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t key path setter for FullGestureCallbacks.changed : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = a4 + a3;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())partial apply;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = *(_QWORD *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t FullGestureCallbacks.changed.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t FullGestureCallbacks.changed.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.changed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for FullGestureCallbacks.ended : <A>FullGestureCallbacks<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(uint64_t a1)@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v7 = a3 + a2;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a4 = v9;
  a4[1] = (uint64_t (*)(uint64_t))v8;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t key path setter for FullGestureCallbacks.ended : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = a4 + a3;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = *(_QWORD *)(a2 + 32);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v8;
  return result;
}

uint64_t FullGestureCallbacks.ended.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t FullGestureCallbacks.ended.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.ended.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for FullGestureCallbacks.failed : <A>FullGestureCallbacks<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for FullGestureCallbacks.failed : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v5;
  return result;
}

uint64_t FullGestureCallbacks.failed.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t FullGestureCallbacks.failed.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v2 + 48));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.failed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t FullGestureCallbacks.init(possible:changed:ended:failed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t FullGestureCallbacks.dispatch(phase:state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(uint64_t, uint64_t, uint64_t);
  char *v33;
  _QWORD v35[2];
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _BYTE v46[16];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v4 = v3;
  v45 = a1;
  v7 = *(_QWORD *)(a3 + 16);
  v43 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v41 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[0] = v8;
  MEMORY[0x24BDAC7A8](v9);
  v37 = (char *)v35 - v10;
  v39 = type metadata accessor for Optional();
  v36 = *(_QWORD *)(v39 - 8);
  v11 = *(_QWORD *)(v36 + 64);
  MEMORY[0x24BDAC7A8](v39);
  v38 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v35[1] = (char *)v35 - v13;
  v16 = type metadata accessor for GesturePhase(0, v7, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v44 = (char *)v35 - v18;
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v35 - v21;
  v23 = v4[1];
  v51 = *v4;
  v52 = v23;
  v24 = v4[3];
  v53 = v4[2];
  v54 = v24;
  v25 = *(_QWORD *)(a3 + 24);
  v27 = *(int *)(type metadata accessor for FullGestureCallbacks.StateType(0, v7, v25, v26) + 36);
  v42 = a2;
  v28 = (char *)(a2 + v27);
  v29 = v45;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v28, v19);
  v47 = v7;
  v48 = v25;
  v40 = v25;
  v49 = v29;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FullGestureCallbacks.dispatch(phase:state:), (uint64_t)v46, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v30, (uint64_t)&v50);
  v31 = *(void (**)(char *, uint64_t))(v20 + 8);
  v31(v22, v19);
  if (v50 == 2 || (v50 & 1) != 0)
  {
    v31(v28, v19);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
    v32((uint64_t)v28, v29, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v28, 0, 1, v16);
    v32((uint64_t)v44, v29, v16);
    v33 = (char *)&loc_234D117B0 + 4 * byte_23529A1C0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t closure #3 in FullGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v0;
  uint64_t v2;

  v2 = 0;
  specialized closure #1 in PropertyList.subscript.setter(&v2, 1);
  v0 = swift_retain();
  specialized closure #1 in withTransaction<A>(_:_:)(v0, (void (*)(_QWORD *))partial apply for closure #1 in closure #2 in ChangedCallbacks.dispatch(phase:state:));
  return swift_release_n();
}

uint64_t FullGestureCallbacks.cancel(state:)()
{
  uint64_t v0;

  v0 = specialized FullGestureCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

uint64_t protocol witness for static GestureCallbacks.initialState.getter in conformance FullGestureCallbacks<A>(uint64_t a1, uint64_t a2)
{
  return static GestureCallbacks<>.initialState.getter(a1, a2, (uint64_t)&protocol witness table for FullGestureCallbacks<A>.StateType);
}

uint64_t protocol witness for GestureCallbacks.cancel(state:) in conformance FullGestureCallbacks<A>()
{
  uint64_t v0;

  v0 = specialized FullGestureCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

void Gesture.callbacks<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CallbacksGesture(0, v13, v15, v14);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v12, a3);
  v20 = MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v16);
  Gesture.modifier<A>(_:)((uint64_t)v19, a2, v16, a4, v20, a5);
}

uint64_t sub_234D11BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void Gesture.onEnded(_:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for EndedCallbacks(255, AssociatedTypeWitness, v1, v2);
  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EndedCallbacks<A>, v3);
  v6 = type metadata accessor for CallbacksGesture(255, v3, v4, v5);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v6);
  type metadata accessor for ModifierGesture();
}

void sub_234D11C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&a9 - v15;
  *(_QWORD *)(v14 - 112) = v12;
  *(_QWORD *)(v14 - 104) = v11;
  swift_retain();
  Gesture.callbacks<A>(_:)(v14 - 112, v10, v13, v9, (uint64_t)v16);
}

void sub_234D11CD0()
{
  swift_release();
  _EndedGesture.init(_body:)();
}

void _EndedGesture.init(_body:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for EndedCallbacks(255, AssociatedTypeWitness, v1, v2);
  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EndedCallbacks<A>, v3);
  v6 = type metadata accessor for CallbacksGesture(255, v3, v4, v5);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v6);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234D11DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void Gesture.onFailed(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14[0] = a1;
  v14[1] = a2;
  v13 = type metadata accessor for FailedCallbacks(0, AssociatedTypeWitness, v11, v12);
  swift_retain();
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for FailedCallbacks<A>, v13);
  Gesture.callbacks<A>(_:)((uint64_t)v14, a3, v13, a4, a5);
}

uint64_t sub_234D11E6C()
{
  return swift_release();
}

void Gesture<>.onChanged(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for ChangedCallbacks(255, AssociatedTypeWitness, a5, v7);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChangedCallbacks<A>, v8);
  v11 = type metadata accessor for CallbacksGesture(255, v8, v9, v10);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v11);
  type metadata accessor for ModifierGesture();
}

void sub_234D11F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&a9 - v15;
  *(_QWORD *)(v14 - 112) = v12;
  *(_QWORD *)(v14 - 104) = v11;
  swift_retain();
  Gesture.callbacks<A>(_:)(v14 - 112, v10, v13, v9, (uint64_t)v16);
}

void sub_234D11F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  _ChangedGesture.init(_body:)(v3, v2, v1, v0);
}

void _ChangedGesture.init(_body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for ChangedCallbacks(255, AssociatedTypeWitness, a4, v6);
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChangedCallbacks<A>, v7);
  v10 = type metadata accessor for CallbacksGesture(255, v7, v8, v9);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v10);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234D12078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void Gesture<>.callbacks(possible:changed:ended:failed:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[8];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24[0] = a1;
  v24[1] = a2;
  v24[2] = a3;
  v24[3] = a4;
  v24[4] = a5;
  v24[5] = a6;
  v24[6] = a7;
  v24[7] = a8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a5);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a7);
  v22 = type metadata accessor for FullGestureCallbacks(0, AssociatedTypeWitness, a12, v21);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for FullGestureCallbacks<A>, v22);
  Gesture.callbacks<A>(_:)((uint64_t)v24, a10, v22, a11, a9);
}

uint64_t sub_234D121A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

void static _EndedGesture._makeGesture(gesture:inputs:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for EndedCallbacks(255, AssociatedTypeWitness, v1, v2);
  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EndedCallbacks<A>, v3);
  v6 = type metadata accessor for CallbacksGesture(255, v3, v4, v5);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v6);
  type metadata accessor for ModifierGesture();
}

void sub_234D122C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,uint64_t a24,int a25)
{
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  LODWORD(a17) = v28;
  v31 = type metadata accessor for _EndedGesture(255, v26, v25, a4);
  type metadata accessor for _GraphValue(0, v31, v32, v33);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _EndedGesture._makeGesture(gesture:inputs:), a1, &a14);
  v34 = *(_OWORD *)(v29 - 128);
  a21 = *(_OWORD *)(v29 - 144);
  a22 = v34;
  a23 = *(_OWORD *)(v29 - 112);
  a24 = *(_QWORD *)(v29 - 96);
  v35 = *(_OWORD *)(v29 - 192);
  a17 = *(_OWORD *)(v29 - 208);
  a18 = v35;
  v36 = *(_OWORD *)(v29 - 160);
  a19 = *(_OWORD *)(v29 - 176);
  a20 = v36;
  a25 = v27;
  static ModifierGesture._makeGesture(gesture:inputs:)();
}

double sub_234D1235C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  double result;
  char v17;
  _OWORD v18[7];
  uint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  int v23;

  if ((v3 & 8) != 0 && !(swift_conformsToProtocol2() ? v2 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v8 = 2;
    else
      v8 = 1;
    v17 = v8;
    v9 = *(_OWORD *)(v4 - 128);
    v18[4] = *(_OWORD *)(v4 - 144);
    v18[5] = v9;
    v18[6] = *(_OWORD *)(v4 - 112);
    v19 = *(_QWORD *)(v4 - 96);
    v10 = *(_OWORD *)(v4 - 192);
    v18[0] = *(_OWORD *)(v4 - 208);
    v18[1] = v10;
    v11 = *(_OWORD *)(v4 - 160);
    v18[2] = *(_OWORD *)(v4 - 176);
    v18[3] = v11;
    v20 = v3;
    v12 = type metadata accessor for _GestureOutputs(0, v1, v6, v7);
    v13 = _GestureOutputs.debugData.getter();
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v2, &v17, 0x100000000, v18, v13 | ((HIDWORD(v13) & 1) << 32), 0x100000000, v12);
  }
  v14 = v22;
  v15 = v23;
  result = v21;
  *(double *)v0 = v21;
  *(_QWORD *)(v0 + 8) = v14;
  *(_DWORD *)(v0 + 16) = v15;
  return result;
}

void closure #1 in static _EndedGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for _EndedGesture(0, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for EndedCallbacks(255, AssociatedTypeWitness, v5, v6);
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EndedCallbacks<A>, v7);
  v10 = type metadata accessor for CallbacksGesture(255, v7, v8, v9);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v10);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234D1251C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[18];

  v6[3] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, a1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v6[6];
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _EndedGesture<A>()
{
  static _EndedGesture._makeGesture(gesture:inputs:)();
}

void static _ChangedGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for ChangedCallbacks(255, AssociatedTypeWitness, a5, v7);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChangedCallbacks<A>, v8);
  v11 = type metadata accessor for CallbacksGesture(255, v8, v9, v10);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v11);
  type metadata accessor for ModifierGesture();
}

void sub_234D12670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,uint64_t a26,int a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  LODWORD(a19) = v31;
  v34 = type metadata accessor for _ChangedGesture(255, v29, v28, v27);
  type metadata accessor for _GraphValue(0, v34, v35, v36);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:), a1, &a16);
  v37 = *(_OWORD *)(v32 - 128);
  a23 = *(_OWORD *)(v32 - 144);
  a24 = v37;
  a25 = *(_OWORD *)(v32 - 112);
  a26 = *(_QWORD *)(v32 - 96);
  v38 = *(_OWORD *)(v32 - 192);
  a19 = *(_OWORD *)(v32 - 208);
  a20 = v38;
  v39 = *(_OWORD *)(v32 - 160);
  a21 = *(_OWORD *)(v32 - 176);
  a22 = v39;
  a27 = v30;
  static ModifierGesture._makeGesture(gesture:inputs:)();
}

double sub_234D1270C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  double result;
  char v17;
  _OWORD v18[7];
  uint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  int v23;

  if ((v3 & 8) != 0 && !(swift_conformsToProtocol2() ? v2 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v8 = 2;
    else
      v8 = 1;
    v17 = v8;
    v9 = *(_OWORD *)(v4 - 128);
    v18[4] = *(_OWORD *)(v4 - 144);
    v18[5] = v9;
    v18[6] = *(_OWORD *)(v4 - 112);
    v19 = *(_QWORD *)(v4 - 96);
    v10 = *(_OWORD *)(v4 - 192);
    v18[0] = *(_OWORD *)(v4 - 208);
    v18[1] = v10;
    v11 = *(_OWORD *)(v4 - 160);
    v18[2] = *(_OWORD *)(v4 - 176);
    v18[3] = v11;
    v20 = v3;
    v12 = type metadata accessor for _GestureOutputs(0, v1, v6, v7);
    v13 = _GestureOutputs.debugData.getter();
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v2, &v17, 0x100000000, v18, v13 | ((HIDWORD(v13) & 1) << 32), 0x100000000, v12);
  }
  v14 = v22;
  v15 = v23;
  result = v21;
  *(double *)v0 = v21;
  *(_QWORD *)(v0 + 8) = v14;
  *(_DWORD *)(v0 + 16) = v15;
  return result;
}

void closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for _ChangedGesture(0, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for ChangedCallbacks(255, AssociatedTypeWitness, a4, v6);
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChangedCallbacks<A>, v7);
  v10 = type metadata accessor for CallbacksGesture(255, v7, v8, v9);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v10);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234D128D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[18];

  v6[3] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, a1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v6[6];
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _ChangedGesture<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static _ChangedGesture._makeGesture(gesture:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t (*EndedCallbacks.dispatch(phase:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v8 = type metadata accessor for GesturePhase(0, a5, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - v10;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v15 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v17);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v20(v19, v11, a5);
    v20(v15, v19, a5);
    v21 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v22 = (char *)swift_allocObject();
    v23 = v26;
    *((_QWORD *)v22 + 2) = a5;
    *((_QWORD *)v22 + 3) = v23;
    *((_QWORD *)v22 + 4) = a4;
    v20(&v22[v21], v15, a5);
    swift_retain();
    return partial apply for closure #1 in bind<A>(_:_:);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance EndedCallbacks<A>(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t *v3;

  return EndedCallbacks.dispatch(phase:state:)(a1, a2, *v3, v3[1], *(_QWORD *)(a3 + 16));
}

uint64_t FailedCallbacks.failed.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t FailedCallbacks.dispatch(phase:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v14;

  v6 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v14 - v9;
  v11 = *v4;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = 0;
  if (EnumCaseMultiPayload == 3)
  {
    swift_retain();
    return v11;
  }
  return result;
}

uint64_t FailedCallbacks.cancel(state:)()
{
  uint64_t v0;

  v0 = specialized FailedCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

uint64_t protocol witness for GestureCallbacks.cancel(state:) in conformance FailedCallbacks<A>()
{
  uint64_t v0;

  v0 = specialized FailedCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

uint64_t ChangedCallbacks.StateType.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance ChangedCallbacks<A>.StateType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ChangedCallbacks.StateType.init()(*(_QWORD *)(a1 + 16), a2);
}

uint64_t (*ChangedCallbacks.dispatch(phase:state:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  unint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;

  v42 = a2;
  v43 = a6;
  v39 = a3;
  v40 = a4;
  v8 = type metadata accessor for Optional();
  v41 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v37 - v9;
  v13 = type metadata accessor for GesturePhase(0, a5, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v37 - v15;
  v17 = *(_QWORD *)(a5 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x24BDAC7A8](v19);
  v38 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v37 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a1, v13, v21);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0;
  }
  v37[0] = *(_QWORD *)(v17 + 32);
  ((void (*)(char *, char *, uint64_t))v37[0])(v23, v16, a5);
  v25 = v41;
  v24 = v42;
  v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 16))(v10, v42, v8);
  v37[1] = v37;
  MEMORY[0x24BDAC7A8](v26);
  v27 = v43;
  v37[-4] = a5;
  v37[-3] = v27;
  v37[-2] = v23;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ChangedCallbacks.dispatch(phase:state:), (uint64_t)&v37[-6], MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v28, (uint64_t)&v44);
  v29 = *(void (**)(char *, uint64_t))(v25 + 8);
  v29(v10, v8);
  v30 = v27;
  if (v44 != 2 && (v44 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, a5);
    return 0;
  }
  v29(v24, v8);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v24, v23, a5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v24, 0, 1, a5);
  v32 = v38;
  v33 = (void (*)(char *, char *, uint64_t))v37[0];
  ((void (*)(char *, char *, uint64_t))v37[0])(v38, v23, a5);
  v34 = (*(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = a5;
  *((_QWORD *)v35 + 3) = v30;
  v36 = v40;
  *((_QWORD *)v35 + 4) = v39;
  *((_QWORD *)v35 + 5) = v36;
  v33(&v35[v34], v32, a5);
  swift_retain();
  return partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:);
}

uint64_t protocol witness for static GestureCallbacks.initialState.getter in conformance ChangedCallbacks<A>(uint64_t a1, uint64_t a2)
{
  return static GestureCallbacks<>.initialState.getter(a1, a2, (uint64_t)&protocol witness table for ChangedCallbacks<A>.StateType);
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance ChangedCallbacks<A>(uint64_t a1, char *a2, uint64_t a3))()
{
  uint64_t *v3;

  return ChangedCallbacks.dispatch(phase:state:)(a1, a2, *v3, v3[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t type metadata accessor for FullGestureCallbacks.StateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FullGestureCallbacks.StateType);
}

void partial apply for closure #1 in FullGestureCallbacks.dispatch(phase:state:)(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t *v2;
  char v4;

  static GesturePhase<A>.== infix(_:_:)(a1, v2[4], v2[2], v2[3]);
  *a2 = (v4 & 1) == 0;
}

uint64_t partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:)()
{
  return partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:)((uint64_t (*)(_QWORD, _QWORD, char *))closure #3 in FullGestureCallbacks.dispatch(phase:state:));
}

uint64_t sub_234D12FB4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  if (*((_QWORD *)v0 + 4))
    swift_release();
  if (*((_QWORD *)v0 + 6))
    swift_release();
  if (*((_QWORD *)v0 + 8))
    swift_release();
  v3 = (v2 + 96) & ~v2;
  if (*((_QWORD *)v0 + 10))
    swift_release();
  v4 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(&v0[v3], 1, v1))
    (*(void (**)(char *, uint64_t))(v4 + 8))(&v0[v3], v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FullGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  result = type metadata accessor for Optional();
  v2 = *(uint64_t (**)(uint64_t))(v0 + 32);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
    return v2(v0 + ((v3 + 96) & ~v3));
  }
  return result;
}

uint64_t *outlined retain of FullGestureCallbacks<A>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*a1);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v4);
  return a1;
}

uint64_t specialized FailedCallbacks.cancel(state:)()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t specialized FullGestureCallbacks.cancel(state:)()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t type metadata accessor for CallbacksGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CallbacksGesture);
}

uint64_t type metadata accessor for EndedCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EndedCallbacks);
}

uint64_t type metadata accessor for FailedCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FailedCallbacks);
}

uint64_t type metadata accessor for ChangedCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChangedCallbacks);
}

uint64_t type metadata accessor for FullGestureCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FullGestureCallbacks);
}

void partial apply for closure #1 in static _EndedGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in static _EndedGesture._makeGesture(gesture:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for _EndedGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EndedGesture);
}

void partial apply for closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for _ChangedGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ChangedGesture);
}

uint64_t instantiation function for generic protocol witness table for _EndedGesture<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04]("!q<\x1Bx/\v");
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _ChangedGesture<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ChangedGesture<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234D13218()
{
  return 16;
}

__n128 sub_234D13224(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234D13238()
{
  return 16;
}

__n128 sub_234D13244(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234D13258()
{
  return 16;
}

__n128 sub_234D13264(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234D13278()
{
  return 16;
}

__n128 sub_234D13284(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static GestureCallbacks.initialState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of GestureCallbacks.dispatch(phase:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of GestureCallbacks.cancel(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t getEnumTagSinglePayload for CallbacksGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234D13358 + 4 * byte_23529A1C4[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CallbacksGesture(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_QWORD *destroy for FullGestureCallbacks(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    result = (_QWORD *)swift_release();
  if (v1[4])
    result = (_QWORD *)swift_release();
  if (v1[6])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *initializeWithCopy for FullGestureCallbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  v7 = a2[4];
  if (v7)
  {
    v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  v9 = a2[6];
  if (v9)
  {
    v10 = a2[7];
    a1[6] = v9;
    a1[7] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  }
  return a1;
}

_QWORD *assignWithCopy for FullGestureCallbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    swift_retain();
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (!a1[6])
  {
    if (v13)
    {
      v15 = a2[7];
      a1[6] = v13;
      a1[7] = v15;
      swift_retain();
      return a1;
    }
LABEL_28:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  v14 = a2[7];
  a1[6] = v13;
  a1[7] = v14;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for FullGestureCallbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (!a1[6])
  {
    if (v13)
    {
      v15 = a2[7];
      a1[6] = v13;
      a1[7] = v15;
      return a1;
    }
LABEL_28:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  v14 = a2[7];
  a1[6] = v13;
  a1[7] = v14;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FullGestureCallbacks(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FullGestureCallbacks(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata completion function for FullGestureCallbacks.StateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for GesturePhase(255, *(_QWORD *)(a1 + 16), a3, a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FullGestureCallbacks.StateType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  int v12;
  uint64_t v15;
  void *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = ~(unint64_t)v6;
  v9 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v9 + 1;
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = *(_QWORD *)(v5 + 64);
  v12 = v6 & 0x100000;
  if (v7 > 7 || v12 != 0 || v11 + 1 + ((v7 + 1) & ~v7) > 0x18)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v16 = (void *)(((unint64_t)a1 + v7 + 1) & v8);
    v17 = (unsigned __int8 *)(((unint64_t)a2 + v7 + 1) & v8);
    v18 = v17[v11];
    if (v18 > 3)
    {
      memcpy(v16, v17, v11 + 1);
    }
    else
    {
      if (v18 == 3)
      {
        if (v11 <= 3)
          v19 = v11;
        else
          v19 = 4;
        __asm { BR              X11 }
      }
      if (v18 == 2)
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v16, v17, v4);
        *((_BYTE *)v16 + v11) = 2;
      }
      else if (v18 == 1)
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v16, v17, v4);
        *((_BYTE *)v16 + v11) = 1;
      }
      else
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4))
        {
          memcpy(v16, v17, v10);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v16, v17, v4);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
        }
        *((_BYTE *)v16 + v11) = 0;
      }
    }
  }
  return v3;
}

uint64_t destroy for FullGestureCallbacks.StateType(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (result + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
    v6 = *(_QWORD *)(v3 + 64);
  else
    v6 = v5 + 1;
  if (v5 > v6)
    v6 = *(_QWORD *)(v3 + 64);
  v7 = *(unsigned __int8 *)(v4 + v6);
  if (v7 <= 3)
  {
    if (v7 == 3)
    {
      if (v6 <= 3)
        v8 = v6;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    if (v7 - 1 < 2)
      return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
    if (!*(_BYTE *)(v4 + v6))
    {
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))((result + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80), 1, v2);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
    }
  }
  return result;
}

_BYTE *initializeWithCopy for FullGestureCallbacks.StateType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unsigned int v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (unsigned __int8 *)((unint64_t)&a2[v6 + 1] & ~v6);
  v9 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v9 + 1;
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = *(_QWORD *)(v5 + 64);
  v12 = v8[v11];
  if (v12 > 3)
  {
    memcpy(v7, v8, v11 + 1);
  }
  else
  {
    if (v12 == 3)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X11 }
    }
    if (v12 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, _QWORD))(v5 + 16))(v7, v8, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v7 + v11) = 2;
    }
    else if (v12 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, _QWORD))(v5 + 16))(v7, v8, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v7 + v11) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v5 + 48))(v8, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v7, v8, v10);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v7, v8, v4);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      }
      *((_BYTE *)v7 + v11) = 0;
    }
  }
  return a1;
}

_BYTE *assignWithCopy for FullGestureCallbacks.StateType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unsigned __int8 *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (unsigned __int8 *)((unint64_t)&a2[v6 + 1] & ~v6);
  v9 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v9 + 1;
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = *(_QWORD *)(v5 + 64);
  v12 = v7[v11];
  v13 = v8[v11];
  if (v12 > 3)
  {
    if (v13 <= 3)
    {
      if (v13 == 3)
      {
        if (v11 <= 3)
          v15 = v11;
        else
          v15 = 4;
        __asm { BR              X11 }
      }
      if (v13 != 2)
      {
        if (v13 == 1)
        {
LABEL_48:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(v7, v8, v4);
          v19 = 1;
LABEL_50:
          v7[v11] = v19;
          return a1;
        }
        goto LABEL_28;
      }
LABEL_49:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(v7, v8, v4);
      v19 = 2;
      goto LABEL_50;
    }
LABEL_36:
    memcpy(v7, v8, v11 + 1);
    return a1;
  }
  if (v13 > 3)
  {
    if (v12 >= 3)
    {
      if (v11 <= 3)
        v16 = v11;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v12 - 1 < 2
      || !v7[v11]
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v5 + 48))(v7, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v7, v4);
    }
    goto LABEL_36;
  }
  if (v7 == v8)
    return a1;
  if (v12 >= 3)
  {
    if (v11 <= 3)
      v14 = v11;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v12 - 1 < 2
    || !v7[v11]
    && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v5 + 48))(v7, 1, *(_QWORD *)(a3 + 16)))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v7, v4);
  }
  v17 = v8[v11];
  if (v17 >= 3)
  {
    if (v11 <= 3)
      v18 = v11;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == 2)
    goto LABEL_49;
  if (v17 == 1)
    goto LABEL_48;
LABEL_28:
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    memcpy(v7, v8, v10);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  v7[v11] = 0;
  return a1;
}

_BYTE *initializeWithTake for FullGestureCallbacks.StateType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unsigned int v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (unsigned __int8 *)((unint64_t)&a2[v6 + 1] & ~v6);
  v9 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v9 + 1;
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = *(_QWORD *)(v5 + 64);
  v12 = v8[v11];
  if (v12 > 3)
  {
    memcpy(v7, v8, v11 + 1);
  }
  else
  {
    if (v12 == 3)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X11 }
    }
    if (v12 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, _QWORD))(v5 + 32))(v7, v8, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v7 + v11) = 2;
    }
    else if (v12 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, _QWORD))(v5 + 32))(v7, v8, *(_QWORD *)(a3 + 16));
      *((_BYTE *)v7 + v11) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v5 + 48))(v8, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v7, v8, v10);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      }
      *((_BYTE *)v7 + v11) = 0;
    }
  }
  return a1;
}

_BYTE *assignWithTake for FullGestureCallbacks.StateType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unsigned __int8 *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (unsigned __int8 *)((unint64_t)&a2[v6 + 1] & ~v6);
  v9 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v9 + 1;
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = *(_QWORD *)(v5 + 64);
  v12 = v7[v11];
  v13 = v8[v11];
  if (v12 > 3)
  {
    if (v13 <= 3)
    {
      if (v13 == 3)
      {
        if (v11 <= 3)
          v15 = v11;
        else
          v15 = 4;
        __asm { BR              X11 }
      }
      if (v13 != 2)
      {
        if (v13 == 1)
        {
LABEL_48:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
          v19 = 1;
LABEL_50:
          v7[v11] = v19;
          return a1;
        }
        goto LABEL_28;
      }
LABEL_49:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
      v19 = 2;
      goto LABEL_50;
    }
LABEL_36:
    memcpy(v7, v8, v11 + 1);
    return a1;
  }
  if (v13 > 3)
  {
    if (v12 >= 3)
    {
      if (v11 <= 3)
        v16 = v11;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v12 - 1 < 2
      || !v7[v11]
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v5 + 48))(v7, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v7, v4);
    }
    goto LABEL_36;
  }
  if (v7 == v8)
    return a1;
  if (v12 >= 3)
  {
    if (v11 <= 3)
      v14 = v11;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v12 - 1 < 2
    || !v7[v11]
    && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v5 + 48))(v7, 1, *(_QWORD *)(a3 + 16)))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v7, v4);
  }
  v17 = v8[v11];
  if (v17 >= 3)
  {
    if (v11 <= 3)
      v18 = v11;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == 2)
    goto LABEL_49;
  if (v17 == 1)
    goto LABEL_48;
LABEL_28:
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    memcpy(v7, v8, v10);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  v7[v11] = 0;
  return a1;
}

uint64_t getEnumTagSinglePayload for FullGestureCallbacks.StateType(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
    v5 = *(_QWORD *)(v3 + 64);
  else
    v5 = v4 + 1;
  if (v4 > v5)
    v5 = *(_QWORD *)(v3 + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_24;
  v6 = v5 + ((*(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + 1;
  v7 = 8 * v6;
  if (v6 <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)&a1[v6];
      if (!v8)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6])
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v10 < 2)
    {
LABEL_24:
      v12 = *a1;
      v13 = v12 >= 2;
      v14 = (v12 + 2147483646) & 0x7FFFFFFF;
      if (v13)
        return (v14 + 1);
      else
        return 0;
    }
  }
  v8 = a1[v6];
  if (!a1[v6])
    goto LABEL_24;
LABEL_17:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 255);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234D14918 + 4 * byte_23529A20E[(v6 - 1)]))();
}

void storeEnumTagSinglePayload for FullGestureCallbacks.StateType(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = v6 + 1;
  if (v6 > v7)
    v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + 1;
  if (a3 < 0xFF)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X10 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v8)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v8);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

void type metadata completion function for _EndedGesture()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for EndedCallbacks(255, AssociatedTypeWitness, v1, v2);
  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EndedCallbacks<A>, v3);
  v6 = type metadata accessor for CallbacksGesture(255, v3, v4, v5);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v6);
  type metadata accessor for ModifierGesture();
}

void type metadata completion function for _ChangedGesture(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for ChangedCallbacks(255, AssociatedTypeWitness, *(_QWORD *)(a1 + 32), v3);
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChangedCallbacks<A>, v4);
  v7 = type metadata accessor for CallbacksGesture(255, v4, v5, v6);
  MEMORY[0x23B7C9C04]("mq<\x1B(/\v", v7);
  type metadata accessor for ModifierGesture();
}

uint64_t *initializeBufferWithCopyOfBuffer for _EndedGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for _EndedGesture(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for _EndedGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _EndedGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _EndedGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _EndedGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234D14FB4 + 4 * byte_23529A21C[v10]))();
  }
}

void storeEnumTagSinglePayload for _EndedGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234D1512C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234D151A4);
}

void sub_234D15134(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234D1513CLL);
  JUMPOUT(0x234D151A4);
}

void sub_234D1517C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234D151A4);
}

void sub_234D15184()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234D151A4);
}

uint64_t sub_234D1518C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234D151A4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234D151A0);
    JUMPOUT(0x234D15198);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for CallbacksPhase()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CallbacksPhase(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((v7 + ((v6 + 13) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v11 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v12 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v11 = *v12;
    v13 = ((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = ((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
    v15 = (v13 + v6 + 5) & ~v6;
    v16 = (v14 + v6 + 5) & ~v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v15, v16, AssociatedTypeWitness);
    v17 = (v7 + v15) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v7 + v16) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    else
    {
      v19 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v19;
      swift_retain();
    }
    *(_DWORD *)((v17 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v18 + 19) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for CallbacksPhase(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 5) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  if (*(_QWORD *)((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

_DWORD *initializeWithCopy for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v5 = *(_DWORD *)v6;
  *(_BYTE *)(v5 + 4) = *(_BYTE *)(v6 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 5 + v5) & ~v9;
  v11 = (v9 + 5 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
    swift_retain();
  }
  *(_DWORD *)((v13 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithCopy for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v5 = *(_DWORD *)v6;
  *(_BYTE *)(v5 + 4) = *(_BYTE *)(v6 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 5 + v5) & ~v9;
  v11 = (v9 + 5 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v17 = v14[1];
      *v13 = v15;
      v13[1] = v17;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v13 = *(_OWORD *)v14;
    goto LABEL_8;
  }
  if (v15 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v16 = v14[1];
  *v13 = v15;
  v13[1] = v16;
  swift_retain();
  swift_release();
LABEL_8:
  *(_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v5 = *(_DWORD *)v6;
  *(_BYTE *)(v5 + 4) = *(_BYTE *)(v6 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 5 + v5) & ~v9;
  v11 = (v9 + 5 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
  }
  *(_DWORD *)((v13 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v5 = *(_DWORD *)v6;
  *(_BYTE *)(v5 + 4) = *(_BYTE *)(v6 + 4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 5 + v5) & ~v9;
  v11 = (v9 + 5 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v17 = v14[1];
      *v13 = v15;
      v13[1] = v17;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v13 = *(_OWORD *)v14;
    goto LABEL_8;
  }
  if (v15 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v16 = v14[1];
  *v13 = v15;
  v13[1] = v16;
  swift_release();
LABEL_8:
  *(_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallbacksPhase(_DWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 < a2 && *((_BYTE *)a1 + ((((v8 + ((v7 + 13) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
    return v6 + *a1 + 1;
  v10 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & ~v7;
  if (v5 >= 0x7FFFFFFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v10);
  v11 = *(_QWORD *)((v8 + v10) & 0xFFFFFFFFFFFFF8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  if ((v11 + 1) >= 2)
    return v11;
  else
    return 0;
}

void storeEnumTagSinglePayload for CallbacksPhase(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (((v10 + ((v9 + 13) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v8 >= a2)
  {
    if (v8 < a3)
      *((_BYTE *)a1 + v11) = 0;
    if ((_DWORD)a2)
    {
      v12 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 5) & ~v9;
      if (v7 < 0x7FFFFFFE)
      {
        v13 = (_QWORD *)((v10 + v12) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *v13 = 0;
          v13[1] = 0;
          *(_DWORD *)v13 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *v13 = a2;
        }
      }
      else
      {
        (*(void (**)(unint64_t, uint64_t))(v6 + 56))(v12, a2);
      }
    }
  }
  else
  {
    bzero(a1, (((v10 + ((v9 + 13) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4);
    *a1 = ~v8 + a2;
    if (v8 < a3)
      *((_BYTE *)a1 + v11) = 1;
  }
}

uint64_t instantiation function for generic protocol witness table for CallbacksPhase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CallbacksPhase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CallbacksPhase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in CallbacksPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234D15B8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234D15BB0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in CallbacksPhase.updateValue()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 40))();
}

uint64_t sub_234D15C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ChangedCallbacks.dispatch(phase:state:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = (result & 1) == 0;
  return result;
}

uint64_t objectdestroyTm_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:)(uint64_t (*a1)(_QWORD, _QWORD, char *))
{
  char *v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v1 + 2) - 8) + 80);
  return a1(*((_QWORD *)v1 + 4), *((_QWORD *)v1 + 5), &v1[(v2 + 48) & ~v2]);
}

uint64_t partial apply for closure #1 in closure #2 in ChangedCallbacks.dispatch(phase:state:)()
{
  return partial apply for closure #1 in closure #2 in ChangedCallbacks.dispatch(phase:state:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
}

uint64_t sub_234D15D9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()(a1, *(uint64_t (**)(void))(v1 + 32));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t getEnumTagSinglePayload for ChangedCallbacks.StateType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ChangedCallbacks.StateType(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_234D16104()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234D1610C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for ChangedCallbacks.StateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChangedCallbacks.StateType);
}

uint64_t CoreMaterialCache.subscript.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  int v12;

  v2 = v1;
  v3 = *(_QWORD **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *v1;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_5;
  outlined copy of Material.ID(*(_QWORD *)a1);
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
  if ((v7 & 1) == 0)
  {
    outlined consume of Material.ID((unint64_t)v3);
LABEL_5:
    v11 = v3;
    v12 = v4;
    v8 = specialized CoreMaterialCache.load(material:)((uint64_t *)&v11);
    outlined copy of Material.ID((unint64_t)v3);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = (_QWORD *)*v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, v3, v4, isUniquelyReferenced_nonNull_native);
    *v2 = (uint64_t)v11;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
LABEL_6:
  outlined consume of Material.ID((unint64_t)v3);
  return v8;
}

_QWORD *CoreMaterialCache.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  int v15;
  char v16;
  char v17;

  v2 = v1;
  v3 = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 12);
  v6 = *(unsigned __int8 *)(a1 + 13);
  v7 = *(_QWORD *)(v1 + 8);
  if (!*(_QWORD *)(v7 + 16))
  {
    v8 = v4 | (v5 << 32) | (v6 << 40);
LABEL_6:
    v14 = v3;
    v15 = v4;
    v16 = v5;
    v17 = v6;
    v11 = specialized CoreMaterialCache.loadEffects(style:)((uint64_t)&v14);
    outlined copy of Material.ID((unint64_t)v3);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, v3, v8, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 8) = v14;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined copy of Material.ID(*(_QWORD *)a1);
  v8 = v4 | (v5 << 32) | (v6 << 40);
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v8);
  if ((v10 & 1) == 0)
  {
    outlined consume of Material.ID((unint64_t)v3);
    goto LABEL_6;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(v7 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
LABEL_7:
  outlined consume of Material.ID((unint64_t)v3);
  return v11;
}

uint64_t one-time initialization function for _shared()
{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AtomicBuffer<CoreMaterialCache>, (uint64_t)&unk_250625088, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  v1 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 32) = v1;
  static CoreMaterialCache._shared = result;
  return result;
}

unint64_t ContentStyle.MaterialStyle.coreMaterialDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  id v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(v0 + 12);
  v2 = *(unsigned __int8 *)(v0 + 13);
  v3 = Material.ResolvedMaterial.coreMaterialRecipe.getter();
  v4 = (void **)MEMORY[0x24BE1E3F8];
  if (v2 != 1)
    v4 = (void **)MEMORY[0x24BE1E3E8];
  v5 = *v4;
  if (v2 != 2)
    __asm { BR              X10 }
  v6 = (id)*MEMORY[0x24BE1E418];
  v7 = v5;
  Material.ResolvedMaterial.coreMaterialOptions.getter();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = (id)MTVisualStylingCreateDictionaryRepresentation();

  if (!v9)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

id Material.ResolvedMaterial.coreMaterialRecipe.getter()
{
  uint64_t v0;
  int v1;
  id *v2;

  v1 = *(_DWORD *)(v0 + 8);
  switch(*(_QWORD *)v0)
  {
    case 0:
      if ((v1 & 1) != 0)
        v2 = (id *)MEMORY[0x24BE1E3B8];
      else
        v2 = (id *)MEMORY[0x24BE1E3C0];
      return *v2;
    case 1:
      if ((v1 & 1) != 0)
        v2 = (id *)MEMORY[0x24BE1E3A8];
      else
        v2 = (id *)MEMORY[0x24BE1E3B0];
      return *v2;
    case 2:
      if ((v1 & 1) != 0)
        v2 = (id *)MEMORY[0x24BE1E380];
      else
        v2 = (id *)MEMORY[0x24BE1E388];
      return *v2;
    case 3:
    case 4:
      if ((v1 & 1) != 0)
        v2 = (id *)MEMORY[0x24BE1E390];
      else
        v2 = (id *)MEMORY[0x24BE1E398];
      return *v2;
    case 5:
      if ((v1 & 1) != 0)
        v2 = (id *)MEMORY[0x24BE1E370];
      else
        v2 = (id *)MEMORY[0x24BE1E378];
      return *v2;
    case 6:
    case 7:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
    default:
      break;
  }
  JUMPOUT(0x23B7C5DACLL);
}

unint64_t Material.ResolvedMaterial.coreMaterialOptions.getter()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v4;
  v5 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v6;
  *(_QWORD *)(inited + 120) = v5;
  *(_BYTE *)(inited + 96) = (v2 & 2) != 0;
  v7 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v19 = v7;
  if (v1 >= 8)
  {
    v8 = *(void **)(v1 + 48);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v9;
    v12 = v10;
    if (v8)
    {
      v18 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
      *(_QWORD *)&v17 = v8;
      outlined init with take of Any(&v17, v16);
      v13 = v8;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v11, v12, isUniquelyReferenced_nonNull_native);
      v19 = v7;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)(v9, v10, &v17);
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)&v17);
    }
    return v19;
  }
  return v7;
}

unint64_t specialized static CoreMaterialCache.parseColor(_:)(uint64_t a1)
{
  unint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  __int128 v22;
  __int128 v23;

  outlined init with copy of Any?(a1, (uint64_t)&v22);
  if (!*((_QWORD *)&v23 + 1))
  {
    outlined destroy of Any?((uint64_t)&v22);
    return 0;
  }
  type metadata accessor for [String : Any]();
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  if (!*(_QWORD *)(*(_QWORD *)&v21 + 16))
    goto LABEL_17;
  v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x6168706C61, 0xE500000000000000);
  if ((v2 & 1) == 0)
    goto LABEL_17;
  outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v21 + 56) + 32 * v1, (uint64_t)&v22);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_17;
  if (*(_QWORD *)(*(_QWORD *)&v21 + 16))
  {
    v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x6574696877, 0xE500000000000000);
    if ((v4 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v21 + 56) + 32 * v3, (uint64_t)&v22);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v5 = v21;
        if (v5 <= 0.0)
          v6 = -v5;
        else
          v6 = v21;
        if (v6 <= 0.04045)
        {
          v7 = v6 * 0.077399;
        }
        else
        {
          v7 = 1.0;
          if (v6 != 1.0)
            v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
        }
        if (v5 <= 0.0)
          v17 = -v7;
        else
          v17 = v7;
        v9 = v17;
        v10 = v17;
        return LODWORD(v10) | ((unint64_t)LODWORD(v9) << 32);
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)&v21 + 16)
    && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(6579570, 0xE300000000000000), (v12 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v21 + 56) + 32 * v11, (uint64_t)&v22),
        (swift_dynamicCast() & 1) != 0)
    && *(_QWORD *)(*(_QWORD *)&v21 + 16)
    && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65657267, 0xE500000000000000), (v14 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v21 + 56) + 32 * v13, (uint64_t)&v22),
        (swift_dynamicCast() & 1) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)&v21 + 16)
      && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(1702194274, 0xE400000000000000), (v16 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v21 + 56) + 32 * v15, (uint64_t)&v22);
    }
    else
    {
      v22 = 0u;
      v23 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v23 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v18 = v21;
        v19 = v21;
        v20 = v21;
        v10 = specialized Color.Resolved.init(red:green:blue:opacity:)(v18, v19, v20);
        return LODWORD(v10) | ((unint64_t)LODWORD(v9) << 32);
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v22);
    }
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
  }
  v9 = 1.0;
  v10 = 1.0;
  return LODWORD(v10) | ((unint64_t)LODWORD(v9) << 32);
}

_QWORD *specialized CoreMaterialCache.loadEffects(style:)(uint64_t a1)
{
  int v1;
  __int16 v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _QWORD v56[10];
  _OWORD v57[5];
  _BYTE v58[48];
  _BYTE v59[32];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 8);
  v2 = *(_WORD *)(a1 + 12);
  *(_QWORD *)&v62 = *(_QWORD *)a1;
  DWORD2(v62) = v1;
  WORD6(v62) = v2;
  v3 = ContentStyle.MaterialStyle.coreMaterialDescription.getter();
  if (!*(_QWORD *)(v3 + 16)
    || (v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x737265746C6966, 0xE700000000000000), (v5 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v62),
        type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for [[String : Any]], (uint64_t (*)(uint64_t))type metadata accessor for [String : Any], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]), (swift_dynamicCast() & 1) == 0))
  {
    v54 = 0;
    v49 = 0;
    v7 = 0;
    goto LABEL_28;
  }
  v6 = *(_QWORD *)&v57[0];
  v7 = *(_QWORD *)(*(_QWORD *)&v57[0] + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v54 = 0;
    v49 = 0;
LABEL_28:
    v18 = 0;
    v8 = 0;
    v52 = 0;
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v19 = 0;
    v20 = 1;
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_32;
    goto LABEL_29;
  }
  v53 = 0;
  v54 = 0;
  v48 = 0;
  v49 = 0;
  v45 = 0;
  v8 = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v50 = 0;
  v9 = 0;
  v46 = 1;
  do
  {
    v10 = *(_QWORD *)(v6 + 8 * v9 + 32);
    if (*(_QWORD *)(v10 + 16))
    {
      swift_bridgeObjectRetain();
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
      if ((v12 & 1) == 0
        || (outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)v58),
            (swift_dynamicCast() & 1) == 0))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
      if (v60 == __PAIR128__(0x80000002352E2110, 0xD000000000000012))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
          goto LABEL_6;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v14 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000002352E2130);
        if ((v15 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v14, (uint64_t)&v60);
        }
        else
        {
          v60 = 0u;
          v61 = 0u;
        }
      }
      else
      {
        v60 = 0u;
        v61 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v61 + 1))
      {
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSValue);
        if ((swift_dynamicCast() & 1) != 0)
        {
          memset(&v58[4], 0, 20);
          *(_DWORD *)v58 = 1065353216;
          *(_DWORD *)&v58[24] = 1065353216;
          memset(&v58[28], 0, 20);
          *(_DWORD *)v59 = 1065353216;
          memset(&v59[4], 0, 20);
          *(_QWORD *)&v59[24] = 1065353216;
          objc_msgSend(v55, sel_getValue_, v58);
          if ((v46 & 1) != 0)
          {

            v45 = *(_QWORD *)&v58[16];
            v8 = *(_QWORD *)&v58[32];
            v48 = *(_QWORD *)&v58[24];
            v49 = *(_QWORD *)&v58[8];
            v53 = *(_QWORD *)&v58[40];
            v54 = *(_QWORD *)v58;
            v51 = *(_QWORD *)&v59[8];
            v52 = *(_QWORD *)v59;
            v47 = *(_QWORD *)&v59[16];
            v50 = *(_QWORD *)&v59[24];
          }
          else
          {
            *(_QWORD *)&v62 = v54;
            *((_QWORD *)&v62 + 1) = v49;
            v63 = v45;
            v64 = v48;
            v65 = v8;
            v66 = v53;
            v67 = v52;
            v68 = v51;
            v69 = v47;
            v70 = v50;
            v57[3] = *(_OWORD *)v59;
            v57[4] = *(_OWORD *)&v59[16];
            v57[1] = *(_OWORD *)&v58[16];
            v57[2] = *(_OWORD *)&v58[32];
            v57[0] = *(_OWORD *)v58;
            specialized static _ColorMatrix.* infix(_:_:)(v57, &v62, (uint64_t)v56, *(int8x16_t *)&v58[16], *(int32x4_t *)&v58[32], v16, v17);
            v45 = v56[2];
            v8 = v56[4];
            v48 = v56[3];
            v49 = v56[1];
            v53 = v56[5];
            v54 = v56[0];
            v51 = v56[7];
            v52 = v56[6];
            v47 = v56[8];
            v50 = v56[9];

          }
          v46 = 0;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v60);
      }
    }
LABEL_7:
    ++v9;
  }
  while (v7 != v9);
  swift_bridgeObjectRelease();
  v7 = v45;
  v19 = v47;
  v18 = v48;
  v20 = v46;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_32:
    v60 = 0u;
    v61 = 0u;
    goto LABEL_33;
  }
LABEL_29:
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6C6F43746E6974, 0xE900000000000072);
  if ((v22 & 1) == 0)
    goto LABEL_32;
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v21, (uint64_t)&v60);
LABEL_33:
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v61 + 1))
  {
    outlined destroy of Any?((uint64_t)&v60);
    v23 = 0;
    v25 = 0;
LABEL_43:
    v29 = 1;
    if ((v20 & 1) == 0)
      goto LABEL_55;
    goto LABEL_44;
  }
  outlined init with take of Any(&v60, v58);
  outlined init with copy of Any((uint64_t)v58, (uint64_t)&v60);
  v23 = specialized static CoreMaterialCache.parseColor(_:)((uint64_t)&v60);
  v25 = v24;
  v27 = v26;
  outlined destroy of Any?((uint64_t)&v60);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  if ((v27 & 1) != 0)
    goto LABEL_43;
  v28 = HIDWORD(v23);
  if (*(float *)&v23 != 1.0 || *((float *)&v23 + 1) != 1.0 || *(float *)&v25 != 1.0)
  {
    if ((v20 & 1) == 0)
      goto LABEL_55;
LABEL_48:
    if (*(float *)&v23 == 1.0 && *(float *)&v28 == 1.0 && *(float *)&v25 == 1.0)
    {
      v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (*((float *)&v25 + 1) == 1.0)
        return v30;
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v32 = v30[2];
      v31 = v30[3];
      if (v32 >= v31 >> 1)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
      v30[2] = v32 + 1;
      v33 = &v30[2 * v32];
      v33[4] = HIDWORD(v25);
      v34 = v33 + 4;
      v35 = 4;
    }
    else
    {
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = v23;
      *(_QWORD *)(v40 + 24) = v25;
      *(_OWORD *)(v40 + 32) = 0u;
      *(_OWORD *)(v40 + 48) = 0u;
      *(_OWORD *)(v40 + 64) = 0u;
      *(_OWORD *)(v40 + 80) = 0u;
      *(_OWORD *)(v40 + 96) = 0u;
      *(_OWORD *)(v40 + 112) = 0u;
      *(_DWORD *)(v40 + 128) = 0;
      *(_BYTE *)(v40 + 132) = 5;
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v42 = v30[2];
      v41 = v30[3];
      if (v42 >= v41 >> 1)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v30);
      v30[2] = v42 + 1;
      v43 = &v30[2 * v42];
      v43[4] = v40;
      v34 = v43 + 4;
LABEL_61:
      v35 = 9;
    }
    *((_DWORD *)v34 + 2) = 0;
    *((_BYTE *)v34 + 12) = v35;
    return v30;
  }
  v29 = *((float *)&v25 + 1) == 1.0;
  if (*((float *)&v25 + 1) == 1.0)
  {
    v23 = 0;
    v25 = 0;
  }
  if ((v20 & 1) == 0)
  {
LABEL_55:
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = v54;
    *(_QWORD *)(v36 + 24) = v49;
    *(_QWORD *)(v36 + 32) = v7;
    *(_QWORD *)(v36 + 40) = v18;
    *(_QWORD *)(v36 + 48) = v8;
    *(_QWORD *)(v36 + 56) = v53;
    *(_QWORD *)(v36 + 64) = v52;
    *(_QWORD *)(v36 + 72) = v51;
    *(_QWORD *)(v36 + 80) = v19;
    *(_QWORD *)(v36 + 88) = v50;
    *(_BYTE *)(v36 + 132) = 12;
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v38 = v30[2];
    v37 = v30[3];
    if (v38 >= v37 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v30);
    v30[2] = v38 + 1;
    v39 = &v30[2 * v38];
    v39[4] = v36;
    v34 = v39 + 4;
    goto LABEL_61;
  }
LABEL_44:
  if (!v29)
  {
    v28 = HIDWORD(v23);
    goto LABEL_48;
  }
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t sub_234D173F4()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

void type metadata accessor for (String, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
  }
}

uint64_t specialized CoreMaterialCache.load(material:)(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  id v3;
  Class isa;
  id v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  float v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char v37;
  double v38;
  unint64_t v39;
  char v40;
  int v41;
  unint64_t v42;
  char v43;
  double v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  CGImage *v57;
  int64_t Height;
  CGImage *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  double v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  unsigned int v70;
  double v71;
  double v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  float v91;
  float v92;
  double v93;
  float v94;
  unsigned int v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  float v100;
  float v101;
  double v102;
  float v103;
  float v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  float v108;
  float v109;
  double v110;
  float v111;
  float v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  float v116;
  float v117;
  double v118;
  float v119;
  float v120;
  unint64_t v121;
  float v122;
  float v123;
  double v124;
  float v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  int8x16_t *v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int v135;
  _QWORD *v136;
  int8x16_t v137;
  char v138;
  unint64_t v139;
  char v140;
  id v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  uint64_t v152;
  float v153;
  int32x2_t v154;
  float v155;
  unint64_t v156;
  float v157;
  int32x2_t v158;
  float v159;
  unint64_t v160;
  int v161;
  float v162;
  int32x2_t v163;
  int64_t Width;
  double v165;
  float v166;
  float v167;
  unint64_t v168;
  CGImage *v169;
  float v170;
  float v171;
  float v172;
  float v173;
  int32x2_t v174;
  float v175;
  unint64_t v176;
  int v177;
  CGImage *v178;
  uint64_t v179;
  float v180;
  int32x2_t v181;
  unint64_t v182;
  float v183;
  char v184[32];
  id v185[5];
  _BYTE v186[48];
  _BYTE v187[32];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = *((_DWORD *)a1 + 2);
  v3 = Material.ResolvedMaterial.coreMaterialRecipe.getter();
  *(_QWORD *)&v190 = v1;
  DWORD2(v190) = v2;
  Material.ResolvedMaterial.coreMaterialOptions.getter();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = (id)MTMaterialCreateDictionaryRepresentation();

  if (!v5)
    __break(1u);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_10;
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x737265746C6966, 0xE700000000000000);
  if ((v8 & 1) == 0)
    goto LABEL_10;
  outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v190);
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for [[String : Any]], (uint64_t (*)(uint64_t))type metadata accessor for [String : Any], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_10;
  if ((v2 & 0x80) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = 0.0;
    goto LABEL_20;
  }
  if ((v2 & 0x20) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = 1.0;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v6 + 16)
    && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C616373, 0xE500000000000000), (v10 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v190);
  }
  else
  {
    v190 = 0u;
    v191 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v191 + 1))
  {
    if (swift_dynamicCast())
    {
      v13 = *(double *)v186;
      goto LABEL_20;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v190);
  }
  v13 = 0.25;
LABEL_20:
  v14 = *(_QWORD *)(*(_QWORD *)v186 + 16);
  if (!v14)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
    swift_bridgeObjectRelease();
    if (v16[2])
    {
      v17 = swift_allocObject();
      *(float *)(v17 + 16) = v13;
      *(_QWORD *)(v17 + 28) = 0;
      *(_QWORD *)(v17 + 20) = 0;
      *(_QWORD *)(v17 + 40) = v16;
      if (one-time initialization token for normal != -1)
        swift_once();
      v18 = static GraphicsBlendMode.normal;
      v19 = byte_254266040;
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyMaterialLayer>, (uint64_t)&type metadata for AnyMaterialLayer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_23527E860;
      *(_QWORD *)(v11 + 32) = v17;
      *(_DWORD *)(v11 + 40) = 1065353216;
      *(_QWORD *)(v11 + 48) = v18;
      *(_BYTE *)(v11 + 56) = v19;
      outlined copy of GraphicsBlendMode(v18, v19);
      return v11;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v15 = *(_QWORD *)v186 + 32;
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v20 = *(_QWORD *)v15;
    if (!*(_QWORD *)(*(_QWORD *)v15 + 16))
      goto LABEL_30;
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
    if ((v22 & 1) == 0)
      goto LABEL_29;
    outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v21, (uint64_t)v186);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_29;
    v23 = v188;
    if (v188 == __PAIR128__(0xED00006574617275, 0x746153726F6C6F63)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v20 + 16)
        && (v24 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6D417475706E69, 0xEB00000000746E75),
            (v25 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v24, (uint64_t)v186);
      }
      else
      {
        memset(v186, 0, 32);
      }
      swift_bridgeObjectRelease();
      if (*(_QWORD *)&v186[24])
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v26 = v188;
          if (*(double *)&v188 != 1.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
            v28 = v16[2];
            v27 = v16[3];
            if (v28 >= v27 >> 1)
              v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v16);
            v16[2] = v28 + 1;
            v29 = &v16[15 * v28];
            v29[4] = v26;
            *(_OWORD *)(v29 + 5) = 0u;
            *(_OWORD *)(v29 + 7) = 0u;
            *(_OWORD *)(v29 + 9) = 0u;
            *(_OWORD *)(v29 + 11) = 0u;
            *(_OWORD *)(v29 + 13) = 0u;
            *(_OWORD *)(v29 + 15) = 0u;
            *(_OWORD *)((char *)v29 + 132) = 0u;
            *((_BYTE *)v29 + 148) = 7;
          }
        }
        goto LABEL_30;
      }
      goto LABEL_62;
    }
    if (v23 == __PAIR128__(0xEF7373656E746867, 0x697242726F6C6F63)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v20 + 16)
        && (v30 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6D417475706E69, 0xEB00000000746E75),
            (v31 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v30, (uint64_t)v186);
      }
      else
      {
        memset(v186, 0, 32);
      }
      swift_bridgeObjectRelease();
      if (*(_QWORD *)&v186[24])
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v32 = v188;
          if (*(double *)&v188 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
            v34 = v16[2];
            v33 = v16[3];
            if (v34 >= v33 >> 1)
              v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v16);
            v16[2] = v34 + 1;
            v35 = &v16[15 * v34];
            v35[4] = v32;
            *(_OWORD *)(v35 + 5) = 0u;
            *(_OWORD *)(v35 + 7) = 0u;
            *(_OWORD *)(v35 + 9) = 0u;
            *(_OWORD *)(v35 + 11) = 0u;
            *(_OWORD *)(v35 + 13) = 0u;
            *(_OWORD *)(v35 + 15) = 0u;
            *(_OWORD *)((char *)v35 + 132) = 0u;
            *((_BYTE *)v35 + 148) = 8;
          }
        }
        goto LABEL_30;
      }
LABEL_62:
      outlined destroy of Any?((uint64_t)v186);
      goto LABEL_30;
    }
    if (v23 == __PAIR128__(0xEC00000072756C42, 0x6E61697373756167)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if ((v2 & 0x20) == 0)
      {
        if (*(_QWORD *)(v20 + 16))
        {
          v36 = specialized __RawDictionaryStorage.find<A>(_:)(0x6461527475706E69, 0xEB00000000737569);
          if ((v37 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v36, (uint64_t)v186);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v38 = *(double *)&v188;
              if (*(_QWORD *)(v20 + 16)
                && (v39 = specialized __RawDictionaryStorage.find<A>(_:)(0x7469447475706E69, 0xEB00000000726568),
                    (v40 & 1) != 0)
                && (outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v39, (uint64_t)v186),
                    swift_dynamicCast()))
              {
                v41 = v188;
              }
              else
              {
                v41 = 0;
              }
              if (*(_QWORD *)(v20 + 16)
                && (v47 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x80000002352E2200),
                    (v48 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v47, (uint64_t)v186);
              }
              else
              {
                memset(v186, 0, 32);
              }
              swift_bridgeObjectRelease();
              if (*(_QWORD *)&v186[24])
              {
                if (swift_dynamicCast())
                {
                  v49 = v188;
                  goto LABEL_101;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)v186);
              }
              v49 = 0;
LABEL_101:
              if (v38 > 0.0)
              {
                v177 = v41;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
                v54 = v16[2];
                v53 = v16[3];
                if (v54 >= v53 >> 1)
                  v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v16);
                v16[2] = v54 + 1;
                v55 = &v16[15 * v54];
                *((double *)v55 + 4) = v38;
                v56 = 256;
                if (!v177)
                  v56 = 0;
                v55[5] = v56 | v49;
                *((_OWORD *)v55 + 3) = 0u;
                *((_OWORD *)v55 + 4) = 0u;
                *((_OWORD *)v55 + 5) = 0u;
                *((_OWORD *)v55 + 6) = 0u;
                *((_OWORD *)v55 + 7) = 0u;
                *((_OWORD *)v55 + 8) = 0u;
                *(_QWORD *)((char *)v55 + 141) = 0;
              }
              goto LABEL_30;
            }
          }
        }
      }
      goto LABEL_29;
    }
    if (v23 == __PAIR128__(0xEC00000072756C42, 0x656C626169726176)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if ((v2 & 0x20) == 0)
      {
        if (*(_QWORD *)(v20 + 16))
        {
          v42 = specialized __RawDictionaryStorage.find<A>(_:)(0x6461527475706E69, 0xEB00000000737569);
          if ((v43 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v42, (uint64_t)v186);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v44 = *(double *)&v188;
              if (*(_QWORD *)(v20 + 16)
                && (v45 = specialized __RawDictionaryStorage.find<A>(_:)(0x73614D7475706E69, 0xEE006567616D496BLL),
                    (v46 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v45, (uint64_t)v186);
              }
              else
              {
                memset(v186, 0, 32);
              }
              outlined init with copy of Any?((uint64_t)v186, (uint64_t)&v188);
              if (*((_QWORD *)&v189 + 1))
              {
                outlined init with take of Any(&v188, v185);
                outlined init with copy of Any((uint64_t)v185, (uint64_t)v184);
                type metadata accessor for CGImageRef(0);
                swift_dynamicCast();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
                v57 = (CGImage *)v185[4];
                outlined destroy of Any?((uint64_t)v186);
                if (v57)
                {
                  Width = CGImageGetWidth(v57);
                  Height = CGImageGetHeight(v57);
                  v59 = v57;
                  v60 = *(_QWORD *)(v20 + 16);
                  v178 = v59;
                  v169 = v59;
                  if (v60
                    && (v61 = specialized __RawDictionaryStorage.find<A>(_:)(0x7469447475706E69, 0xEB00000000726568),
                        (v62 & 1) != 0)
                    && (outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v61, (uint64_t)v186),
                        swift_dynamicCast()))
                  {
                    v161 = v188;
                  }
                  else
                  {
                    v161 = 0;
                  }
                  if (*(_QWORD *)(v20 + 16)
                    && (v68 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x80000002352E2200),
                        (v69 & 1) != 0))
                  {
                    outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v68, (uint64_t)v186);
                  }
                  else
                  {
                    memset(v186, 0, 32);
                  }
                  swift_bridgeObjectRelease();
                  if (*(_QWORD *)&v186[24])
                  {
                    if (swift_dynamicCast())
                    {
                      v70 = v188;
                      goto LABEL_137;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)v186);
                  }
                  v70 = 0;
LABEL_137:
                  v71 = (double)Width;
                  v72 = v44 + v44;
                  if (v72 <= 0.0)
                  {
                    outlined consume of VariableBlurStyle.Mask(v178, 0, 0x3FF0000000000000, COERCE__INT64((double)Width), COERCE__INT64((double)Height), 0, 0, 0x100000000, 0, 0, 0, 0, 2, 1u);

                  }
                  else
                  {
                    v165 = (double)Width;
                    outlined copy of GraphicsImage.Contents?(v178, 0);
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
                    v74 = v16[2];
                    v73 = v16[3];
                    if (v74 >= v73 >> 1)
                      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v73 > 1), v74 + 1, 1, v16);
                    v16[2] = v74 + 1;
                    v75 = &v16[15 * v74];
                    *((double *)v75 + 4) = v72;
                    v76 = 256;
                    if (!v161)
                      v76 = 0;
                    v75[5] = v76 | v70;
                    v75[6] = v178;
                    *(_OWORD *)(v75 + 7) = xmmword_23528A280;
                    *((double *)v75 + 9) = v71;
                    *((double *)v75 + 10) = (double)Height;
                    *(_OWORD *)(v75 + 11) = 0u;
                    v75[13] = 0x100000000;
                    *((_OWORD *)v75 + 7) = 0u;
                    *((_OWORD *)v75 + 8) = 0u;
                    *((_DWORD *)v75 + 36) = 50397442;
                    *((_BYTE *)v75 + 148) = 1;

                    outlined consume of VariableBlurStyle.Mask(v178, 0, 0x3FF0000000000000, *(uint64_t *)&v165, COERCE__INT64((double)Height), 0, 0, 0x100000000, 0, 0, 0, 0, 2, 1u);
                  }
                  goto LABEL_30;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)v186);
              }
            }
          }
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    if (v23 == __PAIR128__(0xEC000000726F6C6FLL, 0x4365676172657661)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v2 & 0x20) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        v51 = v16[2];
        v50 = v16[3];
        if (v51 >= v50 >> 1)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, v16);
        v16[2] = v51 + 1;
        v52 = &v16[15 * v51];
        *((_OWORD *)v52 + 2) = 0u;
        *((_OWORD *)v52 + 3) = 0u;
        *((_OWORD *)v52 + 4) = 0u;
        *((_OWORD *)v52 + 5) = 0u;
        *((_OWORD *)v52 + 6) = 0u;
        *((_OWORD *)v52 + 7) = 0u;
        *((_OWORD *)v52 + 8) = 0u;
        *((_DWORD *)v52 + 36) = 0;
        *((_BYTE *)v52 + 148) = 16;
      }
      goto LABEL_30;
    }
    if (v23 == __PAIR128__(0x80000002352E21A0, 0xD000000000000011)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v20 + 16))
      {
        v63 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6D417475706E69, 0xEB00000000746E75);
        if ((v64 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v63, (uint64_t)v186);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v65 = *(double *)&v188;
            if (*(_QWORD *)(v20 + 16)
              && (v66 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C61567475706E69, 0xEB00000000736575),
                  (v67 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v66, (uint64_t)v186);
            }
            else
            {
              memset(v186, 0, 32);
            }
            swift_bridgeObjectRelease();
            if (*(_QWORD *)&v186[24])
            {
              type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
              if ((swift_dynamicCast() & 1) != 0)
              {
                result = v188;
                v90 = *(_QWORD *)(v188 + 16);
                if (!v90)
                  goto LABEL_252;
                if (v90 == 1)
                  goto LABEL_253;
                if (v90 < 3)
                  goto LABEL_254;
                if (v90 == 3)
                  goto LABEL_255;
                v91 = *(double *)(v188 + 32);
                v170 = v91;
                v92 = *(double *)(v188 + 40);
                v180 = v92;
                v93 = *(double *)(v188 + 56);
                v94 = *(double *)(v188 + 48);
                v166 = v94;
                swift_bridgeObjectRelease();
                *(float *)&v95 = v93;
                v181 = (int32x2_t)__PAIR64__(v95, LODWORD(v180));
                v96 = __PAIR64__(LODWORD(v166), LODWORD(v170));
                goto LABEL_215;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)v186);
            }
            v96 = 0x3F80000000000000;
            v181 = (int32x2_t)0x3F80000000000000;
LABEL_215:
            v176 = v96;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
            v134 = v16[2];
            v133 = v16[3];
            if (v134 >= v133 >> 1)
              v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v133 > 1), v134 + 1, 1, v16);
            *(float *)&v135 = v65;
            v16[2] = v134 + 1;
            v136 = &v16[15 * v134];
            v137.i64[0] = v176;
            v137.i64[1] = HIDWORD(v176);
            *((int8x16_t *)v136 + 2) = vorrq_s8((int8x16_t)vshll_n_s32(v181, 0x20uLL), v137);
            v136[6] = v135;
            *(_OWORD *)(v136 + 7) = 0u;
            *(_OWORD *)(v136 + 9) = 0u;
            *(_OWORD *)(v136 + 11) = 0u;
            *(_OWORD *)(v136 + 13) = 0u;
            *(_OWORD *)(v136 + 15) = 0u;
            *(_OWORD *)((char *)v136 + 132) = 0u;
            *((_BYTE *)v136 + 148) = 13;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_29;
    }
    if (v23 != __PAIR128__(0xE600000000000000, 0x736576727563)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v23 == __PAIR128__(0xEB00000000786972, 0x74614D726F6C6F63))
      {
        swift_bridgeObjectRelease();
LABEL_221:
        if (*(_QWORD *)(v20 + 16)
          && (v139 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000002352E2130),
              (v140 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v139, (uint64_t)&v188);
        }
        else
        {
          v188 = 0u;
          v189 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v189 + 1))
        {
          type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSValue);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v141 = v185[0];
            *(_OWORD *)&v186[4] = 0uLL;
            *(_QWORD *)&v186[20] = 0x3F80000000000000;
            *(_DWORD *)v186 = 1065353216;
            memset(&v186[28], 0, 20);
            *(_DWORD *)v187 = 1065353216;
            memset(&v187[4], 0, 20);
            *(_QWORD *)&v187[24] = 1065353216;
            objc_msgSend(v185[0], sel_getValue_, v186);
            v192 = *(_OWORD *)&v186[32];
            v193 = *(_OWORD *)v187;
            v194 = *(_OWORD *)&v187[16];
            v190 = *(_OWORD *)v186;
            v191 = *(_OWORD *)&v186[16];
            v142 = *(_OWORD *)v186;
            v143 = *(_OWORD *)&v186[16];
            v144 = *(_OWORD *)&v186[32];
            v145 = *(_OWORD *)v187;
            v150 = *(_QWORD *)&v187[24];
            v152 = *(_QWORD *)&v187[16];
            if (!_ColorMatrix.isIdentity.getter())
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
              v147 = v16[2];
              v146 = v16[3];
              if (v147 >= v146 >> 1)
                v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v146 > 1), v147 + 1, 1, v16);
              v16[2] = v147 + 1;
              v148 = &v16[15 * v147];
              *((_OWORD *)v148 + 2) = v142;
              *((_OWORD *)v148 + 3) = v143;
              *((_OWORD *)v148 + 4) = v144;
              *((_OWORD *)v148 + 5) = v145;
              v148[12] = v152;
              v148[13] = v150;
              v149 &= 0xFFFFFFFFFFFFFF00;
              v148[14] = v149;
              *((_BYTE *)v148 + 148) = 4;
            }

          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v188);
        }
        goto LABEL_30;
      }
      v138 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v138 & 1) != 0)
        goto LABEL_221;
      goto LABEL_29;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v20 + 16)
      && (v77 = specialized __RawDictionaryStorage.find<A>(_:)(0x6465527475706E69, 0xEE007365756C6156),
          (v78 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v77, (uint64_t)v186);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      v79 = swift_dynamicCast() ? v188 : 0;
    }
    else
    {
      v79 = 0;
    }
    if (*(_QWORD *)(v20 + 16)
      && (v80 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000002352E21C0),
          (v81 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v80, (uint64_t)v186);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      v82 = swift_dynamicCast() ? v188 : 0;
    }
    else
    {
      v82 = 0;
    }
    if (*(_QWORD *)(v20 + 16)
      && (v83 = specialized __RawDictionaryStorage.find<A>(_:)(0x756C427475706E69, 0xEF7365756C615665),
          (v84 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v83, (uint64_t)v186);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      v85 = swift_dynamicCast();
      v86 = v188;
      if (!v85)
        v86 = 0;
      v179 = v86;
    }
    else
    {
      v179 = 0;
    }
    if (*(_QWORD *)(v20 + 16)
      && (v87 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000002352E21E0),
          (v88 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v87, (uint64_t)v186);
    }
    else
    {
      memset(v186, 0, 32);
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)&v186[24])
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      result = swift_dynamicCast();
      v89 = (_DWORD)result ? v188 : 0;
    }
    else
    {
      result = outlined destroy of Any?((uint64_t)v186);
      v89 = 0;
    }
    v97 = 0x3F80000000000000;
    v98 = 0x3F80000000000000;
    if (v79)
      break;
LABEL_188:
    v163 = (int32x2_t)v97;
    v168 = v98;
    v105 = 0x3F80000000000000;
    v106 = 0x3F80000000000000;
    if (v82)
    {
      v107 = *(_QWORD *)(v82 + 16);
      if (!v107)
        goto LABEL_240;
      if (v107 == 1)
        goto LABEL_241;
      if (v107 < 3)
        goto LABEL_242;
      if (v107 == 3)
        goto LABEL_243;
      v108 = *(double *)(v82 + 32);
      v159 = v108;
      v109 = *(double *)(v82 + 40);
      v157 = v109;
      v110 = *(double *)(v82 + 56);
      v111 = *(double *)(v82 + 48);
      v172 = v111;
      result = swift_bridgeObjectRelease();
      *(float *)&v105 = v157;
      v112 = v110;
      *((float *)&v105 + 1) = v112;
      v106 = __PAIR64__(LODWORD(v172), LODWORD(v159));
    }
    v158 = (int32x2_t)v105;
    v160 = v106;
    v113 = 0x3F80000000000000;
    v114 = 0x3F80000000000000;
    if (v179)
    {
      v115 = *(_QWORD *)(v179 + 16);
      if (!v115)
        goto LABEL_244;
      if (v115 == 1)
        goto LABEL_245;
      if (v115 < 3)
        goto LABEL_246;
      if (v115 == 3)
        goto LABEL_247;
      v116 = *(double *)(v179 + 32);
      v155 = v116;
      v117 = *(double *)(v179 + 40);
      v153 = v117;
      v118 = *(double *)(v179 + 56);
      v119 = *(double *)(v179 + 48);
      v173 = v119;
      result = swift_bridgeObjectRelease();
      *(float *)&v113 = v153;
      v120 = v118;
      *((float *)&v113 + 1) = v120;
      v114 = __PAIR64__(LODWORD(v173), LODWORD(v155));
    }
    v154 = (int32x2_t)v113;
    v156 = v114;
    v174 = (int32x2_t)0x3F80000000000000;
    v182 = 0x3F80000000000000;
    if (v89)
    {
      v121 = *(_QWORD *)(v89 + 16);
      if (!v121)
        goto LABEL_248;
      if (v121 == 1)
        goto LABEL_249;
      if (v121 < 3)
        goto LABEL_250;
      if (v121 == 3)
        goto LABEL_251;
      v122 = *(double *)(v89 + 32);
      v183 = v122;
      v123 = *(double *)(v89 + 40);
      v175 = v123;
      v124 = *(double *)(v89 + 56);
      v125 = *(double *)(v89 + 48);
      v151 = v125;
      swift_bridgeObjectRelease();
      *(float *)&v126 = v124;
      v174 = (int32x2_t)__PAIR64__(v126, LODWORD(v175));
      v182 = __PAIR64__(LODWORD(v151), LODWORD(v183));
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v128 = v16[2];
    v127 = v16[3];
    if (v128 >= v127 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v127 > 1), v128 + 1, 1, v16);
    v16[2] = v128 + 1;
    v129 = (int8x16_t *)&v16[15 * v128];
    v130.i64[0] = v168;
    v130.i64[1] = HIDWORD(v168);
    v131 = vorrq_s8((int8x16_t)vshll_n_s32(v163, 0x20uLL), v130);
    v130.i64[0] = v160;
    v130.i64[1] = HIDWORD(v160);
    v129[2] = v131;
    v129[3] = vorrq_s8((int8x16_t)vshll_n_s32(v158, 0x20uLL), v130);
    v130.i64[0] = v156;
    v130.i64[1] = HIDWORD(v156);
    v132 = vorrq_s8((int8x16_t)vshll_n_s32(v154, 0x20uLL), v130);
    v130.i64[0] = v182;
    v130.i64[1] = HIDWORD(v182);
    v129[4] = v132;
    v129[5] = vorrq_s8((int8x16_t)vshll_n_s32(v174, 0x20uLL), v130);
    v129[9].i8[4] = 14;
LABEL_30:
    v15 += 8;
    if (!--v14)
      goto LABEL_23;
  }
  v99 = *(_QWORD *)(v79 + 16);
  if (v99)
  {
    if (v99 == 1)
      goto LABEL_237;
    if (v99 < 3)
      goto LABEL_238;
    if (v99 == 3)
      goto LABEL_239;
    v100 = *(double *)(v79 + 32);
    v167 = v100;
    v101 = *(double *)(v79 + 40);
    v162 = v101;
    v102 = *(double *)(v79 + 56);
    v103 = *(double *)(v79 + 48);
    v171 = v103;
    result = swift_bridgeObjectRelease();
    *(float *)&v97 = v162;
    v104 = v102;
    *((float *)&v97 + 1) = v104;
    v98 = __PAIR64__(LODWORD(v171), LODWORD(v167));
    goto LABEL_188;
  }
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
LABEL_243:
  __break(1u);
LABEL_244:
  __break(1u);
LABEL_245:
  __break(1u);
LABEL_246:
  __break(1u);
LABEL_247:
  __break(1u);
LABEL_248:
  __break(1u);
LABEL_249:
  __break(1u);
LABEL_250:
  __break(1u);
LABEL_251:
  __break(1u);
LABEL_252:
  __break(1u);
LABEL_253:
  __break(1u);
LABEL_254:
  __break(1u);
LABEL_255:
  __break(1u);
  return result;
}

uint64_t sub_234D18EC4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void *type metadata accessor for CoreMaterialCache()
{
  return &unk_250625088;
}

uint64_t ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t result;
  double v21;
  _BYTE v22[7];
  char v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *a1;
  ResolvedStyledText.schedule.getter((uint64_t)v24);
  v16 = v25;
  if (v25)
  {
    v17 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v23 = a3 & 1;
    TimelineSchedule.nextEntry(after:mode:)(a2, &v23, v16, v17, (uint64_t)v10);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v14, v10, v11);
      Date.timeIntervalSince(_:)();
      v19 = v18;
      result = (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
      v21 = v15 + v19;
      goto LABEL_8;
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  result = outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  if (one-time initialization token for infinity != -1)
    result = swift_once();
  v21 = *(double *)&static Time.infinity;
LABEL_8:
  *a4 = v21;
  return result;
}

BOOL ResolvedStyledText.isEmpty.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 192);
  return !v1 || objc_msgSend(v1, sel_length) == 0;
}

uint64_t ResolvedStyledText.updatesAsynchronously.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _OWORD v4[2];

  v1 = *(void **)(v0 + 192);
  if (v1 && (uint64_t)objc_msgSend(*(id *)(v0 + 192), sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1)
      swift_once();
    v2 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v1, sel_length);
    if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      return *(_BYTE *)(v0 + 232) & 1;
    }
    memset(v4, 0, sizeof(v4));
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
  return 0;
}

uint64_t ResolvedStyledText.draw(in:with:applyingMarginOffsets:context:renderer:)(char a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  _QWORD *v9;
  BOOL v19;

  if (v9[24])
    v19 = NSAttributedString.isDynamic.getter();
  else
    v19 = 0;
  return (*(uint64_t (**)(_QWORD, BOOL, uint64_t, uint64_t, double, double, double, double, double, double))(*v9 + 288))(a1 & 1, v19, a2, a3, a4, a5, a6, a7, a8, a9);
}

_QWORD *ResolvedTextHelper.resolve(_:with:sizeFitting:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, int a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t WeakValue;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  unsigned int v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char v91;
  char v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  char v110;
  double v111;
  double v112;
  double v113;
  double v114;
  char v115;
  uint64_t v116;
  _BYTE *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  int v152;
  char v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  char v162;
  uint64_t v163;
  int *v164;
  _QWORD *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(uint64_t, uint64_t, uint64_t);
  void (*v174)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  int v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t Update;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _QWORD *v207;
  unsigned __int8 v208;
  __int16 v209;
  char v210[10];
  __int128 v211;
  unint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _BYTE v225[64];
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;

  v191 = a6;
  v204 = a3;
  v205 = a1;
  v206 = (char *)a2;
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x24BDAC7A8](Update);
  v180 = (char *)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Date?, Date?)();
  v177 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v178 = (uint64_t)&v171 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Date??, Date??)(0);
  v182 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v192 = (char *)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date??(0);
  MEMORY[0x24BDAC7A8](v14);
  v181 = (uint64_t)&v171 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v193 = (uint64_t)&v171 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v185 = (uint64_t)&v171 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v186 = (uint64_t)&v171 - v21;
  v22 = type metadata accessor for ResolvedTextHelper(0);
  MEMORY[0x24BDAC7A8](v22);
  v187 = (uint64_t)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v194 = (uint64_t)&v171 - v25;
  v199 = type metadata accessor for Date();
  v202 = *(_QWORD *)(v199 - 8);
  MEMORY[0x24BDAC7A8](v199);
  v175 = (char *)&v171 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v201 = (char *)&v171 - v28;
  type metadata accessor for Date?(0);
  v200 = v29;
  v188 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v176 = (uint64_t)&v171 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v179 = (uint64_t)&v171 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v190 = (char *)&v171 - v34;
  MEMORY[0x24BDAC7A8](v35);
  v197 = (char *)&v171 - v36;
  MEMORY[0x24BDAC7A8](v37);
  v196 = (char *)&v171 - v38;
  MEMORY[0x24BDAC7A8](v39);
  v189 = (uint64_t)&v171 - v40;
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v171 - v42;
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v171 - v45;
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v171 - v48;
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)&v171 - v51;
  v53 = *a5;
  v54 = v6;
  v55 = *(char **)(v6 + 40);
  PropertyList.Tracker.reset()();
  v207 = a4;
  if (a4)
  {
    v195 = v22;
    v203 = (_QWORD *)v54;
    v204 &= 1u;
    if (v53)
    {
      v56 = v53;
      v57 = *(_QWORD *)(v53 + 64);
    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
    v58 = *((_QWORD *)v55 + 2);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v205, (uint64_t)v206, v204);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v58 + 16));
    *(_QWORD *)(v58 + 24) = v57;
    os_unfair_lock_unlock((os_unfair_lock_t)(v58 + 16));
    swift_release();
    swift_release();
    swift_release();
    v228 = v56;
    v229 = v55;
    v59 = v203;
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TypesettingLanguage(WeakValue, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined init with copy of TypesettingLanguage((uint64_t)v52, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined init with copy of TypesettingLanguage((uint64_t)v49, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined init with copy of TypesettingLanguage((uint64_t)v46, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      swift_retain_n();
      specialized closure #1 in PropertyList.subscript.setter(&v228, (uint64_t)v43);
      swift_release();
      outlined destroy of TypesettingConfiguration((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v55 = v229;
      if (v229)
      {
        v61 = v228;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v56, v61);
        swift_release();
        swift_release();
        swift_release();
        v56 = v61;
      }
      else
      {
        swift_release();
        v56 = v228;
      }
      v62 = v195;
      outlined destroy of TypesettingConfiguration((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined destroy of TypesettingConfiguration((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined destroy of TypesettingConfiguration((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    }
    else
    {
      v62 = v195;
    }
    v63 = *(_QWORD *)((char *)v59 + *(int *)(v62 + 60));
    if (v63)
    {
      swift_retain_n();
      specialized closure #1 in PropertyList.subscript.setter(&v228, v63);
      swift_release();
      v55 = v229;
      v184 = 0;
      if (v229)
      {
        v64 = v228;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v56, v64);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        v64 = v228;
      }
    }
    else
    {
      v184 = 0;
      v64 = v56;
    }
    v65 = v59[6];
    v66 = v59[7];
    v67 = v59[8];
    v68 = v59[9];
    v70 = v204;
    v69 = v205;
    v59[6] = v205;
    v71 = v59;
    v73 = (uint64_t)v206;
    v72 = v207;
    v71[7] = v206;
    v71[8] = v70;
    v71[9] = v72;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v69, v73, v70);
    outlined consume of Text?(v65, v66, v67, v68);
    swift_retain_n();
    if (v55)
    {
      swift_retain_n();
      v74 = v189;
      specialized PropertyList.Tracker.value<A>(_:for:)(v64, v189);
      swift_release_n();
      v75 = v199;
      v77 = v201;
      v76 = v202;
      v78 = (uint64_t)v196;
      v79 = (uint64_t)v190;
      v80 = v184;
    }
    else
    {
      v74 = v189;
      v81 = v64;
      v80 = v184;
      specialized closure #1 in PropertyList.subscript.getter(v81, v189);
      swift_release();
      v75 = v199;
      v77 = v201;
      v76 = v202;
      v78 = (uint64_t)v196;
      v79 = (uint64_t)v190;
    }
    swift_release_n();
    v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
    v83 = v82(v74, 1, v75);
    v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
    if (v83 == 1)
    {
      static Date.now.getter();
      outlined destroy of TypesettingConfiguration(v74, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v77, v74, v75);
    }
    v84 = (uint64_t)v197;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v78, v77, v75);
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
    v85(v78, 0, 1, v75);
    outlined init with copy of TypesettingLanguage(v78, v84, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v86 = v228;
    outlined init with copy of TypesettingLanguage(v84, v79, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(&v228, v79);
    swift_release();
    outlined destroy of TypesettingConfiguration(v79, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v87 = v229;
    v174 = v85;
    if (v229)
    {
      v88 = v228;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v86, v88);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      v88 = v228;
    }
    outlined destroy of TypesettingConfiguration(v84, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    outlined destroy of TypesettingConfiguration(v78, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    LODWORD(v84) = *((unsigned __int8 *)v203 + 12);
    if ((_DWORD)v84 == 1)
    {
      *(_QWORD *)&v224 = 0;
      *(_QWORD *)&v223 = 0;
      v222 = 0uLL;
      BYTE8(v223) = 0;
      BYTE8(v224) = 5;
      *(_QWORD *)v225 = v88;
      *(_QWORD *)&v225[8] = v87;
      memset(&v225[16], 0, 40);
      v225[56] = 1;
      *(_WORD *)&v225[57] = 1;
      swift_retain();
      swift_retain();
      specialized ForegroundStyle._apply(to:)((uint64_t)&v222);
      v89 = v224;
      if (!BYTE8(v224))
      {
        LODWORD(v197) = 1;
        v84 = v204;
        *(_QWORD *)&v213 = v224;
        swift_retain();
        v190 = (char *)v88;
        v95 = v205;
        v94 = (uint64_t)v206;
        v96 = _ShapeStyle_Shape.PreparedTextResult.apply(to:)(v205, (uint64_t)v206, v84 != 0, v207);
        v196 = v97;
        v189 = v98;
        LODWORD(v184) = v99 & 1;
        v100 = v84;
        LOBYTE(v84) = (_BYTE)v197;
        outlined consume of Text.Storage(v95, v94, v100);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Shape.Result(v89, 0);
        swift_release();
        v88 = (uint64_t)v190;
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v89, 0);
        v205 = v96;
        v206 = v196;
        v204 = v184;
        v90 = (_QWORD *)v189;
        if (v87)
          goto LABEL_30;
        goto LABEL_32;
      }
      outlined consume of _ShapeStyle_Shape.Result(v224, SBYTE8(v224));
      swift_release();
      swift_release();
      swift_release();
    }
    v90 = v207;
    if (v87)
    {
LABEL_30:
      v172 = v80;
      swift_retain_n();
      swift_retain_n();
      v91 = specialized PropertyList.Tracker.value<A>(_:for:)(v88);
      swift_release_n();
      swift_release_n();
      swift_retain_n();
      swift_retain_n();
      v92 = specialized PropertyList.Tracker.value<A>(_:for:)(v88);
      swift_release_n();
      v93 = v87;
      goto LABEL_33;
    }
LABEL_32:
    v101 = swift_retain_n();
    v91 = specialized closure #1 in PropertyList.subscript.getter(v101);
    swift_release_n();
    v102 = swift_retain_n();
    v92 = specialized closure #1 in PropertyList.subscript.getter(v102);
    v172 = v80;
    swift_release();
    v93 = 0;
LABEL_33:
    swift_release_n();
    v103 = v91 & 1;
    if ((v92 & 1) != 0)
      v103 = v91 & 1 | 0x10;
    v104 = (uint64_t)v203;
    v105 = 8;
    if (*((_BYTE *)v203 + 18))
      v105 = 4;
    v106 = v103 | v105;
    if (*((_BYTE *)v203 + 13))
      v106 |= 0x20uLL;
    v107 = *((unsigned __int16 *)v203 + 8);
    v108 = v106 & 0xFFFFFFFFFFFFFFBFLL | (((v107 >> 5) & 1) << 6);
    v109 = *((unsigned __int8 *)v203 + 14);
    if ((v109 & 1) != 0)
      v108 |= 0x80uLL;
    v110 = v84 | *((_BYTE *)v203 + 18);
    *(_QWORD *)&v222 = v88;
    *((_QWORD *)&v222 + 1) = v87;
    v212 = v108;
    v211 = *(_OWORD *)(v203 + 3);
    swift_retain();
    swift_retain();
    v197 = (char *)Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)((uint64_t)&v213, (uint64_t *)&v222, v110, (float64_t *)&v212, (uint64_t *)&v211, v205, (uint64_t)v206, v204, v90);
    swift_release();
    swift_release();
    *(_OWORD *)&v225[48] = v219;
    v226 = v220;
    v227 = v221;
    v224 = v215;
    *(_OWORD *)v225 = v216;
    *(_OWORD *)&v225[16] = v217;
    *(_OWORD *)&v225[32] = v218;
    v222 = v213;
    v223 = v214;
    v111 = -*(double *)&v213;
    v112 = -*((double *)&v213 + 1);
    v113 = -*(double *)&v214;
    v114 = -*((double *)&v214 + 1);
    *(_QWORD *)&v211 = v88;
    *((_QWORD *)&v211 + 1) = v87;
    v115 = *(_BYTE *)(v104 + 15);
    LODWORD(v189) = v109;
    v210[0] = v109;
    v210[1] = v115;
    v116 = v90[2];
    v207 = v90;
    v196 = v93;
    if (v116)
    {
      v117 = v90 + 5;
      while (1)
      {
        if ((*v117 & 0xE0) == 0xC0)
        {
          type metadata accessor for CollapsibleTextModifier();
          if (swift_dynamicCastClass())
            break;
        }
        v117 += 16;
        if (!--v116)
          goto LABEL_47;
      }
      v118 = (char *)v88;
      v183 = 1;
    }
    else
    {
LABEL_47:
      v118 = (char *)v88;
      v183 = 0;
    }
    v209 = v224 | v107;
    v119 = *(void **)&v225[8];
    v120 = *(_QWORD *)&v225[16];
    v121 = v225[24];
    v122 = *(_QWORD *)&v225[40];
    v123 = *(_QWORD *)&v225[32];
    v124 = *(_QWORD *)&v225[48];
    v213 = *(_OWORD *)&v225[8];
    v214 = *(_OWORD *)&v225[24];
    v215 = *(_OWORD *)&v225[40];
    *(_QWORD *)&v216 = *(_QWORD *)&v225[56];
    v212 = v226;
    v184 = *((_QWORD *)&v224 + 1);
    v125 = *(_QWORD *)v225;
    v208 = 2;
    v190 = v118;
    swift_retain();
    swift_retain();
    outlined copy of ResolvedTextSuffix(v119, v120, v121, v123, v122, v124);
    swift_bridgeObjectRetain();
    v126 = specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v197, (unint64_t *)&v211, v210, v183, &v209, &v213, (uint64_t *)&v212, v184, v111, v112, v113, v114, v125, &v208, v191 & 1);
    swift_bridgeObjectRelease();
    v127 = v123;
    a4 = (_QWORD *)v126;
    outlined consume of ResolvedTextSuffix(v119, v120, v121, v127, v122, v124);
    swift_release();
    swift_release();
    v128 = *(_QWORD *)(v126 + 192);
    if (v128)
      LODWORD(v128) = NSAttributedString.isDynamic.getter();
    v129 = v199;
    v130 = (uint64_t)v203;
    v132 = (uint64_t)v192;
    v131 = v193;
    v133 = v194;
    v134 = v200;
    outlined init with copy of TypesettingLanguage((uint64_t)v203, v194, type metadata accessor for ResolvedTextHelper);
    if ((v189 & 1) != 0)
    {
      outlined destroy of TypesettingConfiguration(v133, type metadata accessor for ResolvedTextHelper);
      goto LABEL_64;
    }
    v135 = AGGraphGetWeakValue();
    if (!v135)
    {
      v141 = v128;
      v142 = v186;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56))(v186, 1, 1, v134);
      outlined destroy of TypesettingConfiguration(v142, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      v143 = v187;
      outlined init with copy of TypesettingLanguage(v133, v187, type metadata accessor for ResolvedTextHelper);
      outlined destroy of TypesettingConfiguration(v143, type metadata accessor for ResolvedTextHelper);
      outlined destroy of TypesettingConfiguration(v133, type metadata accessor for ResolvedTextHelper);
      if ((v141 & 1) == 0)
        goto LABEL_64;
LABEL_76:
      v161 = v228;
      if (v229)
      {
        swift_retain_n();
        swift_retain_n();
        v162 = specialized PropertyList.Tracker.value<A>(_:for:)(v161);
        swift_release_n();
      }
      else
      {
        v163 = swift_retain_n();
        v162 = specialized closure #1 in PropertyList.subscript.getter(v163);
        swift_release();
      }
      swift_release_n();
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v165 = v180;
      v166 = &v180[v164[12]];
      v167 = v164[16];
      v168 = v164[20];
      v169 = *(_QWORD *)AGGraphGetValue();
      outlined consume of Text.Storage(v205, (uint64_t)v206, v204);
      swift_bridgeObjectRelease();

      outlined release of Text.ResolvedProperties(&v222);
      *v165 = v169;
      (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v166, v201, v129);
      *((_BYTE *)v165 + v167) = v162 & 1;
      *(_QWORD *)((char *)v165 + v168) = a4;
      swift_storeEnumTagMultiPayload();
      v170 = v130 + *(int *)(v195 + 56);
      swift_retain();
      outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v165, v170, type metadata accessor for ResolvedTextHelper.NextUpdate);
      goto LABEL_65;
    }
    LODWORD(v200) = v128;
    v203 = a4;
    v136 = v186;
    outlined init with copy of TypesettingLanguage(v135, v186, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v137 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56);
    v138 = 1;
    v137(v136, 0, 1, v134);
    outlined destroy of TypesettingConfiguration(v136, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
    outlined init with copy of TypesettingLanguage(v133, v187, type metadata accessor for ResolvedTextHelper);
    v139 = AGGraphGetWeakValue();
    v140 = v185;
    if (v139)
    {
      outlined init with copy of TypesettingLanguage(v139, v185, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v138 = 0;
    }
    v137(v140, v138, 1, v134);
    v174(v131, 1, 1, v129);
    v137(v131, 0, 1, v134);
    v144 = v132 + *(int *)(v182 + 48);
    outlined init with copy of TypesettingLanguage(v140, v132, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
    outlined init with copy of TypesettingLanguage(v131, v144, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
    v145 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
    if (v145(v132, 1, v134) == 1)
    {
      outlined destroy of TypesettingConfiguration(v131, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v140, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v187, type metadata accessor for ResolvedTextHelper);
      outlined destroy of TypesettingConfiguration(v194, type metadata accessor for ResolvedTextHelper);
      if (v145(v144, 1, v134) == 1)
      {
        outlined destroy of TypesettingConfiguration(v132, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
        a4 = v203;
        if ((v200 & 1) != 0)
          goto LABEL_76;
LABEL_64:
        (*(void (**)(char *, uint64_t))(v202 + 8))(v201, v129);
        outlined consume of Text.Storage(v205, (uint64_t)v206, v204);
        swift_bridgeObjectRelease();

        outlined release of Text.ResolvedProperties(&v222);
        outlined destroy of TypesettingConfiguration(v130 + *(int *)(v195 + 56), type metadata accessor for ResolvedTextHelper.NextUpdate);
        swift_storeEnumTagMultiPayload();
LABEL_65:
        swift_release();
        swift_release();
        return a4;
      }
LABEL_63:
      outlined destroy of TypesettingConfiguration(v132, (uint64_t (*)(_QWORD))type metadata accessor for (Date??, Date??));
      a4 = v203;
      goto LABEL_64;
    }
    v146 = v181;
    outlined init with copy of TypesettingLanguage(v132, v181, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
    if (v145(v144, 1, v134) == 1)
    {
      outlined destroy of TypesettingConfiguration(v193, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v185, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v187, type metadata accessor for ResolvedTextHelper);
      outlined destroy of TypesettingConfiguration(v194, type metadata accessor for ResolvedTextHelper);
      outlined destroy of TypesettingConfiguration(v146, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      goto LABEL_63;
    }
    v148 = v179;
    outlined init with take of LocalizedStringKey.FormatArgument(v144, v179, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v149 = v178;
    v150 = v178 + *(int *)(v177 + 48);
    outlined init with take of LocalizedStringKey.FormatArgument(v146, v178, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    outlined init with copy of TypesettingLanguage(v148, v150, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v151 = v173;
    if (v173(v149, 1, v129) == 1)
    {
      outlined destroy of TypesettingConfiguration(v148, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined destroy of TypesettingConfiguration(v193, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v185, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v187, type metadata accessor for ResolvedTextHelper);
      outlined destroy of TypesettingConfiguration(v194, type metadata accessor for ResolvedTextHelper);
      v152 = v151(v150, 1, v129);
      a4 = v203;
      if (v152 == 1)
      {
        outlined destroy of TypesettingConfiguration(v149, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
        v153 = 0;
LABEL_74:
        outlined destroy of TypesettingConfiguration(v132, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
        if ((v153 & 1) != 0 || ((v200 ^ 1) & 1) != 0)
          goto LABEL_64;
        goto LABEL_76;
      }
    }
    else
    {
      v154 = v176;
      outlined init with copy of TypesettingLanguage(v149, v176, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v155 = v151(v150, 1, v129);
      v156 = v193;
      a4 = v203;
      if (v155 != 1)
      {
        v157 = v202;
        v158 = v175;
        (*(void (**)(char *, uint64_t, uint64_t))(v202 + 32))(v175, v150, v129);
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
        v159 = dispatch thunk of static Equatable.== infix(_:_:)();
        v160 = *(void (**)(char *, uint64_t))(v157 + 8);
        v160(v158, v129);
        outlined destroy of TypesettingConfiguration(v179, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
        outlined destroy of TypesettingConfiguration(v156, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
        outlined destroy of TypesettingConfiguration(v185, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
        outlined destroy of TypesettingConfiguration(v187, type metadata accessor for ResolvedTextHelper);
        outlined destroy of TypesettingConfiguration(v194, type metadata accessor for ResolvedTextHelper);
        v160((char *)v154, v129);
        v132 = (uint64_t)v192;
        outlined destroy of TypesettingConfiguration(v149, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
        v153 = v159 ^ 1;
        goto LABEL_74;
      }
      outlined destroy of TypesettingConfiguration(v179, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined destroy of TypesettingConfiguration(v156, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v185, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
      outlined destroy of TypesettingConfiguration(v187, type metadata accessor for ResolvedTextHelper);
      outlined destroy of TypesettingConfiguration(v194, type metadata accessor for ResolvedTextHelper);
      (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v154, v129);
    }
    outlined destroy of TypesettingConfiguration(v149, (uint64_t (*)(_QWORD))type metadata accessor for (Date?, Date?));
    outlined destroy of TypesettingConfiguration(v132, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
    goto LABEL_64;
  }
  outlined destroy of TypesettingConfiguration(v54 + *(int *)(v22 + 56), type metadata accessor for ResolvedTextHelper.NextUpdate);
  swift_storeEnumTagMultiPayload();
  return a4;
}

double TextLayoutProperties.init(_:)@<D0>(unint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  uint64_t v8[2];
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  v3 = *a1;
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3, v9);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v8[0] = *a1;
    v8[1] = 0;
    swift_retain();
    TextLayoutProperties.init(from:)(v8, (uint64_t)v9);
    swift_release();
  }
  v4 = v13;
  a2[4] = v12;
  a2[5] = v4;
  a2[6] = v14[0];
  *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)((char *)v14 + 9);
  v5 = v9[1];
  *a2 = v9[0];
  a2[1] = v5;
  result = *(double *)&v10;
  v7 = v11;
  a2[2] = v10;
  a2[3] = v7;
  return result;
}

uint64_t static Text._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_BYTE *, uint64_t);
  char v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _UNKNOWN **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82[6];
  _BYTE v83[12];
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;

  v74 = a3;
  v99 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for ResolvedTextFilter(0);
  MEMORY[0x24BDAC7A8](v5);
  v71 = (_DWORD *)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v73) = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  LODWORD(v6) = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a2 + 32);
  v78 = *(_DWORD *)(a2 + 24);
  v79 = v6;
  v11 = *(_DWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v16 = *(_DWORD *)(a2 + 64);
  v80 = *(_DWORD *)(a2 + 68);
  v81 = v8;
  v17 = *(_DWORD *)(a2 + 72);
  LODWORD(v6) = *(_DWORD *)(a2 + 76);
  v75 = v11;
  v76 = v6;
  v77 = *(_DWORD *)(a2 + 80);
  v18 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v19 = specialized find<A>(_:key:)(v7);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
LABEL_7:
    v82[0] = v73;
    *(_QWORD *)v83 = v7;
    *(_DWORD *)&v83[8] = v81;
    v85 = v18;
    v86 = v78;
    v87 = v79;
    v88 = v10;
    v89 = v75;
    v90 = v12;
    v91 = v13;
    v92 = v15;
    v93 = v14;
    v94 = v16;
    v95 = v80;
    v96 = v17;
    v97 = v76;
    v98 = v77;
    return static Text.makeCommonAttributes(view:inputs:)(v82, (uint64_t)v83, v74);
  }
  v68 = v5;
  v20 = *(_QWORD *)(v19 + 72);
  v72 = *(_QWORD *)(v19 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (!v20)
    goto LABEL_7;
  *(_QWORD *)v83 = v7;
  *(_DWORD *)&v83[8] = v81;
  v85 = v18;
  v86 = v78;
  v87 = v79;
  v88 = v10;
  v89 = v75;
  v90 = v12;
  v91 = v13;
  v92 = v15;
  v93 = v14;
  v94 = v16;
  v95 = v80;
  v96 = v17;
  v97 = v76;
  v98 = v77;
  v21 = *(uint64_t (**)(_BYTE *, uint64_t))(v72 + 8);
  v69 = v17;
  v22 = v21(v83, v20);
  v17 = v69;
  if ((v22 & 1) == 0)
    goto LABEL_7;
  v82[0] = v73;
  *(_QWORD *)v83 = v7;
  *(_DWORD *)&v83[8] = v81;
  v85 = v18;
  v86 = v78;
  v87 = v79;
  v67 = v12;
  v66 = v13;
  v23 = v75;
  v88 = v10;
  v89 = v75;
  v90 = v12;
  v91 = v66;
  v92 = v15;
  v93 = v14;
  v70 = v18;
  v94 = v16;
  v95 = v80;
  v24 = v76;
  v25 = v77;
  v96 = v69;
  v97 = v76;
  v98 = v77;
  static Text.makeCommonAttributes(view:inputs:)(v82, (uint64_t)v83, v74);
  *(_QWORD *)v83 = v7;
  *(_DWORD *)&v83[8] = v81;
  v85 = v70;
  v86 = v78;
  v87 = v79;
  v62 = v10;
  v88 = v10;
  v89 = v23;
  v26 = v67;
  v90 = v67;
  v91 = v66;
  v63 = v15;
  v92 = v15;
  v93 = v14;
  v64 = v14;
  v65 = v16;
  v94 = v16;
  v95 = v80;
  v27 = v70;
  v96 = v17;
  v97 = v24;
  v98 = v25;
  v28 = v66;
  (*(void (**)(unsigned int *__return_ptr, _BYTE *, uint64_t))(v72 + 16))(v82, v83, v20);
  v60 = *(_QWORD *)v82;
  swift_beginAccess();
  v29 = *(_DWORD *)(v27 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v30 = specialized find<A>(_:key:)(v7);
  v61 = v20;
  if (v30)
    *(_QWORD *)&v31 = *(_QWORD *)(v30 + 72);
  else
    v31 = 0uLL;
  v59 = v31;
  swift_bridgeObjectRelease();
  v33 = 2;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v34 = specialized find<A>(_:key:)(v7);
  if (v34)
  {
    v57 = *(unsigned __int8 *)(v34 + 72);
    v33 = *(unsigned __int8 *)(v34 + 73);
  }
  else
  {
    v57 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v35 = specialized find<A>(_:key:)(v7);
  if (v35)
    HIDWORD(v56) = *(unsigned __int8 *)(v35 + 72);
  else
    HIDWORD(v56) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = specialized find<A>(_:key:)(v7);
  v58 = v33;
  if (!v36)
  {
    swift_release();
    goto LABEL_20;
  }
  v37 = *(_QWORD *)(v36 + 72);
  v38 = *(_UNKNOWN ***)(v36 + 80);
  swift_release();
  if (!v37)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
    v37 = v39;
    v38 = &protocol witness table for InterfaceIdiomBox<A>;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
LABEL_21:
  v40 = v7;
  v41 = (uint64_t)v71;
  *v71 = v73;
  *(_DWORD *)(v41 + 4) = v29;
  v42 = v41 + *(int *)(v68 + 24);
  v43 = type metadata accessor for ResolvedTextHelper(0);
  *(_QWORD *)(v42 + *(int *)(v43 + 56)) = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)v42 = v81;
  *(_QWORD *)(v42 + 4) = v59;
  *(_BYTE *)(v42 + 12) = v60 & 1;
  *(_BYTE *)(v42 + 13) = 0;
  *(_BYTE *)(v42 + 14) = v57;
  *(_BYTE *)(v42 + 15) = v58;
  *(_WORD *)(v42 + 16) = 0;
  *(_BYTE *)(v42 + 18) = BYTE4(v56);
  *(_QWORD *)(v42 + 24) = v37;
  *(_QWORD *)(v42 + 32) = v38;
  type metadata accessor for PropertyList.Tracker();
  v44 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v45 = swift_allocObject();
  *(_DWORD *)(v45 + 16) = 0;
  v46 = MEMORY[0x24BEE4B00];
  v47 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v45 + 24) = 0;
  *(_QWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 40) = v46;
  *(_QWORD *)(v45 + 48) = v47;
  *(_BYTE *)(v45 + 56) = 0;
  *(_QWORD *)(v44 + 16) = v45;
  *(_QWORD *)(v42 + 40) = v44;
  *(_OWORD *)(v42 + 48) = 0u;
  *(_OWORD *)(v42 + 64) = 0u;
  *(_QWORD *)(v42 + *(int *)(v43 + 60)) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ResolvedStyledText();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, type metadata accessor for ResolvedTextFilter, (uint64_t)&protocol conformance descriptor for ResolvedTextFilter);
  v48 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of TypesettingConfiguration(v41, type metadata accessor for ResolvedTextFilter);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v49 = specialized find<A>(_:key:)(v7);
  if (v49)
    *(_QWORD *)&v50 = *(_QWORD *)(v49 + 72);
  else
    v50 = 0uLL;
  v73 = v50;
  v51 = v74;
  v52 = v76;
  swift_bridgeObjectRelease();
  v53 = v70;
  swift_release();
  swift_release_n();
  v54 = *(_DWORD *)(v53 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)v83 = v48;
  *(_QWORD *)&v83[4] = v73;
  v84 = v54;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext();
  v55 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)v83 = v40;
  *(_DWORD *)&v83[8] = v81;
  v85 = v53;
  v86 = v78;
  v87 = v79;
  v88 = v62;
  v89 = v75;
  v90 = v26;
  v91 = v28;
  v92 = v63;
  v93 = v64;
  v94 = v65;
  v95 = v80;
  v96 = v69;
  v97 = v52;
  v98 = v77;
  return (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(v72 + 24))(v83, v55, v51);
}

uint64_t static Text.makeCommonAttributes(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int Attribute;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _UNKNOWN **v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  int v90;
  int v91;
  _QWORD *v92;
  _BYTE v94[12];
  int v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  int v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  _BYTE *v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  __int16 v119;
  __int128 v120;
  _OWORD v121[5];
  int v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _QWORD v138[4];

  v115 = a3;
  v138[1] = *MEMORY[0x24BDAC8D0];
  v111 = type metadata accessor for ResolvedTextFilter(0);
  MEMORY[0x24BDAC7A8](v111);
  v110 = &v94[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v94[-v7];
  v9 = *a1;
  v10 = *(_OWORD *)(a2 + 48);
  v131 = *(_OWORD *)(a2 + 32);
  v132 = v10;
  v133 = *(_OWORD *)(a2 + 64);
  v134 = *(_DWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v129 = *(_OWORD *)a2;
  v130 = v11;
  v135 = v129;
  v136 = v11;
  v137 = v131;
  v12 = v129;
  v138[0] = v129;
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v13 = specialized find<A>(_:key:)(v12);
  if (!v13)
  {
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
    outlined release of _ViewInputs((uint64_t)&v129);
    goto LABEL_6;
  }
  v14 = *(unsigned __int8 *)(v13 + 72);
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined release of _ViewInputs((uint64_t)&v129);
  if (v14 != 1)
  {
LABEL_6:
    v17 = 0;
    goto LABEL_9;
  }
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v15 = specialized find<A>(_:key:)(v12);
  if (v15)
    v16 = *(unsigned __int8 *)(v15 + 72);
  else
    v16 = 0;
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined release of _ViewInputs((uint64_t)&v129);
  v17 = v16 ^ 1;
LABEL_9:
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v18 = specialized find<A>(_:key:)(v12);
  if (v18)
  {
    v19 = (uint64_t *)(v18 + 72);
    v20 = (unsigned int *)(v18 + 76);
  }
  else
  {
    v19 = &static TextRendererInput.defaultValue;
    v20 = (unsigned int *)&static TextRendererInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v21 = *v20;
  v22 = *(unsigned int *)v19;
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined release of _ViewInputs((uint64_t)&v129);
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v23 = specialized find<A>(_:key:)(v12);
  if (v23)
    v24 = *(unsigned __int8 *)(v23 + 72);
  else
    v24 = 0;
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined release of _ViewInputs((uint64_t)&v129);
  v25 = ~(32 * v24) & 0x20;
  v26 = v22 | (v21 << 32);
  Attribute = AGWeakAttributeGetAttribute();
  v95 = *MEMORY[0x24BE096C0];
  if (Attribute == v95)
  {
    v28 = v132;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<Text.LayoutKey>, (uint64_t)&type metadata for Text.LayoutKey, (uint64_t)&protocol witness table for Text.LayoutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v30 = *(_QWORD *)(v28 + 16);
    if (v30)
    {
      v31 = (_QWORD *)(v28 + 32);
      while (*v31 != v29)
      {
        v31 += 2;
        if (!--v30)
          goto LABEL_24;
      }
      v25 |= 0x40u;
    }
  }
  else
  {
    v25 |= 0x48u;
  }
LABEL_24:
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v32 = specialized find<A>(_:key:)(v12);
  if (v32)
  {
    v33 = *(_BYTE *)(v32 + 72);
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
    outlined release of _ViewInputs((uint64_t)&v129);
    if ((v33 & ((v25 & 0x10) == 0)) != 0)
      v25 |= 0x10u;
    v112 = v25;
  }
  else
  {
    v112 = v25;
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
    outlined release of _ViewInputs((uint64_t)&v129);
  }
  v116 = v130;
  v117 = v129;
  v98 = DWORD2(v129);
  v99 = *((_QWORD *)&v130 + 1);
  v100 = v131;
  v35 = *((_QWORD *)&v131 + 1);
  v34 = v132;
  v109 = DWORD1(v131);
  v101 = *((_QWORD *)&v132 + 1);
  v102 = v133;
  v103 = v134;
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v36 = specialized find<A>(_:key:)(v12);
  v97 = v9;
  v114 = v34;
  v113 = v17;
  v96 = v26;
  if (v36)
  {
    v37 = *(_BYTE *)(v36 + 72);
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
    if ((v37 & 1) != 0)
    {
      LODWORD(v111) = DWORD1(v137);
      v109 = DWORD2(v133);
      v38 = v136;
      v110 = (_BYTE *)v136;
      swift_beginAccess();
      LODWORD(v106) = *(_DWORD *)(v38 + 16);
      v39 = v9;
      v40 = DWORD2(v135);
      outlined retain of _ViewInputs((uint64_t)&v129);
      v41 = specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs((uint64_t)&v129);
      outlined retain of _ViewInputs((uint64_t)&v129);
      specialized _ViewInputs.subscript.getter(&v120);
      outlined release of _ViewInputs((uint64_t)&v129);
      v126 = v132;
      v127 = v133;
      v123 = v129;
      v119 = v120;
      v118 = v112;
      v128 = v134;
      v124 = v130;
      v125 = v131;
      v42 = _ViewInputs.attachAsMetadata.getter();
      v123 = v135;
      v124 = v136;
      v125 = v137;
      _GraphInputs.interfaceIdiom.getter(v121);
      v123 = v121[0];
      v43 = specialized SizeFittingTextFilter.init(size:text:environment:time:referenceDate:includeDefaultAttributes:allowsKeyColors:archiveOptions:features:attachmentsAsAuxiliaryMetadata:idiom:)(v109, v39, v106, v40, v41, 1, 1u, &v119, &v118, v42 & 1, &v123);
      v45 = v44;
      *(_QWORD *)&v123 = v43;
      DWORD2(v123) = v46;
      *(_QWORD *)&v124 = v44;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ResolvedStyledText();
      lazy protocol witness table accessor for type SizeFittingTextFilter and conformance SizeFittingTextFilter();
      swift_retain();
      v47 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v123 = __PAIR64__(*((_DWORD *)v110 + 4), v39);
      *((_QWORD *)&v123 + 1) = v45;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer();
      swift_retain();
      v112 = Attribute.init<A>(body:value:flags:update:)();
      swift_release_n();
      v48 = 0;
      v49 = v111 & 0xFFFFFFFD;
      v50 = MEMORY[0x24BEE4AF8];
      goto LABEL_48;
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
  }
  v51 = v136;
  swift_beginAccess();
  v52 = *(_DWORD *)(v51 + 16);
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v53 = specialized find<A>(_:key:)(v12);
  if (v53)
    *(_QWORD *)&v54 = *(_QWORD *)(v53 + 72);
  else
    v54 = 0uLL;
  v106 = v54;
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined release of _ViewInputs((uint64_t)&v129);
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v55 = specialized find<A>(_:key:)(v12);
  if (v55)
  {
    v105 = *(unsigned __int8 *)(v55 + 72);
    v56 = *(unsigned __int8 *)(v55 + 73);
  }
  else
  {
    v105 = 0;
    v56 = 2;
  }
  v104 = v56;
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v57 = specialized find<A>(_:key:)(v12);
  if (v57)
    v58 = *(_BYTE *)(v57 + 72);
  else
    v58 = 0;
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined release of _ViewInputs((uint64_t)&v129);
  outlined release of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v59 = specialized find<A>(_:key:)(v12);
  v107 = v12;
  v108 = v35;
  if (!v59)
  {
    outlined release of ViewTransform((uint64_t)v138);
    goto LABEL_46;
  }
  v61 = *(_QWORD *)(v59 + 72);
  v60 = *(_UNKNOWN ***)(v59 + 80);
  outlined release of ViewTransform((uint64_t)v138);
  if (!v61)
  {
LABEL_46:
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
    v61 = v62;
    outlined release of _GraphInputs((uint64_t)&v135);
    v60 = &protocol witness table for InterfaceIdiomBox<A>;
    goto LABEL_47;
  }
  outlined release of _GraphInputs((uint64_t)&v135);
LABEL_47:
  v63 = DWORD2(v135);
  *v8 = v9;
  v8[1] = v52;
  v64 = (char *)v8 + *(int *)(v111 + 24);
  v65 = type metadata accessor for ResolvedTextHelper(0);
  *(_QWORD *)&v64[*(int *)(v65 + 56)] = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)v64 = v63;
  *(_QWORD *)(v64 + 4) = v106;
  *((_WORD *)v64 + 6) = 257;
  v64[14] = v105;
  v64[15] = v104;
  *((_WORD *)v64 + 8) = v112;
  v64[18] = v58;
  *((_QWORD *)v64 + 3) = v61;
  *((_QWORD *)v64 + 4) = v60;
  type metadata accessor for PropertyList.Tracker();
  v66 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v67 = swift_allocObject();
  *(_DWORD *)(v67 + 16) = 0;
  v68 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v67 + 24) = 0;
  *(_QWORD *)(v67 + 32) = v68;
  *(_QWORD *)(v67 + 40) = v68;
  v50 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v67 + 48) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v67 + 56) = 0;
  *(_QWORD *)(v66 + 16) = v67;
  *((_QWORD *)v64 + 5) = v66;
  *((_OWORD *)v64 + 3) = 0u;
  *((_OWORD *)v64 + 4) = 0u;
  *(_QWORD *)&v64[*(int *)(v65 + 60)] = 0;
  v69 = v110;
  outlined init with copy of TypesettingLanguage((uint64_t)v8, (uint64_t)v110, type metadata accessor for ResolvedTextFilter);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ResolvedStyledText();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, type metadata accessor for ResolvedTextFilter, (uint64_t)&protocol conformance descriptor for ResolvedTextFilter);
  v47 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of TypesettingConfiguration((uint64_t)v69, type metadata accessor for ResolvedTextFilter);
  outlined destroy of TypesettingConfiguration((uint64_t)v8, type metadata accessor for ResolvedTextFilter);
  v112 = 0;
  v48 = 1;
  v12 = v107;
  v35 = v108;
  v49 = v109;
LABEL_48:
  v70 = v49 | 0x2000;
  if (!v113)
  {
    v75 = v117;
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    v76 = specialized find<A>(_:key:)(v75);
    if (v76)
    {
      v77 = (uint64_t *)(v76 + 72);
      v78 = (uint64_t *)(v76 + 80);
    }
    else
    {
      v77 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
      v78 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1;
      if (one-time initialization token for defaultValue != -1)
        swift_once();
    }
    v79 = *v78;
    v80 = *v77;
    swift_bridgeObjectRelease();
    v81 = v35;
    v82 = v116;
    swift_release();
    v83 = v117;
    swift_release_n();
    *(_QWORD *)&v123 = v83;
    *(_QWORD *)&v124 = v82;
    DWORD2(v123) = v98;
    *((_QWORD *)&v124 + 1) = v99;
    *(_QWORD *)&v125 = __PAIR64__(v70, v100);
    *((_QWORD *)&v125 + 1) = v81;
    *(_QWORD *)&v126 = v114;
    *((_QWORD *)&v126 + 1) = v101;
    v127 = v102;
    v128 = v103;
    v121[2] = v131;
    v121[3] = v132;
    v121[4] = v133;
    v122 = v134;
    v121[0] = v129;
    v121[1] = v130;
    v84 = _ViewInputs.isScrapeable.getter();
    static Text.makeTextChildQuery<A>(_:styledText:view:renderer:inputs:isScrapeable:)(v47, v97, v96, (uint64_t)&v123, v84, v80, v79, (double *)&v120);
    goto LABEL_59;
  }
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v71 = specialized find<A>(_:key:)(v12);
  v72 = v114;
  if (!v71)
  {
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
    outlined release of _ViewInputs((uint64_t)&v129);
    goto LABEL_55;
  }
  v73 = *(_QWORD *)(v71 + 72);
  v74 = *(_QWORD *)(v71 + 80);
  outlined release of ViewTransform((uint64_t)v138);
  outlined release of _GraphInputs((uint64_t)&v135);
  outlined release of _ViewInputs((uint64_t)&v129);
  if (!v73)
  {
LABEL_55:
    *(_QWORD *)&v121[0] = v50;
    DWORD2(v121[0]) = 0;
    HIDWORD(v121[0]) = v95;
    goto LABEL_60;
  }
  *(_QWORD *)&v123 = v117;
  *(_QWORD *)&v124 = v116;
  DWORD2(v123) = v98;
  *((_QWORD *)&v124 + 1) = v99;
  *(_QWORD *)&v125 = __PAIR64__(v70, v100);
  *((_QWORD *)&v125 + 1) = v35;
  *(_QWORD *)&v126 = v72;
  *((_QWORD *)&v126 + 1) = v101;
  v127 = v102;
  v128 = v103;
  (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t))(v74 + 8))(&v120, v47, &v123, v73, v74);
LABEL_59:
  v121[0] = v120;
LABEL_60:
  outlined retain of _ViewInputs((uint64_t)&v129);
  outlined retain of _GraphInputs((uint64_t)&v135);
  outlined retain of ViewTransform((uint64_t)v138);
  v85 = specialized find<A>(_:key:)(v12);
  if (v85)
  {
    v86 = *(_QWORD *)(v85 + 72);
    v87 = *(_QWORD *)(v85 + 80);
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
    v88 = outlined release of _ViewInputs((uint64_t)&v129);
    if (v86)
    {
      v126 = v132;
      v127 = v133;
      v128 = v134;
      v123 = v129;
      v124 = v130;
      v125 = v131;
      v89 = MEMORY[0x24BDAC7A8](v88);
      (*(void (**)(__int128 *, uint64_t (*)(), double))(v87 + 8))(&v123, partial apply for implicit closure #2 in static Text.makeCommonAttributes(view:inputs:), v89);
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)&v135);
    outlined release of _ViewInputs((uint64_t)&v129);
  }
  v90 = DWORD2(v121[0]);
  v91 = HIDWORD(v121[0]);
  if (!v48)
  {
    v91 = v112;
    v90 = DWORD2(v121[0]) | 0x80;
  }
  v92 = v115;
  *v115 = *(_QWORD *)&v121[0];
  *((_DWORD *)v92 + 2) = v90;
  *((_DWORD *)v92 + 3) = v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _ViewInputs.attachAsMetadata.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 72);
  else
    v3 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v3;
}

double static Text.makeTextChildQuery<A>(_:styledText:view:renderer:inputs:isScrapeable:)@<D0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int ShouldRecordTree;
  char v26;
  uint64_t AssociatedConformanceWitness;
  void (*v28)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double *v29;
  double result;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  double *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  double v51;
  int v52[3];
  uint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;

  v47 = a7;
  v48 = a6;
  v34 = a5;
  v38 = __PAIR64__(a2, a1);
  v45 = a8;
  v83 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)a4;
  v43 = *(_DWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a4 + 16);
  v42 = *(_DWORD *)(a4 + 24);
  v41 = *(_DWORD *)(a4 + 28);
  v44 = *(_DWORD *)(a4 + 32);
  v40 = *(_DWORD *)(a4 + 36);
  v11 = *(_QWORD *)(a4 + 40);
  v12 = *(_QWORD *)(a4 + 48);
  v13 = *(_DWORD *)(a4 + 60);
  v39 = *(_DWORD *)(a4 + 56);
  v14 = *(_DWORD *)(a4 + 64);
  v37 = *(_DWORD *)(a4 + 68);
  v46 = *(_DWORD *)(a4 + 72);
  v36 = *(_DWORD *)(a4 + 76);
  v35 = *(_DWORD *)(a4 + 80);
  swift_beginAccess();
  v15 = *(_DWORD *)(v10 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v16 = specialized find<A>(_:key:)(v9);
  if (v16)
    v17 = *(_DWORD *)(v16 + 72);
  else
    v17 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  v18 = swift_release_n();
  v68 = v38;
  v69 = a3;
  v70 = __PAIR64__(v14, v15);
  v38 = __PAIR64__(v13, v14);
  v71 = v46;
  v72 = __PAIR64__(v17, v13);
  MEMORY[0x24BDAC7A8](v18);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31[2] = AssociatedTypeWitness;
  v32 = type metadata accessor for TextChildQuery(0, v48, v47, v20);
  v33 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextChildQuery<A>, v32);
  v21 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v68, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v31, v32, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
  v23 = v53;
  if ((v34 & 1) != 0)
    AGGraphSetFlags();
  _GraphValue.init(_:)(v23, v52);
  v24 = v52[0];
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  v26 = ShouldRecordTree;
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v68 = v9;
  v70 = v10;
  LODWORD(v69) = v43;
  v71 = v42;
  v74 = v11;
  v75 = v12;
  v73 = v40;
  v76 = v39;
  v77 = HIDWORD(v38);
  v78 = v38;
  v79 = v37;
  v80 = v46;
  v81 = v36;
  v82 = v35;
  v72 = v41;
  v49 = v24;
  v53 = v9;
  v54 = v43;
  v55 = v10;
  v56 = v42;
  v57 = v41;
  v58 = v40;
  v59 = v11;
  v60 = v12;
  v61 = v39;
  v62 = HIDWORD(v38);
  v63 = v38;
  v64 = v37;
  v65 = v46;
  v66 = v36;
  v67 = v35;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(&v50, &v49, &v53, AssociatedTypeWitness, AssociatedConformanceWitness);
  HIDWORD(v72) = v44;
  if ((v26 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v50, (uint64_t)&v68);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v29 = v45;
  *(_QWORD *)v45 = v50;
  result = v51;
  v29[1] = v51;
  return result;
}

uint64_t implicit closure #2 in static Text.makeCommonAttributes(view:inputs:)()
{
  uint64_t v0;

  swift_getKeyPath();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  type metadata accessor for Focus<ResolvedStyledText, TimelineSchedule?>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Focus<ResolvedStyledText, TimelineSchedule?> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<ResolvedStyledText, TimelineSchedule?>, MEMORY[0x24BE09658]);
  v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

double ResolvedStyledText.schedule.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  double result;
  _OWORD v6[2];

  v3 = *(void **)(v1 + 192);
  if (v3 && (uint64_t)objc_msgSend(v3, sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1)
      swift_once();
    v4 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v3, sel_length);
    if (objc_msgSend(v3, sel_attribute_atIndex_effectiveRange_, v4, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      NSAttributedString.updateSchedule.getter((_QWORD *)a1);
      return result;
    }
    memset(v6, 0, sizeof(v6));
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t Text.MakeRepresentableContext.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t WeakValue;
  uint64_t v11;
  uint64_t *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t result;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[7];

  v33 = a1;
  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ResolvableStringResolutionContext();
  v32 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v32 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v31 - v8;
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TypesettingLanguage(WeakValue, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
  else
  {
    v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 1, 1, v11);
  }
  Value = (uint64_t *)AGGraphGetValue();
  v13 = *Value;
  v14 = Value[1];
  v15 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = &v6[*(int *)(v4 + 24)];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  swift_retain();
  swift_retain();
  outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v3, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  v17 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v17 = v13;
  *((_QWORD *)v17 + 1) = v14;
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  type metadata accessor for ResolvedStyledText();
  v18 = AGGraphGetValue();
  v19 = *(_QWORD *)v18;
  v20 = *(id *)(*(_QWORD *)v18 + 192);
  if (!v20)
    goto LABEL_15;
  swift_retain();
  v21 = v20;
  if (NSAttributedString.isDynamic.getter() && (*(_BYTE *)(v19 + 232) & 1) != 0)
  {
    objc_msgSend(v21, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    if (swift_dynamicCast())
    {
      v23 = (void *)aBlock[6];
      if (one-time initialization token for resolvableTextSegment != -1)
        swift_once();
      v24 = objc_msgSend(v23, sel_length, static NSAttributedStringKey.resolvableTextSegment);
      outlined init with copy of TypesettingLanguage((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      v25 = (*(unsigned __int8 *)(v32 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v23;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, v26 + v25, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = _s7SwiftUI30ResolvableTextSegmentAttributeO6update_2inySo25NSMutableAttributedStringC_AA0cK17ResolutionContextVtFZyypSg_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
      *(_QWORD *)(v27 + 24) = v26;
      aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      aBlock[3] = &block_descriptor_45_0;
      v28 = _Block_copy(aBlock);
      v20 = v23;
      swift_retain();
      swift_release();
      objc_msgSend(v20, sel_enumerateAttribute_inRange_options_usingBlock_, v31, 0, v24, 2, v28);
      _Block_release(v28);
      LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
      swift_release();

      swift_release();
      swift_release();
      if ((v28 & 1) == 0)
        goto LABEL_8;
      __break(1u);
    }
    swift_release();

LABEL_15:
    v29 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
    v20 = *(id *)(v29 + 192);
    v30 = v20;
    result = swift_release();
    goto LABEL_16;
  }
  swift_release();
LABEL_8:
  result = outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
LABEL_16:
  *v33 = v20;
  return result;
}

id ResolvedStyledText.resolvedContent(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD aBlock[7];

  v2 = v1;
  v4 = type metadata accessor for ResolvableStringResolutionContext();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + 192);
  if (!v8)
    return 0;
  v9 = v8;
  if (NSAttributedString.isDynamic.getter() && (*(_BYTE *)(v2 + 232) & 1) != 0)
  {
    objc_msgSend(v9, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    if (!swift_dynamicCast())
    {
LABEL_9:

      return 0;
    }
    v10 = (void *)aBlock[6];
    if (one-time initialization token for resolvableTextSegment != -1)
      swift_once();
    v11 = static NSAttributedStringKey.resolvableTextSegment;
    v12 = objc_msgSend(v10, sel_length);
    outlined init with copy of TypesettingLanguage(a1, (uint64_t)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
    v13 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v10;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, v14 + v13, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = _s7SwiftUI30ResolvableTextSegmentAttributeO6update_2inySo25NSMutableAttributedStringC_AA0cK17ResolutionContextVtFZyypSg_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
    *(_QWORD *)(v15 + 24) = v14;
    aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_11;
    v16 = _Block_copy(aBlock);
    v17 = v10;
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_enumerateAttribute_inRange_options_usingBlock_, v11, 0, v12, 2, v16);
    _Block_release(v16);
    LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();

    swift_release();
    swift_release();
    v9 = v17;
    if ((v16 & 1) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }
  }
  return v9;
}

uint64_t protocol witness for Rule.value.getter in conformance Text.MakeRepresentableContext@<X0>(_QWORD *a1@<X8>)
{
  return Text.MakeRepresentableContext.value.getter(a1);
}

uint64_t static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(void *a1, unint64_t *a2, char *a3, char a4, __int16 *a5, __int128 *a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, unsigned __int8 *a14, char a15)
{
  return specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

unint64_t ResolvedStyledText.isDynamic.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  _OWORD v5[2];

  v1 = *(_QWORD *)(v0 + 192);
  if (v1)
  {
    if ((uint64_t)objc_msgSend(*(id *)(v0 + 192), sel_length) < 1)
    {
      return 0;
    }
    else
    {
      if (one-time initialization token for updateSchedule != -1)
        swift_once();
      v2 = static NSAttributedStringKey.updateSchedule;
      objc_msgSend((id)v1, sel_length);
      v3 = objc_msgSend((id)v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0);
      v1 = v3 != 0;
      if (v3)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v5, 0, sizeof(v5));
      }
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    }
  }
  return v1;
}

uint64_t ResolvedTextFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Value;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OutputValue;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  int EnumCaseMultiPayload;
  double v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  double v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t result;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  double v60;
  uint64_t v61;
  char *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t Update;
  double v88;
  uint64_t v89[5];

  v89[3] = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for Date();
  v80 = *(_QWORD *)(v1 - 8);
  v81 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v79 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x24BDAC7A8](Update);
  v83 = (uint64_t *)((char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v70 - v5);
  Value = AGGraphGetValue();
  v9 = v8;
  v10 = *(_QWORD *)Value;
  v11 = *(_QWORD *)(Value + 8);
  v12 = *(unsigned __int8 *)(Value + 16);
  v13 = *(_QWORD **)(Value + 24);
  v14 = (uint64_t *)AGGraphGetValue();
  v16 = v15;
  v18 = *v14;
  v17 = v14[1];
  v82 = type metadata accessor for ResolvedStyledText();
  OutputValue = AGGraphGetOutputValue();
  v85 = v11;
  v86 = v13;
  v84 = v12;
  if (!OutputValue)
  {
    outlined copy of Text.Storage(v10, v11, v12);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v38 = v0;
    goto LABEL_32;
  }
  v77 = v16;
  v20 = type metadata accessor for ResolvedTextFilter(0);
  v21 = *(int *)(v20 + 24);
  v78 = v0;
  v22 = v0 + v21;
  if ((v9 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v10, v11, v12);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v23 = v22;
    goto LABEL_4;
  }
  v76 = *(_QWORD *)(v22 + 72);
  if (!v76)
  {
    outlined copy of Text.Storage(v10, v11, v12);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
LABEL_31:
    v38 = v78;
    goto LABEL_32;
  }
  v23 = v22;
  v39 = *(_QWORD **)(v22 + 48);
  v40 = *(_QWORD *)(v23 + 56);
  v74 = *(_QWORD *)(v23 + 64);
  v75 = v40;
  if ((v74 & 1) != 0)
  {
    if ((v12 & 1) == 0)
    {
      swift_retain();
      swift_retain();
      outlined copy of Text.Storage(v10, v11, 0);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v46 = v75;
      outlined copy of Text?((uint64_t)v39, v75, v74, v76);
      v45 = 1;
      goto LABEL_23;
    }
    v41 = *v39;
    v73 = v17;
    v71 = *(uint64_t (**)(uint64_t))(v41 + 96);
    outlined copy of Text.Storage(v10, v11, 1);
    swift_retain();
    swift_retain();
    v42 = v74;
    v43 = v75;
    v44 = v76;
    outlined copy of Text?((uint64_t)v39, v75, v74, v76);
    outlined copy of Text.Storage(v10, v11, 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    outlined copy of Text?((uint64_t)v39, v43, v42, v44);
    outlined copy of Text.Storage((uint64_t)v39, v43, 1);
    LOBYTE(v44) = v71(v10);
    outlined consume of Text.Storage((uint64_t)v39, v43, 1);
    if ((v44 & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    if ((v12 & 1) != 0)
    {
      swift_retain();
      swift_retain();
      outlined copy of Text.Storage(v10, v11, 1);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v46 = v75;
      outlined copy of Text?((uint64_t)v39, v75, v74, v76);
      v45 = 0;
      goto LABEL_23;
    }
    v73 = v17;
    if (v39 == (_QWORD *)v10 && v75 == v11)
      LODWORD(v71) = 1;
    else
      LODWORD(v71) = _stringCompareWithSmolCheck(_:_:expecting:)();
    v48 = v85;
    outlined copy of Text.Storage(v10, v85, 0);
    swift_retain();
    swift_retain();
    v42 = v74;
    v49 = v75;
    v50 = v76;
    outlined copy of Text?((uint64_t)v39, v75, v74, v76);
    outlined copy of Text.Storage(v10, v48, 0);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    outlined copy of Text?((uint64_t)v39, v49, v42, v50);
    if ((v71 & 1) == 0)
    {
LABEL_14:
      v72 = v39;
      v45 = v42 & 1;
      v12 = v84;
      v11 = v85;
      outlined consume of Text.Storage(v10, v85, v84);
      v46 = v75;
      outlined consume of Text?((uint64_t)v72, v75, v42, v76);
      v17 = v73;
      v13 = v86;
      v39 = v72;
LABEL_23:
      outlined consume of Text.Storage((uint64_t)v39, v46, v45);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  LODWORD(v71) = v42 & 1;
  v51 = v76;
  LODWORD(v74) = specialized static Array<A>.== infix(_:_:)(v76, (uint64_t)v86);
  v52 = v84;
  outlined consume of Text.Storage(v10, v85, v84);
  v53 = v75;
  outlined consume of Text?((uint64_t)v39, v75, v42, v51);
  outlined consume of Text.Storage((uint64_t)v39, v53, (char)v71);
  swift_bridgeObjectRelease();
  v17 = v73;
  v12 = v52;
  v11 = v85;
  v13 = v86;
  if ((v74 & 1) == 0)
  {
LABEL_30:
    swift_release();
    swift_release();
    goto LABEL_31;
  }
LABEL_4:
  if ((v77 & 1) != 0)
  {
    v24 = swift_retain();
    v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v24);
    swift_release();
    if ((v25 & 1) != 0)
      goto LABEL_30;
  }
  v77 = v10;
  v26 = v17;
  v27 = (_QWORD *)(v23 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
  outlined init with copy of TypesettingLanguage((uint64_t)v27, (uint64_t)v6, type metadata accessor for ResolvedTextHelper.NextUpdate);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      swift_release();
      swift_release();
      v10 = v77;
      v38 = v78;
      goto LABEL_34;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v27, type metadata accessor for ResolvedTextHelper.NextUpdate);
    v29 = *(double *)v6;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v31 = *((_BYTE *)v6 + *(int *)(v30 + 64));
    v32 = v18;
    v33 = (uint64_t)v79;
    v34 = v80;
    v35 = v81;
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, (char *)v6 + *(int *)(v30 + 48), v81);
    v88 = v29;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v88, v33, v31, (double *)v89);
    swift_release();
    v36 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v18 = v32;
    v36(v33, v35);
    v37 = *(double *)v89;
    *v27 = v89[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v37 = *(double *)v6;
  }
  v47 = *(double *)AGGraphGetValue();
  swift_release();
  v17 = v26;
  swift_release();
  v11 = v85;
  v13 = v86;
  v12 = v84;
  v10 = v77;
  v38 = v78;
  if (v47 < v37)
  {
LABEL_34:
    type metadata accessor for ResolvedTextFilter(0);
    v56 = v38 + *(int *)(v20 + 24);
    v57 = (_QWORD *)(v56 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
    v58 = v83;
    outlined init with copy of TypesettingLanguage((uint64_t)v57, (uint64_t)v83, type metadata accessor for ResolvedTextHelper.NextUpdate);
    v59 = swift_getEnumCaseMultiPayload();
    if (v59)
    {
      if (v59 != 1)
      {
LABEL_42:
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v10, v85, v84);
        return swift_bridgeObjectRelease();
      }
      outlined destroy of TypesettingConfiguration((uint64_t)v57, type metadata accessor for ResolvedTextHelper.NextUpdate);
      v60 = *(double *)v58;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v62 = (char *)v58 + *(int *)(v61 + 48);
      v63 = *((_BYTE *)v58 + *(int *)(v61 + 64));
      v64 = (uint64_t)v79;
      v65 = v80;
      v66 = v81;
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v62, v81);
      v88 = v60;
      ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v88, v64, v63, (double *)v89);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      v67 = *(double *)v89;
      *v57 = v89[0];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v67 = *(double *)v58;
    }
    if (*(double *)AGGraphGetValue() < v67)
    {
      v68 = specialized static ViewGraph.current.getter();
      swift_beginAccess();
      v69 = *(double *)(v68 + 376);
      if (v67 < v69)
        v69 = v67;
      *(double *)(v68 + 376) = v69;
      swift_release();
    }
    goto LABEL_42;
  }
LABEL_32:
  v89[0] = v18;
  v89[1] = v17;
  v20 = type metadata accessor for ResolvedTextFilter(0);
  outlined copy of Text.Storage(v10, v11, v12);
  swift_bridgeObjectRetain();
  v54 = ResolvedTextHelper.resolve(_:with:sizeFitting:)(v10, v11, v12, v13, v89, 0);
  outlined consume of Text.Storage(v10, v11, v12);
  result = swift_bridgeObjectRelease();
  if (v54)
  {
    v89[0] = (uint64_t)v54;
    AGGraphSetOutputValue();
    swift_release();
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ResolvedOptionalTextFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t *Value;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OutputValue;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int EnumCaseMultiPayload;
  double v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  double v88;
  uint64_t v89;
  char *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  double v97;
  uint64_t (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t Update;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117[5];

  v117[3] = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v108 = v1;
  v109 = v2;
  MEMORY[0x24BDAC7A8](v1);
  v107 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x24BDAC7A8](Update);
  v5 = (uint64_t (**)(uint64_t))((char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v105 = (uint64_t (**)(uint64_t))((char *)&v98 - v7);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  Value = (uint64_t *)AGGraphGetValue();
  v11 = v10;
  v13 = *Value;
  v12 = Value[1];
  v15 = Value[2];
  v14 = (_QWORD *)Value[3];
  v16 = (uint64_t *)AGGraphGetValue();
  v106 = v17;
  v19 = *v16;
  v18 = v16[1];
  _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ResolvedStyledText?, v20, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedStyledText, v8);
  v110 = v21;
  OutputValue = AGGraphGetOutputValue();
  v112 = v18;
  v113 = v12;
  v114 = v13;
  v115 = v15;
  if (!OutputValue)
  {
    outlined copy of Text?(v13, v12, v15, (uint64_t)v14);
    swift_retain();
    swift_retain();
    v44 = v12;
    v28 = v0;
    goto LABEL_36;
  }
  v23 = (uint64_t)v14;
  v24 = v13;
  v25 = type metadata accessor for ResolvedOptionalTextFilter(0);
  v26 = v25;
  v27 = (_QWORD *)(v0 + *(int *)(v25 + 24));
  v28 = v0;
  if ((v11 & 1) != 0)
  {
    v15 = v115;
    v45 = v24;
    v18 = v112;
    v103 = v27[9];
    if (v103)
    {
      if (!v23)
      {
        swift_retain();
        swift_retain();
        v44 = v113;
        v14 = 0;
        goto LABEL_36;
      }
      v46 = v27[6];
      v102 = v27[7];
      v47 = v27[8];
      v100 = v46;
      v101 = (_QWORD *)v23;
      if ((v47 & 1) != 0)
      {
        if ((v115 & 1) != 0)
        {
          v104 = v27;
          v48 = v115;
          v98 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 96);
          v49 = v46;
          v50 = v47;
          v99 = v47;
          v51 = v23;
          outlined copy of Text?(v24, v113, v115, v23);
          swift_retain();
          swift_retain();
          v52 = v102;
          v53 = v50;
          v54 = v103;
          outlined copy of Text?(v49, v102, v53, v103);
          v55 = v48;
          v18 = v112;
          v45 = v24;
          outlined copy of Text?(v24, v113, v55, v51);
          swift_retain();
          swift_retain();
          v56 = v100;
          outlined copy of Text?(v100, v52, v99, v54);
          v57 = v56;
          outlined copy of Text.Storage(v56, v52, 1);
          outlined copy of Text.Storage(v24, v113, 1);
          v58 = v98(v24);
          v15 = v99;
          LODWORD(v98) = v58;
          outlined consume of Text.Storage(v24, v113, 1);
          outlined consume of Text.Storage(v57, v52, 1);
          v59 = 1;
LABEL_31:
          if ((v98 & 1) != 0)
          {
LABEL_32:
            v99 = v15;
            LODWORD(v102) = v15 & 1;
            v79 = v115;
            v80 = v115 & 1;
            LODWORD(v98) = specialized static Array<A>.== infix(_:_:)(v103, (uint64_t)v101);
            v81 = v80;
            v15 = v79;
            v18 = v112;
            outlined consume of Text.Storage(v24, v113, v81);
            swift_bridgeObjectRelease();
            v82 = v100;
            outlined consume of Text?(v100, v52, v99, v103);
            outlined consume of Text.Storage(v82, v52, v102);
            swift_bridgeObjectRelease();
            v14 = v101;
            if ((v98 & 1) != 0)
              goto LABEL_5;
LABEL_35:
            swift_release();
            swift_release();
            v44 = v113;
            goto LABEL_36;
          }
LABEL_34:
          outlined consume of Text.Storage(v45, v113, v59);
          v83 = (uint64_t)v101;
          swift_bridgeObjectRelease();
          v84 = v100;
          outlined consume of Text?(v100, v52, v15, v103);
          outlined consume of Text.Storage(v84, v52, v15 & 1);
          swift_bridgeObjectRelease();
          v15 = v115;
          v14 = (_QWORD *)v83;
          goto LABEL_35;
        }
      }
      else if ((v115 & 1) == 0)
      {
        v99 = v47;
        v104 = v27;
        if (v46 == v24 && v102 == v113)
        {
          v70 = v113;
          outlined copy of Text?(v24, v113, v115, v23);
          swift_retain();
          swift_retain();
          v71 = v103;
          outlined copy of Text?(v24, v70, v99, v103);
          outlined copy of Text?(v24, v70, v15, (uint64_t)v101);
          swift_retain();
          swift_retain();
          v15 = v99;
          outlined copy of Text?(v24, v70, v99, v71);
          v52 = v102;
          goto LABEL_32;
        }
        v72 = v102;
        v73 = v113;
        LODWORD(v98) = _stringCompareWithSmolCheck(_:_:expecting:)();
        v74 = v15;
        v75 = v23;
        outlined copy of Text?(v24, v73, v74, v23);
        swift_retain();
        swift_retain();
        v76 = v46;
        v77 = v99;
        v52 = v72;
        outlined copy of Text?(v76, v72, v99, v103);
        v78 = v73;
        v18 = v112;
        v45 = v24;
        outlined copy of Text?(v24, v78, v115, v75);
        swift_retain();
        swift_retain();
        v15 = v77;
        outlined copy of Text?(v100, v52, v77, v103);
        v59 = 0;
        goto LABEL_31;
      }
      LODWORD(v106) = (v47 & 1) == 0;
      v105 = (_QWORD *)v28;
      v62 = v46;
      v63 = v24;
      v64 = v113;
      v65 = v47;
      v66 = v23;
      outlined copy of Text?(v63, v113, v115, v23);
      swift_retain();
      swift_retain();
      v67 = v103;
      outlined copy of Text?(v62, v102, v65, v103);
      outlined copy of Text?(v45, v64, v15, v66);
      swift_retain();
      swift_retain();
      v68 = v62;
      v28 = (uint64_t)v105;
      LOBYTE(v15) = v65;
      v69 = v67;
      v52 = v102;
      outlined copy of Text?(v68, v102, v65, v69);
      v59 = v106;
      goto LABEL_34;
    }
    v14 = (_QWORD *)v23;
    if (!v23)
    {
      v104 = v27;
      swift_retain();
      swift_retain();
      goto LABEL_4;
    }
    v60 = v45;
    v44 = v113;
    outlined copy of Text?(v60, v113, v115, v23);
    swift_retain();
    swift_retain();
LABEL_36:
    v117[0] = v19;
    v117[1] = v18;
    v26 = type metadata accessor for ResolvedOptionalTextFilter(0);
    v117[0] = (uint64_t)ResolvedTextHelper.resolve(_:with:sizeFitting:)(v114, v44, v15, v14, v117, 0);
    AGGraphSetOutputValue();
    swift_release();
    goto LABEL_37;
  }
  v104 = (_QWORD *)(v0 + *(int *)(v25 + 24));
  v18 = v112;
  swift_retain();
  swift_retain();
  v29 = v24;
  v15 = v115;
  v14 = (_QWORD *)v23;
  outlined copy of Text?(v29, v113, v115, v23);
LABEL_4:
  swift_retain();
  swift_retain();
LABEL_5:
  if ((v106 & 1) != 0)
  {
    v30 = swift_retain();
    v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v30);
    swift_release();
    if ((v31 & 1) != 0)
      goto LABEL_35;
  }
  v32 = type metadata accessor for ResolvedTextHelper(0);
  v33 = v105;
  v34 = (_QWORD *)((char *)v104 + *(int *)(v32 + 56));
  outlined init with copy of TypesettingLanguage((uint64_t)v34, (uint64_t)v105, type metadata accessor for ResolvedTextHelper.NextUpdate);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      swift_release();
      swift_release();
      v44 = v113;
      goto LABEL_37;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v34, type metadata accessor for ResolvedTextHelper.NextUpdate);
    v36 = *(double *)v33;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v38 = (char *)v33 + *(int *)(v37 + 48);
    v39 = *((_BYTE *)v33 + *(int *)(v37 + 64));
    v40 = v108;
    v41 = (uint64_t)v107;
    (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v107, v38, v108);
    v116 = v36;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v116, v41, v39, (double *)v117);
    swift_release();
    v42 = v41;
    v18 = v112;
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v42, v40);
    v43 = *(double *)v117;
    *v34 = v117[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v43 = *(double *)v33;
  }
  v61 = *(double *)AGGraphGetValue();
  swift_release();
  swift_release();
  v44 = v113;
  v15 = v115;
  if (v61 >= v43)
    goto LABEL_36;
LABEL_37:
  type metadata accessor for ResolvedOptionalTextFilter(0);
  v85 = v28 + *(int *)(v26 + 24);
  v86 = (_QWORD *)(v85 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
  outlined init with copy of TypesettingLanguage((uint64_t)v86, (uint64_t)v5, type metadata accessor for ResolvedTextHelper.NextUpdate);
  v87 = swift_getEnumCaseMultiPayload();
  if (v87)
  {
    if (v87 != 1)
      goto LABEL_45;
    outlined destroy of TypesettingConfiguration((uint64_t)v86, type metadata accessor for ResolvedTextHelper.NextUpdate);
    v88 = *(double *)v5;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v90 = (char *)v5 + *(int *)(v89 + 48);
    v91 = *((_BYTE *)v5 + *(int *)(v89 + 64));
    v93 = v108;
    v92 = v109;
    v94 = (uint64_t)v107;
    (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v107, v90, v108);
    v116 = v88;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v116, v94, v91, (double *)v117);
    v44 = v113;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v94, v93);
    v95 = *(double *)v117;
    *v86 = v117[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v95 = *(double *)v5;
  }
  if (*(double *)AGGraphGetValue() < v95)
  {
    v96 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    v97 = *(double *)(v96 + 376);
    if (v95 < v97)
      v97 = v95;
    *(double *)(v96 + 376) = v97;
    swift_release();
  }
LABEL_45:
  swift_release();
  swift_release();
  outlined consume of Text?(v114, v44, v115, (uint64_t)v14);
}

