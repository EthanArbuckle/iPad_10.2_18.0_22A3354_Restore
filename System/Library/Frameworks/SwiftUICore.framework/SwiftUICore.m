uint64_t AccessibilitySharedSupportLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = AccessibilitySharedSupportLibraryCore_frameworkLibrary;
  v6 = AccessibilitySharedSupportLibraryCore_frameworkLibrary;
  if (!AccessibilitySharedSupportLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_250656600;
    v8 = *(_OWORD *)&off_250656610;
    v1 = _sl_dlopen();
    v4[3] = v1;
    AccessibilitySharedSupportLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_2349C7388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AccessibilitySharedSupportLibrary()
{
  uint64_t v0;
  void *v2;

  v0 = AccessibilitySharedSupportLibraryCore();
  if (!v0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr;
  v6 = getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr;
  if (!getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr)
  {
    v1 = (void *)AccessibilitySharedSupportLibrary();
    v0 = dlsym(v1, "AXSSAccessibilityDescriptionForSymbolName");
    v4[3] = (uint64_t)v0;
    getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_2349C7470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id soft_AXSSAccessibilityDescriptionForSymbolName(void *a1, void *a2)
{
  id v3;
  id v4;
  void (*AXSSAccessibilityDescriptionForSymbolNameSymbolLoc)(id, id);
  void *v6;

  v3 = a1;
  v4 = a2;
  AXSSAccessibilityDescriptionForSymbolNameSymbolLoc = (void (*)(id, id))getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc();
  if (!AXSSAccessibilityDescriptionForSymbolNameSymbolLoc)
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  AXSSAccessibilityDescriptionForSymbolNameSymbolLoc(v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

BOOL _AXSwiftUIIsAnyStringEmpty(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  if (!v1)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = objc_msgSend(v1, "length") == 0;
      goto LABEL_8;
    }
LABEL_7:
    v3 = 1;
    goto LABEL_8;
  }
  objc_msgSend(v1, "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "length") == 0;

LABEL_8:
  return v3;
}

id _AXSwiftUIGetObjectFromSelectorAsAny(void *a1, const char *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    NSStringFromSelector(a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "valueForKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _AXSwiftUIUnarchiveChartDescriptor(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x24BDD1620], "unarchiveTopLevelObjectWithData:error:", a1, 0);
}

id AXSwiftUIInteractionLocationDescriptorDefaultName()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  v6 = getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  if (!getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr)
  {
    v1 = (void *)AXRuntimeLibrary();
    v0 = (id *)dlsym(v1, "AXInteractionLocationDescriptorDefaultName");
    v4[3] = (uint64_t)v0;
    getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  return *v0;
}

void sub_2349C76B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id AXAttributedStringConvert(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v1 = a1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v2 = getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  v12 = getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  if (!getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr)
  {
    v3 = (void *)AXRuntimeLibrary();
    v2 = dlsym(v3, "AXGetCFAttributedStringFromAXAttributedString");
    v10[3] = (uint64_t)v2;
    getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v9, 8);
  if (!v2)
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  v4 = (void *)((uint64_t (*)(id))v2)(v1);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v6 = objc_alloc(MEMORY[0x24BDD1458]);
    v5 = (id)objc_msgSend(v6, "initWithString:", v1, v9);
  }
  v7 = v5;

  return v7;
}

void sub_2349C778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AXRuntimeLibrary()
{
  uint64_t v0;
  void *v2;

  if (!AXRuntimeLibraryCore_frameworkLibrary)
    AXRuntimeLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = AXRuntimeLibraryCore_frameworkLibrary;
  if (!AXRuntimeLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

pthread_mutex_t *_MovableLockCreate()
{
  pthread_mutex_t *v0;
  pthread_mutex_t *v1;

  v0 = (pthread_mutex_t *)malloc_type_calloc(1uLL, 0x100uLL, 0x10E00405E494FDCuLL);
  if (!v0)
    abort();
  v1 = v0;
  pthread_mutex_init(v0, 0);
  pthread_cond_init((pthread_cond_t *)&v1[1], 0);
  pthread_cond_init((pthread_cond_t *)&v1[1].__opaque[40], 0);
  pthread_cond_init((pthread_cond_t *)&v1[2].__opaque[24], 0);
  *(_QWORD *)&v1[3].__opaque[8] = pthread_main_thread_np();
  return v1;
}

void _MovableLockDestroy(uint64_t a1)
{
  pthread_cond_destroy((pthread_cond_t *)(a1 + 64));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 112));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 160));
  pthread_mutex_destroy((pthread_mutex_t *)a1);
  free((void *)a1);
}

BOOL _MovableLockIsOwner(uint64_t a1)
{
  _opaque_pthread_t *v1;

  v1 = *(_opaque_pthread_t **)(a1 + 216);
  return pthread_self() == v1;
}

BOOL _MovableLockIsOutermostOwner(uint64_t a1)
{
  _opaque_pthread_t *v2;

  v2 = *(_opaque_pthread_t **)(a1 + 216);
  return pthread_self() == v2 && *(_DWORD *)(a1 + 224) == 1;
}

uint64_t _MovableLockLock(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = (uint64_t)pthread_self();
  if (result == *(_QWORD *)(a1 + 216))
  {
    v4 = *(_DWORD *)(a1 + 224) + 1;
  }
  else
  {
    v3 = result;
    result = pthread_mutex_lock((pthread_mutex_t *)a1);
    while (*(_QWORD *)(a1 + 216))
      result = wait_for_lock((pthread_mutex_t *)a1, v3);
    *(_QWORD *)(a1 + 216) = v3;
    v4 = 1;
  }
  *(_DWORD *)(a1 + 224) = v4;
  return result;
}

uint64_t wait_for_lock(pthread_mutex_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  int v7;
  uint64_t result;

  ++*(_DWORD *)&a1[3].__opaque[28];
  if (*(_QWORD *)&a1[3].__opaque[8] == a2)
  {
    v5 = &a1[3].__opaque[32];
    v4 = *(_QWORD *)&a1[3].__opaque[32];
    a1[3].__opaque[49] = 1;
    if (v4)
    {
      v6 = atomic_load((unint64_t *)&a1[3].__opaque[16]);
      v7 = *(_DWORD *)&a1[3].__opaque[24];
      *(_QWORD *)&a1[3].__opaque[16] = *(_QWORD *)&a1[3].__opaque[8];
      *(_DWORD *)&a1[3].__opaque[24] = v7 + 1;
      (*(void (**)(_QWORD))&a1[3].__opaque[32])(*(_QWORD *)&a1[3].__opaque[40]);
      *(_DWORD *)&a1[3].__opaque[24] = v7;
      *(_QWORD *)&a1[3].__opaque[16] = v6;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)&a1[3].__opaque[40] = 0;
      pthread_cond_signal((pthread_cond_t *)&a1[1].__opaque[40]);
    }
  }
  result = pthread_cond_wait((pthread_cond_t *)&a1[1], a1);
  if (*(_QWORD *)&a1[3].__opaque[8] == a2)
    a1[3].__opaque[49] = 0;
  --*(_DWORD *)&a1[3].__opaque[28];
  return result;
}

uint64_t _MovableLockUnlock(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 224) - 1;
  *(_DWORD *)(result + 224) = v1;
  if (!v1)
  {
    v2 = result;
    if (*(_DWORD *)(result + 228))
      pthread_cond_signal((pthread_cond_t *)(result + 64));
    *(_QWORD *)(v2 + 216) = 0;
    return pthread_mutex_unlock((pthread_mutex_t *)v2);
  }
  return result;
}

void _MovableLockSyncMain(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  pthread_t v5;
  _opaque_pthread_t *v6;

  v5 = pthread_self();
  v6 = *(_opaque_pthread_t **)(a1 + 208);
  if (v5 == v6)
  {
    a3(a2);
    return;
  }
  *(_QWORD *)(a1 + 232) = a3;
  *(_QWORD *)(a1 + 240) = a2;
  if (*(_BYTE *)(a1 + 249))
    goto LABEL_3;
  if (!*(_BYTE *)(a1 + 248))
  {
    *(_BYTE *)(a1 + 248) = 1;
    dispatch_async_f(MEMORY[0x24BDAC9B8], (void *)a1, (dispatch_function_t)sync_main_callback);
    if (*(_BYTE *)(a1 + 249))
    {
      v6 = *(_opaque_pthread_t **)(a1 + 208);
LABEL_3:
      pthread_cond_signal_thread_np((pthread_cond_t *)(a1 + 64), v6);
    }
  }
  while (*(_QWORD *)(a1 + 232))
    pthread_cond_wait((pthread_cond_t *)(a1 + 112), (pthread_mutex_t *)a1);
}

uint64_t sync_main_callback(uint64_t a1)
{
  _MovableLockLock(a1);
  *(_BYTE *)(a1 + 248) = 0;
  return _MovableLockUnlock(a1);
}

uint64_t _MovableLockWait(uint64_t a1)
{
  pthread_t v2;
  int v3;
  int v4;
  uint64_t result;

  v2 = pthread_self();
  v4 = *(_DWORD *)(a1 + 224);
  v3 = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  if (v3)
    pthread_cond_broadcast((pthread_cond_t *)(a1 + 64));
  result = pthread_cond_wait((pthread_cond_t *)(a1 + 160), (pthread_mutex_t *)a1);
  while (*(_QWORD *)(a1 + 216))
    result = wait_for_lock((pthread_mutex_t *)a1, (uint64_t)v2);
  *(_QWORD *)(a1 + 216) = v2;
  *(_DWORD *)(a1 + 224) = v4;
  return result;
}

uint64_t _MovableLockBroadcast(uint64_t a1)
{
  return pthread_cond_broadcast((pthread_cond_t *)(a1 + 160));
}

id _CorePlatformImageMakeKitImage(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  if (CorePlatformImageClass_once != -1)
    dispatch_once(&CorePlatformImageClass_once, &__block_literal_global);
  if (!CorePlatformImageClass_isValid)
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Invalid image class"), &stru_250677B70);
  v7 = (void *)objc_msgSend(objc_alloc((Class)objc_retainAutorelease((id)CorePlatformImageClass_imageClass)), "initWithCGImage:scale:orientation:", a3, a4, a1);
  if (objc_msgSend(v7, "renderingMode") == 2)
  {
    objc_msgSend(v7, "imageWithRenderingMode:", 2);
    v8 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v8;
  }
  objc_msgSend(v7, "baselineOffsetFromBottom");
  if (v9 > 0.0)
  {
    objc_msgSend(v7, "baselineOffsetFromBottom");
    objc_msgSend(v7, "imageWithBaselineOffsetFromBottom:");
    v10 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v10;
  }
  return v7;
}

BOOL _CorePlatformImageIsTemplate(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "renderingMode") == 2;
}

uint64_t _CorePlatformImageGetCGImage(uint64_t a1, void *a2)
{
  if (a2)
    return objc_msgSend(a2, "CGImage");
  else
    return 0;
}

double _CorePlatformImageGetSize(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  double Width;
  CGImage *v5;
  CGImage *v6;

  v2 = a2;
  v3 = v2;
  Width = *MEMORY[0x24BDBF148];
  if (v2)
  {
    v5 = (CGImage *)objc_msgSend(v2, "CGImage");
    if (v5)
    {
      v6 = v5;
      CGImageGetHeight(v5);
      Width = (double)CGImageGetWidth(v6);
    }
  }

  return Width;
}

uint64_t _CorePlatformImageGetScale(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "scale");
}

uint64_t _CorePlatformImageGetImageOrientation(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "imageOrientation");
}

uint64_t _CorePlatformImageGetBaselineOffsetFromBottom(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "baselineOffsetFromBottom");
}

double _CorePlatformImageGetAlignmentRect()
{
  return *MEMORY[0x24BDBF090];
}

uint64_t _CGPathParseString(CGMutablePathRef path, char *a2)
{
  int v3;
  double height;
  double v5;
  double width;
  double v7;
  char *i;
  unsigned int v9;
  uint64_t v10;
  CGFloat x;
  CGFloat y;
  CGPath *v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t result;
  CGFloat v17;
  CGFloat v18;
  char *v19;
  CGRect v20;
  double v21;
  double v22;
  uint64_t v23;

  v3 = 0;
  v23 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  height = 0.0;
  v5 = 0.0;
  width = 0.0;
LABEL_2:
  v7 = 0.0;
  do
  {
LABEL_3:
    while (2)
    {
      for (i = a2 + 1; ; ++i)
      {
        v9 = *(i - 1);
        if (v9 > 0x2E)
          break;
        if (((1 << v9) & 0x100003600) == 0)
        {
          if (((1 << v9) & 0x680000000000) != 0)
            goto LABEL_11;
          if (!*(i - 1))
            return 1;
          break;
        }
        v19 = i;
      }
      v10 = v9 - 48;
      if (v10 > 0x28)
      {
LABEL_17:
        switch(*(i - 1))
        {
          case 'c':
            if (v3 != 6)
              return 0;
            x = v20.origin.x;
            y = v20.origin.y;
            width = v20.size.width;
            height = v20.size.height;
            v7 = v21;
            v5 = v22;
            v13 = path;
            v14 = v20.size.width;
            v15 = v20.size.height;
            goto LABEL_37;
          case 'e':
          case 'p':
          case 'x':
            goto LABEL_11;
          case 'h':
            if (v3)
              return 0;
            CGPathCloseSubpath(path);
            a2 = ++v19;
            v5 = 0.0;
            goto LABEL_2;
          case 'l':
            if (v3 != 2)
              return 0;
            width = v20.origin.x;
            height = v20.origin.y;
            CGPathAddLineToPoint(path, 0, v20.origin.x, v20.origin.y);
            goto LABEL_24;
          case 'm':
            if (v3 != 2)
              return 0;
            width = v20.origin.x;
            height = v20.origin.y;
            CGPathMoveToPoint(path, 0, v20.origin.x, v20.origin.y);
LABEL_24:
            v3 = 0;
            a2 = ++v19;
            v5 = height;
            v7 = width;
            continue;
          case 'q':
            if (v3 != 4)
              return 0;
            width = v20.origin.x;
            height = v20.origin.y;
            v7 = v20.size.width;
            v5 = v20.size.height;
            goto LABEL_32;
          case 'r':
            result = 0;
            if (*i != 101 || v3 != 4)
              return result;
            v7 = v20.size.width;
            v5 = v20.size.height;
            CGPathAddRect(path, 0, v20);
            v3 = 0;
            a2 = v19 + 2;
            v19 += 2;
            continue;
          case 't':
            if (v3 != 2)
              return 0;
            width = -(width - v7 * 2.0);
            height = -(height - v5 * 2.0);
            v7 = v20.origin.x;
            v5 = v20.origin.y;
LABEL_32:
            CGPathAddQuadCurveToPoint(path, 0, width, height, v7, v5);
            goto LABEL_38;
          case 'v':
            if (v3 != 4)
              return 0;
            width = v20.origin.x;
            height = v20.origin.y;
            v17 = v20.size.width;
            v18 = v20.size.height;
            CGPathAddCurveToPoint(path, 0, v7, v5, v20.origin.x, v20.origin.y, v20.size.width, v20.size.height);
            v3 = 0;
            a2 = ++v19;
            v5 = v18;
            v7 = v17;
            continue;
          case 'y':
            if (v3 != 4)
              return 0;
            x = v20.origin.x;
            y = v20.origin.y;
            v7 = v20.size.width;
            v5 = v20.size.height;
            v13 = path;
            v14 = v20.size.width;
            v15 = v20.size.height;
LABEL_37:
            CGPathAddCurveToPoint(v13, 0, x, y, v14, v15, v7, v5);
LABEL_38:
            v3 = 0;
            a2 = ++v19;
            break;
          default:
            return 0;
        }
        continue;
      }
      break;
    }
    if (((1 << (v9 - 48)) & 0x101002003FFLL) != 0)
      break;
    if (v10 != 25)
      goto LABEL_17;
    a2 = i - 1;
  }
  while (*i != 110 || i[1] != 102);
LABEL_11:
  if (v3 != 6)
  {
    *(&v20.origin.x + v3++) = strtod_l(i - 1, &v19, 0);
    a2 = v19;
    goto LABEL_3;
  }
  return 0;
}

uint64_t _CGPathCopyDescription(const CGPath *a1, double a2)
{
  _QWORD info[3];

  info[0] = CFStringCreateMutable(0, 0);
  *(double *)&info[1] = a2;
  *(double *)&info[2] = 1.0 / a2;
  CGPathApply(a1, info, (CGPathApplierFunction)copy_path_iter);
  return info[0];
}

void copy_path_iter(uint64_t a1, uint64_t a2)
{
  UniChar v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  UniChar chars;
  char cStr[64];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (CFStringGetLength(*(CFStringRef *)a1))
    CFStringAppend(*(CFMutableStringRef *)a1, CFSTR(" "));
  switch(*(_DWORD *)a2)
  {
    case 0:
      v4 = 109;
      goto LABEL_6;
    case 1:
      v4 = 108;
LABEL_6:
      chars = v4;
      v5 = 2;
      goto LABEL_9;
    case 2:
      chars = 113;
      v5 = 4;
      goto LABEL_9;
    case 3:
      chars = 99;
      v5 = 6;
LABEL_9:
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(double *)(*(_QWORD *)(a2 + 8) + v6);
        v9 = *(double *)(a1 + 8);
        if (v9 != 0.0)
          v8 = v9 * round(v8 * *(double *)(a1 + 16));
        snprintf_l(cStr, 0x40uLL, 0, "%g ", v8);
        CFStringAppendCString(*(CFMutableStringRef *)a1, cStr, 0x8000100u);
        v6 += 8;
      }
      while (v7 != v6);
      goto LABEL_13;
    case 4:
      chars = 104;
LABEL_13:
      CFStringAppendCharacters(*(CFMutableStringRef *)a1, &chars, 1);
      break;
    default:
      return;
  }
}

CGPathRef _CGPathCreateRoundedRect(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  double v11;
  double v12;
  uint64_t v14;
  double Width;
  double Height;
  BOOL v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  if (a6 >= 0.0)
    v11 = a6;
  else
    v11 = 0.0;
  if (a7 >= 0.0)
    v12 = a7;
  else
    v12 = 0.0;
  if (v11 == 0.0 || v12 == 0.0 || CGRectIsEmpty(*(CGRect *)&a2))
    goto LABEL_23;
  if ((a1 & 1) != 0)
  {
    RBPathMakeRoundedRect();
    v14 = RBPathCopyCGPath();
    RBPathRelease();
    return (CGPathRef)v14;
  }
  v19.origin.x = a2;
  v19.origin.y = a3;
  v19.size.width = a4;
  v19.size.height = a5;
  Width = CGRectGetWidth(v19);
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  Height = CGRectGetHeight(v20);
  if (v11 + v11 > Width)
    v11 = nextafter(Width * 0.5, 0.0);
  if (v12 + v12 > Height)
    v12 = nextafter(Height * 0.5, 0.0);
  v18 = v11 < 0.0 || v11 + v11 > Width;
  if (v18 || v12 < 0.0 || v12 + v12 > Height)
  {
LABEL_23:
    v22.origin.x = a2;
    v22.origin.y = a3;
    v22.size.width = a4;
    v22.size.height = a5;
    return CGPathCreateWithRect(v22, 0);
  }
  else
  {
    v21.origin.x = a2;
    v21.origin.y = a3;
    v21.size.width = a4;
    v21.size.height = a5;
    return CGPathCreateWithRoundedRect(v21, v11, v12, 0);
  }
}

uint64_t CoreFontForSystem(uint64_t a1, uint64_t a2)
{
  return a2;
}

CGFloat CoreFontGetLeading(int a1, CTFontRef font)
{
  return CTFontGetLeading(font);
}

uint64_t CoreFontGetLineHeight(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "lineHeight");
}

id CoreMakeNSShadow(void *a1, double a2, double a3, double a4)
{
  id v7;
  id v8;

  v7 = a1;
  v8 = objc_alloc_init((Class)CoreShadowClass());
  objc_msgSend(v8, "setShadowOffset:", a2, a3);
  objc_msgSend(v8, "setShadowBlurRadius:", a4);
  objc_msgSend(v8, "setShadowColor:", v7);

  return v8;
}

id CoreShadowClass()
{
  if (CoreShadowClass_once != -1)
    dispatch_once(&CoreShadowClass_once, &__block_literal_global_0);
  if (!CoreShadowClass_isValid)
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Invalid shadow class"), &stru_250677B70);
  return (id)CoreShadowClass_shadowClass;
}

id CoreMakeNSShadowWithCustomStyleIndex(char a1, double a2)
{
  id v4;
  _QWORD block[4];
  char v7;

  v4 = objc_alloc_init((Class)CoreShadowClass());
  objc_msgSend(v4, "setShadowBlurRadius:", a2);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __custom_shadow_style_color_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v7 = a1;
  if (custom_shadow_style_color_once != -1)
    dispatch_once(&custom_shadow_style_color_once, block);
  objc_msgSend(v4, "setShadowColor:", custom_shadow_style_color_color);
  return v4;
}

void __custom_shadow_style_color_block_invoke(uint64_t a1)
{
  CGColorSpace *v2;
  CGColor *v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = xmmword_235260B00;
  v7 = unk_235260B10;
  v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF278]);
  v3 = CGColorCreate(v2, (const CGFloat *)&v6);
  CGColorSpaceRelease(v2);
  objc_msgSend((id)CoreColorGetKitColorClass(*(unsigned __int8 *)(a1 + 32)), "colorWithCGColor:", v3, v6, v7);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)custom_shadow_style_color_color;
  custom_shadow_style_color_color = v4;

  CGColorRelease(v3);
}

uint64_t CoreColorClass(char a1)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __CoreColorClass_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = a1;
  if (CoreColorClass_once != -1)
    dispatch_once(&CoreColorClass_once, block);
  if (!CoreColorClass_isValid)
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Invalid core color"), &stru_250677B70);
  return CoreColorClass_colorClass;
}

objc_class *CorePlatformColorForRGBA(char a1, double a2, double a3, double a4, double a5)
{
  objc_class *result;

  result = (objc_class *)CoreColorClass(a1);
  if (result)
    return (objc_class *)objc_msgSend([result alloc], "initWithRed:green:blue:alpha:", a2, a3, a4, a5);
  return result;
}

uint64_t CGColorForCoreColor(uint64_t a1, void *a2)
{
  if (a2)
    return objc_msgSend(a2, "CGColor");
  else
    return 0;
}

uint64_t CoreColorPlatformColorGetComponents(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = CoreColorClass(a1);
  if (result)
    return objc_msgSend(a2, "getRed:green:blue:alpha:", a3, a4, a5, a6);
  return result;
}

uint64_t NSCalendarUnitSmallestUnit(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  while (1)
  {
    v2 = qword_235260B20[v1];
    if ((v2 & a1) != 0)
      break;
    if (++v1 == 14)
      return 0;
  }
  return v2;
}

uint64_t _isWeekdayDayTemplate(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EEE d")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("EEEE d")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("ccccc d"));
  }

  return v2;
}

id _TextContainer(int a1)
{
  Class *v1;

  v1 = (Class *)&off_25060B280;
  if (!a1)
    v1 = (Class *)0x24BEBB4C0;
  return objc_alloc_init(*v1);
}

uint64_t CoreViewLayer(int a1, void *a2)
{
  if (a1 == 2)
    return (uint64_t)a2;
  else
    return objc_msgSend(a2, "layer");
}

uint64_t CoreViewSpeculativeLayer(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (NSClassFromString(CFSTR("UIView")) && (objc_opt_isKindOfClass() & 1) != 0
      || NSClassFromString(CFSTR("NSView")) && (objc_opt_isKindOfClass() & 1) != 0)
    {
      return objc_msgSend(a1, "layer");
    }
    return 0;
  }
  return (uint64_t)a1;
}

uint64_t CoreViewAddSubview(uint64_t result, void *a2, void *a3, uint64_t a4)
{
  switch((_DWORD)result)
  {
    case 0:
      return _UIKitAddSubview(a3, a2, a4);
    case 2:
      return objc_msgSend(a2, "insertSublayer:atIndex:");
    case 1:
      abort();
  }
  return result;
}

uint64_t CoreViewRemoveFromSuperview(int a1, void *a2)
{
  if (a1 == 2)
    return objc_msgSend(a2, "removeFromSuperlayer");
  else
    return objc_msgSend(a2, "removeFromSuperview");
}

uint64_t CoreViewSubviews(int a1, void *a2)
{
  if (a1 == 2)
    return objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithArray:", objc_msgSend(a2, "sublayers"));
  else
    return objc_msgSend(a2, "subviews");
}

uint64_t CoreViewMaskView(int a1, void *a2)
{
  if (a1 == 2)
    return objc_msgSend(a2, "mask");
  if (a1)
    return 0;
  return objc_msgSend(a2, "maskView");
}

uint64_t CoreViewSetNeedsDisplay(uint64_t result, void *a2)
{
  if ((result | 2) == 2)
    return objc_msgSend(a2, "setNeedsDisplay");
  return result;
}

uint64_t CoreViewSetOpacity(uint64_t result, void *a2, double a3)
{
  if ((_DWORD)result == 2)
  {
    *(float *)&a3 = a3;
    return objc_msgSend(a2, "setOpacity:", a3);
  }
  else if (!(_DWORD)result)
  {
    return objc_msgSend(a2, "setAlpha:");
  }
  return result;
}

uint64_t CoreViewSetClipsToBounds(int a1, void *a2, uint64_t a3, int a4)
{
  if (a1 != 2 && !a4)
    return objc_msgSend(a2, "setClipsToBounds:", a3);
  if (a1 != 2)
    a2 = (void *)objc_msgSend(a2, "layer");
  return objc_msgSend(a2, "setMasksToBounds:", a3);
}

uint64_t CoreViewSetTransform(uint64_t result, void *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if ((_DWORD)result == 2)
  {
    v4 = a3[1];
    v5 = *a3;
    v6 = v4;
    v7 = a3[2];
    return objc_msgSend(a2, "setAffineTransform:", &v5);
  }
  else if (!(_DWORD)result)
  {
    v3 = a3[1];
    v5 = *a3;
    v6 = v3;
    v7 = a3[2];
    return objc_msgSend(a2, "setTransform:", &v5);
  }
  return result;
}

uint64_t CoreViewSetSize(uint64_t result, void *a2)
{
  if ((result | 2) == 2)
  {
    objc_msgSend(a2, "bounds");
    return objc_msgSend(a2, "setBounds:");
  }
  return result;
}

uint64_t CoreViewGetFrame(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "frame");
}

uint64_t CoreViewSetFrame(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setFrame:");
}

void *CoreViewSetGeometry(void *result, void *a2, int a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  char v15;
  void *v21;
  double v22;
  double v23;

  v15 = a5;
  v21 = a2;
  if ((_DWORD)result == 2)
  {
    if (a4)
      result = (void *)objc_msgSend(a2, "setPosition:", a7, a8);
    if ((v15 & 1) != 0 || a6)
      return (void *)objc_msgSend(v21, "setBounds:", a9, a10, a11, a12);
  }
  else if (!(_DWORD)result)
  {
    if (a3)
    {
      if (a5)
        CoreViewSetGeometry_cold_1();
      if (a4)
        result = (void *)objc_msgSend(a2, "setCenter:", a7, a8);
      if (a6)
      {
        objc_msgSend(v21, "bounds");
        a9 = v22;
        a10 = v23;
        return (void *)objc_msgSend(v21, "setBounds:", a9, a10, a11, a12);
      }
    }
    else
    {
      result = (void *)objc_msgSend(a2, "layer");
      v21 = result;
      if (a4)
        result = (void *)objc_msgSend(result, "setPosition:", a7, a8);
      if ((v15 & 1) != 0 || (a6 & 1) != 0)
        return (void *)objc_msgSend(v21, "setBounds:", a9, a10, a11, a12);
    }
  }
  return result;
}

void *CoreViewSetMaskGeometry(void *result, void *a2, double a3, double a4, double a5, double a6)
{
  int v11;
  void *v12;

  v11 = (int)result;
  if ((_DWORD)result == 2)
  {
    result = (void *)objc_msgSend(a2, "mask");
  }
  else
  {
    if ((_DWORD)result)
      return result;
    result = (void *)objc_msgSend(a2, "maskView");
  }
  v12 = result;
  if (result)
  {
    if (v11 == 2)
    {
      objc_msgSend(a2, "frame");
      objc_msgSend(a2, "frame");
      objc_msgSend(v12, "setFrame:");
    }
    else
    {
      objc_msgSend(result, "setCenter:", a3, a4);
    }
    return (void *)objc_msgSend(v12, "setBounds:", a3, a4, a5, a6);
  }
  return result;
}

uint64_t CoreViewSetCompositingFilter(uint64_t result, void *a2, uint64_t a3)
{
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result)
      return result;
    a2 = (void *)objc_msgSend(a2, "layer");
  }
  return objc_msgSend(a2, "setCompositingFilter:", a3);
}

uint64_t CoreViewSetFilters(uint64_t result, void *a2, uint64_t a3)
{
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result)
      return result;
    a2 = (void *)objc_msgSend(a2, "layer");
  }
  return objc_msgSend(a2, "setFilters:", a3);
}

uint64_t CoreViewSetShadow(uint64_t result, void *a2, uint64_t a3, double a4, double a5, double a6)
{
  double v8;
  void *v10;

  v8 = a4;
  v10 = a2;
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result)
      return result;
    v10 = (void *)objc_msgSend(a2, "layer");
  }
  if (a3)
  {
    LODWORD(a4) = 1.0;
    objc_msgSend(v10, "setShadowOpacity:", a4);
    objc_msgSend(v10, "setShadowColor:", a3);
    objc_msgSend(v10, "setShadowRadius:", v8);
    return objc_msgSend(v10, "setShadowOffset:", a5, a6);
  }
  else
  {
    LODWORD(a4) = 0;
    return objc_msgSend(v10, "setShadowOpacity:", a4);
  }
}

Class CoreViewDisplayIgnoringOpacity(Class result, void *a2, uint64_t a3)
{
  uint64_t v5;

  if ((_DWORD)result == 1)
  {
    result = NSClassFromString(CFSTR("NSGraphicsContext"));
    if (result)
    {
      v5 = -[objc_class graphicsContextWithCGContext:flipped:](result, "graphicsContextWithCGContext:flipped:", a3, 1);
      objc_msgSend(a2, "bounds");
      return (Class)objc_msgSend(a2, "displayRectIgnoringOpacity:inContext:", v5);
    }
  }
  return result;
}

Class CoreViewMakeIntelligenceLightSourceView(uint64_t a1)
{
  Class result;
  objc_class *v3;
  void *v4;
  id v5;
  uint64_t v6;

  result = NSClassFromString(CFSTR("_UIIntelligenceLightSourceView"));
  if (result)
  {
    v3 = result;
    if (NSClassFromString(CFSTR("_UIIntelligenceLightSourceConfiguration")))
    {
      v4 = (void *)objc_opt_new();
      objc_msgSend(v4, "setPrefersAudioReactivity:", a1);
    }
    else
    {
      v4 = 0;
    }
    v5 = [v3 alloc];
    v6 = objc_msgSend(v5, "initWithFrame:configuration:", v4, *MEMORY[0x24BDBF090], *(double *)(MEMORY[0x24BDBF090] + 8), *(double *)(MEMORY[0x24BDBF090] + 16), *(double *)(MEMORY[0x24BDBF090] + 24));

    return (Class)v6;
  }
  return result;
}

id _initializeCoreGlue2()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = getSwiftUIGlue2ClassSymbolLoc_ptr;
  v7 = getSwiftUIGlue2ClassSymbolLoc_ptr;
  if (!getSwiftUIGlue2ClassSymbolLoc_ptr)
  {
    v1 = (void *)SwiftUILibrary();
    v0 = dlsym(v1, "SwiftUIGlue2Class");
    v5[3] = (uint64_t)v0;
    getSwiftUIGlue2ClassSymbolLoc_ptr = v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  ((void (*)(uint64_t))v0)(v2);
  return objc_alloc_init((Class)(id)objc_claimAutoreleasedReturnValue());
}

void sub_2349CA328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

_QWORD *_setThreadGeometryProxyData()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)_perThreadGeometryProxyData();
  *result = v1;
  return result;
}

uint64_t _threadGeometryProxyData()
{
  return *(_QWORD *)_perThreadGeometryProxyData();
}

uint64_t _CUICatalogCustomizesWidget(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasCustomizedAppearanceForWidget:", a2);
}

uint64_t _CUIDefaultDisplayGamut()
{
  if (_CUIDefaultDisplayGamut_once != -1)
    dispatch_once(&_CUIDefaultDisplayGamut_once, &__block_literal_global_1);
  return _CUIDefaultDisplayGamut_defaultGamut;
}

uint64_t _CALayerSetSplatsContentsAlpha(void *a1, const char *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)MEMORY[0x24BDE5CC0];
  if (!(_DWORD)a2)
    v2 = (_QWORD *)MEMORY[0x24BDE5CC8];
  return objc_msgSend(a1, "setContentsSwizzle:", *v2);
}

id _CAFilterCreate(unsigned int a1)
{
  id v1;
  void *v2;
  void *v3;

  v2 = (void *)MEMORY[0x24BDE56B0];
  if (a1 <= 0xE)
    v1 = **((id **)&unk_2506566F0 + (int)a1);
  objc_msgSend(v2, "filterWithType:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _CAFilterGetInput(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  _CAFilterInputKey(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

__CFString *_CAFilterInputKey(int a1)
{
  __CFString *v2;
  id *v3;

  v2 = CFSTR("inputMaskImage");
  switch(a1)
  {
    case 0:
      v3 = (id *)MEMORY[0x24BDE5AA0];
      goto LABEL_19;
    case 1:
      v3 = (id *)MEMORY[0x24BDE5AA8];
      goto LABEL_19;
    case 2:
      v3 = (id *)MEMORY[0x24BDE5AB0];
      goto LABEL_19;
    case 3:
      v3 = (id *)MEMORY[0x24BDE5AB8];
      goto LABEL_19;
    case 4:
      v3 = (id *)MEMORY[0x24BDE5AC8];
      goto LABEL_19;
    case 5:
      v3 = (id *)MEMORY[0x24BDE5AD0];
      goto LABEL_19;
    case 6:
      v3 = (id *)MEMORY[0x24BDE5AD8];
      goto LABEL_19;
    case 7:
      v3 = (id *)MEMORY[0x24BDE5AE0];
      goto LABEL_19;
    case 8:
      v3 = (id *)MEMORY[0x24BDE5AE8];
      goto LABEL_19;
    case 9:
      v3 = (id *)MEMORY[0x24BDE5AF0];
      goto LABEL_19;
    case 11:
      v3 = (id *)MEMORY[0x24BDE5B00];
      goto LABEL_19;
    case 12:
      return CFSTR("inputNormalizeEdgesTransparent");
    case 13:
      return CFSTR("inputPremultipliedAlpha");
    case 14:
      v3 = (id *)MEMORY[0x24BDE5B08];
      goto LABEL_19;
    case 15:
      v3 = (id *)MEMORY[0x24BDE5B18];
      goto LABEL_19;
    case 16:
      v3 = (id *)MEMORY[0x24BDE5B28];
      goto LABEL_19;
    case 17:
      v3 = (id *)MEMORY[0x24BDE5B40];
LABEL_19:
      v2 = (__CFString *)*v3;
      break;
    default:
      return v2;
  }
  return v2;
}

void _CAFilterSetInput(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a2;
  v6 = a1;
  _CAFilterInputKey(a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setValue:forKey:", v5, v7);

}

id _RBBlendModeGetCompositingFilterInGroup(int a1)
{
  id *v1;
  id v3;

  v1 = (id *)MEMORY[0x24BDE5BA0];
  switch(a1)
  {
    case 1:
      goto LABEL_38;
    case 2:
      v1 = (id *)MEMORY[0x24BDE5BE8];
      goto LABEL_38;
    case 3:
      v1 = (id *)MEMORY[0x24BDE5BC0];
      goto LABEL_38;
    case 4:
      v1 = (id *)MEMORY[0x24BDE5A28];
      goto LABEL_38;
    case 5:
      v1 = (id *)MEMORY[0x24BDE5B48];
      goto LABEL_38;
    case 6:
      v1 = (id *)MEMORY[0x24BDE59E8];
      goto LABEL_38;
    case 7:
      v1 = (id *)MEMORY[0x24BDE59D8];
      goto LABEL_38;
    case 8:
      v1 = (id *)MEMORY[0x24BDE5BF0];
      goto LABEL_38;
    case 9:
      v1 = (id *)MEMORY[0x24BDE5A80];
      goto LABEL_38;
    case 10:
      v1 = (id *)MEMORY[0x24BDE5A58];
      goto LABEL_38;
    case 11:
      v1 = (id *)MEMORY[0x24BDE5A70];
      goto LABEL_38;
    case 12:
      v1 = (id *)MEMORY[0x24BDE5A90];
      goto LABEL_38;
    case 13:
      v1 = (id *)MEMORY[0x24BDE5BE0];
      goto LABEL_38;
    case 14:
      v1 = (id *)MEMORY[0x24BDE59C8];
      goto LABEL_38;
    case 15:
      v1 = (id *)MEMORY[0x24BDE5B88];
      goto LABEL_38;
    case 16:
      v1 = (id *)MEMORY[0x24BDE59B8];
      goto LABEL_38;
    case 17:
      v1 = (id *)MEMORY[0x24BDE5A18];
      goto LABEL_38;
    case 18:
      v1 = (id *)MEMORY[0x24BDE5C00];
      goto LABEL_38;
    case 19:
      v1 = (id *)MEMORY[0x24BDE5C08];
      goto LABEL_38;
    case 20:
      v1 = (id *)MEMORY[0x24BDE5BF8];
      goto LABEL_38;
    case 21:
      v1 = (id *)MEMORY[0x24BDE5A50];
      goto LABEL_38;
    case 22:
      v1 = (id *)MEMORY[0x24BDE5A40];
      goto LABEL_38;
    case 23:
      v1 = (id *)MEMORY[0x24BDE5A48];
      goto LABEL_38;
    case 24:
      v1 = (id *)MEMORY[0x24BDE5A38];
      goto LABEL_38;
    case 25:
      v1 = (id *)MEMORY[0x24BDE5C38];
      goto LABEL_38;
    case 26:
      v1 = (id *)MEMORY[0x24BDE5BD0];
      goto LABEL_38;
    case 27:
      v1 = (id *)MEMORY[0x24BDE5BD8];
LABEL_38:
      v3 = *v1;
      break;
    default:
      v3 = 0;
      switch(a1)
      {
        case 1000:
          v1 = (id *)MEMORY[0x24BDE5B68];
          goto LABEL_38;
        case 1001:
          v1 = (id *)MEMORY[0x24BDE5B60];
          goto LABEL_38;
        case 1002:
          v1 = (id *)MEMORY[0x24BDE5B70];
          goto LABEL_38;
        case 1003:
          v1 = (id *)MEMORY[0x24BDE5BC8];
          goto LABEL_38;
        case 1004:
          v1 = (id *)MEMORY[0x24BDE5C18];
          goto LABEL_38;
        case 1005:
          v1 = (id *)MEMORY[0x24BDE5A60];
          goto LABEL_38;
        case 1006:
          v1 = (id *)MEMORY[0x24BDE5B90];
          goto LABEL_38;
        case 1010:
          v1 = (id *)MEMORY[0x24BDE5A30];
          goto LABEL_38;
        case 1011:
          v1 = (id *)MEMORY[0x24BDE5B50];
          goto LABEL_38;
        default:
          return v3;
      }
  }
  return v3;
}

uint64_t _CACompositingFilterGetRBBlendMode(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x24BDE5BA0]) & 1) != 0)
    {
      v3 = 1;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BE8]) & 1) != 0)
    {
      v3 = 2;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BC0]) & 1) != 0)
    {
      v3 = 3;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A28]) & 1) != 0)
    {
      v3 = 4;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5B48]) & 1) != 0)
    {
      v3 = 5;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE59E8]) & 1) != 0)
    {
      v3 = 6;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE59D8]) & 1) != 0)
    {
      v3 = 7;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BF0]) & 1) != 0)
    {
      v3 = 8;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A80]) & 1) != 0)
    {
      v3 = 9;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A58]) & 1) != 0)
    {
      v3 = 10;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A70]) & 1) != 0)
    {
      v3 = 11;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A90]) & 1) != 0)
    {
      v3 = 12;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BE0]) & 1) != 0)
    {
      v3 = 13;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE59C8]) & 1) != 0)
    {
      v3 = 14;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5B88]) & 1) != 0)
    {
      v3 = 15;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE59B8]) & 1) != 0)
    {
      v3 = 16;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A18]) & 1) != 0)
    {
      v3 = 17;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5C00]) & 1) != 0)
    {
      v3 = 18;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5C08]) & 1) != 0)
    {
      v3 = 19;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BF8]) & 1) != 0)
    {
      v3 = 20;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A50]) & 1) != 0)
    {
      v3 = 21;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A40]) & 1) != 0)
    {
      v3 = 22;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A48]) & 1) != 0)
    {
      v3 = 23;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A38]) & 1) != 0)
    {
      v3 = 24;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5C38]) & 1) != 0)
    {
      v3 = 25;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BD0]) & 1) != 0)
    {
      v3 = 26;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BD8]) & 1) != 0)
    {
      v3 = 27;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5B68]) & 1) != 0)
    {
      v3 = 1000;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5B60]) & 1) != 0)
    {
      v3 = 1001;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5B70]) & 1) != 0)
    {
      v3 = 1002;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5BC8]) & 1) != 0)
    {
      v3 = 1003;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5C18]) & 1) != 0)
    {
      v3 = 1004;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A60]) & 1) != 0)
    {
      v3 = 1005;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5B90]) & 1) != 0)
    {
      v3 = 1006;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5A30]) & 1) != 0)
    {
      v3 = 1010;
    }
    else if (objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDE5B50]))
    {
      v3 = 1011;
    }
    else
    {
      v3 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

CFMutableArrayRef _CAFilterArrayCreate()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
}

id _CANullAction()
{
  return (id)*MEMORY[0x24BDBD430];
}

const __CFArray *_CTLineGetRunCount(const __CTLine *a1)
{
  const __CFArray *result;

  result = CTLineGetGlyphRuns(a1);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const void *_CTLineGetRunAtIndex(const __CTLine *a1, CFIndex a2)
{
  const __CFArray *GlyphRuns;

  GlyphRuns = CTLineGetGlyphRuns(a1);
  return CFArrayGetValueAtIndex(GlyphRuns, a2);
}

CFDictionaryRef _CTRunGetAttributeValueForKey(const __CTRun *a1, const void *a2)
{
  CFDictionaryRef Attributes;

  Attributes = CTRunGetAttributes(a1);
  if (Attributes)
    Attributes = (id)CFDictionaryGetValue(Attributes, a2);
  return Attributes;
}

const __CFDictionary *_CTRunGetFont(const __CTRun *a1)
{
  const __CFDictionary *result;

  result = CTRunGetAttributes(a1);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x24BDC4C28]);
  return result;
}

uint64_t _NSTextLineFragmentGetCTLine(void *a1)
{
  return objc_msgSend(objc_retainAutorelease(a1), "lineRef");
}

id _NSTextLineFragmentGetOverridesHandler(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "_renderingAttributeOverridesProvider");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void _NSTextAttachmentDraw(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  id v19;
  id v20;

  v20 = a1;
  v19 = a5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v20, "_showWithBounds:attributes:runRange:textLayoutFragment:inContext:", a2, a3, a4, v19, a6, a7, a8, a9, a10);

}

uint64_t _NSTextAttachmentSetAttachmentCell(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setAttachmentCell:", a2);
}

uint64_t _NSTextAttachmentSetImage(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setImage:", a2);
}

void _NSTextCustomRenderingDelegateSetNeedsLayoutForInteraction(void *a1)
{
  id v1;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v1, "_setNeedsLayoutForInteraction");

}

void _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(void *a1)
{
  id v1;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v1, "_setNeedsFrameUpdateForCustomRendering");
  else
    objc_msgSend(v1, "setNeedsFrameUpdateForSurface:", 0);

}

void _NSTextCustomRenderingDelegateWillDraw(void *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  id v7;

  v7 = a1;
  v5 = a2;
  v6 = a3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v7, "_willDrawContentOfSurface:withBlock:", v5, v6);
  else
    v6[2](v6);

}

void _NSTextLayoutManagerRequiresCTLine(void *a1)
{
  id v1;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v1, "setRequiresCTLineRef:", 1);

}

void _NSTextEnumerateTextSegmentsInRange(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v9 = a5;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = ___NSTextEnumerateTextSegmentsInRange_block_invoke;
  v11[3] = &unk_250656680;
  v12 = v9;
  v10 = v9;
  objc_msgSend(a1, "enumerateTextSegmentAndCategoryInRange:type:options:usingBlock:", a2, a3, a4, v11);

}

uint64_t GetAttributedStringKey(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSColor")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSParagraphStyle")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSFont")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSAttachment")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CTAdaptiveImageProvider")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSBaselineOffset")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSKern")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CTTracking")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSStrikethrough")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSStrikethroughColor")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSUnderline")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSUnderlineColor")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSShadow")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x24BDD0E98]) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.ResolvableDateInterval")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.ResolvableAbsoluteDate")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.ResolvableCurrentDate")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.ResolvableTimerInterval")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.ResolvableCLKTextProvider")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.resolvableAttributeConfiguration")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.ResolvableProgress")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.ResolvableTimeDataFormatting")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.resolvableTextSegment")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NSTextScale")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilityTokenDurationTimeMMSS")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilitySpeechAttributePunctuation")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilitySpeechAttributeSpellOut")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilitySpeechAttributePitch")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilitySpeechAttributeLanguage")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilitySpeechAttributeIPANotation")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilitySpeechAttributeAnnouncementPriority")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilityTextAttributeContext")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("UIAccessibilityTextAttributeHeadingLevel")) & 1) != 0)
  {
    v2 = 29;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("SwiftUI.accessibilityLabel")))
  {
    v2 = 30;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t _LocalizeString(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  _getBestLocalization(v9, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    objc_msgSend(v9, "localizedStringForKey:value:table:localization:", v8, 0, v7, v10);
  else
    objc_msgSend(v9, "localizedStringForKey:value:table:", v8, 0, v7);
  v11 = objc_claimAutoreleasedReturnValue();

  return v11;
}

id _getBestLocalization(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  if (!v4)
    goto LABEL_9;
  objc_msgSend(MEMORY[0x24BDBCEA0], "currentLocale");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isEqual:", v5))
  {

LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v4, "languageIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_9;
  os_unfair_lock_lock((os_unfair_lock_t)&_getBestLocalization_lock);
  v7 = (void *)_getBestLocalization_cache;
  if (!_getBestLocalization_cache)
  {
    objc_msgSend(MEMORY[0x24BDD1650], "weakToStrongObjectsMapTable");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)_getBestLocalization_cache;
    _getBestLocalization_cache = v8;

    v7 = (void *)_getBestLocalization_cache;
  }
  objc_msgSend(v7, "objectForKey:", v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "localeIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKey:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&_getBestLocalization_lock);
  if (v12)
  {
    v13 = v12;
  }
  else
  {
    objc_msgSend(v3, "localizations");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x24BDD1488];
    objc_msgSend(v4, "languageIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = v17;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v21, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "preferredLocalizationsFromArray:forPreferences:", v15, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "firstObject");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    os_unfair_lock_lock((os_unfair_lock_t)&_getBestLocalization_lock);
    if (!v10)
    {
      v10 = (void *)objc_opt_new();
      objc_msgSend((id)_getBestLocalization_cache, "setObject:forKey:", v10, v3);
    }
    objc_msgSend(v4, "localeIdentifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v13, v20);

    os_unfair_lock_unlock((os_unfair_lock_t)&_getBestLocalization_lock);
  }

LABEL_10:
  return v13;
}

uint64_t _LocalizeAttributedString(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  _getBestLocalization(v9, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    objc_msgSend(v9, "localizedAttributedStringForKey:value:table:localization:", v8, 0, v7, v10);
  else
    objc_msgSend(v9, "localizedAttributedStringForKey:value:table:", v8, 0, v7);
  v11 = objc_claimAutoreleasedReturnValue();

  return v11;
}

CGImageRef _CGImageCreateCopyForImageIODestination(CGImage *a1)
{
  CGColorSpace *v2;
  uint64_t v3;

  if (!CGImageGetDecode(a1) && !CGImageGetMask() && !CGImageGetMatte() && !CGImageGetMaskingColors())
    return CGImageRetain(a1);
  v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
  v3 = CGImageCreateByMatchingToColorSpace();
  CGColorSpaceRelease(v2);
  return (CGImageRef)v3;
}

void _RBDrawingStateSetTextRunRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  if (a3 | a4)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[1] = v5;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", a4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8[2] = v6;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    RBDrawingStateSetAttribute();
  }
  else
  {
    RBDrawingStateSetAttribute();
  }
}

void _CGContextSetTextRunRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  if (a3 | a4)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[1] = v5;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", a4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8[2] = v6;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    CGContextGetDelegate();
    CGContextGetRenderingState();
    CGContextGetGState();
    CGContextDelegateOperation();

  }
  else
  {
    CGContextGetDelegate();
    CGContextGetRenderingState();
    CGContextGetGState();
    CGContextDelegateOperation();
  }
}

void _CGContextSetShapeDistance(double a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  if (a1 < 0.0)
    v2 = 3;
  else
    v2 = 2;
  v6[0] = CFSTR("value");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = CFSTR("argument");
  v7[0] = v3;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", fabs(a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v4;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  CGContextGetDelegate();
  CGContextGetRenderingState();
  CGContextGetGState();
  CGContextDelegateOperation();

}

uint64_t _CGColorSpaceGetPerceptual()
{
  if (_CGColorSpaceGetPerceptual_once != -1)
    dispatch_once(&_CGColorSpaceGetPerceptual_once, &__block_literal_global_92);
  return _CGColorSpaceGetPerceptual_space;
}

id _initializeCoreGlue()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = getSwiftUIGlueClassSymbolLoc_ptr;
  v7 = getSwiftUIGlueClassSymbolLoc_ptr;
  if (!getSwiftUIGlueClassSymbolLoc_ptr)
  {
    v1 = (void *)SwiftUILibrary();
    v0 = dlsym(v1, "SwiftUIGlueClass");
    v5[3] = (uint64_t)v0;
    getSwiftUIGlueClassSymbolLoc_ptr = v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  ((void (*)(uint64_t))v0)(v2);
  return objc_alloc_init((Class)(id)objc_claimAutoreleasedReturnValue());
}

void sub_2349CBE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

_QWORD *_setThreadTransactionData()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)_perThreadTransactionData();
  *result = v1;
  return result;
}

uint64_t _threadTransactionData()
{
  return *(_QWORD *)_perThreadTransactionData();
}

uint64_t _threadTransactionID()
{
  _DWORD *v0;
  char v1;
  uint64_t v2;
  unsigned int v3;

  v0 = (_DWORD *)_perThreadTransactionID();
  if ((v1 & 1) != 0 || (v2 = *v0, !(_DWORD)v2))
  {
    do
    {
      v3 = __ldxr(_threadTransactionID_last_id);
      v2 = v3 + 1;
    }
    while (__stxr(v2, _threadTransactionID_last_id));
    *v0 = v2;
  }
  return v2;
}

_QWORD *_setThreadLayoutData()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)_perThreadLayoutData();
  *result = v1;
  return result;
}

uint64_t _threadLayoutData()
{
  return *(_QWORD *)_perThreadLayoutData();
}

uint64_t swiftUI_v1_os_versions()
{
  return 0x7E30901FFFFFFFFLL;
}

uint64_t swiftUI_autumn_2019_os_versions()
{
  return 0x7E30902FFFFFFFFLL;
}

uint64_t swiftUI_late_fall_2019_os_versions()
{
  return 0x7E31015FFFFFFFFLL;
}

uint64_t swiftUI_v1_3_1_os_versions()
{
  return 0x7E31201FFFFFFFFLL;
}

uint64_t swiftUI_v1_4_os_versions()
{
  return 0x7E40301FFFFFFFFLL;
}

uint64_t swiftUI_late_spring_2020_os_versions()
{
  return 0x7E40415FFFFFFFFLL;
}

uint64_t swiftUI_summer_2020_os_versions()
{
  return 0x7E40601FFFFFFFFLL;
}

uint64_t swiftUI_v2_os_versions()
{
  return 0x7E40901FFFFFFFFLL;
}

uint64_t swiftUI_v2_1_os_versions()
{
  return 0x7E41015FFFFFFFFLL;
}

uint64_t swiftUI_v2_3_os_versions()
{
  return 0x7E50301FFFFFFFFLL;
}

uint64_t swiftUI_v3_0_os_versions()
{
  return 0x7E50901FFFFFFFFLL;
}

uint64_t swiftUI_v3_2_os_versions()
{
  return 0x7E51201FFFFFFFFLL;
}

uint64_t swiftUI_v3_4_os_versions()
{
  return 0x7E60301FFFFFFFFLL;
}

uint64_t swiftUI_v4_0_os_versions()
{
  return 0x7E60901FFFFFFFFLL;
}

uint64_t swiftUI_v4_4_os_versions()
{
  return 0x7E62300FFFFFFFFLL;
}

uint64_t swiftUI_v5_0_os_versions()
{
  return 0x7E70901FFFFFFFFLL;
}

uint64_t swiftUI_v5_2_os_versions()
{
  return 0x7E70D01FFFFFFFFLL;
}

uint64_t swiftUI_v6_0_os_versions()
{
  return 0x7E80000FFFFFFFFLL;
}

uint64_t swiftUI_v6_1_os_versions()
{
  return 0x7E80100FFFFFFFFLL;
}

uint64_t swiftUI_v6_2_os_versions()
{
  return 0x7E80200FFFFFFFFLL;
}

uint64_t swiftUI_v6_4_os_versions()
{
  return 0x7E80400FFFFFFFFLL;
}

uint64_t swiftUI_v7_0_os_versions()
{
  return 0x7E90000FFFFFFFFLL;
}

uint64_t _NSTextCorrectionMarkerRenderingAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(MEMORY[0x24BEBB4D0], "textCorrectionAdjustmentAttributedString:range:glyphOrigin:yDelta:", a1, a2, a3, a4);
}

uint64_t _NSTextCorrectionMarkerDraw(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(MEMORY[0x24BEBB4D0], "drawCorrectionMarkerOfType:font:origin:width:originalWidth:cgContext:", a1, a2, a3);
}

uint64_t _NSTextCorrectionMarkerBounds(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x24BEBB4D0], "boundsForCorrectionMarkerOfType:font:origin:width:originalWidth:", a1, a2);
}

void _NSMarkedTextAttributes(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  v6 = a1;
  objc_msgSend(a2, "textLineFragmentRange");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "markedTextAttributesForRange:usingBlock:", v7, v5);

}

uint64_t _NSMarkedTextDrawBackground(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "drawMarkedTextBackgroundAtPoint:context:adjustmentCallback:", a2, a3);
}

uint64_t _NSMarkedTextDrawIndicator(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "drawMarkedTextIndicatorAtPoint:context:adjustmentCallback:", a2, a3);
}

BOOL _CGFontRenderingStyleShouldQueryDilationParameters(int a1)
{
  int v1;

  if ((a1 & 2) != 0)
    v1 = 112;
  else
    v1 = 3456;
  return (v1 & a1) != 0;
}

BOOL _isBeginningOfSentence(CFStringRef theString, const __CFString *a2, const __CFLocale *a3)
{
  CFMutableStringRef MutableCopy;
  const __CFString *Copy;
  const __CFAllocator *v7;
  __CFStringTokenizer *v8;
  __CFStringTokenizer *i;
  const __CFString *v10;
  CFIndex location;
  _BOOL8 v12;
  CFRange v14;
  CFRange CurrentTokenRange;

  MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  CFStringUppercase(MutableCopy, 0);
  Copy = CFStringCreateCopy(0, MutableCopy);
  CFRelease(MutableCopy);
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v14.length = CFStringGetLength(Copy);
  v14.location = 0;
  v8 = CFStringTokenizerCreate(v7, Copy, v14, 1uLL, a3);
  for (i = v8; ; v8 = i)
  {
    if (!CFStringTokenizerAdvanceToNextToken(v8))
    {
      v12 = 0;
      goto LABEL_7;
    }
    CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(i);
    v10 = CFStringCreateWithSubstring(0, Copy, CurrentTokenRange);
    location = CFStringFind(v10, a2, 0).location;
    if (location != -1)
      break;
    CFRelease(v10);
  }
  v12 = location == 0;
  CFRelease(v10);
LABEL_7:
  CFRelease(Copy);
  CFRelease(i);
  return v12;
}

uint64_t SwiftUILibrary()
{
  uint64_t v0;
  void *v2;

  if (!SwiftUILibraryCore_frameworkLibrary)
    SwiftUILibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = SwiftUILibraryCore_frameworkLibrary;
  if (!SwiftUILibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_2349CC7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _NSTextLayoutFragmentLayoutFragmentWithKeyframe(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a1;
  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "layoutFragmentWithKeyframe:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "layout");
    if (v5)
      v6 = v5;
    else
      v6 = v3;
    v7 = v6;

  }
  else
  {
    v7 = v3;
  }

  return v7;
}

ProtocolDescriptor *_viewProtocolDescriptor()
{
  return &protocol descriptor for View;
}

ProtocolDescriptor *_viewModifierProtocolDescriptor()
{
  return &protocol descriptor for ViewModifier;
}

ProtocolDescriptor *_gestureProtocolDescriptor()
{
  return &protocol descriptor for Gesture;
}

void *_gestureModifierProtocolDescriptor()
{
  return &protocol descriptor for GestureModifier;
}

void *_styleContextProtocolDescriptor()
{
  return &protocol descriptor for StyleContext;
}

uint64_t _HighFrameRateReasonMake(int a1)
{
  return a1 | 0x270000u;
}

uint64_t _VariableFrameDurationIsSupported()
{
  if (_VariableFrameDurationIsSupported_once != -1)
    dispatch_once(&_VariableFrameDurationIsSupported_once, &__block_literal_global_3);
  return _VariableFrameDurationIsSupported_supported;
}

uint64_t _SwiftUIIsAppleInternalBuild()
{
  if (_SwiftUIIsAppleInternalBuild_once != -1)
    dispatch_once(&_SwiftUIIsAppleInternalBuild_once, &__block_literal_global_6);
  return _SwiftUIIsAppleInternalBuild_isInternal;
}

id LocalizedString(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v3 = Bundle_onceToken;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&Bundle_onceToken, &__block_literal_global_82);
  v6 = (void *)_LocalizeString((void *)Bundle___bundle, v5, CFSTR("CoreDateProvider"), v4);

  return v6;
}

uint64_t DesignatorRequiresWhitespace()
{
  return 1;
}

BOOL DropLeftRedundantDesignator(void *a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  LocalizedString(CFSTR("INTERVAL_DROP_LEFTMOST_REDUNDANT_DESIGNATOR"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  v3 = !v1 || objc_msgSend(v1, "BOOLValue");

  return v3;
}

uint64_t RemovesPunctuationFromWeekdayDay(void *a1)
{
  void *v1;
  uint64_t v2;

  LocalizedString(CFSTR("DATE_WEEKDAY_DAY_REMOVE_PUNCTUATION"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

unint64_t LocaleIs24HourMode(void *a1)
{
  const __CFLocale *v1;
  __CFDateFormatter *v2;
  const __CFString *Format;
  unint64_t v4;

  v1 = a1;
  if (LocaleIs24HourMode_onceToken != -1)
    dispatch_once(&LocaleIs24HourMode_onceToken, &__block_literal_global_4);
  objc_msgSend((id)LocaleIs24HourMode_cache, "objectForKeyedSubscript:", v1);
  v2 = (__CFDateFormatter *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v2 = CFDateFormatterCreate(0, v1, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
    objc_msgSend((id)LocaleIs24HourMode_cache, "setObject:forKeyedSubscript:", v2, v1);
  }
  Format = CFDateFormatterGetFormat(v2);
  v4 = (unint64_t)Format;
  if (Format)
    v4 = CFStringFind(Format, CFSTR("H"), 0).location != -1
      || CFStringFind((CFStringRef)v4, CFSTR("k"), 0).location != -1;
  CFRelease(v2);

  return v4;
}

uint64_t LocaleIsCJK(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = LocaleIsCJK_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&LocaleIsCJK_onceToken, &__block_literal_global_10);
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x24BDBCB20]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_msgSend((id)LocaleIsCJK__cjkSet, "containsObject:", v3);
  return v4;
}

uint64_t _AppKitAddSubview(void *a1, void *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (void *)objc_msgSend(a2, "subviews");
  v7 = objc_msgSend(v6, "count");
  if (v7 <= a3 || (result = objc_msgSend(v6, "objectAtIndexedSubscript:", a3), (void *)result != a1))
  {
    if ((void *)objc_msgSend(a1, "superview") == a2
      && a3 + 1 < v7
      && (void *)objc_msgSend(v6, "objectAtIndexedSubscript:") == a1)
    {
      a1 = (void *)objc_msgSend(v6, "objectAtIndexedSubscript:", a3);
      a3 = v7;
    }
    if (nsAnimationContextOnce != -1)
      dispatch_once_f(&nsAnimationContextOnce, 0, (dispatch_function_t)initAnimationContextClass);
    objc_msgSend((id)nsAnimationContextClass, "beginGrouping");
    objc_msgSend((id)objc_msgSend((id)nsAnimationContextClass, "currentContext"), "setDuration:", 0.0);
    if (a3 == v7)
    {
      v9 = a2;
      v10 = a1;
      v11 = 1;
    }
    else
    {
      if (a3)
      {
        v12 = objc_msgSend(v6, "objectAtIndexedSubscript:", a3);
        v9 = a2;
        v10 = a1;
        v11 = -1;
LABEL_16:
        objc_msgSend(v9, "swiftui_addRenderedSubview:positioned:relativeTo:", v10, v11, v12);
        return objc_msgSend((id)nsAnimationContextClass, "endGrouping");
      }
      v9 = a2;
      v10 = a1;
      v11 = -1;
    }
    v12 = 0;
    goto LABEL_16;
  }
  return result;
}

Class initAnimationContextClass()
{
  Class result;

  result = NSClassFromString(CFSTR("NSAnimationContext"));
  nsAnimationContextClass = (uint64_t)result;
  return result;
}

uint64_t _UIKitAddSubview(void *a1, void *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = (void *)objc_msgSend(a2, "layer");
  v7 = (void *)objc_msgSend(v6, "sublayers");
  v8 = v7;
  if (v7)
    v9 = objc_msgSend(v7, "count");
  else
    v9 = 0;
  v10 = objc_msgSend(a1, "layer");
  if (v9 <= a3 || (result = objc_msgSend(v8, "objectAtIndexedSubscript:", a3), result != v10))
  {
    if ((void *)CALayerGetSuperlayer() == v6)
    {
      if (a3 + 1 < v9 && objc_msgSend(v8, "objectAtIndexedSubscript:") == v10)
        v10 = objc_msgSend(v8, "objectAtIndexedSubscript:", a3);
      else
        v9 = a3;
      objc_msgSend(v6, "insertSublayer:atIndex:", v10, v9);
      return objc_msgSend(a2, "_invalidateSubviewCache");
    }
    else
    {
      return objc_msgSend(a2, "swiftui_insertRenderedSubview:atIndex:", a1, a3);
    }
  }
  return result;
}

id InitializeCoreTextGraphicsContextProvider()
{
  return +[CoreTextGraphicsContextProvider sharedProvider](CoreTextGraphicsContextProvider, "sharedProvider");
}

uint64_t _ViewInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

double _ViewInputs.base.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v6 = a1[5];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  result = *((double *)a1 + 3);
  v8 = a1[4];
  *(double *)(v1 + 24) = result;
  *(_QWORD *)(v1 + 32) = v8;
  *(_QWORD *)(v1 + 40) = v6;
  return result;
}

uint64_t (*_ViewInputs.base.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ViewInputs.preferences.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_DWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*_ViewInputs.preferences.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.customInputs.getter()
{
  return swift_retain();
}

uint64_t key path getter for _ViewInputs.customInputs : _ViewInputs@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t key path setter for _ViewInputs.customInputs : _ViewInputs(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_retain();
  result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t _ViewInputs.customInputs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_ViewInputs.customInputs.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return _ViewInputs.customInputs.modify;
}

uint64_t _ViewInputs.customInputs.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *v3 = v2;
    return swift_release();
  }
  else
  {
    result = swift_release();
    *v3 = v2;
  }
  return result;
}

uint64_t _ViewInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _GraphInputs.subscript.getter(a1, a2, *(_QWORD *)(a3 + 8));
}

{
  return _GraphInputs.subscript.getter(a1, a2, *(_QWORD *)(a3 + 8));
}

uint64_t _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*_ViewInputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  size_t v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  *v9 = a2;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 + 8);
  v9[2] = v4;
  v9[3] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  _GraphInputs.subscript.getter(a2, a3, v10);
  return _ViewInputs.subscript.modify;
}

void _ViewInputs.subscript.modify(Swift::Int **a1, char a2)
{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  void (*v10)(void *, Swift::Int);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[3];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    specialized _ViewListCountInputs.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized _ViewListCountInputs.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  void (*v10)(void *, Swift::Int);

  v2 = *a1;
  v3 = (void *)(*a1)[7];
  v4 = (void *)(*a1)[8];
  v5 = (*a1)[5];
  v6 = (*a1)[6];
  v7 = (*a1)[4];
  v8 = (*a1)[1];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[7], v4, v5);
    specialized _GraphInputs.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized _GraphInputs.subscript.setter((*a1)[8], v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*_ViewInputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(Swift::Int **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  size_t v15;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[2] = a5;
  v11[3] = v5;
  *v11 = a2;
  v11[1] = a3;
  v12 = *(_QWORD *)(a4 + 8);
  v11[4] = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[5] = AssociatedTypeWitness;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[6] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v11[7] = malloc(v15);
  v11[8] = malloc(v15);
  _GraphInputs.subscript.getter(a2, a3, v12);
  return _ViewInputs.subscript.modify;
}

uint64_t _ViewInputs.time.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t key path getter for _ViewInputs.time : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *key path setter for _ViewInputs.time : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *result;
  return result;
}

uint64_t _ViewInputs.time.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

_DWORD *(*_ViewInputs.time.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return _ViewInputs.time.modify;
}

_DWORD *_ViewInputs.time.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 8) = result[2];
  return result;
}

uint64_t _ViewInputs.environment.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  return *(unsigned int *)(v1 + 16);
}

uint64_t key path setter for _ViewInputs.environment : _ViewInputs(int *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;

  v3 = *a1;
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(_QWORD *)(v6 + 88) = v5;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v6;
  v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v8 | 0x20;
  return result;
}

uint64_t _ViewInputs.environment.setter(int a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(_QWORD *)(v5 + 88) = v4;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v5;
  v7 = *(_DWORD *)(v1 + 32);
  if ((v7 & 0x20) == 0)
    *(_DWORD *)(v1 + 32) = v7 | 0x20;
  return result;
}

void (*_ViewInputs.environment.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 16);
  return _ViewInputs.environment.modify;
}

void _ViewInputs.environment.modify(uint64_t a1)
{
  void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *(void **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(_QWORD *)(v6 + 88) = v5;
  swift_release();
  *(_QWORD *)(v3 + 16) = v6;
  v7 = *(_DWORD *)(v3 + 32);
  if ((v7 & 0x20) == 0)
    *(_DWORD *)(v3 + 32) = v7 | 0x20;
  free(v1);
}

uint64_t _ViewInputs.viewPhase.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t key path getter for _ViewInputs.viewPhase : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 24);
  return result;
}

_DWORD *key path setter for _ViewInputs.viewPhase : _ViewInputs(_DWORD *result, uint64_t a2)
{
  int v2;

  *(_DWORD *)(a2 + 24) = *result;
  v2 = *(_DWORD *)(a2 + 32);
  if ((v2 & 0x40) == 0)
    *(_DWORD *)(a2 + 32) = v2 | 0x40;
  return result;
}

uint64_t _ViewInputs.viewPhase.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  *(_DWORD *)(v1 + 24) = result;
  v2 = *(_DWORD *)(v1 + 32);
  if ((v2 & 0x40) == 0)
    *(_DWORD *)(v1 + 32) = v2 | 0x40;
  return result;
}

uint64_t *(*_ViewInputs.viewPhase.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 24);
  return _ViewInputs.viewPhase.modify;
}

uint64_t *_ViewInputs.viewPhase.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *result;
  int v3;
  int v4;

  v1 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = a1 + 1;
  *(_DWORD *)(v1 + 24) = v3;
  v4 = *(_DWORD *)(v1 + 32);
  if ((v4 & 0x40) == 0)
    *(_DWORD *)(v1 + 32) = v4 | 0x40;
  return result;
}

uint64_t _ViewInputs.transaction.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

uint64_t key path getter for _ViewInputs.transaction : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 28);
  return result;
}

_DWORD *key path setter for _ViewInputs.transaction : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = *result;
  return result;
}

uint64_t _ViewInputs.transaction.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 28) = result;
  return result;
}

_DWORD *(*_ViewInputs.transaction.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 28);
  return _ViewInputs.transaction.modify;
}

_DWORD *_ViewInputs.transaction.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 28) = result[2];
  return result;
}

uint64_t _ViewInputs.transform.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60);
}

_DWORD *key path setter for _ViewInputs.transform : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 60) = *result;
  *(_DWORD *)(a2 + 32) |= 4u;
  return result;
}

uint64_t _ViewInputs.transform.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 60) = result;
  *(_DWORD *)(v1 + 32) |= 4u;
  return result;
}

void _ViewInputs.changedDebugProperties.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 32);
}

_DWORD *_ViewInputs.changedDebugProperties.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*_ViewInputs.transform.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return _ViewInputs.transform.modify;
}

uint64_t _ViewInputs.transform.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_DWORD *)(*(_QWORD *)result + 32) |= 4u;
  return result;
}

uint64_t _ViewInputs.position.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64);
}

_DWORD *key path setter for _ViewInputs.position : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *result;
  *(_DWORD *)(a2 + 32) |= 8u;
  return result;
}

uint64_t _ViewInputs.position.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 64) = result;
  *(_DWORD *)(v1 + 32) |= 8u;
  return result;
}

uint64_t (*_ViewInputs.position.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return _ViewInputs.position.modify;
}

uint64_t _ViewInputs.position.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_DWORD *)(*(_QWORD *)result + 32) |= 8u;
  return result;
}

uint64_t _ViewInputs.containerPosition.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 68);
}

uint64_t _ViewInputs.containerPosition.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 68) = result;
  return result;
}

uint64_t (*_ViewInputs.containerPosition.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.size.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 72);
}

_DWORD *key path setter for _ViewInputs.size : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 72) = *result;
  *(_DWORD *)(a2 + 32) |= 0x10u;
  return result;
}

uint64_t _ViewInputs.size.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 72) = result;
  *(_DWORD *)(v1 + 32) |= 0x10u;
  return result;
}

uint64_t (*_ViewInputs.size.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return _ViewInputs.size.modify;
}

uint64_t _ViewInputs.size.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_DWORD *)(*(_QWORD *)result + 32) |= 0x10u;
  return result;
}

uint64_t variable initialization expression of _ViewInputs.safeAreaInsets()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t _ViewInputs.safeAreaInsets.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 76);
}

uint64_t _ViewInputs.safeAreaInsets.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 76) = result;
  return result;
}

uint64_t (*_ViewInputs.safeAreaInsets.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t variable initialization expression of _ViewInputs.scrollableContainerSize()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t _ViewInputs.scrollableContainerSize.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 80);
}

uint64_t _ViewInputs.scrollableContainerSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*_ViewInputs.scrollableContainerSize.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.requestsLayoutComputer.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 36) >> 1) & 1;
}

uint64_t key path getter for _ViewInputs.requestsLayoutComputer : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 36) & 2) != 0;
  return result;
}

_BYTE *key path setter for _ViewInputs.requestsLayoutComputer : _ViewInputs(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t _ViewInputs.requestsLayoutComputer.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFFD | v2;
  return result;
}

_BYTE *(*_ViewInputs.requestsLayoutComputer.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 36) & 2) != 0;
  return _ViewInputs.requestsLayoutComputer.modify;
}

_BYTE *_ViewInputs.requestsLayoutComputer.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 2;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFFFFD | v1;
  return result;
}

uint64_t _ViewInputs.needsGeometry.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 36) >> 5) & 1;
}

uint64_t key path getter for _ViewInputs.needsGeometry : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 36) & 0x20) != 0;
  return result;
}

_BYTE *key path setter for _ViewInputs.needsGeometry : _ViewInputs(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t _ViewInputs.needsGeometry.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFDF | v2;
  return result;
}

_BYTE *(*_ViewInputs.needsGeometry.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 36) & 0x20) != 0;
  return _ViewInputs.needsGeometry.modify;
}

_BYTE *_ViewInputs.needsGeometry.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 32;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFFFDF | v1;
  return result;
}

uint64_t _ViewInputs.needsDisplayListAccessibility.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 36) >> 4) & 1;
}

uint64_t key path getter for _ViewInputs.needsDisplayListAccessibility : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 36) & 0x10) != 0;
  return result;
}

_BYTE *key path setter for _ViewInputs.needsDisplayListAccessibility : _ViewInputs(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t _ViewInputs.needsDisplayListAccessibility.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFEF | v2;
  return result;
}

_BYTE *(*_ViewInputs.needsDisplayListAccessibility.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 36) & 0x10) != 0;
  return _ViewInputs.needsDisplayListAccessibility.modify;
}

_BYTE *_ViewInputs.needsDisplayListAccessibility.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 16;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFFFEF | v1;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityGeometry.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 36) >> 6) & 1;
}

uint64_t key path getter for _ViewInputs.needsAccessibilityGeometry : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 36) & 0x40) != 0;
  return result;
}

_BYTE *key path setter for _ViewInputs.needsAccessibilityGeometry : _ViewInputs(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 64;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFBF | v2;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityGeometry.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 64;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFBF | v2;
  return result;
}

_BYTE *(*_ViewInputs.needsAccessibilityGeometry.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 36) & 0x40) != 0;
  return _ViewInputs.needsAccessibilityGeometry.modify;
}

_BYTE *_ViewInputs.needsAccessibilityGeometry.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 64;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFFFBF | v1;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityViewResponders.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 36) >> 7;
}

uint64_t key path getter for _ViewInputs.needsAccessibilityViewResponders : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x80) != 0;
  return result;
}

_BYTE *key path setter for _ViewInputs.needsAccessibilityViewResponders : _ViewInputs(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 128;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFF7F | v2;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityViewResponders.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 128;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFF7F | v2;
  return result;
}

_BYTE *(*_ViewInputs.needsAccessibilityViewResponders.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x80) != 0;
  return _ViewInputs.needsAccessibilityViewResponders.modify;
}

_BYTE *_ViewInputs.needsAccessibilityViewResponders.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 128;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFFF7F | v1;
  return result;
}

uint64_t _ViewInputs.stackOrientation.getter()
{
  uint64_t v0;

  if ((*(_DWORD *)(v0 + 36) & 4) != 0)
    return (*(_DWORD *)(v0 + 36) & 8) == 0;
  else
    return 2;
}

uint64_t key path getter for _ViewInputs.stackOrientation : _ViewInputs@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if ((*(_DWORD *)(result + 36) & 4) != 0)
    v2 = (*(_DWORD *)(result + 36) & 8) == 0;
  else
    v2 = 2;
  *a2 = v2;
  return result;
}

unsigned __int8 *key path setter for _ViewInputs.stackOrientation : _ViewInputs(unsigned __int8 *result, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;

  v2 = *result;
  v3 = *(_DWORD *)(a2 + 36);
  if (v2 == 2)
  {
    v4 = v3 & 0xFFFFFFFB;
  }
  else
  {
    if ((v2 & 1) == 0)
    {
      *(_DWORD *)(a2 + 36) = v3 | 0xC;
      return result;
    }
    v4 = v3 | 4;
  }
  *(_DWORD *)(a2 + 36) = v4 & 0xFFFFFFF7;
  return result;
}

uint64_t _ViewInputs.stackOrientation.setter(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(v1 + 36);
  if (result == 2)
  {
    v3 = v2 & 0xFFFFFFFB;
  }
  else
  {
    if ((result & 1) == 0)
    {
      *(_DWORD *)(v1 + 36) = v2 | 0xC;
      return result;
    }
    v3 = v2 | 4;
  }
  *(_DWORD *)(v1 + 36) = v3 & 0xFFFFFFF7;
  return result;
}

uint64_t *(*_ViewInputs.stackOrientation.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  if ((*(_DWORD *)(v1 + 36) & 4) != 0)
    v2 = (*(_DWORD *)(v1 + 36) & 8) == 0;
  else
    v2 = 2;
  *(_BYTE *)(a1 + 8) = v2;
  return _ViewInputs.stackOrientation.modify;
}

uint64_t *_ViewInputs.stackOrientation.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *result;
  char v3;
  int v4;
  int v5;
  unsigned int v6;

  v1 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  result = a1 + 1;
  v3 = v4;
  v5 = *(_DWORD *)(v1 + 36);
  if (v4 == 2)
  {
    v6 = v5 & 0xFFFFFFFB;
  }
  else
  {
    if ((v3 & 1) == 0)
    {
      *(_DWORD *)(v1 + 36) = v5 | 0xC;
      return result;
    }
    v6 = v5 | 4;
  }
  *(_DWORD *)(v1 + 36) = v6 & 0xFFFFFFF7;
  return result;
}

uint64_t _ViewInputs.supportsVFD.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 37) >> 2) & 1;
}

uint64_t key path getter for _ViewInputs.changedDebugProperties : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

_DWORD *key path setter for _ViewInputs.changedDebugProperties : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *result;
  return result;
}

_DWORD *(*_ViewInputs.changedDebugProperties.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 32);
  return _ViewInputs.changedDebugProperties.modify;
}

_DWORD *_ViewInputs.changedDebugProperties.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 32) = result[2];
  return result;
}

__n128 _ViewInputs.init(_:position:size:transform:containerPosition:hostPreferenceKeys:)@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __n128 result;
  uint64_t v12;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *MEMORY[0x24BE096C0];
  *(_QWORD *)a7 = *(_QWORD *)a1;
  *(_DWORD *)(a7 + 8) = v7;
  *(_QWORD *)(a7 + 16) = v8;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a7 + 24) = result;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a7 + 40) = v9;
  *(_QWORD *)(a7 + 48) = v12;
  *(_DWORD *)(a7 + 56) = a6;
  *(_DWORD *)(a7 + 60) = a4;
  *(_DWORD *)(a7 + 64) = a2;
  *(_DWORD *)(a7 + 68) = a5;
  *(_DWORD *)(a7 + 72) = a3;
  *(_DWORD *)(a7 + 76) = v10;
  *(_DWORD *)(a7 + 80) = v10;
  return result;
}

uint64_t static _ViewInputs.invalidInputs(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *MEMORY[0x24BE096C0];
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v6;
  *(int32x4_t *)(a2 + 56) = vdupq_n_s32(v5);
  *(_DWORD *)(a2 + 72) = v5;
  *(_DWORD *)(a2 + 76) = v5;
  *(_DWORD *)(a2 + 80) = v5;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t _ViewInputs.mapEnvironment<A>(_:)(_QWORD *a1)
{
  uint64_t v2;

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = _GraphInputs.mapEnvironment<A>(_:)(a1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2;
}

uint64_t _ViewInputs.animatedPosition()()
{
  return _ViewInputs.animatedPosition()((uint64_t (*)(uint64_t *))CachedEnvironment.animatedPosition(for:));
}

uint64_t _ViewInputs.animatedSize()()
{
  return _ViewInputs.animatedPosition()(CachedEnvironment.animatedSize(for:));
}

uint64_t _ViewInputs.animatedCGSize()()
{
  return _ViewInputs.animatedPosition()(CachedEnvironment.animatedCGSize(for:));
}

uint64_t _ViewInputs.animatedPosition()(uint64_t (*a1)(uint64_t *))
{
  uint64_t *v1;
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v3 = *((_DWORD *)v1 + 2);
  v4 = v1[2];
  v5 = *((_DWORD *)v1 + 20);
  v9 = *v1;
  v10 = v3;
  v11 = v4;
  v6 = *(_OWORD *)(v1 + 5);
  v12 = *(_OWORD *)(v1 + 3);
  v13 = v6;
  v14 = *(_OWORD *)(v1 + 7);
  v15 = v1[9];
  v16 = v5;
  swift_beginAccess();
  v7 = a1(&v9);
  swift_endAccess();
  return v7;
}

uint64_t _ViewInputs.intern<A>(_:id:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v4;

  v4 = *a2;
  return _GraphInputs.intern<A>(_:id:)(a1, &v4, a3);
}

Swift::Void __swiftcall _ViewInputs.copyCaches()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v10 = *(_OWORD *)(v1 + 48);
  v11 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 81);
  v8 = *(_QWORD *)(v1 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 64) = v4;
  *(_QWORD *)(v9 + 72) = v5;
  *(_BYTE *)(v9 + 80) = v6;
  *(_BYTE *)(v9 + 81) = v7;
  *(_QWORD *)(v9 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v0 + 16) = v9;
}

Swift::Void __swiftcall _ViewInputs.resetCaches()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(_QWORD *)(v5 + 88) = v4;
  swift_release();
  *(_QWORD *)(v0 + 16) = v5;
}

uint64_t _ViewInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _GraphInputs.append<A, B>(_:to:)(a1, a3, a3, a4, *(_QWORD *)(a5 + 8));
}

uint64_t _ViewInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _GraphInputs.append<A, B>(_:to:)(a1, a3, a3, a4, *(_QWORD *)(a5 + 8), a6);
}

uint64_t _ViewInputs.popLast<A, B>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return _GraphInputs.popLast<A, B>(_:)(a1, a2, *(_QWORD *)(a3 + 8), a4);
}

void one-time initialization function for defaultValue()
{
  static DynamicStackOrientation.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static DisplayList.Key.defaultValue = MEMORY[0x24BEE4AF8];
  word_25426D3B8 = 0;
  byte_25426D3BA = 0;
}

{
  static ScrollablePreferenceKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static _GraphInputs.ScrollableKey.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static _GraphInputs.ScrollStateRequestKey.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static ScrollGeometryPreferenceKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static UpdateScrollStateRequestKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static ScrollPhasePreferenceKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static _GraphInputs.ScrollPhaseStateKey.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static _GraphInputs.ScrollPositionAnchorKey.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static ScrollPrefetchState.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static _GraphInputs.ScrollTargetRoleKey.defaultValue = *MEMORY[0x24BE096C0];
}

{
  static _DisplayList_StableIdentityScope.defaultValue = 0;
}

{
  static AccessibilityProperties.CustomContentListKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static AccessibilityProperties.HintsKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static AccessibilityProperties.TraitsKey.defaultValue = 0uLL;
}

{
  static AccessibilityProperties.VisibilityKey.defaultValue = 0;
}

{
  *(_QWORD *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue = &type metadata for EmptyPrivacyReductionAccessibilityProvider;
  *((_QWORD *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1) = &protocol witness table for EmptyPrivacyReductionAccessibilityProvider;
}

{
  *(_QWORD *)&static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue = &type metadata for EmptyLayoutAccessibilityProvider;
  *((_QWORD *)&static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue + 1) = &protocol witness table for EmptyLayoutAccessibilityProvider;
}

{
  static EnvironmentValues.ContentShapesKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  *(_QWORD *)&static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue = &type metadata for EmptyOpacityAccessibilityProvider;
  *((_QWORD *)&static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue + 1) = &protocol witness table for EmptyOpacityAccessibilityProvider;
}

{
  static EnvironmentValues.SymbolEffectsKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static LineSpacingKey.defaultValue = 0;
}

{
  static LineHeightMultipleKey.defaultValue = 0;
}

{
  static MaximumLineHeightKey.defaultValue = 0;
}

{
  static MinimumLineHeightKey.defaultValue = 0;
}

{
  static HyphenationFactorKey.defaultValue = 0;
}

{
  static MinimumScaleFactorKey.defaultValue = 0x3FF0000000000000;
}

{
  static BodyHeadOutdentKey.defaultValue = 0;
}

{
  static FontModifiersKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static _GraphInputs.GestureAccessibilityProviderKey.defaultValue = (uint64_t)&type metadata for EmptyGestureAccessibilityProvider;
  off_2561B8430 = &protocol witness table for EmptyGestureAccessibilityProvider;
}

{
  static TextRendererInput.defaultValue = 0;
}

{
  static Text.LayoutKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static ReusableInputs.defaultValue = 0;
  qword_254287C00 = 0;
}

{
  static EnvironmentValues.CUIAssetMatchTypesKey.defaultValue = MEMORY[0x24BEE4AF8];
}

{
  static DefaultKerningKey.defaultValue = 0;
}

{
  static DefaultTrackingKey.defaultValue = 0;
}

{
  static DefaultBaselineOffsetKey.defaultValue = 0;
}

{
  static DisplayScaleKey.defaultValue = 0x3FF0000000000000;
}

{
  qword_254267D10 = (uint64_t)&type metadata for DefaultFallbackFontProvider;
  *(_QWORD *)algn_254267D18 = &protocol witness table for DefaultFallbackFontProvider;
}

{
  static ForEachEvictionInput.defaultValue = 0;
}

{
  static _GraphInputs.SavedTransactionKey.defaultValue = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
}

{
  *(_QWORD *)&static FontDefinitionKey.defaultValue = &type metadata for DefaultFontDefinition;
  *((_QWORD *)&static FontDefinitionKey.defaultValue + 1) = &protocol witness table for DefaultFontDefinition;
}

uint64_t static DynamicStackOrientation.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return static DynamicStackOrientation.defaultValue;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance DynamicStackOrientation@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static DynamicStackOrientation.defaultValue;
  return result;
}

double _ViewInputs.withoutGeometryDependencies.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double result;
  int v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[12];
  _OWORD v25[2];
  uint64_t v26;

  v3 = *v1;
  v4 = *((_DWORD *)v1 + 2);
  v5 = v1[2];
  v6 = *((_DWORD *)v1 + 9);
  v21 = *((_DWORD *)v1 + 8);
  v8 = v1[5];
  v7 = v1[6];
  v9 = *((_DWORD *)v1 + 14);
  v10 = specialized static ViewGraph.current.getter();
  *(_QWORD *)&v22 = v1[3];
  *(_QWORD *)&v24[4] = *(uint64_t *)((char *)v1 + 76);
  LODWORD(v23) = v9;
  DWORD2(v23) = *(_DWORD *)(v10 + 248);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DWORD1(v23) = specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v25, (Swift::UInt)&type metadata for ViewTransform, 0);
  v11 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, 0);
  HIDWORD(v23) = *(_DWORD *)(v10 + 248);
  *(_DWORD *)v24 = v11;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v13 = *(_QWORD *)(v7 + 16);
  if (v13)
  {
    v14 = 0;
    v15 = 32;
    while (*(_QWORD *)(v7 + v15) != v12)
    {
      ++v14;
      v15 += 16;
      if (v13 == v14)
        goto LABEL_7;
    }
    specialized Array.remove(at:)(v14);
  }
LABEL_7:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v17 = *(_QWORD *)(v7 + 16);
  if (v17)
  {
    v18 = 0;
    v19 = 32;
    while (*(_QWORD *)(v7 + v19) != v16)
    {
      ++v18;
      v19 += 16;
      if (v17 == v18)
        goto LABEL_11;
    }
    specialized Array.remove(at:)(v18);
    swift_release();
  }
  else
  {
LABEL_11:
    swift_release();
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  HIDWORD(v22) = (v6 & 0xFFFFFFFD ^ 0x20) & v6;
  DWORD2(v22) = v21 | 0x1C;
  *(_OWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = v23;
  result = *(double *)v24;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)v24;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)&v24[8];
  return result;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(Swift::UInt a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 120);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v8 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v6 + 56) + 4 * v7);
  }
  swift_beginAccess();
  v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UnaryViewAdaptor);
  type metadata accessor for External<_UnaryViewAdaptor<EmptyView>>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<_UnaryViewAdaptor<EmptyView>> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<_UnaryViewAdaptor<EmptyView>>, MEMORY[0x24BE09678]);
  v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 120);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v8 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v6 + 56) + 4 * v7);
  }
  swift_beginAccess();
  v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<_GeometryGroupEffect> and conformance External<A>, &lazy cache variable for type metadata for External<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect);
  v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 120);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v8 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v6 + 56) + 4 * v7);
  }
  swift_beginAccess();
  v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewSize> and conformance External<A>, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize);
  v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 120);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v8 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v6 + 56) + 4 * v7);
  }
  swift_beginAccess();
  v10 = *(id *)(v3 + 24);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewOrigin> and conformance External<A>, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin);
  v9 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 120) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v9;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v4 = v3;
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 120);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v8 + 56) + 4 * v9);
  }
  swift_beginAccess();
  v12 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  outlined retain of ViewTransform(a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<ViewTransform>, (uint64_t)&type metadata for ViewTransform, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewTransform> and conformance External<A>, &lazy cache variable for type metadata for External<ViewTransform>, (uint64_t)&type metadata for ViewTransform);
  v11 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of ViewTransform(a1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v11;
}

{
  return specialized GraphHost.intern<A>(_:for:id:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v4 = v3;
  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 120);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v9 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v7 + 56) + 4 * v8);
  }
  swift_beginAccess();
  v11 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  v12 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for [ViewResponder](0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for External<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<[ViewResponder]> and conformance External<A>();
  swift_bridgeObjectRetain();
  v10 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 120) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v10;
}

{
  return specialized GraphHost.intern<A>(_:for:id:)(a1, a2, a3, &lazy cache variable for type metadata for External<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, &lazy protocol witness table cache variable for type External<_ShapeStyle_Pack> and conformance External<A>);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v4 = v3;
  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 120);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v9 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v7 + 56) + 4 * v8);
  }
  swift_beginAccess();
  v11 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  v12 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for External<GesturePhase<()>>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type External<GesturePhase<()>> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<GesturePhase<()>>, MEMORY[0x24BE09678]);
  v10 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 120) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v10;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v4 = v3;
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 120);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v8 + 56) + 4 * v9);
  }
  swift_beginAccess();
  v12 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  outlined retain of GestureDebug.Data(a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<GestureDebug.Data> and conformance External<A>, &lazy cache variable for type metadata for External<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data);
  v11 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of GestureDebug.Data(a1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v11;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v4 = v3;
  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 120);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v9 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v7 + 56) + 4 * v8);
  }
  swift_beginAccess();
  v11 = *(id *)(v4 + 24);
  AGGraphClearUpdate();
  v12 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v13 = MEMORY[0x24BEE1328];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, &lazy cache variable for type metadata for External<Bool>, v13);
  v10 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v10;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(uint64_t a1, Swift::UInt a2, char a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v21;
  uint64_t v22;

  v10 = v6;
  swift_beginAccess();
  v13 = *(_QWORD *)(v6 + 120);
  if (*(_QWORD *)(v13 + 16))
  {
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v15 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v13 + 56) + 4 * v14);
  }
  swift_beginAccess();
  v17 = *(id *)(v10 + 24);
  AGGraphClearUpdate();
  v21 = a2;
  v18 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, a4, a5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(a6, a4, a5);
  swift_bridgeObjectRetain();
  v16 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *(_QWORD *)(v10 + 120);
  *(_QWORD *)(v10 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v21, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v10 + 120) = v22;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v16;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v5 = v4;
  swift_beginAccess();
  v8 = *(_QWORD *)(v4 + 120);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v10 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v8 + 56) + 4 * v9);
  }
  swift_beginAccess();
  v12 = *(id *)(v5 + 24);
  AGGraphClearUpdate();
  v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<EnvironmentValues> and conformance External<A>, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues);
  v11 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v5 + 120);
  *(_QWORD *)(v5 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a3, a4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v5 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v11;
}

uint64_t _ViewInputs.init(withoutGeometry:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v2 = a1;
  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *a1;
  v14 = *((_DWORD *)a1 + 2);
  v13 = a1[2];
  v17 = a1[5];
  v4 = specialized static ViewGraph.current.getter();
  v16 = *(_DWORD *)(v4 + 248);
  v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, 0);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v18, (Swift::UInt)&type metadata for ViewTransform, 0);
  v7 = *(_DWORD *)(v4 + 248);
  v8 = MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  v9 = v2[3];
  v10 = v2[4];
  LODWORD(v2) = Attribute.init<A>(body:value:flags:update:)();
  v11 = *MEMORY[0x24BE096C0];
  result = swift_release();
  *(_QWORD *)a2 = v15;
  *(_DWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v8;
  *(_DWORD *)(a2 + 56) = (_DWORD)v2;
  *(_DWORD *)(a2 + 60) = v6;
  *(_DWORD *)(a2 + 64) = v16;
  *(_DWORD *)(a2 + 68) = v7;
  *(_DWORD *)(a2 + 72) = v5;
  *(_DWORD *)(a2 + 76) = v11;
  *(_DWORD *)(a2 + 80) = v11;
  return result;
}

uint64_t _ViewListInputs.withoutGeometryDependencies.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static ViewGraph.current.getter();
  specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, 0);
  memset(v3, 0, sizeof(v3));
  v4 = 0;
  specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v3, (Swift::UInt)&type metadata for ViewTransform, 0);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _ViewInputs.withoutGeometryDependencies.getter(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.reset(delta:)(int a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for ResetDeltaModifier, a3);
}

uint64_t static ResetDeltaModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 7);
  v7 = *((_DWORD *)a2 + 8);
  v8 = *((_DWORD *)a2 + 9);
  v9 = a2[5];
  v10 = a2[6];
  v13 = *((_DWORD *)a2 + 2);
  v14 = *((_DWORD *)a2 + 20);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase();
  v16 = v4;
  v17 = v13;
  v18 = v5;
  v19 = Attribute.init<A>(body:value:flags:update:)();
  v20 = v6;
  v21 = v7 | 0x40;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = *(_OWORD *)(a2 + 7);
  v26 = a2[9];
  v27 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  a3(v11, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for static Rule.initialValue.getter in conformance ResetDeltaModifier.ChildPhase(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

_DWORD *protocol witness for Rule.value.getter in conformance ResetDeltaModifier.ChildPhase@<X0>(_DWORD *a1@<X8>)
{
  int v2;
  _DWORD *result;

  v2 = *(_DWORD *)AGGraphGetValue();
  result = (_DWORD *)AGGraphGetValue();
  *a1 = v2 + 2 * *result;
  return result;
}

uint64_t protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase()
{
  return 0;
}

uint64_t protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase()
{
  return 2;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ResetDeltaModifier.ChildPhase()
{
  return 8;
}

uint64_t _ViewInputs.resolvedShapeStyles(role:mode:)(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t *v2;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *((_DWORD *)v2 + 2);
  v6 = v2[2];
  v7 = *((_DWORD *)v2 + 20);
  v12 = *v2;
  v13 = v5;
  v14 = v6;
  v8 = *(_OWORD *)(v2 + 5);
  v15 = *(_OWORD *)(v2 + 3);
  v16 = v8;
  v17 = *(_OWORD *)(v2 + 7);
  v18 = v2[9];
  v19 = v7;
  v11 = v4;
  swift_beginAccess();
  v9 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v12, &v11, a2 | ((HIDWORD(a2) & 1) << 32));
  swift_endAccess();
  return v9;
}

uint64_t default argument 2 of ProtobufEncoder.cgFloatField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int16 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int16 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOWORD(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t default argument 2 of DisplayList.Effect.clip(_:)()
{
  return 0;
}

uint64_t default argument 1 of DisplayList.Effect.mask(_:)()
{
  return 0;
}

void variable initialization expression of DisplayList.InterpolatorAnimation.value(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
}

uint64_t variable initialization expression of DisplayList.InterpolatorAnimation.animation()
{
  return 0;
}

void variable initialization expression of DisplayList.Index.identity(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.Index.serial()
{
  return 0;
}

void variable initialization expression of DisplayList.Index.archiveIdentity(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.Index.archiveSerial()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.Index.restored()
{
  return 0;
}

uint64_t default argument 2 of ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)()
{
  return 0;
}

void default argument 0 of DisplayList.Item.canonicalize(options:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of _ColorMatrix.init(_:premultiplied:)()
{
  return 0;
}

void default argument 0 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void default argument 2 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)(_DWORD *a1@<X8>)
{
  *a1 = 160;
}

uint64_t default argument 3 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)()
{
  return 3;
}

void variable initialization expression of MouseEvent.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of Event.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of LayoutSubview.place(in:layoutDirection:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [AGAttribute : WeakBox<AttributeInfoTrace.Scope>]>, (void (*)(uint64_t))type metadata accessor for [AGAttribute : WeakBox<AttributeInfoTrace.Scope>]);
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_13;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, AttributeInfoTrace.Scope>, type metadata accessor for AGSubgraphRef, (void (*)(uint64_t))type metadata accessor for AttributeInfoTrace.Scope, (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = (void *)*(v6 - 1);
    v9 = *v6;
    if (!v8)
    {
      swift_retain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    v10 = v8;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
    if ((v11 & 1) != 0)
      goto LABEL_15;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v2[6] + v12) = v10;
    *(_QWORD *)(v2[7] + v12) = v9;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_16;
    v2[2] = v15;
    v6 += 2;
    ++v5;
    if (v7 == v3)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [AttributeInfoTrace.Scope]>, type metadata accessor for [AttributeInfoTrace.Scope]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [(_:)]>, type metadata accessor for [(_:)]);
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AttributeInfoTrace.History>, (uint64_t)&type metadata for AttributeInfoTrace.History, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (_DWORD *)(a1 + 56);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = *((_QWORD *)v6 - 2);
    if (!v8)
      goto LABEL_9;
    v9 = *((_QWORD *)v6 - 3);
    v10 = *((_QWORD *)v6 - 1);
    v11 = *v6;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v12 & 1) != 0)
      goto LABEL_13;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v2[7] + 12 * result;
    *(_QWORD *)v14 = v10;
    *(_DWORD *)(v14 + 8) = v11;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_14;
    v6 += 8;
    v2[2] = v17;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void *v8;
  char v9;
  id v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, Bool>, type metadata accessor for AGSubgraphRef, (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (_BYTE *)(a1 + 40);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = (void *)*((_QWORD *)v6 - 1);
    if (!v8)
      goto LABEL_9;
    v9 = *v6;
    v10 = v8;
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
    if ((v11 & 1) != 0)
      goto LABEL_13;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v10;
    *(_BYTE *)(v2[7] + result) = v9;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_14;
    v2[2] = v14;
    v6 += 16;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (_DWORD *)(a1 + 48);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = *((_QWORD *)v6 - 1);
    if (!v8)
      goto LABEL_9;
    v9 = *((_QWORD *)v6 - 2);
    v10 = *v6;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v11 & 1) != 0)
      goto LABEL_13;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v9;
    v12[1] = v8;
    *(_DWORD *)(v2[7] + 4 * result) = v10;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_14;
    v6 += 6;
    v2[2] = v15;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, WeakBox<AnyLocationBase>>();
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TypesettingLanguage(v6, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for (AnyHashable, WeakBox<AnyLocationBase>));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = outlined init with take of WeakBox<AnyLocationBase>((uint64_t)&v17, v3[7] + 8 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<RBImageRendererProperty, Any>, (unint64_t *)&lazy cache variable for type metadata for (RBImageRendererProperty, Any), type metadata accessor for RBImageRendererProperty, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>, type metadata accessor for CFStringRef, (void (*)(void))lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (RBImageRendererProperty, Any)(v6, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, Any), type metadata accessor for CFStringRef);
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<CFStringRef, [String : Any]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, [String : CGFloat]>();
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(0, &lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, String>, type metadata accessor for CFStringRef, (void (*)(void))lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v7;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for [CFStringRef? : Int](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef?, Int>, (uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = (void *)*(v4 - 1);
    v6 = *v4;
    v7 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v5;
    *(_QWORD *)(v2[7] + v10) = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<CFStringRef, [CFStringRef? : Int]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, CGFloat>, type metadata accessor for CFStringRef, (void (*)(void))lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<CFStringRef, [CFStringRef : CGFloat]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<CFStringRef, [String]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<CFStringRef, [CFDictionaryRef]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>, &lazy cache variable for type metadata for (RBSymbolAnimationOptionKey, Any), type metadata accessor for RBSymbolAnimationOptionKey, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any), type metadata accessor for NSAttributedStringKey, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<RBDisplayListRenderKey, Any>, (unint64_t *)&lazy cache variable for type metadata for (RBDisplayListRenderKey, Any), type metadata accessor for RBDisplayListRenderKey, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, SystemColorType>, (uint64_t)&type metadata for SystemColorType, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  type metadata accessor for (String, AccessibilityCustomAttributes.Value)();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (_QWORD *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>();
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (uint64_t)v6 + *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of TypesettingLanguage(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for (String, AccessibilityCustomAttributes.Value));
    v15 = *v6;
    v16 = v6[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v6, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for AccessibilityCustomAttributes.Value();
    result = outlined init with take of AccessibilityCustomAttributes.Value(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, CGColorRef>, type metadata accessor for CFStringRef, type metadata accessor for CGColorRef, (void (*)(void))lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<AGDescriptionOption, Any>, (unint64_t *)&lazy cache variable for type metadata for (AGDescriptionOption, Any), type metadata accessor for AGDescriptionOption, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, String>, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v4 = (unint64_t)(v3 + 8);
    v5 = (_DWORD *)(a1 + 56);
    while (1)
    {
      v23 = v1;
      v6 = *(v5 - 6);
      v7 = *(v5 - 5);
      v8 = *(v5 - 4);
      v9 = *(v5 - 3);
      v10 = *(v5 - 2);
      v11 = *((unsigned __int8 *)v5 - 4);
      v12 = *((_BYTE *)v5 - 3);
      v13 = *v5;
      v14 = v4 & 0xFFFF000000000000 | v10 | (v11 << 32);
      v15 = 0x10000000000;
      if (!v12)
        v15 = 0;
      v22 = v15 | v14;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v6 | (v7 << 32), v8 | (v9 << 32), v15 | v14);
      if ((v17 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v18 = v3[6] + 24 * result;
      *(_DWORD *)v18 = v6;
      *(_DWORD *)(v18 + 4) = v7;
      *(_DWORD *)(v18 + 8) = v8;
      *(_DWORD *)(v18 + 12) = v9;
      *(_DWORD *)(v18 + 16) = v10;
      *(_BYTE *)(v18 + 20) = v11;
      *(_BYTE *)(v18 + 21) = v12;
      *(_DWORD *)(v3[7] + 4 * result) = v13;
      v19 = v3[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_12;
      v3[2] = v21;
      v5 += 7;
      v4 = v22;
      v1 = v23 - 1;
      if (v23 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>();
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return (unint64_t)v3;
  for (i = a1 + 32; ; i += 16)
  {
    v6 = *(_BYTE *)i;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)i);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v6;
    *(_QWORD *)(v3[7] + 8 * result) = v4;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_13;
    v3[2] = v11;
    if (!--v1)
    {
      swift_bridgeObjectRetain();
      return (unint64_t)v3;
    }
    swift_bridgeObjectRetain();
    v4 = *(_QWORD *)(i + 24);
    if (!v4)
      return (unint64_t)v3;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<GestureDependency, Int>, (void (*)(void))lazy protocol witness table accessor for type GestureDependency and conformance GestureDependency);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *((unsigned __int8 *)v4 - 8);
    if (v5 == 4)
      break;
    v6 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*((unsigned __int8 *)v4 - 8));
    if ((v8 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v4 += 2;
    v3[2] = v11;
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<ObjectIdentifier, Any>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 40)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)&v11, &lazy cache variable for type metadata for (ObjectIdentifier, Any));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = (unint64_t)outlined init with take of Any(&v12, (_OWORD *)(v3[7] + 32 * result));
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 40; ; i += 56)
    {
      v5 = *(_QWORD *)(i - 8);
      v6 = *(_BYTE *)i;
      v7 = *(_QWORD *)(i + 8);
      v8 = *(_QWORD *)(i + 16);
      v9 = *(_QWORD *)(i + 24);
      v10 = *(_QWORD *)(i + 32);
      v11 = *(_BYTE *)(i + 40);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, *(_BYTE *)i);
      if ((v13 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v14 = v3[6] + 16 * result;
      *(_QWORD *)v14 = v5;
      *(_BYTE *)(v14 + 8) = v6;
      v15 = v3[7] + 40 * result;
      *(_QWORD *)v15 = v7;
      *(_QWORD *)(v15 + 8) = v8;
      *(_QWORD *)(v15 + 16) = v9;
      *(_QWORD *)(v15 + 24) = v10;
      *(_BYTE *)(v15 + 32) = v11;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v3[2] = v18;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for [ObjectIdentifier : ScrollStateRequest](0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (EventID, EventType)(i, (uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for (ObjectIdentifier, ScrollStateRequest), (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = outlined init with take of ScrollStateRequest(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt v6;
  unint64_t result;
  char v8;
  Swift::UInt *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  __int128 v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for [EventID : EventType](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x24BEE30A0]);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 56)
    {
      outlined init with copy of (EventID, EventType)(i, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for (EventID, EventType), (unint64_t *)&lazy cache variable for type metadata for EventType);
      v5 = v13;
      v6 = v14;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = (Swift::UInt *)(v3[6] + 16 * result);
      *v9 = v5;
      v9[1] = v6;
      result = outlined init with take of ScrollStateRequest(&v15, v3[7] + 40 * result);
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 104); ; i = (_OWORD *)((char *)i + 88))
    {
      v20 = v1;
      v5 = *((_QWORD *)i - 9);
      v6 = *((_BYTE *)i - 64);
      v7 = *((_QWORD *)i - 7);
      v8 = *((_BYTE *)i - 48);
      v9 = *((_QWORD *)i - 5);
      v10 = *((_QWORD *)i - 4);
      v12 = *((_QWORD *)i - 3);
      v11 = *((_QWORD *)i - 2);
      v21 = *((_BYTE *)i - 8);
      v22 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
      if ((v14 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v15 = v3[6] + 32 * result;
      *(_QWORD *)v15 = v5;
      *(_BYTE *)(v15 + 8) = v6;
      *(_QWORD *)(v15 + 16) = v7;
      *(_BYTE *)(v15 + 24) = v8;
      v16 = v3[7] + 56 * result;
      *(_QWORD *)v16 = v9;
      *(_QWORD *)(v16 + 8) = v10;
      *(_QWORD *)(v16 + 16) = v12;
      *(_QWORD *)(v16 + 24) = v11;
      *(_BYTE *)(v16 + 32) = v21;
      *(_OWORD *)(v16 + 40) = v22;
      v17 = v3[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v3[2] = v19;
      swift_retain();
      v1 = v20 - 1;
      if (v20 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CAHostingLayerEvent.MouseButton, Int>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ScrollAnchorStorage.Role, UnitPoint>, (void (*)(void))lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 40); ; i = (_OWORD *)((char *)i + 24))
    {
      v5 = *((_BYTE *)i - 8);
      v11 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, Transaction>, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v4 = (_QWORD *)(a1 + 64);
    while (1)
    {
      v5 = *(v4 - 4);
      v7 = *(v4 - 2);
      v8 = *((_BYTE *)v4 - 8);
      v9 = *v4;
      v6 = *((_BYTE *)v4 - 24);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v12 = v3[6] + 32 * result;
      *(_QWORD *)v12 = v5;
      *(_BYTE *)(v12 + 8) = v6;
      *(_QWORD *)(v12 + 16) = v7;
      *(_BYTE *)(v12 + 24) = v8;
      *(_QWORD *)(v3[7] + 8 * result) = v9;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v4 += 5;
      v3[2] = v15;
      swift_retain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<_ProposedSize, CGSize>();
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 64); ; i += 3)
    {
      v5 = *((_QWORD *)i - 4);
      v6 = *((_BYTE *)i - 24);
      v7 = *((_QWORD *)i - 2);
      v8 = *((_BYTE *)i - 8);
      v15 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v11 = v3[6] + 32 * result;
      *(_QWORD *)v11 = v5;
      *(_BYTE *)(v11 + 8) = v6;
      *(_QWORD *)(v11 + 16) = v7;
      *(_BYTE *)(v11 + 24) = v8;
      *(_OWORD *)(v3[7] + 16 * result) = v15;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_13;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, a2, type metadata accessor for AGSubgraphRef, a3, (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  result = swift_retain();
  v7 = 0;
  v8 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    v10 = (void *)*(v8 - 1);
    v11 = *v8;
    if (!v10)
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    v12 = v10;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    if ((v13 & 1) != 0)
      goto LABEL_15;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = 8 * result;
    *(_QWORD *)(v4[6] + v14) = v12;
    *(_QWORD *)(v4[7] + v14) = v11;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_16;
    v4[2] = v17;
    v8 += 2;
    ++v7;
    if (v9 == v5)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 16)
    && (type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Font.RatioKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey), v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(), (v3 = *(_QWORD *)(a1 + 16)) != 0))
  {
    v4 = a1 + 32;
    swift_retain();
    while (1)
    {
      v5 = *(_BYTE *)v4;
      v6 = *(_BYTE *)(v4 + 1);
      v7 = *(_QWORD *)(v4 + 8);
      specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)v4);
      if ((v9 & 1) != 0)
        break;
      *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
      v10 = (char *)(v2[6] + 2 * v8);
      *v10 = v5;
      v10[1] = v6;
      *(_QWORD *)(v2[7] + 8 * v8) = v7;
      v11 = v2[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v2[2] = v13;
      v4 += 16;
      if (!--v3)
      {
        swift_release();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(_QWORD))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  a2(0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(_QWORD), unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  a2(0);
  v9 = static _DictionaryStorage.allocate(capacity:)();
  v10 = (_QWORD *)v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  v12 = v9 + 64;
  v13 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (RBImageRendererProperty, Any)(v13, (uint64_t)&v20, a3, a4);
    v14 = v20;
    result = a5(v20);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v10[6] + 8 * result) = v14;
    result = (unint64_t)outlined init with take of Any(&v21, (_OWORD *)(v10[7] + 32 * result));
    v17 = v10[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v10[2] = v19;
    v13 += 40;
    if (!--v11)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests._updateRequests()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests._scrollToRequest()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests._scrollPosition()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.cycleDetector@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  uint64_t Context;
  uint64_t v6;
  int v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v6 = Context;
    swift_retain();

    swift_beginAccess();
    v7 = *(_DWORD *)(v6 + 64);
    result = swift_release();
    *(_DWORD *)a1 = v7;
    *(_QWORD *)(a1 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.lastResetSeed()
{
  return 0;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.lastUpdateSeed()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.lastScrollPhase()
{
  return 0;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.scrollToChanged()
{
  return 0;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.enqueuedUpdates()
{
  unint64_t v0;
  uint64_t result;

  v0 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<[ObjectIdentifier : ScrollStateRequest]>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t variable initialization expression of ScrollToScrollStateRequest.anchor()
{
  return 0;
}

uint64_t variable initialization expression of ScrollToScrollStateRequest._scrollable()
{
  return 0;
}

double variable initialization expression of ScrollStateRequestTransform.oldRequest@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of ScrollStateRequestTransform.oldResetSeed()
{
  return 0;
}

uint64_t variable initialization expression of ScrollGeometryState._transform()
{
  return 0;
}

uint64_t default argument 2 of GraphicsContext.ResolvedShading.gradient(_:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.cgFloatField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 0 of ScrollPhaseState.init(phase:velocity:)()
{
  return 0;
}

double default argument 1 of ScrollPhaseState.init(phase:velocity:)()
{
  return 0.0;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata.stableIDsAttachment()
{
  return 0;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata.dataAttachment()
{
  return 0;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata.preferredBundleLanguage()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_preferredLocalizations);

  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata._preferredCompositionLanguage()
{
  return CTParagraphStyleGetCompositionLanguageForLanguage();
}

uint64_t default argument 0 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)()
{
  return 13;
}

uint64_t default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)()
{
  return MEMORY[0x24BEE4AF8];
}

void default argument 5 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of SystemFormatStyle.DateReference.sizeVariant(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 2 of static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 2 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 1;
}

uint64_t default argument 5 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 2 of static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 5 of static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 8236;
}

uint64_t default argument 4 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 1;
}

uint64_t default argument 2 of static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)()
{
  return 1;
}

uint64_t default argument 2 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 1;
}

uint64_t default argument 4 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 1;
}

uint64_t default argument 5 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 7 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 8236;
}

uint64_t variable initialization expression of ScrollPosition.ViewID.anchor()
{
  return 0;
}

uint64_t variable initialization expression of ScrollPositionToValue.anchor()
{
  return 0;
}

uint64_t variable initialization expression of ValueToScrollPosition.anchor()
{
  return 0;
}

uint64_t variable initialization expression of GestureGraph.rootResponder()
{
  return 0;
}

uint64_t variable initialization expression of GestureGraph.delegate()
{
  return 0;
}

uint64_t variable initialization expression of GestureGraph.eventBindingManager()
{
  uint64_t v0;

  type metadata accessor for EventBindingManager();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 48) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  return v0;
}

uint64_t variable initialization expression of GestureGraph._rootPhase()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of GestureGraph._gestureDebug()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of GestureGraph._gestureCategoryAttr()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of GestureGraph._gestureLabelAttr()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of GestureGraph._isCancellableAttr()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of GestureGraph._requiredTapCountAttr()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of GestureGraph._gestureDependencyAttr()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ScrollPositionBindingModifier.anchor()
{
  return 0;
}

uint64_t default argument 1 of SExpPrinter.init(tag:singleLine:)()
{
  return 0;
}

uint64_t default argument 1 of SExpPrinter.print(_:newline:)()
{
  return 1;
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.oldCache()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.newCache()
{
  return MEMORY[0x24BEE4B00];
}

void variable initialization expression of DisplayList.GraphicsRenderer.index(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

void variable initialization expression of DisplayList.GraphicsRenderer.time(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of DisplayList.GraphicsRenderer.stableIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.inTransitionGroup()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.stateHashes()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of GraphicsContext.fill(_:with:style:)()
{
  return 256;
}

uint64_t default argument 2 of GraphicsContext.draw(_:in:style:shading:)()
{
  return 256;
}

uint64_t default argument 2 of ResolvedStyledText.draw(in:with:applyingMarginOffsets:context:renderer:)()
{
  return 1;
}

uint64_t default argument 3 of ResolvedStyledText.draw(in:with:applyingMarginOffsets:context:renderer:)()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

double variable initialization expression of DisplayList.InterpolatorGroup.maxDuration()
{
  return INFINITY;
}

double variable initialization expression of DisplayList.UnaryInterpolatorGroup.layer@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;

  if (one-time initialization token for infinity != -1)
    swift_once();
  result = *(double *)&static Time.infinity;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

float variable initialization expression of DisplayList.UnaryInterpolatorGroup.contentsScale()
{
  return 0.0;
}

void variable initialization expression of DisplayList.UnaryInterpolatorGroup.rasterizationOptions(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 160;
  *(_BYTE *)(a1 + 16) = 3;
}

uint64_t variable initialization expression of ScrollPrefetchState.deadline()
{
  return 0;
}

uint64_t variable initialization expression of ScrollPrefetchState.edges()
{
  return 0;
}

uint64_t default argument 0 of ScrollPrefetchState.init(deadline:)()
{
  return 0;
}

uint64_t default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = _threadTransactionID();
  *a1 = result;
  return result;
}

double variable initialization expression of Image.LayoutMetrics.backgroundSize()
{
  return 0.0;
}

uint64_t variable initialization expression of Image.Resolved._basePlatformItemImage()
{
  return 0;
}

void variable initialization expression of Image.Resolved.backgroundShape(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void variable initialization expression of Image.NamedResolved.symbolRenderingMode(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t variable initialization expression of Image.NamedResolved.isTemplate()
{
  return 0;
}

uint64_t variable initialization expression of PlatformImageRepresentableContext.tintColor()
{
  return 0;
}

uint64_t variable initialization expression of PlatformImageRepresentableContext.foregroundStyle()
{
  return 0;
}

uint64_t variable initialization expression of ScrollTarget.anchor()
{
  return 0;
}

uint64_t variable initialization expression of RangeSet<>.IndexSequence.Iterator.index()
{
  return 0;
}

uint64_t variable initialization expression of RangeSet<>.IndexSequence.Iterator.offset()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  char *v2;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v2 = (char *)&v5 - v1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x23B7C7558](&unk_235260F38, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_checkMetadataState();
  return MEMORY[0x23B7C742C](v2);
}

uint64_t default argument 2 of ProtobufEncoder.stringField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.uintField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.intField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.floatField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.BOOLField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.doubleField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 0 of ArrayWith2Inline.removeAll(keepingCapacity:)()
{
  return 0;
}

uint64_t variable initialization expression of _DisplayList_StableIdentityMap.map()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of _DisplayList_StableIdentityRoot.scopes()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of _DisplayList_StableIdentityRoot.map(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _DisplayList_StableIdentityScope.map(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of _DisplayList_StableIdentityScope.serial()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.uintField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 1 of SystemHoverEffect.init(info:isEnabled:)()
{
  return 1;
}

float default argument 3 of static SystemColorDefinition.systemRGB(_:_:_:_:)()
{
  return 100.0;
}

void variable initialization expression of SystemHoverEffect.info(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t variable initialization expression of AttributeInvalidatingSubscriber.host()
{
  return 0;
}

double variable initialization expression of AttributeInvalidatingSubscriber.state@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = _threadTransactionID();
  *a1 = result;
  return result;
}

uint64_t default argument 4 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)()
{
  return 1;
}

double variable initialization expression of _RotationEffect.Data.angle()
{
  return 0.0;
}

double variable initialization expression of _RotationEffect.Data.anchor()
{
  return 0.0;
}

void default argument 2 of _RotationEffect.Data.init(_:size:layoutDirection:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of HostPreferencesCombiner._values()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of HostPreferencesCombiner.children()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[3 * a1];
    v10 = v8[4];
    v9 = v8 + 4;
    v11 = *((_DWORD *)v9 + 2);
    v12 = v9[2];
    *(_QWORD *)a2 = v10;
    *(_DWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    v13 = v6 - 1 - a1;
    if (v13 >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 3, 24 * v13);
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  char v11;
  int v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[6 * a1];
    v10 = *((_OWORD *)v8 + 2);
    v9 = v8 + 4;
    v11 = *((_BYTE *)v9 + 16);
    v12 = *((_DWORD *)v9 + 10);
    *(_OWORD *)a2 = v10;
    *(_BYTE *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v9 + 3);
    *(_DWORD *)(a2 + 40) = v12;
    if ((uint64_t)(v7 - a1) >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 6, 48 * (v7 - a1));
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  __int128 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  v6 = *((_QWORD *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[20 * a1];
    v9 = *((_OWORD *)v7 + 2);
    v8 = v7 + 32;
    v10 = v8[4];
    v11 = v6 - 1;
    *(_OWORD *)a2 = v9;
    *(_DWORD *)(a2 + 16) = v10;
    v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      result = (uint64_t)memmove(v8, v8 + 5, 20 * v12);
      *((_QWORD *)v5 + 2) = v11;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[14 * a1];
    v9 = v7[4];
    v8 = v7 + 4;
    v10 = *((_WORD *)v8 + 4);
    v11 = v6 - 1;
    v12 = *((_BYTE *)v8 + 10);
    v13 = v8[4];
    v14 = v8[5];
    v15 = *((_DWORD *)v8 + 12);
    v16 = *((_BYTE *)v8 + 52);
    v17 = v8[9];
    v18 = v8[10];
    v19 = *((_BYTE *)v8 + 104);
    *(_QWORD *)a2 = v9;
    *(_WORD *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 10) = v12;
    *(_OWORD *)(a2 + 16) = *((_OWORD *)v8 + 1);
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v14;
    *(_DWORD *)(a2 + 48) = v15;
    *(_BYTE *)(a2 + 52) = v16;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v8 + 7);
    *(_QWORD *)(a2 + 72) = v17;
    *(_QWORD *)(a2 + 80) = v18;
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(v8 + 11);
    *(_BYTE *)(a2 + 104) = v19;
    if ((uint64_t)(v11 - a1) >= 0)
    {
      result = (uint64_t)memmove(v8, v8 + 14, 112 * (v11 - a1));
      v5[2] = v11;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  int v11;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  v6 = *((_QWORD *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[28 * a1];
    v10 = *((_OWORD *)v8 + 2);
    v9 = v8 + 32;
    v11 = *((_DWORD *)v9 + 6);
    *(_OWORD *)a2 = v10;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)v9 + 2);
    *(_DWORD *)(a2 + 24) = v11;
    if ((uint64_t)(v7 - a1) >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 28, 28 * (v7 - a1));
      *((_QWORD *)v5 + 2) = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  int v15;
  char v16;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[15 * a1];
    v9 = *((_OWORD *)v7 + 2);
    v10 = *((_OWORD *)v7 + 3);
    v8 = v7 + 4;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    v11 = *((_OWORD *)v8 + 3);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)v8 + 2);
    *(_OWORD *)(a2 + 48) = v11;
    v12 = *((_OWORD *)v8 + 5);
    v13 = *((_OWORD *)v8 + 6);
    *(_OWORD *)(a2 + 64) = *((_OWORD *)v8 + 4);
    *(_OWORD *)(a2 + 80) = v12;
    v14 = v6 - 1;
    v15 = *((_DWORD *)v8 + 28);
    v16 = *((_BYTE *)v8 + 116);
    *(_OWORD *)(a2 + 96) = v13;
    *(_DWORD *)(a2 + 112) = v15;
    *(_BYTE *)(a2 + 116) = v16;
    if ((uint64_t)(v14 - a1) >= 0)
    {
      result = (uint64_t)memmove(v8, v8 + 15, 120 * (v14 - a1));
      v5[2] = v14;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[4 * a1];
    v10 = *((_OWORD *)v8 + 2);
    v9 = v8 + 4;
    v11 = *((_DWORD *)v9 + 4);
    v12 = v9[3];
    *(_OWORD *)a2 = v10;
    *(_DWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v12;
    if ((uint64_t)(v7 - a1) >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 4, 32 * (v7 - a1));
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[3 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 7, 24 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[4 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 8, 32 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[2 * a1];
    v10 = *((_OWORD *)v8 + 2);
    v9 = v8 + 4;
    *a2 = v10;
    v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 2, 16 * v11);
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = a2(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      *v2 = v5;
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t variable initialization expression of AccessibilityCustomAttributes.attributes()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

void variable initialization expression of BitVector.vector(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ConditionalMetadata.ids()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of CAHostingLayer.renderer()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 1;
  *(_QWORD *)(v1 + 16) = v0;
  return v1;
}

uint64_t variable initialization expression of CAHostingLayer.eventBindingManager()
{
  uint64_t v0;

  type metadata accessor for EventBindingManager();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 48) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  return v0;
}

uint64_t variable initialization expression of CAHostingLayer.propertiesNeedingUpdate@<X0>(_WORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static ViewRendererHostProperties.all;
  return result;
}

void variable initialization expression of CAHostingLayer.renderingPhase(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CAHostingLayer.isRendering()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.isHiddenForReuse()
{
  return 0;
}

void variable initialization expression of CAHostingLayer.currentTimestamp(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CAHostingLayer.externalUpdateCount()
{
  return 0;
}

double variable initialization expression of CAHostingLayer.environmentOverride@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_235260EF0;
  return result;
}

uint64_t default argument 1 of ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)()
{
  return 1;
}

double variable initialization expression of CAHostingLayer.safeAreaInsetsOverride@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

void variable initialization expression of CAHostingLayer.accessibilityVersion(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CAHostingLayer.canAdvanceTimeAutomatically()
{
  return 1;
}

uint64_t variable initialization expression of CAHostingLayer.allowFrameChanges()
{
  return 1;
}

void variable initialization expression of CAHostingLayer.nextTimerTime(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t variable initialization expression of CAHostingLayer.updateTimer()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.isUpdating()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.needsDeferredUpdate()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.focusedResponder()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.$__lazy_storage_$_eventContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CAHostingLayerEvent.Context();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

double default argument 0 of ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)()
{
  return 0.0;
}

uint64_t default argument 1 of ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)()
{
  return 1;
}

uint64_t default argument 0 of EventBindingManager.reset(resetForwardedEventDispatchers:)()
{
  return 0;
}

double default argument 0 of ViewRendererHost.renderAsync(interval:targetTimestamp:)()
{
  return 0.0;
}

uint64_t variable initialization expression of CodableOptional.base@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)()
{
  return *MEMORY[0x24BE096C0];
}

double variable initialization expression of LeafLayoutEngine.cache@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 1;
  return result;
}

double default argument 0 of ViewSizeCache.init(cache:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 1;
  return result;
}

void default argument 1 of TimelineSchedule.entries(within:mode:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t default argument 1 of ResolvedGradient.init(stops:colorSpace:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for default != -1)
    result = swift_once();
  *a1 = static ResolvedGradient.ColorSpace.default;
  return result;
}

void variable initialization expression of ResolvedGradient.Stop.interpolation(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t default argument 2 of ProtobufEncoder.floatField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedGradientVector.stops()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of ResolvedGradientVector.colorSpace(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

float default argument 3 of Color.Resolved.init(linearRed:linearGreen:linearBlue:opacity:)()
{
  return 1.0;
}

float default argument 1 of Color.Resolved.init(linearWhite:opacity:)()
{
  return 1.0;
}

float default argument 3 of Color.Resolved.init(red:green:blue:opacity:)()
{
  return 1.0;
}

float default argument 1 of Color.Resolved.init(white:opacity:)()
{
  return 1.0;
}

float default argument 3 of Color.Resolved.init(linearDisplayP3Red:green:blue:opacity:)()
{
  return 1.0;
}

float default argument 3 of Color.Resolved.init(displayP3Red:green:blue:opacity:)()
{
  return 1.0;
}

uint64_t variable initialization expression of UpdateCycleDetector.updateSeed()
{
  uint64_t v0;
  uint64_t v1;

  v0 = specialized static GraphHost.currentHost.getter();
  swift_beginAccess();
  v1 = *(unsigned int *)(v0 + 64);
  swift_release();
  return v1;
}

uint64_t variable initialization expression of UpdateCycleDetector.lastSeed()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of UpdateCycleDetector.ttl()
{
  return 0;
}

uint64_t variable initialization expression of UpdateCycleDetector.hasLogged()
{
  return 0;
}

uint64_t default argument 1 of UpdateCycleDetector.dispatch(label:isDebug:)()
{
  return 0;
}

uint64_t variable initialization expression of ValueCycleDetector.updateSeed()
{
  uint64_t v0;
  uint64_t v1;

  v0 = specialized static GraphHost.currentHost.getter();
  swift_beginAccess();
  v1 = *(unsigned int *)(v0 + 64);
  swift_release();
  return v1;
}

uint64_t variable initialization expression of ValueCycleDetector.lastSeed()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of ValueCycleDetector.hasLogged()
{
  return 0;
}

uint64_t default argument 2 of ValueCycleDetector.dispatch(value:label:isDebug:)()
{
  return 0;
}

float default argument 3 of ResolvedShadowStyle.init(color:radius:offset:midpoint:kind:)()
{
  return 0.5;
}

void default argument 4 of ResolvedShadowStyle.init(color:radius:offset:midpoint:kind:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of LeafResponderFilter.$__lazy_storage_$_responder()
{
  return 0;
}

double variable initialization expression of ContentResponderHelper.size()
{
  return 0.0;
}

double variable initialization expression of ContentResponderHelper.transform@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of ContentResponderHelper.observers()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of ContentResponderHelper.cache(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void default argument 1 of ViewResponder.ContainsPointsCache.init(key:mask:priority:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double default argument 2 of ViewResponder.ContainsPointsCache.init(key:mask:priority:)()
{
  return 0.0;
}

uint64_t variable initialization expression of Cache3.store(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata2;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56);
  v8(a1, 1, 1, TupleTypeMetadata2);
  v8(a2, 1, 1, TupleTypeMetadata2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a3, 1, 1, TupleTypeMetadata2);
}

uint64_t default argument 1 of Array.sort<A>(by:reversed:)()
{
  return 0;
}

uint64_t variable initialization expression of EquatableOptionalObject.wrappedValue()
{
  return 0;
}

uint64_t variable initialization expression of DepthTrait._traits()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of SectionHeaderTrait._traits()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t default argument 2 of ProtobufEncoder.doubleField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 0 of OpenURLAction.init(isDefault:handler:)()
{
  return 0;
}

double key path getter for EnvironmentValues.openURL : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  char v2;
  char v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;
  char v8;

  EnvironmentValues._openURL.getter((uint64_t)v6);
  v2 = v7;
  v3 = v8;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 33) = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.openURL : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  _QWORD v8[4];
  __int16 v9;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 33))
    v6 = 256;
  else
    v6 = 0;
  v8[0] = *(_QWORD *)a1;
  v8[1] = v2;
  v8[2] = v3;
  v8[3] = v4;
  v9 = v6 | v5;
  outlined copy of OpenURLAction.Handler(v1, v2, v3, v4, v5);
  specialized EnvironmentValues.subscript.setter((uint64_t)v8);
  return outlined consume of OpenURLAction.Handler(v1, v2, v3, v4, v5);
}

double key path getter for EnvironmentValues._openSensitiveURL : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  char v2;
  char v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;
  char v8;

  EnvironmentValues._openSensitiveURL.getter((uint64_t)v6);
  v2 = v7;
  v3 = v8;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 33) = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues._openSensitiveURL : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  _QWORD v8[4];
  __int16 v9;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 33))
    v6 = 256;
  else
    v6 = 0;
  v8[0] = *(_QWORD *)a1;
  v8[1] = v2;
  v8[2] = v3;
  v8[3] = v4;
  v9 = v6 | v5;
  outlined copy of OpenURLAction.Handler(v1, v2, v3, v4, v5);
  specialized EnvironmentValues.subscript.setter((uint64_t)v8);
  return outlined consume of OpenURLAction.Handler(v1, v2, v3, v4, v5);
}

double variable initialization expression of Spring._mass()
{
  return 1.0;
}

uint64_t default argument 5 of SecondaryLayerGeometryQuery.init(alignment:layoutDirection:primaryPosition:primarySize:primaryLayoutComputer:secondaryLayoutComputer:)()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of SecondaryLayerGeometryQuery._alignment()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of SecondaryLayerGeometryQuery._primaryLayoutComputer()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of SecondaryLayerGeometryQuery._secondaryLayoutComputer()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t default argument 4 of SecondaryLayerGeometryQuery.init(alignment:layoutDirection:primaryPosition:primarySize:primaryLayoutComputer:secondaryLayoutComputer:)()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of Font.ResolvedTraits.width()
{
  return 0;
}

void variable initialization expression of Font.Context.legibilityWeight(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 1 of CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)()
{
  return 0x3FD0000000000000;
}

uint64_t default argument 2 of CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)()
{
  return 0;
}

uint64_t variable initialization expression of _ProposedSize.width()
{
  return 0;
}

uint64_t variable initialization expression of _ProposedSize.height()
{
  return 0;
}

void variable initialization expression of HitTestableEvent.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.alwaysIncludesPunctuation()
{
  return 2;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.spellsOutCharacters()
{
  return 2;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.adjustedPitch()
{
  return 0;
}

void variable initialization expression of AccessibilitySpeechAttributes.announcementsPriority(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.phoneticRepresentation()
{
  return 0;
}

uint64_t default argument 2 of Text.Style.resolveAccessibilitySpeechAttributes(into:environment:includeDefaultAttributes:)()
{
  return 1;
}

uint64_t default argument 2 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0;
}

uint64_t default argument 3 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0;
}

void default argument 3 of TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of LinkDestination.Configuration.init(url:isSensitive:)()
{
  return 0;
}

uint64_t variable initialization expression of LinkDestination._openURL@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  return result;
}

uint64_t variable initialization expression of LinkDestination._openSensitiveURL@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  return result;
}

uint64_t default argument 0 of View.transformTrait<A>(_:transform:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t variable initialization expression of ViewTraitCollection.storage()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ContentShapes.shapes()
{
  return MEMORY[0x24BEE4AF8];
}

double variable initialization expression of _Rotation3DEffect.Data.angle()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.axis()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.anchor()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.perspective()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.flipWidth()
{
  return NAN;
}

void default argument 2 of _Rotation3DEffect.Data.init(_:size:layoutDirection:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of HoverEffectContentList.item(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t variable initialization expression of LayoutProxyAttributes._layoutComputer()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of LayoutProxyAttributes._traitsList()
{
  return *MEMORY[0x24BE096C0];
}

void variable initialization expression of RasterizationOptions.colorMode(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of RasterizationOptions.flags(_DWORD *a1@<X8>)
{
  *a1 = 160;
}

uint64_t variable initialization expression of RasterizationOptions.maxDrawableCount()
{
  return 3;
}

uint64_t variable initialization expression of LayoutTrace.Recorder.frameActive()
{
  return 0;
}

void variable initialization expression of LayoutTrace.Recorder.cacheLookup(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 512;
}

uint64_t variable initialization expression of ViewStatePredicate.state@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Binding(0, a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

float variable initialization expression of _SymbolEffect.Options.speed()
{
  return 1.0;
}

void variable initialization expression of _SymbolEffect.PulseConfiguration.trigger(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.PulseConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.BreatheConfiguration.trigger(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.BreatheConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.BreatheConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.BounceConfiguration.trigger(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.BounceConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.BounceConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.WiggleConfiguration.trigger(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.angle()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.layered()
{
  return 1;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.appliesRTL()
{
  return 0;
}

void variable initialization expression of _SymbolEffect.RotateConfiguration.trigger(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.RotateConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.RotateConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.VariableColorConfiguration.trigger(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.VariableColorConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ScaleConfiguration.level()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ScaleConfiguration.layered()
{
  return 1;
}

uint64_t variable initialization expression of _SymbolEffect.HiddenConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.HiddenConfiguration.layered()
{
  return 1;
}

uint64_t variable initialization expression of _SymbolEffect.HiddenConfiguration.isHidden()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ReplaceConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ReplaceConfiguration.layered()
{
  return 1;
}

float variable initialization expression of _SymbolEffect.ReplaceConfiguration.speed()
{
  return 1.0;
}

uint64_t default argument 1 of _SymbolEffect.Identified.init(identifier:serial:effect:)()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.Phase.added()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of _SymbolEffect.Phase.scale(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

void variable initialization expression of _SymbolEffect.Phase.scaleOptions(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1065353216;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

void variable initialization expression of _SymbolEffect.Phase.hidden(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 1;
}

uint64_t variable initialization expression of _SymbolEffect.Phase.isFirstUpdate()
{
  return 1;
}

uint64_t default argument 2 of ProtobufEncoder.uint64Field(_:_:defaultValue:)()
{
  return 0;
}

uint64_t variable initialization expression of SystemListStyleMetrics.Sidebar.headerFont()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider, (uint64_t)&type metadata for Font.SystemProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x4034000000000000;
  *(_QWORD *)(result + 24) = 0x3FD3333333333333;
  *(_BYTE *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 1;
  return result;
}

uint64_t variable initialization expression of SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted()
{
  return 1;
}

uint64_t variable initialization expression of SystemListStyleMetrics.Sidebar.outlineDisclosureFont()
{
  return 0;
}

uint64_t variable initialization expression of SystemListStyleMetrics._sidebar@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider, (uint64_t)&type metadata for Font.SystemProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x4034000000000000;
  *(_QWORD *)(result + 24) = 0x3FD3333333333333;
  *(_BYTE *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 1;
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

double variable initialization expression of SystemShadowStyleMetrics.Grounding.intensity()
{
  return 0.5;
}

double variable initialization expression of SystemShadowStyleMetrics.Grounding.decayRate()
{
  return 0.3;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.radius()
{
  return 20.0;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.offsetX()
{
  return 5.0;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.offsetY()
{
  return 5.0;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.opacity()
{
  return 0.2;
}

CGColorRef variable initialization expression of SystemShadowStyleMetrics.Separated.cgColor()
{
  return CGColorCreateGenericGray(0.0, 0.0);
}

void variable initialization expression of SystemShadowStyleMetrics.grounding()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void variable initialization expression of SystemShadowStyleMetrics.separated()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void variable initialization expression of SystemHoverEffectStyleMetrics.highlightOpacity()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void variable initialization expression of SystemHoverEffectStyleMetrics.increaseFocusStateOpacity()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

double variable initialization expression of SystemHoverEffectStyleMetrics.defaultBrightnessMultiplier()
{
  return 1.0;
}

void default argument 0 of Text.isStyled(options:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of LocalizedStringKey.StringInterpolation.key()
{
  return 0;
}

uint64_t variable initialization expression of LocalizedStringKey.StringInterpolation.arguments()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of LocalizedStringKey.StringInterpolation.seed(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of PlatformTextRepresentableContext.text()
{
  return 0;
}

uint64_t default argument 1 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)()
{
  return 1;
}

void default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

uint64_t default argument 1 of Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)()
{
  return 1;
}

void default argument 2 of Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

uint64_t default argument 0 of EnvironmentValues.resolveNSAttributes(includeDefaultAttributes:options:)()
{
  return 1;
}

void default argument 1 of EnvironmentValues.resolveNSAttributes(includeDefaultAttributes:options:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 2 of AccessibilityCustomContentEntry.init<A>(_:value:importance:)()
{
  return 0;
}

void default argument 1 of Text.resolveString(in:with:idiom:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 0 of EventListener.init(ignoresOtherEvents:)()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.StateType.active()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.StateType.oldPhase@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for GesturePhase(0, a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

uint64_t variable initialization expression of FullGestureCallbacks.possible()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.changed()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.ended()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.failed()
{
  return 0;
}

uint64_t default argument 1 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0;
}

uint64_t default argument 6 of GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)()
{
  return 1;
}

void default argument 7 of GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

double default argument 0 of VariableBlurStyle.init(radius:isOpaque:dither:mask:)()
{
  return 0.0;
}

uint64_t default argument 1 of VariableBlurStyle.init(radius:isOpaque:dither:mask:)()
{
  return 0;
}

uint64_t default argument 2 of VariableBlurStyle.init(radius:isOpaque:dither:mask:)()
{
  return 0;
}

uint64_t default argument 3 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return 0;
}

float default argument 1 of AnyMaterialLayer.init(content:opacity:blendMode:)()
{
  return 1.0;
}

void default argument 1 of _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 5;
}

uint64_t variable initialization expression of AccessibilityStyledTextContentView.renderer()
{
  return 0;
}

uint64_t default argument 3 of AccessibilityStyledTextContentView.init(text:unresolvedText:renderer:needsDrawingGroup:)()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextContentView.renderer()
{
  return 0;
}

uint64_t default argument 2 of StyledTextContentView.init(text:renderer:needsDrawingGroup:)()
{
  return 0;
}

uint64_t variable initialization expression of TextLayoutProperties.lineLimit()
{
  return 0;
}

uint64_t variable initialization expression of TextLayoutProperties.lowerLineLimit()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedStyledText.scaleFactorOverride()
{
  return 0;
}

double variable initialization expression of ResolvedStyledText._computedMaxFontMetrics@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

uint64_t default argument 2 of ResolvedStyledText.layoutValue(in:with:applyingMarginOffsets:)()
{
  return 1;
}

uint64_t default argument 0 of Text.ResolvedProperties.CustomAttachments.init(characterIndices:)()
{
  return MEMORY[0x24BEE4AF8];
}

double default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return 0.0;
}

void default argument 0 of ArchivedViewInput.Value.init(flags:deploymentVersion:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of ArchivedViewInput.Value.init(flags:deploymentVersion:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 4 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return 0;
}

void default argument 5 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return MEMORY[0x24BEE4AF8];
}

double default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return 0.0;
}

void default argument 3 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(_WORD *a1@<X8>)
{
  *a1 = 512;
}

uint64_t default argument 4 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return 0;
}

void default argument 5 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(_WORD *a1@<X8>)
{
  *a1 = 0;
}

double default argument 6 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = -0.0;
  *(_OWORD *)(a1 + 40) = xmmword_235260F00;
  return result;
}

void default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 11 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return 0;
}

unint64_t variable initialization expression of AttributeCountTestInfo.attributeCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of AttributeCountTestInfo.updateCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of AttributeCountTestInfo.changeCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of AttributeCountTestInfo.history()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.title()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.values()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.supportsSonification()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.sonificationDuration()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.includesTrendlineInSonification()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.supportsSummarization()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.xAxisConfiguration@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[8];

  _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(v3);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration);
}

void variable initialization expression of PanEvent.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _DynamicPropertyBuffer.contents(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of RepresentableChartDescriptorStorage.cachedDescriptor()
{
  return 0;
}

uint64_t variable initialization expression of RepresentableChartDescriptorStorage.needsUpdate()
{
  return 0;
}

uint64_t variable initialization expression of RepresentableChartDescriptorStorage.generation()
{
  return 0;
}

uint64_t variable initialization expression of Text.LineStyle.color()
{
  return 0;
}

uint64_t variable initialization expression of Text.LineStyle.Resolved.color()
{
  return 0;
}

uint64_t default argument 0 of _GraphValue.unsafeCast<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t variable initialization expression of Stack3.store(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56);
  v8(a1, 1, 1);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a2, 1, 1, a4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a3, 1, 1, a4);
}

void variable initialization expression of SystemFormatStyle.DateOffset.sizeVariant(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SystemFormatStyle.DateOffset.updateFrequency(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SystemFormatStyle.DateOffset.watchIdiom()
{
  return 0;
}

uint64_t variable initialization expression of SystemFormatStyle.DateOffset.forceUnitsAoDStyle()
{
  return 0;
}

double variable initialization expression of VariableBlurStyle.radius()
{
  return 0.0;
}

uint64_t variable initialization expression of VariableBlurStyle.isOpaque()
{
  return 0;
}

uint64_t variable initialization expression of VariableBlurStyle.dither()
{
  return 0;
}

double variable initialization expression of VariableBlurStyle.mask@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 96) = 512;
  return result;
}

void variable initialization expression of Material.flags(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 2 of MaterialView.init(material:shape:ignoredSafeAreaEdges:)()
{
  return 0;
}

uint64_t variable initialization expression of MaterialView.ignoredSafeAreaEdges()
{
  return 0;
}

void default argument 5 of _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

float variable initialization expression of AnyMaterialLayer.opacity()
{
  return 1.0;
}

float variable initialization expression of _ShapeStyle_Pack.Style.opacity()
{
  return 1.0;
}

uint64_t variable initialization expression of _ShapeStyle_Pack.Style.effects()
{
  return MEMORY[0x24BEE4AF8];
}

float variable initialization expression of _ShapeStyle_Pack.Effect.opacity()
{
  return 1.0;
}

uint64_t default argument 2 of static _ShapeStyle_Pack.style(_:name:level:)()
{
  return 0;
}

uint64_t default argument 2 of static _ShapeStyle_Pack.fill(_:name:level:)()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedMulticolorStyle.bundle()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_RenderedShape.interpolatorData()
{
  return 0;
}

uint64_t default argument 2 of AnyMaterialLayer.init(content:opacity:blendMode:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  if (one-time initialization token for normal != -1)
    swift_once();
  v2 = static GraphicsBlendMode.normal;
  v3 = byte_254266040;
  *(_QWORD *)a1 = static GraphicsBlendMode.normal;
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

float variable initialization expression of _ShapeStyle_RenderedShape.opacity()
{
  return 1.0;
}

uint64_t variable initialization expression of _ShapeStyle_RenderedShape.layerNeeds()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_RenderedLayers.group()
{
  return 0;
}

double variable initialization expression of _ShapeStyle_RenderedLayers.layers@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0x80000000;
  return result;
}

uint64_t variable initialization expression of _ShapeStyle_InterpolatorGroup.layers()
{
  return MEMORY[0x24BEE4AF8];
}

float variable initialization expression of _ShapeStyle_InterpolatorGroup.contentsScale()
{
  return 0.0;
}

uint64_t variable initialization expression of _ShapeStyle_InterpolatorGroup.serial()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_InterpolatorGroup.cursor()
{
  return 0;
}

double variable initialization expression of StyledTextResponder.helper@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v2;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v2;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 100) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t variable initialization expression of StyledTextResponder.childSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder.childViewSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder.$__lazy_storage_$_gestureGraph()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder.$__lazy_storage_$_bindingBridge()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder._gestureContainer()
{
  return 0;
}

void default argument 2 of ViewResponder.hitTest(globalPoint:radius:options:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of MultiViewResponder._children()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of MultiViewResponder.cache(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t variable initialization expression of MultiViewResponder.observers()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DefaultLayoutViewResponder.childSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of DefaultLayoutViewResponder.childViewSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of DefaultLayoutViewResponder.invalidateChildren()
{
  return 0;
}

uint64_t variable initialization expression of ViewResponder.host()
{
  return 0;
}

uint64_t variable initialization expression of ViewResponder.parent()
{
  return 0;
}

uint64_t variable initialization expression of ViewResponder.ContainsPointsCache.key()
{
  return 0x100000000;
}

void variable initialization expression of ViewResponder.ContainsPointsCache.mask(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double variable initialization expression of ViewResponder.ContainsPointsCache.priority()
{
  return 0.0;
}

uint64_t default argument 0 of ViewResponder.printTree(depth:)()
{
  return 0;
}

double default argument 0 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0.0;
}

uint64_t variable initialization expression of _ShapeStyle_ResolverMode.bundle()
{
  return 0;
}

uint64_t default argument 0 of _ShapeStyle_ResolverMode.init(foregroundLevels:options:)()
{
  return 0;
}

void default argument 1 of _ShapeStyle_ResolverMode.init(foregroundLevels:options:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ShapeStyleResolver._style()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ShapeStyleResolver._mode()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ShapeStyleResolver.tracker()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PropertyList.Tracker();
  v0 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v2 = MEMORY[0x24BEE4B00];
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t default argument 1 of ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ProtobufEncoder.buffer()
{
  return 0;
}

uint64_t variable initialization expression of ProtobufEncoder.size()
{
  return 0;
}

uint64_t variable initialization expression of ProtobufEncoder.capacity()
{
  return 0;
}

uint64_t variable initialization expression of ProtobufEncoder.stack()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ProtobufEncoder.userInfo()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t default argument 2 of ProtobufEncoder.BOOLField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.intField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.int64Field(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.fixed64Field(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.stringField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.uint64Field<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.int64Field<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.fixed64Field<A>(_:_:defaultValue:)()
{
  return 0;
}

void default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t default argument 0 of DynamicPropertyBox.getState<A>(type:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

void variable initialization expression of DynamicPropertyCache.Fields.behaviors(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 3 of static DynamicProperty.addTreeValue<A>(_:at:in:flags:)(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 4 of static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 4 of static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DistanceGesture.StateType.start()
{
  return 0;
}

double variable initialization expression of DistanceGesture.StateType.maxDistance()
{
  return 0.0;
}

double default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)()
{
  return 0.0;
}

double default argument 1 of DistanceGesture.init(minimumDistance:maximumDistance:)()
{
  return INFINITY;
}

uint64_t variable initialization expression of Shader.arguments()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of Shader.options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of Shader.ResolvedShader.rbShader()
{
  return 0;
}

void variable initialization expression of GraphicsImage.contents(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
}

uint64_t variable initialization expression of GraphicsImage.maskColor()
{
  return 0;
}

void variable initialization expression of GraphicsImage.allowedDynamicRange(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t default argument 1 of GraphicsImage.render(at:prefersMask:)()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedVectorGlyph.preservesVectorRepresentation()
{
  return 0;
}

float variable initialization expression of GraphicsContext.Storage.opacity()
{
  return 1.0;
}

uint64_t variable initialization expression of GraphicsContext.Storage.blendMode()
{
  return 0;
}

double variable initialization expression of GraphicsContext.Storage.shapeDistance()
{
  return NAN;
}

double default argument 1 of GraphicsContext.Shading.Storage.tiledImage(_:)()
{
  return 0.0;
}

double default argument 2 of GraphicsContext.Shading.Storage.tiledImage(_:)()
{
  return 0.0;
}

double default argument 3 of GraphicsContext.Shading.Storage.tiledImage(_:)()
{
  return 1.0;
}

uint64_t default argument 4 of static GraphicsContext.Shading.angularGradient(_:center:startAngle:endAngle:options:)()
{
  return 0;
}

{
  return 0;
}

double default argument 1 of GraphicsContext.ResolvedShading.tiledImage(_:)()
{
  return 0.0;
}

double default argument 2 of GraphicsContext.ResolvedShading.tiledImage(_:)()
{
  return 0.0;
}

double default argument 3 of GraphicsContext.ResolvedShading.tiledImage(_:)()
{
  return 1.0;
}

double variable initialization expression of GraphicsContext.ResolvedImage.shading@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = -1;
  return result;
}

void variable initialization expression of Text.DateStyle.unitConfiguration(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 3;
}

uint64_t default argument 1 of Text.init(progressInterval:countsDown:)()
{
  return 0;
}

uint64_t variable initialization expression of ReferenceDateModifier.date@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t variable initialization expression of DynamicContainer.Info.items()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DynamicContainer.Info.indexMap()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of DynamicContainer.Info.displayMap()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.Info.removedCount()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.Info.unusedCount()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.Info.allUnary()
{
  return 1;
}

uint64_t variable initialization expression of DynamicContainer.Info.seed()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.listener()
{
  return 0;
}

double variable initialization expression of DynamicContainer.ItemInfo.zIndex()
{
  return 0.0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.removalOrder()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.precedingViewCount()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.resetSeed()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.phase()
{
  return 3;
}

uint64_t default argument 3 of RootGeometry.init(layoutDirection:proposedSize:safeAreaInsets:childLayoutComputer:)()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t default argument 0 of _PositionAwarePlacementContext.safeAreaInsets(matching:)()
{
  return -1;
}

uint64_t variable initialization expression of LayoutProperties.stackOrientation()
{
  return 2;
}

uint64_t variable initialization expression of LayoutProperties.isDefaultEmptyLayout()
{
  return 0;
}

uint64_t variable initialization expression of LayoutProperties.isIdentityUnaryLayout()
{
  return 0;
}

void variable initialization expression of ViewSpacing.layoutDirection(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double default argument 1 of LayoutSubview.place(at:anchor:dimensions:)()
{
  if (one-time initialization token for topLeading != -1)
    swift_once();
  return *(double *)&static UnitPoint.topLeading;
}

uint64_t variable initialization expression of _IdentifiedViewProxy.adjustment()
{
  return 0;
}

double variable initialization expression of _IdentifiedViewProxy.accessibilityNodeStorage@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of Text.Encapsulation.lineWeight()
{
  return 0;
}

uint64_t variable initialization expression of Text.Encapsulation.color()
{
  return 0;
}

uint64_t variable initialization expression of Text.Encapsulation.minimumWidth()
{
  return 0;
}

void variable initialization expression of Text.Encapsulation.platterSize(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void variable initialization expression of TypesettingConfiguration.languageAwareLineHeightRatio(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t variable initialization expression of TypesettingConfiguration.language@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for automatic != -1)
    swift_once();
  v2 = type metadata accessor for TypesettingLanguage(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingLanguage.automatic);
  return outlined init with copy of TypesettingLanguage(v3, a1, type metadata accessor for TypesettingLanguage);
}

uint64_t default argument 9 of NamedImage.BitmapKey.init(catalogKey:name:scale:location:layoutDirection:locale:gamut:idiom:subtype:horizontalSizeClass:verticalSizeClass:)()
{
  return 0;
}

uint64_t default argument 10 of NamedImage.BitmapKey.init(catalogKey:name:scale:location:layoutDirection:locale:gamut:idiom:subtype:horizontalSizeClass:verticalSizeClass:)()
{
  return 0;
}

void variable initialization expression of NamedImage.BitmapInfo.renderingMode(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double variable initialization expression of NamedImage.BitmapInfo.resizingInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 2;
  return result;
}

uint64_t variable initialization expression of NamedImage.Cache.archiveDelegate()
{
  return 0;
}

uint64_t variable initialization expression of NamedImage.Cache._data()
{
  return MEMORY[0x24BEE4B00];
}

void variable initialization expression of Image.NamedImageProvider.backupLocation(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

double variable initialization expression of Image.NamedImageProvider.label@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 16) = xmmword_235260F10;
  return result;
}

uint64_t variable initialization expression of _ViewListInputs._traits()
{
  return *MEMORY[0x24BE096C0];
}

void variable initialization expression of _ViewListInputs.traitKeys(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t default argument 1 of _ViewListInputs.init(_:implicitID:options:)()
{
  return 0;
}

void default argument 2 of _ViewListInputs.init(_:implicitID:options:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _ViewListCountInputs.customModifierTypes()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of _ViewListOutputs.staticCount()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_IteratorStyle.value()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_SublistTransform.items()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of _ViewList_ID._index()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_ID.explicitIDs()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of _ViewList_ID.Canonical.explicitID(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _ViewList_Section.isHierarchical()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_Subgraph.refcount()
{
  return 1;
}

uint64_t variable initialization expression of _ViewList_ReleaseElements.base()
{
  return 0;
}

void default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of ShapeStyle.resolveBackgroundMaterial(in:level:)()
{
  return 0;
}

uint64_t default argument 1 of ShapeStyle.resolveGradient(in:level:)()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_Shape.foregroundStyle()
{
  return 0;
}

double variable initialization expression of _ShapeStyle_Shape.bounds@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

void variable initialization expression of _ShapeStyle_Shape.activeRecursiveStyles(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _ShapeStyle_ShapeType.result(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

unint64_t variable initialization expression of LocationBox._cache@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

unint64_t variable initialization expression of LocationProjectionCache.cache()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of ScrapeableContent.Node.children()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ScrapeableContent.Node.moved()
{
  return 0;
}

void variable initialization expression of _ViewOutputs.preferences(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t variable initialization expression of _ViewOutputs._layoutComputer()
{
  return *MEMORY[0x24BE096C0];
}

void variable initialization expression of SpatialEvent.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SpatialEvent.kind(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

unint64_t variable initialization expression of ScrollAnchorStorage.anchors()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of ScrollAnchorStorage.defaultValue()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewUpdater.host()
{
  return 0;
}

void variable initialization expression of DisplayList.ViewUpdater.seed(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of DisplayList.ViewUpdater.asyncSeed(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of DisplayList.ViewUpdater.nextUpdate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double variable initialization expression of DisplayList.ViewUpdater.lastEnv@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for invalid != -1)
    swift_once();
  result = *(double *)&static DisplayList.ViewRenderer.Environment.invalid;
  *a1 = static DisplayList.ViewRenderer.Environment.invalid;
  return result;
}

void variable initialization expression of DisplayList.ViewUpdater.lastList(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
}

void variable initialization expression of DisplayList.ViewUpdater.lastTime(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.ViewUpdater.isValid()
{
  return 1;
}

uint64_t variable initialization expression of DisplayList.ViewUpdater.wasValid()
{
  return 1;
}

uint64_t variable initialization expression of ViewDecoders.decodableFactoryTypes()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of ViewDecoders.hasRegisteredStandardDecoders()
{
  return 0;
}

uint64_t default argument 0 of Gesture.discrete(_:)()
{
  return 1;
}

double default argument 1 of Gesture.repeatCount(_:maximumDelay:)()
{
  return 0.35;
}

double default argument 1 of RepeatGesture.init(count:maximumDelay:)()
{
  return 0.35;
}

void variable initialization expression of SubscriptionLifetime.subscriptionID(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SubscriptionLifetime.state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SubscriptionLifetime.StateType(0, a1, a2, a4);
  return swift_storeEnumTagMultiPayload();
}

double default argument 0 of Gesture.duration(minimum:maximum:)()
{
  return 0.0;
}

double default argument 1 of Gesture.duration(minimum:maximum:)()
{
  return INFINITY;
}

uint64_t default argument 2 of DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)()
{
  return 0;
}

double default argument 0 of DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)()
{
  return 0.0;
}

double default argument 1 of DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)()
{
  return INFINITY;
}

uint64_t default argument 1 of Gesture.category(_:includeChildren:)()
{
  return 1;
}

double variable initialization expression of Path.PathBox.data@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 1 of Path.contains(points:eoFill:origin:)()
{
  return 0;
}

double default argument 2 of Path.contains(points:eoFill:origin:)()
{
  return 0.0;
}

void variable initialization expression of DisplayList.ViewRenderer.configuration(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.host()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.state()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.renderer()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.configChanged()
{
  return 1;
}

uint64_t variable initialization expression of OptionalEdgeInsets.top()
{
  return 0;
}

uint64_t variable initialization expression of OptionalEdgeInsets.leading()
{
  return 0;
}

uint64_t variable initialization expression of OptionalEdgeInsets.bottom()
{
  return 0;
}

uint64_t variable initialization expression of OptionalEdgeInsets.trailing()
{
  return 0;
}

void (*default argument 1 of CGRect.outset(by:layoutDirection:)())(_BYTE *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LayoutDirectionKey;
}

void variable initialization expression of Spacing.Key.category(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of PlatformDrawableContent.State.mode(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t variable initialization expression of PlatformDrawableContent.State._renderer()
{
  return 0;
}

uint64_t variable initialization expression of AppearanceEffect.lastValue()
{
  return 1;
}

uint64_t variable initialization expression of AppearanceEffect.isVisible()
{
  return 0;
}

uint64_t variable initialization expression of AppearanceEffect.resetSeed()
{
  return 0;
}

uint64_t variable initialization expression of AppearanceEffect.node()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t default argument 0 of View.preferenceValue<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t variable initialization expression of PreferenceValueAttribute.source()
{
  return 0;
}

float default argument 0 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return 1.0;
}

uint64_t default argument 2 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of AccessibilityBoundedNumber.lowerBound(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of AccessibilityBoundedNumber.upperBound(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of AccessibilityBoundedNumber.stride(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AccessibilityProgressValue.percent()
{
  return 0;
}

double variable initialization expression of AccessibilityValueStorage.value@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void variable initialization expression of CodableAccessibilityValueStorage.text(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 255;
}

double variable initialization expression of CodableAccessibilityValueStorage.value@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 2 of AccessibilityText.init(texts:environment:optional:idiom:)()
{
  return 0;
}

uint64_t variable initialization expression of BloomFilter.value()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.Data.graph()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.constants()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of GraphHost.isInstantiated()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.hostPreferenceValues()
{
  return 0;
}

void variable initialization expression of GraphHost.lastHostPreferencesSeed(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t variable initialization expression of GraphHost.pendingTransactions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of GraphHost.inTransaction()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.continuations()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of GraphHost.mayDeferUpdate()
{
  return 1;
}

void variable initialization expression of GraphHost.removedState(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 0 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)()
{
  return 0;
}

void default argument 3 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t default argument 4 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)()
{
  return 1;
}

uint64_t default argument 0 of GraphHost.asyncTransaction(_:id:_:)()
{
  return 0;
}

uint64_t default argument 1 of GraphHost.asyncTransaction(_:id:_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = _threadTransactionID();
  *a1 = result;
  return result;
}

uint64_t default argument 0 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)()
{
  return 0;
}

void default argument 3 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t default argument 0 of GraphHost.emptyTransaction(_:)()
{
  return 0;
}

uint64_t (*default argument 1 of GraphHost.finishTransactionUpdate(in:postUpdate:)())()
{
  return _ViewInputs.base.modify;
}

uint64_t default argument 0 of static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)()
{
  return 0;
}

uint64_t default argument 1 of static ProcessEnvironment.BOOL(forKey:defaultValue:)()
{
  return 0;
}

void variable initialization expression of VectorImageLayer.location(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t variable initialization expression of VectorImageLayer.name()
{
  return 0;
}

uint64_t default argument 2 of VectorImageLayer.image(size:imageScale:prefersMask:)()
{
  return 0;
}

uint64_t variable initialization expression of CachedVectorImageContents.imageCache()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of PreferenceList.first()
{
  return 0;
}

uint64_t variable initialization expression of WhitespaceRemovingFormatStyle.prefixValue@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t variable initialization expression of EnvironmentValues._plist()
{
  return 0;
}

uint64_t variable initialization expression of ScaledMetric._dynamicTypeSize@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t variable initialization expression of ScaledMetric._pixelLength()
{
  return swift_getKeyPath();
}

uint64_t variable initialization expression of PreferencesOutputs.preferences()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of PreferencesOutputs.debugProperties(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CoreGlue2.CodableAttachmentCellTypeResult.value()
{
  return 0;
}

uint64_t default argument 0 of Semantics.test<A>(as:_:)()
{
  return swift_getKeyPath();
}

void variable initialization expression of Semantics.Forced.deploymentTarget(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

uint64_t variable initialization expression of VelocitySampler.sample1@<X0>(uint64_t a1@<X8>)
{
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a1, 1, 1, TupleTypeMetadata2);
}

double variable initialization expression of VelocitySampler.previousSampleWeight()
{
  return 0.75;
}

uint64_t variable initialization expression of AnimatableVelocitySampler.base@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return VelocitySampler.init()(AssociatedTypeWitness, AssociatedConformanceWitness, a1);
}

uint64_t variable initialization expression of AddGestureModifier.name()
{
  return 0;
}

uint64_t default argument 2 of AddGestureModifier.init(_:name:gestureMask:)()
{
  return 3;
}

void default argument 1 of AccessibilityLabelStorage.init(texts:placement:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t variable initialization expression of CachedEnvironment.items()
{
  return MEMORY[0x24BEE4AF8];
}

double variable initialization expression of CachedEnvironment.animatedFrame@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 48) = 256;
  return result;
}

unint64_t variable initialization expression of CachedEnvironment.resolvedShapeStyles()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of HoverEffectContext.Properties.isDisabled()
{
  return 0;
}

void variable initialization expression of HoverEffectContext.State.leafContext(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DefaultRule._weakValue()
{
  return 0;
}

uint64_t variable initialization expression of AnimatableAttributeHelper.previousModelData@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t variable initialization expression of AnimatableAttributeHelper.animatorState()
{
  return 0;
}

uint64_t variable initialization expression of AnimatableAttributeHelper.resetSeed()
{
  return 0;
}

void variable initialization expression of AnimatorState.nextTime(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AnimatorState.previousAnimationValue()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t variable initialization expression of AnimatorState.reason()
{
  return 0x100000000;
}

uint64_t variable initialization expression of AnimatorState.phase()
{
  return 0;
}

uint64_t variable initialization expression of AnimatorState.listeners()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AnimatorState.logicalListeners()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AnimatorState.isLogicallyComplete()
{
  return 0;
}

uint64_t variable initialization expression of AnimatorState.forks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AnimatorState.Fork(0, a1, a2, a4);
  return Array.init()();
}

uint64_t variable initialization expression of StoredLocationBase._wasRead()
{
  return 0;
}

uint64_t variable initialization expression of StoredLocation.host()
{
  return 0;
}

uint64_t variable initialization expression of StoredLocation._signal()
{
  return 0;
}

uint64_t variable initialization expression of ObservableLocation.observers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ObservableLocation.Observer(0, a1, a3, a4);
  return Array.init()();
}

uint64_t variable initialization expression of _GraphInputs.customInputs()
{
  return 0;
}

uint64_t variable initialization expression of _GraphInputs.Phase.value()
{
  return 0;
}

void variable initialization expression of _GraphInputs.changedDebugProperties(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

void variable initialization expression of _GraphInputs.options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _GraphInputs.mergedInputs()
{
  return MEMORY[0x24BEE4B08];
}

uint64_t variable initialization expression of ArchiveWriter.isFinal()
{
  return 0;
}

uint64_t variable initialization expression of ArchiveWriter.attachments()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ArchiveWriter.attachmentHashes()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ArchiveWriter.currentOffset()
{
  return 0;
}

double variable initialization expression of ArchiveWriter.currentHasher@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t variable initialization expression of ArchiveWriter.cache()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of ArchiveWriter.signposter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for archiving != -1)
    swift_once();
  v2 = type metadata accessor for OSSignposter();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Signpost.archiving);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t variable initialization expression of DataArchiveWriter.data()
{
  return 0;
}

uint64_t variable initialization expression of ValueActionDispatcher.lastResetSeed()
{
  return 0;
}

uint64_t variable initialization expression of ValueActionDispatcher.cycleDetector@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  uint64_t Context;
  uint64_t v6;
  int v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v2 = (id)AGSubgraphGetCurrent();
    if (!v2)
      goto LABEL_8;
    v3 = v2;
    v4 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v4 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v6 = Context;
    swift_retain();

    swift_beginAccess();
    v7 = *(_DWORD *)(v6 + 64);
    result = swift_release();
    *(_DWORD *)a1 = v7;
    *(_QWORD *)(a1 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t variable initialization expression of AnimationState.storage()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of EventBindingBridge.eventBindingManager()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingBridge.responderWasBoundHandler()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingBridge.trackedEvents()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t default argument 2 of CUIDesignLibraryCacheKey.init(name:in:allowsBlendMode:)()
{
  return 1;
}

void variable initialization expression of _GestureInputs.options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _GestureOutputs._debugData()
{
  return *MEMORY[0x24BE096C0];
}

void variable initialization expression of _GestureOutputs.preferences(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t variable initialization expression of LayoutComputer.seed()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.host()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.delegate()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.forwardedEventDispatchers()
{
  return MEMORY[0x24BEE4B00];
}

unint64_t variable initialization expression of EventBindingManager.eventBindings()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of EventBindingManager.isActive()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.eventTimer()
{
  return 0;
}

uint64_t variable initialization expression of UniqueSeedGenerator.nextID()
{
  return 0;
}

void variable initialization expression of _LayoutTraits.width(_QWORD *a1@<X8>)
{
  _LayoutTraits.Dimension._checkInvariant()();
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x7FF0000000000000;
}

uint64_t variable initialization expression of _ViewList_View.releaseElements()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_View.contentSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of ResolvableStringResolutionContext.referenceDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t variable initialization expression of ResolvableStringResolutionContext.maximumWidth()
{
  return 0;
}

uint64_t variable initialization expression of Text.Resolved.attributedString()
{
  return 0;
}

uint64_t variable initialization expression of Text.Resolved.includeDefaultAttributes()
{
  return 1;
}

void variable initialization expression of Text.Resolved.idiom(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double variable initialization expression of Text.Resolved.properties@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_WORD *)(a1 + 32) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 40) = v1;
  *(_QWORD *)(a1 + 48) = v1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  result = -0.0;
  *(_OWORD *)(a1 + 96) = xmmword_235260F00;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = v1;
  return result;
}

uint64_t default argument 3 of Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)()
{
  return 1;
}

void variable initialization expression of Text.Style.baseFont(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of Text.Style.fontModifiers()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of Text.Style.color(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

uint64_t variable initialization expression of Text.Style.backgroundColor()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.baselineOffset()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.kerning()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.tracking()
{
  return 0;
}

double variable initialization expression of Text.Style.strikethrough@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_235260F20;
  return result;
}

double variable initialization expression of Text.Style.underline@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_235260F20;
  return result;
}

double variable initialization expression of Text.Style.encapsulation@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return result;
}

double variable initialization expression of Text.Style.accessibility@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of Text.Style.glyphInfo()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.shadow()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.transition()
{
  return 0;
}

void variable initialization expression of Text.Style.scale(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of Text.Style.superscript(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t variable initialization expression of Text.Style.typesettingConfiguration@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for automatic != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingLanguage.automatic);
  outlined init with copy of TypesettingLanguage(v5, (uint64_t)v4, type metadata accessor for TypesettingLanguage);
  outlined init with copy of TypesettingLanguage(v5, a1, type metadata accessor for TypesettingLanguage);
  v6 = a1 + *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  result = outlined assign with take of TypesettingLanguage((uint64_t)v4, a1);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t variable initialization expression of Text.Style.customAttributes()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of Text.Style.adaptiveImageGlyph@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate((uint64_t (*)(_QWORD))MEMORY[0x24BDC46B0], a1);
}

uint64_t variable initialization expression of Text.Style.clearedFontModifiers()
{
  return MEMORY[0x24BEE4B08];
}

uint64_t default argument 1 of Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)()
{
  return 1;
}

double variable initialization expression of Text.ResolvedProperties.insets()
{
  return 0.0;
}

void variable initialization expression of Text.ResolvedProperties.features(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of Text.ResolvedProperties.styles()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of Text.ResolvedProperties.transitions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of Text.ResolvedProperties.CustomAttachments.characterIndices()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of Text.ResolvedProperties.customAttachments(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

void variable initialization expression of Text.ResolvedProperties.paragraph(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of Text.ResolvedProperties.Paragraph.compositionLanguage()
{
  return 0;
}

uint64_t variable initialization expression of Text.ResolvedProperties.Paragraph.cachedStyle()
{
  return 0;
}

uint64_t variable initialization expression of ResolvableTimer.pause()
{
  return 0;
}

uint64_t variable initialization expression of _ResolvedKeyframeTrackContent.segments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _ResolvedKeyframeTrackContent.Segment(0, a1, a2, a4);
  return static Array._allocateUninitialized(_:)();
}

uint64_t variable initialization expression of PhaseAnimator._currentIndex()
{
  return 0;
}

uint64_t variable initialization expression of PhaseAnimator._seed()
{
  return 0;
}

double variable initialization expression of _RendererConfiguration.minFrameInterval()
{
  return 0.0;
}

void variable initialization expression of _RendererConfiguration.RasterizationOptions.colorMode(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.rendersAsynchronously()
{
  return 0;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.isOpaque()
{
  return 1;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.drawsPlatformViews()
{
  return 1;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.prefersDisplayCompositing()
{
  return 0;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.maxDrawableCount()
{
  return 3;
}

uint64_t default argument 1 of _ColorMatrix.init(colorMultiply:premultiplied:)()
{
  return 0;
}

float default argument 1 of _ColorMatrix.init(colorMonochrome:amount:bias:)()
{
  return 1.0;
}

float default argument 2 of _ColorMatrix.init(colorMonochrome:amount:bias:)()
{
  return 0.0;
}

uint64_t variable initialization expression of _ViewDebug.Data.data()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of _ViewDebug.Data.childData()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of WeakBox.base()
{
  return 0;
}

uint64_t variable initialization expression of HashableWeakBox.base()
{
  return 0;
}

void variable initialization expression of PropertyList.Tracker._data(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x24BEE4B00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v1;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = 0;
}

uint64_t variable initialization expression of PropertyList.Element.after()
{
  return 0;
}

uint64_t variable initialization expression of PropertyList.Element.skip()
{
  return 0;
}

uint64_t variable initialization expression of PropertyList.Element.id@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

void variable initialization expression of TappableEvent.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of TappableSpatialEvent.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of ProtobufDecoder.packedField(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ProtobufDecoder.stack()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ProtobufDecoder.userInfo()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of SymbolVariants.flags()
{
  return 0;
}

void variable initialization expression of SymbolVariants.shape(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t default argument 0 of View.appearanceAnimation<A>(animation:modifier:)()
{
  if (one-time initialization token for default != -1)
    swift_once();
  return swift_retain();
}

double variable initialization expression of StrongHasher.state@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of DynamicContentOffsetVisitor.offset()
{
  return 0;
}

void variable initialization expression of PreferencesInputs.keys(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AnimationContext._environment()
{
  return 0;
}

uint64_t variable initialization expression of AnimationContext.isLogicallyComplete()
{
  return 0;
}

uint64_t default argument 2 of AnimationContext.init(state:environment:isLogicallyComplete:)()
{
  return 0;
}

uint64_t variable initialization expression of _TestApp.RootView._state@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *a1 = 0;
  a1[1] = result;
  return result;
}

uint64_t variable initialization expression of _TestApp.RootView._rootFocusScope()
{
  return 0;
}

uint64_t variable initialization expression of ContentTransition.isReplaceable()
{
  return 0;
}

void variable initialization expression of ContentTransition.NamedTransition.layoutDirection(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of ContentTransition.NamedTransition.style(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void default argument 0 of ContentTransition.NamedTransition.init(name:layoutDirection:style:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000000;
  *(_BYTE *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 8) = 0;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration.axis()
{
  return 2;
}

void variable initialization expression of ContentTransition.NumericTextConfiguration.options(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._delay()
{
  return 18;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._scale()
{
  return 51;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._blur()
{
  return 32;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._offset()
{
  return 19;
}

void default argument 0 of ContentTransition.NumericTextConfiguration.init(direction:axis:options:)(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
}

void default argument 2 of ContentTransition.NumericTextConfiguration.init(direction:axis:options:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of ContentTransition.CustomTransition.layoutDirection(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void default argument 1 of ContentTransition.EffectType.init(type:arg0:arg1:)(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 2;
}

float variable initialization expression of ContentTransition.Effect.begin()
{
  return 0.0;
}

float variable initialization expression of ContentTransition.Effect.duration()
{
  return 1.0;
}

uint64_t variable initialization expression of ContentTransition.Effect.events()
{
  return 3;
}

uint64_t variable initialization expression of ContentTransition.Effect.flags()
{
  return 0;
}

float default argument 1 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 0.0;
}

float default argument 2 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 1.0;
}

uint64_t default argument 3 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 3;
}

uint64_t default argument 4 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 0;
}

void default argument 0 of ContentTransition.State.init(transition:style:animation:options:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000000;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void default argument 1 of ContentTransition.State.init(transition:style:animation:options:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 3 of ContentTransition.State.init(transition:style:animation:options:)()
{
  return 0;
}

void variable initialization expression of ContentTransition.State.style(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ContentTransition.State.animation()
{
  return 0;
}

uint64_t variable initialization expression of ContentTransition.State.options()
{
  return 0;
}

void variable initialization expression of ArchivedViewInput.Value.flags(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of ArchivedViewInput.Value.deploymentVersion(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 0 of _Transition_ContentTransition.Result.effects(_:)()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of _Transition_ContentTransition.result(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

uint64_t variable initialization expression of TransitionProperties.hasMotion()
{
  return 1;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer.Item.flags()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer.buf()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer.available()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer._count()
{
  return 0;
}

uint64_t variable initialization expression of WeakUncheckedSendable.value()
{
  return 0;
}

uint64_t variable initialization expression of IndirectAttributeMap.map()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of ForEach.reuseID()
{
  return 0;
}

void variable initialization expression of Canvas.rasterizationOptions(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 160;
  *(_BYTE *)(a1 + 16) = 3;
}

uint64_t variable initialization expression of Canvas.preservesMetadata()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityText.optional()
{
  return 0;
}

uint64_t default argument 1 of AccessibilityText.init(storage:optional:)()
{
  return 0;
}

void variable initialization expression of AccessibilityTextAttributes.contentType(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t variable initialization expression of AccessibilityTextAttributes.headingLevel()
{
  return 7;
}

uint64_t variable initialization expression of AccessibilityTextAttributes.durationTimeMMSS()
{
  return 2;
}

uint64_t variable initialization expression of AccessibilityTextAttributes.label()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraphGeometryObservers.store(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  type metadata accessor for ViewGraphGeometryObservers.Observer(255, a1, a2, v4);
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t default argument 1 of ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)()
{
  return 1;
}

uint64_t default argument 0 of AccessibilityProperties.init(reserving:)()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityAttachment.properties@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  result = Dictionary.init(minimumCapacity:)();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of AccessibilityAttachment.platformElement()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceKeys.keys()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ContentSizedSceneFeature.delegate()
{
  return 0;
}

float default argument 1 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return 0.0;
}

uint64_t variable initialization expression of ThreadSpecific.key()
{
  return 0;
}

uint64_t variable initialization expression of Text.Measurements._cache()
{
  return 0;
}

uint64_t variable initialization expression of ViewTransform.head()
{
  return 0;
}

double variable initialization expression of ViewTransform.positionAdjustment()
{
  return 0.0;
}

double variable initialization expression of ViewTransform.pendingTranslation()
{
  return 0.0;
}

void variable initialization expression of ViewTransform.UnsafeBuffer.contents(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void default argument 1 of HoverEffectGroupInfo.init(id:behavior:scope:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void default argument 2 of HoverEffectGroupInfo.init(id:behavior:scope:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of HoverEffectAccessibilityOptions.attachmentBehavior(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of HoverEffectAccessibilityOptions.init(accessibilityID:attachmentBehavior:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.Storage.resolvesToEmpty(in:with:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 0 of Text.Storage.isStyled(options:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.assertUnstyled(_:options:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.resolveStringCheckingForResolvables(in:with:idiom:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.resolvesToEmpty(in:with:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 0 of SpeechModifier.isStyled(options:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of static Text.System.swiftUICoreLocalized(_:tableName:comment:)()
{
  return 1701998403;
}

uint64_t default argument 1 of static String.System.kitLocalized(_:tableName:comment:)()
{
  return 0x617A696C61636F4CLL;
}

void variable initialization expression of SafeAreaInsets.next(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _SafeAreaInsetsModifier.nextInsets(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t variable initialization expression of ResolvedSafeAreaInsets._safeAreaInsets()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of PreferenceBridge.viewGraph()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge.isValid()
{
  return 1;
}

uint64_t variable initialization expression of PreferenceBridge.children()
{
  return MEMORY[0x24BEE4AF8];
}

void variable initialization expression of PreferenceBridge.requestedPreferences(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PreferenceBridge.bridgedViewInputs()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge._hostPreferenceKeys()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge._hostPreferencesCombiner()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge.bridgedPreferences()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of PreferenceBridge.removeValue(_:for:isInvalidating:)()
{
  return 0;
}

uint64_t default argument 1 of PreferenceBridge.removeHostValues(for:isInvalidating:)()
{
  return 0;
}

uint64_t variable initialization expression of ImageResolutionContext.symbolAnimator()
{
  return 0;
}

uint64_t variable initialization expression of ImageResolutionContext.textStyle@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(type metadata accessor for Text.Style, a1);
}

uint64_t variable initialization expression of ImageResolutionContext.transaction()
{
  return *MEMORY[0x24BE096C0];
}

void variable initialization expression of ImageResolutionContext.symbolRenderingMode(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void variable initialization expression of ImageResolutionContext.allowedDynamicRange(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void variable initialization expression of ImageResolutionContext.options(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void default argument 1 of AccessibilityIdentifierStorage.init(_:placement:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 0 of RangeReplaceableCollection<>.joined(separator:)()
{
  return 46;
}

void variable initialization expression of PhysicalButtonEvent.binding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DynamicLayoutMap.map()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DynamicLayoutMap.sortedArray()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DynamicLayoutMap.sortedSeed()
{
  return 0;
}

uint64_t default argument 1 of DynamicLayoutMap.init(map:sortedArray:sortedSeed:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of DynamicLayoutMap.init(map:sortedArray:sortedSeed:)()
{
  return 0;
}

double default argument 4 of Animation.Function.spring(_:)()
{
  return 0.0;
}

void variable initialization expression of AccessibilityActivationPointStorage.activate(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
}

uint64_t variable initialization expression of AccessibilityActivationPointStorage.drag()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of AccessibilityActivationPointStorage.drop()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of ReuseTrace.Recorder.frameActive()
{
  return 0;
}

void variable initialization expression of SystemFormatStyle.Timer.sizeVariant(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SystemFormatStyle.Timer.redactUsingDashes()
{
  return 1;
}

uint64_t variable initialization expression of SystemFormatStyle.Timer.forceNoPadding()
{
  return 0;
}

uint64_t variable initialization expression of SystemFormatStyle.Timer._textAlignment()
{
  return 3;
}

void variable initialization expression of SystemFormatStyle.Timer._monospacedDigits(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SystemFormatStyle.Timer._adjustedColon(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SystemFormatStyle.Timer._superscript(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of CodableAttributeEffect.attributes(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AccessibilityPlatformPropertyStorage.explicitRole()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityPlatformPropertyStorage.explicitSubrole()
{
  return 0;
}

void variable initialization expression of AccessibilityPlatformPropertyStorage.explicitTraits(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.identifier()
{
  return 0;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.roleDescription(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 18) = -1;
  *(_WORD *)(a1 + 16) = 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.sortPriority()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.explicitAutomationType()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.dataSeriesConfiguration@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[264];

  _s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v3);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, a1, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.linkDestination@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(type metadata accessor for LinkDestination.Configuration, a1);
}

uint64_t variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.customAttributes(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V2.textValue()
{
  return 0;
}

double variable initialization expression of CodableAccessibilityAttachmentStorage.V3.value@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = xmmword_235260EF0;
  return result;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.inputLabels()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.customContentList()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.textHeadingLevel()
{
  return 7;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.V3.textContentType(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.V3.chartDescriptor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.locale()
{
  return 0;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.V3.childBehaviorKind(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 0 of CodableAccessibilityUIKitTraits.init(removed:added:)()
{
  return 0;
}

uint64_t default argument 1 of CodableAccessibilityUIKitTraits.init(removed:added:)()
{
  return 0;
}

void variable initialization expression of EmptyViewRendererHost.propertiesNeedingUpdate(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of EmptyViewRendererHost.renderingPhase(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of EmptyViewRendererHost.externalUpdateCount()
{
  return 0;
}

void variable initialization expression of EmptyViewRendererHost.currentTimestamp(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(_QWORD *a1@<X8>)
{
  void (*v2)(_QWORD *);
  void *v3;

  *a1 = 0;
  a1[1] = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v3 = static CoreGlue2.shared;
  v2(a1);

}

uint64_t variable initialization expression of ViewGraph.delegate()
{
  return 0;
}

void variable initialization expression of ViewGraph.features(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of ViewGraph.centersRootView()
{
  return 1;
}

uint64_t variable initialization expression of ViewGraph._scrollableContainerSize()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ViewGraph._rootPhase()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ViewGraph._gestureDebug()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ViewGraph._gestureCategory()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of ViewGraph.eventSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph._rootResponders()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph._rootLayoutComputer()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph._rootDisplayList()
{
  return 0;
}

unint64_t variable initialization expression of ViewGraph.sizeThatFitsObservers@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of ViewGraph.accessibilityEnabled()
{
  return 0;
}

void variable initialization expression of ViewGraph.disabledOutputs(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ViewGraph.mainUpdates()
{
  return 0;
}

double variable initialization expression of GestureGraph.nextUpdateTime@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for infinity != -1)
    swift_once();
  result = *(double *)&static Time.infinity;
  *a1 = static Time.infinity;
  return result;
}

double variable initialization expression of ViewGraph.NextUpdate._interval()
{
  return INFINITY;
}

uint64_t variable initialization expression of ViewGraph.NextUpdate.reasons()
{
  return MEMORY[0x24BEE4B08];
}

double variable initialization expression of ViewGraph.nextUpdate(_QWORD *a1, uint64_t a2)
{
  double result;
  uint64_t v5;

  if (one-time initialization token for infinity != -1)
    swift_once();
  result = *(double *)&static Time.infinity;
  *a1 = static Time.infinity;
  v5 = MEMORY[0x24BEE4B08];
  a1[1] = 0x7FF0000000000000;
  a1[2] = v5;
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0x7FF0000000000000;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t variable initialization expression of ViewGraph._preferenceBridge()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph.bridgedPreferences()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 1 of ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaults != -1)
    result = swift_once();
  *a1 = static ViewGraph.Outputs.defaults;
  return result;
}

uint64_t default argument 0 of RootGeometry.init(layoutDirection:proposedSize:safeAreaInsets:childLayoutComputer:)()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of RootGeometry._layoutDirection()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of RootGeometry._safeAreaInsets()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t variable initialization expression of RootGeometry._childLayoutComputer()
{
  return *MEMORY[0x24BE096C0];
}

uint64_t default argument 2 of RootGeometry.init(layoutDirection:proposedSize:safeAreaInsets:childLayoutComputer:)()
{
  return *MEMORY[0x24BE096C0];
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AGAttribute()
{
  return UInt32._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AGAttribute@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = static UInt32._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance CoreSystem@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CoreSystem(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CGLineJoin@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CGLineJoin(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AGAttribute(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CGColorRef, a3);
  return static _CFObject.== infix(_:_:)();
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  char v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x23B7C7738](a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = static UInt32._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 1;
  return v3 & 1;
}

void protocol witness for SetAlgebra.init() in conformance NSCalendarUnit(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NSCalendarUnit(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance NSCalendarUnit@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance NSCalendarUnit(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSCalendarUnit(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance NSCalendarUnit(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance NSCalendarUnit()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSCalendarUnit()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance RBSymbolAnimationWiggleFlags(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CTFontRef(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CTFontRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CTFontRef()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CTFontRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CTFontRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CTFontRef);
}

void protocol witness for Hashable.hash(into:) in conformance RBShaderType()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RBShaderType()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RBShaderType()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance RBBlurFlags(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance RBBlurFlags@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance RBBlurFlags(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance RBBlurFlags(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance RBBlurFlags(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance RBBlurFlags()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance RBBlurFlags(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CTGlyphInfoRef(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CTGlyphInfoRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CTGlyphInfoRef()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CTGlyphInfoRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CTGlyphInfoRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CTGlyphInfoRef);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ViewSystem()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ViewSystem()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ViewSystem()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFDictionaryRef(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CFDictionaryRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFDictionaryRef()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CFDictionaryRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFDictionaryRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CFDictionaryRef, a3);
  return static _CFObject.== infix(_:_:)();
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance CTRunStatus@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSTextEncapsulationScale()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CUIColorName()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSTextEncapsulationScale()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CUIColorName@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CUIColorName(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CGColorRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CGColorRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSAttributedStringKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x23B7C5DAC](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AGSubgraphRef(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AGSubgraphRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AGSubgraphRef()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AGSubgraphRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AGSubgraphRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for AGSubgraphRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  MEMORY[0x23B7C9C04](a4, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey, (void (*)(void))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSCalendarUnit@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CTFontRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CTFontRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance RBBlurFlags@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CTGlyphInfoRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CTGlyphInfoRef, a3);
  return static _CFObject.== infix(_:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ViewSystem(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance CTRunStatus@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance CTRunStatus(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance CTRunStatus(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CTRunStatus(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CUIColorName(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AGSubgraphRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AGSubgraphRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGAttribute(a1, a2, (void (*)(void))lazy protocol witness table accessor for type AGAttribute and conformance AGAttribute, (void (*)(void))lazy protocol witness table accessor for type AGAttribute and conformance AGAttribute);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBDisplayListInterpolatorOptionKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  a3();
  a4();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSKeyValueChangeKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (void (*)(void))lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSRunLoopMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSRunLoopMode(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode, (void (*)(void))lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGNamedTraceEventID(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGAttribute(a1, a2, (void (*)(void))lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID, (void (*)(void))lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGAttribute(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  a3();
  a4();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey, (void (*)(void))lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBSymbolAnimationOptionKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, (void (*)(void))lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGDescriptionOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption, (void (*)(void))lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBDisplayListRenderKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSAttributedStringKey@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x23B7C5DAC](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBImageRendererProperty(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty, (void (*)(void))lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSRunLoopMode(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSAttributedStringKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AGNamedTraceEventID()
{
  return UInt32.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AGNamedTraceEventID()
{
  JUMPOUT(0x23B7C7624);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSAttributedStringKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t (*specialized closure #1 in closure #1 in closure #1 in Attribute.init(value:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:)()
{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UnaryViewAdaptor);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for [ViewResponder](0);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for [EventID : EventType](0, (unint64_t *)&lazy cache variable for type metadata for [EventID : EventType], (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x24BEE0460]);
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for [ScrollableCollection](0, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable);
  return static External._update(_:attribute:)();
}

uint64_t specialized _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  return specialized _ViewListCountInputs.subscript.setter(a1, a2, a3, *(_QWORD *)(a4 + 8));
}

uint64_t specialized _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  return specialized _GraphInputs.subscript.setter(a1, a2, a3, *(_QWORD *)(a4 + 8));
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  Swift::UInt *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (Swift::UInt *)(v3[6] + 16 * result);
    *v10 = v4;
    v10[1] = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<TintPlacement, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement);
  v3 = static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  result = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return v3;
  }
  v7 = a1 + 5;
  v8 = v1 - 1;
  while (1)
  {
    *(_QWORD *)(v3 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * result) = v4;
    v9 = *(_QWORD *)(v3 + 16);
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    *(_QWORD *)(v3 + 16) = v11;
    if (!v8)
      goto LABEL_8;
    v12 = *v7++;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)();
    --v8;
    v4 = v12;
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider;
  if (!lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider)
  {
    result = MEMORY[0x23B7C9C04]("y\b:\x1Bt[\t", &type metadata for Font.SystemProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider;
  if (!lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider)
  {
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider;
  if (!lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider)
  {
    result = MEMORY[0x23B7C9C04]("\r\t:\x1B8\\\t", &type metadata for Font.SystemProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider);
  }
  return result;
}

uint64_t outlined copy of GraphicsBlendMode(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_unknownObjectRetain();
  return result;
}

double _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t outlined assign with take of TypesettingLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnyViewStorage<TestIDView<EmptyView, Int>>)
  {
    v2 = type metadata accessor for TestIDView<EmptyView, Int>();
    v4 = type metadata accessor for AnyViewStorage(a1, v2, (uint64_t)&protocol witness table for TestIDView<A, B>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnyViewStorage<TestIDView<EmptyView, Int>>);
  }
}

uint64_t type metadata accessor for TestIDView<EmptyView, Int>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TestIDView<EmptyView, Int>;
  if (!lazy cache variable for type metadata for TestIDView<EmptyView, Int>)
    type metadata accessor for TestIDView();
  return result;
}

double _s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  return result;
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for _ViewInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy84_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _ViewInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 84))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 84) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 84) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewInputs()
{
  return &type metadata for _ViewInputs;
}

ValueMetadata *type metadata accessor for DynamicStackOrientation()
{
  return &type metadata for DynamicStackOrientation;
}

uint64_t sub_2349DACC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for ResetDeltaModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for ResetDeltaModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void *__swift_memcpy336_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x150uLL);
}

uint64_t getEnumTagSinglePayload for _AGTraceType(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 336))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGTraceType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 336) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 336) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for _AGTraceType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for _AGTraceType, (uint64_t)&unk_250650530, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for os_unfair_lock_s, (uint64_t)&unk_250650C00, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBTransitionEffectFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBTransitionEffectFlags, (uint64_t)&unk_250651408, MEMORY[0x24BEE4D40]);
}

__n128 __swift_memcpy96_4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for CC_SHA1state_st(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CC_SHA1state_st(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for CC_SHA1state_st(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CC_SHA1state_st, (uint64_t)&unk_250650968, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CoreSystem(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CoreSystem, (uint64_t)&unk_250650340, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBMeshGradientFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBMeshGradientFlags, (uint64_t)&unk_2506511E0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSCompositionLanguage(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSCompositionLanguage, (uint64_t)&unk_250651308, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CFAttributedStringRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CFAttributedStringRef, (uint64_t)&unk_250651290, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CUIDesignStyling(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CUIDesignStyling, (uint64_t)&unk_250650AF8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CUIColorName(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CUIColorName, (uint64_t)&unk_2506504A0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTLineRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CTLineRef, (uint64_t)&unk_250651D10, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGSVGDocumentRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGSVGDocumentRef, (uint64_t)&unk_250650A98, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGPDFPageRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGPDFPageRef, (uint64_t)&unk_250650470, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for ViewSystem(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for ViewSystem, (uint64_t)&unk_250650360, MEMORY[0x24BEE4D40]);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void type metadata accessor for PathData(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for PathData, (uint64_t)&unk_250651B68, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGLineJoin(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGLineJoin, (uint64_t)&unk_250650190, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGLineCap(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGLineCap, (uint64_t)&unk_250651CC0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSTextEncapsulationPlatterSize(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSTextEncapsulationPlatterSize, (uint64_t)&unk_250651618, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSTextEncapsulationStyle(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSTextEncapsulationStyle, (uint64_t)&unk_250651470, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSTextEncapsulationShape(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSTextEncapsulationShape, (uint64_t)&unk_250651450, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSTextEncapsulationScale(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSTextEncapsulationScale, (uint64_t)&unk_250651430, MEMORY[0x24BEE4D40]);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for AGWeakAttribute(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGWeakAttribute, (uint64_t)&unk_2506508E8, MEMORY[0x24BEE4D40]);
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for RBColor(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for RBColor(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBColor, (uint64_t)&unk_250651978, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBShapeRenderingMode(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBShapeRenderingMode, (uint64_t)&unk_250651230, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBColorSpace(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBColorSpace, (uint64_t)&unk_2506504F0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBBlendMode(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBBlendMode, (uint64_t)&unk_2506503D8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for IOSurfaceRef, (uint64_t)&unk_2506504C0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGImageRef, (uint64_t)&unk_250650160, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBShaderType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBShaderType, (uint64_t)&unk_250650510, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSUnderlineStyle, (uint64_t)&unk_250650B40, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimationReplaceFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationReplaceFlags, (uint64_t)&unk_2506515F0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimationAppearDisappearFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationAppearDisappearFlags, (uint64_t)&unk_2506516B0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimationVariableColorFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationVariableColorFlags, (uint64_t)&unk_250651660, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimationRotateFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationRotateFlags, (uint64_t)&unk_250651578, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimationWiggleFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationWiggleFlags, (uint64_t)&unk_2506515A0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimationBounceFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationBounceFlags, (uint64_t)&unk_250651550, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimation(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimation, (uint64_t)&unk_250650D88, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolAnimationBreatheFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationBreatheFlags, (uint64_t)&unk_2506515C8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGGraphRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGGraphRef, (uint64_t)&unk_250650090, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for _NSTextAnimatorState(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for _NSTextAnimatorState, (uint64_t)&unk_250651270, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBTransitionEvents(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBTransitionEvents, (uint64_t)&unk_250651048, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBTransitionEffectType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBTransitionEffectType, (uint64_t)&unk_2506513B0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBTransitionMethod(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for RBTransitionMethod, (uint64_t)&unk_250651088, MEMORY[0x24BEE4D40]);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGAffineTransform, (uint64_t)&unk_250650CC8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTGlyphInfoRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CTGlyphInfoRef, (uint64_t)&unk_250650718, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AXCustomContentImportance(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AXCustomContentImportance, (uint64_t)&unk_250651490, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolScaleLevel(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolScaleLevel, (uint64_t)&unk_250651010, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AXAutomationType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AXAutomationType, (uint64_t)&unk_250650A78, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGSubgraphRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGSubgraphRef, (uint64_t)&unk_2506506A0, MEMORY[0x24BEE4D40]);
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for RBDrawingState(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for RBDrawingState, (uint64_t)&unk_2506507C8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSCalendarUnit(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSCalendarUnit, (uint64_t)&unk_2506507A0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGDescriptionOption(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGDescriptionOption, (uint64_t)&unk_250651138, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CFDictionaryRef, (uint64_t)&unk_250650A08, MEMORY[0x24BEE4D40]);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CFRange(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CFRange, (uint64_t)&unk_250651830, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTRunRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for CTRunRef, (uint64_t)&unk_250651B30, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGColorRef, (uint64_t)&unk_250650130, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for NSURLResourceKey, (uint64_t)&unk_250650B18, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CFStringRef, (uint64_t)&unk_2506503A8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSLineBreakMode(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSLineBreakMode, (uint64_t)&unk_250650A48, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSRunLoopMode(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSRunLoopMode, (uint64_t)&unk_2506506D0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTFontRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for CTFontRef, (uint64_t)&unk_250651CE0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for _AttributedStringKey(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for _AttributedStringKey, (uint64_t)&unk_250651250, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGAttribute(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGAttribute, (uint64_t)&unk_250650380, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSAttributedStringKey, (uint64_t)&unk_2506512E0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for _NSRange, (uint64_t)&unk_250651BE0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBDisplayListRenderKey(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBDisplayListRenderKey, (uint64_t)&unk_250651370, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTCompositionLanguage(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CTCompositionLanguage, (uint64_t)&unk_2506512C0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGVector(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGVector, (uint64_t)&unk_250651AB0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGAttributeTypeFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for AGAttributeTypeFlags, (uint64_t)&unk_250651208, MEMORY[0x24BEE4D40]);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGRect, (uint64_t)&unk_250651710, MEMORY[0x24BEE4D40]);
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGSize, (uint64_t)&unk_2506517B0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGPoint, (uint64_t)&unk_2506518F8, MEMORY[0x24BEE4D40]);
}

ValueMetadata *type metadata accessor for ResetDeltaModifier()
{
  return &type metadata for ResetDeltaModifier;
}

uint64_t base witness table accessor for Equatable in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, (uint64_t (*)(uint64_t))type metadata accessor for AGAttributeTypeFlags, (uint64_t)&protocol conformance descriptor for AGAttributeTypeFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, (uint64_t (*)(uint64_t))type metadata accessor for AGAttributeTypeFlags, (uint64_t)&protocol conformance descriptor for AGAttributeTypeFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in AGAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (uint64_t)&protocol conformance descriptor for AGAttribute);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (uint64_t)&protocol conformance descriptor for AGAttribute);
}

uint64_t base witness table accessor for Equatable in CTFontRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t)&protocol conformance descriptor for CTFontRef);
}

uint64_t base witness table accessor for Hashable in CTFontRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t)&protocol conformance descriptor for CTFontRef);
}

uint64_t base witness table accessor for RawRepresentable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t base witness table accessor for Equatable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t base witness table accessor for Hashable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
}

uint64_t base witness table accessor for RawRepresentable in AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&protocol conformance descriptor for AGDescriptionOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&protocol conformance descriptor for AGDescriptionOption);
}

uint64_t base witness table accessor for Equatable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for RawRepresentable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for SetAlgebra in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
}

uint64_t base witness table accessor for Equatable in AGSubgraphRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, (uint64_t (*)(uint64_t))type metadata accessor for AGSubgraphRef, (uint64_t)&protocol conformance descriptor for AGSubgraphRef);
}

uint64_t lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, (uint64_t (*)(uint64_t))type metadata accessor for AGSubgraphRef, (uint64_t)&protocol conformance descriptor for AGSubgraphRef);
}

uint64_t base witness table accessor for Hashable in CTGlyphInfoRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CTGlyphInfoRef and conformance CTGlyphInfoRef, (uint64_t (*)(uint64_t))type metadata accessor for CTGlyphInfoRef, (uint64_t)&protocol conformance descriptor for CTGlyphInfoRef);
}

uint64_t base witness table accessor for Equatable in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEvents, (uint64_t)&protocol conformance descriptor for RBTransitionEvents);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEvents, (uint64_t)&protocol conformance descriptor for RBTransitionEvents);
}

uint64_t base witness table accessor for RawRepresentable in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEvents, (uint64_t)&protocol conformance descriptor for RBTransitionEvents);
}

uint64_t base witness table accessor for SetAlgebra in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEvents, (uint64_t)&protocol conformance descriptor for RBTransitionEvents);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBreatheFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBreatheFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBreatheFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBreatheFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBounceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBounceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBounceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationBounceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationWiggleFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationWiggleFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationWiggleFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationWiggleFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationRotateFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationRotateFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationRotateFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationRotateFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationVariableColorFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationVariableColorFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationVariableColorFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationVariableColorFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationAppearDisappearFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationAppearDisappearFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationAppearDisappearFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationAppearDisappearFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationReplaceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationReplaceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationReplaceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationReplaceFlags, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for Equatable in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, (uint64_t (*)(uint64_t))type metadata accessor for NSUnderlineStyle, (uint64_t)&protocol conformance descriptor for NSUnderlineStyle);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, (uint64_t (*)(uint64_t))type metadata accessor for NSUnderlineStyle, (uint64_t)&protocol conformance descriptor for NSUnderlineStyle);
}

uint64_t base witness table accessor for RawRepresentable in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, (uint64_t (*)(uint64_t))type metadata accessor for NSUnderlineStyle, (uint64_t)&protocol conformance descriptor for NSUnderlineStyle);
}

uint64_t base witness table accessor for SetAlgebra in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, (uint64_t (*)(uint64_t))type metadata accessor for NSUnderlineStyle, (uint64_t)&protocol conformance descriptor for NSUnderlineStyle);
}

uint64_t base witness table accessor for Equatable in RBShaderType()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBShaderType and conformance RBShaderType, (uint64_t (*)(uint64_t))type metadata accessor for RBShaderType, (uint64_t)&protocol conformance descriptor for RBShaderType);
}

uint64_t base witness table accessor for Equatable in RBShapeRenderingMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBShapeRenderingMode and conformance RBShapeRenderingMode, (uint64_t (*)(uint64_t))type metadata accessor for RBShapeRenderingMode, (uint64_t)&protocol conformance descriptor for RBShapeRenderingMode);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationScale()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationScale and conformance NSTextEncapsulationScale, (uint64_t (*)(uint64_t))type metadata accessor for NSTextEncapsulationScale, (uint64_t)&protocol conformance descriptor for NSTextEncapsulationScale);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationShape()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationShape and conformance NSTextEncapsulationShape, (uint64_t (*)(uint64_t))type metadata accessor for NSTextEncapsulationShape, (uint64_t)&protocol conformance descriptor for NSTextEncapsulationShape);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationStyle and conformance NSTextEncapsulationStyle, (uint64_t (*)(uint64_t))type metadata accessor for NSTextEncapsulationStyle, (uint64_t)&protocol conformance descriptor for NSTextEncapsulationStyle);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationPlatterSize()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationPlatterSize and conformance NSTextEncapsulationPlatterSize, (uint64_t (*)(uint64_t))type metadata accessor for NSTextEncapsulationPlatterSize, (uint64_t)&protocol conformance descriptor for NSTextEncapsulationPlatterSize);
}

uint64_t base witness table accessor for Equatable in ViewSystem()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ViewSystem and conformance ViewSystem, (uint64_t (*)(uint64_t))type metadata accessor for ViewSystem, (uint64_t)"ٞ=\x1B");
}

uint64_t base witness table accessor for Equatable in CUIColorName()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CUIColorName and conformance CUIColorName, (uint64_t (*)(uint64_t))type metadata accessor for CUIColorName, (uint64_t)&protocol conformance descriptor for CUIColorName);
}

uint64_t base witness table accessor for Equatable in CUIDesignStyling()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CUIDesignStyling and conformance CUIDesignStyling, (uint64_t (*)(uint64_t))type metadata accessor for CUIDesignStyling, (uint64_t)&protocol conformance descriptor for CUIDesignStyling);
}

uint64_t base witness table accessor for Equatable in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBMeshGradientFlags, (uint64_t)&protocol conformance descriptor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBMeshGradientFlags, (uint64_t)&protocol conformance descriptor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBMeshGradientFlags, (uint64_t)&protocol conformance descriptor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBMeshGradientFlags, (uint64_t)&protocol conformance descriptor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for Equatable in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEffectFlags, (uint64_t)&protocol conformance descriptor for RBTransitionEffectFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEffectFlags, (uint64_t)&protocol conformance descriptor for RBTransitionEffectFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEffectFlags, (uint64_t)&protocol conformance descriptor for RBTransitionEffectFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBTransitionEffectFlags, (uint64_t)&protocol conformance descriptor for RBTransitionEffectFlags);
}

_UNKNOWN **associated type witness table accessor for ViewModifier.Body : View in ResetDeltaModifier()
{
  return &protocol witness table for Never;
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t base witness table accessor for Equatable in CTGlyphInfoRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CTGlyphInfoRef and conformance CTGlyphInfoRef, (uint64_t (*)(uint64_t))type metadata accessor for CTGlyphInfoRef, (uint64_t)&protocol conformance descriptor for CTGlyphInfoRef);
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&protocol conformance descriptor for AGDescriptionOption);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for RawRepresentable in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, (uint64_t (*)(uint64_t))type metadata accessor for AGAttributeTypeFlags, (uint64_t)&protocol conformance descriptor for AGAttributeTypeFlags);
}

uint64_t base witness table accessor for SetAlgebra in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, (uint64_t (*)(uint64_t))type metadata accessor for AGAttributeTypeFlags, (uint64_t)&protocol conformance descriptor for AGAttributeTypeFlags);
}

unint64_t lazy protocol witness table accessor for type GestureDependency and conformance GestureDependency()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency;
  if (!lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDependency, &type metadata for GestureDependency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency;
  if (!lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDependency, &type metadata for GestureDependency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase;
  if (!lazy protocol witness table cache variable for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResetDeltaModifier.ChildPhase, &unk_250629CE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&protocol conformance descriptor for AGDescriptionOption);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, (uint64_t (*)(uint64_t))type metadata accessor for AGDescriptionOption, (uint64_t)&protocol conformance descriptor for AGDescriptionOption);
}

uint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t)&protocol conformance descriptor for NSRunLoopMode);
}

uint64_t lazy protocol witness table accessor for type AGAttribute and conformance AGAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, MEMORY[0x24BE096A8]);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (uint64_t)&protocol conformance descriptor for AGAttribute);
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListRenderKey, (uint64_t)&protocol conformance descriptor for RBDisplayListRenderKey);
}

void type metadata accessor for [(_:)](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [(_:)], (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

unint64_t type metadata accessor for (_:)()
{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for AGSubgraphRef(255);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for Int?();
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for Int?();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t), void (*a5)(void))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    a4(255);
    a5();
    v8 = type metadata accessor for _DictionaryStorage();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for [(_:)](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for [AttributeInfoTrace.Scope](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [AttributeInfoTrace.Scope], (uint64_t (*)(uint64_t))type metadata accessor for AttributeInfoTrace.Scope, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Identifier, &type metadata for Text.Effect.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Identifier, &type metadata for Text.Effect.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventID and conformance EventID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventID and conformance EventID;
  if (!lazy protocol witness table cache variable for type EventID and conformance EventID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventID, &type metadata for EventID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventID and conformance EventID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventID and conformance EventID;
  if (!lazy protocol witness table cache variable for type EventID and conformance EventID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventID, &type metadata for EventID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventID and conformance EventID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, (uint64_t)&type metadata for SizeThatFitsMeasurer, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewGraphGeometryObservers.Observer);
    lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>);
  }
}

void type metadata accessor for FontBox<Font.SystemProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer;
  if (!lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SizeThatFitsMeasurer, &type metadata for SizeThatFitsMeasurer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize;
  if (!lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ProposedSize, &type metadata for _ProposedSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize;
  if (!lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ProposedSize, &type metadata for _ProposedSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement;
  if (!lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TintPlacement, &type metadata for TintPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement;
  if (!lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TintPlacement, &type metadata for TintPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<_ProposedSize, CGSize>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, CGSize>)
  {
    type metadata accessor for CGSize(255);
    lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, CGSize>);
  }
}

void type metadata accessor for _DictionaryStorage<RBImageRendererProperty, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<RBImageRendererProperty, Any>)
  {
    type metadata accessor for RBImageRendererProperty(255);
    lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<RBImageRendererProperty, Any>);
  }
}

void type metadata accessor for RBImageRendererProperty(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBImageRendererProperty, (uint64_t)&unk_2506513E0, MEMORY[0x24BEE4D40]);
}

uint64_t lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, (uint64_t (*)(uint64_t))type metadata accessor for RBImageRendererProperty, (uint64_t)&protocol conformance descriptor for RBImageRendererProperty);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, (uint64_t (*)(uint64_t))type metadata accessor for RBImageRendererProperty, (uint64_t)&protocol conformance descriptor for RBImageRendererProperty);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>)
  {
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>);
  }
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for (ObjectIdentifier, Any)(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for CFStringRef?, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4AB0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = type metadata accessor for _DictionaryStorage();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for (RBImageRendererProperty, Any)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _DictionaryStorage<CFStringRef, [CFDictionaryRef]>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(a1, &lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, [CFDictionaryRef]>, type metadata accessor for CFStringRef, type metadata accessor for [CFDictionaryRef], (void (*)(void))lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef);
}

void type metadata accessor for [CFDictionaryRef](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [CFDictionaryRef], (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void type metadata accessor for _DictionaryStorage<CFStringRef, [String]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, [String]>)
  {
    type metadata accessor for CFStringRef(255);
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, [String]>);
  }
}

void type metadata accessor for (ObjectIdentifier, Any)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t outlined retain of GestureDebug.Data(uint64_t a1)
{
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  swift_retain();
  return a1;
}

uint64_t outlined copy of ArrayWith2Inline<(String, String)>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if (a9 == 2)
    return swift_retain();
  if (a9 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if (a9)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t outlined release of GestureDebug.Data(uint64_t a1)
{
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  swift_release();
  return a1;
}

uint64_t outlined consume of ArrayWith2Inline<(String, String)>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if (a9 == 2)
    return swift_release();
  if (a9 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (a9)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role;
  if (!lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollAnchorStorage.Role, &type metadata for ScrollAnchorStorage.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role;
  if (!lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollAnchorStorage.Role, &type metadata for ScrollAnchorStorage.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AnyHashable, WeakBox<AnyLocationBase>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, WeakBox<AnyLocationBase>>)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, WeakBox<AnyLocationBase>>);
  }
}

uint64_t outlined init with copy of TypesettingLanguage(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (AnyHashable, WeakBox<AnyLocationBase>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyHashable, WeakBox<AnyLocationBase>))
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable, WeakBox<AnyLocationBase>));
  }
}

uint64_t outlined init with take of WeakBox<AnyLocationBase>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for [ScrollableCollection](uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    v4 = type metadata accessor for Array();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(a1, &lazy cache variable for type metadata for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>, type metadata accessor for RBSymbolAnimationOptionKey, (void (*)(void))lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey);
}

void type metadata accessor for RBSymbolAnimationOptionKey(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolAnimationOptionKey, (uint64_t)&unk_250651508, MEMORY[0x24BEE4D40]);
}

uint64_t lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationOptionKey, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationOptionKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationOptionKey, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationOptionKey);
}

void type metadata accessor for _DictionaryStorage<AGDescriptionOption, Any>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(a1, &lazy cache variable for type metadata for _DictionaryStorage<AGDescriptionOption, Any>, type metadata accessor for AGDescriptionOption, (void (*)(void))lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption);
}

void type metadata accessor for [ViewResponder](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

unint64_t lazy protocol witness table accessor for type External<[ViewResponder]> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<[ViewResponder]> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<[ViewResponder]> and conformance External<A>)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for External<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<[ViewResponder]> and conformance External<A>);
  }
  return result;
}

uint64_t outlined copy of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_retain();
  if ((a5 & 1) != 0)
    return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  return result;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t outlined consume of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_release();
  if ((a5 & 1) != 0)
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey;
  if (!lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.RatioKey, &type metadata for Font.RatioKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey;
  if (!lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.RatioKey, &type metadata for Font.RatioKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey);
  }
  return result;
}

void type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for External<_UnaryViewAdaptor<EmptyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<_UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UnaryViewAdaptor);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<_UnaryViewAdaptor<EmptyView>>);
  }
}

void type metadata accessor for External<GesturePhase<()>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<GesturePhase<()>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<GesturePhase<()>>);
  }
}

uint64_t type metadata accessor for ScrollStateRequest(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, uint64_t, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x24BEE0D00], a3, MEMORY[0x24BEE0D10]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton;
  if (!lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CAHostingLayerEvent.MouseButton, &type metadata for CAHostingLayerEvent.MouseButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton;
  if (!lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CAHostingLayerEvent.MouseButton, &type metadata for CAHostingLayerEvent.MouseButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  }
  return result;
}

void type metadata accessor for (String, AccessibilityCustomAttributes.Value)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, AccessibilityCustomAttributes.Value))
  {
    type metadata accessor for AccessibilityCustomAttributes.Value();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, AccessibilityCustomAttributes.Value));
  }
}

void type metadata accessor for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>)
  {
    type metadata accessor for AccessibilityCustomAttributes.Value();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>);
  }
}

uint64_t outlined init with take of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(a1, &lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>, type metadata accessor for NSAttributedStringKey, (void (*)(void))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey);
}

void type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>)
  {
    type metadata accessor for [ScrollableCollection](255, &lazy cache variable for type metadata for [ScrollableCollection], (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    lazy protocol witness table accessor for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>);
  }
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollTargetRole.Role, &type metadata for ScrollTargetRole.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollTargetRole.Role, &type metadata for ScrollTargetRole.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role);
  }
  return result;
}

void type metadata accessor for (ObjectIdentifier, ScrollStateRequest)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _DictionaryStorage<RBDisplayListRenderKey, Any>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>(a1, &lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListRenderKey, Any>, type metadata accessor for RBDisplayListRenderKey, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey);
}

uint64_t outlined init with copy of (RBImageRendererProperty, Any)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (RBImageRendererProperty, Any)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with copy of (EventID, EventType)(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  type metadata accessor for (ObjectIdentifier, ScrollStateRequest)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of ScrollStateRequest(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for _DictionaryStorage<GestureDependency, Int>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for _DictionaryStorage();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key;
  if (!lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Spacing.Key, &type metadata for Spacing.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key;
  if (!lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Spacing.Key, &type metadata for Spacing.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key);
  }
  return result;
}

uint64_t outlined retain of ViewTransform(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of ViewTransform(uint64_t a1)
{
  swift_release();
  return a1;
}

void type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    lazy protocol witness table accessor for type ResolvedShapeStyles and conformance ResolvedShapeStyles();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedShapeStyles and conformance ResolvedShapeStyles()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles;
  if (!lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedShapeStyles, &type metadata for ResolvedShapeStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles;
  if (!lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedShapeStyles, &type metadata for ResolvedShapeStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedShapeStyles and conformance ResolvedShapeStyles);
  }
  return result;
}

void type metadata accessor for CFURLRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CFURLRef, (uint64_t)&unk_250651A80, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTLineDecorationElementType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CTLineDecorationElementType, (uint64_t)&unk_250651530, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBSymbolStyle(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBSymbolStyle, (uint64_t)&unk_2506506F8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTRunDelegateRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for CTRunDelegateRef, (uint64_t)&unk_250650AC8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGFontRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CGFontRef, (uint64_t)&unk_250651C90, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CTFontDescriptorRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CTFontDescriptorRef, (uint64_t)&unk_250651188, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSKeyValueChangeKey, (uint64_t)&unk_2506511B8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for _NSTextLayoutManagerSegmentCategory(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for _NSTextLayoutManagerSegmentCategory, (uint64_t)&unk_250651688, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSInlinePresentationIntent(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for NSInlinePresentationIntent, (uint64_t)&unk_2506514C0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBDisplayListInterpolatorOptionKey(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for RBDisplayListInterpolatorOptionKey, (uint64_t)&unk_250651638, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CGContextRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for CGContextRef, (uint64_t)&unk_250650440, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CFArrayRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for CFArrayRef, (uint64_t)&unk_2506500C0, MEMORY[0x24BEE4D40]);
}

uint64_t getEnumTagSinglePayload for ResetDeltaModifier.ChildPhase(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ResetDeltaModifier.ChildPhase(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void *type metadata accessor for ResetDeltaModifier.ChildPhase()
{
  return &unk_250629CE0;
}

void type metadata accessor for AGComparisonState(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGComparisonState, (uint64_t)&unk_250650C28, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGNamedTraceEventFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGNamedTraceEventFlags, (uint64_t)&unk_250651328, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for CFDataRef, (uint64_t)&unk_250651C60, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGNamedTraceEventID(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGNamedTraceEventID, (uint64_t)&unk_250651160, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AGWeakAttribute.__Unnamed_struct__details(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGWeakAttribute.__Unnamed_struct__details, (uint64_t)&unk_250650868, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBBlurFlags(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBBlurFlags, (uint64_t)&unk_2506503F8, MEMORY[0x24BEE4D40]);
}

uint64_t getEnumTagSinglePayload for _AGAttributeVTable(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGAttributeVTable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for _AGAttributeVTable(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for _AGAttributeVTable, (uint64_t)&unk_2506510A8, MEMORY[0x24BEE4D40]);
}

uint64_t getEnumTagSinglePayload for _AGClosureStorage(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGClosureStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for _AGClosureStorage(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for _AGClosureStorage, (uint64_t)&unk_250650DA8, MEMORY[0x24BEE4D40]);
}

uint64_t getEnumTagSinglePayload for RBDrawingState(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RBDrawingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for AGTypeID(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGTypeID, (uint64_t)&unk_250651A00, MEMORY[0x24BEE4D40]);
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _AGAttributeType(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGAttributeType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for _AGAttributeType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for _AGAttributeType, (uint64_t)&unk_250650B68, MEMORY[0x24BEE4D40]);
}

uint64_t base witness table accessor for Equatable in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBBlurFlags, (uint64_t)&protocol conformance descriptor for RBBlurFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBBlurFlags, (uint64_t)&protocol conformance descriptor for RBBlurFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBBlurFlags, (uint64_t)&protocol conformance descriptor for RBBlurFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, (uint64_t (*)(uint64_t))type metadata accessor for RBBlurFlags, (uint64_t)&protocol conformance descriptor for RBBlurFlags);
}

uint64_t base witness table accessor for RawRepresentable in AGNamedTraceEventID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, (uint64_t (*)(uint64_t))type metadata accessor for AGNamedTraceEventID, (uint64_t)&protocol conformance descriptor for AGNamedTraceEventID);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGNamedTraceEventID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, (uint64_t (*)(uint64_t))type metadata accessor for AGNamedTraceEventID, (uint64_t)&protocol conformance descriptor for AGNamedTraceEventID);
}

uint64_t base witness table accessor for Equatable in AGNamedTraceEventID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, (uint64_t (*)(uint64_t))type metadata accessor for AGNamedTraceEventID, (uint64_t)&protocol conformance descriptor for AGNamedTraceEventID);
}

uint64_t base witness table accessor for RawRepresentable in RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListInterpolatorOptionKey, (uint64_t)&protocol conformance descriptor for RBDisplayListInterpolatorOptionKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListInterpolatorOptionKey, (uint64_t)&protocol conformance descriptor for RBDisplayListInterpolatorOptionKey);
}

uint64_t base witness table accessor for Equatable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for RawRepresentable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for SetAlgebra in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for Equatable in _NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _NSTextLayoutManagerSegmentCategory and conformance _NSTextLayoutManagerSegmentCategory, (uint64_t (*)(uint64_t))type metadata accessor for _NSTextLayoutManagerSegmentCategory, (uint64_t)&protocol conformance descriptor for _NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in _NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _NSTextLayoutManagerSegmentCategory and conformance _NSTextLayoutManagerSegmentCategory, (uint64_t (*)(uint64_t))type metadata accessor for _NSTextLayoutManagerSegmentCategory, (uint64_t)&protocol conformance descriptor for _NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for RawRepresentable in _NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _NSTextLayoutManagerSegmentCategory and conformance _NSTextLayoutManagerSegmentCategory, (uint64_t (*)(uint64_t))type metadata accessor for _NSTextLayoutManagerSegmentCategory, (uint64_t)&protocol conformance descriptor for _NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for SetAlgebra in _NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _NSTextLayoutManagerSegmentCategory and conformance _NSTextLayoutManagerSegmentCategory, (uint64_t (*)(uint64_t))type metadata accessor for _NSTextLayoutManagerSegmentCategory, (uint64_t)&protocol conformance descriptor for _NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for RawRepresentable in RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, (uint64_t (*)(uint64_t))type metadata accessor for RBImageRendererProperty, (uint64_t)&protocol conformance descriptor for RBImageRendererProperty);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, (uint64_t (*)(uint64_t))type metadata accessor for RBImageRendererProperty, (uint64_t)&protocol conformance descriptor for RBImageRendererProperty);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationOptionKey, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationOptionKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationOptionKey, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationOptionKey);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBSymbolAnimationOptionKey, (uint64_t)&protocol conformance descriptor for RBSymbolAnimationOptionKey);
}

uint64_t base witness table accessor for Equatable in RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, (uint64_t (*)(uint64_t))type metadata accessor for RBImageRendererProperty, (uint64_t)&protocol conformance descriptor for RBImageRendererProperty);
}

uint64_t base witness table accessor for Equatable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for Equatable in RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListInterpolatorOptionKey, (uint64_t)&protocol conformance descriptor for RBDisplayListInterpolatorOptionKey);
}

uint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&protocol conformance descriptor for NSKeyValueChangeKey);
}

uint64_t lazy protocol witness table accessor for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListInterpolatorOptionKey, (uint64_t)&protocol conformance descriptor for RBDisplayListInterpolatorOptionKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListInterpolatorOptionKey, (uint64_t)&protocol conformance descriptor for RBDisplayListInterpolatorOptionKey);
}

uint64_t lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, (uint64_t (*)(uint64_t))type metadata accessor for AGNamedTraceEventID, (uint64_t)&protocol conformance descriptor for AGNamedTraceEventID);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, (uint64_t (*)(uint64_t))type metadata accessor for AGNamedTraceEventID, (uint64_t)&protocol conformance descriptor for AGNamedTraceEventID);
}

uint64_t lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B7C9C04](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AGSwiftMetadata(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for AGSwiftMetadata, (uint64_t)&unk_250650848, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for RBImageType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, &lazy cache variable for type metadata for RBImageType, (uint64_t)&unk_250650420, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for NSTextCorrectionMarkerType(uint64_t a1)
{
  type metadata accessor for MutableBox<CachedEnvironment>(a1, (unint64_t *)&lazy cache variable for type metadata for NSTextCorrectionMarkerType, (uint64_t)&unk_2506514E8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for MutableBox<CachedEnvironment>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void GraphHost.constants.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

__C::CGRect __swiftcall LayoutDirection.convert(_:to:in:)(__C::CGRect _, SwiftUI::LayoutDirection to, CGSize in)
{
  unsigned __int8 *v3;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  double v7;
  double v8;
  double v9;

  height = _.size.height;
  width = _.size.width;
  y = _.origin.y;
  if (*(unsigned __int8 *)to != *v3)
    _.origin.x = in.width - _.origin.x - CGRectGetWidth((CGRect)_);
  v7 = y;
  v8 = width;
  v9 = height;
  _.size.height = v9;
  _.size.width = v8;
  _.origin.y = v7;
  return _;
}

BOOL static LayoutDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void LayoutDirection.opposite.getter(BOOL *a1@<X8>)
{
  _BYTE *v1;

  *a1 = (*v1 & 1) == 0;
}

void LayoutDirection.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void *static LayoutDirection.allCases.getter()
{
  return &outlined read-only object #0 of static LayoutDirection.allCases.getter;
}

Swift::Int LayoutDirection.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LayoutDirection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LayoutDirection()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LayoutDirection()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LayoutDirection()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance LayoutDirection(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance LayoutDirection;
}

uint64_t EnvironmentValues.layoutDirection.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized find<A>(_:key:)(v4);
    if (v5)
      *a1 = *(_BYTE *)(v5 + 72);
    else
      *a1 = 0;
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.layoutDirection.setter(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(a1, a3);
    swift_release();
  }
  else
  {
    v5 = swift_retain();
    v6 = specialized find<A>(_:key:)(v5);
    if (v6)
      *a3 = *(_BYTE *)(v6 + 72);
    else
      *a3 = 0;
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  if (a2)
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(a1, a3);
  }
  else
  {
    v5 = swift_retain_n();
    v6 = specialized find<A>(_:key:)(v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 72);
      v8 = *(_DWORD *)(v6 + 80);
      outlined copy of Material?(v7);
    }
    else
    {
      v8 = 0;
      v7 = 8;
    }
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = v8;
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _BYTE v15[16];

  if (a2)
  {
    swift_retain_n();
    swift_retain_n();
    v6 = specialized PropertyList.Tracker.value<A>(_:for:)(a1);
    v8 = v7;
    swift_release_n();
    swift_release_n();
    if (!v6)
    {
      swift_retain();
      v9 = swift_retain();
      specialized PropertyList.Tracker.value<A>(_:for:)(v9, a3);
      swift_release();
      return swift_release();
    }
  }
  else
  {
    v11 = swift_retain_n();
    v6 = specialized closure #1 in PropertyList.subscript.getter(v11, (uint64_t)v15);
    v8 = v12;
    swift_release_n();
    if (!v6)
    {
      v13 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v13, a3);
      return swift_release_n();
    }
  }
  v14[0] = a1;
  v14[1] = a2;
  return (*(uint64_t (**)(ValueMetadata *, _QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 8))(&type metadata for TypesettingConfigurationKey, v14, &type metadata for TypesettingConfigurationKey, &protocol witness table for TypesettingConfigurationKey, v6, v8);
}

uint64_t (*EnvironmentValues.layoutDirection.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized find<A>(_:key:)(v4);
    if (v5)
      *v2 = *(_BYTE *)(v5 + 72);
    else
      *v2 = 0;
  }
  swift_release_n();
  return EnvironmentValues.layoutDirection.modify;
}

uint64_t EnvironmentValues.layoutDirection.modify(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance LayoutDirectionKey(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void LayoutDirection.codingProxy.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

SwiftUI::CodableLayoutDirection __swiftcall CodableLayoutDirection.init(_:)(SwiftUI::CodableLayoutDirection result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result.base;
  return result;
}

void CodableLayoutDirection.base.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *CodableLayoutDirection.base.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CodableLayoutDirection.base.modify())()
{
  return _ViewInputs.base.modify;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableLayoutDirection.CodingValue()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CodableLayoutDirection.CodingValue()
{
  _BYTE *v0;
  Swift::UInt v1;

  if (*v0)
    v1 = 2;
  else
    v1 = 1;
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableLayoutDirection.CodingValue()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CodableLayoutDirection.CodingValue@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 2)
    v2 = 1;
  else
    v2 = 2;
  if (*result == 1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableLayoutDirection.CodingValue(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1;
  if (*v1)
    v2 = 2;
  *a1 = v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableLayoutDirection.CodingValue()
{
  lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableLayoutDirection.CodingValue()
{
  lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue();
  return RawRepresentable<>.encode(to:)();
}

uint64_t CodableLayoutDirection.encode(to:)(_QWORD *a1)
{
  char *v1;
  char v2;
  _BYTE v4[24];
  uint64_t v5;
  char v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t CodableLayoutDirection.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v6;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableLayoutDirection@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CodableLayoutDirection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableLayoutDirection(_QWORD *a1)
{
  return CodableLayoutDirection.encode(to:)(a1);
}

BOOL specialized static Stack<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  if (!a1)
    return a2 == 0;
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(a2 + 40);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_BYTE *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_BYTE *)(a2 + 32);
    outlined copy of BodyInputElement();
    outlined copy of BodyInputElement();
    swift_retain();
    swift_retain();
    if ((specialized static BodyInputElement.== infix(_:_:)(v4, v5, v6, v7, v8, v9) & 1) != 0)
    {
      v10 = specialized static Stack<A>.== infix(_:_:)(v2, v3);
      outlined consume of BodyInputElement();
      outlined consume of BodyInputElement();
      swift_release();
      swift_release();
      return v10 & 1;
    }
    swift_release();
    swift_release();
    outlined consume of BodyInputElement();
    outlined consume of BodyInputElement();
  }
  return 0;
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (a1)
  {
    if (v6 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v8 = v7;
      v9 = *(_QWORD *)(v5 + 32);
      if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v22);
        outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
        v12 = v24;
        v13 = v25;
        __swift_project_boxed_opaque_existential_1(v23, v24);
        ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for LayoutDirection, v12, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      }
      else
      {
        v17 = swift_retain();
        v18 = specialized find<A>(_:key:)(v17);
        if (v18)
          v19 = *(_BYTE *)(v18 + 72);
        else
          v19 = 0;
        *a2 = v19;
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>(0);
        v24 = v20;
        v25 = &protocol witness table for TrackedValue<A>;
        LOBYTE(v23[0]) = v19;
        specialized Dictionary.subscript.setter((uint64_t)v23, v8);
      }
      goto LABEL_15;
    }
  }
  else if (!v6)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v5 + 56) = 1;
  v14 = swift_retain();
  v15 = specialized find<A>(_:key:)(v14);
  if (v15)
    v16 = *(_BYTE *)(v15 + 72);
  else
    v16 = 0;
  *a2 = v16;
  swift_release();
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for SymbolVariants, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *(_WORD *)a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOWORD(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  ValueMetadata *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v6 = v5;
      v7 = *(_QWORD *)(v3 + 32);
      if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
        outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
        v10 = v25;
        v11 = v26;
        __swift_project_boxed_opaque_existential_1(v24, v25);
        ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v23, &type metadata for SystemColorDefinitionType, v10, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      }
      else
      {
        v16 = swift_retain();
        v17 = specialized find<A>(_:key:)(v16);
        if (v17)
        {
          v19 = *(ValueMetadata **)(v17 + 72);
          v18 = *(_UNKNOWN ***)(v17 + 80);
        }
        else
        {
          v18 = &protocol witness table for CoreUIDefaultSystemColorDefinition;
          v19 = &type metadata for CoreUIDefaultSystemColorDefinition;
        }
        swift_release();
        *(_QWORD *)&v23[0] = v19;
        *((_QWORD *)&v23[0] + 1) = v18;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>(0);
        v25 = v20;
        v26 = &protocol witness table for TrackedValue<A>;
        v24[0] = v19;
        v24[1] = v18;
        specialized Dictionary.subscript.setter((uint64_t)v24, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v3 + 56) = 1;
  v12 = swift_retain();
  v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    v15 = *(ValueMetadata **)(v13 + 72);
    v14 = *(_UNKNOWN ***)(v13 + 80);
  }
  else
  {
    v14 = &protocol witness table for CoreUIDefaultSystemColorDefinition;
    v15 = &type metadata for CoreUIDefaultSystemColorDefinition;
  }
  swift_release();
  *(_QWORD *)&v23[0] = v15;
  *((_QWORD *)&v23[0] + 1) = v14;
LABEL_15:
  v21 = *(_QWORD *)&v23[0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v21;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v22[0] = v13;
    *((_QWORD *)&v22[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    v10 = v24;
    v11 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v22, &type metadata for FontDefinitionType, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v22[0] = v17;
    *((_QWORD *)&v22[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>(0);
    v24 = v20;
    v25 = &protocol witness table for TrackedValue<A>;
    v23[0] = v17;
    v23[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v23, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v22[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23;
  char v24;
  uint64_t v25;
  _UNKNOWN **v26;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v6 = v5;
      v7 = *(_QWORD *)(v3 + 32);
      if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v22);
        outlined init with take of ScrollStateRequest(v22, (uint64_t)&v23);
        v10 = v26;
        __swift_project_boxed_opaque_existential_1(&v23, v25);
        v11 = (void (*)(__int128 *__return_ptr))v10[1];
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
        v11(v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      }
      else
      {
        v16 = swift_retain();
        v17 = specialized find<A>(_:key:)(v16);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 72);
          v19 = *(_BYTE *)(v17 + 80);
        }
        else
        {
          v18 = 0;
          v19 = 1;
        }
        swift_release();
        *(_QWORD *)&v22[0] = v18;
        BYTE8(v22[0]) = v19;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>(0);
        v25 = v20;
        v26 = &protocol witness table for TrackedValue<A>;
        v23 = v18;
        v24 = v19;
        specialized Dictionary.subscript.setter((uint64_t)&v23, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v3 + 56) = 1;
  v12 = swift_retain();
  v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 72);
    v15 = *(_BYTE *)(v13 + 80);
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  swift_release();
  *(_QWORD *)&v22[0] = v14;
  BYTE8(v22[0]) = v15;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v22[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23;
  char v24;
  uint64_t v25;
  _UNKNOWN **v26;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v6 = v5;
      v7 = *(_QWORD *)(v3 + 32);
      if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v22);
        outlined init with take of ScrollStateRequest(v22, (uint64_t)&v23);
        v10 = v26;
        __swift_project_boxed_opaque_existential_1(&v23, v25);
        v11 = (void (*)(__int128 *__return_ptr))v10[1];
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
        v11(v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      }
      else
      {
        v16 = swift_retain();
        v17 = specialized find<A>(_:key:)(v16);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 72);
          v19 = *(_BYTE *)(v17 + 80);
        }
        else
        {
          v18 = 0;
          v19 = 1;
        }
        swift_release();
        *(_QWORD *)&v22[0] = v18;
        BYTE8(v22[0]) = v19;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>(0);
        v25 = v20;
        v26 = &protocol witness table for TrackedValue<A>;
        v23 = v18;
        v24 = v19;
        specialized Dictionary.subscript.setter((uint64_t)&v23, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v3 + 56) = 1;
  v12 = swift_retain();
  v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 72);
    v15 = *(_BYTE *)(v13 + 80);
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  swift_release();
  *(_QWORD *)&v22[0] = v14;
  BYTE8(v22[0]) = v15;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v22[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  _BYTE v28[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CGFloat?, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>(0);
    v26 = v20;
    v27 = &protocol witness table for TrackedValue<A>;
    v24 = v17;
    v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for TextAlignment?, (uint64_t)&type metadata for TextAlignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Bool?, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v6 = v5;
      v7 = *(_QWORD *)(v3 + 32);
      if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v20);
        outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
        v10 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        v11 = (void (*)(__int128 *__return_ptr))v10[1];
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
        v11(v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
      else
      {
        v15 = swift_retain();
        v16 = specialized find<A>(_:key:)(v15);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 72);
          swift_retain();
        }
        else
        {
          v17 = 0;
        }
        swift_release();
        *(_QWORD *)&v20[0] = v17;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>(0);
        v22 = v18;
        v23 = &protocol witness table for TrackedValue<A>;
        v21[0] = v17;
        swift_retain();
        specialized Dictionary.subscript.setter((uint64_t)v21, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v3 + 56) = 1;
  v12 = swift_retain();
  v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 72);
    swift_retain();
  }
  else
  {
    v14 = 0;
  }
  swift_release();
  *(_QWORD *)&v20[0] = v14;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v20[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v6 = v5;
      v7 = *(_QWORD *)(v3 + 32);
      if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v20);
        outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
        v10 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        v11 = (void (*)(__int128 *__return_ptr))v10[1];
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
        v11(v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
      else
      {
        v15 = swift_retain();
        v16 = specialized find<A>(_:key:)(v15);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 72);
          swift_retain();
        }
        else
        {
          v17 = 0;
        }
        swift_release();
        *(_QWORD *)&v20[0] = v17;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>(0);
        v22 = v18;
        v23 = &protocol witness table for TrackedValue<A>;
        v21[0] = v17;
        swift_retain();
        specialized Dictionary.subscript.setter((uint64_t)v21, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v3 + 56) = 1;
  v12 = swift_retain();
  v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 72);
    swift_retain();
  }
  else
  {
    v14 = 0;
  }
  swift_release();
  *(_QWORD *)&v20[0] = v14;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v20[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _BYTE v27[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    *((_QWORD *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for CoreUINamedColorProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    *((_QWORD *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1768], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CatalogAssetMatchType], (uint64_t)&type metadata for CatalogAssetMatchType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v18[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _BYTE v27[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    *((_QWORD *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for DefaultAccentColorProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    *((_QWORD *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnabledKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _BYTE v27[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    *((_QWORD *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for BridgedEnvironmentResolver.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    *((_QWORD *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v18[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  _BYTE v28[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CGFloat?, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>(0);
    v26 = v20;
    v27 = &protocol witness table for TrackedValue<A>;
    v24 = v17;
    v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(_QWORD *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1768], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(_QWORD *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _BYTE v27[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    *((_QWORD *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for VibrantColorStyle.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    *((_QWORD *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Bool?, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Bool?, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  _BYTE v28[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Double?, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>(0);
    v26 = v20;
    v27 = &protocol witness table for TrackedValue<A>;
    v24 = v17;
    v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _BYTE v27[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    *((_QWORD *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for ResolvedTextProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    *((_QWORD *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v19, &type metadata for Axis.Set, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v19, &type metadata for Axis.Set, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _BYTE v27[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    *((_QWORD *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for SystemAccentValueProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    *((_QWORD *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [_SymbolEffect.Identified], (uint64_t)&type metadata for _SymbolEffect.Identified, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v18[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LODWORD(v18[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v18, &type metadata for HierarchicalShapeStyle, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LODWORD(v18[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LODWORD(v19[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LODWORD(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v18[8];
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v10 = v21;
    v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  _BYTE v28[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CGFloat?, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>(0);
    v26 = v20;
    v27 = &protocol witness table for TrackedValue<A>;
    v24 = v17;
    v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _BYTE v22[8];
  __int128 v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  _BYTE v28[16];

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    v15 = v14;
    swift_release();
    *(_QWORD *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CGFloat?, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    v16 = swift_retain();
    v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    v19 = v18;
    swift_release();
    *(_QWORD *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>(0);
    v26 = v20;
    v27 = &protocol witness table for TrackedValue<A>;
    v24 = v17;
    v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE1328], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(__int128 *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v11 = (void (*)(__int128 *__return_ptr))v10[1];
    type metadata accessor for [TintPlacement : AnyShapeStyle]();
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(_QWORD *)&v18[0];
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38[2];
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = (os_unfair_lock_s *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v7 = *(_QWORD *)(v5 + 24);
  if (a1)
  {
    if (v7 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v9 = v8;
      v10 = *(_QWORD *)(v5 + 32);
      if (*(_QWORD *)(v10 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v12 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v10 + 56) + 40 * v11, (uint64_t)v38);
        outlined init with take of ScrollStateRequest(v38, (uint64_t)v39);
        v13 = v40;
        v14 = v41;
        __swift_project_boxed_opaque_existential_1(v39, v40);
        ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v14[1])(&type metadata for ContentTransition.State, v13, v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      }
      else
      {
        v25 = swift_retain();
        v26 = specialized find<A>(_:key:)(v25);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 72);
          v28 = *(unsigned int *)(v26 + 80) | ((unint64_t)*(unsigned __int8 *)(v26 + 84) << 32);
          v29 = *(_BYTE *)(v26 + 85);
          v30 = *(_BYTE *)(v26 + 86);
          v31 = *(_BYTE *)(v26 + 87);
          v32 = *(_QWORD *)(v26 + 88);
          v33 = *(_DWORD *)(v26 + 96);
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v28 = 0x302000000;
          v27 = 0x8000000000;
        }
        *(_QWORD *)a2 = v27;
        *(_DWORD *)(a2 + 8) = v28;
        *(_BYTE *)(a2 + 12) = BYTE4(v28);
        *(_BYTE *)(a2 + 13) = v29;
        *(_BYTE *)(a2 + 14) = v30;
        *(_BYTE *)(a2 + 15) = v31;
        *(_QWORD *)(a2 + 16) = v32;
        *(_DWORD *)(a2 + 24) = v33;
        v34 = v30;
        outlined copy of ContentTransition.Storage(v27, v28, v29);
        swift_retain();
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>(0);
        v40 = v35;
        v41 = &protocol witness table for TrackedValue<A>;
        v36 = swift_allocObject();
        v39[0] = v36;
        *(_QWORD *)(v36 + 16) = v27;
        *(_BYTE *)(v36 + 28) = BYTE4(v28);
        *(_DWORD *)(v36 + 24) = v28;
        *(_BYTE *)(v36 + 29) = v29;
        *(_BYTE *)(v36 + 30) = v34;
        *(_BYTE *)(v36 + 31) = v31;
        *(_QWORD *)(v36 + 32) = v32;
        *(_DWORD *)(v36 + 40) = v33;
        outlined copy of ContentTransition.Storage(v27, v28, v29);
        swift_retain();
        specialized Dictionary.subscript.setter((uint64_t)v39, v9);
        v6 = (os_unfair_lock_s *)(v5 + 16);
      }
      goto LABEL_15;
    }
  }
  else if (!v7)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v5 + 56) = 1;
  v15 = swift_retain();
  v16 = specialized find<A>(_:key:)(v15);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 72);
    v18 = *(unsigned __int8 *)(v16 + 84);
    v19 = *(unsigned int *)(v16 + 80);
    v20 = *(_BYTE *)(v16 + 86);
    v21 = *(_BYTE *)(v16 + 87);
    v22 = *(_QWORD *)(v16 + 88);
    v23 = *(_DWORD *)(v16 + 96);
    v24 = *(_BYTE *)(v16 + 85);
    *(_QWORD *)a2 = v17;
    *(_DWORD *)(a2 + 8) = v19;
    *(_BYTE *)(a2 + 12) = v18;
    *(_BYTE *)(a2 + 13) = v24;
    *(_BYTE *)(a2 + 14) = v20;
    *(_BYTE *)(a2 + 15) = v21;
    *(_QWORD *)(a2 + 16) = v22;
    *(_DWORD *)(a2 + 24) = v23;
    outlined copy of ContentTransition.Storage(v17, v19 | (v18 << 32), v24);
    swift_retain();
  }
  else
  {
    *(_QWORD *)a2 = 0x8000000000;
    *(_DWORD *)(a2 + 8) = 0x2000000;
    *(_BYTE *)(a2 + 12) = 3;
    *(_QWORD *)(a2 + 13) = 0;
    *(_QWORD *)(a2 + 20) = 0;
  }
  swift_release();
LABEL_15:
  os_unfair_lock_unlock(v6);
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    v12 = v22;
    v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    v15 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for FallbackFontProvider);
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>(0);
    v22 = v18;
    v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = swift_allocObject();
    outlined init with copy of AnyTrackedValue(a2, v21[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    v12 = v22;
    v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Text.Sizing, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *(_BYTE *)a2;
    v17 = *(_QWORD *)(a2 + 8);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>(0);
    v22 = v18;
    v23 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v21[0]) = v16;
    v21[1] = v17;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v24[2];
  unint64_t v25;
  int v26;
  uint64_t v27;
  _UNKNOWN **v28;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (a1)
  {
    if (v6 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v8 = v7;
      v9 = *(_QWORD *)(v5 + 32);
      if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v24);
        outlined init with take of ScrollStateRequest(v24, (uint64_t)&v25);
        v12 = v28;
        __swift_project_boxed_opaque_existential_1(&v25, v27);
        v13 = (void (*)(void))v12[1];
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Material?, (uint64_t)&type metadata for Material, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
        v13();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
      }
      else
      {
        v18 = swift_retain();
        v19 = specialized find<A>(_:key:)(v18);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 72);
          v21 = *(_DWORD *)(v19 + 80);
          *(_QWORD *)a2 = v20;
          *(_DWORD *)(a2 + 8) = v21;
          outlined copy of Material?(v20);
        }
        else
        {
          v21 = 0;
          v20 = 8;
          *(_QWORD *)a2 = 8;
          *(_DWORD *)(a2 + 8) = 0;
        }
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>(0);
        v27 = v22;
        v28 = &protocol witness table for TrackedValue<A>;
        v25 = v20;
        v26 = v21;
        outlined copy of Material?(v20);
        specialized Dictionary.subscript.setter((uint64_t)&v25, v8);
      }
      goto LABEL_15;
    }
  }
  else if (!v6)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v5 + 56) = 1;
  v14 = swift_retain();
  v15 = specialized find<A>(_:key:)(v14);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 72);
    v17 = *(_DWORD *)(v15 + 80);
    *(_QWORD *)a2 = v16;
    *(_DWORD *)(a2 + 8) = v17;
    outlined copy of Material?(v16);
  }
  else
  {
    *(_QWORD *)a2 = 8;
    *(_DWORD *)(a2 + 8) = 0;
  }
  swift_release();
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  __int128 v19[2];
  uint64_t v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    v12 = v24;
    v13 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    v15 = type metadata accessor for Locale();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LocaleKey>>(0);
    v24 = v18;
    v25 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    v20 = type metadata accessor for Locale();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2, v20);
    specialized Dictionary.subscript.setter((uint64_t)v23, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  __int128 v21[2];
  uint64_t v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v21);
    outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
    v12 = v23;
    v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    v15 = type metadata accessor for TypesettingConfiguration();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>(0);
    v23 = v18;
    v24 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
    outlined init with copy of TypesettingLanguage(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
    specialized Dictionary.subscript.setter((uint64_t)v22, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v12 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, v19[0] + 16, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
    specialized Dictionary.subscript.setter((uint64_t)v19, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    v12 = v24;
    v13 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    v15 = type metadata accessor for Calendar();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<CalendarKey>>(0);
    v24 = v18;
    v25 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    v20 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2, v20);
    specialized Dictionary.subscript.setter((uint64_t)v23, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    v12 = v24;
    v13 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    v15 = type metadata accessor for TimeZone();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>(0);
    v24 = v18;
    v25 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    v20 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2, v20);
    specialized Dictionary.subscript.setter((uint64_t)v23, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  __int128 v19[2];
  uint64_t v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>(0);
    v21 = v16;
    v22 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  __int128 v21[2];
  uint64_t v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v16 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v16, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v21);
    outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
    v12 = v23;
    v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v14 = (void (*)(uint64_t, uint64_t, _UNKNOWN **))v13[1];
    v15 = type metadata accessor for EnvironmentValues.Key.Value();
    v14(v15, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    v17 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v17, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>(0);
    v23 = v18;
    v24 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
    outlined init with copy of TypesettingLanguage(a2, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
    specialized Dictionary.subscript.setter((uint64_t)v22, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21[2];
  _QWORD v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v21);
    outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
    v12 = v23;
    v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ContainerShapeData, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_BYTE *)(a2 + 56);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>(0);
    v23 = v18;
    v24 = &protocol witness table for TrackedValue<A>;
    v19 = swift_allocObject();
    v22[0] = v19;
    *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v19 + 40) = v16;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v19 + 64) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(v19 + 72) = v17;
    specialized Dictionary.subscript.setter((uint64_t)v22, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v12 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for HoverEffectContext?, (uint64_t)&type metadata for HoverEffectContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v22 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
    v17 = *(_WORD *)(a2 + 24);
    v18 = *(_BYTE *)(a2 + 26);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>(0);
    v25 = v19;
    v26 = &protocol witness table for TrackedValue<A>;
    v20 = swift_allocObject();
    v24[0] = v20;
    *(_OWORD *)(v20 + 16) = v22;
    *(_QWORD *)(v20 + 32) = v16;
    *(_BYTE *)(v20 + 42) = v18;
    *(_WORD *)(v20 + 40) = v17;
    specialized Dictionary.subscript.setter((uint64_t)v24, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24[2];
  _QWORD v25[3];
  uint64_t v26;
  _UNKNOWN **v27;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v24);
    outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
    v12 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *(_QWORD *)a2;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(_WORD *)(a2 + 32);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>(0);
    v26 = v21;
    v27 = &protocol witness table for TrackedValue<A>;
    v22 = swift_allocObject();
    v25[0] = v22;
    *(_QWORD *)(v22 + 16) = v16;
    *(_QWORD *)(v22 + 24) = v17;
    *(_QWORD *)(v22 + 32) = v18;
    *(_QWORD *)(v22 + 40) = v19;
    *(_WORD *)(v22 + 48) = v20;
    outlined copy of OpenURLAction?(v16, v17, v18, v19, v20);
    specialized Dictionary.subscript.setter((uint64_t)v25, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24[2];
  _QWORD v25[3];
  uint64_t v26;
  _UNKNOWN **v27;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v24);
    outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
    v12 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *(_QWORD *)a2;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(_WORD *)(a2 + 32);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>(0);
    v26 = v21;
    v27 = &protocol witness table for TrackedValue<A>;
    v22 = swift_allocObject();
    v25[0] = v22;
    *(_QWORD *)(v22 + 16) = v16;
    *(_QWORD *)(v22 + 24) = v17;
    *(_QWORD *)(v22 + 32) = v18;
    *(_QWORD *)(v22 + 40) = v19;
    *(_WORD *)(v22 + 48) = v20;
    outlined copy of OpenURLAction?(v16, v17, v18, v19, v20);
    specialized Dictionary.subscript.setter((uint64_t)v25, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23[2];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    v12 = v25;
    v13 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ScrollAnchorStorage, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *(_QWORD *)a2;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_BYTE *)(a2 + 24);
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>(0);
    v25 = v20;
    v26 = &protocol witness table for TrackedValue<A>;
    v21 = swift_allocObject();
    v24[0] = v21;
    *(_QWORD *)(v21 + 16) = v16;
    *(_QWORD *)(v21 + 24) = v17;
    *(_QWORD *)(v21 + 32) = v18;
    *(_BYTE *)(v21 + 40) = v19;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v24, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v12 = v20;
    v13 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for EnvironmentValues.PreferenceBridgeKey.Value, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = swift_allocObject();
    outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(a2, v19[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v19, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for DynamicTypeSize, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for LegibilityWeight?, (uint64_t)&type metadata for LegibilityWeight, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for WatchDisplayVariant, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text.TruncationMode?, (uint64_t)&type metadata for Text.TruncationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Text.WritingMode, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ColorScheme, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ColorSchemeContrast, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for DisplayGamut, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ContainerBackgroundKind?, (uint64_t)&type metadata for ContainerBackgroundKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for BackgroundContext, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for TintAdjustmentMode?, (uint64_t)&type metadata for TintAdjustmentMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Image.TemplateRenderingMode, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Image.DynamicRange?, (uint64_t)&type metadata for Image.DynamicRange, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Image.DynamicRange?, (uint64_t)&type metadata for Image.DynamicRange, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Image.Scale, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for SymbolRenderingMode?, (uint64_t)&type metadata for SymbolRenderingMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for BackgroundProminence, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, (uint64_t)&type metadata for UserInterfaceSizeClass, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, (uint64_t)&type metadata for UserInterfaceSizeClass, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text.Case?, (uint64_t)&type metadata for Text.Case, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Text.Scale?, (uint64_t)&type metadata for Text.Scale, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ParagraphTypesetting, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AccessibilityAnnouncementPriority?, (uint64_t)&type metadata for AccessibilityAnnouncementPriority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SystemAccentValue?, (uint64_t)&type metadata for SystemAccentValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ControlSize?, (uint64_t)&type metadata for ControlSize, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for MaterialActiveAppearance, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text.TruncationMode?, (uint64_t)&type metadata for Text.TruncationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ColorScheme, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Prominence, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ColorScheme?, (uint64_t)&type metadata for ColorScheme, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

double specialized PropertyList.Tracker.value<A>(_:for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(__int128 *__return_ptr, _QWORD, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x24BEE50B0], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v14 = swift_retain();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>(0);
    v20 = v16;
    v21 = &protocol witness table for TrackedValue<A>;
    *(double *)v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 24);
  if (!a1)
  {
    if (!v4)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v3 + 56) = 1;
    v12 = swift_retain();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    swift_release();
    *(double *)&v31 = v13;
    *((_QWORD *)&v31 + 1) = v15;
    v32 = v17;
    v33 = v19;
    goto LABEL_9;
  }
  if (v4 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)&v31);
    outlined init with take of ScrollStateRequest(&v31, (uint64_t)v34);
    v10 = v35;
    v11 = v36;
    __swift_project_boxed_opaque_existential_1(v34, v35);
    ((void (*)(__int128 *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(&v31, &type metadata for EdgeInsets, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  else
  {
    v20 = swift_retain();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    v23 = v22;
    v25 = v24;
    v27 = v26;
    swift_release();
    *(double *)&v31 = v21;
    *((_QWORD *)&v31 + 1) = v23;
    v32 = v25;
    v33 = v27;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>(0);
    v35 = v28;
    v36 = &protocol witness table for TrackedValue<A>;
    v29 = (double *)swift_allocObject();
    v34[0] = v29;
    v29[2] = v21;
    *((_QWORD *)v29 + 3) = v23;
    *((_QWORD *)v29 + 4) = v25;
    *((_QWORD *)v29 + 5) = v27;
    specialized Dictionary.subscript.setter((uint64_t)v34, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)&v31;
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for TextJustification, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    LOWORD(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for RedactionReasons, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    v12 = v22;
    v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for BackgroundInfo, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    v17 = a2[1];
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>(0);
    v22 = v18;
    v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = v16;
    v21[1] = v17;
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for TextSizeVariant, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19[2];
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ContentShapes, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>(0);
    v21 = v17;
    v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v16;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    v12 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Text.LineStyle?, (uint64_t)&type metadata for Text.LineStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    v17 = a2[1];
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>(0);
    v22 = v18;
    v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = v16;
    v21[1] = v17;
    outlined copy of Text.LineStyle?(v16, v17);
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (!a1)
  {
    if (!v6)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v5 + 56) = 1;
    v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    v12 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    v13 = (void (*)(void))v12[1];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Text.LineStyle?, (uint64_t)&type metadata for Text.LineStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    v16 = *a2;
    v17 = a2[1];
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>(0);
    v22 = v18;
    v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = v16;
    v21[1] = v17;
    outlined copy of Text.LineStyle?(v16, v17);
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  __int128 v37[2];
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = (os_unfair_lock_s *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v7 = *(_QWORD *)(v5 + 24);
  if (a1)
  {
    if (v7 == *(_QWORD *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      v9 = v8;
      v10 = *(_QWORD *)(v5 + 32);
      if (*(_QWORD *)(v10 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v12 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v10 + 56) + 40 * v11, (uint64_t)v37);
        outlined init with take of ScrollStateRequest(v37, (uint64_t)v38);
        v13 = v39;
        v14 = v40;
        __swift_project_boxed_opaque_existential_1(v38, v39);
        ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v14[1])(&type metadata for ResolvedTextSuffix, v13, v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      }
      else
      {
        v24 = swift_retain();
        v25 = (_QWORD *)specialized find<A>(_:key:)(v24);
        v36 = v9;
        if (v25)
        {
          v26 = (void *)v25[9];
          v27 = v25[10];
          v28 = v25[11];
          v29 = v25[12];
          v30 = v25[13];
          v31 = v25[14];
          v32 = v25[15];
          *a2 = v26;
          a2[1] = v27;
          a2[2] = v28;
          a2[3] = v29;
          a2[4] = v30;
          a2[5] = v31;
          a2[6] = v32;
          outlined copy of ResolvedTextSuffix(v26, v27, v28, v29, v30, v31);
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v32 = 0;
          a2[4] = 0;
          *(_OWORD *)a2 = 0u;
          *((_OWORD *)a2 + 1) = 0u;
          *(_OWORD *)(a2 + 5) = xmmword_235260F00;
          v31 = 0x8000000000000000;
        }
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>(0);
        v39 = v33;
        v40 = &protocol witness table for TrackedValue<A>;
        v34 = (_QWORD *)swift_allocObject();
        v38[0] = v34;
        v34[2] = v26;
        v34[3] = v27;
        v34[4] = v28;
        v34[5] = v29;
        v34[6] = v30;
        v34[7] = v31;
        v34[8] = v32;
        outlined copy of ResolvedTextSuffix(v26, v27, v28, v29, v30, v31);
        specialized Dictionary.subscript.setter((uint64_t)v38, v36);
        v6 = (os_unfair_lock_s *)(v5 + 16);
      }
      goto LABEL_15;
    }
  }
  else if (!v7)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v5 + 56) = 1;
  v15 = swift_retain();
  v16 = (_QWORD *)specialized find<A>(_:key:)(v15);
  if (v16)
  {
    v18 = (void *)v16[9];
    v17 = v16[10];
    v19 = v16[11];
    v20 = v16[12];
    v21 = v16[13];
    v22 = v16[14];
    v23 = v16[15];
    *a2 = v18;
    a2[1] = v17;
    a2[2] = v19;
    a2[3] = v20;
    a2[4] = v21;
    a2[5] = v22;
    a2[6] = v23;
    outlined copy of ResolvedTextSuffix(v18, v17, v19, v20, v21, v22);
  }
  else
  {
    a2[4] = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)(a2 + 5) = xmmword_235260F00;
  }
  swift_release();
LABEL_15:
  os_unfair_lock_unlock(v6);
  return swift_release();
}

uint64_t specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(uint64_t a1, uint64_t a2)
{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey);
}

uint64_t specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[40];

  v11 = *(_QWORD *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 24);
  if (a1)
  {
    if (v12 != *(_QWORD *)(a1 + 64))
      goto LABEL_22;
    if (!a2)
    {
      if (!v12)
        goto LABEL_22;
      v13 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    if (v12)
      v14 = 1;
    else
      v14 = a2 == 0;
    if (v14)
      goto LABEL_22;
  }
  if (v12 == *(_QWORD *)(a2 + 64))
    goto LABEL_22;
  v13 = 0;
LABEL_12:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  specialized Dictionary._Variant.removeValue(forKey:)(v15, (uint64_t)&v21);
  if (v22)
  {
    outlined init with take of ScrollStateRequest(&v21, (uint64_t)v23);
    outlined init with copy of AnyTrackedValue((uint64_t)v23, (uint64_t)&v21);
    v16 = *(_QWORD **)(v11 + 48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v11 + 48) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *(_QWORD *)(v11 + 48) = v16;
    }
    v19 = v16[2];
    v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
      *(_QWORD *)(v11 + 48) = v16;
    }
    v16[2] = v19 + 1;
    outlined init with take of ScrollStateRequest(&v21, (uint64_t)&v16[5 * v19 + 4]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    outlined destroy of AnyTrackedValue?((uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  }
  move(_:to:)(v11 + 40, v11 + 48);
  if ((v13 & 1) != 0)
    *(_QWORD *)(v11 + 24) = 0;
  else
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 + 64);
LABEL_22:
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
  return swift_release();
}

uint64_t specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  char *v21;
  uint64_t v22;

  v22 = a2;
  v3 = type metadata accessor for Date();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v21 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - v9;
  type metadata accessor for (Date?, Date?)();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  outlined init with copy of AccessibilityTextAttributeResolver?(a1, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)v4, (uint64_t)v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  outlined init with copy of AccessibilityTextAttributeResolver?(v22, v15, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)v4, (uint64_t)v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v13, 1, v3) != 1)
  {
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v13, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    if (v16(v15, 1, v3) != 1)
    {
      v18 = v21;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v21, v15, v3);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v18, v3);
      v19(v10, v3);
      outlined destroy of Date?((uint64_t)v13);
      return v17 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v3);
    goto LABEL_6;
  }
  if (v16(v15, 1, v3) != 1)
  {
LABEL_6:
    outlined destroy of TypesettingConfiguration((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for (Date?, Date?));
    v17 = 0;
    return v17 & 1;
  }
  outlined destroy of Date?((uint64_t)v13);
  v17 = 1;
  return v17 & 1;
}

uint64_t specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7, int a8)
{
  uint64_t result;

  result = a8 == 2;
  if (a4 != 2)
  {
    if (a8 == 2)
      return 0;
    if (a2)
    {
      if (a2 == 1)
      {
        result = 0;
        if (a6 != 1 || a1 != a5)
          return result;
        return ((a8 & 0x10000) == 0) ^ ((a4 & 0x10000u) >> 16);
      }
      result = 0;
      if (a6 == 2 && !a5)
        return ((a8 & 0x10000) == 0) ^ ((a4 & 0x10000u) >> 16);
    }
    else
    {
      result = 0;
      if (!a6 && (_DWORD)a1 == (_DWORD)a5)
        return ((a8 & 0x10000) == 0) ^ ((a4 & 0x10000u) >> 16);
    }
  }
  return result;
}

uint64_t specialized find<A>(_:key:)(uint64_t a1)
{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for ViewListOptionsInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for ViewListOptionsInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for ViewListOptionsInput >> 4);
  v3 = (unsigned __int16)&type metadata for ViewListOptionsInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for ViewListOptionsInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ViewListOptionsInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for ViewListOptionsInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for ViewListOptionsInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for ViewListOptionsInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for ViewListOptionsInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for StyleContextInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for StyleContextInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for StyleContextInput >> 4);
  v3 = (unsigned __int16)&type metadata for StyleContextInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for StyleContextInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for StyleContextInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for StyleContextInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for StyleContextInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for StyleContextInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for StyleContextInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for InterfaceIdiomInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for InterfaceIdiomInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for InterfaceIdiomInput >> 4);
  v3 = (unsigned __int16)&type metadata for InterfaceIdiomInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for InterfaceIdiomInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for InterfaceIdiomInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for InterfaceIdiomInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for InterfaceIdiomInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for InterfaceIdiomInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for InterfaceIdiomInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for VariantThatFitsFlag >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for VariantThatFitsFlag >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for VariantThatFitsFlag >> 4);
  v3 = (unsigned __int16)&type metadata for VariantThatFitsFlag >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for VariantThatFitsFlag >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for VariantThatFitsFlag >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for VariantThatFitsFlag >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for VariantThatFitsFlag >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for VariantThatFitsFlag >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for VariantThatFitsFlag >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for ReferenceDateInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for ReferenceDateInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for ReferenceDateInput >> 4);
  v3 = (unsigned __int16)&type metadata for ReferenceDateInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for ReferenceDateInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ReferenceDateInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for ReferenceDateInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for ReferenceDateInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for ReferenceDateInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for ReferenceDateInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 4);
  v3 = (unsigned __int16)&type metadata for PreferTextLayoutManagerInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for PreferTextLayoutManagerInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for PreferTextLayoutManagerInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for PreferTextLayoutManagerInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 4);
  v3 = (unsigned __int16)&type metadata for _DisplayList_StableIdentityScope >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _DisplayList_StableIdentityScope >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for _DisplayList_StableIdentityScope >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for _DisplayList_StableIdentityScope >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for DisplayList.Options >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for DisplayList.Options >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for DisplayList.Options >> 4);
  v3 = (unsigned __int16)&type metadata for DisplayList.Options >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for DisplayList.Options >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for DisplayList.Options >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for DisplayList.Options >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for DisplayList.Options >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for DisplayList.Options >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for DisplayList.Options >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for DynamicStackOrientation >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for DynamicStackOrientation >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for DynamicStackOrientation >> 4);
  v3 = (unsigned __int16)&type metadata for DynamicStackOrientation >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for DynamicStackOrientation >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for DynamicStackOrientation >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for DynamicStackOrientation >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for DynamicStackOrientation >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for DynamicStackOrientation >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for DynamicStackOrientation >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for ForEachEvictionInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for ForEachEvictionInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for ForEachEvictionInput >> 4);
  v3 = (unsigned __int16)&type metadata for ForEachEvictionInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for ForEachEvictionInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ForEachEvictionInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for ForEachEvictionInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for ForEachEvictionInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for ForEachEvictionInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for ForEachEvictionInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for ArchivedViewInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for ArchivedViewInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for ArchivedViewInput >> 4);
  v3 = (unsigned __int16)&type metadata for ArchivedViewInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for ArchivedViewInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ArchivedViewInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for ArchivedViewInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for ArchivedViewInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for ArchivedViewInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for ArchivedViewInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for UsingGraphicsRenderer >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for UsingGraphicsRenderer >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for UsingGraphicsRenderer >> 4);
  v3 = (unsigned __int16)&type metadata for UsingGraphicsRenderer >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for UsingGraphicsRenderer >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for UsingGraphicsRenderer >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for UsingGraphicsRenderer >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for UsingGraphicsRenderer >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for UsingGraphicsRenderer >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for UsingGraphicsRenderer >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for Image.Style >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for Image.Style >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for Image.Style >> 4);
  v3 = (unsigned __int16)&type metadata for Image.Style >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for Image.Style >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for Image.Style >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for Image.Style >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for Image.Style >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for Image.Style >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for Image.Style >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for TextRendererInput >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for TextRendererInput >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for TextRendererInput >> 4);
  v3 = (unsigned __int16)&type metadata for TextRendererInput >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for TextRendererInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for TextRendererInput >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for TextRendererInput >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for TextRendererInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for TextRendererInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for TextRendererInput >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for TextSelectionForbidden >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for TextSelectionForbidden >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for TextSelectionForbidden >> 4);
  v3 = (unsigned __int16)&type metadata for TextSelectionForbidden >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for TextSelectionForbidden >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for TextSelectionForbidden >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for TextSelectionForbidden >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for TextSelectionForbidden >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for TextSelectionForbidden >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for TextSelectionForbidden >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for TextAllowsSelection >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for TextAllowsSelection >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for TextAllowsSelection >> 4);
  v3 = (unsigned __int16)&type metadata for TextAllowsSelection >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for TextAllowsSelection >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for TextAllowsSelection >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for TextAllowsSelection >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for TextAllowsSelection >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for TextAllowsSelection >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for TextAllowsSelection >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  return specialized find<A>(_:key:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>, specialized find1<A>(_:key:filter:));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v2 = ((unint64_t)&type metadata for ReusableInputs >> 4) & 0x3F;
  v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFADD__(v2, 64);
  v2 = 1uLL >> -(char)((unint64_t)&type metadata for ReusableInputs >> 4);
  if (!v4)
    v2 = 1 << ((unint64_t)&type metadata for ReusableInputs >> 4);
  v3 = (unsigned __int16)&type metadata for ReusableInputs >> 10;
  if (v3 > 0x40)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = 1 << ((unint64_t)&type metadata for ReusableInputs >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ReusableInputs >> 10) >= 0x40uLL)
    v5 = 0;
  v4 = __OFADD__(v3, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for ReusableInputs >> 10);
  if (!v4)
    v3 = v5;
LABEL_11:
  v1 = ((unint64_t)&type metadata for ReusableInputs >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    v6 = 1 << (&type metadata for ReusableInputs >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  v6 = 1uLL >> -(char)(&type metadata for ReusableInputs >> 16);
  if (v1 <= -64)
    v6 = 0;
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  return specialized find<A>(_:key:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for MatchedGeometryScope, specialized find1<A>(_:key:filter:));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

uint64_t specialized find<A>(_:key:)(uint64_t result)
{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.SavedTransactionKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.SavedTransactionKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.SavedTransactionKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.SavedTransactionKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 4);
  v4 = (unsigned __int16)&type metadata for _ViewInputs.ScrapeableParentID >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _ViewInputs.ScrapeableParentID >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _ViewInputs.ScrapeableParentID >> 16);
  else
    v8 = 1 << (&type metadata for _ViewInputs.ScrapeableParentID >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for ImplicitRootType >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for ImplicitRootType >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for ImplicitRootType >> 4);
  v4 = (unsigned __int16)&type metadata for ImplicitRootType >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for ImplicitRootType >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ImplicitRootType >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for ImplicitRootType >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for ImplicitRootType >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for ImplicitRootType >> 16);
  else
    v8 = 1 << (&type metadata for ImplicitRootType >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ContentScrollPositionKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ContentScrollPositionKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollPositionKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollPositionKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollPositionKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ScrollPositionKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollStateRequestKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ScrollStateRequestKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.HasWidgetMetadataKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.HasWidgetMetadataKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollPhaseStateKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ScrollPhaseStateKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.SpacerRepresentationKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.SpacerRepresentationKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.TextRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextRepresentationKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextRepresentationKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.TextRepresentationKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.NamedImageRepresentationKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.NamedImageRepresentationKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = __OFADD__(v1, 64);
  v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 4);
  if (!v2)
    v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 4);
  v4 = (unsigned __int16)&type metadata for _GraphInputs.ImageRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ImageRepresentationKey >> 10) >= 0x40uLL)
    v6 = 0;
  v2 = __OFADD__(v4, 64);
  v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 10);
  if (!v2)
    v5 = v6;
LABEL_11:
  v7 = ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64))
    v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ImageRepresentationKey >> 16);
  else
    v8 = 1 << (&type metadata for _GraphInputs.ImageRepresentationKey >> 16);
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

uint64_t specialized find<A>(_:key:)(uint64_t a1, unint64_t a2)
{
  return specialized find1<A>(_:key:filter:)(a1, a2, (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2)));
}

uint64_t specialized find<A>(_:key:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v4;

  v4 = a2(0);
  return a3(a1, (1 << (v4 >> 4)) | (1 << (v4 >> 10)) | (1 << SBYTE2(v4)));
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, int a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>, (uint64_t)&type metadata for _ViewInputs.ScrapeableParentID, (uint64_t)&protocol witness table for _ViewInputs.ScrapeableParentID);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ContentScrollPositionAnchorKey>, (uint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey, (uint64_t)&protocol witness table for _GraphInputs.ContentScrollPositionAnchorKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPositionAnchorKey>, (uint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollPositionAnchorKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollStateRequestKey>, (uint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollStateRequestKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPhaseStateKey>, (uint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollPhaseStateKey);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot.Type, &lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<ImplicitRootType>, (uint64_t)&type metadata for ImplicitRootType, (uint64_t)&protocol witness table for ImplicitRootType, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ImplicitRootType, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = specialized find<A>(_:key:)(*a1);
  if (!v6
    || (result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a3 + 8))(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 80), a2, a3), (result & 1) == 0))
  {
    v8 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<StyleContextInput>, (uint64_t)&type metadata for StyleContextInput, (uint64_t)&protocol witness table for StyleContextInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 72) = a2;
    *(_QWORD *)(v9 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for StyleContextInput, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1) || (result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<ReusableInputs>, (uint64_t)&type metadata for ReusableInputs, (uint64_t)&protocol witness table for ReusableInputs, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ReusableInputs, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result || (*(_QWORD *)(result + 72) == a2 ? (v10 = *(_QWORD *)(result + 80) == a3) : (v10 = 0), !v10))
  {
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>(0);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 72) = a2;
    *(_QWORD *)(v12 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformImageRepresentable.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ImageRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.ImageRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.ImageRepresentationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ImageRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformNamedImageRepresentable.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.NamedImageRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.NamedImageRepresentationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.NamedImageRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for DefaultAccentColorProvider.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>(0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 72) = a2;
    *(_QWORD *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for SystemAccentValueProvider.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>(0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 72) = a2;
    *(_QWORD *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, (unint64_t *)&lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider.Type, &lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.PrivacyReductionAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.PrivacyReductionAccessibilityProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for CoreUINamedColorProvider.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>(0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 72) = a2;
    *(_QWORD *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey);
  if (!specialized find1<A>(_:key:filter:)(v6, v10)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for LayoutAccessibilityProvider.Type, &lazy cache variable for type metadata for LayoutAccessibilityProvider), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.LayoutAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.LayoutAccessibilityProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 72) = a2;
    *(_QWORD *)(v9 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformSpacerRepresentable.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.SpacerRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.SpacerRepresentationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.SpacerRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey);
  if (!specialized find1<A>(_:key:filter:)(v6, v10)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for OpacityAccessibilityProvider.Type, &lazy cache variable for type metadata for OpacityAccessibilityProvider), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.OpacityAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.OpacityAccessibilityProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 72) = a2;
    *(_QWORD *)(v9 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for TextAlwaysOnProvider.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextAlwaysOnProviderKey>, (uint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey, (uint64_t)&protocol witness table for _GraphInputs.TextAlwaysOnProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextAlwaysOnProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformTextRepresentable.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.TextRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.TextRepresentationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformTextSelectionRepresentation.Type?(),
        result = AGCompareValues(),
        !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextSelectionRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.TextSelectionRepresentationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextSelectionRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v15);
  if (!result)
    goto LABEL_8;
  v11 = *(_QWORD *)(result + 72);
  v10 = *(_QWORD *)(result + 80);
  if (a3 == 1)
  {
    if (v10 == 1)
      return result;
    goto LABEL_7;
  }
  if (v10 == 1)
  {
    swift_retain();
LABEL_7:
    outlined copy of Text.LineStyle?(v11, v10);
    outlined consume of Text.LineStyle?(a2, a3);
    outlined consume of Text.LineStyle?(v11, v10);
    goto LABEL_8;
  }
  if (v11 != a2)
    goto LABEL_8;
  if (!a3)
  {
    if (!v10)
      return outlined copy of Text.LineStyle?(a2, 0);
    goto LABEL_8;
  }
  if (!v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    swift_release();
    goto LABEL_8;
  }
  if (a3 == v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    return swift_release();
  }
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, v10);
  swift_retain();
  LOBYTE(v14) = v14(v10);
  swift_release_n();
  outlined consume of Text.LineStyle?(a2, a3);
  result = outlined consume of Text.LineStyle?(a2, v10);
  if ((v14 & 1) == 0)
  {
LABEL_8:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>(0);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 72) = a2;
    *(_QWORD *)(v13 + 80) = a3;
    outlined copy of Text.LineStyle?(a2, a3);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v15);
  if (!result)
    goto LABEL_8;
  v11 = *(_QWORD *)(result + 72);
  v10 = *(_QWORD *)(result + 80);
  if (a3 == 1)
  {
    if (v10 == 1)
      return result;
    goto LABEL_7;
  }
  if (v10 == 1)
  {
    swift_retain();
LABEL_7:
    outlined copy of Text.LineStyle?(v11, v10);
    outlined consume of Text.LineStyle?(a2, a3);
    outlined consume of Text.LineStyle?(v11, v10);
    goto LABEL_8;
  }
  if (v11 != a2)
    goto LABEL_8;
  if (!a3)
  {
    if (!v10)
      return outlined copy of Text.LineStyle?(a2, 0);
    goto LABEL_8;
  }
  if (!v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    swift_release();
    goto LABEL_8;
  }
  if (a3 == v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    return swift_release();
  }
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, v10);
  swift_retain();
  LOBYTE(v14) = v14(v10);
  swift_release_n();
  outlined consume of Text.LineStyle?(a2, a3);
  result = outlined consume of Text.LineStyle?(a2, v10);
  if ((v14 & 1) == 0)
  {
LABEL_8:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>(0);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 72) = a2;
    *(_QWORD *)(v13 + 80) = a3;
    outlined copy of Text.LineStyle?(a2, a3);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;

  result = specialized find<A>(_:key:)(*a1);
  if (!result || *(_QWORD *)(result + 72) != a2)
  {
    v7 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>(0);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v10 = v9;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v7);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for BridgedEnvironmentResolver.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>(0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 72) = a2;
    *(_QWORD *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for GestureAccessibilityProvider.Type, &lazy cache variable for type metadata for GestureAccessibilityProvider), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.GestureAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.GestureAccessibilityProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.GestureAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for ResolvedTextProvider.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>(0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 72) = a2;
    *(_QWORD *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for ImageAccessibilityProvider.Type, &lazy cache variable for type metadata for ImageAccessibilityProvider), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ImageAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.ImageAccessibilityProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ImageAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for TextAccessibilityProvider.Type, &lazy cache variable for type metadata for TextAccessibilityProvider), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.TextAccessibilityProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_QWORD *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v12);
  if (!result || *(_QWORD *)(result + 72) != a2)
  {
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>(0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 72) = a2;
    *(_QWORD *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for VibrantColorStyle.Type?(), result = AGCompareValues(), !(_DWORD)result))
  {
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>(0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 72) = a2;
    *(_QWORD *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;

  result = a4(*a1);
  if (!result || *(_DWORD *)(result + 72) != a2)
  {
    v13 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a5, a6, a7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a6, 0, v13);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ContentScrollPositionKey>, (uint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey, (uint64_t)&protocol witness table for _GraphInputs.ContentScrollPositionKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPositionKey>, (uint64_t)&type metadata for _GraphInputs.ScrollPositionKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollPositionKey);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v10;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v10 = a2;
  v12 = HIDWORD(a2);
  if (!a4(*a1)
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ScrollPositionStorage?, (uint64_t)&type metadata for ScrollPositionStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v14 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a5, a6, a7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    v15 = swift_allocObject();
    *(_BYTE *)(v15 + 76) = v12;
    *(_DWORD *)(v15 + 72) = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a6, 0, v14);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v7;

  result = specialized find1<A>(_:key:filter:)(*a1, a2, (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2)));
  if (!result || *(_BYTE *)(result + 72) != (a3 & 1))
  {
    v7 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a2, 0, v7);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, char a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<PreferTextLayoutManagerInput>, (uint64_t)&type metadata for PreferTextLayoutManagerInput, (uint64_t)&protocol witness table for PreferTextLayoutManagerInput);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.HasWidgetMetadataKey>, (uint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey, (uint64_t)&protocol witness table for _GraphInputs.HasWidgetMetadataKey);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]), result = static WeakAttribute.== infix(_:_:)(), (result & 1) == 0))
  {
    v5.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<ReferenceDateInput>, (uint64_t)&type metadata for ReferenceDateInput, (uint64_t)&protocol witness table for ReferenceDateInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ReferenceDateInput, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = specialized find<A>(_:key:)(*a1);
  if (!v4 || (result = specialized static Array<A>.== infix(_:_:)(a2, *(_QWORD *)(v4 + 72)), (result & 1) == 0))
  {
    v6 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<_GraphInputs.SavedTransactionKey>, (uint64_t)&type metadata for _GraphInputs.SavedTransactionKey, (uint64_t)&protocol witness table for _GraphInputs.SavedTransactionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.SavedTransactionKey, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1) || (result = static WeakAttribute.== infix(_:_:)(), (result & 1) == 0))
  {
    v5.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t)&protocol witness table for _DisplayList_StableIdentityScope, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _DisplayList_StableIdentityScope, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v5.value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for Stack<ImageStyleProtocol.Type>(0), result = AGCompareValues(), !(_DWORD)result))
  {
    v5.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<Image.Style>, (uint64_t)&type metadata for Image.Style, (uint64_t)&protocol witness table for Image.Style, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for Image.Style, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;

  v4 = specialized find<A>(_:key:)(*a1, (uint64_t (*)(_QWORD))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>, specialized find1<A>(_:key:filter:));
  if (!v4
    || (v5 = *(_QWORD *)(v4 + 72),
        swift_retain(),
        v6 = specialized static Stack<A>.== infix(_:_:)(a2, v5),
        result = swift_release(),
        !v6))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<MatchedGeometryScope>(0, &lazy cache variable for type metadata for TypedElement<BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>>, (uint64_t (*)(uint64_t))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>, (uint64_t)&protocol witness table for BodyInput<A>);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>(0);
    v10 = v9;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for TextRendererBoxBase(),
        result = static WeakAttribute.== infix(_:_:)(),
        (result & 1) == 0))
  {
    v5.value = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<TextRendererInput>, (uint64_t)&type metadata for TextRendererInput, (uint64_t)&protocol witness table for TextRendererInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for TextRendererInput, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];
  uint64_t v15;
  _BYTE v16[56];

  v4 = specialized find<A>(_:key:)(*a1);
  if (!v4)
    goto LABEL_3;
  v12 = *(_OWORD *)(v4 + 88);
  v13 = *(_OWORD *)(v4 + 72);
  v11 = *(_OWORD *)(v4 + 104);
  v5 = *(_QWORD *)(v4 + 120);
  outlined init with take of ResolvedTextSuffix(a2, (uint64_t)v16);
  v14[0] = v13;
  v14[1] = v12;
  v14[2] = v11;
  v15 = v5;
  result = specialized static ResolvedTextSuffix.== infix(_:_:)((uint64_t)v16, (unint64_t *)v14);
  if ((result & 1) == 0)
  {
LABEL_3:
    v7 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>(0);
    v8 = swift_allocObject();
    outlined init with take of ResolvedTextSuffix(a2, v8 + 72);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v10 = v9;
    outlined retain of ResolvedTextSuffix(a2);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v7);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v5.value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t (*v12)(void);
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  Swift::UInt value;
  _QWORD v17[2];

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v17 - v5;
  v7 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v9 = v8;
  BloomFilter.init(hashValue:)(v8);
  v10 = specialized find1<A>(_:key:filter:)(v7, v17[1]);
  if (!v10
    || (result = specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(a2, v10 + *(_QWORD *)(*(_QWORD *)v10 + 248)), (result & 1) == 0))
  {
    v12 = MEMORY[0x24BDCE900];
    v13 = MEMORY[0x24BEE1C68];
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    v14 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>(0);
    v15 = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v6, v15 + *(_QWORD *)(*(_QWORD *)v15 + 248), (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)v12, (uint64_t)v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v9, 0, v14).value;
    outlined destroy of Date?((uint64_t)v6);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_QWORD *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t (*v12)(void);
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  Swift::UInt value;
  _QWORD v17[2];

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v17 - v5;
  v7 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v9 = v8;
  BloomFilter.init(hashValue:)(v8);
  v10 = specialized find1<A>(_:key:filter:)(v7, v17[1]);
  if (!v10
    || (result = specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(a2, v10 + *(_QWORD *)(*(_QWORD *)v10 + 248)), (result & 1) == 0))
  {
    v12 = MEMORY[0x24BDCE900];
    v13 = MEMORY[0x24BEE1C68];
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    v14 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>(0);
    v15 = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v6, v15 + *(_QWORD *)(*(_QWORD *)v15 + 248), (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)v12, (uint64_t)v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for [(_:)]);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v9, 0, v14).value;
    outlined destroy of Date?((uint64_t)v6);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt value;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for EnvironmentValues.Key.Value();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v9 = v8;
  BloomFilter.init(hashValue:)(v8);
  v10 = specialized find1<A>(_:key:filter:)(v7, v16[0]);
  if (!v10
    || (outlined init with copy of TypesettingLanguage(v10 + *(_QWORD *)(*(_QWORD *)v10 + 248), (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value), v11 = AGCompareValues(), result = outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value), !v11))
  {
    outlined init with copy of TypesettingLanguage(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
    v13 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>(0);
    v14 = swift_allocObject();
    outlined init with copy of TypesettingLanguage((uint64_t)v6, v14 + *(_QWORD *)(*(_QWORD *)v14 + 248), (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v9, 0, v13).value;
    outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  _QWORD v18[2];

  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  v11 = specialized find1<A>(_:key:filter:)(v8, v18[1]);
  if (!v11)
  {
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    goto LABEL_5;
  }
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v7, v11 + *(_QWORD *)(*(_QWORD *)v11 + 248), v4);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE0]);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    v12(v7, a2, v4);
    v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LocaleKey>>(0);
    v16 = swift_allocObject();
    v12((char *)(v16 + *(_QWORD *)(*(_QWORD *)v16 + 248)), (uint64_t)v7, v4);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v10, 0, v15).value;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  _QWORD v18[2];

  v4 = type metadata accessor for Calendar();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  v11 = specialized find1<A>(_:key:filter:)(v8, v18[1]);
  if (!v11)
  {
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    goto LABEL_5;
  }
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v7, v11 + *(_QWORD *)(*(_QWORD *)v11 + 248), v4);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF308]);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    v12(v7, a2, v4);
    v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<CalendarKey>>(0);
    v16 = swift_allocObject();
    v12((char *)(v16 + *(_QWORD *)(*(_QWORD *)v16 + 248)), (uint64_t)v7, v4);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v10, 0, v15).value;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  _QWORD v18[2];

  v4 = type metadata accessor for TimeZone();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  v11 = specialized find1<A>(_:key:filter:)(v8, v18[1]);
  if (!v11)
  {
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    goto LABEL_5;
  }
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v7, v11 + *(_QWORD *)(*(_QWORD *)v11 + 248), v4);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF538]);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    v12(v7, a2, v4);
    v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>(0);
    v16 = swift_allocObject();
    v12((char *)(v16 + *(_QWORD *)(*(_QWORD *)v16 + 248)), (uint64_t)v7, v4);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v10, 0, v15).value;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;

  result = specialized find<A>(_:key:)(*a1);
  if (!result)
    goto LABEL_7;
  v5 = *(_QWORD *)(result + 72);
  if (!a2)
  {
    if (!v5)
      return result;
    goto LABEL_7;
  }
  if (!v5
    || (v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104),
        v7 = swift_retain(),
        v8 = v6(v7),
        result = swift_release(),
        (v8 & 1) == 0))
  {
LABEL_7:
    v9 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v11 = v10;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v9);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  uint64_t v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  v7 = specialized find1<A>(_:key:filter:)(v4, v13[0]);
  if (!v7
    || (outlined init with copy of AccessibilityTextAttributeResolver?(v7 + 72, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?), type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver), v8 = AGCompareValues(), result = outlined destroy of AnyTrackedValue?((uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver), !v8))
  {
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>(0);
    v11 = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v13, v11 + 72, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10).value;
    outlined destroy of AnyTrackedValue?((uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TintKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AnimationListener?, (uint64_t (*)(uint64_t))type metadata accessor for AnimationListener, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v5.value = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AnimationListener?, (uint64_t (*)(uint64_t))type metadata accessor for AnimationListener, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v5.value = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result)
    goto LABEL_8;
  v8 = *(_QWORD *)(result + 72);
  if (!a2)
  {
    if (!v8)
      return result;
    goto LABEL_8;
  }
  if (!v8
    || a2 != v8
    && (v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88),
        v10 = swift_retain(),
        v11 = v9(v10),
        result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_8:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccentColorKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_QWORD *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;

  if (!specialized find<A>(_:key:)(*a1, (uint64_t (*)(_QWORD))type metadata accessor for MatchedGeometryScope, specialized find1<A>(_:key:filter:))|| (type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MatchedGeometryScope?, (uint64_t (*)(uint64_t))type metadata accessor for MatchedGeometryScope, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v5.value = *a1;
    type metadata accessor for TypedElement<MatchedGeometryScope>(0, &lazy cache variable for type metadata for TypedElement<MatchedGeometryScope>, (uint64_t (*)(uint64_t))type metadata accessor for MatchedGeometryScope, (uint64_t)&protocol witness table for MatchedGeometryScope);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    v6 = type metadata accessor for MatchedGeometryScope();
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[6];

  v10[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v10[0])
    || (outlined init with take of OpenURLAction?(a2, (uint64_t)v10),
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>(0);
    v9 = swift_allocObject();
    outlined init with take of OpenURLAction?(a2, v9 + 72);
    outlined retain of OpenURLAction?(a2);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[6];

  v10[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v10[0])
    || (outlined init with take of OpenURLAction?(a2, (uint64_t)v10),
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>(0);
    v9 = swift_allocObject();
    outlined init with take of OpenURLAction?(a2, v9 + 72);
    outlined retain of OpenURLAction?(a2);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9) || (result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  v7 = specialized find1<A>(_:key:filter:)(v4, v12);
  if (!v7
    || (v8 = *(_QWORD *)(v7 + 72),
        swift_bridgeObjectRetain(),
        v9 = specialized static Array<A>.== infix(_:_:)(a2, v8),
        result = swift_bridgeObjectRelease(),
        (v9 & 1) == 0))
  {
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v11);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  char *v17;
  double v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt value;
  uint64_t v25[2];

  v4 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v25 - v8;
  v10 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  v13 = specialized find1<A>(_:key:filter:)(v10, v25[1]);
  if (!v13)
    goto LABEL_11;
  outlined init with copy of TypesettingLanguage(v13 + *(_QWORD *)(*(_QWORD *)v13 + 248), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a2, (uint64_t)v9))
    goto LABEL_10;
  v14 = *(int *)(v4 + 20);
  v15 = *(double *)(a2 + v14);
  v16 = *(unsigned __int8 *)(a2 + v14 + 8);
  v17 = &v9[v14];
  v18 = *(double *)v17;
  v19 = v17[8];
  if (v16 != 1)
  {
    if (v15 != v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) == 0)
      return outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
    goto LABEL_10;
  }
  if (v15 == 0.0)
  {
    v20 = *(_QWORD *)&v18 == 0;
  }
  else
  {
    if (*(_QWORD *)&v15 != 1)
    {
      if (*(_QWORD *)&v18 <= 1uLL)
        v19 = 0;
      if (v19 == 1)
        return outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
      goto LABEL_10;
    }
    v20 = *(_QWORD *)&v18 == 1;
  }
  if (!v20)
    LOBYTE(v19) = 0;
  if ((v19 & 1) == 0)
  {
LABEL_10:
    outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
LABEL_11:
    outlined init with copy of TypesettingLanguage(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
    v21 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>(0);
    v22 = swift_allocObject();
    outlined init with copy of TypesettingLanguage((uint64_t)v6, v22 + *(_QWORD *)(*(_QWORD *)v22 + 248), (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v12, 0, v21).value;
    outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
    *a1 = value;
    return swift_release();
  }
  return outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  v7 = specialized find1<A>(_:key:filter:)(v4, v12);
  if (!v7
    || (v8 = *(_QWORD *)(v7 + 72),
        swift_bridgeObjectRetain(),
        v9 = specialized static Array<A>.== infix(_:_:)(a2, v8),
        result = swift_bridgeObjectRelease(),
        (v9 & 1) == 0))
  {
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v11);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;

  result = specialized find<A>(_:key:)(*a1);
  if (!result)
    goto LABEL_8;
  v5 = *(_BYTE *)(result + 76);
  if ((a2 & 0x100000000) != 0)
  {
    if (*(_BYTE *)(result + 76))
      return result;
LABEL_8:
    v6 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationReasonKey>>(0);
    v7 = swift_allocObject();
    *(_DWORD *)(v7 + 72) = a2;
    *(_BYTE *)(v7 + 76) = BYTE4(a2) & 1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v9 = v8;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v9, 0, v6);
    return swift_release();
  }
  if (*(_DWORD *)(result + 72) != (_DWORD)a2)
    v5 = 1;
  if ((v5 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result)
    goto LABEL_7;
  v8 = *(_QWORD *)(result + 72);
  if (!a2)
  {
    if (!v8)
      return result;
    goto LABEL_7;
  }
  if (!v8
    || (v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96),
        v10 = swift_retain(),
        v11 = v9(v10),
        result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FontKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_QWORD *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_QWORD *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  v7 = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!v7 || (result = specialized static Array<A>.== infix(_:_:)(a2, *(_QWORD *)(v7 + 72)), (result & 1) == 0))
  {
    v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result)
    goto LABEL_7;
  v8 = *(_QWORD *)(result + 72);
  if (!a2)
  {
    if (!v8)
      return result;
    goto LABEL_7;
  }
  if (!v8
    || (v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96),
        v10 = swift_retain(),
        v11 = v9(v10),
        result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result)
    goto LABEL_7;
  v8 = *(_QWORD *)(result + 72);
  if (!a2)
  {
    if (!v8)
      return result;
    goto LABEL_7;
  }
  if (!v8
    || (v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96),
        v10 = swift_retain(),
        v11 = v9(v10),
        result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result)
    goto LABEL_7;
  v8 = *(_QWORD *)(result + 72);
  if (!a2)
  {
    if (!v8)
      return result;
    goto LABEL_7;
  }
  if (!v8
    || (v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96),
        v10 = swift_retain(),
        v11 = v9(v10),
        result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  uint64_t v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  v7 = specialized find1<A>(_:key:filter:)(v4, v13[0]);
  if (!v7
    || (outlined init with copy of AnyTrackedValue(v7 + 72, (uint64_t)v13),
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for FallbackFontProvider), v8 = AGCompareValues(), result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13), !v8))
  {
    outlined init with copy of AnyTrackedValue(a2, (uint64_t)v13);
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>(0);
    v11 = swift_allocObject();
    outlined init with copy of AnyTrackedValue((uint64_t)v13, v11 + 72);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10).value;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for [TintPlacement : AnyShapeStyle](), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  uint64_t v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  v7 = specialized find1<A>(_:key:filter:)(v4, v13[0]);
  if (!v7
    || (outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(v7 + 72, (uint64_t)v13),
        v8 = AGCompareValues(),
        result = outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v13),
        !v8))
  {
    outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(a2, (uint64_t)v13);
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>(0);
    v11 = swift_allocObject();
    outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v13, v11 + 72);
    swift_retain();
    value = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10).value;
    outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v13);
    *a1 = value;
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;

  result = a4(*a1);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v13 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a5, a6, a7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a6, 0, v13);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;

  result = specialized find<A>(_:key:)(*a1);
  if (!result)
    goto LABEL_8;
  v7 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>(0);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 72) = a2;
    *(_BYTE *)(v9 + 80) = a3 & 1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v11 = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v8);
    return swift_release();
  }
  if (*(_QWORD *)(result + 72) != a2)
    v7 = 1;
  if ((v7 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;

  result = specialized find<A>(_:key:)(*a1);
  if (!result)
    goto LABEL_8;
  v7 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>(0);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 72) = a2;
    *(_BYTE *)(v9 + 80) = a3 & 1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v11 = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v8);
    return swift_release();
  }
  if (*(_QWORD *)(result + 72) != a2)
    v7 = 1;
  if ((v7 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result)
    goto LABEL_8;
  v10 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>(0);
    v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(_BYTE *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2)
    v10 = 1;
  if ((v10 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;

  result = specialized find<A>(_:key:)(*a1);
  if (!result)
    goto LABEL_8;
  v7 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>(0);
    v9 = swift_allocObject();
    *(double *)(v9 + 72) = *(double *)&a2;
    *(_BYTE *)(v9 + 80) = a3 & 1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v11 = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v8);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2)
    v7 = 1;
  if ((v7 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result)
    goto LABEL_8;
  v10 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>(0);
    v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(_BYTE *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2)
    v10 = 1;
  if ((v10 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result)
    goto LABEL_8;
  v10 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>(0);
    v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(_BYTE *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2)
    v10 = 1;
  if ((v10 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result)
    goto LABEL_8;
  v10 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>(0);
    v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(_BYTE *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2)
    v10 = 1;
  if ((v10 & 1) != 0)
    goto LABEL_8;
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result)
    goto LABEL_8;
  v10 = *(_BYTE *)(result + 80);
  if ((a3 & 1) != 0)
  {
    if (*(_BYTE *)(result + 80))
      return result;
LABEL_8:
    v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>(0);
    v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(_BYTE *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2)
    v10 = 1;
  if ((v10 & 1) != 0)
    goto LABEL_8;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, _OWORD *a2)
{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  uint64_t v6;
  __int128 v7;
  Swift::Int v8;
  Swift::Int v9;

  if (!specialized find<A>(_:key:)(*a1) || (result = AGCompareValues(), !(_DWORD)result))
  {
    v5.value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>(0);
    v6 = swift_allocObject();
    v7 = a2[1];
    *(_OWORD *)(v6 + 72) = *a2;
    *(_OWORD *)(v6 + 88) = v7;
    *(_OWORD *)(v6 + 104) = a2[2];
    *(_OWORD *)(v6 + 113) = *(_OWORD *)((char *)a2 + 41);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v9 = v8;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v9, 0, v5.value);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2, int a3)
{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Material?, (uint64_t)&type metadata for Material, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v7.value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>(0);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 72) = a2;
    *(_DWORD *)(v8 + 80) = a3;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v10 = v9;
    outlined copy of Material?(a2);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v7.value);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unsigned __int8 a2)
{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result)
    goto LABEL_7;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_7:
    v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0)
    goto LABEL_7;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result)
    goto LABEL_7;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_7:
    v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0)
    goto LABEL_7;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_13;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 6)
  {
    if (v8 == 6)
      return result;
LABEL_13:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 6)
    goto LABEL_13;
  if (v3 == 5)
  {
    if (v8 != 5)
      goto LABEL_13;
  }
  else if (v8 == 5 || v8 != v3)
  {
    goto LABEL_13;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 5)
  {
    if (v8 == 5)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 5 || v8 != v3)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextCaseKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0)
    goto LABEL_9;
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result)
    goto LABEL_7;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_7:
    v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextScaleKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0)
    goto LABEL_7;
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3)
    goto LABEL_9;
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result)
    goto LABEL_7;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_7:
    v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0)
    goto LABEL_7;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0)
    goto LABEL_9;
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_9:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0)
    goto LABEL_9;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, char a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;

  v3 = a2 & 1;
  result = specialized find<A>(_:key:)(*a1);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v5 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v7 = v6;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnabledKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<FromScrollViewKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.RemovePreferenceInput);
  result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v6 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.RemovePreferenceInput>, (uint64_t)&type metadata for _GraphInputs.RemovePreferenceInput, (uint64_t)&protocol witness table for _GraphInputs.RemovePreferenceInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.RemovePreferenceInput, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result)
    goto LABEL_7;
  v8 = *(char *)(result + 72);
  if (a2 == 10)
  {
    if ((_DWORD)v8 == 10)
      return result;
LABEL_7:
    v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if ((_DWORD)v8 == 10 || qword_23527E718[a2] != qword_23527E718[v8])
    goto LABEL_7;
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<TracksVelocityKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WritingModeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for SymbolRenderingMode?, (uint64_t)&type metadata for SymbolRenderingMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<ContinuousKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;

  result = specialized find<A>(_:key:)(*a1);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v5 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v7 = v6;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for ViewListShouldParentToPlaceholderSubgraph);
  result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v6 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<ViewListShouldParentToPlaceholderSubgraph>, (uint64_t)&type metadata for ViewListShouldParentToPlaceholderSubgraph, (uint64_t)&protocol witness table for ViewListShouldParentToPlaceholderSubgraph, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListShouldParentToPlaceholderSubgraph, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(_BYTE *)(result + 72) != (a2 & 1))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 & 1;
  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(_BYTE *)(result + 72))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>(0);
    *(_BYTE *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableLayoutDirection.CodingValue, &unk_2506345E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableLayoutDirection.CodingValue, &unk_2506345E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableLayoutDirection.CodingValue, &unk_2506345E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableLayoutDirection.CodingValue, &unk_2506345E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t lazy protocol witness table accessor for type LayoutDirection and conformance LayoutDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutDirection and conformance LayoutDirection;
  if (!lazy protocol witness table cache variable for type LayoutDirection and conformance LayoutDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutDirection, &type metadata for LayoutDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutDirection and conformance LayoutDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [LayoutDirection] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [LayoutDirection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [LayoutDirection] and conformance [A])
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [LayoutDirection], (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [LayoutDirection] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableLayoutDirection and conformance CodableLayoutDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableLayoutDirection, &type metadata for CodableLayoutDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableLayoutDirection, &type metadata for CodableLayoutDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableLayoutDirection(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CodableLayoutDirection and conformance CodableLayoutDirection();
  result = lazy protocol witness table accessor for type CodableLayoutDirection and conformance CodableLayoutDirection();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTag for LayoutDirection(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for LayoutDirection(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LayoutDirection()
{
  return &type metadata for LayoutDirection;
}

ValueMetadata *type metadata accessor for CodableLayoutDirection()
{
  return &type metadata for CodableLayoutDirection;
}

uint64_t getEnumTagSinglePayload for LayoutDirection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2349F4794 + 4 * byte_23527E475[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2349F47C8 + 4 * byte_23527E470[v4]))();
}

uint64_t sub_2349F47C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2349F47D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2349F47D8);
  return result;
}

uint64_t sub_2349F47E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2349F47ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2349F47F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2349F47F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableLayoutDirection.CodingValue()
{
  return &unk_2506345E0;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollableKey);
  result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(_DWORD *)(result + 72) != a2)
  {
    v6 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollableKey>, (uint64_t)&type metadata for _GraphInputs.ScrollableKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollableKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ScrollableKey, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollTargetRoleKey);
  result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(_DWORD *)(result + 72) != a2)
  {
    v6 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollTargetRoleKey>, (uint64_t)&type metadata for _GraphInputs.ScrollTargetRoleKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollTargetRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ScrollTargetRoleKey, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9) || (result = AGCompareValues(), !(_DWORD)result))
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>(0);
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

double *specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  double *result;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;

  v10 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  result = (double *)specialized find1<A>(_:key:filter:)(v10, v19);
  if (!result
    || (result[9] == a2 ? (v14 = result[10] == a3) : (v14 = 0),
        v14 ? (v15 = result[11] == a4) : (v15 = 0),
        v15 ? (v16 = result[12] == a5) : (v16 = 0),
        !v16))
  {
    v17 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>(0);
    v18 = (double *)swift_allocObject();
    v18[9] = a2;
    v18[10] = a3;
    v18[11] = a4;
    v18[12] = a5;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v12, 0, v17);
    return (double *)swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  result = specialized find1<A>(_:key:filter:)(v8, v15);
  if (!result)
    goto LABEL_10;
  if ((a4 & 1) != 0)
  {
    if (*(_BYTE *)(result + 88))
      return result;
LABEL_10:
    v13 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>(0);
    v14 = swift_allocObject();
    *(double *)(v14 + 72) = *(double *)&a2;
    *(double *)(v14 + 80) = *(double *)&a3;
    *(_BYTE *)(v14 + 88) = a4 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v13);
    return swift_release();
  }
  if ((*(_BYTE *)(result + 88) & 1) != 0)
    goto LABEL_10;
  if (*(double *)(result + 72) != *(double *)&a2 || *(double *)(result + 80) != *(double *)&a3)
    goto LABEL_10;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  v13 = specialized find1<A>(_:key:filter:)(v10, v17);
  if (!v13
    || (result = specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(a2, a3, a4, a5 & 0xFFFFFF, *(_QWORD *)(v13 + 72), *(_QWORD *)(v13 + 80), *(_QWORD *)(v13 + 88), *(unsigned __int16 *)(v13 + 96) | (*(unsigned __int8 *)(v13 + 98) << 16)), (result & 1) == 0))
  {
    v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>(0);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 72) = a2;
    *(_QWORD *)(v16 + 80) = a3;
    *(_QWORD *)(v16 + 88) = a4;
    *(_BYTE *)(v16 + 98) = BYTE2(a5);
    *(_WORD *)(v16 + 96) = a5;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v12, 0, v15);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, double a2)
{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>(0);
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, __int16 a2)
{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result)
    goto LABEL_11;
  v8 = *(_WORD *)(result + 72);
  if (a2 == 2)
  {
    if (v8 == 2)
      return result;
LABEL_11:
    v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>(0);
    *(_WORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  if (v8 == 2)
    goto LABEL_11;
  v9 = v8 & 1;
  v10 = ((a2 & 0x100) == 0) ^ ((unsigned __int16)(v8 & 0x100) >> 8);
  if (((a2 & 1) == 0) == v9 || v10 == 0)
    goto LABEL_11;
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
    goto LABEL_10;
  v8 = *(unsigned __int8 *)(result + 73);
  if (HIBYTE(a2) == 3)
  {
    if (v8 == 3)
      return result;
LABEL_10:
    v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>(0);
    *(_WORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || HIBYTE(a2) != v8)
    goto LABEL_10;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;

  v10 = a3 >> 40;
  v11 = a3 & 0x1000000000000;
  v12 = specialized find<A>(_:key:)(*a1);
  if (!v12)
  {
    v20 = HIWORD(v11);
    goto LABEL_5;
  }
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(_WORD *)(v12 + 84);
  v15 = *(_DWORD *)(v12 + 80);
  v16 = *(_BYTE *)(v12 + 86);
  v17 = *(_BYTE *)(v12 + 87);
  v18 = *(_QWORD *)(v12 + 88);
  v19 = *(_DWORD *)(v12 + 96);
  v33 = a2;
  v35 = BYTE4(a3);
  v34 = a3;
  v36 = v10;
  v20 = HIWORD(v11);
  v37 = v20;
  v38 = HIBYTE(a3);
  v39 = a4;
  v40 = a5;
  v26 = v13;
  v27 = v15;
  v28 = v14;
  v29 = v16;
  v30 = v17;
  v31 = v18;
  v32 = v19;
  result = specialized static ContentTransition.State.== infix(_:_:)(&v33, &v26);
  if ((result & 1) == 0)
  {
LABEL_5:
    v25 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>(0);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 72) = a2;
    *(_BYTE *)(v22 + 84) = BYTE4(a3);
    *(_DWORD *)(v22 + 80) = a3;
    *(_BYTE *)(v22 + 85) = v10;
    *(_BYTE *)(v22 + 86) = v20;
    *(_BYTE *)(v22 + 87) = HIBYTE(a3);
    *(_QWORD *)(v22 + 88) = a4;
    *(_DWORD *)(v22 + 96) = a5;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v24 = v23;
    outlined copy of ContentTransition.Storage(a2, a3, v10);
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v24, 0, v25);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unsigned __int8 a2, unint64_t a3)
{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  v9 = specialized find1<A>(_:key:filter:)(v6, v15);
  if (!v9
    || *(unsigned __int8 *)(v9 + 72) != a2
    || (v10 = *(_QWORD *)(v9 + 80),
        swift_bridgeObjectRetain(),
        v11 = specialized static Array<A>.== infix(_:_:)(a3, v10),
        result = swift_bridgeObjectRelease(),
        (v11 & 1) == 0))
  {
    v13 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSizingKey>>(0);
    v14 = swift_allocObject();
    *(_BYTE *)(v14 + 72) = a2;
    *(_QWORD *)(v14 + 80) = a3;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v13);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *a1;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  v13 = specialized find1<A>(_:key:filter:)(v10, v21);
  if (!v13)
    goto LABEL_11;
  v14 = *(double *)(v13 + 80);
  v15 = *(double *)(v13 + 88);
  v16 = *(unsigned __int8 *)(v13 + 96);
  result = specialized static Dictionary<>.== infix(_:_:)(a2, *(_QWORD *)(v13 + 72));
  if ((result & 1) == 0)
    goto LABEL_11;
  if ((a5 & 1) != 0)
  {
    if (v16)
      return result;
LABEL_11:
    v19 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>(0);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 72) = a2;
    *(double *)(v20 + 80) = *(double *)&a3;
    *(double *)(v20 + 88) = *(double *)&a4;
    *(_BYTE *)(v20 + 96) = a5 & 1;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v12, 0, v19);
    return swift_release();
  }
  if ((v16 & 1) != 0)
    goto LABEL_11;
  if (v14 != *(double *)&a3 || v15 != *(double *)&a4)
    goto LABEL_11;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(Swift::UInt *a1, Swift::Int a2, char a3, uint64_t a4)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<Semantics.DismissPopsInNavigationSplitViewRoots>, (uint64_t)&type metadata for Semantics.DismissPopsInNavigationSplitViewRoots, (uint64_t)&protocol witness table for Semantics.DismissPopsInNavigationSplitViewRoots);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<EndedGestureWaitsForActiveFeature>, (uint64_t)&type metadata for EndedGestureWaitsForActiveFeature, (uint64_t)&protocol witness table for EndedGestureWaitsForActiveFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<ImprovedButtonGestureFeature>, (uint64_t)&type metadata for ImprovedButtonGestureFeature, (uint64_t)&protocol witness table for ImprovedButtonGestureFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<GestureRecognizerBasedEvents>, (uint64_t)&type metadata for GestureRecognizerBasedEvents, (uint64_t)&protocol witness table for GestureRecognizerBasedEvents);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<WithinAccessibilityRotor>, (uint64_t)&type metadata for WithinAccessibilityRotor, (uint64_t)&protocol witness table for WithinAccessibilityRotor);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<UnifiedHitTestingFeature>, (uint64_t)&type metadata for UnifiedHitTestingFeature, (uint64_t)&protocol witness table for UnifiedHitTestingFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<GestureContainerFeature>, (uint64_t)&type metadata for GestureContainerFeature, (uint64_t)&protocol witness table for GestureContainerFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<TextSelectionForbidden>, (uint64_t)&type metadata for TextSelectionForbidden, (uint64_t)&protocol witness table for TextSelectionForbidden);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v5_2>, (uint64_t)&type metadata for _SemanticFeature_v5_2, (uint64_t)&protocol witness table for _SemanticFeature_v5_2);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v4_4>, (uint64_t)&type metadata for _SemanticFeature_v4_4, (uint64_t)&protocol witness table for _SemanticFeature_v4_4);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v2_3>, (uint64_t)&type metadata for _SemanticFeature_v2_3, (uint64_t)&protocol witness table for _SemanticFeature_v2_3);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v2_1>, (uint64_t)&type metadata for _SemanticFeature_v2_1, (uint64_t)&protocol witness table for _SemanticFeature_v2_1);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v6>, (uint64_t)&type metadata for _SemanticFeature_v6, (uint64_t)&protocol witness table for _SemanticFeature_v6);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v5>, (uint64_t)&type metadata for _SemanticFeature_v5, (uint64_t)&protocol witness table for _SemanticFeature_v5);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v4>, (uint64_t)&type metadata for _SemanticFeature_v4, (uint64_t)&protocol witness table for _SemanticFeature_v4);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v3>, (uint64_t)&type metadata for _SemanticFeature_v3, (uint64_t)&protocol witness table for _SemanticFeature_v3);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v2>, (uint64_t)&type metadata for _SemanticFeature_v2, (uint64_t)&protocol witness table for _SemanticFeature_v2);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<DisabledFeature>, (uint64_t)&type metadata for DisabledFeature, (uint64_t)&protocol witness table for DisabledFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<EnabledFeature>, (uint64_t)&type metadata for EnabledFeature, (uint64_t)&protocol witness table for EnabledFeature);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(Swift::UInt *a1, Swift::Int hashValue, char a3, uint64_t a4, uint64_t (*a5)(Swift::UInt, Swift::Int), unint64_t *a6, uint64_t a7, uint64_t a8)
{
  SwiftUI::BloomFilter v15;
  uint64_t result;
  uint64_t v17;

  v15.value = *a1;
  BloomFilter.init(hashValue:)(hashValue);
  result = a5(v15.value, hashValue);
  if (!result || *(_BYTE *)(result + 72) != (a3 & 1))
  {
    v17 = *a1;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a6, a7, a8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(hashValue, 0, v17);
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of AccessibilityTextAttributeResolver?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (Date?, Date?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Date?, Date?))
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Date?, Date?));
  }
}

uint64_t outlined destroy of TypesettingConfiguration(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with take of ResolvedTextSuffix(uint64_t a1, uint64_t a2)
{
  __swift_memcpy56_8(a2, a1);
  return a2;
}

uint64_t outlined retain of ResolvedTextSuffix(uint64_t a1)
{
  outlined copy of ResolvedTextSuffix(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

void *outlined copy of ResolvedTextSuffix(void *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    outlined copy of Text.Layout.Line.Line(result, a2, a3 & 1);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

id outlined copy of Text.Layout.Line.Line(void *a1, uint64_t a2, char a3)
{
  id v4;

  if ((a3 & 1) == 0)
  {
    v4 = a1;
    swift_retain();
    a1 = v4;
  }
  return a1;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for EnvironmentValues.PreferenceBridgeKey.Value(a2, a1);
  return a2;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value(uint64_t a1)
{
  destroy for ObservableLocation.Observer();
  return a1;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>);
  }
}

uint64_t sub_2349FF1FC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for Stack<ImageStyleProtocol.Type>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for Stack<ImageStyleProtocol.Type>)
  {
    v2 = type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for ImageStyleProtocol.Type, &lazy cache variable for type metadata for ImageStyleProtocol);
    v5 = type metadata accessor for Stack(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for Stack<ImageStyleProtocol.Type>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for VibrantColorStyle.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VibrantColorStyle.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for VibrantColorStyle.Type, &lazy cache variable for type metadata for VibrantColorStyle);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VibrantColorStyle.Type?);
  }
}

uint64_t type metadata accessor for ImageStyleProtocol.Type(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>);
  }
}

uint64_t outlined init with copy of AnyTrackedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>);
  }
}

uint64_t sub_234A01104()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t IsVisionEnabled;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    IsVisionEnabled = lazy protocol witness table accessor for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, IsVisionEnabled, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t IsVisionEnabled;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    IsVisionEnabled = lazy protocol witness table accessor for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, IsVisionEnabled, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t matched;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    matched = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, matched, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_234A01FD8()
{
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ResolvedTextProvider.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ResolvedTextProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for ResolvedTextProvider.Type, &lazy cache variable for type metadata for ResolvedTextProvider);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResolvedTextProvider.Type?);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t matched;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    matched = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, matched, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<AnimationReasonKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationReasonKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationReasonKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextScaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextScaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextScaleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for BridgedEnvironmentResolver.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for BridgedEnvironmentResolver.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for BridgedEnvironmentResolver.Type, &lazy cache variable for type metadata for BridgedEnvironmentResolver);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BridgedEnvironmentResolver.Type?);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t active;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    active = lazy protocol witness table accessor for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, active, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t active;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    active = lazy protocol witness table accessor for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, active, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>);
  }
}

uint64_t sub_234A03C80()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolVariantsKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ImageScaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextCaseKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextCaseKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextCaseKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<ContinuousKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<ContinuousKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<ContinuousKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t active;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    active = lazy protocol witness table accessor for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, active, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t active;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    active = lazy protocol witness table accessor for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, active, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>);
  }
}

unint64_t outlined copy of Material?(unint64_t result)
{
  if (result != 8)
    return outlined copy of Material.ID(result);
  return result;
}

unint64_t outlined copy of Material.ID(unint64_t result)
{
  if (result >= 8)
    return swift_retain();
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined copy of Text.LineStyle?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_retain();
  return result;
}

uint64_t outlined consume of Text.LineStyle?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_release();
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<UnderlineStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WritingModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WritingModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WritingModeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSizingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSizingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSizingKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContentTransition.State>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined copy of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<TracksVelocityKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<TracksVelocityKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<TracksVelocityKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextJustificationKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsTighteningKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>);
  }
}

void type metadata accessor for PlatformTextSelectionRepresentation.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformTextSelectionRepresentation.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformTextSelectionRepresentation.Type, &lazy cache variable for type metadata for PlatformTextSelectionRepresentation);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformTextSelectionRepresentation.Type?);
  }
}

void type metadata accessor for PlatformTextRepresentable.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformTextRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformTextRepresentable.Type, &lazy cache variable for type metadata for PlatformTextRepresentable);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformTextRepresentable.Type?);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>);
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>);
  }
}

void type metadata accessor for TextAlwaysOnProvider.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TextAlwaysOnProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for TextAlwaysOnProvider.Type, &lazy cache variable for type metadata for TextAlwaysOnProvider);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextAlwaysOnProvider.Type?);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>);
  }
}

uint64_t sub_234A07DC0()
{
  uint64_t v0;

  outlined consume of ContentTransition.Storage(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(_BYTE *)(v0 + 29));
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeContrastKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>);
  }
}

void type metadata accessor for PlatformSpacerRepresentable.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformSpacerRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformSpacerRepresentable.Type, &lazy cache variable for type metadata for PlatformSpacerRepresentable);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformSpacerRepresentable.Type?);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with take of OpenURLAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of OpenURLAction?(uint64_t a1)
{
  outlined copy of OpenURLAction?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32));
  return a1;
}

uint64_t outlined copy of OpenURLAction?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1)
    return outlined copy of OpenURLAction.Handler(result, a2, a3, a4, a5 & 1);
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 48) != 0xFF)
    outlined consume of OpenURLAction.Handler(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_WORD *)(v0 + 48) & 1);
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t HasSystemOpenURLAction;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    HasSystemOpenURLAction = lazy protocol witness table accessor for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, HasSystemOpenURLAction, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t HasSystemOpenURLAction;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    HasSystemOpenURLAction = lazy protocol witness table accessor for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, HasSystemOpenURLAction, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for CoreUINamedColorProvider.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CoreUINamedColorProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for CoreUINamedColorProvider.Type, &lazy cache variable for type metadata for CoreUINamedColorProvider);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CoreUINamedColorProvider.Type?);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for SystemAccentValueProvider.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SystemAccentValueProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for SystemAccentValueProvider.Type, &lazy cache variable for type metadata for SystemAccentValueProvider);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SystemAccentValueProvider.Type?);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for DefaultAccentColorProvider.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DefaultAccentColorProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for DefaultAccentColorProvider.Type, &lazy cache variable for type metadata for DefaultAccentColorProvider);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultAccentColorProvider.Type?);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccentColorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccentColorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccentColorKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_234A0A488()
{
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for PlatformNamedImageRepresentable.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformNamedImageRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformNamedImageRepresentable.Type, &lazy cache variable for type metadata for PlatformNamedImageRepresentable);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformNamedImageRepresentable.Type?);
  }
}

void type metadata accessor for PlatformImageRepresentable.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformImageRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformImageRepresentable.Type, &lazy cache variable for type metadata for PlatformImageRepresentable);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformImageRepresentable.Type?);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TintKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<FromScrollViewKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<FromScrollViewKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<FromScrollViewKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for AnyTrackedValue?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined destroy of AnyTrackedValue?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  type metadata accessor for AnyTrackedValue?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>);
  }
}

uint64_t sub_234A0AE08()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>);
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSuffixKey>>);
  }
}

uint64_t sub_234A0AFB4()
{
  uint64_t v0;

  outlined consume of ResolvedTextSuffix(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject();
}

void *outlined consume of ResolvedTextSuffix(void *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Layout.Line.Line(result, a2, a3 & 1);
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void outlined consume of Text.Layout.Line.Line(void *a1, uint64_t a2, char a3)
{

  if ((a3 & 1) == 0)
    swift_release();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<CalendarKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<CalendarKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<CalendarKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LocaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LocaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LocaleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<CalendarKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<CalendarKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<CalendarKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LocaleKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LocaleKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LocaleKey>>);
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t IsScrollStateValueUpdate;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    IsScrollStateValueUpdate = lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, IsScrollStateValueUpdate, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnabledKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnabledKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnabledKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnabledKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnabledKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnabledKey>>);
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TypedElement(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LayoutDirectionKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LayoutDirectionKey>>);
  }
}

ValueMetadata *type metadata accessor for LayoutDirectionKey()
{
  return &type metadata for LayoutDirectionKey;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>();
    v6 = type metadata accessor for TrackedValue(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<MatchedGeometryScope>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v9 = type metadata accessor for TypedElement(a1, v7, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ViewListArchivedAnimation.Effect>, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
    v5 = type metadata accessor for BodyInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>);
  }
}

uint64_t outlined copy of BodyInputElement()
{
  return swift_retain();
}

uint64_t outlined consume of BodyInputElement()
{
  return swift_release();
}

uint64_t AnyStyleContextType.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = type metadata accessor for StyleContextTypeBox(0, a1, a2, a3);
  *a4 = result;
  a4[1] = (uint64_t)&protocol witness table for StyleContextTypeBox<A>;
  return result;
}

uint64_t type metadata accessor for StyleContextTypeBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleContextTypeBox);
}

uint64_t static AnyStyleContextType.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

uint64_t AnyStyleContextType.acceptsTop<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 8) + 16))() & 1;
}

uint64_t AnyStyleContextType.pushing<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 8) + 32))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnyStyleContextType.acceptsAny<each A>(_:)(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t MetatypeMetadata;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD v22[2];

  v5 = a1;
  v6 = a3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = 8 * a2;
  if (a2 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    v22[1] = a4;
    MEMORY[0x24BDAC7A8](a1);
    if (a2)
    {
      v9 = (_QWORD *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      v10 = a2;
      do
      {
        v6 += 8;
        *v9++ = swift_getMetatypeMetadata();
        --v10;
      }
      while (v10);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x24BDAC7A8](MetatypeMetadata);
  v15.n128_f64[0] = MEMORY[0x24BDAC7A8](v11);
  if (a2)
  {
    v16 = (int *)(v13 + 32);
    v17 = (_QWORD *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    v18 = a2;
    do
    {
      if (a2 == 1)
        v19 = 0;
      else
        v19 = *v16;
      v20 = *v5++;
      *(_QWORD *)(v14 + v19) = *v20;
      *v17++ = v14 + v19;
      v16 += 4;
      --v18;
    }
    while (v18);
  }
  return (*(uint64_t (**)(__n128))(v12 + 24))(v15) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyStyleContextType(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

uint64_t getEnumTagSinglePayload for AnyStyleContextType(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyStyleContextType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyStyleContextType()
{
  return &type metadata for AnyStyleContextType;
}

uint64_t type metadata instantiation function for StyleContextTypeBox()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t static StyleContextTypeBox.acceptsAny<A>(_:)(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD v24[2];

  v8 = a1;
  v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
  v10 = 8 * a2;
  if (a2 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    v24[0] = v24;
    v24[1] = a6;
    MEMORY[0x24BDAC7A8](a1);
    if (a2)
    {
      v12 = (_QWORD *)((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      v13 = a2;
      do
      {
        v9 += 8;
        *v12++ = swift_getMetatypeMetadata();
        --v13;
      }
      while (v13);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x24BDAC7A8](MetatypeMetadata);
  v17.n128_f64[0] = MEMORY[0x24BDAC7A8](v14);
  if (a2)
  {
    v18 = (int *)(v15 + 32);
    v19 = (_QWORD *)((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    v20 = a2;
    do
    {
      if (a2 == 1)
        v21 = 0;
      else
        v21 = *v18;
      v22 = *v8++;
      *(_QWORD *)(v16 + v21) = *v22;
      *v19++ = v16 + v21;
      v18 += 4;
      --v20;
    }
    while (v20);
  }
  return (*(uint64_t (**)(__n128))(a5 + 16))(v17) & 1;
}

BOOL static StyleContextTypeBox.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for StyleContextTypeBox(0, a3, a4, a4);
  return swift_dynamicCastMetatype() != 0;
}

uint64_t static StyleContextTypeBox.acceptsTop<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static StyleContext.acceptsTop<A>(_:)(a1, a2, a3, a4) & 1;
}

uint64_t static StyleContextTypeBox.pushing<A>(_:)()
{
  uint64_t TupleTypeMetadata2;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v3 = type metadata accessor for TupleStyleContext(255, TupleTypeMetadata2, v1, v2);
  return type metadata accessor for StyleContextTypeBox(0, v3, (uint64_t)&protocol witness table for TupleStyleContext<A>, v4);
}

BOOL protocol witness for static AnyStyleContextTypeBox.isEqual(to:) in conformance StyleContextTypeBox<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static StyleContextTypeBox.isEqual(to:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static AnyStyleContextTypeBox.acceptsTop<A>(_:) in conformance StyleContextTypeBox<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static StyleContextTypeBox.acceptsTop<A>(_:)(a1, *(_QWORD *)(a3 + 16), a2, *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static AnyStyleContextTypeBox.acceptsAny<A>(_:) in conformance StyleContextTypeBox<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  _QWORD **v11;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  v11 = (_QWORD **)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
    memcpy((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v10);
  return static StyleContextTypeBox.acceptsAny<A>(_:)(v11, a2, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4) & 1;
}

uint64_t protocol witness for static AnyStyleContextTypeBox.pushing<A>(_:) in conformance StyleContextTypeBox<A>()
{
  return static StyleContextTypeBox.pushing<A>(_:)();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B7C9B5C](a1, v6, a5);
}

double static CGPoint.infinity.getter()
{
  return INFINITY;
}

BOOL CGPoint.isFinite.getter(double a1, double a2)
{
  return (~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0 && (~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0;
}

double CGPoint.offsetBy(dx:dy:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

double CGPoint.offsetBy(dx:)(double a1, double a2)
{
  return a1 + a2;
}

double CGPoint.offsetBy(dy:)(double a1, double a2)
{
  return a2 + 0.0;
}

CGPoint __swiftcall CGPoint.offset(by:)(CGSize by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGPoint result;

  v3 = by.width + v1;
  v4 = by.height + v2;
  result.y = v4;
  result.x = v3;
  return result;
}

double CGPoint.scaledBy(x:y:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

double CGPoint.scaledBy(x:)(double a1, double a2)
{
  return a1 * a2;
}

double CGPoint.scaledBy(y:)(double a1, double a2)
{
  return a2;
}

double CGPoint.scaled(by:)(double a1, double a2)
{
  return a1 * a2;
}

uint64_t CGPoint.isNaN.getter(double a1, double a2)
{
  _BOOL4 v2;

  v2 = (~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

double CGPoint.flushingNaNs.getter(double result)
{
  double v1;

  if ((*(_QWORD *)&result & 0xFFFFFFFFFFFFFLL) != 0)
    v1 = 0.0;
  else
    v1 = result;
  if ((~*(_QWORD *)&result & 0x7FF0000000000000) == 0)
    return v1;
  return result;
}

BOOL CGPoint.approximates(_:epsilon:)(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v5;

  v5 = vabdd_f64(a4, a1) < a3;
  return vabdd_f64(a5, a2) < a3 && v5;
}

Swift::Void __swiftcall CGPoint.clamp(size:)(CGSize size)
{
  double *v1;
  double v2;
  double height;

  if (size.width < 0.0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  v2 = *v1;
  if (*v1 < 0.0)
    v2 = 0.0;
  if (v2 <= size.width)
    size.width = v2;
  *v1 = size.width;
  if (size.height < 0.0)
    goto LABEL_13;
  height = v1[1];
  if (height < 0.0)
    height = 0.0;
  if (height > size.height)
    height = size.height;
  v1[1] = height;
}

CGPoint __swiftcall CGPoint.clamped(size:)(CGPoint size)
{
  double v1;
  double v2;
  double v3;

  if (size.x < 0.0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (size.y < 0.0)
  {
LABEL_14:
    __break(1u);
    return size;
  }
  if (v1 < 0.0)
    v1 = 0.0;
  if (v1 <= size.x)
    size.x = v1;
  if (v2 < 0.0)
    v3 = 0.0;
  else
    v3 = v2;
  if (v3 <= size.y)
    size.y = v3;
  return size;
}

Swift::Void __swiftcall CGPoint.clamp(rect:)(__C::CGRect rect)
{
  CGFloat *v1;
  double y;

  if (rect.origin.x > rect.size.width)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  if (*v1 >= rect.origin.x)
    rect.origin.x = *v1;
  if (rect.origin.x > rect.size.width)
    rect.origin.x = rect.size.width;
  *v1 = rect.origin.x;
  if (rect.origin.y > rect.size.height)
    goto LABEL_13;
  y = v1[1];
  if (y < rect.origin.y)
    y = rect.origin.y;
  if (y > rect.size.height)
    y = rect.size.height;
  v1[1] = y;
}

CGPoint __swiftcall CGPoint.clamped(rect:)(__C::CGRect rect)
{
  double v1;
  double v2;
  CGPoint result;

  if (rect.origin.x > rect.size.width)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (rect.origin.y > rect.size.height)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (rect.origin.x <= v1)
    rect.origin.x = v1;
  if (rect.origin.x > rect.size.width)
    rect.origin.x = rect.size.width;
  if (rect.origin.y <= v2)
    rect.origin.y = v2;
  if (rect.origin.y > rect.size.height)
    rect.origin.y = rect.size.height;
LABEL_14:
  result.y = rect.origin.y;
  result.x = rect.origin.x;
  return result;
}

double CGPoint.subscript.getter(char a1, double a2, double a3)
{
  double result;

  if ((a1 & 1) != 0)
    return a3;
  return result;
}

uint64_t CGPoint.subscript.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

double (*CGPoint.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = a2;
  v3 = v2 + 1;
  if ((a2 & 1) == 0)
    v3 = v2;
  *(_QWORD *)a1 = *v3;
  return CGPoint.subscript.modify;
}

double CGPoint.subscript.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (*(_BYTE *)(a1 + 16) & 1)) = *(_QWORD *)a1;
  return result;
}

double CGPoint.init(_:in:by:)(char a1, double a2, double a3)
{
  if ((a1 & 1) != 0)
    return a3;
  return a2;
}

void CGPoint.animatableData.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*CGPoint.animatableData.modify(uint64_t a1))()
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return CGPoint.animatableData.modify;
}

__n128 protocol witness for Animatable.animatableData.getter in conformance CGPoint@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance CGPoint(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

__n128 (*protocol witness for Animatable.animatableData.modify in conformance CGPoint(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

__n128 protocol witness for Animatable.animatableData.modify in conformance CGPoint(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)a1[1].n128_u64[0] = *a1;
  return result;
}

double *CGPoint.encode(to:)(double *result, double a2, double a3)
{
  double *v4;
  double v5;
  double v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;

  v4 = result;
  if (a2 != 0.0)
  {
    v5 = a2;
    v6 = fabs(a2);
    if (v6 >= 65536.0)
      v7 = 9;
    else
      v7 = 13;
    ProtobufEncoder.encodeVarint(_:)(v7);
    if (v6 >= 65536.0)
    {
      v9 = *((_QWORD *)v4 + 1);
      result = (double *)(v9 + 8);
      if (__OFADD__(v9, 8))
      {
        __break(1u);
      }
      else if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
      {
        *((_QWORD *)v4 + 1) = result;
        *(double *)(*(_QWORD *)v4 + v9) = v5;
        goto LABEL_12;
      }
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = v5;
    }
    else
    {
      v8 = *((_QWORD *)v4 + 1);
      result = (double *)(v8 + 4);
      if (__OFADD__(v8, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v5 = v5;
        if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
        {
          *((_QWORD *)v4 + 1) = result;
          *(_DWORD *)(*(_QWORD *)v4 + v8) = LODWORD(v5);
          goto LABEL_12;
        }
      }
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)result = LODWORD(v5);
    }
  }
LABEL_12:
  if (a3 != 0.0)
  {
    v10 = fabs(a3);
    if (v10 >= 65536.0)
      v11 = 17;
    else
      v11 = 21;
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      v12 = *((_QWORD *)v4 + 1);
      result = (double *)(v12 + 4);
      if (!__OFADD__(v12, 4))
      {
        *(float *)&a3 = a3;
        if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
        {
          *((_QWORD *)v4 + 1) = result;
          *(_DWORD *)(*(_QWORD *)v4 + v12) = LODWORD(a3);
          return result;
        }
        goto LABEL_30;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)result = LODWORD(a3);
      return result;
    }
    v13 = *((_QWORD *)v4 + 1);
    result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8))
      goto LABEL_29;
    if (*((_QWORD *)v4 + 2) < (uint64_t)result)
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = a3;
    }
    else
    {
      *((_QWORD *)v4 + 1) = result;
      *(double *)(*(_QWORD *)v4 + v13) = a3;
    }
  }
  return result;
}

double CGPoint.init(from:)(_QWORD *a1)
{
  return specialized CGPoint.init(from:)(a1);
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CGPoint(double *a1)
{
  double *v1;

  return CGPoint.encode(to:)(a1, *v1, v1[1]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CGPoint(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = specialized CGPoint.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

double specialized CGPoint.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1[1];
  v4 = a1[2];
  if (v3 < v4)
  {
    v5 = 0.0;
    while (1)
    {
      v6 = a1[3];
      if (v6)
      {
        v7 = a1[4];
        if (v3 < v7)
          goto LABEL_15;
        if (v7 < v3)
          goto LABEL_48;
        a1[3] = 0;
      }
      v6 = ProtobufDecoder.decodeVarint()();
      if (v1)
        return v5;
      if (v6 <= 7)
      {
LABEL_48:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return v5;
      }
LABEL_15:
      if (v6 >> 3 == 2)
      {
        v10 = v6 & 7;
        if (v10 != 5)
        {
          if (v10 == 2)
          {
            v15 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            if (v15 < 0)
              goto LABEL_51;
            v11 = a1[1];
            if (v4 < v11 + v15)
              goto LABEL_48;
            a1[3] = 17;
            a1[4] = v11 + v15;
          }
          else
          {
            if (v10 != 1)
              goto LABEL_48;
            v11 = a1[1];
          }
          v3 = v11 + 8;
          if (v4 < v11 + 8)
            goto LABEL_48;
LABEL_7:
          a1[1] = v3;
          goto LABEL_8;
        }
        v3 = a1[1] + 4;
        if (v4 < v3)
          goto LABEL_48;
        a1[1] = v3;
      }
      else
      {
        if (v6 >> 3 != 1)
        {
          switch(v6 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1)
                return v5;
              v3 = a1[1];
              goto LABEL_8;
            case 1uLL:
              v3 = a1[1] + 8;
              goto LABEL_6;
            case 2uLL:
              v16 = ProtobufDecoder.decodeVarint()();
              if (v1)
                return v5;
              if (v16 < 0)
                goto LABEL_52;
              v3 = a1[1] + v16;
LABEL_6:
              if (v4 >= v3)
                goto LABEL_7;
              goto LABEL_48;
            case 5uLL:
              v3 = a1[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_48;
          }
        }
        v8 = v6 & 7;
        if (v8 != 5)
        {
          if (v8 == 2)
          {
            v14 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v5;
            if (v14 < 0)
            {
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
              JUMPOUT(0x234A0CE30);
            }
            v9 = (double *)a1[1];
            if (v4 < (unint64_t)v9 + v14)
              goto LABEL_48;
            a1[3] = 9;
            a1[4] = (char *)v9 + v14;
          }
          else
          {
            if (v8 != 1)
              goto LABEL_48;
            v9 = (double *)a1[1];
          }
          v3 = (unint64_t)(v9 + 1);
          if (v4 < (unint64_t)(v9 + 1))
            goto LABEL_48;
          v5 = *v9;
          goto LABEL_7;
        }
        v12 = (float *)a1[1];
        v3 = (unint64_t)(v12 + 1);
        if (v4 < (unint64_t)(v12 + 1))
          goto LABEL_48;
        v13 = *v12;
        a1[1] = v3;
        v5 = v13;
      }
LABEL_8:
      v4 = a1[2];
      if (v3 >= v4)
        goto LABEL_4;
    }
  }
  v5 = 0.0;
LABEL_4:
  a1[3] = 0;
  return v5;
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>)
  {
    v1 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for AnimatablePair<CGFloat, CGFloat>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>;
  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CGFloat, MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE50D8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE50B8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CGFloat, MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE5108], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE50E0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE50D0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE50C0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE50E8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE50F0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

double sub_234A0CF40@<D0>(double *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = a1 + 1;
  if (!*a2)
    v3 = a1;
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

_QWORD *sub_234A0CF5C(_QWORD *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = 8;
  if (!*a3)
    v3 = 0;
  *(_QWORD *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_234A0CF78()
{
  return 0;
}

__n128 sub_234A0CF88@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_234A0CF94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError;
  if (!lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProtobufDecoder.DecodingError, &type metadata for ProtobufDecoder.DecodingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError;
  if (!lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProtobufDecoder.DecodingError, &type metadata for ProtobufDecoder.DecodingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError);
  }
  return result;
}

uint64_t _DisplayList_Identity.value.getter()
{
  unsigned int *v0;

  return *v0;
}

void _DisplayList_Identity.init()(_DWORD *a1@<X8>)
{
  *a1 = ++lastIdentity;
}

uint64_t _DisplayList_Identity.init(decodedValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _DisplayList_Identity.none.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t _DisplayList_Identity.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 35;
}

void _DisplayList_Identity.hash(into:)()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static _DisplayList_Identity.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _DisplayList_Identity.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _DisplayList_Identity.CodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _DisplayList_Identity.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _DisplayList_Identity.CodingKeys()
{
  return 0x65756C6176;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _DisplayList_Identity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _DisplayList_Identity.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance _DisplayList_Identity.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DisplayList_Identity.CodingKeys()
{
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _DisplayList_Identity.CodingKeys()
{
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t _DisplayList_Identity.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys, (uint64_t)&unk_250633A78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_Identity.CodingKeys, &unk_250633A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_Identity.CodingKeys, &unk_250633A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_Identity.CodingKeys, &unk_250633A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_Identity.CodingKeys, &unk_250633A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

Swift::Int _DisplayList_Identity.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _DisplayList_Identity.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  int v10;
  uint64_t v12;
  _DWORD *v13;

  v13 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<_DisplayList_Identity.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys, (uint64_t)&unk_250633A78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v12 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v13;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _DisplayList_Identity()
{
  Swift::UInt32 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance _DisplayList_Identity@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return _DisplayList_Identity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _DisplayList_Identity(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys, (uint64_t)&unk_250633A78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DisplayList_Identity()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 35;
}

uint64_t DisplayList.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DisplayList.Features.rawValue.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

void static DisplayList.Features.required.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

void static DisplayList.Features.animations.getter(_WORD *a1@<X8>)
{
  *a1 = 4;
}

void static DisplayList.Features.dynamicContent.getter(_WORD *a1@<X8>)
{
  *a1 = 8;
}

void static DisplayList.Features.interpolatorLayers.getter(_WORD *a1@<X8>)
{
  *a1 = 16;
}

void static DisplayList.Features.interpolatorRoots.getter(_WORD *a1@<X8>)
{
  *a1 = 32;
}

void static DisplayList.Features.stateEffects.getter(_WORD *a1@<X8>)
{
  *a1 = 64;
}

void static DisplayList.Features.states.getter(_WORD *a1@<X8>)
{
  *a1 = 128;
}

void static DisplayList.Features.flattened.getter(_WORD *a1@<X8>)
{
  *a1 = 512;
}

_WORD *protocol witness for OptionSet.init(rawValue:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance DisplayList.Features(_WORD *a1@<X8>)
{
  *a1 = 0;
}

_WORD *protocol witness for SetAlgebra.union(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *result | *v2;
  return result;
}

_WORD *protocol witness for SetAlgebra.intersection(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *result & *v2;
  return result;
}

_WORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *result ^ *v2;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DisplayList.Features(_WORD *a1, unsigned __int16 *a2)
{
  _WORD *v2;
  int v3;
  int v4;

  v3 = (unsigned __int16)*v2;
  v4 = *a2;
  if ((v4 & v3) != v4)
    *v2 = v4 | v3;
  *a1 = v4;
  return (v4 & v3) != v4;
}

unsigned __int16 *protocol witness for SetAlgebra.remove(_:) in conformance DisplayList.Features@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = (unsigned __int16)*v2;
  v4 = *result;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v3 & ~(_WORD)v4;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *protocol witness for SetAlgebra.update(with:) in conformance DisplayList.Features@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = (unsigned __int16)*v2;
  v4 = *result;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.formUnion(_:) in conformance DisplayList.Features(_WORD *result)
{
  _WORD *v1;

  *v1 |= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance DisplayList.Features(_WORD *result)
{
  _WORD *v1;

  *v1 &= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DisplayList.Features(_WORD *result)
{
  _WORD *v1;

  *v1 ^= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.subtracting(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DisplayList.Features(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DisplayList.Features(_WORD *a1)
{
  _WORD *v1;

  return (unsigned __int16)(*a1 & *v1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DisplayList.Features(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DisplayList.Features()
{
  _WORD *v0;

  return *v0 == 0;
}

_WORD *protocol witness for SetAlgebra.subtract(_:) in conformance DisplayList.Features(_WORD *result)
{
  _WORD *v1;

  *v1 &= ~*result;
  return result;
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DisplayList.Features(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

void DisplayList.features.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 8);
}

void DisplayList.properties.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 10);
}

void DisplayList.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
}

uint64_t DisplayList.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t result;
  char v19;
  __int16 v20;

  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  if (v4 >> 62 == 3 && (v6 & 0xFFFFFF) == 0 && v4 == 0xC000000000000000 && (v5 | v3) == 0)
  {
    result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    v19 = 0;
    v17 = 0;
    v16 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v10 = *a1;
    v11 = a1[1];
    v12 = a1[2];
    v13 = a1[3];
    v14 = a1[4];
    v15 = *((_DWORD *)a1 + 17);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_23527E860;
    *(_QWORD *)(v16 + 32) = v10;
    *(_QWORD *)(v16 + 40) = v11;
    *(_QWORD *)(v16 + 48) = v12;
    *(_QWORD *)(v16 + 56) = v13;
    *(_QWORD *)(v16 + 64) = v14;
    *(_QWORD *)(v16 + 72) = v3;
    *(_QWORD *)(v16 + 80) = v4;
    *(_QWORD *)(v16 + 88) = v5;
    *(_BYTE *)(v16 + 98) = BYTE2(v6);
    *(_WORD *)(v16 + 96) = v6;
    *(_DWORD *)(v16 + 100) = v15;
    outlined copy of DisplayList.Item.Value(v3, v4);
    DisplayList.Item.features.getter();
    v17 = v20;
    DisplayList.Item.properties.getter();
    result = outlined consume of DisplayList.Item.Value(v3, v4);
    v19 = v20;
  }
  *(_QWORD *)a2 = v16;
  *(_WORD *)(a2 + 8) = v17;
  *(_BYTE *)(a2 + 10) = v19;
  return result;
}

void DisplayList.Item.features.getter()
{
  __asm { BR              X10 }
}

void sub_234A0DB28()
{
  __int16 *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  switch(v1 >> 60)
  {
    case 6uLL:
      outlined init with copy of AnyTrackedValue((v1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v11);
      v3 = *((_QWORD *)&v12 + 1);
      v4 = v13;
      __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
      v5 = *(void (**)(uint64_t, uint64_t))(v4 + 40);
      outlined copy of DisplayList.Content.Value(v1);
      v5(v3, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      outlined consume of DisplayList.Item.Value(v1, v2);
      return;
    case 8uLL:
      v6 = *(_QWORD *)(v1 + 16);
      v7 = *(void **)(v6 + 192);
      if (!v7)
        goto LABEL_9;
      outlined copy of DisplayList.Item.Value(v1, v2);
      outlined copy of DisplayList.Item.Value(v1, v2);
      swift_retain();
      swift_retain();
      if ((uint64_t)objc_msgSend(v7, sel_length) >= 1)
      {
        if (one-time initialization token for updateSchedule != -1)
          swift_once();
        v8 = static NSAttributedStringKey.updateSchedule;
        objc_msgSend(v7, sel_length);
        if (objc_msgSend(v7, sel_attribute_atIndex_effectiveRange_, v8, 0, 0))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          outlined destroy of Any?((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
          v9 = *(_BYTE *)(v6 + 232);
          outlined consume of DisplayList.Item.Value(v1, v2);
          swift_release();
          swift_release();
          outlined consume of DisplayList.Item.Value(v1, v2);
          if ((v9 & 1) == 0)
            goto LABEL_9;
          v10 = 8;
          goto LABEL_13;
        }
        v11 = 0u;
        v12 = 0u;
        outlined destroy of Any?((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      }
      outlined consume of DisplayList.Item.Value(v1, v2);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v1, v2);
      *v0 = 0;
      return;
    case 9uLL:
      v10 = *(_WORD *)(v1 + 24) | 0x200;
      goto LABEL_13;
    case 0xBuLL:
      goto LABEL_12;
    case 0xCuLL:
      outlined copy of DisplayList.Content.Value(v1);
LABEL_12:
      v10 = 2;
LABEL_13:
      *v0 = v10;
      break;
    default:
LABEL_9:
      *v0 = 0;
      break;
  }
}

void DisplayList.Item.properties.getter()
{
  __asm { BR              X10 }
}

void sub_234A0E18C()
{
  _BYTE *v0;
  unint64_t v1;

  if (v1 >> 60 == 9)
    *v0 = *(_BYTE *)(v1 + 26);
  else
    *v0 = 0;
}

_QWORD *DisplayList.init(_:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = result;
  if (result[2])
  {
    swift_bridgeObjectRetain();
    if (v2[2])
    {
      v3 = v2[10];
      outlined copy of DisplayList.Item.Value(v2[9], v3);
      DisplayList.Item.features.getter();
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x234A0E730);
  }
  *(_QWORD *)a2 = result;
  *(_WORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 10) = 0;
  return result;
}

void DisplayList.append(_:)(uint64_t *a1)
{
  _QWORD **v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int16 v20;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[7];
  v5 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  if (v3 >> 62 != 3 || (v5 & 0xFFFFFF) != 0 || v3 != 0xC000000000000000 || (v4 | v2) != 0)
  {
    v9 = v1;
    v10 = *a1;
    v11 = a1[1];
    v12 = a1[2];
    v13 = a1[3];
    v14 = a1[4];
    v15 = *((_DWORD *)a1 + 17);
    v16 = *v1;
    outlined copy of DisplayList.Item.Value(a1[5], v3);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v19 = &v16[9 * v18];
    v19[4] = v10;
    v19[5] = v11;
    v19[6] = v12;
    v19[7] = v13;
    v19[8] = v14;
    v19[9] = v2;
    v19[10] = v3;
    v19[11] = v4;
    *((_BYTE *)v19 + 98) = BYTE2(v5);
    *((_WORD *)v19 + 48) = v5;
    *((_DWORD *)v19 + 25) = v15;
    *v9 = v16;
    DisplayList.Item.features.getter();
    *((_WORD *)v9 + 4) |= v20;
    DisplayList.Item.properties.getter();
    *((_BYTE *)v9 + 10) |= v20;
  }
}

uint64_t DisplayList.append(contentsOf:)(uint64_t *a1)
{
  _QWORD **v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;

  result = *a1;
  v28 = *(_QWORD *)(result + 16);
  if (v28)
  {
    v27 = result + 32;
    swift_bridgeObjectRetain();
    v3 = 0;
    v26 = v1;
    do
    {
      v4 = v27 + 72 * v3;
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(_QWORD *)(v4 + 48);
      v7 = *(unsigned __int16 *)(v4 + 64) | (*(unsigned __int8 *)(v4 + 66) << 16);
      if (v5 >> 62 != 3 || (v7 & 0xFFFFFF) != 0 || v5 != 0xC000000000000000 || (*(_QWORD *)(v4 + 56) | v6) != 0)
      {
        v11 = *(_QWORD *)v4;
        v12 = *(_QWORD *)(v4 + 8);
        v13 = *(_QWORD *)(v4 + 16);
        v14 = *(_QWORD *)(v4 + 24);
        v15 = *(_QWORD *)(v4 + 32);
        v16 = *(_DWORD *)(v4 + 68);
        v17 = *v1;
        v18 = *(_QWORD *)(v4 + 56);
        outlined copy of DisplayList.Item.Value(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48));
        v19 = v7;
        v20 = v18;
        v29 = v19;
        outlined copy of DisplayList.Item.Value(v6, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v22 = v17[2];
        v21 = v17[3];
        if (v22 >= v21 >> 1)
        {
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v17);
          v23 = v20;
          v17 = v25;
        }
        else
        {
          v23 = v20;
        }
        v17[2] = v22 + 1;
        v24 = &v17[9 * v22];
        v24[4] = v11;
        v24[5] = v12;
        v24[6] = v13;
        v24[7] = v14;
        v24[8] = v15;
        v24[9] = v6;
        v24[10] = v5;
        v24[11] = v23;
        *((_BYTE *)v24 + 98) = BYTE2(v29);
        *((_WORD *)v24 + 48) = v29;
        *((_DWORD *)v24 + 25) = v16;
        *v26 = v17;
        DisplayList.Item.features.getter();
        *((_WORD *)v26 + 4) |= v30;
        __asm { BR              X9 }
      }
      ++v3;
    }
    while (v3 != v28);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall DisplayList.reserveCapacity(_:)(Swift::Int a1)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *isUniquelyReferenced_nonNull_native;
  Swift::Int v5;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || a1 > v3[3] >> 1)
  {
    if (v3[2] <= a1)
      v5 = a1;
    else
      v5 = v3[2];
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 0, v3);
  }
  *v1 = v3;
}

uint64_t specialized DisplayList.transform(_:)(uint64_t result)
{
  _QWORD *v1;

  *(_WORD *)(result + 8) = 0;
  *(_BYTE *)(result + 10) = 0;
  v1 = *(_QWORD **)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_10;
    for (; v1[2]; v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1))
    {
      closure #1 in ViewGraphTransform.apply(to:)((uint64_t)(v1 + 4));
      if (v1[2])
      {
        DisplayList.Item.features.getter();
        if (v1[2])
          __asm { BR              X10 }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_10:
      ;
    }
    __break(1u);
    JUMPOUT(0x234A0F0C4);
  }
  return result;
}

void (*DisplayList.transform(_:)(void (*result)(_QWORD *)))(_QWORD *)
{
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(_QWORD *);

  *(_WORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 10) = 0;
  v2 = *(_QWORD **)v1;
  v3 = result;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_10;
    for (; v2[2]; v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2))
    {
      v3(v2 + 4);
      if (v2[2])
      {
        DisplayList.Item.features.getter();
        if (v2[2])
          __asm { BR              X10 }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_10:
      ;
    }
    __break(1u);
    JUMPOUT(0x234A0F400);
  }
  return result;
}

Swift::Void __swiftcall DisplayList.translate(by:version:)(CGSize by, SwiftUI::DisplayList::Version version)
{
  uint64_t v2;
  double height;
  double width;
  double v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double *v10;
  double v11;
  double v12;

  height = by.height;
  width = by.width;
  v5 = *(double *)version.value;
  if (by.width != 0.0 || by.height != 0.0)
  {
    v6 = *(_QWORD **)v2;
    v7 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    if (v7)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
        v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      v8 = 0;
      v9 = v6[2];
      v10 = (double *)(v6 + 8);
      do
      {
        if (v8 >= v9)
        {
          __break(1u);
          goto LABEL_13;
        }
        ++v8;
        v11 = *(v10 - 3) + height;
        *(v10 - 4) = *(v10 - 4) + width;
        *(v10 - 3) = v11;
        v12 = *v10;
        if (*(uint64_t *)&v5 > *(_QWORD *)v10)
          v12 = v5;
        *v10 = v12;
        v10 += 9;
      }
      while (v7 != v8);
      *(_QWORD *)v2 = v6;
    }
  }
}

BOOL DisplayList.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

void DisplayList.version.getter(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (!v3)
  {
    *a1 = 0;
    return;
  }
  if (v3 == 1)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v4 = v3 & 0x7FFFFFFFFFFFFFFELL;
    v7 = (uint64_t *)(v2 + 136);
    v8 = v3 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v9 = *(v7 - 9);
      v11 = *v7;
      v7 += 18;
      v10 = v11;
      if (v9 > v5)
        v5 = v9;
      if (v10 > v6)
        v6 = v10;
      v8 -= 2;
    }
    while (v8);
    if (v5 <= v6)
      v5 = v6;
    if (v3 == v4)
      goto LABEL_18;
  }
  v12 = v3 - v4;
  v13 = (uint64_t *)(v2 + 72 * v4 + 64);
  do
  {
    v15 = *v13;
    v13 += 9;
    v14 = v15;
    if (v15 > v5)
      v5 = v14;
    --v12;
  }
  while (v12);
LABEL_18:
  *a1 = v5;
}

SwiftUI::DisplayList::Version __swiftcall DisplayList.Version.init()()
{
  _QWORD *v0;
  SwiftUI::DisplayList::Version result;

  *v0 = 0;
  return result;
}

SwiftUI::Time __swiftcall DisplayList.nextUpdate(after:)(SwiftUI::Time after)
{
  double *v1;
  double *v2;
  uint64_t *v3;
  double *v4;
  double v5;
  __int16 v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  double v13;

  v4 = v2;
  v5 = *v1;
  v6 = *((_WORD *)v3 + 4);
  if ((v6 & 4) != 0)
  {
    v8 = *v1;
  }
  else
  {
    v7 = *v3;
    if (one-time initialization token for infinity != -1)
      swift_once();
    v8 = *(double *)&static Time.infinity;
    if ((v6 & 8) != 0)
    {
      v9 = *(_QWORD *)(v7 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain();
        v10 = v9 - 1;
        v11 = v7 + 100;
        do
        {
          DisplayList.Item.nextUpdate(after:)(*(SwiftUI::Time *)(v11 - 36));
          if (v13 < v8)
            v8 = v13;
          v12 = v8 == v5 || v10-- == 0;
          v11 += 72;
        }
        while (!v12);
        swift_bridgeObjectRelease();
      }
    }
  }
  *v4 = v8;
  return after;
}

SwiftUI::Time __swiftcall DisplayList.Item.nextUpdate(after:)(SwiftUI::Time after)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  SwiftUI::Time result;

  v2 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v2);
  v3 = *(_QWORD *)(v1 + 48);
  if (one-time initialization token for infinity != -1)
    swift_once();
  __asm { BR              X10 }
  return result;
}

uint64_t specialized DisplayList.forEachIdentity(_:)(uint64_t *a1, char **a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;

  v2 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v2 + 16))
    {
      v4 = *(_QWORD *)(v2 + 80);
      v5 = *(_DWORD *)(v2 + 100);
      if (v5)
      {
        v6 = *a2;
        outlined copy of DisplayList.Item.Value(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
          *a2 = v6;
        }
        v9 = *((_QWORD *)v6 + 2);
        v8 = *((_QWORD *)v6 + 3);
        if (v9 >= v8 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v9 + 1;
        *(_DWORD *)&v6[4 * v9 + 32] = v5;
        *a2 = v6;
      }
      else
      {
        outlined copy of DisplayList.Item.Value(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
      }
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x234A0FDE0);
  }
  return 1;
}

uint64_t specialized DisplayList.forEachIdentity(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
    return 1;
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v2 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(v2 + 100);
  if (!v4)
    goto LABEL_15;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v5)
    goto LABEL_15;
  v6 = 0;
  v7 = *(_QWORD *)a2 + 32;
  v8 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  do
  {
    v9 = v8 >> 1;
    v10 = v6 + (v8 >> 1);
    if (__OFADD__(v6, v8 >> 1))
    {
      __break(1u);
LABEL_20:
      __break(1u);
      JUMPOUT(0x234A1013CLL);
    }
    if (v10 >= v5)
      goto LABEL_20;
    v8 += ~v9;
    if (*(_DWORD *)(v7 + 4 * v10) < v4)
      v6 = v10 + 1;
    else
      v8 = v9;
  }
  while ((uint64_t)v8 > 0);
  if (v6 == v5)
LABEL_15:
    __asm { BR              X8 }
  if (v6 >= v5)
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x234A10160);
  }
  if (*(_DWORD *)(v7 + 4 * v6) != v4)
    goto LABEL_15;
  v11 = 0;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t DisplayList.forEachIdentity(_:)(void (*a1)(uint64_t *, char *))
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  char v9;

  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    swift_bridgeObjectRetain();
    if (!*(_QWORD *)(v2 + 16))
    {
      __break(1u);
      JUMPOUT(0x234A104F4);
    }
    v5 = *(_QWORD *)(v2 + 72);
    v4 = *(_QWORD *)(v2 + 80);
    v6 = *(_DWORD *)(v2 + 100);
    if (v6)
    {
      v9 = 0;
      LODWORD(v8) = v6;
      outlined copy of DisplayList.Item.Value(v5, v4);
      a1(&v8, &v9);
      if ((v9 & 1) != 0)
      {
        outlined consume of DisplayList.Item.Value(v5, v4);
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      outlined copy of DisplayList.Item.Value(v5, v4);
    }
    __asm { BR              X9 }
  }
  return 1;
}

void DisplayList.forEachRBDisplayList(_:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(*v0 + 16))
  {
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v1 + 16))
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x234A107BCLL);
  }
}

double DisplayList.Item.frame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DisplayList.Item.frame.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*DisplayList.Item.frame.modify())()
{
  return _ViewInputs.base.modify;
}

void DisplayList.Item.version.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
}

_QWORD *DisplayList.Item.version.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*DisplayList.Item.version.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.Item.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  __int16 v6;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_BYTE *)(v1 + 66);
  v6 = *(_WORD *)(v1 + 64);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 26) = v5;
  *(_WORD *)(a1 + 24) = v6;
  return outlined copy of DisplayList.Item.Value(v2, v3);
}

__n128 DisplayList.Item.value.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int8 v5;
  __n128 result;
  __n128 v7;

  v7 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u16[4];
  v4 = v1 + 64;
  v5 = a1[1].n128_u8[10];
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v4 - 24), *(_QWORD *)(v4 - 16));
  result = v7;
  *(__n128 *)(v4 - 24) = v7;
  *(_QWORD *)(v4 - 8) = v2;
  *(_BYTE *)(v4 + 2) = v5;
  *(_WORD *)v4 = v3;
  return result;
}

uint64_t (*DisplayList.Item.value.modify())()
{
  return _ViewInputs.base.modify;
}

void DisplayList.Item.identity.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 68);
}

_DWORD *DisplayList.Item.identity.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 68) = *result;
  return result;
}

uint64_t (*DisplayList.Item.identity.modify())()
{
  return _ViewInputs.base.modify;
}

__n128 DisplayList.Item.init(_:frame:identity:version:)@<Q0>(__n128 *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  unint64_t v8;
  unsigned __int16 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  __n128 result;

  v8 = a1[1].n128_u64[0];
  v9 = a1[1].n128_u16[4];
  v10 = a1[1].n128_u8[10];
  v11 = *a2;
  v12 = *a3;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(double *)(a4 + 16) = a7;
  *(double *)(a4 + 24) = a8;
  *(_QWORD *)(a4 + 32) = v12;
  result = *a1;
  *(__n128 *)(a4 + 40) = *a1;
  *(_QWORD *)(a4 + 56) = v8;
  *(_BYTE *)(a4 + 66) = v10;
  *(_WORD *)(a4 + 64) = v9;
  *(_DWORD *)(a4 + 68) = v11;
  return result;
}

BOOL static DisplayList.Item.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

BOOL static DisplayList.Version.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

double DisplayList.Item.position.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double DisplayList.Item.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.Item(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

unint64_t DisplayList.Content.value.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of DisplayList.Content.Value(v2);
}

unint64_t DisplayList.Content.value.setter(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t result;

  v2 = *a1;
  result = outlined consume of DisplayList.Content.Value(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*DisplayList.Content.value.modify())()
{
  return _ViewInputs.base.modify;
}

void DisplayList.Content.seed.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 8);
}

_WORD *DisplayList.Content.seed.setter(_WORD *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*DisplayList.Content.seed.modify())()
{
  return _ViewInputs.base.modify;
}

_QWORD *DisplayList.Content.init(_:seed:)@<X0>(_QWORD *result@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3;

  v3 = *a2;
  *(_QWORD *)a3 = *result;
  *(_WORD *)(a3 + 8) = v3;
  return result;
}

uint64_t DisplayList.ArchiveIDs.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DisplayList.ArchiveIDs.uuid.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DisplayList.ArchiveIDs.uuid.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.ArchiveIDs.stableIDs.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for DisplayList.ArchiveIDs() + 20));
  return swift_bridgeObjectRetain();
}

uint64_t DisplayList.ArchiveIDs.stableIDs.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *(int *)(type metadata accessor for DisplayList.ArchiveIDs() + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = v2;
  return result;
}

uint64_t (*DisplayList.ArchiveIDs.stableIDs.modify())(_QWORD, _QWORD)
{
  type metadata accessor for DisplayList.ArchiveIDs();
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.ArchiveIDs.init(uuid:stableIDs:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *a2;
  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for DisplayList.ArchiveIDs();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = v5;
  return result;
}

__n128 DisplayList.InterpolatorAnimation.value.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u32[0];
  v3 = v1[1].n128_u8[4];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 DisplayList.InterpolatorAnimation.value.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u32[0];
  v3 = a1[1].n128_u8[4];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u32[0] = v2;
  v1[1].n128_u8[4] = v3;
  return result;
}

uint64_t (*DisplayList.InterpolatorAnimation.value.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.InterpolatorAnimation.animation.getter()
{
  return swift_retain();
}

uint64_t DisplayList.InterpolatorAnimation.animation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*DisplayList.InterpolatorAnimation.animation.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.Version.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::DisplayList::Version __swiftcall DisplayList.Version.init(decodedValue:)(SwiftUI::DisplayList::Version decodedValue)
{
  SwiftUI::DisplayList::Version *v1;
  Swift::Int value;

  value = static DisplayList.Version.lastValue;
  if (static DisplayList.Version.lastValue <= decodedValue.value)
    value = decodedValue.value;
  static DisplayList.Version.lastValue = value;
  v1->value = decodedValue.value;
  return decodedValue;
}

void DisplayList.Version.init(forUpdate:)(_QWORD *a1@<X8>)
{
  *a1 = ++static DisplayList.Version.lastValue;
}

Swift::Void __swiftcall DisplayList.Version.combine(with:)(SwiftUI::DisplayList::Version with)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *(_QWORD *)with.value;
  if (*(_QWORD *)with.value <= *v1)
    v2 = *v1;
  *v1 = v2;
}

BOOL static DisplayList.Version.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void DisplayList.Version.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int DisplayList.Version.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DisplayList.Version(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DisplayList.Version(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DisplayList.Version(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DisplayList.Version(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.Version()
{
  Swift::UInt *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t DisplayList.Seed.value.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

void DisplayList.Seed.init()(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DisplayList.Seed.init(decodedValue:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

unint64_t *DisplayList.Seed.init(_:)@<X0>(unint64_t *result@<X0>, _WORD *a2@<X8>)
{
  unint64_t v2;

  v2 = *result;
  if (*result)
    LODWORD(v2) = (2 * ((33 * (v2 >> 16)) ^ v2)) | 1;
  *a2 = v2;
  return result;
}

Swift::Void __swiftcall DisplayList.Seed.invalidate()()
{
  _WORD *v0;

  if (*v0)
    *v0 = ~*v0 | 1;
}

void static DisplayList.Seed.undefined.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void DisplayList.Seed.hash(into:)()
{
  Swift::UInt16 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static DisplayList.Seed.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

Swift::Int DisplayList.Seed.hashValue.getter()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayList.Seed()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.Seed()
{
  Swift::UInt16 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.Seed()
{
  Swift::UInt16 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.Seed(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t DisplayList.Properties.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DisplayList.Properties.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static DisplayList.Properties.foregroundLayer.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static DisplayList.Properties.ignoresEvents.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static DisplayList.Properties.privacySensitive.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static DisplayList.Properties.archivesInteractiveControls.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void static DisplayList.Properties.secondaryForegroundLayer.getter(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

void static DisplayList.Properties.tertiaryForegroundLayer.getter(_BYTE *a1@<X8>)
{
  *a1 = 32;
}

void static DisplayList.Properties.quaternaryForegroundLayer.getter(_BYTE *a1@<X8>)
{
  *a1 = 64;
}

void static DisplayList.Properties.screencaptureProhibited.getter(_BYTE *a1@<X8>)
{
  *a1 = 0x80;
}

_BYTE *protocol witness for OptionSet.init(rawValue:) in conformance DisplayList.Properties@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t outlined copy of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v2;

  v2 = a2 >> 62;
  if (a2 >> 62 == 2)
    return swift_bridgeObjectRetain();
  if ((_DWORD)v2 == 1)
  {
    outlined copy of DisplayList.Effect(result, a2, SBYTE4(a2));
    return swift_bridgeObjectRetain();
  }
  if (!(_DWORD)v2)
    return outlined copy of DisplayList.Content.Value(result);
  return result;
}

unint64_t outlined copy of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      result = swift_retain();
      break;
    case 5:
      result = outlined copy of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v2;

  v2 = a2 >> 62;
  if (a2 >> 62 == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)v2 == 1)
  {
    outlined consume of DisplayList.Effect(result, a2, SBYTE4(a2));
    return swift_bridgeObjectRelease();
  }
  if (!(_DWORD)v2)
    return outlined consume of DisplayList.Content.Value(result);
  return result;
}

unint64_t outlined consume of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      result = swift_release();
      break;
    case 5:
      result = outlined consume of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of GraphicsBlendMode(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_unknownObjectRelease();
  return result;
}

_BYTE *protocol witness for SetAlgebra.union(_:) in conformance DisplayList.Properties@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *result | *v2;
  return result;
}

_BYTE *protocol witness for SetAlgebra.intersection(_:) in conformance DisplayList.Properties@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *result & *v2;
  return result;
}

_BYTE *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DisplayList.Properties@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *result ^ *v2;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DisplayList.Properties(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *v2;
  v4 = *a2;
  if ((v4 & v3) != v4)
    *v2 = v4 | v3;
  *a1 = v4;
  return (v4 & v3) != v4;
}

_BYTE *protocol witness for SetAlgebra.formUnion(_:) in conformance DisplayList.Properties(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formIntersection(_:) in conformance DisplayList.Properties(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DisplayList.Properties(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.subtracting(_:) in conformance DisplayList.Properties@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DisplayList.Properties(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DisplayList.Properties(_BYTE *a1)
{
  _BYTE *v1;

  return (*a1 & *v1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DisplayList.Properties(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DisplayList.Properties()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *protocol witness for SetAlgebra.subtract(_:) in conformance DisplayList.Properties(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t static DisplayList.Key._includesRemovedValues.getter()
{
  return 1;
}

uint64_t static DisplayList.Key.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = word_25426D3B8;
  v3 = byte_25426D3BA;
  *(_QWORD *)a1 = static DisplayList.Key.defaultValue;
  *(_WORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 10) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t static DisplayList.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  char v8;

  a2(&v6);
  v3 = v6;
  v4 = v7;
  v5 = v8;
  DisplayList.append(contentsOf:)(&v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance DisplayList.Key@<X0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = word_25426D3B8;
  v3 = byte_25426D3BA;
  *(_QWORD *)a1 = static DisplayList.Key.defaultValue;
  *(_WORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 10) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance DisplayList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  char v8;

  a2(&v6);
  v3 = v6;
  v4 = v7;
  v5 = v8;
  DisplayList.append(contentsOf:)(&v3);
  return swift_bridgeObjectRelease();
}

uint64_t DisplayList.Options.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void static DisplayList.Options.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance DisplayList.Properties@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *v2;
  v4 = *result;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v3 & ~(_BYTE)v4;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance DisplayList.Properties@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *v2;
  v4 = *result;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

void DisplayList.Index.identity.getter(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t DisplayList.Index.serial.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

void DisplayList.Index.archiveIdentity.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 8);
}

uint64_t DisplayList.Index.archiveSerial.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

_BYTE *protocol witness for SetAlgebra.union(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.intersection(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DisplayList.Index.RestoreOptions(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formUnion(_:) in conformance DisplayList.Index.RestoreOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formIntersection(_:) in conformance DisplayList.Index.RestoreOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DisplayList.Index.RestoreOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.subtracting(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DisplayList.Index.RestoreOptions(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DisplayList.Index.RestoreOptions(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

_BYTE *protocol witness for SetAlgebra.subtract(_:) in conformance DisplayList.Index.RestoreOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance DisplayList.Index.RestoreOptions@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void DisplayList.Index.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

int *DisplayList.Index.enter(identity:)@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*result)
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = *((_QWORD *)v2 + 1);
    v6 = *((_BYTE *)v2 + 16);
    v7 = 1;
    *v2 = *result;
    v2[1] = 0;
  }
  else
  {
    v7 = 0;
    v3 = *v2;
    v4 = v2[1] + 1;
    v2[1] = v4;
    v5 = *((_QWORD *)v2 + 1);
    v6 = *((_BYTE *)v2 + 16);
  }
  *((_BYTE *)v2 + 16) = v7;
  *(_DWORD *)a2 = v3;
  *(_DWORD *)(a2 + 4) = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

double DisplayList.Index.leave(index:)(uint64_t a1, double result)
{
  uint64_t v2;
  char v3;
  char v4;

  v3 = *(_BYTE *)(v2 + 16);
  if ((v3 & 0xC) != 0)
  {
    result = *(double *)v2;
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 8);
    if ((v3 & 8) != 0)
      *(double *)(v2 + 8) = result;
  }
  if ((v3 & 1) != 0)
  {
    result = *(double *)a1;
    *(_QWORD *)v2 = *(_QWORD *)a1;
    v4 = *(_BYTE *)(a1 + 16);
    if ((v3 & 2) == 0)
      goto LABEL_8;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 16);
    if ((v3 & 2) == 0)
    {
LABEL_8:
      *(_BYTE *)(v2 + 16) = v4;
      return result;
    }
  }
  result = *(double *)(a1 + 8);
  *(double *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = v4;
  return result;
}

Swift::Void __swiftcall DisplayList.Index.updateArchive(entering:)(Swift::Bool entering)
{
  uint64_t v1;
  int v2;
  char v3;
  int v4;

  if (entering)
  {
    *(_QWORD *)(v1 + 8) = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0;
    v2 = *(unsigned __int8 *)(v1 + 16);
    if ((~v2 & 6) == 0)
      return;
    v3 = v2 | 6;
  }
  else
  {
    *(_QWORD *)v1 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    v4 = *(unsigned __int8 *)(v1 + 16);
    if ((~v4 & 9) == 0)
      return;
    v3 = v4 | 9;
  }
  *(_BYTE *)(v1 + 16) = v3;
}

uint64_t DisplayList.Index.skip(list:)(uint64_t *a1)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *i;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  char v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  char v38;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (uint64_t)&v32 - v4;
  result = *a1;
  v6 = *(_QWORD *)(*a1 + 16);
  if (v6)
  {
    v33 = swift_bridgeObjectRetain();
    for (i = (_DWORD *)(v33 + 100); *i; i += 18)
    {
LABEL_4:
      if (!--v6)
        return swift_bridgeObjectRelease();
    }
    v8 = *(_QWORD *)(i - 7);
    v9 = *(_QWORD *)(i - 5);
    v10 = *(_QWORD *)(i - 3);
    v11 = *((unsigned __int8 *)i - 2);
    v12 = *((unsigned __int16 *)i - 2);
    v13 = *v1;
    v14 = v1[1] + 1;
    v1[1] = v14;
    v15 = *((_QWORD *)v1 + 1);
    v16 = *((_BYTE *)v1 + 16);
    *((_BYTE *)v1 + 16) = 0;
    if ((v9 >> 62) - 2 < 2)
    {
LABEL_22:
      v30 = *((_BYTE *)v1 + 16);
      if ((v30 & 0xC) != 0)
      {
        v31 = *(_QWORD *)v1;
        if ((v1[4] & 4) != 0)
          *(_QWORD *)v1 = *((_QWORD *)v1 + 1);
        if ((v30 & 8) != 0)
          *((_QWORD *)v1 + 1) = v31;
      }
      if ((v30 & 1) != 0)
      {
        *v1 = v13;
        v1[1] = v14;
      }
      if ((v30 & 2) != 0)
        *((_QWORD *)v1 + 1) = v15;
      *((_BYTE *)v1 + 16) = v16;
      goto LABEL_4;
    }
    if (!(v9 >> 62))
    {
      if (v8 >> 60 == 9)
      {
        v17 = *(_WORD *)(v8 + 24);
        v18 = *(_BYTE *)(v8 + 26);
        v36 = *(_QWORD *)(v8 + 16);
        v37 = v17;
        v38 = v18;
        DisplayList.Index.skip(list:)(&v36);
      }
      goto LABEL_22;
    }
    v35 = v13;
    v36 = v10;
    v37 = v12;
    v38 = (v12 | (v11 << 16)) >> 16;
    outlined copy of DisplayList.Item.Value(v8, v9);
    outlined copy of DisplayList.Effect(v8, v9, SBYTE4(v9));
    swift_bridgeObjectRetain();
    DisplayList.Index.skip(list:)(&v36);
    swift_bridgeObjectRelease();
    if (BYTE4(v9) != 1)
    {
      if (BYTE4(v9) == 7)
      {
        v19 = *(_WORD *)(v8 + 24);
        v20 = *(_BYTE *)(v8 + 26);
        v36 = *(_QWORD *)(v8 + 16);
        v37 = v19;
        v38 = v20;
        DisplayList.Index.skip(list:)(&v36);
        v21 = v8;
        v22 = v9;
        LOBYTE(v23) = 7;
      }
      else
      {
        v21 = v8;
        v22 = v9;
        v23 = HIDWORD(v9);
      }
      outlined consume of DisplayList.Effect(v21, v22, v23);
      outlined consume of DisplayList.Item.Value(v8, v9);
      v13 = v35;
      goto LABEL_22;
    }
    v24 = swift_projectBox();
    v25 = v34;
    outlined init with copy of DisplayList.ArchiveIDs?(v24, v34);
    v26 = type metadata accessor for DisplayList.ArchiveIDs();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26) == 1)
    {
      *(_QWORD *)v1 = *((_QWORD *)v1 + 1);
      *((_QWORD *)v1 + 1) = 0;
      v27 = *((unsigned __int8 *)v1 + 16);
      v13 = v35;
      if ((~v27 & 9) != 0)
      {
        v28 = v27 | 9;
LABEL_20:
        *((_BYTE *)v1 + 16) = v28;
      }
    }
    else
    {
      *((_QWORD *)v1 + 1) = *(_QWORD *)v1;
      *(_QWORD *)v1 = 0;
      v29 = *((unsigned __int8 *)v1 + 16);
      v13 = v35;
      if ((~v29 & 6) != 0)
      {
        v28 = v29 | 6;
        goto LABEL_20;
      }
    }
    outlined destroy of Any?(v34, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    outlined consume of DisplayList.Effect(v8, v9, 1);
    outlined consume of DisplayList.Item.Value(v8, v9);
    goto LABEL_22;
  }
  return result;
}

void DisplayList.Index.skip(item:)(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  char v16;
  int v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Bool v25;
  uint64_t v26;
  __int16 v27;
  char v28;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - v4;
  if (!*(_DWORD *)(a1 + 68))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(unsigned __int8 *)(a1 + 66);
    v10 = *(unsigned __int16 *)(a1 + 64);
    v11 = *v1;
    v12 = v1[1] + 1;
    v1[1] = v12;
    v13 = *((_QWORD *)v1 + 1);
    v14 = *((_BYTE *)v1 + 16);
    *((_BYTE *)v1 + 16) = 0;
    if ((v7 >> 62) - 2 >= 2)
    {
      if (v7 >> 62)
      {
        v17 = v10 | (v9 << 16);
        v26 = v8;
        v27 = v17;
        v28 = BYTE2(v17);
        outlined copy of DisplayList.Effect(v6, v7, SBYTE4(v7));
        swift_bridgeObjectRetain();
        DisplayList.Index.skip(list:)(&v26);
        swift_bridgeObjectRelease();
        if (BYTE4(v7) == 1)
        {
          v23 = swift_projectBox();
          outlined init with copy of DisplayList.ArchiveIDs?(v23, (uint64_t)v5);
          v24 = type metadata accessor for DisplayList.ArchiveIDs();
          v25 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v5, 1, v24) != 1;
          DisplayList.Index.updateArchive(entering:)(v25);
          outlined destroy of Any?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
          v20 = v6;
          v21 = v7;
          LOBYTE(v22) = 1;
        }
        else if (BYTE4(v7) == 7)
        {
          v18 = *(_WORD *)(v6 + 24);
          v19 = *(_BYTE *)(v6 + 26);
          v26 = *(_QWORD *)(v6 + 16);
          v27 = v18;
          v28 = v19;
          DisplayList.Index.skip(list:)(&v26);
          v20 = v6;
          v21 = v7;
          LOBYTE(v22) = 7;
        }
        else
        {
          v20 = v6;
          v21 = v7;
          v22 = HIDWORD(v7);
        }
        outlined consume of DisplayList.Effect(v20, v21, v22);
      }
      else if (v6 >> 60 == 9)
      {
        v15 = *(_WORD *)(v6 + 24);
        v16 = *(_BYTE *)(v6 + 26);
        v26 = *(_QWORD *)(v6 + 16);
        v27 = v15;
        v28 = v16;
        DisplayList.Index.skip(list:)(&v26);
      }
    }
    $defer #1 () in DisplayList.Index.skip(item:)((uint64_t *)v1, v11 | (v12 << 32), v13, v14);
  }
}

uint64_t *$defer #1 () in DisplayList.Index.skip(item:)(uint64_t *result, uint64_t a2, uint64_t a3, char a4)
{
  char v4;
  uint64_t v5;

  v4 = *((_BYTE *)result + 16);
  if ((v4 & 0xC) != 0)
  {
    v5 = *result;
    if ((result[2] & 4) != 0)
      *result = result[1];
    if ((v4 & 8) != 0)
      result[1] = v5;
  }
  if ((v4 & 1) != 0)
  {
    *result = a2;
    if ((v4 & 2) == 0)
      goto LABEL_8;
  }
  else if ((v4 & 2) == 0)
  {
LABEL_8:
    *((_BYTE *)result + 16) = a4;
    return result;
  }
  result[1] = a3;
  *((_BYTE *)result + 16) = a4;
  return result;
}

uint64_t DisplayList.Index.skip(effect:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  int v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Bool v11;
  uint64_t v12;
  __int16 v13;
  char v14;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - v3;
  result = *(_QWORD *)a1;
  v6 = *(unsigned __int8 *)(a1 + 12);
  if (v6 == 1)
  {
    v9 = swift_projectBox();
    outlined init with copy of DisplayList.ArchiveIDs?(v9, (uint64_t)v4);
    v10 = type metadata accessor for DisplayList.ArchiveIDs();
    v11 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v4, 1, v10) != 1;
    DisplayList.Index.updateArchive(entering:)(v11);
    return outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  }
  else if (v6 == 7)
  {
    v7 = *(_WORD *)(result + 24);
    v8 = *(_BYTE *)(result + 26);
    v12 = *(_QWORD *)(result + 16);
    v13 = v7;
    v14 = v8;
    return DisplayList.Index.skip(list:)(&v12);
  }
  return result;
}

__n128 DisplayList.Index.id.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

void DisplayList.Index.ID.hash(into:)()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int DisplayList.Index.ID.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayList.Index.ID()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.Index.ID()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.Index.ID()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  Hasher.init(_seed:)();
  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

char *DisplayList.Item.canonicalize(options:)(char *result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  __int128 v17;
  char v18;
  char v19;
  __int128 v20;
  float v21;
  char v22;
  char v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  CGFloat v31;
  CGFloat v32;
  __int16 v33;
  char v34;
  int v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  CGFloat v44;
  CGFloat v45;
  __int16 v46;
  char v47;
  int v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned __int8 v69;
  uint64_t v70;
  unsigned int v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  __int128 v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  __int16 v83;
  char v84;
  int v85;
  __int128 v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(__int128 *__return_ptr, uint64_t, uint64_t);
  CGFloat v93;
  CGFloat v94;
  __int16 v95;
  char v96;
  int v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int8x16_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  __int128 v107;
  __int128 v108;
  int v109[2];
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  char v113[8];
  uint64_t v114;
  uint64_t v115;
  int v116[2];
  void *v117;
  id v118;
  id v119;
  int v120[2];
  uint64_t v121;
  int v122[2];
  uint64_t v123;
  int v124[2];
  uint64_t v125;
  int v126[2];
  uint64_t v127;
  int v128[2];
  int v129[2];
  char v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  uint64_t v143[2];
  unsigned __int8 v144;
  char v145;
  int v146[2];
  char v147;
  float32x4_t v148;
  char v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned __int8 v161;
  uint64_t v162;
  __int16 v163;
  char v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  char v175;
  _OWORD v176[5];
  _OWORD v177[2];
  char v178;
  _BYTE v179[48];
  CGRect v180;

  v2 = *result;
  if ((*result & 1) == 0)
  {
    v3 = v1;
    v4 = *(_QWORD *)(v1 + 48);
    if ((v4 >> 62) - 2 >= 2)
    {
      v5 = *(_QWORD *)(v1 + 40);
      v6 = *(_QWORD *)(v1 + 56);
      v7 = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
      if (!(v4 >> 62))
      {
        v8 = *(double *)v1;
        v9 = *(double *)(v1 + 8);
        v10 = *(double *)(v1 + 16);
        v11 = *(double *)(v1 + 24);
        outlined copy of DisplayList.Content.Value(*(_QWORD *)(v1 + 40));
        v180.origin.x = v8;
        v180.origin.y = v9;
        v180.size.width = v10;
        v180.size.height = v11;
        if (!CGRectIsEmpty(v180))
          goto LABEL_12;
        v12 = *(_QWORD *)(v1 + 32);
        v13 = *(_DWORD *)(v1 + 68);
        *(CGFloat *)&v150 = v8;
        *((CGFloat *)&v150 + 1) = v9;
        *(CGFloat *)&v151 = v10;
        *((CGFloat *)&v151 + 1) = v11;
        *(_QWORD *)&v152 = v12;
        *((_QWORD *)&v152 + 1) = v5;
        *(_QWORD *)&v153 = v4;
        *((_QWORD *)&v153 + 1) = v6;
        BYTE2(v154) = BYTE2(v7);
        LOWORD(v154) = v7;
        HIDWORD(v154) = v13;
        DisplayList.Item.features.getter();
        if ((v170 & 1) != 0)
        {
LABEL_12:
          switch(v5 >> 60)
          {
            case 1uLL:
              v148 = *(float32x4_t *)(v5 + 16);
              result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v148)))) & 1) == 0)
                goto LABEL_72;
              return result;
            case 4uLL:
              v17 = *(_OWORD *)(v5 + 32);
              v150 = *(_OWORD *)(v5 + 16);
              v151 = v17;
              LOBYTE(v152) = *(_BYTE *)(v5 + 48);
              outlined copy of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v150, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
              Path.isEmpty.getter();
              v19 = v18;
              outlined consume of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v150, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
              result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if ((v19 & 1) != 0)
                goto LABEL_72;
              return result;
            case 5uLL:
              v20 = *(_OWORD *)(v5 + 32);
              v150 = *(_OWORD *)(v5 + 16);
              v151 = v20;
              LOBYTE(v152) = *(_BYTE *)(v5 + 48);
              v21 = *(float *)(v5 + 68);
              outlined copy of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v150, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
              Path.isEmpty.getter();
              v23 = v22;
              outlined consume of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v150, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
              result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if ((v23 & 1) != 0 || v21 == 0.0)
                goto LABEL_72;
              return result;
            case 8uLL:
              v24 = *(void **)(*(_QWORD *)(v5 + 16) + 192);
              if (!v24)
                break;
              v25 = objc_msgSend(v24, sel_length);
              goto LABEL_26;
            case 9uLL:
              v25 = *(id *)(*(_QWORD *)(v5 + 16) + 16);
LABEL_26:
              result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if (!v25)
                goto LABEL_72;
              return result;
            default:
              return (char *)outlined consume of DisplayList.Item.Value(v5, v4);
          }
        }
        outlined consume of DisplayList.Item.Value(v5, v4);
LABEL_72:
        result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
        *(_OWORD *)(v3 + 40) = xmmword_23527E880;
        *(_QWORD *)(v3 + 56) = 0;
        *(_BYTE *)(v3 + 66) = 0;
        *(_WORD *)(v3 + 64) = 0;
        return result;
      }
      v14 = HIDWORD(v4);
      if (!*(_QWORD *)(v6 + 16))
      {
        switch(BYTE4(v4))
        {
          case 2:
            v16 = (v5 >> 2) & 1;
            goto LABEL_69;
          case 3:
            outlined init with copy of AnyTrackedValue(v5 + 16, (uint64_t)&v150);
            v90 = *((_QWORD *)&v151 + 1);
            v91 = v152;
            __swift_project_boxed_opaque_existential_1(&v150, *((uint64_t *)&v151 + 1));
            v92 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v91 + 56);
            outlined copy of DisplayList.Item.Value(v5, v4);
            v92(&v170, v90, v91);
            v14 = HIDWORD(v4);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
            LOBYTE(v16) = v170;
            goto LABEL_70;
          case 7:
            LOWORD(v16) = *(_WORD *)(v5 + 24);
            goto LABEL_69;
          case 0x11:
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v5 + 112))(&v150);
            LOBYTE(v16) = v150 | 0x11;
LABEL_69:
            outlined copy of DisplayList.Item.Value(v5, v4);
LABEL_70:
            if ((v16 & 1) == 0)
              goto LABEL_71;
            goto LABEL_9;
          default:
            outlined copy of DisplayList.Item.Value(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
LABEL_71:
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v5, v4, v14);
            break;
        }
        goto LABEL_72;
      }
      outlined copy of DisplayList.Effect(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), SBYTE4(v4));
      swift_bridgeObjectRetain();
LABEL_9:
      v15 = v7;
      switch((char)v14)
      {
        case 4:
          if (*(float *)&v5 < 1.0)
            goto LABEL_48;
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Item.Value(v5, v4);
          *(_OWORD *)(v3 + 40) = xmmword_23527E870;
          *(_QWORD *)(v3 + 56) = v6;
          *(_BYTE *)(v3 + 66) = BYTE2(v7);
          *(_WORD *)(v3 + 64) = v7;
          *(_QWORD *)&v150 = v6;
          WORD4(v150) = v7;
          BYTE10(v150) = BYTE2(v7);
          goto LABEL_46;
        case 6:
          if (*(_DWORD *)(v5 + 52) || *(_QWORD *)(v6 + 16) != 1)
            goto LABEL_48;
          v149 = v7;
          v27 = *(_QWORD *)(v5 + 16);
          v26 = *(_QWORD *)(v5 + 24);
          v28 = *(_QWORD *)(v5 + 32);
          v29 = *(_QWORD *)(v5 + 40);
          v30 = *(_BYTE *)(v5 + 48);
          v133 = *(_BYTE *)(v5 + 49);
          v130 = *(_BYTE *)(v5 + 50);
          v32 = *(double *)(v3 + 16);
          v31 = *(double *)(v3 + 24);
          v33 = *(_WORD *)(v6 + 96);
          v34 = *(_BYTE *)(v6 + 98);
          v35 = *(_DWORD *)(v6 + 100);
          v36 = *(_OWORD *)(v6 + 48);
          v150 = *(_OWORD *)(v6 + 32);
          v151 = v36;
          v37 = *(_OWORD *)(v6 + 80);
          v152 = *(_OWORD *)(v6 + 64);
          v153 = v37;
          BYTE2(v154) = v34;
          LOWORD(v154) = v33;
          HIDWORD(v154) = v35;
          v136 = v28;
          v140 = v29;
          v144 = v30;
          outlined copy of Path.Storage(v27, v26, v28, v29, v30);
          v38 = DisplayList.Item.paint(in:)(0.0, 0.0, v32, v31);
          if (!v38)
          {
            outlined consume of Path.Storage(v27, v26, v136, v140, v144);
            goto LABEL_84;
          }
          v39 = v38;
          v40 = swift_allocObject();
          *(_QWORD *)(v40 + 16) = v27;
          *(_QWORD *)(v40 + 24) = v26;
          *(_QWORD *)(v40 + 32) = v136;
          *(_QWORD *)(v40 + 40) = v140;
          *(_BYTE *)(v40 + 48) = v144;
          *(_QWORD *)(v40 + 56) = v39;
          *(_BYTE *)(v40 + 64) = v133;
          *(_BYTE *)(v40 + 65) = v130;
          outlined consume of DisplayList.Item.Value(v5, v4);
          result = (char *)swift_bridgeObjectRelease();
          v41 = *(_QWORD *)(v3 + 32);
          if (v41)
            v41 = (2 * (((33 * WORD1(v41)) ^ v41) & 0x7FFFLL)) | 1;
          v15 = v7;
          *(_QWORD *)(v3 + 40) = v40 | 0x4000000000000000;
          *(_QWORD *)(v3 + 48) = v41;
          *(_QWORD *)(v3 + 56) = 0;
          *(_BYTE *)(v3 + 66) = 0;
          *(_WORD *)(v3 + 64) = 0;
          goto LABEL_49;
        case 7:
          v149 = v7;
          v42 = *(_QWORD *)(v5 + 16);
          v43 = *(_DWORD *)(v5 + 28);
          if (v43 || *(_QWORD *)(v6 + 16) != 1)
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            v141 = *(_WORD *)(v5 + 24);
            v137 = *(_BYTE *)(v5 + 26);
            v45 = *(double *)(v3 + 16);
            v44 = *(double *)(v3 + 24);
            v46 = *(_WORD *)(v6 + 96);
            v47 = *(_BYTE *)(v6 + 98);
            v48 = *(_DWORD *)(v6 + 100);
            v49 = *(_OWORD *)(v6 + 48);
            v170 = *(_OWORD *)(v6 + 32);
            v171 = v49;
            v50 = *(_OWORD *)(v6 + 80);
            v172 = *(_OWORD *)(v6 + 64);
            v173 = v50;
            BYTE2(v174) = v47;
            LOWORD(v174) = v46;
            DWORD1(v174) = v48;
            swift_bridgeObjectRetain();
            DisplayList.Item.backdropFilter(size:)((uint64_t)&v150, v45, v44);
            if (v161 != 255)
            {
              v131 = *((_QWORD *)&v150 + 1);
              v134 = v150;
              *(_QWORD *)v126 = *((_QWORD *)&v151 + 1);
              *(_QWORD *)v128 = v151;
              *(_QWORD *)v122 = *((_QWORD *)&v152 + 1);
              *(_QWORD *)v124 = v152;
              v118 = (id)*((_QWORD *)&v153 + 1);
              *(_QWORD *)v120 = v153;
              v114 = v155;
              *(_QWORD *)v116 = v154;
              v51 = v158;
              v111 = v157;
              *(_QWORD *)v113 = v156;
              v145 = v14;
              v14 = v160 | ((unint64_t)v161 << 32);
              *(_QWORD *)v109 = HIDWORD(v14);
              v52 = v159;
              v53 = swift_allocObject();
              *(_QWORD *)(v53 + 16) = v134;
              *(_QWORD *)(v53 + 24) = v131;
              *(_QWORD *)(v53 + 32) = *(_QWORD *)v128;
              *(_QWORD *)(v53 + 40) = *(_QWORD *)v126;
              *(_QWORD *)(v53 + 48) = *(_QWORD *)v124;
              *(_QWORD *)(v53 + 56) = *(_QWORD *)v122;
              *(_QWORD *)(v53 + 64) = *(_QWORD *)v120;
              *(_QWORD *)(v53 + 72) = v118;
              *(_QWORD *)(v53 + 80) = *(_QWORD *)v116;
              *(_QWORD *)(v53 + 88) = v114;
              *(_QWORD *)(v53 + 96) = *(_QWORD *)v113;
              *(_QWORD *)(v53 + 104) = v111;
              *(_QWORD *)(v53 + 112) = v51;
              *(_QWORD *)(v53 + 120) = v52;
              *(_DWORD *)(v53 + 128) = v14;
              LOBYTE(v14) = v145;
              *(_BYTE *)(v53 + 132) = v109[0];
              outlined consume of DisplayList.Item.Value(v5, v4);
              result = (char *)swift_bridgeObjectRelease();
              *(_QWORD *)(v3 + 40) = v53;
              *(_QWORD *)(v3 + 48) = 0x4000000900000000;
              *(_QWORD *)(v3 + 56) = v42;
              *(_BYTE *)(v3 + 66) = v137;
              *(_WORD *)(v3 + 64) = v141;
              v15 = v7;
              goto LABEL_49;
            }
          }
          if (*(_QWORD *)(v42 + 16) == 1)
          {
            v83 = *(_WORD *)(v42 + 96);
            v84 = *(_BYTE *)(v42 + 98);
            v85 = *(_DWORD *)(v42 + 100);
            v86 = *(_OWORD *)(v42 + 48);
            v150 = *(_OWORD *)(v42 + 32);
            v151 = v86;
            v87 = *(_OWORD *)(v42 + 80);
            v152 = *(_OWORD *)(v42 + 64);
            v153 = v87;
            BYTE2(v154) = v84;
            LOWORD(v154) = v83;
            HIDWORD(v154) = v85;
            DisplayList.Item.opaqueContentPath()((uint64_t)&v170);
            swift_bridgeObjectRelease();
            outlined init with take of (Path, FillStyle)?((uint64_t)&v170, (uint64_t)&v150);
            v88 = (unsigned __int16)v152 | (BYTE2(v152) << 16);
            if ((v152 & 0xFF00) != 0x200)
            {
              *(_OWORD *)v143 = v150;
              v147 = v14;
              v139 = *((_QWORD *)&v151 + 1);
              v14 = v151;
              v89 = swift_allocObject();
              *(_OWORD *)(v89 + 16) = *(_OWORD *)v143;
              *(_QWORD *)(v89 + 32) = v14;
              LOBYTE(v14) = v147;
              *(_QWORD *)(v89 + 40) = v139;
              *(_BYTE *)(v89 + 48) = v88;
              *(_BYTE *)(v89 + 49) = BYTE1(v88) & 1;
              *(_BYTE *)(v89 + 50) = BYTE2(v88) & 1;
              *(_DWORD *)(v89 + 52) = v43;
              swift_bridgeObjectRetain();
              outlined retain of (Path, FillStyle)?((uint64_t)&v170, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of (Path, FillStyle)?);
              outlined consume of DisplayList.Item.Value(v5, v4);
              *(_QWORD *)(v3 + 40) = v89;
              *(_QWORD *)(v3 + 48) = 0x4000000600000000;
              *(_QWORD *)(v3 + 56) = v6;
              *(_BYTE *)(v3 + 66) = BYTE2(v7);
              *(_WORD *)(v3 + 64) = v7;
              LOBYTE(v162) = v2;
              DisplayList.Item.canonicalize(options:)(&v162);
              outlined retain of (Path, FillStyle)?((uint64_t)&v170, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of (Path, FillStyle)?);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          goto LABEL_84;
        case 8:
          if (*(_BYTE *)(v5 + 88))
            goto LABEL_48;
          v54 = *(_OWORD *)(v5 + 32);
          v150 = *(_OWORD *)(v5 + 16);
          v151 = v54;
          v152 = *(_OWORD *)(v5 + 48);
          v170 = 0x3FF0000000000000uLL;
          *(_QWORD *)&v171 = 0;
          *((_QWORD *)&v171 + 1) = 0x3FF0000000000000;
          v172 = 0uLL;
          if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
            goto LABEL_48;
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Item.Value(v5, v4);
          *(_OWORD *)(v3 + 40) = xmmword_23527E870;
          *(_QWORD *)(v3 + 56) = v6;
          *(_BYTE *)(v3 + 66) = BYTE2(v7);
          *(_WORD *)(v3 + 64) = v7;
          v162 = v6;
          v163 = v7;
          v164 = BYTE2(v7);
          v55 = &v162;
          goto LABEL_47;
        case 9:
          v149 = v7;
          v56 = *(_QWORD *)(v5 + 24);
          v57 = *(_QWORD *)(v5 + 40);
          v58 = *(_QWORD *)(v5 + 48);
          v59 = *(_QWORD *)(v5 + 56);
          v60 = *(_QWORD *)(v5 + 64);
          v61 = *(_QWORD *)(v5 + 72);
          v62 = *(_QWORD *)(v5 + 80);
          v63 = *(_QWORD *)(v5 + 88);
          v64 = *(_QWORD *)(v5 + 96);
          v65 = *(_QWORD *)(v5 + 104);
          v66 = *(_QWORD *)(v5 + 112);
          v67 = *(_QWORD *)(v5 + 120);
          v68 = *(_DWORD *)(v5 + 128);
          v69 = *(_BYTE *)(v5 + 132);
          v117 = *(void **)(v5 + 16);
          v119 = *(id *)(v5 + 32);
          *(_QWORD *)&v150 = v117;
          *((_QWORD *)&v150 + 1) = v56;
          *(_QWORD *)v146 = v56;
          *(_QWORD *)&v151 = v119;
          *((_QWORD *)&v151 + 1) = v57;
          v127 = v58;
          *(_QWORD *)v129 = v57;
          *(_QWORD *)&v152 = v58;
          *((_QWORD *)&v152 + 1) = v59;
          v123 = v60;
          v125 = v59;
          *(_QWORD *)&v153 = v60;
          *((_QWORD *)&v153 + 1) = v61;
          v121 = v61;
          v138 = v63;
          v142 = v62;
          v154 = v62;
          v155 = v63;
          v132 = v65;
          v135 = v64;
          v156 = v64;
          v157 = v65;
          v115 = v66;
          v158 = v66;
          v159 = v67;
          v70 = v67;
          v71 = v68;
          v160 = v68;
          v72 = v69;
          v161 = v69;
          v112 = v67;
          v110 = v68;
          if (GraphicsFilter.isIdentity.getter())
          {
            swift_bridgeObjectRetain();
            outlined copy of GraphicsFilter(v117, v146[0], v119, v129[0], v127, v125, v123, v121, v142, v138, v135, v132, v115, v70, v71, SBYTE2(v71));
            outlined consume of DisplayList.Item.Value(v5, v4);
            *(_OWORD *)(v3 + 40) = xmmword_23527E870;
            *(_QWORD *)(v3 + 56) = v6;
            *(_BYTE *)(v3 + 66) = BYTE2(v7);
            *(_WORD *)(v3 + 64) = v7;
            *(_QWORD *)&v150 = v6;
            WORD4(v150) = v7;
            BYTE10(v150) = BYTE2(v7);
            DisplayList.Item.canonicalizeIdentityEffect(list:)((uint64_t)&v150);
            v15 = v7;
            outlined consume of GraphicsFilter(v117, v146[0], v119, v129[0], v127, v125, v123, v121, v142, v138, v135, v132, v115, v112, v110, SBYTE2(v110));
LABEL_48:
            result = (char *)swift_bridgeObjectRelease();
          }
          else
          {
            *(_QWORD *)&v150 = v117;
            *((_QWORD *)&v150 + 1) = *(_QWORD *)v146;
            *(_QWORD *)&v151 = v119;
            *((_QWORD *)&v151 + 1) = *(_QWORD *)v129;
            *(_QWORD *)&v152 = v127;
            *((_QWORD *)&v152 + 1) = v125;
            *(_QWORD *)&v153 = v123;
            *((_QWORD *)&v153 + 1) = v121;
            v154 = v142;
            v155 = v138;
            v156 = v135;
            v157 = v132;
            v158 = v115;
            v159 = v70;
            v160 = v71;
            v161 = v72;
            outlined copy of GraphicsFilter(v117, v146[0], v119, v129[0], v127, v125, v123, v121, v142, v138, v135, v132, v115, v70, v71, SBYTE2(v71));
            outlined copy of GraphicsFilter(v117, v146[0], v119, v129[0], v127, v125, v123, v121, v142, v138, v135, v132, v115, v70, v71, SBYTE2(v71));
            specialized _ColorMatrix.init(_:premultiplied:)((uint64_t)&v150);
            outlined init with take of _ColorMatrix?((uint64_t)&v162, (uint64_t)&v170);
            if (v175 == 1
              || (v176[2] = v172,
                  v176[3] = v173,
                  v176[4] = v174,
                  v176[0] = v170,
                  v176[1] = v171,
                  *(_QWORD *)(v6 + 16) != 1))
            {
              outlined consume of GraphicsFilter(v117, v146[0], v119, v129[0], v127, v125, v123, v121, v142, v138, v135, v132, v115, v112, v110, SBYTE2(v110));
            }
            else
            {
              v93 = *(double *)(v3 + 16);
              v94 = *(double *)(v3 + 24);
              v95 = *(_WORD *)(v6 + 96);
              v96 = *(_BYTE *)(v6 + 98);
              v97 = *(_DWORD *)(v6 + 100);
              v98 = *(_OWORD *)(v6 + 48);
              v165 = *(_OWORD *)(v6 + 32);
              v166 = v98;
              v99 = *(_OWORD *)(v6 + 80);
              v167 = *(_OWORD *)(v6 + 64);
              v168 = v99;
              BYTE2(v169) = v96;
              LOWORD(v169) = v95;
              DWORD1(v169) = v97;
              DisplayList.Item.colorMatrix(size:)((uint64_t)&v150, v93, v94);
              outlined consume of GraphicsFilter(v117, v146[0], v119, v129[0], v127, v125, v123, v121, v142, v138, v135, v132, v115, v112, v110, SBYTE2(v110));
              v100 = v156;
              if (v156)
              {
                v101 = (unsigned __int16)v157 | (BYTE2(v157) << 16);
                v102 = swift_allocObject();
                specialized static _ColorMatrix.* infix(_:_:)(v176, &v150, (uint64_t)&v165, v103, v104, v105, v106);
                v107 = v166;
                *(_OWORD *)(v102 + 16) = v165;
                *(_OWORD *)(v102 + 32) = v107;
                v108 = v168;
                *(_OWORD *)(v102 + 48) = v167;
                *(_OWORD *)(v102 + 64) = v108;
                *(_OWORD *)(v102 + 80) = v169;
                *(_QWORD *)(v102 + 96) = 0;
                *(_BYTE *)(v102 + 132) = 4;
                outlined consume of DisplayList.Item.Value(v5, v4);
                result = (char *)swift_bridgeObjectRelease();
                *(_QWORD *)(v3 + 40) = v102;
                *(_QWORD *)(v3 + 48) = 0x4000000900000000;
                *(_QWORD *)(v3 + 56) = v100;
                *(_BYTE *)(v3 + 66) = BYTE2(v101);
                *(_WORD *)(v3 + 64) = v101;
                v15 = v7;
                goto LABEL_49;
              }
            }
LABEL_84:
            result = (char *)swift_bridgeObjectRelease();
            v15 = v149;
          }
LABEL_49:
          if ((v15 & 1) != 0)
            goto LABEL_55;
          switch(v14)
          {
            case 7u:
              if (*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16))
              {
                v74 = v5;
                v75 = v4;
                v76 = 7;
                return (char *)outlined consume of DisplayList.Effect(v74, v75, v76);
              }
              v73 = v3 + 64;
              outlined consume of DisplayList.Item.Value(*(_QWORD *)(v73 - 24), *(_QWORD *)(v73 - 16));
              v80 = v5;
              v81 = v4;
              v82 = 7;
              break;
            case 6u:
              v77 = *(_OWORD *)(v5 + 32);
              v177[0] = *(_OWORD *)(v5 + 16);
              v177[1] = v77;
              v178 = *(_BYTE *)(v5 + 48);
              outlined init with take of Path.Storage((uint64_t)v177, (uint64_t)v179);
              outlined retain of Path.Storage((uint64_t)v179, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
              Path.isEmpty.getter();
              v79 = v78;
              outlined retain of Path.Storage((uint64_t)v177, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
              if ((v79 & 1) == 0)
              {
                v74 = v5;
                v75 = v4;
                v76 = 6;
                return (char *)outlined consume of DisplayList.Effect(v74, v75, v76);
              }
              v73 = v3 + 64;
              outlined consume of DisplayList.Item.Value(*(_QWORD *)(v73 - 24), *(_QWORD *)(v73 - 16));
              v80 = v5;
              v81 = v4;
              v82 = 6;
              break;
            case 4u:
              if (*(float *)&v5 > 0.0)
                return result;
              v73 = v3 + 64;
              result = (char *)outlined consume of DisplayList.Item.Value(*(_QWORD *)(v73 - 24), *(_QWORD *)(v73 - 16));
              goto LABEL_82;
            default:
LABEL_55:
              v74 = v5;
              v75 = v4;
              v76 = v14;
              return (char *)outlined consume of DisplayList.Effect(v74, v75, v76);
          }
          result = (char *)outlined consume of DisplayList.Effect(v80, v81, v82);
LABEL_82:
          *(_OWORD *)(v73 - 24) = xmmword_23527E880;
          *(_QWORD *)(v73 - 8) = 0;
          *(_BYTE *)(v73 + 2) = 0;
          *(_WORD *)v73 = 0;
          return result;
        case 19:
          if (v5 || (_DWORD)v4)
            goto LABEL_48;
          *(_QWORD *)&v150 = v6;
          WORD4(v150) = v7;
          BYTE10(v150) = BYTE2(v7);
LABEL_46:
          v55 = (uint64_t *)&v150;
LABEL_47:
          DisplayList.Item.canonicalizeIdentityEffect(list:)((uint64_t)v55);
          goto LABEL_48;
        default:
          goto LABEL_48;
      }
    }
  }
  return result;
}

uint64_t DisplayList.Item.canonicalizeIdentityEffect(list:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16) == 1)
  {
    v3 = *(_OWORD *)(v2 + 48);
    v4 = *(_QWORD *)(v2 + 64);
    v5 = *(_QWORD *)(v2 + 72);
    v6 = *(_QWORD *)(v2 + 80);
    v7 = *(_QWORD *)(v2 + 88);
    v8 = *(_BYTE *)(v2 + 98);
    v9 = *(_WORD *)(v2 + 96);
    v13 = *(_DWORD *)(v2 + 100);
    *(float64x2_t *)v1 = vaddq_f64(*(float64x2_t *)(v2 + 32), *(float64x2_t *)v1);
    *(_OWORD *)(v1 + 16) = v3;
    v10 = *(_QWORD *)(v1 + 32);
    v12 = *(_QWORD *)(v1 + 40);
    if (v4 > v10)
      v10 = v4;
    *(_QWORD *)(v1 + 32) = v10;
    v11 = *(_QWORD *)(v1 + 48);
    outlined copy of DisplayList.Item.Value(v5, v6);
    result = outlined consume of DisplayList.Item.Value(v12, v11);
    *(_QWORD *)(v1 + 40) = v5;
    *(_QWORD *)(v1 + 48) = v6;
    *(_QWORD *)(v1 + 56) = v7;
    *(_BYTE *)(v1 + 66) = v8;
    *(_WORD *)(v1 + 64) = v9;
    if (v13)
      *(_DWORD *)(v1 + 68) = v13;
  }
  return result;
}

void DisplayList.opaqueContentPath()(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  int v5;
  _OWORD v6[2];
  unsigned __int16 v7;
  unsigned __int8 v8;

  if (*(_QWORD *)(*(_QWORD *)v1 + 16) == 1)
  {
    DisplayList.Item.opaqueContentPath()((uint64_t)v6);
    v3 = v6[0];
    v4 = v6[1];
    v5 = v7 | (v8 << 16);
  }
  else
  {
    v3 = 0uLL;
    v5 = 512;
    v4 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 34) = BYTE2(v5);
}

void DisplayList.Item.matchesTopLevelStructure(of:)()
{
  __asm { BR              X10 }
}

BOOL sub_234A13154()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t EnumTag;
  uint64_t v5;

  outlined copy of DisplayList.Item.Value(v3, v2);
  if (v0 >> 62)
  {
    outlined copy of DisplayList.Item.Value(v1, v0);
    outlined consume of DisplayList.Item.Value(v3, v2);
    outlined consume of DisplayList.Item.Value(v1, v0);
    return 0;
  }
  else
  {
    outlined copy of DisplayList.Item.Value(v3, v2);
    outlined copy of DisplayList.Item.Value(v1, v0);
    outlined copy of DisplayList.Item.Value(v3, v2);
    outlined copy of DisplayList.Item.Value(v1, v0);
    outlined copy of DisplayList.Item.Value(v3, v2);
    outlined copy of DisplayList.Item.Value(v1, v0);
    EnumTag = AGTypeGetEnumTag();
    outlined consume of DisplayList.Content.Value(v3);
    outlined copy of DisplayList.Content.Value(v1);
    v5 = AGTypeGetEnumTag();
    outlined consume of DisplayList.Content.Value(v1);
    outlined consume of DisplayList.Item.Value(v3, v2);
    outlined consume of DisplayList.Item.Value(v1, v0);
    outlined consume of DisplayList.Item.Value(v1, v0);
    outlined consume of DisplayList.Item.Value(v3, v2);
    outlined consume of DisplayList.Item.Value(v1, v0);
    outlined consume of DisplayList.Item.Value(v3, v2);
    return EnumTag == v5;
  }
}

void DisplayList.Item.opaqueContentPath()(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  CGFloat v7;
  CGFloat v8;
  BOOL IsNull;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  _QWORD v26[4];
  unsigned __int8 v27;
  CGAffineTransform v28;
  _OWORD v29[2];
  unsigned __int8 v30;
  CGRect v31;

  v3 = *(_QWORD *)(v1 + 48);
  if (v3 >> 62)
    goto LABEL_26;
  v5 = *(double *)v1;
  v4 = *(double *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 40);
  if (v6 >> 60 != 4)
  {
    if (v6 >> 60 == 1 && *(float *)(v6 + 28) == 1.0)
    {
      v7 = *(double *)(v1 + 16);
      v8 = *(double *)(v1 + 24);
      v31.origin.x = *(CGFloat *)v1;
      v31.origin.y = *(CGFloat *)(v1 + 8);
      v31.size.width = v7;
      v31.size.height = v8;
      IsNull = CGRectIsNull(v31);
      if (IsNull)
        v10 = 0.0;
      else
        v10 = v5;
      if (IsNull)
        v11 = 0.0;
      else
        v11 = v4;
      if (IsNull)
        v12 = 0.0;
      else
        v12 = v7;
      if (IsNull)
        v13 = 0.0;
      else
        v13 = v8;
      if (IsNull)
        v14 = 6;
      else
        v14 = 0;
      v15 = v14 | 0x10000;
      goto LABEL_27;
    }
LABEL_26:
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v15 = 512;
    goto LABEL_27;
  }
  v16 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  v17 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  v30 = *(_BYTE *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
  v29[0] = v16;
  v29[1] = v17;
  v10 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  v11 = *(double *)(v6 + 24);
  v12 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  v13 = *(double *)(v6 + 40);
  v22 = v30;
  v23 = *(unsigned __int8 *)(v6 + 64);
  v24 = *(unsigned __int8 *)(v6 + 65);
  v25 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v6 + 56) + 104);
  outlined copy of DisplayList.Item.Value(v6, v3);
  outlined copy of DisplayList.Item.Value(v6, v3);
  outlined retain of Path.Storage((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  v18 = swift_retain();
  if ((v25(v18) & 1) == 0)
  {
    outlined consume of DisplayList.Item.Value(v6, v3);
    swift_release();
    outlined retain of Path.Storage((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    outlined consume of DisplayList.Item.Value(v6, v3);
    goto LABEL_26;
  }
  if (v5 == 0.0 && v4 == 0.0)
  {
    outlined retain of Path.Storage((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v19 = v22;
  }
  else
  {
    CGAffineTransformMakeTranslation(&v28, v5, v4);
    Path.applying(_:)(&v28.a, (uint64_t)v26);
    v10 = *(double *)v26;
    v11 = *(double *)&v26[1];
    v12 = *(double *)&v26[2];
    v13 = *(double *)&v26[3];
    v19 = v27;
  }
  outlined consume of DisplayList.Item.Value(v6, v3);
  swift_release();
  outlined retain of Path.Storage((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  outlined consume of DisplayList.Item.Value(v6, v3);
  if (v23)
    v20 = 256;
  else
    v20 = 0;
  if (v24)
    v21 = 0x10000;
  else
    v21 = 0;
  v15 = v21 | v20 | v19;
LABEL_27:
  *(double *)a1 = v10;
  *(double *)(a1 + 8) = v11;
  *(CGFloat *)(a1 + 16) = v12;
  *(CGFloat *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 34) = BYTE2(v15);
  *(_WORD *)(a1 + 32) = v15;
}

uint64_t DisplayList.Item.paint(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  unint64_t v5;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 IsNull;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  v5 = *(_QWORD *)(v4 + 48);
  if (v5 >> 62)
    return 0;
  v11 = *(double *)v4;
  v10 = *(double *)(v4 + 8);
  v13 = *(double *)(v4 + 16);
  v12 = *(double *)(v4 + 24);
  v14 = *(_QWORD *)(v4 + 40);
  if (v14 >> 60 == 4)
  {
    outlined init with take of Path.Storage((v14 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v25);
    v15 = *(_QWORD *)(v14 + 56);
    outlined copy of DisplayList.Item.Value(v14, v5);
    outlined copy of DisplayList.Item.Value(v14, v5);
    outlined retain of Path.Storage((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    swift_retain();
    v31.origin.x = a1;
    v31.origin.y = a2;
    v31.size.width = a3;
    v31.size.height = a4;
    v33.origin.x = v11;
    v33.origin.y = v10;
    v33.size.width = v13;
    v33.size.height = v12;
    if (CGRectEqualToRect(v31, v33))
    {
      v32.origin.x = 0.0;
      v32.origin.y = 0.0;
      v32.size.width = a3;
      v32.size.height = a4;
      IsNull = CGRectIsNull(v32);
      if (IsNull)
        v17 = 0;
      else
        v17 = *(_QWORD *)&a3;
      if (IsNull)
        v18 = 0;
      else
        v18 = *(_QWORD *)&a4;
      v26 = 0;
      v27 = 0;
      v28 = v17;
      v29 = v18;
      if (IsNull)
        v19 = 6;
      else
        v19 = 0;
      v30 = v19;
      specialized static Path.Storage.== infix(_:_:)((uint64_t)v25);
      v21 = v20;
      outlined consume of DisplayList.Item.Value(v14, v5);
      outlined retain of Path.Storage((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      outlined consume of Path.Storage(0, 0, v17, v18, v19);
      if ((v21 & 1) != 0)
      {
        outlined consume of DisplayList.Item.Value(v14, v5);
        return v15;
      }
      swift_release();
    }
    else
    {
      outlined consume of DisplayList.Item.Value(v14, v5);
      swift_release();
      outlined retain of Path.Storage((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    }
    outlined consume of DisplayList.Item.Value(v14, v5);
    return 0;
  }
  if (v14 >> 60 != 1)
    return 0;
  v23 = *(_QWORD *)(v14 + 24);
  v24 = *(_QWORD *)(v14 + 16);
  if (!CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)v4))
    return 0;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = v23;
  return v15;
}

void DisplayList.Item.colorMatrix(size:)(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD v47[10];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  _QWORD v54[12];
  CGRect v55;
  CGRect v56;

  v56.size.height = a3;
  v56.size.width = a2;
  v55 = *(CGRect *)v3;
  v6 = *(_QWORD *)(v3 + 40);
  v5 = *(_QWORD *)(v3 + 48);
  v7 = *(_QWORD *)(v3 + 56);
  v8 = *(unsigned __int8 *)(v3 + 66);
  v9 = *(unsigned __int16 *)(v3 + 64);
  v56.origin.x = 0.0;
  v56.origin.y = 0.0;
  if (CGRectEqualToRect(v55, v56) && v5 >> 62 == 1 && (v5 & 0xFF00000000) == 0x900000000)
  {
    v37 = v8;
    v38 = v7;
    v12 = *(void **)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v13 = *(void **)(v6 + 32);
    v14 = *(_QWORD *)(v6 + 40);
    v15 = *(_QWORD *)(v6 + 48);
    v16 = *(_QWORD *)(v6 + 56);
    v17 = *(_QWORD *)(v6 + 64);
    v18 = *(_QWORD *)(v6 + 72);
    v19 = *(_QWORD *)(v6 + 80);
    v20 = *(_QWORD *)(v6 + 88);
    v21 = *(_QWORD *)(v6 + 96);
    v22 = *(_QWORD *)(v6 + 104);
    v24 = *(_QWORD *)(v6 + 112);
    v23 = *(_QWORD *)(v6 + 120);
    v25 = *(_DWORD *)(v6 + 128);
    v26 = *(_BYTE *)(v6 + 132);
    v46 = v12;
    v47[0] = v12;
    v39 = v11;
    v40 = v13;
    v47[1] = v11;
    v47[2] = v13;
    v42 = v14;
    v43 = v15;
    v47[3] = v14;
    v47[4] = v15;
    v44 = v16;
    v45 = v17;
    v47[5] = v16;
    v47[6] = v17;
    v41 = v18;
    v47[7] = v18;
    v47[8] = v19;
    v47[9] = v20;
    v48 = v21;
    v49 = v22;
    v50 = v24;
    v51 = v23;
    v52 = v25;
    v53 = v26;
    outlined copy of GraphicsFilter(v12, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
    outlined copy of GraphicsFilter(v46, v39, v40, v42, v43, v44, v45, v41, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
    specialized _ColorMatrix.init(_:premultiplied:)((uint64_t)v47);
    v35 = v54[1];
    v36 = v54[0];
    v33 = v54[3];
    v34 = v54[2];
    v31 = v54[5];
    v32 = v54[4];
    v29 = v54[7];
    v30 = v54[6];
    v27 = v54[9];
    v28 = v54[8];
    outlined init with take of _ColorMatrix?((uint64_t)v54, (uint64_t)v47);
    if ((v48 & 1) == 0)
    {
      *(_QWORD *)a1 = v36;
      *(_QWORD *)(a1 + 8) = v35;
      *(_QWORD *)(a1 + 16) = v34;
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v32;
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)(a1 + 48) = v30;
      *(_QWORD *)(a1 + 56) = v29;
      *(_QWORD *)(a1 + 64) = v28;
      *(_QWORD *)(a1 + 72) = v27;
      *(_QWORD *)(a1 + 80) = v38;
      *(_WORD *)(a1 + 88) = v9;
      *(_BYTE *)(a1 + 90) = (v9 | (v37 << 16)) >> 16;
      swift_bridgeObjectRetain();
      outlined consume of GraphicsFilter(v46, v39, v40, v42, v43, v44, v45, v41, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
      return;
    }
    outlined consume of GraphicsFilter(v46, v39, v40, v42, v43, v44, v45, v41, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
  }
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
}

void DisplayList.Item.backdropFilter(size:)(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[5];
  double *v20;
  CGRect v21;
  CGRect v22;

  DisplayList.Item.colorMatrix(size:)((uint64_t)v19, a2, a3);
  if (!v20)
    goto LABEL_10;
  if (*((_QWORD *)v20 + 2) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v17 = v19[3];
  v18 = v19[4];
  v15 = v19[1];
  v16 = v19[2];
  v14 = v19[0];
  v6 = v20[4];
  v7 = v20[5];
  v8 = v20[6];
  v9 = v20[7];
  v11 = *((_QWORD *)v20 + 9);
  v10 = *((_QWORD *)v20 + 10);
  outlined copy of DisplayList.Item.Value(v11, v10);
  swift_bridgeObjectRelease();
  v22.origin.x = 0.0;
  v22.origin.y = 0.0;
  v21.origin.x = v6;
  v21.origin.y = v7;
  v21.size.width = v8;
  v21.size.height = v9;
  v22.size.width = a2;
  v22.size.height = a3;
  if (!CGRectEqualToRect(v21, v22) || v10 >> 62 || v11 >> 60)
  {
    outlined consume of DisplayList.Item.Value(v11, v10);
    goto LABEL_10;
  }
  v12 = *(float *)(v11 + 32);
  outlined consume of DisplayList.Item.Value(v11, v10);
  if (v12 != 0.0)
  {
LABEL_10:
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_DWORD *)(a1 + 112) = 0;
    v13 = -1;
    goto LABEL_11;
  }
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = v18;
  *(_DWORD *)(a1 + 112) = 0;
  v13 = 12;
LABEL_11:
  *(_BYTE *)(a1 + 116) = v13;
}

uint64_t DisplayList.Item.composite(_:above:)(uint64_t result, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  double v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  double *v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v42;
  uint64_t v43;
  __int16 v44;
  char v45;
  _QWORD *v46;

  v4 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(result + 48);
  v5 = *(_QWORD *)(result + 56);
  v6 = *(unsigned __int16 *)(result + 64) | (*(unsigned __int8 *)(result + 66) << 16);
  if (v3 >> 62 != 3 || (v6 & 0xFFFFFF) != 0 || v3 != 0xC000000000000000 || (v5 | v4) != 0)
  {
    v10 = v2;
    v12 = *(double *)result;
    v11 = *(double *)(result + 8);
    v14 = *(_QWORD *)(result + 16);
    v13 = *(_QWORD *)(result + 24);
    v15 = *(_QWORD *)(result + 32);
    v17 = *(_QWORD *)(v2 + 40);
    v16 = *(_QWORD *)(v2 + 48);
    v18 = *(_QWORD *)(v2 + 56);
    v42 = *(unsigned __int16 *)(v2 + 64) | (*(unsigned __int8 *)(v2 + 66) << 16);
    if (v16 >> 62 == 3 && (v42 & 0xFFFFFF) == 0 && v16 == 0xC000000000000000 && !(v18 | v17))
    {
      v19 = *(_DWORD *)(result + 68);
      *(double *)v2 = v12;
      *(double *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v14;
      *(_QWORD *)(v2 + 24) = v13;
      *(_QWORD *)(v2 + 32) = v15;
      *(_QWORD *)(v2 + 40) = v4;
      *(_QWORD *)(v2 + 48) = v3;
      *(_QWORD *)(v2 + 56) = v5;
      *(_WORD *)(v2 + 64) = v6;
      *(_BYTE *)(v2 + 66) = BYTE2(v6);
      *(_DWORD *)(v2 + 68) = v19;
      return outlined copy of DisplayList.Item.Value(v4, v3);
    }
    v39 = *(_QWORD *)(result + 32);
    v20 = v12 - *(double *)v2;
    v21 = v11 - *(double *)(v2 + 8);
    v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
    outlined copy of DisplayList.Item.Value(v4, v3);
    v40 = v17;
    if ((a2 & 1) == 0)
    {
      outlined copy of DisplayList.Item.Value(v4, v3);
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v24 = v22[2];
      v23 = v22[3];
      if (v24 >= v23 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
      v22[2] = v24 + 1;
      v25 = (double *)&v22[9 * v24];
      v25[4] = v20;
      v25[5] = v21;
      *((_QWORD *)v25 + 6) = v14;
      *((_QWORD *)v25 + 7) = v13;
      v17 = v40;
      *((_QWORD *)v25 + 8) = v39;
      *((_QWORD *)v25 + 9) = v4;
      *((_QWORD *)v25 + 10) = v3;
      *((_QWORD *)v25 + 11) = v5;
      *((_BYTE *)v25 + 98) = BYTE2(v6);
      *((_WORD *)v25 + 48) = v6;
      *((_DWORD *)v25 + 25) = 0;
      v46 = v22;
    }
    if (v16 >> 62 == 1)
    {
      if (BYTE4(v16) == 19 && !v17 && !(_DWORD)v16)
      {
        outlined copy of DisplayList.Effect(0, 0, 19);
        v26 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v26);
        v22 = v46;
        if ((a2 & 1) == 0)
        {
LABEL_37:
          DisplayList.init(_:)(v22, (uint64_t)&v43);
          outlined consume of DisplayList.Item.Value(v4, v3);
          result = outlined consume of DisplayList.Item.Value(v17, v16);
          v36 = v43;
          v37 = v44;
          v38 = v45;
          *(_OWORD *)(v10 + 40) = xmmword_23527E870;
          *(_QWORD *)(v10 + 56) = v36;
          *(_BYTE *)(v10 + 66) = v38;
          *(_WORD *)(v10 + 64) = v37;
          return result;
        }
LABEL_32:
        outlined copy of DisplayList.Item.Value(v4, v3);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        v34 = v22[2];
        v33 = v22[3];
        if (v34 >= v33 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v22);
        v22[2] = v34 + 1;
        v35 = (double *)&v22[9 * v34];
        v35[4] = v20;
        v35[5] = v21;
        *((_QWORD *)v35 + 6) = v14;
        *((_QWORD *)v35 + 7) = v13;
        *((_QWORD *)v35 + 8) = v39;
        *((_QWORD *)v35 + 9) = v4;
        *((_QWORD *)v35 + 10) = v3;
        *((_QWORD *)v35 + 11) = v5;
        *((_BYTE *)v35 + 98) = BYTE2(v6);
        *((_WORD *)v35 + 48) = v6;
        *((_DWORD *)v35 + 25) = 0;
        v46 = v22;
        goto LABEL_37;
      }
      outlined copy of DisplayList.Effect(v17, v16, SBYTE4(v16));
      swift_bridgeObjectRetain();
      outlined consume of DisplayList.Effect(v17, v16, SBYTE4(v16));
      swift_bridgeObjectRelease();
    }
    v27 = *(_QWORD *)(v10 + 16);
    v28 = *(_QWORD *)(v10 + 24);
    v29 = *(_QWORD *)(v10 + 32);
    outlined copy of DisplayList.Item.Value(v17, v16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    v31 = v22[2];
    v30 = v22[3];
    if (v31 >= v30 >> 1)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v22);
    v22[2] = v31 + 1;
    v32 = &v22[9 * v31];
    v32[4] = 0;
    v32[5] = 0;
    v32[6] = v27;
    v32[7] = v28;
    v17 = v40;
    v32[8] = v29;
    v32[9] = v40;
    v32[10] = v16;
    v32[11] = v18;
    *((_BYTE *)v32 + 98) = BYTE2(v42);
    *((_WORD *)v32 + 48) = v42;
    *((_DWORD *)v32 + 25) = 0;
    v46 = v22;
    if ((a2 & 1) == 0)
      goto LABEL_37;
    goto LABEL_32;
  }
  return result;
}

unsigned __int16 *DisplayList.Item.addDrawingGroup(contentSeed:)(unsigned __int16 *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  CGSize v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL4 IsNull;
  double height;
  double x;
  double y;
  double width;
  CGFloat v23;
  CGFloat v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  CGRect v37;
  CGRect v38;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
  if (v3 >> 62 != 3 || (v5 & 0xFFFFFF) != 0 || v3 != 0xC000000000000000 || (v4 | v2) != 0)
  {
    v9 = v1;
    v10 = *result;
    v11 = *(CGSize *)(MEMORY[0x24BDBF070] + 16);
    v37.origin = (CGPoint)*MEMORY[0x24BDBF070];
    v37.size = v11;
    v12 = *(double *)v1;
    v13 = *(double *)(v1 + 8);
    v14 = *(_QWORD *)(v1 + 16);
    v15 = *(_QWORD *)(v1 + 24);
    v16 = *(_QWORD *)(v1 + 32);
    v17 = *(_DWORD *)(v1 + 68);
    v26 = *(double *)v1;
    v27 = v13;
    v28 = v14;
    v29 = v15;
    v30 = v16;
    v31 = v2;
    v32 = v3;
    v33 = v4;
    v35 = BYTE2(v5);
    v34 = v5;
    v36 = v17;
    DisplayList.Item.addExtent(to:)();
    IsNull = CGRectIsNull(v37);
    height = 0.0;
    if (IsNull)
      x = 0.0;
    else
      x = v37.origin.x;
    if (IsNull)
      y = 0.0;
    else
      y = v37.origin.y;
    if (IsNull)
      width = 0.0;
    else
      width = v37.size.width;
    if (!IsNull)
      height = v37.size.height;
    v38 = CGRectIntegral(*(CGRect *)(&height - 3));
    v23 = v38.origin.x - v12;
    *(CGRect *)v1 = v38;
    v24 = v38.origin.y - v13;
    v25 = swift_allocObject();
    v26 = 0.0;
    v27 = 0.0;
    v28 = v14;
    v29 = v15;
    v30 = v16;
    v31 = v2;
    v32 = v3;
    v33 = v4;
    v35 = BYTE2(v5);
    v34 = v5;
    v36 = 0;
    outlined copy of DisplayList.Item.Value(v2, v3);
    DisplayList.init(_:)((uint64_t *)&v26, v25 + 16);
    *(CGFloat *)(v25 + 32) = v23;
    *(CGFloat *)(v25 + 40) = v24;
    *(_BYTE *)(v25 + 48) = 0;
    *(_DWORD *)(v25 + 52) = 0;
    *(_BYTE *)(v25 + 56) = 1;
    *(_DWORD *)(v25 + 60) = 161;
    *(_BYTE *)(v25 + 64) = 3;
    result = (unsigned __int16 *)outlined consume of DisplayList.Item.Value(v2, v3);
    *(_QWORD *)(v9 + 40) = v25 | 0x9000000000000000;
    *(_QWORD *)(v9 + 48) = v10;
    *(_QWORD *)(v9 + 56) = 0;
    *(_BYTE *)(v9 + 66) = 0;
    *(_WORD *)(v9 + 64) = 0;
  }
  return result;
}

void DisplayList.Item.addExtent(to:)()
{
  __asm { BR              X10 }
}

double DisplayList.extent.getter()
{
  uint64_t *v0;
  uint64_t v1;
  double result;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v1 = *v0;
  result = *MEMORY[0x24BDBF070];
  v5 = *MEMORY[0x24BDBF070];
  v3 = *(_QWORD *)(*v0 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v1 + 100;
    do
    {
      DisplayList.Item.addExtent(to:)();
      v4 += 72;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t DisplayList.Content.Value.caseName.getter()
{
  _QWORD *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234A14BF8 + 4 * byte_23527E935[*v0 >> 60]))(0x706F72646B636162, 0xE800000000000000);
}

uint64_t sub_234A14BF8()
{
  return 0x726F6C6F63;
}

uint64_t sub_234A14C0C()
{
  return 0x6F656C656D616863;
}

uint64_t sub_234A14C30()
{
  return 0x6570616873;
}

uint64_t sub_234A14C44()
{
  return 0x776F64616873;
}

uint64_t sub_234A14C58()
{
  return 0x6D726F6674616C70;
}

uint64_t sub_234A14C8C()
{
  return 1954047348;
}

uint64_t sub_234A14C9C()
{
  return 0x656E657474616C66;
}

uint64_t sub_234A14CB8()
{
  return 0x676E6977617264;
}

uint64_t sub_234A14CD0()
{
  return 2003134838;
}

uint64_t sub_234A14CE0()
{
  return 0x6C6F686563616C70;
}

void DisplayList.Transform.affineTransform.getter()
{
  __asm { BR              X12 }
}

void sub_234A14D58(__int128 a1, __int128 a2, __int128 a3, CGAffineTransform *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v17 = *(_QWORD *)(v13 + 40);
  v18 = *(_OWORD *)(v13 + 24);
  *(_QWORD *)v12 = v16;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 24) = v18;
  *(_QWORD *)(v12 + 40) = v17;
  *(_BYTE *)(v12 + 48) = 0;
}

void DisplayList.Transform.projectionTransform.getter()
{
  __asm { BR              X2 }
}

void sub_234A14E50()
{
  uint64_t v0;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  uint64_t v2;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyTrackedValue>, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue, (uint64_t)&protocol descriptor for AnyTrackedValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<DynamicViewList<AnyView>.Item>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<DynamicViewList<AnyView>.Item>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_SublistTransform_Item>, &lazy cache variable for type metadata for _ViewList_SublistTransform_Item, (uint64_t)&protocol descriptor for _ViewList_SublistTransform_Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewListOutputs>, (uint64_t)&type metadata for _ViewListOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<CachedEnvironment.Item>, (uint64_t)&type metadata for CachedEnvironment.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<GraphMutation>, &lazy cache variable for type metadata for GraphMutation, (uint64_t)&protocol descriptor for GraphMutation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyViewTrait>, &lazy cache variable for type metadata for AnyViewTrait, (uint64_t)&protocol descriptor for AnyViewTrait);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Effect>, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyPreferenceKey.Type>, (unint64_t *)&lazy cache variable for type metadata for AnyPreferenceKey.Type, &lazy cache variable for type metadata for AnyPreferenceKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UniqueID>, (uint64_t)&type metadata for UniqueID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x24BEE0940]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Explicit>, (uint64_t)&type metadata for _ViewList_ID.Explicit);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<ViewGraph>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<ViewGraph>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<()>, (uint64_t (*)(uint64_t))type metadata accessor for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<GraphHost>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<GraphHost>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollStateRequest>, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs.KeyValue>, (uint64_t)&type metadata for PreferencesOutputs.KeyValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradientVector.Stop>, (uint64_t)&type metadata for ResolvedGradientVector.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ShaderVectorData.Element>, (uint64_t)&type metadata for ShaderVectorData.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Modifier>, (uint64_t)&type metadata for Text.Modifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.ResolvedProperties.Transition>, (uint64_t)&type metadata for Text.ResolvedProperties.Transition);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UnsafeRawPointer>, MEMORY[0x24BEE0F60]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityText>, (uint64_t)&type metadata for AccessibilityText);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAttributedString.Range>, (uint64_t)&type metadata for CodableAttributedString.Range, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for MutableBox<CachedEnvironment>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsFilter>, (uint64_t)&type metadata for GraphicsFilter);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedStyledText.TextLayoutManager.Cache.Entry>, (uint64_t)&type metadata for ResolvedStyledText.TextLayoutManager.Cache.Entry, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for MutableBox<CachedEnvironment>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CGSize, NSAttributedString.Metrics)>, (uint64_t)type metadata accessor for (CGSize, NSAttributedString.Metrics), (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for [(_:)]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Effect>, (uint64_t)&type metadata for DisplayList.Effect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<SmallTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.GlyphIndex>, (uint64_t)&type metadata for Text.Effect.GlyphIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Glyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Glyph);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, (uint64_t)&protocol descriptor for ScrollableCollection);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.CharacterIndex>, (uint64_t)&type metadata for Text.Layout.CharacterIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.VisualOrderCollection.Run>, (uint64_t)&type metadata for Text.Effect.VisualOrderCollection.Run);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.KeyframeSequence.Entry>, (uint64_t)&type metadata for Text.Effect.KeyframeSequence.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.ClusterIndex>, (uint64_t)&type metadata for Text.Effect.ClusterIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<BigTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<BloomTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MatchedGeometryScope.Frame>, (uint64_t)&type metadata for MatchedGeometryScope.Frame);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopSegment>, (uint64_t)&type metadata for Text.Effect.StopSegment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect.Identified>, (uint64_t)&type metadata for _SymbolEffect.Identified);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect.Added>, (uint64_t)&type metadata for _SymbolEffect.Added, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for MutableBox<CachedEnvironment>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, (uint64_t)&type metadata for AccessibilityCustomContentEntry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<(range: _NSRange, attributes: [NSAttributedStringKey : Any])>, (uint64_t)type metadata accessor for (range: _NSRange, attributes: [NSAttributedStringKey : Any]), (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for [(_:)], (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(String, String)>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AlignmentID.Type>, &lazy cache variable for type metadata for AlignmentID.Type, &lazy cache variable for type metadata for AlignmentID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewDebug.Data>, (uint64_t)&type metadata for _ViewDebug.Data);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AsyncTransaction>, (uint64_t)&type metadata for AsyncTransaction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<Double>.Fork>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_InterpolatorGroup.Layer>, (uint64_t)&type metadata for _ShapeStyle_InterpolatorGroup.Layer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 224);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[28 * v8 + 4])
          memmove(v12, a4 + 4, 224 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.InterpolatorLayer.Removed>, (uint64_t)&type metadata for DisplayList.InterpolatorLayer.Removed, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Substring>, MEMORY[0x24BEE1E08], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyPreferenceKey.Type, AGAttribute)>, (uint64_t (*)(uint64_t))type metadata accessor for (AnyPreferenceKey.Type, AGAttribute), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.LayoutKey.AnchoredLayout>, (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollGeometryState>, (uint64_t)&type metadata for ScrollGeometryState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, (uint64_t)&type metadata for ScrollPhaseState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(Float, Float)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4])
          memmove(v12, a4 + 4, 120 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MeshGradient.BezierPoint>, (uint64_t)&type metadata for MeshGradient.BezierPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<SIMD2<Float>>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Color.Resolved>, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.ViewUpdater.ViewCache.PendingAsyncValue>, (uint64_t)&type metadata for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Style>, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(views: _ViewList_ID_Views, endOffset: Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (views: _ViewList_ID_Views, endOffset: Int), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollableCollectionSubview>, (uint64_t)&type metadata for ScrollableCollectionSubview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSCalendarUnit>, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<StackLayout.Child>, (uint64_t)&type metadata for StackLayout.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4])
          memmove(v12, a4 + 4, 120 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ViewGeometry>, (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Chunk>, (uint64_t)&type metadata for Text.Effect.Chunk, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.GlyphTiming>, (uint64_t)&type metadata for Text.Effect.Timing.GlyphTiming, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.GlyphInfo>, (uint64_t)&type metadata for Text.Effect.Timing.GlyphInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.Fragment>, (uint64_t)&type metadata for Text.Effect.Timing.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollection.Segment>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollection.Segment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.SmoothPathGlyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.SmoothPathGlyph, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Cluster>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Cluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DisplayInfo.DrawOperation>, (uint64_t)&type metadata for Text.Effect.DisplayInfo.DrawOperation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 216);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[27 * v8 + 4])
          memmove(v12, a4 + 4, 216 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsContext.ResolvedShading>, (uint64_t)&type metadata for GraphicsContext.ResolvedShading, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4])
          memmove(v12, a4 + 4, 160 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<EventID>, (uint64_t)&type metadata for EventID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewDebug.Data.SerializedProperty>, (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4])
          memmove(v12, a4 + 4, 104 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<HostPreferencesCombiner.Child>, (uint64_t)&type metadata for HostPreferencesCombiner.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<RawTextLayout.Fragment>, (uint64_t)&type metadata for RawTextLayout.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Markers.Marker>, (uint64_t)&type metadata for Text.Effect.Markers.Marker, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.MarkerLayoutInfo.Element>, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Segment>, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.ResolvedDrawing.Operation>, (uint64_t)&type metadata for Text.Effect.ResolvedDrawing.Operation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Cluster>, (uint64_t)&type metadata for Text.Layout.Cluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.InteractionMetrics.Element>, (uint64_t)&type metadata for Text.Effect.InteractionMetrics.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TextRenderLayer.SegmentLayer>, (uint64_t)&type metadata for TextRenderLayer.SegmentLayer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Composition.Run>, (uint64_t)&type metadata for Text.Effect.Composition.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DelayFunction.Element>, (uint64_t)&type metadata for Text.Effect.DelayFunction.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, RBDisplayListContents)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, RBDisplayListContents), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Stop>, (uint64_t)&type metadata for Text.Effect.Stop, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4, (uint64_t)&lazy cache variable for type metadata for (StrongHash, DisplayList), (uint64_t)&type metadata for StrongHash, (uint64_t)&type metadata for DisplayList, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (Path, FillStyle));
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.Chunk.Fragment>, (uint64_t)&type metadata for Text.Effect.Timing.Chunk.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>, (uint64_t (*)(uint64_t))type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>>, (uint64_t (*)(uint64_t))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.ClusterTransformMap.Element>, (uint64_t)&type metadata for Text.Effect.ClusterTransformMap.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TextSizeCache.Entry>, (uint64_t)&type metadata for TextSizeCache.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.SubcomponentKeyPath>, (uint64_t)&type metadata for Text.Effect.SubcomponentKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutGestureBox.Child>, (uint64_t)&type metadata for LayoutGestureBox.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[26 * v8 + 4])
          memmove(v12, a4 + 4, 208 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DynamicPropertyCache.Field>, (uint64_t)&type metadata for DynamicPropertyCache.Field, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DynamicPropertyCache.TaggedFields>, (uint64_t)&type metadata for DynamicPropertyCache.TaggedFields, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4])
          memmove(v12, a4 + 4, 120 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewOutputs>, (uint64_t)&type metadata for _ViewOutputs, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutProxyAttributes>, (uint64_t)&type metadata for LayoutProxyAttributes, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(ScrapeableContent, Int)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SummaryPlacement>, (uint64_t)&type metadata for SummaryPlacement, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.ViewUpdater.Model.Clip>, (uint64_t)&type metadata for DisplayList.ViewUpdater.Model.Clip, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GlobalTransaction>, (uint64_t)&type metadata for GlobalTransaction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityActivationPoint>, (uint64_t)&type metadata for AccessibilityActivationPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimationPath<Double>.Element>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<Path?>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4, (uint64_t)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path, (uint64_t)MEMORY[0x24BEE1C68], (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Fragment>, (uint64_t)&type metadata for Text.Layout.Decorations.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x24BEE23D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewDebug.Data.SerializedAttribute>, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CanvasSymbols.Child>, (uint64_t)&type metadata for CanvasSymbols.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DisplayInfo>, (uint64_t)&type metadata for Text.Effect.DisplayInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferenceBridge.BridgedPreference>, (uint64_t)&type metadata for PreferenceBridge.BridgedPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<ViewRendererHost>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)), void (*a8)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;

  v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    v12 = a2;
    goto LABEL_8;
  }
  v11 = a4[3];
  v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2)
    goto LABEL_8;
  if (v12 + 0x4000000000000000 >= 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v12 = a2;
LABEL_8:
    v13 = a4[2];
    if (v12 <= v13)
      v14 = a4[2];
    else
      v14 = v12;
    if (v14)
    {
      a7(0, a5, a6, MEMORY[0x24BEE3598]);
      v15 = (_QWORD *)swift_allocObject();
      v16 = _swift_stdlib_malloc_size(v15);
      v15[2] = v13;
      v15[3] = 2 * ((uint64_t)(v16 - 32) / 56);
      v17 = v15 + 4;
      if ((v10 & 1) != 0)
      {
LABEL_13:
        if (v15 != a4 || v17 >= &a4[7 * v13 + 4])
          memmove(v17, a4 + 4, 56 * v13);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v17 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a8(0, v13, v17, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v15;
  }
  __break(1u);
  return result;
}

{
  char v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;

  v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    v12 = a2;
    goto LABEL_8;
  }
  v11 = a4[3];
  v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2)
    goto LABEL_8;
  if (v12 + 0x4000000000000000 >= 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v12 = a2;
LABEL_8:
    v13 = a4[2];
    if (v12 <= v13)
      v14 = a4[2];
    else
      v14 = v12;
    if (v14)
    {
      a7(0, a5, a6, MEMORY[0x24BEE3598]);
      v15 = (_QWORD *)swift_allocObject();
      v16 = _swift_stdlib_malloc_size(v15);
      v15[2] = v13;
      v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
      v17 = v15 + 4;
      if ((v10 & 1) != 0)
      {
LABEL_13:
        if (v15 != a4 || v17 >= &a4[3 * v13 + 4])
          memmove(v17, a4 + 4, 24 * v13);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v17 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a8(0, v13, v17, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking._AccessList>, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking>, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C20]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.RenderSegmentation.Segment>, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>, (uint64_t (*)(uint64_t))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringKey.FormatArgument>, type metadata accessor for LocalizedStringKey.FormatArgument);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNodeAttachment>, type metadata accessor for AccessibilityNodeAttachment);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Attribute<ViewList>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Attribute<Transaction>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.FlatPath.Element>, (uint64_t)&type metadata for Text.Effect.FlatPath.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<EventSourceType>, (uint64_t)&type metadata for EventSourceType);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t a6)
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v10 + 4])
          memmove(v15, a4 + 4, 8 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 72);
      v14 = v12 + 4;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[9 * v10 + 4])
          memmove(v14, a4 + 4, 72 * v10);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      v14 = v12 + 4;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v10 + 4])
          memmove(v14, a4 + 4, 24 * v10);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      v14 = v12 + 4;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v10 + 4])
          memmove(v14, a4 + 4, 24 * v10);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 48);
      v14 = v12 + 4;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[6 * v10 + 4])
          memmove(v14, a4 + 4, 48 * v10);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v10 + 4])
          memmove(v15, a4 + 4, 16 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 120);
      v14 = v12 + 4;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[15 * v10 + 4])
          memmove(v14, a4 + 4, 120 * v10);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 + 31;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 6);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[8 * v10 + 4])
          memmove(v15, a4 + 4, v10 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v10 + 4])
          memmove(v15, a4 + 4, 16 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, void (*a5)(_QWORD))
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      a5(0);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v14 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
          memmove(v14, a4 + 32, 4 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for [(_:)](0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v10 + 4])
          memmove(v15, a4 + 4, 16 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for [(_:)](0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v10 + 4])
          memmove(v15, a4 + 4, 8 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, uint64_t (*a7)(void), uint64_t a8)
{
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v12 = (char)result;
  if ((a3 & 1) == 0)
  {
    v14 = a2;
    goto LABEL_8;
  }
  v13 = a4[3];
  v14 = v13 >> 1;
  if ((uint64_t)(v13 >> 1) >= a2)
    goto LABEL_8;
  if (v14 + 0x4000000000000000 >= 0)
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v14 = a2;
LABEL_8:
    v15 = a4[2];
    if (v14 <= v15)
      v16 = a4[2];
    else
      v16 = v14;
    if (v16)
    {
      a5(0);
      v17 = (_QWORD *)swift_allocObject();
      v18 = _swift_stdlib_malloc_size(v17);
      v19 = v18 - 32;
      if (v18 < 32)
        v19 = v18 - 1;
      v17[2] = v15;
      v17[3] = 2 * (v19 >> 5);
      v20 = v17 + 4;
      if ((v12 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v20 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v17 != a4 || v20 >= &a4[4 * v15 + 4])
          memmove(v20, a4 + 4, 32 * v15);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v15, (unint64_t)v20, (uint64_t)a4, a6, a7, a8);
LABEL_24:
    swift_bridgeObjectRelease();
    return v17;
  }
  __break(1u);
  return result;
}

{
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v12 = (char)result;
  if ((a3 & 1) == 0)
  {
    v14 = a2;
    goto LABEL_8;
  }
  v13 = a4[3];
  v14 = v13 >> 1;
  if ((uint64_t)(v13 >> 1) >= a2)
    goto LABEL_8;
  if (v14 + 0x4000000000000000 >= 0)
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v14 = a2;
LABEL_8:
    v15 = a4[2];
    if (v14 <= v15)
      v16 = a4[2];
    else
      v16 = v14;
    if (v16)
    {
      a5(0);
      v17 = (_QWORD *)swift_allocObject();
      v18 = _swift_stdlib_malloc_size(v17);
      v19 = v18 - 32;
      if (v18 < 32)
        v19 = v18 - 17;
      v17[2] = v15;
      v17[3] = 2 * (v19 >> 4);
      v20 = v17 + 4;
      if ((v12 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v20 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v17 != a4 || v20 >= &a4[2 * v15 + 4])
          memmove(v20, a4 + 4, 16 * v15);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v15, (unint64_t)v20, (uint64_t)a4, a6, a7, a8);
LABEL_24:
    swift_bridgeObjectRelease();
    return v17;
  }
  __break(1u);
  return result;
}

{
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v12 = (char)result;
  if ((a3 & 1) == 0)
  {
    v14 = a2;
    goto LABEL_8;
  }
  v13 = a4[3];
  v14 = v13 >> 1;
  if ((uint64_t)(v13 >> 1) >= a2)
    goto LABEL_8;
  if (v14 + 0x4000000000000000 >= 0)
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v14 = a2;
LABEL_8:
    v15 = a4[2];
    if (v14 <= v15)
      v16 = a4[2];
    else
      v16 = v14;
    if (v16)
    {
      a5(0);
      v17 = (_QWORD *)swift_allocObject();
      v18 = _swift_stdlib_malloc_size(v17);
      v19 = v18 - 32;
      if (v18 < 32)
        v19 = v18 - 1;
      v17[2] = v15;
      v17[3] = 2 * (v19 >> 5);
      v20 = v17 + 4;
      if ((v12 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v20 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v17 != a4 || v20 >= &a4[4 * v15 + 4])
          memmove(v20, a4 + 4, 32 * v15);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v15, (unint64_t)v20, (uint64_t)a4, a6, a7, a8);
LABEL_24:
    swift_bridgeObjectRelease();
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  type metadata accessor for [(_:)](0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Float>, MEMORY[0x24BEE14E8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<StrongHash>, (uint64_t)&type metadata for StrongHash, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 20);
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 32])
          memmove(v12, a4 + 32, 20 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 36);
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[36 * v8 + 32])
          memmove(v12, a4 + 32, 36 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_DisplayList_Identity>, (uint64_t)&type metadata for _DisplayList_Identity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MatchedGeometryScope.Frame.View>, (uint64_t)&type metadata for MatchedGeometryScope.Frame.View, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 28);
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[28 * v8 + 32])
          memmove(v12, a4 + 32, 28 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt16>, MEMORY[0x24BEE4478], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, uint64_t (*a7)(uint64_t))
{
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;

  v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    v12 = a2;
    goto LABEL_8;
  }
  v11 = a4[3];
  v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2)
    goto LABEL_8;
  if (v12 + 0x4000000000000000 >= 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v12 = a2;
LABEL_8:
    v13 = a4[2];
    if (v12 <= v13)
      v14 = a4[2];
    else
      v14 = v12;
    if (v14)
    {
      a5(0);
      v15 = (_QWORD *)swift_allocObject();
      v16 = _swift_stdlib_malloc_size(v15);
      v15[2] = v13;
      v15[3] = 2 * ((uint64_t)(v16 - 32) / 40);
      v17 = v15 + 4;
      if ((v10 & 1) != 0)
      {
LABEL_13:
        if (v15 != a4 || v17 >= &a4[5 * v13 + 4])
          memmove(v17, a4 + 4, 40 * v13);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v17 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, (unint64_t)v17, (uint64_t)a4, a6, a7);
LABEL_22:
    swift_bridgeObjectRelease();
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD))
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      a5(0);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
          memmove(v13, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      a5(0);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      a7(0, a5, a6, MEMORY[0x24BEE3598]);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 88);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[11 * v11 + 4])
          memmove(v15, a4 + 4, 88 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (char *)v15, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = a4[3];
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = a4[2];
    if (v11 <= v12)
      v13 = a4[2];
    else
      v13 = v11;
    if (v13)
    {
      type metadata accessor for _ContiguousArrayStorage<Scrollable>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v14 = (_QWORD *)swift_allocObject();
      v15 = _swift_stdlib_malloc_size(v14);
      v14[2] = v12;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v12 + 4])
          memmove(v16, a4 + 4, 40 * v12);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Transaction.PendingListeners.WeakListener>, (uint64_t)&type metadata for Transaction.PendingListeners.WeakListener, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = (unint64_t)(v10 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = MEMORY[0x24BEE4AF8] + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 8 * v8)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (_QWORD *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentPathObservers.Observer>, (uint64_t)&type metadata for ContentPathObservers.Observer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = (unint64_t)(v10 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = MEMORY[0x24BEE4AF8] + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 16 * v8)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (_QWORD *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      a5(0);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 1;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4])
          memmove(v16, a4 + 4, 32 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      type metadata accessor for _ContiguousArrayStorage<AnyPreferenceKey.Type>(0, a5, a6, a7);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (char *)v16, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  char v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  size_t v13;
  char *v14;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = *((_QWORD *)a4 + 3);
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = *((_QWORD *)a4 + 2);
    if (v9 <= v10)
      v11 = *((_QWORD *)a4 + 2);
    else
      v11 = v9;
    if (v11)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v12 = (char *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      *((_QWORD *)v12 + 2) = v10;
      *((_QWORD *)v12 + 3) = 2 * v13 - 64;
      v14 = v12 + 32;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[v10 + 32])
          memmove(v14, a4 + 32, v10);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = (char *)MEMORY[0x24BEE4AF8];
      v14 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t)type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for [(_:)], (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_SublistTransform_Item>, &lazy cache variable for type metadata for _ViewList_SublistTransform_Item, (uint64_t)&protocol descriptor for _ViewList_SublistTransform_Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<GraphMutation>, &lazy cache variable for type metadata for GraphMutation, (uint64_t)&protocol descriptor for GraphMutation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyViewTrait>, &lazy cache variable for type metadata for AnyViewTrait, (uint64_t)&protocol descriptor for AnyViewTrait);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Effect>, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyPreferenceKey.Type>, (unint64_t *)&lazy cache variable for type metadata for AnyPreferenceKey.Type, &lazy cache variable for type metadata for AnyPreferenceKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<ViewGraph>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<ViewGraph>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs.KeyValue>, (uint64_t)&type metadata for PreferencesOutputs.KeyValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<GraphHost>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<GraphHost>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BitVector64>, (uint64_t)&type metadata for BitVector64);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradientVector.Stop>, (uint64_t)&type metadata for ResolvedGradientVector.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ShaderVectorData.Element>, (uint64_t)&type metadata for ShaderVectorData.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Item, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Item, (uint64_t (*)(uint64_t))type metadata accessor for NSObject);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<UnsafeRawPointer>, MEMORY[0x24BEE0F60]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x24BEE0940]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.CharacterIndex>, (uint64_t)&type metadata for Text.Layout.CharacterIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<MatchedGeometryScope.Frame>, (uint64_t)&type metadata for MatchedGeometryScope.Frame);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrapeableContent>, (uint64_t)&type metadata for ScrapeableContent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsFilter>, (uint64_t)&type metadata for GraphicsFilter);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<DynamicViewList<AnyView>.Item>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<DynamicViewList<AnyView>.Item>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Attribute<ViewList>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Attribute<Transaction>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Layout.Fragment>, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.Layout.Fragment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>, (uint64_t (*)(uint64_t))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x23B7C6DA8);
}

BOOL specialized static DisplayList.Index.ID.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL specialized static DisplayList.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _DWORD *v6;
  _DWORD *i;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4 != *(_QWORD *)(*a2 + 16))
    return 0;
  if (v4)
    v5 = v2 == v3;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = (_DWORD *)(v3 + 100);
    for (i = (_DWORD *)(v2 + 100); *i == *v6 && *(_QWORD *)(i - 9) == *(_QWORD *)(v6 - 9); i += 18)
    {
      v6 += 18;
      if (!--v4)
        return *((unsigned __int16 *)a1 + 4) == *((unsigned __int16 *)a2 + 4)
            && *((unsigned __int8 *)a1 + 10) == *((unsigned __int8 *)a2 + 10);
    }
    return 0;
  }
  return *((unsigned __int16 *)a1 + 4) == *((unsigned __int16 *)a2 + 4)
      && *((unsigned __int8 *)a1 + 10) == *((unsigned __int8 *)a2 + 10);
}

uint64_t type metadata accessor for DisplayList.ArchiveIDs()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DisplayList.ArchiveIDs;
  if (!type metadata singleton initialization cache for DisplayList.ArchiveIDs)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with take of Path.Storage(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

uint64_t outlined copy of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_retain();
  return result;
}

uint64_t outlined consume of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_release();
  return result;
}

uint64_t sub_234A23648()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of (Path, FillStyle)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (Path, FillStyle)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (Path, FillStyle)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Path, FillStyle)?)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (Path, FillStyle));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (Path, FillStyle)?);
  }
}

uint64_t sub_234A2372C()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t outlined copy of (Path, FillStyle)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if ((a5 & 0xFF00) != 0x200)
    return outlined copy of Path.Storage(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t outlined retain of (Path, FillStyle)?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16));
  return a1;
}

uint64_t outlined consume of (Path, FillStyle)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if ((a5 & 0xFF00) != 0x200)
    return outlined consume of Path.Storage(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t sub_234A237C0()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

void outlined consume of GraphicsFilter(void *a1, int a2, id a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a16 == 15)
  {

  }
  else if (a16 == 1)
  {
    outlined consume of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, HIBYTE(a15));
  }
}

void outlined consume of VariableBlurStyle.Mask(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned __int8 a14)
{
  if (a14 << 8 != 512)
    outlined consume of GraphicsImage.Contents?(a1, a2);
}

void outlined consume of GraphicsImage.Contents?(void *a1, char a2)
{
  if (a2 != -1)
    outlined consume of GraphicsImage.Contents(a1, a2);
}

void outlined consume of GraphicsImage.Contents(void *a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:

      break;
    case 2:
    case 3:
    case 4:
    case 5:
      swift_release();
      break;
    default:
      return;
  }
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 7) + 32);
    v6 = v4 << 7;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 56 * a1 + 32);
    v6 = 56 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 48 * a1 + 32);
    v6 = 48 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 40 * a1 + 32);
    v6 = 40 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 20 * a1 + 32);
    v6 = 20 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 36 * a1 + 32);
    v6 = 36 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 28 * a1 + 32);
    v6 = 28 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 6) + 32);
    v6 = v4 << 6;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 88 * a1 + 32);
    v6 = 88 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 88 * a1 + 32);
    v6 = &__dst[88 * v4];
    if (v5 >= v6 || &v5[88 * v4] <= __dst)
    {
      memcpy(__dst, v5, 88 * v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 96 * a1 + 32);
    v6 = 96 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 224 * a1 + 32;
    v6 = a3 + 224 * v4;
    if (v5 >= v6 || v5 + 224 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for ()();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 80 * a1 + 32;
    v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 120 * a1 + 32;
    v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 160 * a1 + 32;
    v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for CombinedAnimationState<Double>.Entry, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(0, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Item, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved, (uint64_t)&type metadata for Font.Resolved);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 144 * a1 + 32;
    v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for (views: _ViewList_ID_Views, endOffset: Int)();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 120 * a1 + 32;
    v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 104 * a1 + 32;
    v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (ScrapeableContent, Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 120 * a1 + 32;
    v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 216 * a1 + 32;
    v6 = a3 + 216 * v4;
    if (v5 >= v6 || v5 + 216 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 208 * a1 + 32;
    v6 = a3 + 208 * v4;
    if (v5 >= v6 || v5 + 208 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ResolvedKeyframes<Double>.Track, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _ResolvedKeyframes.Track);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>.Fork, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for (Int, RBDisplayListContents)();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for (Path, FillStyle)(0, &lazy cache variable for type metadata for (ContentShapeKinds, AnyShape));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 120 * a1 + 32;
    v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, &lazy cache variable for type metadata for (offset: Int, element: _ShapeStyle_Pack.Style));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for (range: _NSRange, attributes: [NSAttributedStringKey : Any])();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 144 * a1 + 32;
    v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for AnyPreferenceKey(0, &lazy cache variable for type metadata for ViewRendererHost);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      type metadata accessor for AnyPreferenceKey(0, a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized DisplayList.forEachIdentity(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v3 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_retain_n();
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v3 + 16))
    {
      v7 = *(_QWORD *)(v3 + 72);
      v6 = *(_QWORD *)(v3 + 80);
      if (*(_DWORD *)(v3 + 100))
      {
        LODWORD(v9) = *(_DWORD *)(v3 + 100);
        outlined copy of DisplayList.Item.Value(v7, v6);
        closure #1 in _DisplayList_StableIdentityMap.addIDs(from:root:)((Swift::UInt32 *)&v9, (uint64_t)&v10, a2, a3);
      }
      else
      {
        outlined copy of DisplayList.Item.Value(v7, v6);
      }
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x234A268B4);
  }
  return 1;
}

id outlined copy of GraphicsFilter(id result, int a2, id a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a16 == 15)
    return result;
  if (a16 == 1)
    return outlined copy of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, HIBYTE(a15));
  return result;
}

id outlined copy of VariableBlurStyle.Mask(id result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned __int8 a14)
{
  if (a14 << 8 != 512)
    return outlined copy of GraphicsImage.Contents?(result, a2);
  return result;
}

id outlined copy of GraphicsImage.Contents?(id result, char a2)
{
  if (a2 != -1)
    return outlined copy of GraphicsImage.Contents(result, a2);
  return result;
}

id outlined copy of GraphicsImage.Contents(id result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      result = result;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined init with take of _ColorMatrix?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ColorMatrix?, (uint64_t)&type metadata for _ColorMatrix, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_Identity, &type metadata for _DisplayList_Identity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DisplayList_Identity, &type metadata for _DisplayList_Identity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Features and conformance DisplayList.Features()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Features, &type metadata for DisplayList.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Features, &type metadata for DisplayList.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Features, &type metadata for DisplayList.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Features, &type metadata for DisplayList.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Version and conformance DisplayList.Version()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Version and conformance DisplayList.Version;
  if (!lazy protocol witness table cache variable for type DisplayList.Version and conformance DisplayList.Version)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Version, &type metadata for DisplayList.Version);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Version and conformance DisplayList.Version);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Seed and conformance DisplayList.Seed()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Seed and conformance DisplayList.Seed;
  if (!lazy protocol witness table cache variable for type DisplayList.Seed and conformance DisplayList.Seed)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Seed, &type metadata for DisplayList.Seed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Seed and conformance DisplayList.Seed);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Properties and conformance DisplayList.Properties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Properties, &type metadata for DisplayList.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Properties, &type metadata for DisplayList.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Properties, &type metadata for DisplayList.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Properties, &type metadata for DisplayList.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Options and conformance DisplayList.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Options, &type metadata for DisplayList.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Options, &type metadata for DisplayList.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Options, &type metadata for DisplayList.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Options, &type metadata for DisplayList.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Index.ID, &type metadata for DisplayList.Index.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  }
  return result;
}

ValueMetadata *type metadata accessor for _DisplayList_Identity()
{
  return &type metadata for _DisplayList_Identity;
}

uint64_t destroy for DisplayList()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t __swift_memcpy11_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for DisplayList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 11))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 11) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList()
{
  return &type metadata for DisplayList;
}

ValueMetadata *type metadata accessor for DisplayList.Features()
{
  return &type metadata for DisplayList.Features;
}

uint64_t destroy for DisplayList.Item(uint64_t a1)
{
  return outlined consume of DisplayList.Item.Value(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for DisplayList.Item(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  __int16 v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 66);
  v9 = *(_WORD *)(a2 + 64);
  outlined copy of DisplayList.Item.Value(v5, v6);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 66) = v8;
  *(_WORD *)(a1 + 64) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

uint64_t assignWithCopy for DisplayList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a2 + 66);
  v8 = *(_WORD *)(a2 + 64);
  outlined copy of DisplayList.Item.Value(v4, v5);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_WORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 66) = v7;
  outlined consume of DisplayList.Item.Value(v9, v10);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.Item(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  __int16 v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(a2 + 66);
  v6 = *(_WORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 66) = v5;
  outlined consume of DisplayList.Item.Value(v7, v8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Item(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFD && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 134217725);
  v3 = (((*(_QWORD *)(a1 + 48) >> 37) >> 25) & 0xF8000003 | (4 * ((*(_QWORD *)(a1 + 48) >> 37) & 0x1FFFFFF))) ^ 0x7FFFFFF;
  if (v3 >= 0x7FFFFFC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 134217725;
    if (a3 >= 0x7FFFFFD)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFD)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = (unint64_t)(((-a2 >> 2) & 0x1FFFFFF) - (a2 << 25)) << 37;
      *(_QWORD *)(result + 56) = 0;
      *(_BYTE *)(result + 66) = 0;
      *(_WORD *)(result + 64) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Item()
{
  return &type metadata for DisplayList.Item;
}

uint64_t destroy for DisplayList.Item.Value(uint64_t a1)
{
  return outlined consume of DisplayList.Item.Value(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  __int16 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 26);
  v7 = *(_WORD *)(a2 + 24);
  outlined copy of DisplayList.Item.Value(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 26) = v6;
  *(_WORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t assignWithCopy for DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  __int16 v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 26);
  v7 = *(_WORD *)(a2 + 24);
  outlined copy of DisplayList.Item.Value(*(_QWORD *)a2, v4);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 26) = v6;
  outlined consume of DisplayList.Item.Value(v8, v9);
  return a1;
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  __int16 v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 26);
  v5 = *(_WORD *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 26) = v4;
  outlined consume of DisplayList.Item.Value(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Item.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFD && *(_BYTE *)(a1 + 27))
    return (*(_DWORD *)a1 + 134217725);
  v3 = (((*(_QWORD *)(a1 + 8) >> 37) >> 25) & 0xF8000003 | (4 * ((*(_QWORD *)(a1 + 8) >> 37) & 0x1FFFFFF))) ^ 0x7FFFFFF;
  if (v3 >= 0x7FFFFFC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Item.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 134217725;
    if (a3 >= 0x7FFFFFD)
      *(_BYTE *)(result + 27) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFD)
      *(_BYTE *)(result + 27) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 0x1FFFFFF) - (a2 << 25)) << 37;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 26) = 0;
      *(_WORD *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for DisplayList.Item.Value(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 62;
  if ((_DWORD)v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t destructiveProjectEnumData for DisplayList.Item.Value(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for DisplayList.Item.Value(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0x1FFFFFFFFFLL | (a2 << 62);
  }
  else
  {
    *(_QWORD *)result = (a2 - 3);
    *(_OWORD *)(result + 8) = xmmword_23527E890;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Item.Value()
{
  return &type metadata for DisplayList.Item.Value;
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a2;
  outlined copy of DisplayList.Content.Value(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for DisplayList.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  outlined copy of DisplayList.Content.Value(*(_QWORD *)a2);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  outlined consume of DisplayList.Content.Value(v5);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for DisplayList.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  outlined consume of DisplayList.Content.Value(v4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Content(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 4 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 4);
  v3 = (*(_QWORD *)a1 >> 60) ^ 0xF;
  if (v3 >= 3)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 4;
    if (a3 >= 4)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 4)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_QWORD *)result = (unint64_t)-a2 << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Content()
{
  return &type metadata for DisplayList.Content;
}

unint64_t *initializeBufferWithCopyOfBuffer for DisplayList.Content.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for DisplayList.Content.Value(unint64_t *a1)
{
  return outlined consume of DisplayList.Content.Value(*a1);
}

unint64_t *assignWithCopy for DisplayList.Content.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of DisplayList.Content.Value(v4);
  return a1;
}

unint64_t *assignWithTake for DisplayList.Content.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of DisplayList.Content.Value(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Content.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 4 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 4);
  v3 = (*(_QWORD *)a1 >> 60) ^ 0xF;
  if (v3 >= 3)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Content.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(_QWORD *)result = a2 - 4;
    if (a3 >= 4)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 4)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = (unint64_t)-a2 << 60;
  }
  return result;
}

uint64_t getEnumTag for DisplayList.Content.Value(_QWORD *a1)
{
  return *a1 >> 60;
}

_QWORD *destructiveProjectEnumData for DisplayList.Content.Value(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for DisplayList.Content.Value(unint64_t *result, unsigned __int8 a2)
{
  *result = *result & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)a2 << 60);
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Content.Value()
{
  return &type metadata for DisplayList.Content.Value;
}

uint64_t destroy for DisplayList.Effect(uint64_t a1)
{
  return outlined consume of DisplayList.Effect(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_BYTE *)(a1 + 12));
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 12);
  outlined copy of DisplayList.Effect(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = v5;
  return a1;
}

uint64_t assignWithCopy for DisplayList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 12);
  outlined copy of DisplayList.Effect(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = v5;
  outlined consume of DisplayList.Effect(v6, v7, v8);
  return a1;
}

_QWORD *__swift_memcpy13_8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t assignWithTake for DisplayList.Effect(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_BYTE *)a2 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = v5;
  outlined consume of DisplayList.Effect(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Effect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xED && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 237);
  v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 0x13)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEC)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 237;
    if (a3 >= 0xED)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xED)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for DisplayList.Effect(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 12) <= 0x12u)
    return *(unsigned __int8 *)(a1 + 12);
  else
    return (*(_DWORD *)a1 + 19);
}

uint64_t destructiveInjectEnumTag for DisplayList.Effect(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x13)
  {
    *(_QWORD *)result = a2 - 19;
    *(_DWORD *)(result + 8) = 0;
    LOBYTE(a2) = 19;
  }
  *(_BYTE *)(result + 12) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Effect()
{
  return &type metadata for DisplayList.Effect;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DisplayList.Transform(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.Transform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for DisplayList.Transform(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t destructiveInjectEnumTag for DisplayList.Transform(uint64_t result, char a2)
{
  *(_BYTE *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Transform()
{
  return &type metadata for DisplayList.Transform;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayList.ArchiveIDs(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DisplayList.ArchiveIDs(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ArchiveIDs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234A27DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ArchiveIDs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234A27E70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for DisplayList.ArchiveIDs()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for DisplayList.InterpolatorAnimation()
{
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.InterpolatorAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorAnimation(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.InterpolatorAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorAnimation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorAnimation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.InterpolatorAnimation()
{
  return &type metadata for DisplayList.InterpolatorAnimation;
}

ValueMetadata *type metadata accessor for DisplayList.Version()
{
  return &type metadata for DisplayList.Version;
}

ValueMetadata *type metadata accessor for DisplayList.Seed()
{
  return &type metadata for DisplayList.Seed;
}

ValueMetadata *type metadata accessor for DisplayList.Properties()
{
  return &type metadata for DisplayList.Properties;
}

ValueMetadata *type metadata accessor for DisplayList.Key()
{
  return &type metadata for DisplayList.Key;
}

ValueMetadata *type metadata accessor for DisplayList.Options()
{
  return &type metadata for DisplayList.Options;
}

__n128 __swift_memcpy17_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DisplayList.Index(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Index(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Index()
{
  return &type metadata for DisplayList.Index;
}

ValueMetadata *type metadata accessor for DisplayList.Index.ID()
{
  return &type metadata for DisplayList.Index.ID;
}

uint64_t dispatch thunk of static _DisplayList_AnyEffectAnimation.leafProtobufTag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _DisplayList_AnyEffectAnimation.makeAnimator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _DisplayList_AnyEffectAnimator.evaluate(_:at:size:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

void *type metadata accessor for DisplayList.Index.RestoreOptions()
{
  return &unk_250610628;
}

uint64_t getEnumTagSinglePayload for _DisplayList_Identity.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for _DisplayList_Identity.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234A28274 + 4 * byte_23527E956[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234A28294 + 4 * byte_23527E95B[v4]))();
}

_BYTE *sub_234A28274(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234A28294(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234A2829C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234A282A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234A282AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234A282B4(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for _DisplayList_Identity.CodingKeys()
{
  return &unk_250633A78;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Index.RestoreOptions, &unk_250610628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Index.RestoreOptions, &unk_250610628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Index.RestoreOptions, &unk_250610628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.Index.RestoreOptions, &unk_250610628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = a4 + 40 * a1 + 32;
    v8 = a3 + 40 * v6;
    if (v7 >= v8 || v7 + 40 * v6 <= a3)
    {
      type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(0, a5, a6, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved);
      swift_arrayInitWithCopy();
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = a4 + 40 * a1 + 32;
    v10 = a3 + 40 * v8;
    if (v9 >= v10 || v9 + 40 * v8 <= a3)
    {
      a8(0, a5, a6, a7);
      swift_arrayInitWithCopy();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(void), uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = a4 + 32 * a1 + 32;
    v9 = a3 + 32 * v7;
    if (v8 >= v9 || v8 + 32 * v7 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
      swift_arrayInitWithCopy();
      return v9;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = a4 + 32 * a1 + 32;
    v9 = a3 + 32 * v7;
    if (v8 >= v9 || v8 + 32 * v7 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v9;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = a4 + 16 * a1 + 32;
    v9 = a3 + 16 * v7;
    if (v8 >= v9 || v8 + 16 * v7 <= a3)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v9;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for CombinedAnimationState<Double>.Entry, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<Double>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<Double>.Fork>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>.Fork, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<Double>.Fork>);
  }
}

unint64_t type metadata accessor for ()()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ();
  if (!lazy cache variable for type metadata for ())
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ());
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Float, Float)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Float, Float)>)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (Float, Float));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Float, Float)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (proposal: _ProposedSize, value: TextSizeVariant));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>);
  }
}

unint64_t lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex;
  if (!lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.CharacterIndex, &type metadata for Text.Layout.CharacterIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex;
  if (!lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.CharacterIndex, &type metadata for Text.Layout.CharacterIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex;
  if (!lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.CharacterIndex, &type metadata for Text.Layout.CharacterIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex);
  }
  return result;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>;
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(uint64_t a1)
{
  return type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(a1, &lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>);
}

uint64_t type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, Float>>;
  if (!lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, Float>>)
  {
    type metadata accessor for AnimatablePair<Float, Float>(255, &lazy cache variable for type metadata for AnimatablePair<Float, Float>);
    lazy protocol witness table accessor for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<Float, Float>);
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for AnimatablePair<Float, Float>(255, a2);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for Unmanaged<DynamicViewList<AnyView>.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Unmanaged<DynamicViewList<AnyView>.Item>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for DynamicViewList<AnyView>.Item, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList.Item);
    v0 = type metadata accessor for Unmanaged();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Unmanaged<DynamicViewList<AnyView>.Item>);
  }
}

unint64_t lazy protocol witness table accessor for type AnyView and conformance AnyView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyView and conformance AnyView;
  if (!lazy protocol witness table cache variable for type AnyView and conformance AnyView)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyView, &type metadata for AnyView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyView and conformance AnyView);
  }
  return result;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>;
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableArray<Float>, MEMORY[0x24BEE14E8], (uint64_t)&protocol witness table for Float, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    type metadata accessor for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>();
    lazy protocol witness table accessor for type AnimatableArray<Float> and conformance AnimatableArray<A>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t type metadata accessor for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>;
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>)
  {
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(255, &lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255);
    lazy protocol witness table accessor for type AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatableArray<A>(&lazy protocol witness table cache variable for type AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatableArray<A>, &lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableArray<Float> and conformance AnimatableArray<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatableArray<Float> and conformance AnimatableArray<A>;
  if (!lazy protocol witness table cache variable for type AnimatableArray<Float> and conformance AnimatableArray<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimatableArray<Float>, MEMORY[0x24BEE14E8], (uint64_t)&protocol witness table for Float, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableArray<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableArray<Float> and conformance AnimatableArray<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatorState<CGFloat>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry)
  {
    v2 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    v3 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState.Entry(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry);
  }
}

uint64_t type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(uint64_t a1)
{
  return type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(a1, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>)
  {
    v1 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork)
  {
    v2 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    v3 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState.Fork(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState.Entry(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry);
  }
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>)
  {
    v1 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState.Fork(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState.Entry(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry);
  }
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    a3();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>)
  {
    v1 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState.Fork(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>);
  }
}

unint64_t lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData;
  if (!lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AnyAnimatableData, &type metadata for _AnyAnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData;
  if (!lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AnyAnimatableData, &type metadata for _AnyAnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData;
  if (!lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AnyAnimatableData, &type metadata for _AnyAnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>;
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255);
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>);
  }
}

unint64_t lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData;
  if (!lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShaderVectorData, &type metadata for ShaderVectorData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData;
  if (!lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShaderVectorData, &type metadata for ShaderVectorData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData;
  if (!lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShaderVectorData, &type metadata for ShaderVectorData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>);
  }
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Effect.Kind.AnimatableData, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Effect.Kind.AnimatableData, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Effect.Kind.AnimatableData, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>;
  if (!lazy cache variable for type metadata for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>)
  {
    lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>);
  }
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Fill.AnimatableData, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Fill.AnimatableData, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Fill.AnimatableData, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>;
  if (!lazy cache variable for type metadata for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>();
    lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t type metadata accessor for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>;
  if (!lazy cache variable for type metadata for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>)
  {
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(255, &lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    lazy protocol witness table accessor for type AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatableArray<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>> and conformance AnimatableArray<A>, &lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>);
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatableArray<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableArray<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>;
  if (!lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>(uint64_t a1)
{
  return type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(a1, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>);
}

uint64_t type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
  return type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(a1, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

uint64_t type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    a4();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>)
  {
    v1 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector;
  if (!lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedGradientVector, &type metadata for ResolvedGradientVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector;
  if (!lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedGradientVector, &type metadata for ResolvedGradientVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector;
  if (!lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedGradientVector, &type metadata for ResolvedGradientVector);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>;
  if (!lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(uint64_t a1)
{
  return type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(a1, &lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, &lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatablePair<A, B>);
}

uint64_t type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>;
  if (!lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255);
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>;
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    type metadata accessor for AnimatablePair<Float, Float>(255, &lazy cache variable for type metadata for AnimatablePair<Double, Double>);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<Double, Double>);
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t type metadata accessor for AnimatablePair<Float, Float>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    type metadata accessor for AnimatablePair();
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>)
  {
    v1 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>;
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for CombinedAnimationState.Entry(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry);
  }
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    a3();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>)
  {
    v1 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    v3 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    v5 = type metadata accessor for AnimatorState.Fork(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork);
  }
}

void type metadata accessor for (AnyPreferenceKey.Type, AGAttribute)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyPreferenceKey.Type, AGAttribute))
  {
    type metadata accessor for AnyPreferenceKey.Type(255, (unint64_t *)&lazy cache variable for type metadata for AnyPreferenceKey.Type, &lazy cache variable for type metadata for AnyPreferenceKey);
    type metadata accessor for AGAttribute(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyPreferenceKey.Type, AGAttribute));
  }
}

void type metadata accessor for _ContiguousArrayStorage<ViewRendererHost>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ViewRendererHost>)
  {
    type metadata accessor for AnyPreferenceKey(255, &lazy cache variable for type metadata for ViewRendererHost);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ViewRendererHost>);
  }
}

uint64_t type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>;
  if (!lazy cache variable for type metadata for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>)
    type metadata accessor for CodableAccessibilityVersionStorage();
  return result;
}

void type metadata accessor for Unmanaged<ViewGraph>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for Unmanaged<ViewGraph>, (uint64_t (*)(uint64_t))type metadata accessor for ViewGraph, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE4A78]);
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<Transaction>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<Transaction>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Attribute<Transaction>, (uint64_t)&type metadata for Transaction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<Transaction>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<SIMD2<Float>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for SIMD2<Float>, (uint64_t (*)(void))lazy protocol witness table accessor for type Float and conformance Float, MEMORY[0x24BEE14E8], MEMORY[0x24BEE40C8]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
  }
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE1538], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (offset: UInt64, size: UInt64));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<Scrollable>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = type metadata accessor for AnyPreferenceKey(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (StrongHash, DisplayList.Version));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, String)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(ScrapeableContent, Int)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(ScrapeableContent, Int)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (ScrapeableContent, Int));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ScrapeableContent, Int)>);
  }
}

void type metadata accessor for (views: _ViewList_ID_Views, endOffset: Int)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (views: _ViewList_ID_Views, endOffset: Int))
  {
    type metadata accessor for _ViewList_ID_Views();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (views: _ViewList_ID_Views, endOffset: Int));
  }
}

void type metadata accessor for (CGSize, NSAttributedString.Metrics)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CGSize, NSAttributedString.Metrics))
  {
    type metadata accessor for CGSize(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CGSize, NSAttributedString.Metrics));
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnyPreferenceKey.Type>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for AnyPreferenceKey.Type(255, a3, a4);
    v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t type metadata accessor for AnyPreferenceKey.Type(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for AnyPreferenceKey(255, a3);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (id: DynamicContainerID, value: LayoutProxyAttributes));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (StrongHash, DisplayList));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (offset: Int, element: _ShapeStyle_Pack.Style));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>);
  }
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.AnimatableData, &type metadata for _ShapeStyle_Pack.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.AnimatableData, &type metadata for _ShapeStyle_Pack.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.AnimatableData, &type metadata for _ShapeStyle_Pack.AnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>);
  }
}

void type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))
  {
    type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>));
  }
}

uint64_t sub_234A31658()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry;
  if (!lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry)
  {
    type metadata accessor for ResolvedTextHelper(255);
    type metadata accessor for SizeFittingTextCache.CacheEntry();
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (ContentShapeKinds, AnyShape));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>);
  }
}

void type metadata accessor for (Path, FillStyle)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(255, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Item, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved, (uint64_t)&type metadata for Font.Resolved);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved;
  if (!lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.Resolved, &type metadata for Font.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved;
  if (!lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.Resolved, &type metadata for Font.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(255, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Item, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>);
  }
}

unint64_t lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.Resolved, &type metadata for Color.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.Resolved, &type metadata for Color.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.Resolved, &type metadata for Color.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.Resolved, &type metadata for Color.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<ViewList>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>)
  {
    type metadata accessor for _ContiguousArrayStorage<Scrollable>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>)
  {
    type metadata accessor for (Int, TypeConformance<ViewDescriptor>)(255, &lazy cache variable for type metadata for (Int, TypeConformance<ViewDescriptor>), &lazy cache variable for type metadata for TypeConformance<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>)
  {
    type metadata accessor for (Int, TypeConformance<ViewDescriptor>)(255, &lazy cache variable for type metadata for (Int, TypeConformance<StyleContextDescriptor>), &lazy cache variable for type metadata for TypeConformance<StyleContextDescriptor>, (uint64_t)&type metadata for StyleContextDescriptor, (uint64_t)&protocol witness table for StyleContextDescriptor);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>);
  }
}

void type metadata accessor for (Int, TypeConformance<ViewDescriptor>)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypeConformance);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for (Int, RBDisplayListContents)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Int, RBDisplayListContents))
  {
    type metadata accessor for RBDisplayListContents();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, RBDisplayListContents));
  }
}

unint64_t type metadata accessor for RBDisplayListContents()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RBDisplayListContents;
  if (!lazy cache variable for type metadata for RBDisplayListContents)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBDisplayListContents);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>);
  }
}

void type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for WeakAttribute<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095D0]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(255, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Item, (uint64_t (*)(uint64_t))type metadata accessor for NSObject, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>);
  }
}

void type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = type metadata accessor for ObjectCache.Item(a1, a5, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

void type metadata accessor for Unmanaged<GraphHost>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for Unmanaged<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE4A78]);
}

uint64_t type metadata accessor for AnyPreferenceKey(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined retain of Path.Storage(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry;
  if (!lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry)
    type metadata accessor for SizeFittingTextCache.CacheEntry();
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Path?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Path?>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Path?>);
  }
}

unint64_t type metadata accessor for (_:_:_:)()
{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<JitterTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect, (uint64_t)&type metadata for JitterTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<SomersaultTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect, (uint64_t)&type metadata for SomersaultTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<BloomTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<SmallTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<BigTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<SquishTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect, (uint64_t)&type metadata for SquishTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<StretchTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect, (uint64_t)&type metadata for StretchTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ScaleRippleTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect, (uint64_t)&type metadata for ScaleRippleTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect;
  if (!lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExplodeTextEffect, &type metadata for ExplodeTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect;
  if (!lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExplodeTextEffect, &type metadata for ExplodeTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect;
  if (!lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ExplodeTextEffect, &type metadata for ExplodeTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect;
  if (!lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for JitterTextEffect, &type metadata for JitterTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect;
  if (!lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for JitterTextEffect, &type metadata for JitterTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect;
  if (!lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for JitterTextEffect, &type metadata for JitterTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeHorizontalTextEffect, &type metadata for ShakeHorizontalTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeHorizontalTextEffect, &type metadata for ShakeHorizontalTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeHorizontalTextEffect, &type metadata for ShakeHorizontalTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeVerticalTextEffect, &type metadata for ShakeVerticalTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeVerticalTextEffect, &type metadata for ShakeVerticalTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeVerticalTextEffect, &type metadata for ShakeVerticalTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect;
  if (!lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SomersaultTextEffect, &type metadata for SomersaultTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect;
  if (!lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SomersaultTextEffect, &type metadata for SomersaultTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect;
  if (!lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SomersaultTextEffect, &type metadata for SomersaultTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect;
  if (!lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BloomTextEffect, &type metadata for BloomTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect;
  if (!lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BloomTextEffect, &type metadata for BloomTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect;
  if (!lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BloomTextEffect, &type metadata for BloomTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<BloomTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect;
  if (!lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SmallTextEffect, &type metadata for SmallTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect;
  if (!lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SmallTextEffect, &type metadata for SmallTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect;
  if (!lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SmallTextEffect, &type metadata for SmallTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<SmallTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _ResolvedKeyframes<Double>.Track, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _ResolvedKeyframes.Track);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimationPath<Double>.Element>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimationPath<Double>.Element>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for AnimationPath<Double>.Element, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimationPath.Element);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimationPath<Double>.Element>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _ResolvedKeyframeTrackContent<Double>.Segment, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ResolvedKeyframeTrackContent.Segment);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>);
  }
}

unint64_t lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect;
  if (!lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BigTextEffect, &type metadata for BigTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect;
  if (!lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BigTextEffect, &type metadata for BigTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect;
  if (!lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BigTextEffect, &type metadata for BigTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<BigTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect;
  if (!lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BounceTextEffect, &type metadata for BounceTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect;
  if (!lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BounceTextEffect, &type metadata for BounceTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect;
  if (!lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BounceTextEffect, &type metadata for BounceTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect;
  if (!lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SquishTextEffect, &type metadata for SquishTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect;
  if (!lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SquishTextEffect, &type metadata for SquishTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect;
  if (!lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SquishTextEffect, &type metadata for SquishTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect;
  if (!lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StretchTextEffect, &type metadata for StretchTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect;
  if (!lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StretchTextEffect, &type metadata for StretchTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect;
  if (!lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StretchTextEffect, &type metadata for StretchTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect;
  if (!lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScaleRippleTextEffect, &type metadata for ScaleRippleTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect;
  if (!lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScaleRippleTextEffect, &type metadata for ScaleRippleTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect;
  if (!lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScaleRippleTextEffect, &type metadata for ScaleRippleTextEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect);
  }
  return result;
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.isEnabled : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.isEnabled : EnvironmentValues(a1, a2);
}

{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isEnabled : EnvironmentValues(char *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t EnvironmentValues.isEnabled.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.isEnabled.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isEnabled.modify;
}

void EnvironmentValues.isEnabled.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t View.disabled(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.disabled(_:)(a1, a2, a3, (uint64_t)&unk_23527F5D8, (uint64_t)&unk_250657238, (uint64_t)partial apply for closure #1 in View.disabled(_:));
}

uint64_t View._disabled(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.disabled(_:)(a1, a2, a3, (uint64_t)&unk_23527F600, (uint64_t)&unk_250657260, (uint64_t)partial apply for closure #1 in View._disabled(_:));
}

uint64_t View.disabled(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];

  KeyPath = swift_getKeyPath();
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = a1;
  v17[0] = KeyPath;
  v17[1] = a6;
  v17[2] = v11;
  type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(0, v12, v13, v14);
  View.modifier<A>(_:)(v17, a2, v15, a3);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_BYTE *)(result + 72);
  else
    v6 = 3;
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_BYTE *)(result + 72);
  else
    v6 = 6;
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_BYTE *)(result + 72);
  else
    v6 = 1;
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_BYTE *)(result + 72);
  else
    v6 = 8;
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_BYTE *)(result + 72);
  else
    v6 = 10;
  *a2 = v6;
  return result;
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_BYTE *)(result + 72);
  else
    v6 = 5;
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1)
{
  Swift::Int v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (__int128 *)(v3 + 72);
  }
  else
  {
    v4 = &static FontDefinitionKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  return *(_QWORD *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v5;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v3)
    return *(unsigned __int8 *)(v3 + 72);
  else
    return 3;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

{
  uint64_t v2;
  int *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollableKey);
  v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v3 = &static _GraphInputs.ScrollableKey.defaultValue;
  }
  return *v3;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v5;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v3)
    return *(unsigned __int8 *)(v3 + 72);
  else
    return 1;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  uint64_t v2;
  int *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollTargetRoleKey);
  v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v3 = &static _GraphInputs.ScrollTargetRoleKey.defaultValue;
  }
  return *v3;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.RemovePreferenceInput);
  result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey);
  v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  return *(_QWORD *)v3;
}

{
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey);
  v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  return *(_QWORD *)v3;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for EventBindingBridgeFactoryInput);
  result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for GestureContainerFactoryInput);
  result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v5;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v3)
    return *(unsigned int *)(v3 + 72);
  else
    return 3;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for WithinAccessibilityRotor);
  result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  uint64_t v2;
  uint64_t v4;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for ViewListShouldParentToPlaceholderSubgraph);
  v2 = specialized find1<A>(_:key:filter:)(a1, v4);
  if (v2)
    return *(unsigned __int8 *)(v2 + 72);
  else
    return 1;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static EnvironmentValues.CUIAssetMatchTypesKey.defaultValue;
  }
  return *v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static FontModifiersKey.defaultValue;
  }
  return *v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static EnvironmentValues.SymbolEffectsKey.defaultValue;
  }
  return *v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static PlacementTintKey.defaultValue;
  }
  return *v4;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    v6 = (void *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v6 = &static FallbackFontProviderKey.defaultValue;
  }
  return outlined init with copy of AnyTrackedValue((uint64_t)v6, a2);
}

{
  Swift::Int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v10);
  if (v5)
  {
    v6 = (char *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static TextSizingKey.defaultValue;
    v7 = &qword_25426B978;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  *(_BYTE *)a2 = *v6;
  *(_QWORD *)(a2 + 8) = v8;
  return swift_bridgeObjectRetain();
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v6 = __swift_project_value_buffer(v7, (uint64_t)static EnvironmentValues.StringResolutionDate.defaultValue);
  }
  return _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v6, a2, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v11);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
    v7 = type metadata accessor for Locale();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v9 = type metadata accessor for Locale();
    v10 = __swift_project_value_buffer(v9, (uint64_t)static LocaleKey.defaultValue);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v10, v9);
  }
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v7 = type metadata accessor for TypesettingConfiguration();
    v6 = __swift_project_value_buffer(v7, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  }
  return outlined init with copy of TypesettingLanguage(v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
}

{
  Swift::Int v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v8;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    v6 = (__int128 *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v6 = &static EnvironmentValues.AccessibilityTextAttributeResolverKey.defaultValue;
  }
  return _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0((uint64_t)v6, a2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v11);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
    v7 = type metadata accessor for Calendar();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v9 = type metadata accessor for Calendar();
    v10 = __swift_project_value_buffer(v9, (uint64_t)static CalendarKey.defaultValue);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v10, v9);
  }
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v11);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
    v7 = type metadata accessor for TimeZone();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v9 = type metadata accessor for TimeZone();
    v10 = __swift_project_value_buffer(v9, (uint64_t)static TimeZoneKey.defaultValue);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v10, v9);
  }
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    v6 = __swift_project_value_buffer(v7, (uint64_t)static EnvironmentValues.ResolvableStringReferenceDateKey.defaultValue);
  }
  return _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v6, a2, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v7 = type metadata accessor for EnvironmentValues.Key.Value();
    v6 = __swift_project_value_buffer(v7, (uint64_t)static EnvironmentValues.Key.defaultValue);
  }
  return outlined init with copy of TypesettingLanguage(v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
}

{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;

  result = specialized find<A>(_:key:)(a1);
  if (result)
  {
    v4 = *(_QWORD *)(result + 96);
    v5 = *(_DWORD *)(result + 112);
    v6 = *(_QWORD *)(result + 116);
    v7 = *(_DWORD *)(result + 124);
    v8 = *(_BYTE *)(result + 128);
    *(_OWORD *)a2 = *(_OWORD *)(result + 72);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 88);
    *(_QWORD *)(a2 + 24) = v4;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 104);
    *(_DWORD *)(a2 + 40) = v5;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *(_QWORD *)a2 = &type metadata for DefaultContainerShapeType;
    *(_QWORD *)(a2 + 8) = &protocol witness table for DefaultContainerShapeType;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    v6 = 0;
  }
  *(_QWORD *)(a2 + 44) = v6;
  *(_DWORD *)(a2 + 52) = v7;
  *(_BYTE *)(a2 + 56) = v8;
  return result;
}

{
  Swift::Int v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v9);
  if (result)
  {
    v6 = *(_OWORD *)(result + 72);
    v7 = *(_QWORD *)(result + 88);
    v8 = *(unsigned __int16 *)(result + 96) | (*(unsigned __int8 *)(result + 98) << 16);
  }
  else
  {
    v7 = 0;
    v6 = 0uLL;
    v8 = 2;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 26) = BYTE2(v8);
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v14);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
    v8 = (uint64_t *)(v5 + 88);
    v9 = (char *)(v5 + 96);
  }
  else
  {
    v6 = &static EnvironmentValues.ScrollAnchorsKey.defaultValue;
    v8 = &qword_2561AC2E8;
    v7 = &qword_2561AC2E0;
    v9 = &byte_2561AC2F0;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v10 = *v8;
  v11 = *v7;
  v12 = *v9;
  *(_QWORD *)a2 = *v6;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = v12;
  return swift_bridgeObjectRetain();
}

{
  Swift::Int v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    v6 = (void *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v6 = &static EnvironmentValues.PreferenceBridgeKey.defaultValue;
  }
  return outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v6, a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  result = a6(a1);
  if (result)
    return swift_retain();
  return result;
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  result = a6(a1);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  result = a6(a1);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  result = a6(a1);
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

{
  Swift::Int v8;
  uint64_t v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  v9 = a6(a1);
  if (v9)
    return *(unsigned __int8 *)(v9 + 72);
  else
    return 1;
}

{
  Swift::Int v8;
  uint64_t v9;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  v9 = a6(a1);
  if (v9)
    return *(unsigned __int8 *)(v9 + 72);
  else
    return 2;
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  result = a6(a1);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

double specialized closure #1 in PropertyList.subscript.getter(uint64_t a1)
{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static DisplayScaleKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static MinimumScaleFactorKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static LineSpacingKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static LineHeightMultipleKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static MaximumLineHeightKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static MinimumLineHeightKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static HyphenationFactorKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static BodyHeadOutdentKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static DefaultBaselineOffsetKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static DefaultKerningKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v4 = &static DefaultTrackingKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v6;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    v4 = (__int128 *)(v3 + 72);
  }
  else
  {
    v4 = &static DefaultPaddingKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  return *(double *)v4;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  char v7;
  uint64_t v8;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v8);
  if (result)
  {
    v6 = *(_BYTE *)(result + 72);
    v7 = *(_BYTE *)(result + 73);
  }
  else
  {
    v6 = 0;
    v7 = 3;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_BYTE *)(result + 72);
  else
    v6 = 0;
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  __int16 v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_WORD *)(result + 72);
  else
    v6 = 2;
  *a2 = v6;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, _BYTE *a6@<X8>)
{
  Swift::Int v9;
  uint64_t result;
  char v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  result = a5(a1);
  if (result)
    v11 = *(_BYTE *)(result + 72);
  else
    v11 = 0;
  *a6 = v11;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result)
    v6 = *(_OWORD *)(result + 72);
  else
    v6 = 0uLL;
  *a2 = v6;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, char *a6@<X8>)
{
  Swift::Int v9;
  uint64_t result;
  char v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  result = a5(a1);
  if (result)
    v11 = *(_BYTE *)(result + 72);
  else
    v11 = 2;
  *a6 = v11;
  return result;
}

{
  Swift::Int v9;
  uint64_t result;
  char v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  result = a5(a1);
  if (result)
    v11 = *(_BYTE *)(result + 72);
  else
    v11 = 3;
  *a6 = v11;
  return result;
}

{
  Swift::Int v9;
  uint64_t result;
  char v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  result = a5(a1);
  if (result)
    v11 = *(_BYTE *)(result + 72);
  else
    v11 = 1;
  *a6 = v11;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, _QWORD *a6@<X8>)
{
  Swift::Int v9;
  uint64_t result;
  uint64_t v11;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  result = a5(a1);
  if (result)
    v11 = *(_QWORD *)(result + 72);
  else
    v11 = 0;
  *a6 = v11;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, uint64_t a6@<X8>)
{
  Swift::Int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  result = a5(a1);
  if (result)
  {
    v11 = *(_QWORD *)(result + 72);
    v12 = *(_QWORD *)(result + 80);
    v13 = *(_QWORD *)(result + 88);
    v14 = *(_QWORD *)(result + 96);
    v15 = *(_WORD *)(result + 104);
    result = outlined copy of OpenURLAction?(v11, v12, v13, v14, v15);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 255;
  }
  *(_QWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = v12;
  *(_QWORD *)(a6 + 16) = v13;
  *(_QWORD *)(a6 + 24) = v14;
  *(_WORD *)(a6 + 32) = v15;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  Swift::Int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v6 = &static EnvironmentValues.ContentShapesKey.defaultValue;
  }
  *a2 = *v6;
  return swift_bridgeObjectRetain();
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, uint64_t *a6@<X8>)
{
  Swift::Int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  result = a5(a1);
  if (result)
  {
    v11 = *(_QWORD *)(result + 72);
    v12 = *(_QWORD *)(result + 80);
    result = outlined copy of Text.LineStyle?(v11, v12);
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  *a6 = v11;
  a6[1] = v12;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int hashValue)
{
  uint64_t v4;
  char v5;
  unsigned int v6;
  uint64_t v8;

  BloomFilter.init(hashValue:)(hashValue);
  v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v8);
  if (!v4)
  {
    if (one-time initialization token for v6 != -1)
      swift_once();
    v6 = static Semantics.v6;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_9:
        v5 = specialized static GestureContainerFeature.isEnabled.getter();
        return v5 & 1;
      }
    }
    else if (static Semantics.forced < v6)
    {
      goto LABEL_9;
    }
    v5 = 1;
    return v5 & 1;
  }
  v5 = *(_BYTE *)(v4 + 72);
  return v5 & 1;
}

{
  uint64_t v4;
  uint64_t v6;

  BloomFilter.init(hashValue:)(hashValue);
  v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v6);
  if (v4)
    return *(unsigned __int8 *)(v4 + 72);
  else
    return 1;
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4)
    return *(unsigned __int8 *)(v4 + 72);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v6 = static Semantics.DismissPopsInNavigationSplitViewRoots.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    return dyld_program_minos_at_least();
  else
    return dword_25426FAB8 >= v6;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), specialized static Feature.defaultValue.getter) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), specialized static Feature.defaultValue.getter) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_1.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_3.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v3.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v4.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, &static _SemanticFeature_v4_4.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5_2.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v6.introduced) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:), &one-time initialization token for introduced, static EnabledFeature.introduced) & 1;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int hashValue, uint64_t a3, uint64_t (*a4)(uint64_t, Swift::Int), uint64_t (*a5)(void))
{
  uint64_t v9;

  BloomFilter.init(hashValue:)(hashValue);
  v9 = a4(a1, hashValue);
  if (v9)
    return *(unsigned __int8 *)(v9 + 72);
  else
    return a5() & 1;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int hashValue, uint64_t a3, uint64_t (*a4)(uint64_t, Swift::Int), _QWORD *a5, unsigned int *a6)
{
  uint64_t v11;
  unsigned int v13;

  BloomFilter.init(hashValue:)(hashValue);
  v11 = a4(a1, hashValue);
  if (v11)
    return *(unsigned __int8 *)(v11 + 72);
  if (*a5 != -1)
    swift_once();
  v13 = *a6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    return dyld_program_sdk_at_least();
  else
    return static Semantics.forced >= v13;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int hashValue, uint64_t a3, uint64_t (*a4)(uint64_t, Swift::Int))
{
  uint64_t result;

  BloomFilter.init(hashValue:)(hashValue);
  result = a4(a1, hashValue);
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

uint64_t sub_234A378CC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.isEnabled : EnvironmentValues(a1, a2);
}

uint64_t sub_234A378E4(char *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_234A37908()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.disabled(_:)(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>)
  {
    v4 = type metadata accessor for _EnvironmentKeyTransformModifier(0, MEMORY[0x24BEE1328], a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
  }
}

uint64_t sub_234A37988()
{
  return swift_deallocObject();
}

uint64_t sub_234A37998(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for Date?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Date?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t type metadata accessor for AccessibilityTextAttributeResolver()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AccessibilityTextAttributeResolver;
  if (!lazy cache variable for type metadata for AccessibilityTextAttributeResolver)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnabledKey()
{
  return &type metadata for EnabledKey;
}

uint64_t MouseEvent.Button.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::MouseEvent::Button __swiftcall MouseEvent.Button.init(rawValue:)(SwiftUI::MouseEvent::Button rawValue)
{
  SwiftUI::MouseEvent::Button *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static MouseEvent.Button.primary.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static MouseEvent.Button.secondary.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static MouseEvent.Button.other(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MouseEvent.Button()
{
  Swift::UInt *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

double MouseEvent.timestamp.getter@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double MouseEvent.timestamp.setter(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t (*MouseEvent.timestamp.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t MouseEvent.binding.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_retain();
}

uint64_t MouseEvent.binding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*MouseEvent.binding.modify())()
{
  return _ViewInputs.base.modify;
}

void MouseEvent.button.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

_QWORD *MouseEvent.button.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*MouseEvent.button.modify())()
{
  return _ViewInputs.base.modify;
}

void MouseEvent.phase.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

_BYTE *MouseEvent.phase.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = *result;
  return result;
}

uint64_t (*MouseEvent.phase.modify())()
{
  return _ViewInputs.base.modify;
}

double MouseEvent.location.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void MouseEvent.location.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*MouseEvent.location.modify())()
{
  return _ViewInputs.base.modify;
}

double MouseEvent.globalLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MouseEvent.globalLocation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*MouseEvent.globalLocation.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t MouseEvent.modifiers.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t MouseEvent.modifiers.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*MouseEvent.modifiers.modify())()
{
  return _ViewInputs.base.modify;
}

_QWORD *MouseEvent.init(timestamp:binding:button:phase:location:globalLocation:modifiers:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;

  v10 = *a2;
  v11 = *a3;
  v12 = *a4;
  *(_QWORD *)a6 = *result;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v11;
  *(_BYTE *)(a6 + 24) = v12;
  *(double *)(a6 + 32) = a7;
  *(double *)(a6 + 40) = a8;
  *(double *)(a6 + 48) = a9;
  *(double *)(a6 + 56) = a10;
  *(_QWORD *)(a6 + 64) = a5;
  return result;
}

double MouseEvent.radius.getter()
{
  return 0.0;
}

void MouseEvent.kind.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

double protocol witness for SpatialEventType.globalLocation.getter in conformance MouseEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance MouseEvent(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*protocol witness for SpatialEventType.globalLocation.modify in conformance MouseEvent())()
{
  return _ViewInputs.base.modify;
}

double protocol witness for SpatialEventType.location.getter in conformance MouseEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void protocol witness for SpatialEventType.location.setter in conformance MouseEvent(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*protocol witness for SpatialEventType.location.modify in conformance MouseEvent())()
{
  return _ViewInputs.base.modify;
}

double protocol witness for SpatialEventType.radius.getter in conformance MouseEvent()
{
  return 0.0;
}

uint64_t protocol witness for ModifiersEventType.modifiers.getter in conformance MouseEvent()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t protocol witness for ModifiersEventType.modifiers.setter in conformance MouseEvent(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*protocol witness for ModifiersEventType.modifiers.modify in conformance MouseEvent())()
{
  return _ViewInputs.base.modify;
}

void protocol witness for EventType.phase.getter in conformance MouseEvent(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

double protocol witness for EventType.timestamp.getter in conformance MouseEvent@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance MouseEvent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance MouseEvent(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance MouseEvent())()
{
  return _ViewInputs.base.modify;
}

BOOL specialized static MouseEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  v8 = *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    if (v11)
    {
      result = 0;
      if (v3 != v11 || v2 != v10)
        return result;
      goto LABEL_13;
    }
    swift_retain();
LABEL_11:
    swift_release();
    return 0;
  }
  if (v11)
    goto LABEL_11;
  result = 0;
  if (v2 != v10)
    return result;
LABEL_13:
  if (v4 == *(unsigned __int8 *)(a2 + 24)
    && v6 == *(double *)(a2 + 32)
    && v5 == *(double *)(a2 + 40)
    && v8 == *(double *)(a2 + 48)
    && v7 == *(double *)(a2 + 56))
  {
    return v9 == *(_QWORD *)(a2 + 64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MouseEvent.Button and conformance MouseEvent.Button()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MouseEvent.Button and conformance MouseEvent.Button;
  if (!lazy protocol witness table cache variable for type MouseEvent.Button and conformance MouseEvent.Button)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MouseEvent.Button, &type metadata for MouseEvent.Button);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MouseEvent.Button and conformance MouseEvent.Button);
  }
  return result;
}

uint64_t destroy for MouseEvent()
{
  return swift_release();
}

uint64_t initializeWithCopy for MouseEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MouseEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for MouseEvent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MouseEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MouseEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MouseEvent()
{
  return &type metadata for MouseEvent;
}

ValueMetadata *type metadata accessor for MouseEvent.Button()
{
  return &type metadata for MouseEvent.Button;
}

uint64_t static EventModifiers.capsLock.getter()
{
  return 1;
}

uint64_t static EventModifiers.shift.getter()
{
  return 2;
}

uint64_t static EventModifiers.control.getter()
{
  return 4;
}

uint64_t static EventModifiers.option.getter()
{
  return 8;
}

uint64_t static EventModifiers.command.getter()
{
  return 16;
}

uint64_t static EventModifiers.numericPad.getter()
{
  return 32;
}

uint64_t static EventModifiers.function.getter()
{
  return 64;
}

uint64_t static EventModifiers._function.getter()
{
  return 64;
}

uint64_t static EventModifiers.all.getter()
{
  return 63;
}

uint64_t static EventModifiers._all.getter()
{
  return 127;
}

unint64_t lazy protocol witness table accessor for type EventModifiers and conformance EventModifiers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventModifiers, &type metadata for EventModifiers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventModifiers, &type metadata for EventModifiers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventModifiers, &type metadata for EventModifiers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventModifiers, &type metadata for EventModifiers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance EventModifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

ValueMetadata *type metadata accessor for EventModifiers()
{
  return &type metadata for EventModifiers;
}

uint64_t dispatch thunk of ModifiersEventType.modifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ModifiersEventType.modifiers.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ModifiersEventType.modifiers.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

BOOL static EventPhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

double protocol witness for EventType.init(_:) in conformance MouseEvent@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    *(_QWORD *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 24) = v5;
    result = *(double *)&v6;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 64) = v8;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_235260F20;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t EventType.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - v6;
  type metadata accessor for EventType();
  v8 = swift_dynamicCast();
  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if ((v8 & 1) != 0)
  {
    v10(v7, 0, 1, a1);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v7, a1);
    v11 = 0;
  }
  else
  {
    v11 = 1;
    v10(v7, 1, 1, a1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10)(a2, v11, 1, a1);
}

unint64_t type metadata accessor for EventType()
{
  unint64_t result;

  result = lazy cache variable for type metadata for EventType;
  if (!lazy cache variable for type metadata for EventType)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
  return result;
}

void EventPhase.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int EventPhase.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL EventPhase.isTerminal.getter()
{
  _BYTE *v0;

  return (*v0 & 0xFE) == 2;
}

BOOL EventType.isFocusEvent.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  uint64_t v7[5];
  uint64_t v8[2];
  uint64_t v9;

  v7[3] = a1;
  v7[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  HitTestableEvent.init(_:)((uint64_t)v7, (uint64_t)v8);
  v5 = v9;
  if (v9 != 1)
    outlined consume of HitTestableEvent?(v8[0], v8[1], v9);
  return v5 == 1;
}

uint64_t outlined consume of HitTestableEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_release();
  return result;
}

void Event.phase.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Event.phase.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Event.phase.modify())()
{
  return _ViewInputs.base.modify;
}

double Event.timestamp.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double Event.timestamp.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Event.timestamp.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t Event.binding.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t Event.binding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*Event.binding.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t Event.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (**a3)(_QWORD *__return_ptr, _QWORD, _QWORD)@<X2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  a3[1](&v12, a2, a3);
  v8 = v12;
  a3[2](&v12, a2, a3);
  v9 = v12;
  a3[3](&v12, a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  v11 = v12;
  *(_BYTE *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v11;
  return result;
}

uint64_t Event.init(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v14, v4, v5);
  v6 = v14;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v14, v7, v8);
  v9 = v14;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 24))(&v14, v10, v11);
  v12 = v14;
  *a2 = v6;
  a2[1] = v9;
  a2[2] = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EventPhase and conformance EventPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventPhase and conformance EventPhase;
  if (!lazy protocol witness table cache variable for type EventPhase and conformance EventPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventPhase, &type metadata for EventPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventPhase and conformance EventPhase);
  }
  return result;
}

double protocol witness for EventType.timestamp.getter in conformance Event@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance Event@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance Event(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance Event())()
{
  return _ViewInputs.base.modify;
}

uint64_t getEnumTagSinglePayload for EventPhase(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234A38BF8 + 4 * byte_23527F969[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234A38C2C + 4 * asc_23527F964[v4]))();
}

uint64_t sub_234A38C2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A38C34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A38C3CLL);
  return result;
}

uint64_t sub_234A38C48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A38C50);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234A38C54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A38C5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for EventPhase(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EventPhase()
{
  return &type metadata for EventPhase;
}

uint64_t dispatch thunk of EventType.phase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventType.timestamp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventType.binding.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventType.binding.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of EventType.binding.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of EventType.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t destroy for Event()
{
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Event(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Event(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Event(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Event()
{
  return &type metadata for Event;
}

uint64_t protocol witness for EventType.init(_:) in conformance PhysicalButtonEvent@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  type metadata accessor for EventType();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 1;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t EventID.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EventID.type.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*EventID.type.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t EventID.serial.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t EventID.serial.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*EventID.serial.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t EventID.init(type:serial:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void EventID.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static EventID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

Swift::Int EventID.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EventID()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EventID()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EventID()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  Hasher.init(_seed:)();
  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EventID(_QWORD *a1, _QWORD *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

void EventID.init<A, B>(_:subtype:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();

  *a2 = TupleTypeMetadata2;
  a2[1] = (uint64_t)a1;
}

uint64_t EventID.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v3 = _typeName(_:qualified:)();
  v0._countAndFlagsBits = 35;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EventID()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v3 = _typeName(_:qualified:)();
  v0._countAndFlagsBits = 35;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

ValueMetadata *type metadata accessor for EventID()
{
  return &type metadata for EventID;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for ObservationTracking();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[16 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[16 * v8] && (unint64_t)v10 < a1 + 32 + (v8 << 7))
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), v8 << 7);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[3 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[3 * v8] && (unint64_t)v10 < a1 + 32 + 24 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 24 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[2 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[8 * v8 + 4];
  if (a1 + 32 < v9 + (v2 << 6) && v9 < a1 + 32 + (v2 << 6))
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  BOOL v31;
  _QWORD *v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  int64_t v50;
  unint64_t v51;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = a1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v49, &v3[2 * v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v16 = v3[2];
    v17 = __OFADD__(v16, result);
    v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_51;
    }
    v3[2] = v18;
  }
  if (result != v11)
    goto LABEL_13;
LABEL_16:
  v6 = v3[2];
  result = v49[0];
  v13 = (_QWORD *)v49[1];
  v14 = v49[2];
  v15 = v50;
  if (!v51)
  {
LABEL_51:
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      return result;
    }
    v26 = (unint64_t)(v14 + 64) >> 6;
    if (v24 >= v26)
      goto LABEL_13;
    v27 = v13;
    v41 = v13[v24];
    if (!v41)
    {
      v42 = v15 + 2;
      if (v15 + 2 >= v26)
        goto LABEL_13;
      v41 = v13[v42];
      if (v41)
      {
LABEL_59:
        v24 = v42;
      }
      else
      {
        if (v15 + 3 >= v26)
          goto LABEL_13;
        v41 = v13[v15 + 3];
        if (!v41)
          goto LABEL_65;
        v24 = v15 + 3;
      }
    }
LABEL_54:
    v19 = (v41 - 1) & v41;
    v20 = __clz(__rbit64(v41)) + (v24 << 6);
    v15 = v24;
    v13 = v27;
    goto LABEL_18;
  }
  v19 = (v51 - 1) & v51;
  v20 = __clz(__rbit64(v51)) | (v50 << 6);
LABEL_18:
  v21 = *(_QWORD *)(result + 48);
  v22 = *(_QWORD *)(v21 + 16 * v20);
  if (!v22)
    goto LABEL_13;
  v23 = *(_QWORD *)(v21 + 16 * v20 + 8);
  v24 = (unint64_t)(v14 + 64) >> 6;
  while (1)
  {
    v25 = v3[3];
    v26 = v25 >> 1;
    if ((uint64_t)(v25 >> 1) < v6 + 1)
    {
      v47 = v24;
      v48 = result;
      v45 = v14;
      v46 = v13;
      v44 = v15;
      v37 = v3;
      v38 = v19;
      v39 = v23;
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v6 + 1, 1, v37);
      v23 = v39;
      v13 = v46;
      v24 = v47;
      v19 = v38;
      v15 = v44;
      v14 = v45;
      v3 = v40;
      result = v48;
      v26 = v3[3] >> 1;
    }
    v27 = v3 + 4;
    if (v6 < v26)
      break;
LABEL_20:
    v3[2] = v6;
    if (!v22)
      goto LABEL_13;
  }
  while (1)
  {
    v32 = &v27[2 * v6];
    *v32 = v22;
    v32[1] = v23;
    ++v6;
    if (!v19)
      break;
    v28 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    v29 = v28 | (v15 << 6);
LABEL_26:
    v30 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v29);
    v22 = *v30;
    v23 = v30[1];
    if (v22)
      v31 = v6 < v26;
    else
      v31 = 0;
    if (!v31)
      goto LABEL_20;
  }
  v33 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v33 >= v24)
      goto LABEL_55;
    v34 = v13[v33];
    if (v34)
      goto LABEL_41;
    v35 = v15 + 2;
    if (v15 + 2 >= v24)
      goto LABEL_55;
    v34 = v13[v35];
    if (!v34)
    {
      if (v15 + 3 >= v24)
        goto LABEL_55;
      v34 = v13[v15 + 3];
      if (v34)
      {
        v33 = v15 + 3;
        goto LABEL_41;
      }
      v35 = v15 + 4;
      if (v15 + 4 >= v24)
        goto LABEL_55;
      v34 = v13[v35];
      if (!v34)
      {
        v33 = v15 + 5;
        if (v15 + 5 >= v24)
          goto LABEL_55;
        v34 = v13[v33];
        if (!v34)
        {
          v36 = v15 + 6;
          while (v24 != v36)
          {
            v34 = v13[v36++];
            if (v34)
            {
              v33 = v36 - 1;
              goto LABEL_41;
            }
          }
LABEL_55:
          v3[2] = v6;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    v33 = v35;
LABEL_41:
    v19 = (v34 - 1) & v34;
    v29 = __clz(__rbit64(v34)) + (v33 << 6);
    v15 = v33;
    goto LABEL_26;
  }
  __break(1u);
LABEL_65:
  v42 = v24 + 3;
  if (v24 + 3 < v26)
  {
    v41 = v27[v42];
    if (v41)
      goto LABEL_59;
    v24 += 4;
    if (v24 >= v26)
      goto LABEL_13;
    v41 = v27[v24];
    if (!v41)
    {
      v43 = v15 + 6;
      while (v26 != v43)
      {
        v41 = v27[v43++];
        if (v41)
        {
          v24 = v43 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  result = outlined consume of Set<EventID>.Iterator._Variant();
  *(_QWORD *)v1 = v3;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[12 * v8 + 4];
  if (a1 + 32 < v9 + 96 * v2 && v9 < a1 + 32 + 96 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[18 * v8 + 4];
  if (a1 + 32 < v9 + 144 * v2 && v9 < a1 + 32 + 144 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = *(_QWORD *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      if (*(_QWORD *)(a1 + 16))
        goto LABEL_5;
      goto LABEL_17;
    }
  }
  if (v4 <= v5)
    v4 += v2;
  swift_bridgeObjectRetain();
  v3 = MEMORY[0x23B7C6DA8](isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease();
  *v1 = v3;
  v8 = *(_QWORD *)(v3 + 24) >> 1;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_17:
    if (!v2)
      goto LABEL_18;
    goto LABEL_20;
  }
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  if (v8 - v9 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = v3 + 8 * v9 + 32;
  if (a1 + 32 < v10 + 8 * v2 && v10 < a1 + 32 + 8 * v2)
    goto LABEL_23;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  v12 = *(_QWORD *)(*v1 + 16);
  v13 = __OFADD__(v12, v2);
  v14 = v12 + v2;
  if (!v13)
  {
    *(_QWORD *)(*v1 + 16) = v14;
    goto LABEL_18;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[36 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[36 * v2] && (unint64_t)v9 < a1 + 32 + 36 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 36 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  type metadata accessor for (name: String, value: String)();
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), unint64_t *a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  if ((*(_QWORD *)(v5 + 24) >> 1) - v11 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = v5 + 40 * v11 + 32;
  if (a1 + 32 < v12 + 40 * v10 && v12 < a1 + 32 + 40 * v10)
    goto LABEL_21;
  type metadata accessor for ScrollStateRequest(0, a3);
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(v5 + 16);
  v15 = __OFADD__(v14, v10);
  v16 = v14 + v10;
  if (!v15)
  {
    *(_QWORD *)(v5 + 16) = v16;
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, &lazy cache variable for type metadata for [ViewResponder], &lazy protocol witness table cache variable for type [ViewResponder] and conformance [A], (unint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (unint64_t *)&lazy cache variable for type metadata for [AnyFontModifier], &lazy protocol witness table cache variable for type [AnyFontModifier] and conformance [A], (unint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = (uint64_t (*)(uint64_t))a3;
  a3 = a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x23B7C6DA8](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t (*)(uint64_t))v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

Swift::Int specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  Swift::Int_optional v18;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v21;
  int64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  Swift::Int_optional v26;

  v4 = v3;
  v8 = *(_QWORD **)v4;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v11 = v8[3] >> 1, v11 < v9))
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v8);
    v11 = v8[3] >> 1;
  }
  v12 = v8[2];
  v13 = (_QWORD *)(v11 - v12);
  v14 = (unint64_t)specialized Sequence._copySequenceContents(initializing:)(v24, (uint64_t)&v8[v12 + 4], v11 - v12, a1, a2, a3);
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    a2 = v8[2];
    v26 = Text.Effect.VisualOrderCollection.Iterator.next()();
    if (v26.is_nil)
      goto LABEL_9;
    v19 = v25;
    v20 = v25 + v26.value;
    if (__OFADD__(v25, v26.value))
    {
      __break(1u);
      goto LABEL_15;
    }
    while (1)
    {
      v21 = v8[3];
      v22 = v21 >> 1;
      if ((uint64_t)(v21 >> 1) < a2 + 1)
      {
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), a2 + 1, 1, v8);
        v22 = v8[3] >> 1;
        if (a2 < v22)
        {
LABEL_18:
          while (1)
          {
            v8[a2++ + 4] = v20;
            v18 = Text.Effect.VisualOrderCollection.Iterator.next()();
            if (v18.is_nil)
              break;
            v20 = v19 + v18.value;
            if (__OFADD__(v19, v18.value))
            {
              __break(1u);
              return v18.value;
            }
            if (v22 == a2)
            {
              a2 = v22;
              goto LABEL_15;
            }
          }
LABEL_25:
          v8[2] = a2;
          goto LABEL_9;
        }
      }
      else if (a2 < v22)
      {
        goto LABEL_18;
      }
LABEL_15:
      v8[2] = a2;
    }
  }
  if (v14)
  {
    v15 = v8[2];
    v16 = __OFADD__(v15, v14);
    v17 = (char *)(v15 + v14);
    if (v16)
    {
      __break(1u);
      goto LABEL_25;
    }
    v8[2] = v17;
  }
  if ((_QWORD *)v14 == v13)
    goto LABEL_11;
LABEL_9:
  v18.value = swift_bridgeObjectRelease();
  *(_QWORD *)v4 = v8;
  return v18.value;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  int64_t v37;
  uint64_t v38;
  int i;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(unint64_t, char *, uint64_t);
  void (*v52)(_QWORD *);
  uint64_t v53;
  int64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v56;
  void (*v57)(unint64_t, char *, uint64_t);
  unint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66[4];

  v64 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v60 = (uint64_t)&v54 - v15;
  v18.n128_f64[0] = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v54 - v19;
  v61 = a4;
  v21 = a4 >> 1;
  v22 = __OFSUB__(a4 >> 1, a3);
  v23 = (a4 >> 1) - a3;
  if (v22)
  {
    __break(1u);
    goto LABEL_26;
  }
  v65 = a1;
  a1 = *v4;
  v24 = *(_QWORD *)(*v4 + 16);
  v5 = v24 + v23;
  if (__OFADD__(v24, v23))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v63 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (v26 = *(_QWORD *)(a1 + 24) >> 1, v26 < v5))
  {
    if (v24 <= v5)
      v27 = v24 + v23;
    else
      v27 = v24;
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v27, 1, a1);
    *v4 = a1;
    v26 = *(_QWORD *)(a1 + 24) >> 1;
  }
  v28 = *(_QWORD *)(a1 + 16);
  v29 = v26 - v28;
  if (v21 != a3)
  {
    if (v29 < v23)
    {
      __break(1u);
    }
    else
    {
      if (v23 < 0
        || ((v30 = *(_QWORD *)(v10 + 72),
             v31 = a1
                 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                 + v30 * v28,
             v32 = v64 + v30 * a3,
             v32 < v31 + v30 * v23)
          ? (v33 = v31 >= v32 + v30 * v23)
          : (v33 = 1),
            !v33))
      {
LABEL_51:
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      swift_arrayInitWithCopy();
      if (!v23)
      {
LABEL_22:
        v5 = v21;
LABEL_23:
        if (v23 != v29)
          return swift_unknownObjectRelease();
        goto LABEL_28;
      }
      v34 = *(_QWORD *)(a1 + 16);
      v22 = __OFADD__(v34, v23);
      v35 = v34 + v23;
      if (!v22)
      {
        *(_QWORD *)(a1 + 16) = v35;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v23 <= 0)
  {
    v23 = 0;
    v5 = a3;
    goto LABEL_23;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  v37 = *(_QWORD *)(a1 + 16);
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
  v55(v20, 1, 1, v9, v18);
  v38 = v60;
  outlined init with copy of UUID?((uint64_t)v20, v60);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  for (i = v59(v38, 1, v9); i != 1; i = v59(v38, 1, v9))
  {
    outlined destroy of UUID?(v38);
    v41 = *v4;
    v42 = *(_QWORD *)(*v4 + 24);
    if ((uint64_t)(v42 >> 1) < v37 + 1)
    {
      v43 = v5;
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v37 + 1, 1, v41);
      *v4 = v53;
      v58 = v53;
      v54 = *(_QWORD *)(v53 + 24) >> 1;
    }
    else
    {
      v54 = v42 >> 1;
      v58 = v41;
      v43 = v5;
    }
    v44 = *(unsigned __int8 *)(v10 + 80);
    v45 = v63;
    outlined init with copy of UUID?((uint64_t)v20, v63);
    if (v59(v45, 1, v9) == 1)
    {
      v46 = v63;
LABEL_36:
      outlined destroy of UUID?(v46);
      v40 = v37;
    }
    else
    {
      v56 = v58 + ((v44 + 32) & ~v44);
      v47 = v54;
      if (v37 > v54)
        v47 = v37;
      v57 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
      v58 = v47;
      v48 = v62;
      v46 = v63;
      while (1)
      {
        v50 = v46;
        v51 = v57;
        v57((unint64_t)v48, (char *)v50, v9);
        if (v58 == v37)
          break;
        outlined destroy of UUID?((uint64_t)v20);
        v51(v56 + *(_QWORD *)(v10 + 72) * v37, v48, v9);
        if (v43 == v21)
        {
          v49 = 1;
          v43 = v21;
        }
        else
        {
          v52 = specialized ArraySlice.subscript.read(v66, v43, v65, v64, a3, v61);
          (*(void (**)(char *))(v10 + 16))(v20);
          ((void (*)(uint64_t *, _QWORD))v52)(v66, 0);
          v22 = __OFADD__(v43++, 1);
          if (v22)
            goto LABEL_50;
          v49 = 0;
          v48 = v62;
        }
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v55)(v20, v49, 1, v9);
        v46 = v63;
        outlined init with copy of UUID?((uint64_t)v20, v63);
        ++v37;
        if (v59(v46, 1, v9) == 1)
          goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v48, v9);
      v40 = v58;
      v37 = v58;
    }
    v5 = v43;
    *(_QWORD *)(*v4 + 16) = v40;
    v38 = v60;
    outlined init with copy of UUID?((uint64_t)v20, v60);
  }
  outlined destroy of UUID?((uint64_t)v20);
  swift_unknownObjectRelease();
  return outlined destroy of UUID?(v38);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  int64_t v8;
  int v11;
  unint64_t v12;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  _DWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  char v40[4];
  unsigned int v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v5 = v3;
  v6 = (_QWORD *)*v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = result;
  v12 = HIDWORD(result);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v14 = v6[3] >> 1, v14 < v8))
  {
    if (v7 <= v8)
      v15 = v8;
    else
      v15 = v7;
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
    v14 = v6[3] >> 1;
  }
  v16 = v6[2];
  v17 = v14 - v16;
  v37[0] = v11;
  v37[1] = v12;
  v38 = a2;
  v39 = a3;
  v18 = v37;
  result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v40, (uint64_t)&v6[2 * v16 + 4], v14 - v16);
  if (result < a3)
    goto LABEL_15;
  if (result >= 1)
  {
    v20 = v6[2];
    v21 = __OFADD__(v20, result);
    v22 = v20 + result;
    if (v21)
    {
      __break(1u);
LABEL_24:
      v17 += v8;
      v19 += v8;
      v26 = v33;
      goto LABEL_25;
    }
    v6[2] = v22;
  }
  if (result != v17)
    goto LABEL_13;
LABEL_16:
  v23 = v44;
  v36 = v43;
  if (v44 == v43)
    goto LABEL_13;
  if (v44 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v44 <= 0x7FFFFFFF)
  {
    if (v44 < 0 || v44 >= v43)
      goto LABEL_47;
    v24 = v6[2];
    v25 = v41;
    v18 = v42;
    v17 = ++v44;
    result = swift_bridgeObjectRetain();
    if (v18)
    {
      v26 = -v36;
      v4 = v23 | (v25 << 32);
      v19 = v24;
      v33 = -v36;
      while (1)
      {
        v27 = v6[3];
        v28 = v27 >> 1;
        v35 = v19;
        if ((uint64_t)(v27 >> 1) < v19 + 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v19 + 1, 1, v6);
          v19 = v35;
          v6 = (_QWORD *)result;
          v28 = *(_QWORD *)(result + 24) >> 1;
        }
        v29 = v17 <= 0x80000000 ? 0x80000000 : v17;
        if (v19 < v28)
          break;
LABEL_25:
        v6[2] = v19;
        if (!v18)
          goto LABEL_13;
      }
      v8 = 0;
      v30 = v26 + v17;
      v34 = v17 - v29;
      v31 = &v6[2 * v19 + 5];
      while (1)
      {
        *(v31 - 1) = v4;
        *v31 = v18;
        v32 = v19 + v8 + 1;
        if (!(v30 + v8))
        {
          v6[2] = v32;
          goto LABEL_13;
        }
        if (v17 < (uint64_t)0xFFFFFFFF80000000)
          break;
        if (!(v34 + v8))
          goto LABEL_43;
        if (v17 < 0 || v17 + v8 >= v36)
          goto LABEL_44;
        v18 = v42;
        v4 = (v17 + v8) | ((unint64_t)v41 << 32);
        v44 = v17 + v8 + 1;
        result = swift_bridgeObjectRetain();
        ++v8;
        v19 = v35;
        if (v18)
        {
          v31 += 2;
          if (v32 < v28)
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
LABEL_13:
    result = swift_bridgeObjectRelease();
    *v5 = v6;
    return result;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  void (*v17)(void ***);
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  void (*v30)(void ***);
  uint64_t v31;
  int64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47[4])(void ***);
  uint64_t v48;
  uint64_t v49;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = specialized Sequence._copyContents(initializing:)(&v48, (uint64_t)&v3[15 * v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v12 = v3[2];
    v13 = __OFADD__(v12, result);
    v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_31;
    }
    v3[2] = v14;
  }
  if (result != v11)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_16:
  if (!v49)
    goto LABEL_13;
  v15 = v49 - 1;
  if (!__OFSUB__(v49, 1))
  {
    v16 = v3[2];
    v17 = specialized Array.subscript.read(v47, v49 - 1, v48);
    v19 = *(id *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(void **)(v18 + 16);
    v22 = *(unsigned int *)(v18 + 112);
    v23 = *(unsigned __int8 *)(v18 + 116);
    v36 = *(_QWORD *)(v18 + 104);
    v37 = *(_QWORD *)(v18 + 96);
    v38 = *(_QWORD *)(v18 + 88);
    v39 = *(_QWORD *)(v18 + 80);
    v40 = *(_QWORD *)(v18 + 72);
    v41 = *(_QWORD *)(v18 + 64);
    v45 = *(_QWORD *)(v18 + 32);
    v46 = *(_QWORD *)(v18 + 24);
    v43 = *(_QWORD *)(v18 + 48);
    v44 = *(_QWORD *)(v18 + 40);
    v42 = *(_QWORD *)(v18 + 56);
    outlined copy of GraphicsFilter(*(id *)v18, v20, v21, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37, v36, *(_DWORD *)(v18 + 112), BYTE2(*(_DWORD *)(v18 + 112)));
    result = ((uint64_t (*)(void (**)(void ***), _QWORD))v17)(v47, 0);
    if (v23 == 255)
      goto LABEL_13;
    v33 = v21;
    v34 = v20;
    v35 = v19;
    v24 = v22 | (v23 << 32);
    while (1)
    {
      v25 = v3[3];
      v32 = v25 >> 1;
      if ((uint64_t)(v25 >> 1) < v16 + 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v16 + 1, 1, v3);
        v3 = (_QWORD *)result;
        v32 = *(_QWORD *)(result + 24) >> 1;
      }
      if (v16 < v32)
        break;
LABEL_20:
      v3[2] = v16;
      if (BYTE4(v24) == 255)
        goto LABEL_13;
    }
    LOBYTE(v26) = BYTE4(v24);
    v27 = 15 * v16;
    v28 = v24;
    while (1)
    {
      v29 = &v3[v27];
      v29[4] = v35;
      v29[5] = v34;
      v29[6] = v33;
      v29[7] = v46;
      v29[8] = v45;
      v29[9] = v44;
      v29[10] = v43;
      v29[11] = v42;
      v29[12] = v41;
      v29[13] = v40;
      v29[14] = v39;
      v29[15] = v38;
      v29[16] = v37;
      v29[17] = v36;
      *((_DWORD *)v29 + 36) = v28;
      v11 = v16 + 1;
      *((_BYTE *)v29 + 148) = v26;
      if (!v15)
        break;
      v13 = __OFSUB__(v15--, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_33;
      }
      v30 = specialized Array.subscript.read(v47, v15, v48);
      v28 = *(_DWORD *)(v31 + 112);
      v26 = *(unsigned __int8 *)(v31 + 116);
      v24 = v28 | ((unint64_t)*(unsigned __int8 *)(v31 + 116) << 32);
      v36 = *(_QWORD *)(v31 + 104);
      v37 = *(_QWORD *)(v31 + 96);
      v38 = *(_QWORD *)(v31 + 88);
      v39 = *(_QWORD *)(v31 + 80);
      v40 = *(_QWORD *)(v31 + 72);
      v41 = *(_QWORD *)(v31 + 64);
      v34 = *(_QWORD *)(v31 + 8);
      v35 = *(id *)v31;
      v33 = *(void **)(v31 + 16);
      v45 = *(_QWORD *)(v31 + 32);
      v46 = *(_QWORD *)(v31 + 24);
      v43 = *(_QWORD *)(v31 + 48);
      v44 = *(_QWORD *)(v31 + 40);
      v42 = *(_QWORD *)(v31 + 56);
      outlined copy of GraphicsFilter(*(id *)v31, v34, v33, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37, v36, v28, SBYTE2(v28));
      result = ((uint64_t (*)(void (**)(void ***), _QWORD))v30)(v47, 0);
      ++v16;
      if (v26 <= 0xFEuLL)
      {
        v27 += 15;
        if (v11 < v32)
          continue;
      }
      goto LABEL_20;
    }
LABEL_31:
    v3[2] = v11;
    goto LABEL_13;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t ScrollableContainer.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v22, a2, a4);
  v10 = v23;
  outlined destroy of Scrollable?((uint64_t)v22);
  if (v10
    && (v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a3, a5, a2, a4)) != 0)
  {
    v13 = v11;
    v14 = ScrollableContainer.setParentTarget(_:)(v11, v12, a2, a4);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v13);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    if (v15)
      v16 = v15;
    else
      v16 = MEMORY[0x24BEE4AF8];
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = v16 + 32;
      while (1)
      {
        outlined init with copy of AnyTrackedValue(v18, (uint64_t)v22);
        v19 = v23;
        v20 = v24;
        __swift_project_boxed_opaque_existential_1(v22, v23);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8))(a1, a3, a5, v19, v20) & 1) != 0)
          break;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        v18 += 40;
        if (!--v17)
          goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      v14 = 1;
    }
    else
    {
LABEL_11:
      swift_bridgeObjectRelease();
      v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t outlined destroy of Scrollable?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for Scrollable?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ScrollableContainer.setParentTarget(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v10, a3, a4);
  if (v11)
  {
    outlined init with take of ScrollStateRequest(&v10, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)&v10);
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t ScrollableContainer.allowsContentOffsetAdjustments.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(_QWORD *__return_ptr))(a2 + 24))(v6);
  v2 = v7;
  if (v7)
  {
    v3 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v6);
    v4 = 1;
  }
  return v4 & 1;
}

uint64_t specialized ScrollableContainer.setContentTarget(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t WeakValue;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (!WeakValue
    || (outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v13),
        v5 = v14,
        v6 = v15,
        __swift_project_boxed_opaque_existential_1(v13, v14),
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5, v6),
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13),
        (v7 & 1) == 0))
  {
    type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for [Scrollable], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = AGGraphGetWeakValue();
    if (!result)
      return result;
    v9 = *(_QWORD *)(*(_QWORD *)result + 16);
    if (!v9)
      return 0;
    v10 = *(_QWORD *)result + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v10, (uint64_t)v13);
      v11 = v14;
      v12 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, a2, v11, v12) & 1) != 0)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      v10 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return 1;
}

uint64_t ScrollableContainer.setContentTarget(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v16, a3, a4);
  if (v17)
  {
    outlined init with take of ScrollStateRequest(&v16, (uint64_t)v18);
    v8 = v19;
    v9 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)&v16);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  if (!result)
    return result;
  v12 = *(_QWORD *)(result + 16);
  if (!v12)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = result + 32;
  while (1)
  {
    outlined init with copy of AnyTrackedValue(v13, (uint64_t)v18);
    v14 = v19;
    v15 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(a1, a2, v14, v15) & 1) != 0)
      break;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    v13 += 40;
    if (!--v12)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return 1;
}

uint64_t specialized ScrollableContainer.adjustContentOffset(by:)(double a1, double a2)
{
  uint64_t WeakValue;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  AGGraphClearUpdate();
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v11);
  }
  else
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
  }
  AGGraphSetUpdate();
  outlined init with copy of Scrollable?((uint64_t)v11, (uint64_t)v8);
  v5 = v9;
  if (v9)
  {
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(v6 + 32))(v5, v6, a1, a2);
    outlined destroy of Scrollable?((uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v11);
    outlined destroy of Scrollable?((uint64_t)v8);
  }
  return v5 & 1;
}

Swift::Bool __swiftcall ScrollableContainer.adjustContentOffset(by:)(CGSize by)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double height;
  double width;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  v3 = v2;
  v4 = v1;
  height = by.height;
  width = by.width;
  AGGraphClearUpdate();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 24))(v13, v4, v3);
  AGGraphSetUpdate();
  outlined init with copy of Scrollable?((uint64_t)v13, (uint64_t)v10);
  v7 = v11;
  if (v11)
  {
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(v8 + 32))(v7, v8, width, height);
    outlined destroy of Scrollable?((uint64_t)v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v13);
    outlined destroy of Scrollable?((uint64_t)v10);
  }
  return v7 & 1;
}

uint64_t outlined init with copy of Scrollable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for Scrollable?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ScrollableContainer.mapFirstChild<A, B>(ofType:body:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, double);
  int v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v36;
  void (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;

  v9 = v8;
  v52 = a7;
  v53 = a8;
  v54 = a2;
  v55 = a3;
  v58 = a1;
  v13 = type metadata accessor for Optional();
  v56 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v47 - v14;
  v59 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Optional();
  v49 = *(_QWORD *)(v19 - 8);
  v50 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v47 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a5 - 8);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v47 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, double))(v30 + 16);
  v51 = v9;
  v31(v24, v9, a4, v27);
  v32 = swift_dynamicCast();
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  if (v32)
  {
    v33(v21, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v21, a5);
    v34 = v53;
    v54(v29);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v29, a5);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v34, 0, 1, a6);
  }
  else
  {
    v48 = v18;
    v37 = v54;
    v36 = v55;
    v33(v21, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v50);
    v38 = (*(uint64_t (**)(uint64_t))(v52 + 16))(a4);
    if (!v38)
      v38 = MEMORY[0x24BEE4AF8];
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
    {
      v52 = v38;
      v40 = v38 + 32;
      while (1)
      {
        outlined init with copy of AnyTrackedValue(v40, (uint64_t)v60);
        v42 = v61;
        v41 = v62;
        __swift_project_boxed_opaque_existential_1(v60, v61);
        (*(void (**)(uint64_t, void (*)(char *), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 40))(v58, v37, v36, a5, a6, v42, v41);
        v43 = v59;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v15, 1, a6) != 1)
          break;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v15, v57);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
        v40 += 40;
        if (!--v39)
          goto LABEL_9;
      }
      swift_bridgeObjectRelease();
      v44 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v45 = v48;
      v44(v48, v15, a6);
      v46 = v53;
      v44(v53, v45, a6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, a6);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    }
    else
    {
LABEL_9:
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v53, 1, 1, a6);
    }
  }
}

void static ScrollableCollection.accessibilityRole.getter(_BYTE *a1@<X8>)
{
  static ScrollableCollection.accessibilityRole.getter(a1);
}

{
  *a1 = 2;
}

uint64_t ScrollableCollection.visibleSubviews.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v3[3];
  uint64_t v4;

  v4 = MEMORY[0x24BEE4AF8];
  v3[2] = &v4;
  (*(void (**)(double (*)(double *, uint64_t), _QWORD *, uint64_t, uint64_t))(a2 + 24))(partial apply for closure #1 in ScrollableCollection.visibleSubviews.getter, v3, a1, a2);
  return v4;
}

double closure #1 in ScrollableCollection.visibleSubviews.getter(double *a1, uint64_t a2, _QWORD **a3)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  double result;
  double v20;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  v10 = *((_QWORD *)a1 + 6);
  v11 = *((_QWORD *)a1 + 7);
  v12 = *((_QWORD *)a1 + 8);
  v13 = *((_QWORD *)a1 + 9);
  v20 = a1[10];
  v14 = *a3;
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    *a3 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
    *a3 = v14;
  }
  v14[2] = v17 + 1;
  v18 = (double *)&v14[11 * v17];
  v18[4] = v4;
  *((_QWORD *)v18 + 5) = v5;
  *((_QWORD *)v18 + 6) = v6;
  *((_QWORD *)v18 + 7) = v7;
  *((_QWORD *)v18 + 8) = v8;
  *((_QWORD *)v18 + 9) = v9;
  *((_QWORD *)v18 + 10) = v10;
  *((_QWORD *)v18 + 11) = v11;
  *((_QWORD *)v18 + 12) = v12;
  result = v20;
  *((_QWORD *)v18 + 13) = v13;
  v18[14] = v20;
  return result;
}

double partial apply for closure #1 in ScrollableCollection.visibleSubviews.getter(double *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ScrollableCollection.visibleSubviews.getter(a1, a2, *(_QWORD ***)(v2 + 16));
}

uint64_t ScrollableCollectionSubview.id.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double ScrollableCollectionSubview.id.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRelease();
  result = *(double *)a1;
  *v1 = *(_QWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*ScrollableCollectionSubview.id.modify())()
{
  return _ViewInputs.base.modify;
}

double ScrollableCollectionSubview.frame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ScrollableCollectionSubview.frame.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
}

uint64_t (*ScrollableCollectionSubview.frame.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollableCollectionSubview.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 72);
  return swift_retain();
}

__n128 ScrollableCollectionSubview.transform.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;

  v2 = *a1;
  v6 = *(__n128 *)(a1 + 1);
  v3 = a1[3];
  v4 = a1[4];
  swift_release();
  *(_QWORD *)(v1 + 48) = v2;
  result = v6;
  *(__n128 *)(v1 + 56) = v6;
  *(_QWORD *)(v1 + 72) = v3;
  *(_QWORD *)(v1 + 80) = v4;
  return result;
}

uint64_t (*ScrollableCollectionSubview.transform.modify())()
{
  return _ViewInputs.base.modify;
}

__n128 ScrollableCollectionSubview.init(id:frame:transform:)@<Q0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v7 = a1[1];
  v8 = *a2;
  *(_QWORD *)a3 = *a1;
  *(_QWORD *)(a3 + 8) = v7;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(_QWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a2 + 1);
  result = *(__n128 *)(a2 + 3);
  *(__n128 *)(a3 + 72) = result;
  return result;
}

void Scrollable.scrollToPosition(_:)(uint64_t a1)
{
  _QWORD v1[7];

  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_234A3CBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  _OWORD v7[2];
  _BYTE v8[25];
  __int128 v9;
  __int128 v10;
  _BYTE v11[25];

  v7[1] = v10;
  *(_OWORD *)v8 = *(_OWORD *)v11;
  v7[0] = v9;
  *(_OWORD *)&v8[9] = *(_OWORD *)&v11[9];
  v2 = *((_QWORD *)&v10 + 1);
  v3 = *(_QWORD *)v11;
  v4 = __swift_project_boxed_opaque_existential_1(v7, *((uint64_t *)&v10 + 1));
  v5 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v4, v2, v3, v1, v0);
  outlined destroy of ScrollPosition.ViewID((uint64_t)v7);
  return v5 & 1;
}

uint64_t outlined init with copy of ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScrollPosition.Storage(a2, a1);
  return a2;
}

double closure #1 in Scrollable.scrollToPosition(_:)@<D0>(SwiftUI::Edge edge@<W2>, uint64_t a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  int v5;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double result;
  __int128 v11;
  __C::CGRect v12;

  v5 = *a3;
  v11 = *(_OWORD *)(a2 + 16);
  v12 = ScrollGeometry.targetRect(edge:)(edge);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  if (v5 == 1)
    x = *(double *)&v11 - CGRectGetMaxX((CGRect)v12);
  if (one-time initialization token for topLeading != -1)
    swift_once();
  *(double *)a4 = x;
  *(CGFloat *)(a4 + 8) = y;
  *(CGFloat *)(a4 + 16) = width;
  *(CGFloat *)(a4 + 24) = height;
  result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a4 + 32) = static UnitPoint.topLeading;
  *(_WORD *)(a4 + 48) = 0;
  return result;
}

__C::CGRect __swiftcall ScrollGeometry.targetRect(edge:)(SwiftUI::Edge edge)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  __C::CGRect result;

  ((void (*)(double, double, double, double, double, double, double, double))((char *)sub_234A3CE84
                                                                                       + 4
                                                                                       * byte_23527FAD6[edge]))(v1[4], v1[6], v1[8], v1[9], v1[5], v1[2], v1[3], v1[7]);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

double sub_234A3CE84(unsigned __int8 a1, double a2, double a3, double a4, double a5, double a6)
{
  if (a1 <= 1u)
    return -a6;
  else
    return 0.0;
}

double closure #2 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v6;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v6 = a4;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  if (*a2 == 1)
  {
    v10 = *(double *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 72);
    v6 = v10 - CGRectGetMaxX(*(CGRect *)&a4);
  }
  if (one-time initialization token for topLeading != -1)
    swift_once();
  *(double *)a3 = v6;
  *(double *)(a3 + 8) = a5;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(_WORD *)(a3 + 48) = 0;
  return result;
}

double closure #3 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v4 = a4;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  if (*a2 == 1)
  {
    v9 = *(double *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 72);
    v4 = v9 - CGRectGetMaxX(*(CGRect *)&a4);
  }
  if (one-time initialization token for topLeading != -1)
    swift_once();
  *(double *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(_WORD *)(a3 + 48) = 0;
  return result;
}

__n128 closure #4 in Scrollable.scrollToPosition(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_OWORD *)(a1 + 64);
  if (one-time initialization token for topLeading != -1)
  {
    v8 = *(_OWORD *)(a1 + 64);
    swift_once();
    v6 = v8;
  }
  *(_QWORD *)a2 = v5;
  *(double *)(a2 + 8) = a3;
  result = (__n128)static UnitPoint.topLeading;
  *(_OWORD *)(a2 + 16) = v6;
  *(__n128 *)(a2 + 32) = result;
  *(_WORD *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_234A3D0A8()
{
  return swift_deallocObject();
}

double partial apply for closure #4 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = closure #4 in Scrollable.scrollToPosition(_:)(a1, a2, *(double *)(v2 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_234A3D0C0()
{
  return swift_deallocObject();
}

double partial apply for closure #3 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #3 in Scrollable.scrollToPosition(_:)(a1, a2, a3, *(double *)(v3 + 16));
}

uint64_t sub_234A3D0D8()
{
  return swift_deallocObject();
}

double partial apply for closure #2 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #2 in Scrollable.scrollToPosition(_:)(a1, a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 24));
}

uint64_t sub_234A3D0F0()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in Scrollable.scrollToPosition(_:)((SwiftUI::Edge)*(_BYTE *)(v3 + 16), a1, a2, a3);
}

uint64_t outlined destroy of ScrollPosition.ViewID(uint64_t a1)
{
  destroy for ScrollPosition.ViewID();
  return a1;
}

uint64_t static ScrollablePreferenceKey.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static ScrollablePreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;

  v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for Scrollable);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollablePreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static ScrollablePreferenceKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollablePreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for Scrollable);
}

uint64_t _GraphInputs.scrollable.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _GraphInputs.scrollable : _GraphInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollable : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t _GraphInputs.scrollable.setter(int a1)
{
  uint64_t *v1;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*_GraphInputs.scrollable.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *((_DWORD *)v3 + 10) = v5;
  return _GraphInputs.scrollable.modify;
}

void _GraphInputs.scrollable.modify(uint64_t a1)
{
  void *v1;
  int v2;
  uint64_t *v3;

  v1 = *(void **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  free(v1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollableKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static _GraphInputs.ScrollableKey.defaultValue;
  return result;
}

uint64_t _ViewInputs.scrollable.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _ViewInputs.scrollable : _ViewInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t _ViewInputs.scrollable.setter(int a1)
{
  uint64_t *v1;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*_ViewInputs.scrollable.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  *((_DWORD *)v3 + 10) = v5;
  return _GraphInputs.scrollable.modify;
}

uint64_t _ViewInputs.weakScrollable.getter()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  result = 0;
  if (v2 != *MEMORY[0x24BE096C0])
    return AGCreateWeakAttribute();
  return result;
}

uint64_t UnaryScrollablePreferenceProvider.init(scrollable:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t UnaryScrollablePreferenceProvider.value.getter()
{
  uint64_t v0;
  uint64_t Value;

  type metadata accessor for Scrollable?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23527E860;
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, v0 + 32);
  return v0;
}

uint64_t protocol witness for Rule.value.getter in conformance UnaryScrollablePreferenceProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;
  uint64_t result;

  type metadata accessor for Scrollable?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_23527E860;
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Value = AGGraphGetValue();
  result = outlined init with copy of AnyTrackedValue(Value, v2 + 32);
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance DynamicLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ScrollableContainer.scroll<A>(to:)(a1, a4, a2, (uint64_t)&protocol witness table for DynamicLayoutScrollable, a3);
}

uint64_t protocol witness for Scrollable.setContentTarget(_:) in conformance DynamicLayoutScrollable(uint64_t a1, uint64_t a2)
{
  return specialized ScrollableContainer.setContentTarget(_:)(a1, a2) & 1;
}

uint64_t protocol witness for Scrollable.allowsContentOffsetAdjustments.getter in conformance DynamicLayoutScrollable()
{
  uint64_t WeakValue;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v5);
    v1 = v6;
    v2 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t protocol witness for Scrollable.adjustContentOffset(by:) in conformance DynamicLayoutScrollable(double a1, double a2)
{
  return specialized ScrollableContainer.adjustContentOffset(by:)(a1, a2) & 1;
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance DynamicLayoutScrollable@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  return ScrollableContainer.mapFirstChild<A, B>(ofType:body:)(a1, a2, a3, a6, a4, a5, (uint64_t)&protocol witness table for DynamicLayoutScrollable, a7);
}

void protocol witness for static ScrollableCollection.accessibilityRole.getter in conformance DynamicLayoutScrollable(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void type metadata accessor for Scrollable?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for Scrollable);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider;
  if (!lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryScrollablePreferenceProvider, &type metadata for UnaryScrollablePreferenceProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider);
  }
  return result;
}

uint64_t dispatch thunk of Scrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of Scrollable.setContentTarget(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of Scrollable.allowsContentOffsetAdjustments.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Scrollable.adjustContentOffset(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Scrollable.mapFirstChild<A, B>(ofType:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

uint64_t dispatch thunk of ScrollableContainer.children.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScrollableContainer.parent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ScrollableContainer.makeTarget<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ScrollableCollection.forEachVisibleSubview(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ScrollableCollection.nextVisibleCollectionViewID(towards:from:border:ignoring:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static ScrollableCollection.hasMultipleViewsInAxis(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(a3 + 40))(a1 & 1);
}

uint64_t dispatch thunk of ScrollableCollection.firstCollectionViewIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ScrollableCollection.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of ScrollableCollection.collectionViewID(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ScrollableCollection.scroll(toCollectionViewID:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a6 + 72))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of static ScrollableCollection.accessibilityRole.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t destroy for ScrollableCollectionSubview()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ScrollableCollectionSubview(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollableCollectionSubview(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ScrollableCollectionSubview(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableCollectionSubview(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableCollectionSubview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableCollectionSubview()
{
  return &type metadata for ScrollableCollectionSubview;
}

ValueMetadata *type metadata accessor for ScrollablePreferenceKey()
{
  return &type metadata for ScrollablePreferenceKey;
}

ValueMetadata *type metadata accessor for UnaryScrollablePreferenceProvider()
{
  return &type metadata for UnaryScrollablePreferenceProvider;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, unint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t *v24;
  uint64_t v25;
  uint64_t result;
  _BYTE v27[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        type metadata accessor for [(_:)](0, a5, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
        v20 = v19;
        v21 = lazy protocol witness table accessor for type [ViewResponder] and conformance [A](a6, a5, a4);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v23 = (void (*)(_BYTE *, _QWORD))a7(v27, i, a3, v20, v21);
          v25 = *v24;
          swift_retain();
          v23(v27, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*specialized ArraySlice.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(_QWORD *a1)
{
  uint64_t v10;
  uint64_t v11;
  void (*result)(_QWORD *);

  v10 = type metadata accessor for UUID();
  *a1 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  a1[1] = v11;
  result = (void (*)(_QWORD *))malloc(*(_QWORD *)(v11 + 64));
  a1[2] = (uint64_t)result;
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void))(v11 + 16))();
    return ArraySlice.subscript.readspecialized ;
  }
  return result;
}

void ArraySlice.subscript.readspecialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (name: String, value: String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (name: String, value: String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
  }
}

uint64_t lazy protocol witness table accessor for type [ViewResponder] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for [(_:)](255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Set<EventID>.Iterator._Variant()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollableKey()
{
  return &type metadata for _GraphInputs.ScrollableKey;
}

uint64_t EnvironmentValues.nearestScrollableAxes.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.nearestScrollableAxes.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.nearestScrollableAxes.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5;
  return EnvironmentValues.nearestScrollableAxes.modify;
}

void EnvironmentValues.nearestScrollableAxes.modify(uint64_t a1, char a2)
{
  EnvironmentValues.nearestScrollableAxes.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.allScrollableAxes.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.nearestScrollableAxes.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = a1(v3);
    swift_release_n();
    swift_release_n();
    return v5;
  }
  else
  {
    v8 = swift_retain_n();
    v9 = a2(v8, &v10);
    swift_release_n();
    return v9;
  }
}

uint64_t key path getter for EnvironmentValues.nearestScrollableAxes : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  char v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    v7 = a3(v9, &v11);
  }
  result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t EnvironmentValues.allScrollableAxes.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.nearestScrollableAxes.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.allScrollableAxes.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5;
  return EnvironmentValues.allScrollableAxes.modify;
}

void EnvironmentValues.allScrollableAxes.modify(uint64_t a1, char a2)
{
  EnvironmentValues.nearestScrollableAxes.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.nearestScrollableAxes.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, _QWORD **), void (*a4)(uint64_t, uint64_t))
{
  _QWORD **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;

  v7 = *(_QWORD ***)a1;
  v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  v9 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v10 = *v9;
  swift_retain_n();
  if ((a2 & 1) != 0)
    v11 = v7 + 1;
  else
    v11 = v7 + 2;
  a3(v9, v8, v11);
  swift_release();
  if (v9[1])
  {
    v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v7);
}

uint64_t sub_234A3E8D0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.nearestScrollableAxes : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234A3E8F4(unsigned __int8 *a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(*a1);
}

uint64_t sub_234A3E918@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.nearestScrollableAxes : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234A3E93C(unsigned __int8 *a1)
{
  return EnvironmentValues.allScrollableAxes.setter(*a1);
}

ValueMetadata *type metadata accessor for EnvironmentValues.NearestScrollableAxesEnvironmentKey()
{
  return &type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AllScrollableAxesEnvironmentKey()
{
  return &type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey;
}

double ScrollGeometry.contentOffset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

float64x2_t ScrollGeometry.contentOffset.setter(float64x2_t a1, float64_t a2)
{
  float64x2_t *v2;
  float64x2_t v3;
  float64x2_t result;

  v3 = *v2;
  v2->f64[0] = a1.f64[0];
  v2->f64[1] = a2;
  a1.f64[1] = a2;
  result = vaddq_f64(vsubq_f64(a1, v3), v2[5]);
  v2[5] = result;
  return result;
}

float64x2_t (*ScrollGeometry.contentOffset.modify(uint64_t a1))(uint64_t a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return ScrollGeometry.contentOffset.modify;
}

float64x2_t ScrollGeometry.contentOffset.modify(uint64_t a1)
{
  float64x2_t *v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v1 = *(float64x2_t **)(a1 + 16);
  v2 = *(float64x2_t *)a1;
  v3 = *v1;
  *v1 = *(float64x2_t *)a1;
  result = vaddq_f64(vsubq_f64(v2, v3), v1[5]);
  v1[5] = result;
  return result;
}

double ScrollGeometry.contentSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ScrollGeometry.contentSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*ScrollGeometry.contentSize.modify())()
{
  return _ViewInputs.base.modify;
}

double ScrollGeometry.contentInsets.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void ScrollGeometry.contentInsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*ScrollGeometry.contentInsets.modify())()
{
  return _ViewInputs.base.modify;
}

double ScrollGeometry.containerSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

float64x2_t ScrollGeometry.containerSize.setter(float64x2_t a1, float64_t a2)
{
  float64x2_t *v2;
  float64x2_t v3;
  float64x2_t result;

  v3 = v2[4];
  v2[4].f64[0] = a1.f64[0];
  v2[4].f64[1] = a2;
  a1.f64[1] = a2;
  result = vaddq_f64(vsubq_f64(a1, v3), v2[6]);
  v2[6] = result;
  return result;
}

float64x2_t (*ScrollGeometry.containerSize.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 64);
  return ScrollGeometry.containerSize.modify;
}

float64x2_t ScrollGeometry.containerSize.modify(uint64_t a1)
{
  float64x2_t *v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v1 = *(float64x2_t **)(a1 + 16);
  v2 = *(float64x2_t *)a1;
  v3 = v1[4];
  v1[4] = *(float64x2_t *)a1;
  result = vaddq_f64(vsubq_f64(v2, v3), v1[6]);
  v1[6] = result;
  return result;
}

double ScrollGeometry.visibleRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

void ScrollGeometry.visibleRect.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[10] = a1;
  v4[11] = a2;
  v4[12] = a3;
  v4[13] = a4;
}

uint64_t (*ScrollGeometry.visibleRect.modify())()
{
  return _ViewInputs.base.modify;
}

double ScrollGeometry.bounds.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:visibleRect:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  *(double *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a9;
  *(_OWORD *)(a1 + 64) = a10;
  *(_OWORD *)(a1 + 80) = a11;
  *(_QWORD *)(a1 + 96) = a12;
  *(_QWORD *)(a1 + 104) = a13;
}

void ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10, uint64_t a11)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  *(double *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a9;
  *(_QWORD *)(a1 + 64) = a10;
  *(_QWORD *)(a1 + 72) = a11;
  *(double *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = a10;
  *(_QWORD *)(a1 + 104) = a11;
}

double static ScrollGeometry.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void static ScrollGeometry.viewTransform(contentInsets:contentSize:containerSize:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  double v18;
  uint64_t v19;
  double v20;
  double v21;

  v18 = CGRect.outset(by:)(a2, a3, a4, a5, 0.0, 0.0, a8, a9);
  if (v20 <= 0.0)
    v20 = 0.0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  if (v21 <= 0.0)
    v21 = 0.0;
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a3;
  *(double *)(a1 + 48) = a4;
  *(double *)(a1 + 56) = a5;
  *(CGFloat *)(a1 + 64) = a8;
  *(CGFloat *)(a1 + 72) = a9;
  *(double *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = v19;
  *(double *)(a1 + 96) = v20;
  *(double *)(a1 + 104) = v21;
}

void static ScrollGeometry.rootViewTransform(contentOffset:containerSize:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(double *)(a1 + 64) = a4;
  *(double *)(a1 + 72) = a5;
  *(double *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a3;
  *(double *)(a1 + 96) = a4;
  *(double *)(a1 + 104) = a5;
}

void static ScrollGeometry.size(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(double *)(a1 + 64) = a2;
  *(double *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a2;
  *(double *)(a1 + 104) = a3;
}

Swift::Void __swiftcall ScrollGeometry.applyLayoutDirection(_:contentSize:)(SwiftUI::LayoutDirection _, CGSize_optional contentSize)
{
  char v2;
  CGFloat *v3;
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  CGRect v9;

  if (*(_BYTE *)_ == 1)
  {
    if ((v2 & 1) != 0)
      v4 = v3[2];
    else
      v4 = *(double *)&contentSize.is_nil;
    v5 = *v3;
    v6 = v3[1];
    v9.size.width = v3[8];
    v9.size.height = v3[9];
    v9.origin.x = *v3;
    v9.origin.y = v6;
    v7 = v4 - CGRectGetMaxX(v9);
    *v3 = v7;
    v3[1] = v6;
    v8 = v6 - v6 + v3[11];
    v3[10] = v7 - v5 + v3[10];
    v3[11] = v8;
  }
}

Swift::Void __swiftcall ScrollGeometry.translate(by:limit:)(CGSize by, CGSize limit)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v3 = v2[1];
  v4 = v2[7] + limit.width - v2[8];
  v5 = *v2 + by.width;
  if (v4 < 0.0)
    v4 = 0.0;
  v6 = v2[4];
  v7 = -v2[5];
  if (v5 >= v7)
    v7 = v5;
  if (v4 >= v7)
    v4 = v7;
  v8 = v2[11];
  v9 = v5 - *v2;
  v10 = v3 - v3;
  v11 = v4 - v5;
  v12 = v2[6] + limit.height - v2[9];
  v13 = v3 + by.height;
  v14 = v13 - v3;
  if (v12 < 0.0)
    v12 = 0.0;
  v15 = -v6;
  if (v13 >= -v6)
    v15 = v13;
  if (v12 >= v15)
    v12 = v15;
  v2[10] = v4 - v4 + v4 - v4 + v2[10] + v9 + v11;
  v2[11] = v14 + v10 + v10 + v8 + v12 - v13;
  *v2 = v4;
  v2[1] = v12;
}

Swift::Void __swiftcall ScrollGeometry.outsetForAX(limit:)(CGSize limit)
{
  float64x2_t *v1;
  float64x2_t v2;
  float64x2_t v3;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  float64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = v1[4];
  if (v2.f64[0] >= limit.width)
  {
    v9 = v1[4].f64[0];
  }
  else
  {
    v3 = *v1;
    v4 = vsubq_f64(*v1, v2).f64[0];
    if (v4 < 0.0)
      v4 = 0.0;
    if (v4 >= v3.f64[0])
      v4 = v1->f64[0];
    v5.f64[1] = v1->f64[1];
    v5.f64[0] = v4;
    v6 = v1[6];
    v7 = vaddq_f64(v1[5], vsubq_f64(v5, v3));
    v1->f64[0] = v4;
    v8 = v2.f64[0] + v3.f64[0] - v4;
    v9 = limit.width - v3.f64[0];
    if (v2.f64[0] + v8 < v9)
      v9 = v2.f64[0] + v8;
    if (v8 > v9)
      v9 = v8;
    v1[4].f64[0] = v9;
    v10.f64[1] = v2.f64[1];
    v10.f64[0] = v8;
    v11 = vsubq_f64(v10, v2);
    v12 = vaddq_f64(v6, v11);
    v11.f64[0] = v9 - v8;
    v1[5] = v7;
    v1[6] = vaddq_f64(v12, v11);
  }
  if (v2.f64[1] < limit.height)
  {
    v13 = v1->f64[0];
    v14 = v1->f64[1];
    v15 = v14 - v2.f64[1];
    if (v14 - v2.f64[1] < 0.0)
      v15 = 0.0;
    if (v15 >= v14)
      v15 = v1->f64[1];
    v1->f64[1] = v15;
    v16 = v1[5].f64[1] + v15 - v14;
    v1[5].f64[0] = v13 - v13 + v1[5].f64[0];
    v1[5].f64[1] = v16;
    v17 = v2.f64[1] + v14 - v15;
    v18 = v9 - v9 + v1[6].f64[0];
    v19 = v17 - v2.f64[1] + v1[6].f64[1];
    v20 = limit.height - v14;
    if (v2.f64[1] + v17 < v20)
      v20 = v2.f64[1] + v17;
    if (v17 > v20)
      v20 = v2.f64[1] + v14 - v15;
    v1[4].f64[0] = v9;
    v1[4].f64[1] = v20;
    v1[6].f64[0] = v9 - v9 + v18;
    v1[6].f64[1] = v19 + v20 - v17;
  }
}

uint64_t ScrollGeometry.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(102);
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  v0._object = (void *)0x80000002352DDA30;
  String.append(_:)(v0);
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x6E65746E6F63202CLL;
  v1._object = (void *)0xEE0020657A695374;
  String.append(_:)(v1);
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000002352DDA50;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._object = (void *)0x80000002352DDA70;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x6C6269736976202CLL;
  v4._object = (void *)0xEE00207463655265;
  String.append(_:)(v4);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t ScrollGeometry.EdgeInsetDescription.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x6E696461656C202CLL;
  v1._object = (void *)0xEB00000000203A67;
  String.append(_:)(v1);
  v2._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6D6F74746F62202CLL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x696C69617274202CLL;
  v5._object = (void *)0xEC000000203A676ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A706F743CLL;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ScrollGeometry.EdgeInsetDescription()
{
  return ScrollGeometry.EdgeInsetDescription.debugDescription.getter();
}

double _ScrollLayout.contentOffset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void _ScrollLayout.contentOffset.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*_ScrollLayout.contentOffset.modify())()
{
  return _ViewInputs.base.modify;
}

double _ScrollLayout.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void _ScrollLayout.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*_ScrollLayout.size.modify())()
{
  return _ViewInputs.base.modify;
}

double _ScrollLayout.visibleRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void _ScrollLayout.visibleRect.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = a4;
}

uint64_t (*_ScrollLayout.visibleRect.modify())()
{
  return _ViewInputs.base.modify;
}

double _ScrollLayout.init(contentOffset:size:visibleRect:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>)
{
  double result;

  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(double *)(a1 + 48) = a4;
  *(double *)(a1 + 56) = a5;
  *(double *)(a1 + 64) = a6;
  *(double *)(a1 + 72) = a7;
  *(double *)(a1 + 80) = a8;
  *(double *)(a1 + 88) = a9;
  return result;
}

BOOL specialized static ScrollGeometry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48))))), 7uLL))) & 1) != 0&& *(double *)(a1 + 64) == *(double *)(a2 + 64)&& *(double *)(a1 + 72) == *(double *)(a2 + 72))
  {
    return CGRectEqualToRect(*(CGRect *)(a1 + 80), *(CGRect *)(a2 + 80));
  }
  return result;
}

BOOL specialized static _ScrollLayout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48))))), 7uLL))) & 1) != 0&& CGRectEqualToRect(*(CGRect *)(a1 + 64), *(CGRect *)(a2 + 64));
}

__n128 sub_234A3F378@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

float64x2_t sub_234A3F384(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = *a1;
  v3 = *a2;
  *a2 = *a1;
  result = vaddq_f64(vsubq_f64(v2, v3), a2[5]);
  a2[5] = result;
  return result;
}

__n128 sub_234A3F3A4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

float64x2_t sub_234A3F3B0(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t result;

  v2 = *a1;
  v3 = a2[4];
  a2[4] = *a1;
  result = vaddq_f64(vsubq_f64(v2, v3), a2[6]);
  a2[6] = result;
  return result;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollGeometry(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollGeometry(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScrollGeometry()
{
  return &type metadata for ScrollGeometry;
}

ValueMetadata *type metadata accessor for _ScrollLayout()
{
  return &type metadata for _ScrollLayout;
}

void *type metadata accessor for ScrollGeometry.EdgeInsetDescription()
{
  return &unk_25061BAA8;
}

BOOL static Image.ResizingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Image.ResizingMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Image.ResizingMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Image.resizable(capInsets:resizingMode:)(char *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  char v11;
  uint64_t v12;

  v11 = *a1;
  type metadata accessor for ImageProviderBox<Image.ResizableProvider>(0);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(double *)(v12 + 24) = a3;
  *(double *)(v12 + 32) = a4;
  *(double *)(v12 + 40) = a5;
  *(double *)(v12 + 48) = a6;
  *(_BYTE *)(v12 + 56) = v11;
  swift_retain();
  return v12;
}

void type metadata accessor for ImageProviderBox<Image.ResizableProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ImageProviderBox<Image.ResizableProvider>)
  {
    v2 = lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider();
    v4 = type metadata accessor for ImageProviderBox(a1, (uint64_t)&type metadata for Image.ResizableProvider, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.ResizableProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider;
  if (!lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.ResizableProvider, &type metadata for Image.ResizableProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider;
  if (!lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.ResizableProvider, &type metadata for Image.ResizableProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider);
  }
  return result;
}

double Image.ResizingInfo.capInsets.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Image.ResizingInfo.capInsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*Image.ResizingInfo.capInsets.modify())()
{
  return _ViewInputs.base.modify;
}

void Image.ResizingInfo.mode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *Image.ResizingInfo.mode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*Image.ResizingInfo.mode.modify())()
{
  return _ViewInputs.base.modify;
}

double one-time initialization function for resizable()
{
  double result;

  result = 0.0;
  static Image.ResizingInfo.resizable = 0u;
  xmmword_2561A7438 = 0u;
  byte_2561A7448 = 1;
  return result;
}

char *Image.ResizingInfo.init(capInsets:mode:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6;

  v6 = *result;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

double static Image.ResizingInfo.resizable.getter@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;

  if (one-time initialization token for resizable != -1)
    swift_once();
  v2 = byte_2561A7448;
  result = *(double *)&static Image.ResizingInfo.resizable;
  v4 = xmmword_2561A7438;
  *(_OWORD *)a1 = static Image.ResizingInfo.resizable;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t Image.ResizableProvider.base.getter()
{
  return swift_retain();
}

uint64_t Image.ResizableProvider.base.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Image.ResizableProvider.base.modify())()
{
  return _ViewInputs.base.modify;
}

double Image.ResizableProvider.capInsets.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void Image.ResizableProvider.capInsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*Image.ResizableProvider.capInsets.modify())()
{
  return _ViewInputs.base.modify;
}

void Image.ResizableProvider.resizingMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

_BYTE *Image.ResizableProvider.resizingMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = *result;
  return result;
}

uint64_t (*Image.ResizableProvider.resizingMode.modify())()
{
  return _ViewInputs.base.modify;
}

__n128 Image.ResizableProvider.resolve(in:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __n128 result;
  __int128 v7;

  v7 = *(_OWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v1 + 80))((_QWORD *)a1);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = v5;
  Image.Resolved.image.didset();
  return result;
}

uint64_t Image.ResizableProvider.resolveNamedImage(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

__n128 protocol witness for ImageProvider.resolve(in:) in conformance Image.ResizableProvider@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __n128 result;
  __int128 v7;

  v7 = *(_OWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v1 + 80))((_QWORD *)a1);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = v5;
  Image.Resolved.image.didset();
  return result;
}

uint64_t protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.ResizableProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

void Image.ResizingInfo.encode(to:)()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = *(double *)v0;
  v2 = *(double *)(v0 + 8);
  v3 = *(double *)(v0 + 16);
  v4 = *(double *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) != 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v1 != 0.0 || v2 != 0.0 || v3 != 0.0 || v4 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(v1, v2, v3, v4);
  }
}

unint64_t Image.ResizingInfo.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = (_QWORD *)result;
  v28 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for resizable != -1)
    result = swift_once();
  v22 = xmmword_2561A7438;
  v23 = static Image.ResizingInfo.resizable;
  v5 = byte_2561A7448;
  v24 = byte_2561A7448;
  v6 = v3[1];
  v7 = v3[2];
  if (v6 >= v7)
  {
LABEL_49:
    v3[3] = 0;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_BYTE *)(a2 + 32) = v5;
    return result;
  }
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v9 = v3[4];
      if (v6 < v9)
        goto LABEL_14;
      if (v9 < v6)
        goto LABEL_47;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
      goto LABEL_47;
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_47;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_54;
          v10 = v3[1] + result;
          if (v7 < v10)
            goto LABEL_47;
          v3[3] = 8;
          v3[4] = v10;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v24 = result != 1;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (!v2)
              goto LABEL_7;
            return result;
          case 1uLL:
            v8 = v3[1] + 8;
            if (v7 < v8)
              goto LABEL_47;
            goto LABEL_6;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_55;
            v8 = v3[1] + result;
            if (v7 < v8)
              goto LABEL_47;
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            v8 = v3[1] + 4;
            if (v7 < v8)
              goto LABEL_47;
            goto LABEL_6;
          default:
            goto LABEL_47;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_47;
    v11 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
    v11[2] = v13 + 1;
    v11[v13 + 4] = v7;
    v3[5] = v11;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if ((result & 0x8000000000000000) != 0)
      break;
    v14 = v3[1] + result;
    if (v7 < v14)
      goto LABEL_47;
    v3[2] = v14;
    v26 = 0u;
    v27 = 0u;
    closure #1 in EdgeInsets.init(from:)((unint64_t)&v26, v3, &v25);
    v15 = (_QWORD *)v3[5];
    if (!v15[2])
      goto LABEL_53;
    v22 = v27;
    v23 = v26;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v16 = v15[2];
      if (!v16)
        goto LABEL_46;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      v15 = (_QWORD *)result;
      v16 = *(_QWORD *)(result + 16);
      if (!v16)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    v17 = v16 - 1;
    v18 = v15[v17 + 4];
    v15[2] = v17;
    v3[5] = v15;
    v3[2] = v18;
LABEL_7:
    v6 = v3[1];
    v7 = v3[2];
    if (v6 >= v7)
    {
      v5 = v24;
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  __break(1u);
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v21 = *(_QWORD *)(result + 16);
  if (!v21)
    __break(1u);
  v19 = v21 - 1;
  v20 = *(_QWORD *)(result + 8 * v19 + 32);
  *(_QWORD *)(result + 16) = v19;
  v3[5] = result;
  v3[2] = v20;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Image.ResizingInfo()
{
  Image.ResizingInfo.encode(to:)();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Image.ResizingInfo@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Image.ResizingInfo.init(from:)(a1, a2);
}

uint64_t Image.ResizingMode.protobufValue.getter()
{
  unsigned __int8 *v0;

  return ~*v0 & 1;
}

uint64_t Image.ResizingMode.init(protobufValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2 * (result != 1);
  if (!result)
    v2 = 1;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance Image.ResizingMode()
{
  unsigned __int8 *v0;

  return ~*v0 & 1;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Image.ResizingMode@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2 * (result != 1);
  if (!result)
    v2 = 1;
  *a2 = v2;
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  double v14[5];

  v14[4] = *(double *)MEMORY[0x24BDAC8D0];
  v9 = v4[1];
  v10 = (_QWORD *)v4[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v10[v12 + 4] = v9;
  v4[3] = v10;
  if (__OFADD__(v9, 1))
    __break(1u);
  v4[1] = v9 + 1;
  v14[0] = a1;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  closure #1 in EdgeInsets.encode(to:)(v14, v4);
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(Swift::UInt a1, Swift::UInt a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD **)(v2 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  *(_QWORD *)(v2 + 24) = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 8) = v5 + 1;
    if (a1)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(a1);
    }
    if (a2)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(a2);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  Swift::UInt v8;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(_QWORD *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = HIDWORD(a1);
    *(_QWORD *)(v1 + 8) = v3 + 1;
    if ((_DWORD)a1)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(a1);
    }
    if (v8)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v8);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

void specialized ProtobufEncoder.encodeMessage<A>(_:)(void *a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = v3[1];
  v9 = (_QWORD *)v3[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v9[v11 + 4] = v8;
  v3[3] = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_19:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    goto LABEL_8;
  }
  v3[1] = v8 + 1;
  if ((a3 & 0x10000) != 0)
  {
    outlined copy of AccessibilityText.Storage(a1, a2, a3 & 1);
    specialized ProtobufEncoder.messageField<A>(_:_:)(3);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, 1);
    if (v4)
      return;
    goto LABEL_16;
  }
  swift_retain();
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v8 = v3[1];
  v9 = (_QWORD *)v3[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_19;
LABEL_8:
  v13 = v9[2];
  v12 = v9[3];
  if (v13 >= v12 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
  v9[2] = v13 + 1;
  v9[v13 + 4] = v8;
  v3[3] = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  v3[1] = v8 + 1;
  CodableResolvedStyledText.encode(to:)(v3, (uint64_t)a1);
  if (v4)
  {
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, 0);
    return;
  }
  ProtobufEncoder.endLengthDelimited()();
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, 0);
LABEL_16:
  ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *v14;

  v5 = v2[1];
  v6 = (_QWORD *)v2[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  v2[3] = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v2[1] = v5 + 1;
  if (!a1)
    goto LABEL_11;
  ProtobufEncoder.encodeVarint(_:)(9uLL);
  v10 = v2[1];
  isUniquelyReferenced_nonNull_native = v10 + 8;
  if (__OFADD__(v10, 8))
    goto LABEL_18;
  if (v2[2] < isUniquelyReferenced_nonNull_native)
  {
LABEL_19:
    v11 = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
    goto LABEL_10;
  }
  v2[1] = isUniquelyReferenced_nonNull_native;
  v11 = (_QWORD *)(*v2 + v10);
LABEL_10:
  *v11 = a1;
LABEL_11:
  if (a2)
  {
    ProtobufEncoder.encodeVarint(_:)(0x11uLL);
    v12 = v2[1];
    v13 = v12 + 8;
    if (__OFADD__(v12, 8))
    {
      __break(1u);
    }
    else if (v2[2] >= v13)
    {
      v2[1] = v13;
      v14 = (_QWORD *)(*v2 + v12);
LABEL_15:
      *v14 = a2;
      return ProtobufEncoder.endLengthDelimited()();
    }
    v14 = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v13);
    goto LABEL_15;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CC_LONG h4;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  Swift::UInt v20;
  uint64_t result;
  CC_SHA1_CTX c;
  SwiftUI::StrongHasher into;
  uint64_t v24;

  v4 = v2;
  v24 = *MEMORY[0x24BDAC8D0];
  v7 = v2[1];
  v8 = (_QWORD *)v2[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  v4[3] = v8;
  if (__OFADD__(v7, 1))
    __break(1u);
  v4[1] = v7 + 1;
  v11 = v4[2];
  v12 = v4[4];
  *(_QWORD *)&into.state.h0 = *v4;
  *(_QWORD *)&into.state.h2 = v7 + 1;
  *(_QWORD *)&into.state.h4 = v11;
  *(_QWORD *)&into.state.Nh = v8;
  *(_QWORD *)&into.state.data[1] = v12;
  v13 = ProtobufEncoder.archiveWriter.getter();
  if (!v13)
  {
    ProtobufEncoder.dataField(_:_:)(2, a1, a2);
    return ProtobufEncoder.endLengthDelimited()();
  }
  v14 = v13;
  memset(&c, 0, sizeof(c));
  outlined copy of Data._Representation(a1, a2);
  CC_SHA1_Init(&c);
  into.state = c;
  Data.hash(into:)(&into);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
  outlined consume of Data._Representation(a1, a2);
  h4 = c.h4;
  v17 = *(_QWORD *)&c.h0;
  v16 = *(_QWORD *)&c.h2;
  swift_beginAccess();
  v18 = specialized Collection<>.firstIndex(of:)(v17, v16, h4, *(_QWORD *)(v14 + 32));
  if ((v19 & 1) != 0)
  {
    *(_QWORD *)&c.h0 = v17;
    *(_QWORD *)&c.h2 = v16;
    c.h4 = h4;
    LOBYTE(c.Nl) = 0;
    outlined copy of Data._Representation(a1, a2);
    v20 = specialized ArchiveWriter.addAttachment(hash:from:)((uint64_t *)&c, v14, a1, a2);
    outlined consume of Data._Representation(a1, a2);
    if (v3)
      return swift_release();
  }
  else
  {
    v20 = v18;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v20);
    swift_release();
    return ProtobufEncoder.endLengthDelimited()();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(float a1, float a2, float a3, float a4)
{
  _QWORD *v4;
  uint64_t v9;
  _QWORD *v10;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  int64_t v17;
  float *v18;
  uint64_t v19;
  int64_t v20;
  float *v21;
  uint64_t v22;
  int64_t v23;
  float *v24;

  v9 = v4[1];
  v10 = (_QWORD *)v4[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  v4[3] = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v4[1] = v9 + 1;
  if (a1 == 0.0)
  {
    if (a2 == 0.0)
      goto LABEL_8;
    goto LABEL_14;
  }
  ProtobufEncoder.encodeVarint(_:)(0xDuLL);
  v14 = v4[1];
  isUniquelyReferenced_nonNull_native = v14 + 4;
  if (__OFADD__(v14, 4))
    goto LABEL_29;
  if (v4[2] >= isUniquelyReferenced_nonNull_native)
  {
    v4[1] = isUniquelyReferenced_nonNull_native;
    v15 = (float *)(*v4 + v14);
    goto LABEL_13;
  }
LABEL_30:
  v15 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_13:
  *v15 = a1;
  if (a2 == 0.0)
  {
LABEL_8:
    if (a3 == 0.0)
      goto LABEL_22;
    goto LABEL_18;
  }
LABEL_14:
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  v16 = v4[1];
  v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (v4[2] >= v17)
  {
    v4[1] = v17;
    v18 = (float *)(*v4 + v16);
    goto LABEL_17;
  }
  v18 = (float *)ProtobufEncoder.growBufferSlow(to:)(v17);
LABEL_17:
  *v18 = a2;
  if (a3 == 0.0)
    goto LABEL_22;
LABEL_18:
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  v19 = v4[1];
  v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v4[2] < v20)
  {
LABEL_34:
    v21 = (float *)ProtobufEncoder.growBufferSlow(to:)(v20);
    goto LABEL_21;
  }
  v4[1] = v20;
  v21 = (float *)(*v4 + v19);
LABEL_21:
  *v21 = a3;
LABEL_22:
  if (a4 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    v22 = v4[1];
    v23 = v22 + 4;
    if (__OFADD__(v22, 4))
    {
      __break(1u);
    }
    else if (v4[2] >= v23)
    {
      v4[1] = v23;
      v24 = (float *)(*v4 + v22);
LABEL_26:
      *v24 = a4;
      return ProtobufEncoder.endLengthDelimited()();
    }
    v24 = (float *)ProtobufEncoder.growBufferSlow(to:)(v23);
    goto LABEL_26;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  int Identifier;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[9];
  _BYTE v17[40];

  v3 = v1;
  v5 = v1[1];
  v6 = (_QWORD *)v1[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  v3[3] = v6;
  v10 = __OFADD__(v5, 1);
  v11 = v5 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v3[1] = v11;
    Identifier = CGImageGetIdentifier();
    v13 = v3[2];
    v14 = v3[4];
    v16[4] = *v3;
    v16[5] = v11;
    v16[6] = v13;
    v16[7] = v6;
    v16[8] = v14;
    ProtobufEncoder.archiveHost.getter((uint64_t)v17);
    MEMORY[0x24BDAC7A8](v15);
    v16[2] = v17;
    v16[3] = a1;
    specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(Identifier, (void (*)(void))partial apply for closure #1 in CodableCGImage.encode(to:), (unint64_t)v16);
    result = outlined destroy of AnyArchivedViewHost?((uint64_t)v17);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = v1[1];
  v4 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v1[3] = v4;
  if (__OFADD__(v3, 1))
    __break(1u);
  v1[1] = v3 + 1;
  v7 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v7;
  v11 = *(_QWORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v8;
  closure #1 in ProjectionTransform.encode(to:)((double *)v10, v1);
  return ProtobufEncoder.endLengthDelimited()();
}

{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(_QWORD *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 8) = v3 + 1;
    if ((a1 & 0x10000000000) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if ((_DWORD)a1)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(a1);
    }
    if ((a1 & 0x100000000) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  *(_QWORD *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_QWORD *)(v1 + 8) = v3 + 1;
  if ((a1 & 0x80000000) != 0)
  {
LABEL_11:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(8uLL);
  ProtobufEncoder.encodeVarint(_:)(a1);
  if ((a1 & 0x100000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  return ProtobufEncoder.endLengthDelimited()();
}

{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  double v13;
  unint64_t v14;
  unint64_t v15;

  v5 = v1;
  v7 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(_QWORD *)(v5 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_14:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
    goto LABEL_9;
  }
  *(_QWORD *)(v5 + 8) = v7 + 1;
  (*(void (**)(void))(*(_QWORD *)a1 + 96))();
  v11 = specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  if (v2)
    return swift_unknownObjectRelease();
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 88))(v11);
  v4 = v13;
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD **)(v5 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_14;
LABEL_9:
  v15 = v8[2];
  v14 = v8[3];
  if (v15 >= v14 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v15 + 1;
  v8[v15 + 4] = v7;
  *(_QWORD *)(v5 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 8) = v7 + 1;
    CGSize.encode(to:)((double *)v5, v3, v4);
    ProtobufEncoder.endLengthDelimited()();
    swift_unknownObjectRelease();
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(_QWORD *)(v1 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 8) = v4 + 1;
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    v9 = *(double *)a1;
    v10 = *(double *)(a1 + 8);
    v11 = *(double *)(a1 + 16);
    v12 = *(double *)(a1 + 24);
    if (*(double *)a1 == 0.0 && v10 == 0.0 && v11 == 0.0 && v12 == 0.0)
      return ProtobufEncoder.endLengthDelimited()();
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v9, v10, v11, v12);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(a1, EllipticalGradient._Paint.encode(to:));
}

{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(a1, AngularGradient._Paint.encode(to:));
}

{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(a1, RadialGradient._Paint.encode(to:));
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, float a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;

  v5 = v2[1];
  v6 = (_QWORD *)v2[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  v2[3] = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2[1] = v5 + 1;
  if ((_DWORD)a1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(a1);
  }
  if ((a1 & 0x100000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if (a2 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v10 = v2[1];
    isUniquelyReferenced_nonNull_native = v10 + 4;
    if (!__OFADD__(v10, 4))
    {
      if (v2[2] >= isUniquelyReferenced_nonNull_native)
      {
        v2[1] = isUniquelyReferenced_nonNull_native;
        v11 = (float *)(*v2 + v10);
LABEL_14:
        *v11 = a2;
        return ProtobufEncoder.endLengthDelimited()();
      }
LABEL_18:
      v11 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_14;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(_OWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[5];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = v1[1];
  v4 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v1[3] = v4;
  if (__OFADD__(v3, 1))
    __break(1u);
  v1[1] = v3 + 1;
  v7 = a1[3];
  v10[2] = a1[2];
  v10[3] = v7;
  v10[4] = a1[4];
  v8 = a1[1];
  v10[0] = *a1;
  v10[1] = v8;
  closure #1 in _ColorMatrix.encode(to:)((float *)v10, v1);
  return ProtobufEncoder.endLengthDelimited()();
}

{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = v1[1];
  v4 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v1[3] = v4;
  if (__OFADD__(v3, 1))
    __break(1u);
  v1[1] = v3 + 1;
  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[2] = a1[2];
  closure #1 in CGAffineTransform.encode(to:)((double *)v9, v1);
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(int a1, unint64_t a2, char a3, float a4)
{
  _QWORD *v4;
  uint64_t v9;
  _QWORD *v10;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  float *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  _DWORD *v22;

  v9 = v4[1];
  v10 = (_QWORD *)v4[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  v4[3] = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  v4[1] = v9 + 1;
  if (a4 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    v14 = v4[1];
    v15 = v14 + 4;
    if (__OFADD__(v14, 4))
    {
      __break(1u);
    }
    else if (v4[2] >= v15)
    {
      v4[1] = v15;
      v16 = (float *)(*v4 + v14);
      goto LABEL_12;
    }
    v16 = (float *)ProtobufEncoder.growBufferSlow(to:)(v15);
LABEL_12:
    *v16 = a4;
    if ((a2 & 1) != 0)
      goto LABEL_18;
    goto LABEL_13;
  }
  if ((a2 & 1) != 0)
    goto LABEL_18;
LABEL_13:
  if ((a1 & 0x7FFFFFFF) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v17 = v4[1];
    isUniquelyReferenced_nonNull_native = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      if (v4[2] >= isUniquelyReferenced_nonNull_native)
      {
        v4[1] = isUniquelyReferenced_nonNull_native;
        v18 = (_DWORD *)(*v4 + v17);
LABEL_17:
        *v18 = a1;
        goto LABEL_18;
      }
LABEL_27:
      v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_17;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_18:
  if ((a3 & 1) == 0)
  {
    v19 = HIDWORD(a2);
    if ((v19 & 0x7FFFFFFF) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
      v20 = v4[1];
      v21 = v20 + 4;
      if (__OFADD__(v20, 4))
      {
        __break(1u);
      }
      else if (v4[2] >= v21)
      {
        v4[1] = v21;
        v22 = (_DWORD *)(*v4 + v20);
LABEL_23:
        *v22 = v19;
        return ProtobufEncoder.endLengthDelimited()();
      }
      v22 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v21);
      goto LABEL_23;
    }
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(double a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t isUniquelyReferenced_nonNull_native;
  double *i;
  unint64_t v14;
  unint64_t v15;

  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD **)(v3 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(_QWORD *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)(v3 + 8) = v7 + 1;
  if (a1 == 0.0)
    goto LABEL_11;
  ProtobufEncoder.encodeVarint(_:)(9uLL);
  v11 = *(_QWORD *)(v3 + 8);
  isUniquelyReferenced_nonNull_native = v11 + 8;
  if (__OFADD__(v11, 8))
    goto LABEL_19;
  if (*(_QWORD *)(v3 + 16) < isUniquelyReferenced_nonNull_native)
    goto LABEL_20;
  *(_QWORD *)(v3 + 8) = isUniquelyReferenced_nonNull_native;
  for (i = (double *)(*(_QWORD *)v3 + v11);
        ;
        i = (double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native))
  {
    *i = a1;
LABEL_11:
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v7 = *(_QWORD *)(v3 + 8);
    v8 = *(_QWORD **)(v3 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_17:
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v8 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v15 = v8[2];
    v14 = v8[3];
    if (v15 >= v14 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
      v8 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v8[2] = v15 + 1;
    v8[v15 + 4] = v7;
    *(_QWORD *)(v3 + 24) = v8;
    if (!__OFADD__(v7, 1))
      break;
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    ;
  }
  *(_QWORD *)(v3 + 8) = v7 + 1;
  CGPoint.encode(to:)((double *)v3, a2, a3);
  ProtobufEncoder.endLengthDelimited()();
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD **)(v0 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v3[2] = v6 + 1;
  v3[v6 + 4] = v2;
  *(_QWORD *)(v0 + 24) = v3;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 8) = v2 + 1;
    if (!Locale.identifier.getter() && v7 == 0xE000000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (ProtobufEncoder.stringFieldAlways(_:_:)(1), !v1))
    {
      swift_bridgeObjectRelease();
      return ProtobufEncoder.endLengthDelimited()();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD **)(v0 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(_QWORD *)(v2 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 8) = v3 + 1;
    result = LinearGradient._Paint.encode(to:)(v2);
    if (!v1)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v2 = v0;
  v3 = v0[1];
  v4 = (_QWORD *)v0[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  v2[3] = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v2[1] = v3 + 1;
    result = ImagePaint._Paint.encode(to:)(v2);
    if (!v1)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(__int16 a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(_QWORD *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 8) = v3 + 1;
    if ((a1 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if ((a1 & 0x100) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(_QWORD *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 8) = v3 + 1;
    if ((a1 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if ((a1 & 0x100) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;

  v5 = v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD **)(v2 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  *(_QWORD *)(v5 + 24) = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 8) = v6 + 1;
    result = a2(v5);
    if (!v3)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x24BEE1110]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = a1 + 1;
  return outlined init with take of Text.Effect.PathInterpolator.Glyph(a2, v3 + 120 * a1 + 32);
}

uint64_t specialized Array._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v5 = v3[2];
    if (v5)
    {
LABEL_3:
      v6 = v5 - 1;
      v7 = &v3[3 * v6];
      v8 = v7[4];
      v9 = *((_DWORD *)v7 + 10);
      v10 = v7[6];
      *(_QWORD *)a1 = v8;
      *(_DWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v10;
      v3[2] = v6;
      *v1 = v3;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  int v9;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v5 = v3[2];
    if (v5)
    {
LABEL_3:
      v6 = v5 - 1;
      v7 = &v3[6 * v6];
      v8 = *((_BYTE *)v7 + 48);
      v9 = *((_DWORD *)v7 + 18);
      *(_OWORD *)a1 = *((_OWORD *)v7 + 2);
      *(_BYTE *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 7);
      *(_DWORD *)(a1 + 40) = v9;
      v3[2] = v6;
      *v1 = v3;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
    {
LABEL_3:
      v6 = v5 - 1;
      v7 = v3 + 20 * v6;
      v8 = *(_DWORD *)(v7 + 48);
      *(_OWORD *)a1 = *(_OWORD *)(v7 + 32);
      *(_DWORD *)(a1 + 16) = v8;
      *(_QWORD *)(v3 + 16) = v6;
      *v1 = v3;
      *(_BYTE *)(a1 + 20) = 0;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v5 = v3[2];
    if (v5)
    {
LABEL_3:
      v6 = v5 - 1;
      v7 = &v3[14 * v6];
      v8 = *((_WORD *)v7 + 20);
      v9 = *((_BYTE *)v7 + 42);
      v10 = v7[8];
      v11 = v7[9];
      v12 = *((_DWORD *)v7 + 20);
      v13 = *((_BYTE *)v7 + 84);
      v14 = v7[13];
      v15 = v7[14];
      result = *((unsigned __int8 *)v7 + 136);
      *(_QWORD *)a1 = v7[4];
      *(_WORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 10) = v9;
      *(_OWORD *)(a1 + 16) = *((_OWORD *)v7 + 3);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      *(_DWORD *)(a1 + 48) = v12;
      *(_BYTE *)(a1 + 52) = v13;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 + 11);
      *(_QWORD *)(a1 + 72) = v14;
      *(_QWORD *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(v7 + 15);
      *(_BYTE *)(a1 + 104) = result;
      v3[2] = v6;
      *v1 = v3;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v5 = v3[2];
    if (v5)
    {
LABEL_3:
      v6 = v5 - 1;
      v7 = &v3[15 * v6];
      v8 = *((_DWORD *)v7 + 36);
      v9 = *((_BYTE *)v7 + 148);
      v10 = *((_OWORD *)v7 + 3);
      *(_OWORD *)a1 = *((_OWORD *)v7 + 2);
      *(_OWORD *)(a1 + 16) = v10;
      v11 = *((_OWORD *)v7 + 5);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)v7 + 4);
      *(_OWORD *)(a1 + 48) = v11;
      v12 = *((_OWORD *)v7 + 7);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)v7 + 6);
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = *((_OWORD *)v7 + 8);
      *(_DWORD *)(a1 + 112) = v8;
      *(_BYTE *)(a1 + 116) = v9;
      v3[2] = v6;
      *v1 = v3;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v5 = v3[2];
    if (v5)
    {
LABEL_3:
      v6 = v5 - 1;
      v7 = &v3[4 * v6];
      v8 = *((_DWORD *)v7 + 12);
      v9 = v7[7];
      *(_OWORD *)a1 = *((_OWORD *)v7 + 2);
      *(_DWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v9;
      v3[2] = v6;
      *v1 = v3;
      *(_BYTE *)(a1 + 32) = 0;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._customRemoveLast()()
{
  _QWORD **v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v3 = v1[2];
    if (v3)
    {
LABEL_3:
      v4 = v3 - 1;
      result = v1[v4 + 4];
      v1[2] = v4;
      *v0 = v1;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    v1 = (_QWORD *)result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Image.ResizingInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) != 0)return (*(unsigned __int8 *)(a2 + 32) ^ *(unsigned __int8 *)(a1 + 32) ^ 1) & 1;
  else
    return 0;
}

uint64_t specialized static Image.ResizableProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  char v12;
  uint64_t result;
  BOOL v14;
  BOOL v15;

  v3 = *(double *)(a1 + 8);
  v2 = *(double *)(a1 + 16);
  v5 = *(double *)(a1 + 24);
  v4 = *(double *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 40);
  v8 = *(double *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 24);
  v9 = *(double *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if (v3 != v8 || v2 != v7 || v5 != v10 || v4 != v9)
      return 0;
    return v6 ^ v11 ^ 1u;
  }
  v12 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  result = 0;
  if ((v12 & 1) != 0)
  {
    v14 = v3 == v8 && v2 == v7;
    v15 = v14 && v5 == v10;
    if (v15 && v4 == v9)
      return v6 ^ v11 ^ 1u;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.ResizingMode and conformance Image.ResizingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.ResizingMode and conformance Image.ResizingMode;
  if (!lazy protocol witness table cache variable for type Image.ResizingMode and conformance Image.ResizingMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.ResizingMode, &type metadata for Image.ResizingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizingMode and conformance Image.ResizingMode);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.ResizableProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for Image.ResizingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234A424CC + 4 * byte_23527FE05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234A42500 + 4 * byte_23527FE00[v4]))();
}

uint64_t sub_234A42500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A42508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A42510);
  return result;
}

uint64_t sub_234A4251C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A42524);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234A42528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A42530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Image.ResizingMode()
{
  return &type metadata for Image.ResizingMode;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Image.ResizingInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.ResizingInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.ResizingInfo()
{
  return &type metadata for Image.ResizingInfo;
}

uint64_t destroy for Image.ResizableProvider()
{
  return swift_release();
}

uint64_t initializeWithCopy for Image.ResizableProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Image.ResizableProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Image.ResizableProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.ResizableProvider(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.ResizableProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.ResizableProvider()
{
  return &type metadata for Image.ResizableProvider;
}

id outlined copy of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(void *a1, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    outlined consume of AccessibilityText.Storage(a1, a2, a3 & 1);
  else
    swift_release();
}

void outlined consume of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

void partial apply for closure #1 in CodableCGImage.encode(to:)(CGDataConsumer *a1)
{
  uint64_t v1;

  closure #1 in CodableCGImage.encode(to:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined destroy of AnyArchivedViewHost?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AnyArchivedViewHost?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyArchivedViewHost?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyArchivedViewHost?)
  {
    type metadata accessor for AnyArchivedViewHost();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?);
  }
}

unint64_t type metadata accessor for AnyArchivedViewHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AnyArchivedViewHost;
  if (!lazy cache variable for type metadata for AnyArchivedViewHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t outlined init with take of Text.Effect.PathInterpolator.Glyph(__int128 *a1, uint64_t a2)
{
  __swift_memcpy113_8(a2, a1);
  return a2;
}

double EnvironmentValues.defaultPadding.getter()
{
  uint64_t *v0;
  uint64_t v1;
  double v2;
  uint64_t v3;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    v3 = swift_retain_n();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v3);
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.defaultPadding : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    v6 = v5;
    v8 = v7;
    v10 = v9;
    swift_release_n();
  }
  else
  {
    v11 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v11);
    v6 = v12;
    v8 = v13;
    v10 = v14;
  }
  result = swift_release_n();
  *a2 = v4;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v8;
  *((_QWORD *)a2 + 3) = v10;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultPadding : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultPadding.setter(*a1, a1[1], a1[2], a1[3]);
}

uint64_t EnvironmentValues.defaultPadding.setter(double a1, double a2, double a3, double a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = *v4;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v4, a1, a2, a3, a4);
  swift_release();
  if (v4[1])
  {
    v10 = *v4;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

